[
  {
    "owner": "evidence-dev",
    "repo": "evidence",
    "content": "TITLE: Creating a Line Chart Component\nDESCRIPTION: This snippet shows how to integrate a Line Chart component in Evidence, using inline data to visualize sales over months. It demonstrates the declaration of a component with attributes for data and titles.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<LineChart \n    data = {orders_by_month}    \n    y = sales_usd \n    title = 'Sales by Month, USD' \n/>\n```\n\n----------------------------------------\n\nTITLE: SQL Queries with Parameters in Evidence\nDESCRIPTION: Illustrates SQL queries with parameters in Evidence, which can be derived from component inputs or URL parameters. Parameters enhance query flexibility and are indicated using '${inputs.parameter_name}' or '${params.parameter_name}' within the SQL logic. Queries should account for the provided parameter type and ensure correct mapping to variables.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/queries/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```sql sales_by_month\nselect\n    date_trunc('month', date) as month,\n    sum(sales) as sales\nfrom needful_things.orders\nwhere category = '${inputs.category}'\ngroup by 1\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Evidence Component in HTML\nDESCRIPTION: This snippet demonstrates how to use the BarChart component in Evidence to create a chart displaying sales by category. It shows how to pass data and configuration options as properties.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/components/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<BarChart\n\tdata=\"{orders_by_month}\"\n\tx=\"order_month\"\n\ty=\"sales_usd0k\"\n\tseries=\"category\"\n\ttitle=\"Sales by Category\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Most Liked Tags by Time Period in SQL\nDESCRIPTION: This SQL query identifies the top 5 hashtags that received the most likes within a specified time range. It counts likes for each hashtag per day, groups the results, and filters to include only the most liked tags.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/trends.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nWITH EVERYTHING AS (\n    SELECT  COUNT(l.id) as likes,\n            h.tag,\n            date_trunc('day', p.created_at) as w,\n            h.id as hashtag_id\n        FROM likes l\n            INNER JOIN posts p on l.post_id = p.id\n            INNER JOIN post_tags pt ON p.id = pt.post_id\n            INNER JOIN hashtags h ON pt.hashtag_id = h.id\n        WHERE p.created_at > (CURRENT_DATE - INTERVAL ${inputs.time_range.value})\n        GROUP BY h.tag, date_trunc('day', p.created_at), h.id\n        ORDER BY 1 DESC\n)\nSELECT * FROM EVERYTHING\nGROUP BY ALL\nHAVING tag IN (\n    SELECT tag FROM EVERYTHING GROUP BY ALL ORDER BY SUM(likes) DESC LIMIT 5\n)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Evidence Template\nDESCRIPTION: This snippet outlines the steps to create a new project using the Evidence template. It uses 'npx' to download the template without cloning the repository and then installs project dependencies. The final command starts the development server. Dependencies include npm, npx, and a Node.js setup.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Querying and Displaying Recent Orders in Evidence\nDESCRIPTION: The snippet refines the previous data query to select the most recent 100 orders, displaying only essential columns using another DataTable in Evidence. The focus is on sending discount codes to these customers based on the recent order data obtained.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect order_datetime, first_name, last_name, email from needful_things.my_query order by order_datetime desc limit 100\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<DataTable data={my_query_summary_top100} />\n```\n\n----------------------------------------\n\nTITLE: Using Loops in Evidence Markdown\nDESCRIPTION: This snippet demonstrates how to loop through a dataset in Evidence Markdown. It uses the `{#each}` syntax to iterate over `orders_by_month` and display a list of orders for each month.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{#each orders_by_month as month}\n\n- There were <Value data={month} column=number_of_orders/> orders in <Value data={month} />.\n\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Aggregations and Formats in DataTable\nDESCRIPTION: This snippet demonstrates how to use custom aggregation values and formats for the total row in a DataTable. It shows setting static text and using a specific data value for aggregation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} totalRow=true rows=5>\n  <Column id=country totalAgg=\"Just the USA\"/>\n  <Column id=gdp_usd totalAgg={countries[0].gdp_usd} totalFmt=usd/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Grouped DataTable with Advanced Column Configuration\nDESCRIPTION: Creates a DataTable grouped by category with custom column configurations including color scales, formatted numbers, and weighted means for aggregations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_45\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders} groupBy=category subtotals=true totalRow=true> \n \t<Column id=state totalAgg=countDistinct totalFmt='0 \"states\"'/> \n\t<Column id=category totalAgg=Total/> \n\t<Column id=item  totalAgg=countDistinct totalFmt='0 \"items\"'/> \n\t<Column id=orders contentType=colorscale/> \n\t<Column id=sales fmt=usd0k/> \n\t<Column id=growth contentType=delta fmt=pct totalAgg=weightedMean weightCol=sales/> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Filtering Rows in Query - Markdown with SQL Statement\nDESCRIPTION: This code snippet demonstrates how to filter rows based on a specific condition using the `.where()` function. It is implemented in a DataTable component to visualize the filtered data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/query-functions/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<DataTable data={orders.where(`sales > 100`)} />\n```\n\n----------------------------------------\n\nTITLE: Chaining SQL Queries in Evidence\nDESCRIPTION: This snippet showcases how to create dependencies between SQL queries in Evidence by referencing existing queries within new ones using the '${query_name}' syntax. This allows for dynamic query construction and propagation of intermediary results. Dependencies must be handled carefully to avoid circular references or unresolved identifiers.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/queries/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n```sql sales_by_item\nselect\n    item,\n    sum(sales) as sales\nfrom needful_things.orders\ngroup by 1\n```\n\n```sql average_sales\nselect\n    avg(sales) as average_sales\nfrom ${sales_by_item}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Frontmatter in Markdown\nDESCRIPTION: This snippet demonstrates the use of frontmatter in Evidence Markdown for configuring metadata such as title, description, and associated SQL queries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Evidence uses Markdown\ndescription: Evidence uses Markdown to write expressively in text.\nog:\n  image: /my-social-image.png\nqueries:\n  - orders_by_month.sql\n---\n```\n\n----------------------------------------\n\nTITLE: Skipping Rows in Query Result - Markdown with SQL Function\nDESCRIPTION: This code snippet illustrates the use of the `.offset()` function to skip a certain number of rows in the query results, facilitating pagination or similar functionalities.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/query-functions/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<DataTable data={orders.offset(20)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Queries in Svelte\nDESCRIPTION: Demonstrates how to create a component with dynamic queries that respond to user input, allowing for interactive data exploration with controls for query parameters.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/custom/component-queries/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    import { QueryLoad } from '@evidence-dev/core-components';\n    import { getQueryFunction } from '@evidence-dev/component-utilities/buildQuery';\n    import { Query } from '@evidence-dev/sdk/usql';\n\n    // This will hold our current query result\n    let query;\n\n    // Create a reactive query function\n    const queryFunction = Query.createReactive({\n        execFn: getQueryFunction(),\n        callback: v => query = v\n    });\n\n    // These values will control our query\n    let limit = 10;\n    let schemaName = 'public';\n\n    // This reactive statement runs whenever limit or schemaName change\n    $: queryFunction(`\n        SELECT * \n        FROM information_schema.tables \n        WHERE table_schema = '${schemaName}'\n        LIMIT ${limit}\n    `);\n</script>\n\n<div>\n    <label>\n        Rows to show:\n        <input type=\"number\" bind:value={limit} min={0} />\n    </label>\n    <label>\n        Schema:\n        <input type=\"text\" bind:value={schemaName} />\n    </label>\n</div>\n\n<QueryLoad data={query} let:loaded={tables}>\n    <svelte:fragment slot=\"skeleton\" />\n    <ul>\n        {#each tables as table}\n            <li>{table.table_name}</li>\n        {/each}\n    </ul>\n</QueryLoad>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Monthly Orders Using a Bar Chart in Evidence\nDESCRIPTION: The snippet adds a Bar Chart to an Evidence page, querying monthly order counts. The data is selected by grouping orders monthly and renders in a chart, with customization of the x and y axis labels for clarity.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect order_month, count(*) as orders from needful_things.my_query group by order_month order by order_month desc limit 12\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart\n    data={orders_by_month}\n    x=order_month\n    y=orders\n\txFmt=\"mmm yyyy\"\n\txAxisTitle=\"Month\"\n\tyAxisTitle=\"Orders\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Each Loop Syntax in Evidence\nDESCRIPTION: This snippet demonstrates the basic syntax for using an `{#each}` loop in Evidence. It iterates over the rows in a query result and allows referencing each row using an alias.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/loops/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"{#each query_name as alias}\n\n{alias.column_name}\n\n{/each}\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results - Markdown with SQL Function\nDESCRIPTION: This snippet demonstrates how to limit the number of rows returned from a query using the `.limit()` function. It is used within a DataTable component to display a subset of data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/query-functions/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<DataTable data={orders.limit(5)} />\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Authors for a Selected Tag in SQL\nDESCRIPTION: This SQL query counts the number of unique users who have created posts with a specific hashtag within a selected time range. It joins users, posts, and post_tags tables to identify distinct authors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/trends.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(DISTINCT u.ID) as authorCount\nFROM users u\n    INNER JOIN posts p ON p.user_id = u.id\n    INNER JOIN post_tags pt ON pt.post_id = p.id\nWHERE pt.hashtag_id = ${inputs.selected_tag.value} AND p.created_at > CURRENT_DATE - INTERVAL ${inputs.time_range.value}\nGROUP BY pt.hashtag_id\n```\n\n----------------------------------------\n\nTITLE: Using QueryLoad Component in Svelte\nDESCRIPTION: Shows how to use the QueryLoad component to handle query execution, loading states, and error handling when working with database queries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/custom/component-queries/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<QueryLoad data={query} let:loaded={tableData}>\n    <svelte:fragment slot=\"skeleton\" />\n    <!-- Your component content here -->\n</QueryLoad>\n```\n\n----------------------------------------\n\nTITLE: Basic Value Component Usage in Markdown\nDESCRIPTION: Shows the basic syntax for using the Value component to display the first row of the first column from a query result.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Value data={query_name} />\n```\n\n----------------------------------------\n\nTITLE: Filtering Query with DateRange Component\nDESCRIPTION: Shows how to use the date range picker to filter a SQL query. The query uses template literals to reference the selected start and end dates from the date range picker.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange\n    name=range_filtering_a_query\n    data={orders_by_day}\n    dates=day\n/>\n\n```sql filtered_query\nselect \n    *\nfrom ${orders_by_day}\nwhere day between '${inputs.range_filtering_a_query.start}' and '${inputs.range_filtering_a_query.end}'\n```\n\n<LineChart\n    data={filtered_query}\n    x=day\n    y=sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Visualizing EV Charging Stations by State Using a USMap Component\nDESCRIPTION: This snippet explains how to create a US map visualizing the count of EV charging stations per state, excluding California. It uses a Markdown Query and the USMap component in Evidence to render the geographic data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect State, count(*) AS ev_station_count from ev_stations.us_alt_fuel_stations where State not in ('CA') group by State order by ev_station_count desc\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<USMap data={ev_map} state=State abbreviations=true value=ev_station_count/>\n```\n\n----------------------------------------\n\nTITLE: Each Loop Example with Location Data\nDESCRIPTION: This snippet shows how to use an `{#each}` loop with the `location_summary` query to generate a header and a paragraph for each city. It utilizes the `city` alias to access the data for each city and dynamically insert it into the content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/loops/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n\"Daily sales:\n\n{#each location_summary as city}\n\n## {city.name}\n\n<Value data={city} column=sales_usd/> in sales at a <Value data={city} column=gross_margin_pct/> gross margin.\n\n{/each}\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Expressions in Markdown\nDESCRIPTION: This snippet illustrates how to use JavaScript expressions within Evidence Markdown for dynamic data rendering. It can compute and display results inline.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n2 + 2 = {2 + 2}\n\n<!-- Result: 2 + 2 = 4 -->\n\nThere are {orders.length} months of data.\n\n<!-- Result: There are 36 months of data. -->\n\nThere were {orders_by_month[0].number_of_orders} orders last month.\n\n<!-- Result: There were 3634 orders last month. -->\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Query Component in Svelte\nDESCRIPTION: Demonstrates how to create a Svelte component that fetches and displays a list of tables from the database using a static SQL query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/custom/component-queries/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    import { buildQuery } from '@evidence-dev/component-utilities/buildQuery';\n    import { QueryLoad } from '@evidence-dev/core-components';\n\n    const query = buildQuery(\n        'SELECT * FROM information_schema.tables',\n    );\n</script>\n\n<QueryLoad data={query} let:loaded={tables}>\n    <svelte:fragment slot=\"skeleton\" />\n    \n    <ul>\n        {#each tables as table}\n            <li>{table.table_name}</li>\n        {/each}\n    </ul>\n</QueryLoad>\n```\n\n----------------------------------------\n\nTITLE: Adding Aggregation Operations to Queries - Markdown with SQL Function\nDESCRIPTION: This snippet shows how to apply aggregation functions using the `.agg()` feature in conjunction with the `.groupBy()` method. It enables calculations like sums on grouped data for analysis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/query-functions/index.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<DataTable \n    data={orders.groupBy([\"category\", \"item\"]).agg({sum: \"sales\"})}/>\n```\n\n----------------------------------------\n\nTITLE: Hide Table if Empty in Evidence\nDESCRIPTION: This code snippet demonstrates how to conditionally render a DataTable component in Evidence based on the length of the data array. If the query_name array has a length greater than 0, then the DataTable will be rendered.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/if-else/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\n{#if query_name.length !== 0}\n\n<DataTable data={query_name}>\n\n{/if}\n\n```\n\n----------------------------------------\n\nTITLE: Using Inputs in SQL Queries for Evidence\nDESCRIPTION: This snippet shows how to use configured inputs within SQL queries in Evidence. It demonstrates the syntax for referencing input values using ${input.name} format.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom orders\nwhere region = ${input.region}\n  and product = ${input.product}\n```\n\n----------------------------------------\n\nTITLE: Source Query File Structure\nDESCRIPTION: Demonstrates the file structure for configuring source queries in Evidence, showing how to organize SQL query files for a specific data source\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/index.md#2025-04-21_snippet_0\n\nLANGUAGE: code\nCODE:\n```\n.-- sources/\n   `-- my_source/\n      |-- connection.yaml\n      `-- my_source_query.sql\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries in Markdown\nDESCRIPTION: This snippet illustrates how to write SQL queries within Evidence Markdown using DuckDB SQL dialect. The SQL query retrieves order statistics grouped by month.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    date_trunc('month', order_datetime) as order_month,\n    count(*) as number_of_orders,\n    sum(sales) as sales_usd\nfrom needful_things.orders\ngroup by 1, order by 1 desc\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Bar Chart in Evidence\nDESCRIPTION: Demonstrates how to create a simple bar chart using the BarChart component. The chart displays sales data by category over time.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021}\n    x=month\n    y=sales\n    series=category\n    title=\"Sales by Category\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Formatting with JavaScript Format Function\nDESCRIPTION: This markdown snippet shows how to use the JavaScript format function for inline data formatting. The `fmt` function formats a calculation result using a specified format code. This requires a markdown environment that supports code execution and access to data objects such as `sales_per_year`.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/formatting/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```sql sales_per_year\nselect\n    date_part('year', order_datetime) AS year,\n    sum(sales) AS total_sales\nfrom needful_things.orders\ngroup by year\norder by year desc\n```\n\nSales are {fmt(sales_per_year[0].total_sales - sales_per_year[1].total_sales, '+#,##0;-#,##0')} vs last year.\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with If/Else in Evidence\nDESCRIPTION: This code snippet demonstrates the general structure of if/else conditional blocks in Evidence. It shows how to display different content based on whether a condition, or a series of conditions, are met.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/if-else/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\n{#if condition}\n\nDisplay some content.\n\n{:else if another condition}\n\nAnother thing instead.\n\n{:else }\n\nSomething completely different.\n\n{/if}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Svelte Component for Evidence\nDESCRIPTION: Example of a custom Svelte component for Evidence, showing how to accept props, import Evidence components, and structure the component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/custom/custom-component/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- To allow the component to accept data, you need to use the 'export let' syntax\n     If you need any Evidence components inside your custom component, you must import them explicitly -->\n&lt;script&gt;\n\texport let myData;\n\timport { BarChart } from '@evidence-dev/core-components';\n&lt;/script&gt;\n\n<p>\n\tHere is a BarChart in a Component, with some accompanying text. Components stored in the\n\t/components/ folder will be included in your app.\n</p>\n\n<BarChart data={myData} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Value in Text using Evidence Value Component\nDESCRIPTION: This example shows how to use the Value component to display a single value from a SQL query result within text. It includes both the SQL query and the markdown syntax for embedding the value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/components/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    '2021-01-01' AS date,\n    100 AS num_orders\n```\n\nLANGUAGE: markdown\nCODE:\n```\nThe number of orders yesterday was <Value data = {orders} column = num_orders />.\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries Using Markdown and DuckDB\nDESCRIPTION: This snippet demonstrates how to run SQL queries in Evidence using markdown code fences with the DuckDB dialect. It requires a query name to be specified after the opening code fence. Key dependencies include a data source like 'needful_things'. The input is a SQL query embedded within markdown, and the output is the query result integrated into components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/queries/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```sql sales_by_category\nselect \n  category, sum(sales) as sales\nfrom needful_things.orders\ngroup by 1\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Sparklines in DataTable with Svelte\nDESCRIPTION: This Svelte component uses the DataTable to display category data with sparkline, sparkarea, and sparkbar visualizations. It demonstrates how to configure different types of sparklines with custom colors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={categories}>\n    <Column id=category/>\n    <Column id=sales title=\"Orders\" contentType=sparkline sparkX=date sparkY=sales />\n    <Column id=sales title=\"Sales\" contentType=sparkarea sparkX=date sparkY=sales sparkColor=#53768a/>\n    <Column id=sales title=\"AOV\" contentType=sparkbar sparkX=date sparkY=sales sparkColor=#97ba99/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If / Else\nDESCRIPTION: This JavaScript snippet illustrates how to use conditional rendering in Evidence Markdown. It checks the sales data between months and displays different messages based on the results.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{#if orders_by_month[0].sales_usd > orders_by_month[1].sales_usd}\n\nSales are up month-over-month.\n\n{:else}\n\nSales are down vs last month. See [category detail](/sales-by-category).\n\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Chart with Labels and Reference Areas in HTML\nDESCRIPTION: This code snippet illustrates a LineChart configuring multiple reference areas with personalized label positions and colors over a dataset, allowing for immediate interpretation of data points.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 >\n    <ReferenceArea xMax='2019-04-01' label=info color=info/>\n    <ReferenceArea xMin='2019-04-01' xMax='2019-11-01' label=negative color=negative/>\n    <ReferenceArea xMin='2019-11-01' xMax='2020-07-01' label=warning color=warning/>\n    <ReferenceArea xMin='2020-07-01' xMax='2021-02-01' label=positive color=positive/>\n    <ReferenceArea xMin='2021-02-01' xMax='2021-09-01' label=base-content-muted color=base-content-muted/>\n    <ReferenceArea xMin='2021-09-01' label=custom color=#f2dbff labelColor=#4d1070/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Querying Most Posted Tags by Time Period in SQL\nDESCRIPTION: This SQL query identifies the top 5 most frequently used hashtags within a specified time range. It counts the number of posts for each hashtag per day, groups the results, and filters to include only the most popular tags.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/trends.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nWITH EVERYTHING AS (\n    SELECT\n        COUNT(*) as post_count,\n        DATE_TRUNC('day', p.created_at) as w,\n        h.tag,\n        h.id as hashtag_id\n    FROM hashtags h\n        INNER JOIN post_tags pt on h.id = pt.hashtag_id\n        INNER JOIN posts p on pt.post_id = p.id\n\n    WHERE w > (CURRENT_DATE - INTERVAL ${inputs.time_range.value})\n    GROUP BY DATE_TRUNC('day', p.created_at), h.tag, h.id\n    ORDER BY 2, 1 desc\n)\n    SELECT * FROM EVERYTHING\n    GROUP BY ALL\n    HAVING tag IN (\n        SELECT tag FROM EVERYTHING GROUP BY ALL ORDER BY SUM(post_count) DESC LIMIT 5\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Inputs in Frontmatter for Evidence Pages\nDESCRIPTION: This snippet demonstrates how to configure inputs in the frontmatter of an Evidence page. It shows the structure for defining input options, including the name, type, and default value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My Page\ninputs:\n  - name: region\n    type: select\n    options: [\"North\", \"South\", \"East\", \"West\"]\n    default: \"North\"\n  - name: product\n    type: text\n    default: \"Widget\"\n---\n```\n\n----------------------------------------\n\nTITLE: Using API Key from Environment Variable in JavaScript\nDESCRIPTION: This JavaScript snippet retrieves an API key from an environment variable and uses it to authenticate a request to an API.  It fetches data from the API and exports the results. It shows how to access and use environment variables within a JavaScript data source in Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/javascript/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet key = process.env.EVIDENCE_API_KEY;\nlet url = 'https://whatever.com/api';\n\nconst response = await fetch(url, {\n\theaders: {\n\t\t'x-api-key': key\n\t}\n});\n\nconst json = await response.json();\nconst data = json.results;\n\nexport { data };\n```\n\n----------------------------------------\n\nTITLE: Format and Limit Country Data - SQL\nDESCRIPTION: This SQL query retrieves all columns from the countries dataset and limits the result to 5 records, facilitating a concise preview of the dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/total-rows/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from ${countries}\nlimit 5\n```\n\n----------------------------------------\n\nTITLE: Using Evidence-flavored Markdown\nDESCRIPTION: This snippet demonstrates the basic usage of Evidence-flavored Markdown for structuring reports. It includes support for lists, bolding, and images, showcasing the flexibility of Markdown syntax in Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Evidence uses Markdown\n---\n\nMarkdown can be used to write expressively in text.\n\n- it supports lists,\n- **bolding**, _italics_ and `inline code`,\n- links to [external sites](https://google.com) and other [Evidence pages](/another/page)\n\n## Images 🖼️\n\nEvidence looks for images in your `static` folder, e.g. `static/my-logo.png`.\n![Company Logo](/my-logo.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing Query Results in Evidence Components\nDESCRIPTION: Illustrates referencing SQL query results within Evidence components by utilizing the 'data={query_name}' syntax. This is applicable following successful query execution, where specified query names map to corresponding components. The snippet shows an example with a 'LineChart' component receiving data from 'sales_by_category'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/queries/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<LineChart data={sales_by_category}/>\n```\n\n----------------------------------------\n\nTITLE: Basic BigValue Implementation\nDESCRIPTION: Shows the basic implementation of BigValue component with sparkline and comparison features.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/big-value/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<BigValue \n  data={orders_with_comparisons} \n  value=num_orders\n  sparkline=month\n  comparison=order_growth\n  comparisonFmt=pct1\n  comparisonTitle=\"vs. Last Month\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Bubble Map with Color Palette in Svelte\nDESCRIPTION: This snippet demonstrates how to render a BubbleMap component in Svelte, specifying data points and a color palette to create a gradient based on sales values. Important props such as latitude, longitude, value, and size are bound to the respective data fields to visualize the grouped locations effectively.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/bubble-map/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<BubbleMap\n    data={grouped_locations}\n    lat=lat\n    long=long\n    value=sales\n    size=sales\n    colorPalette={['#C65D47', '#4A8EBA']}\n    valueFmt=usd\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Layout with Charts in Svelte\nDESCRIPTION: Svelte code demonstrating how to use the Grid component to arrange various chart types in a 2-column layout. It includes LineChart, BarChart, ScatterPlot, and AreaChart components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/grid/index.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Grid cols=2>\n    <LineChart data={orders_by_category} x=order_month y=orders/>\n    <BarChart data={orders_by_category} x=order_month y=orders fillColor=#00b4e0/>\n    <ScatterPlot data={orders_by_category} x=order_month y=orders fillColor=#015c08/>\n    <AreaChart data={orders_by_category} x=order_month y=orders fillColor=#b8645e lineColor=#b8645e/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: DataTable with Sorting\nDESCRIPTION: Svelte component that sorts the DataTable by the 'sales' column in descending order while displaying only specific columns.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders_summary} sort=\"sales desc\">\n    <Column id=category/> \n    <Column id=item/> \n    <Column id=sales fmt=usd/> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Stringifying Query Results in JavaScript\nDESCRIPTION: These JavaScript expressions demonstrate how to stringify query results in Evidence. They use the JSON.stringify() method to convert the 'working_query' data object into a JSON string.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/writing-queries/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{JSON.stringify(data.working_query)}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{JSON.stringify(working_query)}\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Chart with Multiple Reference Areas in HTML\nDESCRIPTION: This code creates a LineChart that illustrates sales data with multiple reference areas, each configured to show informative labels and positioning options within a specific date range.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=topLeft labelPosition=topLeft areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=top labelPosition=top areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=topRight labelPosition=topRight areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=left labelPosition=left areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=center labelPosition=center areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=right labelPosition=right areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottomLeft labelPosition=bottomLeft areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottom labelPosition=bottom areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottomRight labelPosition=bottomRight areaColor=\"hsla(206.25, 80%, 80%, 0.01)\"/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: DuckDB Source Query Example\nDESCRIPTION: SQL query to select all data from orders table in the needful_things database\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * from orders\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Properties in JSX with React\nDESCRIPTION: This snippet defines properties for a chart component using JSX syntax. Each property is annotated with a name, description, possible options, and default values where applicable, facilitating configuration by users.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PropListing\n    name=title\n    description=\"Chart title. Appears at top left of chart.\"\n    options=\"string\"\n/>\n<PropListing\n    name=subtitle\n    description=\"Chart subtitle. Appears just under title.\"\n    options=\"string\"\n/>\n<PropListing\n    name=legend\n    description=\"Turns legend on or off. Legend appears at top center of chart.\"\n    options={['true', 'false']}\n    defaultValue=\"true for multiple series\"\n/>\n<PropListing\n    name=chartAreaHeight\n    description=\"Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX.\"\n    options=\"number\"\n    defaultValue=180\n/>\n<PropListing\n    name=renderer\n    description=\"Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>.\"\n    options={['canvas', 'svg']}\n    defaultValue=canvas\n/>\n<PropListing\n    name=\"downloadableData\"\n    description=\"Whether to show the download button to allow users to download the data\"\n    required=false\n    options={['true', 'false']}\n    defaultValue=\"true\"\n/>\n<PropListing\n    name=\"downloadableImage\"\n    description=\"Whether to show the button to allow users to save the chart as an image\"\n    required=false\n    options={['true', 'false']}\n    defaultValue=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart with Value Labels in Evidence\nDESCRIPTION: A stacked bar chart displaying sales data by category over months with value labels shown for each segment of the stacked bars.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021} \n    x=month \n    y=sales_usd0k \n    series=category\n    labels=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Compiled SQL from Chained Queries\nDESCRIPTION: Provides the compiled SQL output after query chaining in Evidence. Demonstrates SQL transformation and execution logic specific to Evidence's processing engine. Input queries are resolved into executable SQL code with nested sub-query structures.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/queries/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    avg(sales) as average_sales\nfrom (\n    select\n        item,\n        sum(sales) as sales\n    from needful_things.orders\n    group by 1\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Simplified Country Data - SQL\nDESCRIPTION: This SQL snippet is a simplified version of the previous one, focusing on extracting fewer fields from the dataset. It queries the date, value in USD, country name, category, country ID, country code, and associated URLs. Like the previous version, it uses 'UNION ALL' for compiling results. The requirements remain unchanged.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/new-table/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect date '2020-04-30' as date, 87 as value_usd, 'Austria' as country, 'B' as category, 100384 as country_id, 'AT' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AT.png' as flag, 'https://www.google.ca/search?q=austria' as country_url\nunion all\nselect date '2020-05-01' as date, 95 as value_usd, 'Australia' as country, 'C' as category, 104942 as country_id, 'AU' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AU.png' as flag, 'https://www.google.ca/search?q=australia' as country_url\nunion all\nselect date '2020-05-02' as date, 163 as value_usd, 'Brazil' as country, 'A' as category, 100842 as country_id, 'BR' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/BR.png' as flag, 'https://www.google.ca/search?q=brazil' as country_url\nunion all\nselect date '2020-05-03' as date, 174 as value_usd, 'Canada' as country, 'A' as category, 104975 as country_id, 'CA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/CA.png' as flag, 'https://www.google.ca/search?q=canada' as country_url\nunion all\nselect date '2020-05-04' as date, 214 as value_usd, 'Chile' as country, 'B' as category, 100644 as country_id, 'CL' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/CL.png' as flag, 'https://www.google.ca/search?q=chile' as country_url\nunion all\nselect date '\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Chart Components in HTML\nDESCRIPTION: Demonstrates usage of different chart components including LineChart, AreaChart, BarChart, ScatterPlot, and BubbleChart with various configurations and data sources.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/stringMulty/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>Series Column with Numeric X Axis</h1>\n<h2>Line Chart</h2>\n<LineChart data={full} title=\"Full Data\"/>\n<LineChart data={nulls}  title=\"Nulls\"/>\n<Chart data={full}>\n    <Line y=y1/>\n    <Bar y=y2/>\n</Chart>\n\n<h2>Area Chart</h2>\n<AreaChart data={full}  title=\"Full Data\"/>\n<AreaChart data={nulls}  title=\"Nulls\"/>\n\n<h2>100% Stacked Area Chart</h2>\n<AreaChart data={full}  title=\"Full Data\" type=stacked100/>\n<AreaChart data={nulls}  title=\"Nulls\" type=stacked100/>\n\n<h2>Stacked Bar Chart</h2>\n<BarChart data={full}  title=\"Full Data\"/>\n<BarChart data={nulls}  title=\"Nulls\"/>\n\n<h2>100% Stacked Bar Chart</h2>\n<BarChart data={full}  title=\"Full Data\" type=stacked100/>\n<BarChart data={nulls}  title=\"Nulls\" type=stacked100/>\n\n<h2>Horizontal Stacked Bar Chart</h2>\n<BarChart data={full}  swapXY=true title=\"Full Data\" xType=value sort={false}/>\n<BarChart data={nulls}  swapXY=true title=\"Nulls\" sort=false/>\n\n<h2>Horizontal 100% Stacked Bar Chart</h2>\n<BarChart data={full}  swapXY=true title=\"Full Data\" xType=value sort={false} type=stacked100/>\n<BarChart data={nulls}  swapXY=true title=\"Nulls\" sort=false type=stacked100/>\n\n<h2>Grouped Bar Chart</h2>\n<BarChart data={full}  type=grouped title=\"Full Data\"/>\n<BarChart data={nulls}  type=grouped title=\"Nulls\"/>\n\n<h2>horizontal Grouped Bar Chart</h2>\n<BarChart data={full}  swapXY=true type=grouped title=\"Full Data\"/>\n<BarChart data={nulls}  swapXY=true type=grouped title=\"Nulls\"/>\n\n<h2>Scatter Plot</h2>\n<ScatterPlot data={full}  title=\"Full Data\"/>\n<ScatterPlot data={nulls}  title=\"Nulls\"/>\n\n<h2>Bubble Chart</h2>\n<BubbleChart data={full} size=y1 title=\"Full Data\" legend=true/>\n<BubbleChart data={nulls}  size=y1 title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Querying Sales Data by Category - SQL\nDESCRIPTION: This SQL snippet aggregates sales data from orders grouped by category. It constructs a link for each category and computes the total sales in USD, ordering the results by sales amount in descending order. The query uses a placeholder for the orders data source.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/templated-pages/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\ncategory,\n'/templated-pages/' || category as category_link,\nsum(sales_usd0k) as sales_usd0k\nfrom ${orders_by_category}\ngroup by category\norder by sales_usd0k desc\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Bar Chart in Evidence\nDESCRIPTION: Demonstrates how to create a horizontal bar chart by using the swapXY property. This chart displays total sales for different items, formatted in thousands of dollars.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_item_all_time}\n    x=item\n    y=sales \n    swapXY=true\n    yFmt=usd0k\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Area Chart Implementation\nDESCRIPTION: Simple area chart showing sales data over time using the orders_by_month dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/area-chart/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<AreaChart \n    data={orders_by_month}\n    x=month\n    y=sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Stacked Area Chart Implementation\nDESCRIPTION: Area chart showing sales data by category over time using stacked layout.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/area-chart/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<AreaChart \n    data={orders_by_category_2021}\n    x=month\n    y=sales\n    series=category\n/>\n```\n\n----------------------------------------\n\nTITLE: Scheduled Build with GitHub Actions for Netlify\nDESCRIPTION: This YAML snippet is a GitHub Actions workflow for scheduling Netlify builds. It demonstrates how to define a cron job that triggers a build webhook for Netlify daily at a specified time.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/netlify/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Schedule Netlify Build\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * *' # Once a day around 6am ET (10am UTC)\njobs:\n  build:\n    name: Request Netlify Webhook\n    runs-on: ubuntu-latest\n    steps:\n      - name: POST to Build Hook\n        env:\n          BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}\n        run: curl -X POST -d {} $BUILD_HOOK\n```\n\n----------------------------------------\n\nTITLE: Adding Total Row with Default Aggregation in DataTable\nDESCRIPTION: This snippet demonstrates how to add a total row to a DataTable with default sum aggregation. It also shows how to format different columns, including percentage and large number formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_example} totalRow=true rows=5>\n  <Column id=country/>\n  <Column id=gdp_usd/>\n  <Column id=gdp_growth fmt='pct2'/>\n  <Column id=population fmt='#,##0\"M\"'/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Points from Data Callout Example (HTML, JSX)\nDESCRIPTION: Demonstrates how to create callouts from a dataset that identifies specific points of interest on a line chart through SQL-like querying. This enables multiple callouts from a single dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <Callout data={sales_drops} x=month y=sales label=label labelPosition=bottom align=right />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Select Dropdown in Evidence\nDESCRIPTION: Shows how to create a multi-select dropdown using the 'multiple' attribute, and how to use the selected values in an SQL query with the IN operator.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Dropdown \n    name=multi_select \n    data={categories} \n    value=category multiple \n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Chart Columns in DataTable\nDESCRIPTION: This example shows how to create bar chart columns in a DataTable. It demonstrates different ways to customize the bar charts, including setting colors for bars and backgrounds.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_summary}>\n\t<Column id=country />\n\t<Column id=category align=center/>\n\t<Column id=value_usd title=\"Sales\" contentType=bar/>\n  \t<Column id=value_usd title=\"Sales\" contentType=bar barColor=#aecfaf/>\n  \t<Column id=value_usd title=\"Sales\" contentType=bar barColor=#ffe08a backgroundColor=#ebebeb/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: DataTable with Search Functionality\nDESCRIPTION: Svelte component that enables search functionality on the DataTable by setting the search property to true.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders_summary} search=true/>\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation in SQL Query\nDESCRIPTION: Demonstrates correct template string syntax for variable interpolation in SQL queries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/sdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<pre><code evidence-query-name=\"myFirstQuery\" lang=\"sql\">\nSELECT * FROM my_first_table WHERE user_id = '${selectedUserId}'\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Using SQL File Queries in Evidence\nDESCRIPTION: Explains how to set up and use SQL queries stored in files within the Evidence framework. Files must be placed in a 'queries' directory and referenced in the markdown frontmatter. This setup facilitates reuse and modularity across multiple pages.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/queries/index.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nqueries:\n  - q4_data: my_file_query.sql\n  - q4_sales_reps: some_category/my_category_file_query.sql\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Economic Data - SQL\nDESCRIPTION: This SQL snippet retrieves economic data for various countries, including date, USD values, year-over-year changes, country name, category, country ID, country code, and URLs for flags and detailed searches. The data is unified using 'UNION ALL' to compile results for subsequent analysis or reporting. This query requires no additional dependencies.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/new-table/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect date '2020-04-30' as date, 87 as value_usd, 0.0234 as yoy, 'Austria' as country, 'B' as category, 100384 as country_id, 'AT' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AT.png' as flag, 'https://www.google.ca/search?q=austria' as country_url\nunion all\nselect date '2020-05-01' as date, 95 as value_usd, 0.0534 as yoy, 'Australia' as country, 'C' as category, 104942 as country_id, 'AU' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AU.png' as flag, 'https://www.google.ca/search?q=australia' as country_url\nunion all\nselect date '2020-05-02' as date, 163 as value_usd, 0.0264 as yoy, 'Brazil' as country, 'A' as category, 100842 as country_id, 'BR' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/BR.png' as flag, 'https://www.google.ca/search?q=brazil' as country_url\nunion all\nselect date '2020-05-03' as date, 174 as value_usd, 0.0727 as yoy, 'Canada' as country, 'A' as category, 104975 as country_id, 'CA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/CA.png' as flag, 'https://www.google.ca/search?q=canada' as country_url\nunion all\nselect date '2020-05-04' as date, 214 as value_usd, -0.1223 as yoy, 'Chile' as country, 'B' as category, 100644 as country_id, 'CL' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/CL.png' as flag, 'https://www.google.ca/search?q=chile' as country_url\nunion all\nselect date '2020-05-05' as date, 342 as value_usd, 0.0124 as yoy, 'Denmark' as country, 'B' as category, 102948 as country_id, 'DK' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/DK.png' as flag, 'https://www.google.ca/search?q=denmark' as country_url\nunion all\nselect date '2020-05-06' as date, 331 as value_usd, 0.0252 as yoy, 'Estonia' as country, 'D' as category, 102495 as country_id, 'EE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/EE.png' as flag, 'https://www.google.ca/search?q=estonia' as country_url\nunion all\nselect date '2020-05-07' as date, 98 as value_usd, 0.0754 as yoy, 'Finland' as country, 'B' as category, 104962 as country_id, 'FI' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/FI.png' as flag, 'https://www.google.ca/search?q=finland' as country_url\nunion all\nselect date '2020-05-08' as date, 128 as value_usd, -0.0246 as yoy, 'Ghana' as country, 'C' as category, 100599 as country_id, 'GH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/GH.png' as flag, 'https://www.google.ca/search?q=ghana' as country_url\nunion all\nselect date '2020-05-09' as date, 153 as value_usd, 0.0447 as yoy, 'Honduras' as country, 'D' as category, 102494 as country_id, 'HN' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/HN.png' as flag, 'https://www.google.ca/search?q=honduras' as country_url\nunion all\nselect date '2020-05-10' as date, 384 as value_usd, -0.0255 as yoy, 'India' as country, 'A' as category, 101948 as country_id, 'IN' as country_code,  'https://flaglog.com/codes/standardized-rectangle-120px/IN.png' as flag, 'https://www.google.ca/search?q=india' as country_url\nunion all\nselect date '2020-05-11' as date, 234 as value_usd, 0.0855 as yoy, 'Ireland' as country, 'B' as category, 100987 as country_id, 'IE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/IE.png' as flag, 'https://www.google.ca/search?q=ireland' as country_url\nunion all\nselect date '2020-05-12' as date, 67 as value_usd, 0.0635 as yoy, 'Jamaica' as country, 'C' as category, 101248 as country_id, 'JM' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/JM.png' as flag, 'https://www.google.ca/search?q=jamaica' as country_url\nunion all\nselect date '2020-05-13' as date, 125 as value_usd, -0.0232 as yoy, 'Kenya' as country, 'C' as category, 101947 as country_id, 'KE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/KE.png' as flag, 'https://www.google.ca/search?q=kenya' as country_url\nunion all\nselect date '2020-05-14' as date, 118 as value_usd, -0.0343 as yoy, 'Lebanon' as country, 'D' as category, 108849 as country_id, 'LB' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/LB.png' as flag, 'https://www.google.ca/search?q=lebanon' as country_url\nunion all\nselect date '2020-05-15' as date, 263 as value_usd, 0.0883 as yoy, 'Mexico' as country, 'B' as category, 100763 as country_id, 'MX' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/MX.png' as flag, 'https://www.google.ca/search?q=mexico' as country_url\nunion all\nselect date '2020-05-16' as date, 211 as value_usd, 0.0395 as yoy, 'Nigeria' as country, 'A' as category, 100837 as country_id, 'NG' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/NG.png' as flag, 'https://www.google.ca/search?q=nigeria' as country_url\nunion all\nselect date '2020-05-17' as date, 192 as value_usd, 0.0234 as yoy, 'Oman' as country, 'D' as category, 100993 as country_id, 'OM' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/OM.png' as flag, 'https://www.google.ca/search?q=oman' as country_url\nunion all\nselect date '2020-05-18' as date, 59 as value_usd, 0.0828 as yoy, 'Philippines' as country, 'D' as category, 104128 as country_id, 'PH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/PH.png' as flag, 'https://www.google.ca/search?q=philippines' as country_url\nunion all\nselect date '2020-05-19' as date, 113 as value_usd, 0.0554 as yoy, 'Qatar' as country, 'C' as category, 100181 as country_id, 'QA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/QA.png' as flag, 'https://www.google.ca/search?q=qatar' as country_url\nunion all\nselect date '2020-05-20' as date, 190 as value_usd, 0.0134 as yoy, 'Romania' as country, 'A' as category, 101384 as country_id, 'RO' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/RO.png' as flag, 'https://www.google.ca/search?q=romania ! startups' as country_url\nunion all\nselect date '2020-05-21' as date, 190 as value_usd, -0.0554 as yoy, 'Sweden' as country, 'B' as category, 101847 as country_id, 'SE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/SE.png' as flag, 'https://www.google.ca/search?q=sweden' as country_url\nunion all\nselect date '2020-05-22' as date, 248 as value_usd, 0.0254 as yoy, 'Thailand' as country, 'C' as category, 104837 as country_id, 'TH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/TH.png' as flag, 'https://www.google.ca/search?q=thailand' as country_url\nunion all\nselect date '2020-05-23' as date, 168 as value_usd, 0.0294 as yoy, 'Ukraine' as country, 'C' as category, 101938 as country_id, 'UA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/UA.png' as flag, 'https://www.google.ca/search?q=ukraine' as country_url\nunion all\nselect date '2020-05-24' as date, 101 as value_usd, 0.0234 as yoy, 'Vietnam' as country, 'A' as category, 104948 as country_id, 'VN' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/VN.png' as flag, 'https://www.google.ca/search?q=vietnam' as country_url\nunion all\nselect date '2020-05-25' as date, 67 as value_usd, 0.0294 as yoy, 'Yemen' as country, 'B' as category, 100774 as country_id, 'YE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/YE.png' as flag, 'https://www.google.ca/search?q=yemen' as country_url\nunion all\nselect date '2020-05-26' as date, 100 as value_usd, 0.011 as yoy, 'Zimbabwe' as country, 'A' as category, 100337 as country_id, 'ZW' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/ZW.png' as flag, 'https://www.google.ca/search?q=zimbabwe' as country_url\n```\n\n----------------------------------------\n\nTITLE: Querying Google Sheets Using SQL\nDESCRIPTION: Demonstrates the SQL syntax for selecting data from a specific tab in a Google Sheets workbook, with naming conventions for tab references\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/google-sheets/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from [your_source_name].[your_workbook_name]_[your_tab_name]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Box Plot in JSX\nDESCRIPTION: This code snippet demonstrates how to create a basic box plot using the BoxPlot component. It uses the generated data and specifies experiment names, midpoints, and confidence intervals.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/box-plot/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxPlot \n    data={box}\n    name=experiment\n    midpoint=value\n    confidenceInterval=confidence\n    yFmt='+0.0%;-0.0%;0'\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Secondary Y-Axis in Markdown\nDESCRIPTION: Markdown code to create a line chart with a secondary Y-axis using the LineChart component from Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<LineChart \n    data={orders_by_month}\n    x=month\n    y=sales_usd0k\n    y2=orders\n    yAxisTitle=\"Sales per Month\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Series Scatter Plot with Continents in HTML\nDESCRIPTION: This snippet shows how to create a multi-series scatter plot using the ScatterPlot component. It plots GDP against GDP growth rate for different countries, grouped by continent.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/scatter-plot/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ScatterPlot\ndata={countries}\nx=gdp_usd\ny=gdp_growth_pct1\ntooltipTitle=country\nseries=continent\n>\n\n    <ReferenceLine y=0.065/>\n\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Creating Example Files Structure\nDESCRIPTION: This snippet demonstrates the file structure created when generating templated pages from a SQL query in Evidence. The files are arranged in a folder with one file per templated page and an index file linking them.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/templated-pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npages/\n`-- customers/\n    |-- [customer].md\n    `-- index.md\n```\n\n----------------------------------------\n\nTITLE: Using Raw Column Names in DataTable\nDESCRIPTION: Disables automatic formatting of column titles by setting formatColumnTitles to false, showing the original column names from the data source.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_41\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_summary} formatColumnTitles=false />\n```\n\n----------------------------------------\n\nTITLE: Accordion Groups Closed by Default with Advanced Formatting\nDESCRIPTION: Creates a grouped DataTable with accordion sections closed by default, includes subtotals, a total row, and custom formatting for each column's aggregation display.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_44\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=true totalRow=true groupsOpen=false> \n \t<Column id=state totalAgg=countDistinct totalFmt='0 \"states\"'/> \n\t<Column id=category totalAgg=countDistinct totalFmt='[=1]0 \"category\";0 \"categories\"'/> \n\t<Column id=item  totalAgg=countDistinct totalFmt='[=1]0 \"item\";0 \"items\"'/> \n\t<Column id=orders/> \n\t<Column id=sales fmt=usd0k/> \n\t<Column id=growth contentType=delta fmt=pct totalAgg=weightedMean weightCol=sales/> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data for 100% Stacked Charts in SQL\nDESCRIPTION: SQL query that generates sample data for four countries (Canada, US, UK, and China) across multiple years (1990-1996) with corresponding values. This data is used to demonstrate 100% stacked charts in the Evidence development framework.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/stacked-charts/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Canada' as country, 87 as value, 1994 as year\nunion all\nselect 'Canada' as country, 83 as value, 1991 as year\nunion all\nselect 'Canada' as country, 95 as value, 1992 as year\nunion all\nselect 'Canada' as country, 182 as value, 1993 as year\nunion all\nselect 'Canada' as country, 60 as value, 1990 as year\nunion all\nselect 'Canada' as country, 103 as value, 1995 as year\nunion all\nselect 'Canada' as country, 111 as value, 1996 as year\nunion all\nselect 'US' as country, 41 as value, 1990 as year\nunion all\nselect 'US' as country, 47 as value, 1991 as year\nunion all\nselect 'US' as country, 125 as value, 1996 as year\nunion all\nselect 'US' as country, 65 as value, 1994 as year\nunion all\nselect 'US' as country, 80 as value, 1992 as year\nunion all\nselect 'US' as country, 90 as value, 1995 as year\nunion all\nselect 'US' as country, 70 as value, 1993 as year\nunion all\nselect 'UK' as country, 61 as value, 1990 as year\nunion all\nselect 'UK' as country, 63 as value, 1991 as year\nunion all\nselect 'UK' as country, 68 as value, 1992 as year\nunion all\nselect 'UK' as country, 73 as value, 1993 as year\nunion all\nselect 'UK' as country, 80 as value, 1994 as year\nunion all\nselect 'UK' as country, 83 as value, 1995 as year\nunion all\nselect 'UK' as country, 85 as value, 1996 as year\nunion all\nselect 'China' as country, 30 as value, 1990 as year\nunion all\nselect 'China' as country, 33 as value, 1991 as year\nunion all\nselect 'China' as country, 40 as value, 1992 as year\nunion all\nselect 'China' as country, 52 as value, 1993 as year\nunion all\nselect 'China' as country, 65 as value, 1994 as year\nunion all\nselect 'China' as country, 78 as value, 1995 as year\nunion all\nselect 'China' as country, 101 as value, 1996 as year\n```\n\n----------------------------------------\n\nTITLE: Deploy workflow file for Hugging Face Spaces\nDESCRIPTION: This YAML file defines a GitHub Actions workflow that automates the deployment of an Evidence project to Hugging Face Spaces. It checks out the repository, installs dependencies, builds the project, authenticates with Hugging Face, and uploads the build directory to the specified space. The workflow uses secrets stored in the GitHub repository for sensitive information.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/hugging-face-spaces/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy to Hugging Face Space on Merge\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout the repository\n      - uses: actions/checkout@v4\n\n      # Install dependencies and build the project\n      - run: npm ci && npm run sources && npm run build\n      env:\n        EVIDENCE_SOURCE__taxi__project_id: ${{ secrets.EVIDENCE_SOURCE__TAXI__PROJECT_ID }}\n        EVIDENCE_SOURCE__taxi__client_email: ${{ secrets.EVIDENCE_SOURCE__TAXI__CLIENT_EMAIL }}\n        EVIDENCE_SOURCE__taxi__private_key: ${{ secrets.EVIDENCE_SOURCE__TAXI__PRIVATE_KEY }}\n\n      # Deploy to Hugging Face Space\n      - name: Install Hugging Face CLI\n        run: pip install huggingface-hub\n\n      - name: Authenticate with Hugging Face\n        run: huggingface-cli login --token \"${{ secrets.HUGGINGFACE_TOKEN }}\"\n\n      - name: Deploy to Hugging Face Space\n        run: |\n          # Update to use your repo\n          huggingface-cli upload [your-username]/[your-space-name] ./build --repo-type=space\n\n```\n\n----------------------------------------\n\nTITLE: DataTable with Column Groups in Svelte\nDESCRIPTION: Implementation of a DataTable component with grouped columns, formatting options, and aggregations. Shows how to organize economic data into logical groups like GDP, Labour Market, and Other indicators.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_50\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} totalRow=true rows=5 groupBy=continent groupType=section totalRowColor=#f2f2f2>\n  <Column id=continent totalAgg=\"Total\" totalFmt='# \"Unique continents\"'/>\n  <Column id=country totalAgg=countDistinct totalFmt='0 \"countries\"'/>\n  <Column id=gdp_usd totalAgg=sum fmt='$#,##0\"B\"' totalFmt='$#,##0.0,\"T\"' colGroup=\"GDP\"/>\n  <Column id=gdp_growth totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' colGroup=\"GDP\" contentType=delta/>\n  <Column id=jobless_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' contentType=colorscale colorScale=negative colGroup=\"Labour Market\"/>\n  <Column id=population totalAgg=sum fmt='#,##0\"M\"' totalFmt='#,##0.0,\"B\"' colGroup=\"Labour Market\"/>\n  <Column id=interest_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' wrapTitle=false colGroup=\"Other\"/>\n  <Column id=inflation_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' colGroup=\"Other\"/>\n  <Column id=gov_budget totalAgg=weightedMean weightCol=gdp_usd fmt='0.0\"%\"' contentType=delta colGroup=\"Other\"/>\n  <Column id=current_account totalAgg=weightedMean weightCol=gdp_usd fmt='0.0\"%\"' colGroup=\"Other\"/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Category and Month in SQL\nDESCRIPTION: SQL query to fetch order data grouped by category and month, including sales and order count.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect category, order_month as month, sum(sales) as sales_usd0k, count(1) as orders from needful_things.orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Basic Bar Chart Implementation with Reference Line in Evidence\nDESCRIPTION: A basic bar chart showing category sales data with a reference line at 34234 labeled as 'Sales Target'. Uses echartsOptions to customize font family.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Category\nechartsOptions={{\n    textStyle: {\n        fontFamily: \"Inter\"\n    }\n}}\n>\n\n    <ReferenceLine y=34234 label=\"Sales Target\" hideValue=false/>\n\n</BarChart>\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Chart with Inline Reference Areas in HTML\nDESCRIPTION: This snippet demonstrates how to create a LineChart component with inline reference areas to highlight good, okay, and bad ranges of order counts per month. The chart utilizes the 'orders_by_month' dataset to visualize orders.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=num_orders yAxisTitle=\"Orders per Month\">\n    <ReferenceArea yMin=250 color=positive label=\"Good\"/>\n    <ReferenceArea yMin=100 yMax=250 color=warning label=\"Okay\"/>\n    <ReferenceArea yMin=0 yMax=100 color=negative label=\"Bad\"/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Chart Component Implementation in HTML\nDESCRIPTION: Implements various chart components including Line, Area, Bar, Scatter, and Bubble charts. Each chart type is demonstrated with three different datasets to show handling of complete data, missing values, and null values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSingle/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>Series Column with Date X Axis</h1>\n<h2>Line Chart</h2>\n<LineChart data={full} title=\"Full Data\"/>\n<LineChart data={missingX} title=\"Missing X\"/>\n<LineChart data={nulls}  title=\"Nulls\"/>\n\n<h2>Area Chart</h2>\n<AreaChart data={full}  title=\"Full Data\"/>\n<AreaChart data={missingX}  title=\"Missing X\"/>\n<AreaChart data={nulls}  title=\"Nulls\"/>\n\n<h2>Bar Chart</h2>\n<BarChart data={full}  title=\"Full Data\"/>\n<BarChart data={missingX}  title=\"Missing X\"/>\n<BarChart data={nulls}  title=\"Nulls\"/>\n\n<h2>Horizontal Bar Chart</h2>\n<BarChart data={full}  x=year title=\"Full Data\" swapXY=true/>\n<BarChart data={missingX}  x=year y=value title=\"Missing X\" swapXY=true/>\n<BarChart data={nulls}  title=\"Nulls\" swapXY=true/>\n\n<h2>Scatter Plot</h2>\n<ScatterPlot data={full}  title=\"Full Data\"/>\n<ScatterPlot data={missingX} title=\"Missing X\"/>\n<ScatterPlot data={nulls}  title=\"Nulls\"/>\n\n<h2>Bubble Chart</h2>\n<BubbleChart data={full} size=value y=value  title=\"Full Data\"/>\n<BubbleChart data={missingX}  size=value y=value  title=\"Missing X\"/>\n<BubbleChart data={nulls}  size=value y=value  title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Bar Chart with Reference Area in HTML\nDESCRIPTION: This code snippet creates a BarChart that visualizes sales data categorized by month in 2021, featuring a reference area that highlights a specific date range.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<BarChart data={orders_by_category_2021} x=month y=sales yFmt=usd0 series=category>\n    <ReferenceArea xMin='2021-01-01' xMax='2021-04-01'/>\n</BarChart>\n```\n\n----------------------------------------\n\nTITLE: Rendering Scatter Chart with React\nDESCRIPTION: This code snippet shows how to render a Scatter chart using the React framework. The <Scatter> component is used within the <Chart> component to visually represent data points based on x and y values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Chart data={query_name}>\\n    <Scatter/>\\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Implementing Single and Multi-Select Dropdowns with Many Options\nDESCRIPTION: Examples of both single-select and multi-select dropdowns using a large dataset of options, demonstrating how to handle a high number of choices.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Dropdown name=vendor_multi data={purchases} value=vendor multiple title=\"Multi Vendors\"/>\n\n<Dropdown name=vendor data={purchases} value=vendor title=\"Single Vendor\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable with Sparkline and Bar Visualizations - JSX\nDESCRIPTION: This JSX code configures a DataTable to visualize total sales, using various content types for the sales data, including sparkline and bar charts. It formats sales figures appropriately and aligns them for better visual clarity.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/data-table/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={cats}>\n    <Column id=category/>\n    <Column id=total_sales fmt=usd contentType=bar align=left/>\n    <Column id=sales contentType=sparkarea sparkX=date sparkY=sales sparkYScale=false sparkColor=red/>\n    <Column id=sales contentType=sparkbar sparkX=date sparkY=sales sparkYScale=false />\n    <Column id=sales contentType=sparkline sparkX=date sparkY=sales sparkYScale=false />\n    <Column id=sales contentType=sparkbar sparkX=date sparkY=sales sparkYScale=false />\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in DataTable Component\nDESCRIPTION: This JSX snippet displays the data from the 'xyz' variable in a DataTable component, enabling search functionality. The 'xyz' variable is expected to contain the result set of an SQL query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/index.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={xyz} search/>\n```\n\n----------------------------------------\n\nTITLE: Evidence Component Data Display\nDESCRIPTION: Series of Evidence framework components that display and transform the queried data using DataTable, LineChart and BigValue components. Includes examples of grouping, aggregation, limiting and accessing specific rows.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/query-store/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={test_query}/>\n<DataTable data={test_query.groupBy(\"marketing_channel\").agg({ avg: [\"spend\"], sum: [\"spend\"]})}}/>\n<DataTable data={test_query.limit(0)}/>\n\n<LineChart data={test_query}/>\n\n{test_query.at(0)}\n\n<BigValue title=\".at()\" data={test_query.at(0)} value=spend />\n```\n\n----------------------------------------\n\nTITLE: Default BigValue Implementation\nDESCRIPTION: Demonstrates the minimal required configuration for BigValue component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/big-value/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<BigValue \n  data={orders_with_comparisons} \n  value=num_orders\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders by Month with SQL Query\nDESCRIPTION: This SQL query filters the orders_by_month table based on a user-selected date range. It uses template literals to dynamically insert the start and end dates from the input range.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/date-range/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${orders_by_month} where month between '${inputs.range.start}' and '${inputs.range.end}'\n```\n\n----------------------------------------\n\nTITLE: Rendering Area Chart with React\nDESCRIPTION: This snippet illustrates how to render an Area chart using the React framework. It uses the <Chart> component to provide the data to the <Area> component, enabling the visualization of data points over a specified area.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Chart data={query_name}>\\n    <Area/>\\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Rendering Box Plot with Whiskers in Markdown\nDESCRIPTION: This example demonstrates how to add whiskers to a box plot by including min and max values in the BoxPlot component configuration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/box-plot/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<BoxPlot \n    data={sales_distribution_by_channel}\n    name=channel\n    min=min\n    intervalBottom=first_quartile\n    midpoint=median\n    intervalTop=third_quartile\n    max=max\n    yFmt=usd0\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mixed-Type Chart in Evidence\nDESCRIPTION: This snippet demonstrates how to create a mixed-type chart combining bar and line visualizations on the same chart. It uses the fda_recalls dataset and displays voluntary_recalls as bars and fda_recalls as a line.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Chart data={fda_recalls}>\n    <Bar y=voluntary_recalls/>\n    <Line y=fda_recalls/>\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Generating Sparkline Data with SQL in DuckDB\nDESCRIPTION: This SQL query aggregates monthly sales data by category and creates an array for sparkline visualization. It uses the ARRAY_AGG() function to group date and sales data for each category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nWITH monthly_sales AS (\n    SELECT \n        category,\n        DATE_TRUNC('month', order_datetime) AS date,\n        SUM(sales) AS monthly_sales\n    FROM \n        needful_things.orders\n    GROUP BY \n        category, DATE_TRUNC('month', order_datetime)\n)\nSELECT \n    category,\n    sum(monthly_sales) as total_sales,\n    ARRAY_AGG({'date': date, 'sales': monthly_sales}) AS sales\nFROM \n    monthly_sales\nGROUP BY \n    category\norder by total_sales desc\n```\n\n----------------------------------------\n\nTITLE: Displaying Filtered Orders in Bar Chart\nDESCRIPTION: This markdown snippet renders a bar chart using the filtered orders data. It sets the x-axis to 'month' and the y-axis to 'sales_usd0k', visualizing the sales data for the selected date range.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/date-range/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart data={orders_by_month_filtered} x=\"month\" y=\"sales_usd0k\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced DataTable with Color Scales and Links\nDESCRIPTION: JSX code for an Evidence DataTable component with detailed configuration including search functionality, custom column formatting with color scales, and clickable links. Displays country data with multiple visualizations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/new-table/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={tableq} search=true rowShading=false link=country_url>\n    <Column id=country />\n    <Column id=country_id align=center/>\n    <Column id=category align=center/>\n    <Column id=value_usd contentType=colorscale colorScale=positive/>\n        <Column id=value_usd contentType=colorscale colorScale=info/>\n    <Column id=value_usd contentType=colorscale colorScale=negative/>\n\n    <Column id=country_url contentType=link linkLabel=\"Details &rarr;\" title=\"Country Details\" align=right openInNewTab=true/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart with Negative Values in Evidence\nDESCRIPTION: A stacked bar chart showing marketing spend across different channels, with support for negative values. Includes custom y-axis minimum and maximum bounds.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={marketing_spend}\n    x=month_begin \n    y=spend\n    series=marketing_channel\n    yMin=-400\n    yMax=10000\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable with Color Scales in Svelte\nDESCRIPTION: This Svelte snippet renders a DataTable using the given data with custom color scales applied to different columns, which helps in visualizing the magnitude of numbers with color intensity. The columns are centered and utilize a defined color palette based on the provided hex values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders_by_category} rowNumbers=true>\\n  <Column id=month/>\\n  <Column id=category/>\\n  <Column id=sales_usd0k contentType=colorscale colorScale=#a85ab8 align=center/>\\n  <Column id=num_orders_num0 contentType=colorscale colorScale=#e3af05 align=center/>\\n  <Column id=aov_usd2 contentType=colorscale colorScale=#c43957 align=center/>\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Area Chart with Custom Line Color in Evidence\nDESCRIPTION: Creates an area chart for the 'Sinister Toys' category data with a custom red line color. This demonstrates how to override the default color scheme.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart\ndata={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\nx=month\nlineColor=red\n/>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Linear Regression Calculation\nDESCRIPTION: This complex SQL query calculates the slope and intercept for a linear regression model between sales_usd and num_orders. It uses common table expressions (CTEs) to calculate means and intermediate sums needed for the regression formula.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nWITH\nmeans AS (\n    SELECT \n        AVG(sales_usd) as mean_sales_usd,\n        AVG(num_orders) as mean_num_orders\n    FROM ${orders_by_state}\n),\nsums AS (\n    SELECT \n        SUM((sales_usd - mean_sales_usd) * (num_orders - mean_num_orders)) as sum_xy,\n        SUM((sales_usd - mean_sales_usd) * (sales_usd - mean_sales_usd)) as sum_xx\n    FROM ${orders_by_state}, means\n)\nSELECT \n    sum_xy / sum_xx as slope,\n    mean_num_orders - (sum_xy / sum_xx) * mean_sales_usd as intercept\nFROM sums, means\n```\n\n----------------------------------------\n\nTITLE: Rendering a DataTable with dynamic column display - JSX\nDESCRIPTION: This JSX code renders a DataTable that displays either Sales, Orders, or Average Order Value (AOV) based on user selection from a Dropdown. It dynamically updates the displayed columns through conditional rendering.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/data-table/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Dropdown name=\"display_column\">\n\t<DropdownOption value=\"sales\">Sales</DropdownOption>\n\t<DropdownOption value=\"orders\">Orders</DropdownOption>\n\t<DropdownOption value=\"aov\">AOV</DropdownOption>\n</Dropdown>\n\n<DataTable data={summary}>\n\t<Column id=\"category\" />\n\t{#if inputs.display_column.value === 'sales'}\n\t\t<Column id=sales fmt=usd0k contentType=colorscale colorScale={['#304a8a','#e8efff']}/>\n\t{:else if inputs.display_column.value === 'orders'}\n\t\t<Column id=orders/>\n\t{:else}\n\t\t<Column id=aov fmt=usd2 contentType=colorscale colorScale={['#b52626','#FFFFFF','#2e9939']}/>\n\t{/if}\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Value Labels in Markdown\nDESCRIPTION: Markdown code to create a line chart with value labels using the LineChart component from Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<LineChart \n    data={orders_by_month}\n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n    labels=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Connecting Interactive Chart Groups in JSX with React\nDESCRIPTION: This snippet provides a property to define a connect group for charts, enabling synchronized tooltip hovering between charts that share the same connect group name. This enhances interactivity and data comparison across multiple charts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PropListing\n    name=connectGroup\n    description=\"Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Area Map Implementation in Svelte\nDESCRIPTION: Shows basic implementation of an AreaMap component for visualizing sales data by zip code. Includes core parameters for data binding, geographic mapping, and value formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<AreaMap \n    data={la_zip_sales} \n    areaCol=zip_code\n    geoJsonUrl='path/to/your/geoJson'\n    geoId=ZCTA5CE10\n    value=sales\n    valueFmt=usd\n    height=250\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Value Labels to Bar Chart in Evidence\nDESCRIPTION: Shows how to add value labels to a stacked bar chart. This feature enhances the chart's readability by displaying the exact values for each segment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021}\n    x=month\n    y=sales\n    yFmt=usd1k\n    series=category\n    labels=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Bubble Charts in React\nDESCRIPTION: This snippet demonstrates the rendering of BubbleChart components that visualize data representations through bubbles, leveraging size and series information for better analytical perspectives.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<BubbleChart data={full} size=y1 series=series title=\"Full Data\"/>\n<BubbleChart data={missingX}  size=y1 series=series title=\"Missing X\" legend=true/>\n<BubbleChart data={missingY} size=y1 series=series title=\"Missing Y\" legend=true/>\n<BubbleChart data={nulls}  size=y1 series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Bar Chart in Evidence\nDESCRIPTION: Illustrates how to create a stacked bar chart that shows sales by category over time. This chart type is useful for comparing total values and the composition of those values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021}\n    x=month\n    y=sales\n    series=category\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Month in SQL\nDESCRIPTION: SQL query to fetch monthly order data including sales and order count.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect order_month as month, sum(sales) as sales_usd0k, count(1) as orders from needful_things.orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Custom Color Scalar Legend Point Map in Svelte\nDESCRIPTION: Shows how to use custom colors for a scalar legend in the PointMap component, creating a gradient based on the range of values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap\n    data={grouped_locations}\n    lat=lat\n    long=long\n    value=sales\n    valueFmt=usd\n    colorPalette={['#C65D47', '#4A8EBA']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Multi-Series Scatter Plot Implementation in Evidence.dev\nDESCRIPTION: Creates a scatter plot that groups data points by category, coloring each category differently. This allows for visual comparison between different categorical groups in terms of their price and volume relationship.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/scatter-plot/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<ScatterPlot \n    data={price_vs_volume}\n    x=price\n    y=number_of_units\n    series=category\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Funnel Chart with Evidence Dev\nDESCRIPTION: This code snippet demonstrates the basic usage of the FunnelChart component from Evidence Dev. It uses the funnel_data, specifies stage and customers columns, and includes a title and subtitle.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/funnel-chart/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage \n    valueCol=customers \n    title=\"Funnel Chart\" \n    subtitle=\"Simple Funnel Chart\" \n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Evidence Markdown Page\nDESCRIPTION: Example of basic Markdown syntax for creating an Evidence page with text formatting and links\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Hello Evidence\n\nThis is a new page in Evidence.\n\n### This is a lower level header\nThis is some *italic* and **bold** text.\n\nThis is a [link](https://evidence.dev).\n\nThis is an image inserted using Markdown:\n![alt text](https://evidence.dev/brand-assets/wordmark-black.png)\n\nThis is an image inserted using HTML:\n<img src=\"https://evidence.dev/brand-assets/wordmark-black.png\" alt=\"evidence logo\" class=\"w-72\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Series Bubble Chart by Continent in Evidence\nDESCRIPTION: Creates a bubble chart that groups countries by continent using series property. Shows inflation rate vs. jobless rate with GDP determining bubble size. Country names display in tooltips.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bubble-chart/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<BubbleChart\n    data={countries}\n    x=inflation_rate_pct1\n    y=jobless_rate_pct1\n    size=gdp_usd\n    series=continent\n    tooltipTitle=country\n/>\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with SSL Connection String\nDESCRIPTION: This snippet demonstrates how to use a connection string to connect to a PostgreSQL database with SSL enabled, including handling self-signed certificates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/postgres/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\npostgresql://{user}:{password}@{host}:{port}/{database}?sslmode=require&sslrootcert=/path/to/file/ca-certificate.crt\n```\n\nReplace the various `{properties}` as needed, and replace `/path/to/file/ca-certificate.crt` with the path and filename of your certificate.\n```\n\n----------------------------------------\n\nTITLE: Rendering Bar Chart with Annotations in HTML\nDESCRIPTION: This HTML snippet showcases how to embed a bar chart component with annotation features, integrating reference lines and areas to highlight data significance within the chart. The component allows visual representation of trends over specified periods.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<BarChart data={orders_by_month} x=month y=sales>\n  <ReferenceArea xMin='2020-03-14' xMax='2021-05-01' label='COVID-19 Lockdown'/>\n  <ReferenceLine data={target_data} y=target label=name/>\n</BarChart>\n```\n\n----------------------------------------\n\nTITLE: Implementing Secondary Y-Axis in Bar Chart for Evidence\nDESCRIPTION: Shows how to create a bar chart with a secondary y-axis. This is useful for displaying two related but differently scaled metrics on the same chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_month} \n    x=month \n    y=sales\n    yFmt=usd0k\n    y2=num_orders\n/>\n```\n\n----------------------------------------\n\nTITLE: Export Components in index.js (Module Exports)\nDESCRIPTION: This JavaScript snippet demonstrates how to export components from the `src/lib` directory using module exports. It creates an `index.js` file that exports each component, making them available for use in Evidence applications. This method is recommended when starting a plugin from scratch.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/create-component-plugin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"    export {default as ComponentOne} from \\\"./ComponentOne\\\";\\n    export {default as ComponentTwo} from \\\"./ComponentTwo\\\";\\n    \"\n```\n\n----------------------------------------\n\nTITLE: Adding a Trend Reference Line to a LineChart\nDESCRIPTION: This example demonstrates adding a trend line to a LineChart. The line spans from January 2019 to December 2021, rising from 80,000 to 120,000, showing the overall upward trend in the data with a descriptive label.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n>\n    <ReferenceLine \n        x='2019-01-01' \n        y=80000 \n        x2='2021-12-01' \n        y2=120000\n        label=\"Trend\"\n    />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Bar Chart in Evidence\nDESCRIPTION: Shows how to implement a grouped bar chart, which displays sales data for different categories side by side for each month. This chart type is useful for comparing values across categories over time.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021}\n    x=month\n    y=sales\n    series=category\n    type=grouped\n/>\n```\n\n----------------------------------------\n\nTITLE: DataTable with Formatted Columns\nDESCRIPTION: Svelte component showing how to apply different formatting options to columns in a DataTable, including currency and percentage formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_summary}>\n\t<Column id=country />\n\t<Column id=category />\n\t<Column id=value_usd fmt=eur/>\n    <Column id=yoy title=\"Y/Y Growth\" fmt=pct3/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Customizing Displayed Columns in an Evidence DataTable\nDESCRIPTION: This snippet explains how to specify or rename table columns in an Evidence DataTable using the Column component. The DataTable visualizes specific columns from the data, focusing on order dates and customer emails.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<DataTable data={my_query_summary_top100}>\n   <Column id=order_datetime title=\"Order Date\"/>\n   <Column id=first_name />\n   <Column id=email />\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Custom Height Bar and Line Chart in Evidence\nDESCRIPTION: Demonstrates a bar and line chart with a custom chart area height of 380 pixels, displaying sales and order data for Sinister Toys.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/mixed-charts/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Chart\ndata={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\nx=month\nchartAreaHeight=380>\n<Bar y=sales_usd0k/>\n<Line y=num_orders_num0/>\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Styled Reference Point with Custom Properties\nDESCRIPTION: Example demonstrating advanced styling options for reference points including colors, symbol properties, and label positioning.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <ReferencePoint\n        x=\"2019-07-01\"\n        y=6590\n        label=\"2019-07-01 : Big drop\"\n        labelPosition=right\n        color=negative\n        symbolSize=16\n        symbolBorderWidth=1\n        symbolBorderColor=negative\n        symbolOpacity=0.25\n    />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Adding an X-Axis Reference Line with Hidden Value\nDESCRIPTION: This example shows how to add a vertical reference line to a LineChart at a specific date (2019-09-18) with a 'Launch' label. The hideValue=true option removes the actual date value from being displayed.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n>\n    <ReferenceLine x='2019-09-18' label=\"Launch\" hideValue=true/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Charts in React\nDESCRIPTION: This snippet renders multiple LineChart components for different scenarios: full data, missing X values, missing Y values, and nulls. It demonstrates how to utilize the LineChart component with appropriate props.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<LineChart data={full} series=series title=\"Full Data\"/>\n<LineChart data={missingX} series=series title=\"Missing X\"/>\n<LineChart data={missingY} series=series title=\"Missing Y\"/>\n<LineChart data={nulls}  series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Combining Area and Bubble Layers in BaseMap\nDESCRIPTION: This example shows how to combine Area and Bubble layers within a BaseMap component, demonstrating more advanced usage with multiple data visualizations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<BaseMap>\n  <Areas \n    data={la_zip_sales}\n    areaCol=zip_code\n    geoJsonUrl=\"path/to/your/geoJSON\"\n    geoId=ZCTA5CE10\n    value=sales\n    valueFmt=usd\n  />\n  <Bubbles \n    data={la_locations}\n    lat=lat\n    long=long\n    size=sales\n    sizeFmt=usd\n    value=sales\n    valueFmt=usd\n    pointName=point_name\n    colorPalette={['yellow','orange','red','darkred']}\n    opacity=0.5\n  />\n</BaseMap>\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Series Step Line Chart in Svelte\nDESCRIPTION: Svelte code to create a multi-series step line chart using the LineChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_category}\n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n    series=category\n    step=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Single Bar Chart with Labels and Sorting in Evidence\nDESCRIPTION: A horizontal bar chart displaying item sales data with value labels enabled and sorting applied to organize the data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={items_all_time}\n    x=item\n    y=sales_usd0k\n    swapXY=true \n    sort=true\n    labels=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Evidence LineChart Component\nDESCRIPTION: This snippet demonstrates how to add annotations to a LineChart using the ReferenceLine component. It shows how to include reference lines within a chart component to highlight specific data points or thresholds.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/components/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={sales_data} x=date y=sales>\n  <ReferenceLine data={target_data} y=target label=name/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Custom Basemap Implementation\nDESCRIPTION: Implementation of bubble map with custom OpenStreetMap basemap and attribution.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/bubble-map/index.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<BubbleMap \n    data={la_locations} \n    lat=lat \n    long=long \n    value=sales \n    valueFmt=usd \n    pointName=point_name \n    height=200 \n    basemap={`https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.{ext}`}\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n```\n\n----------------------------------------\n\nTITLE: Rendering Histogram Chart with React\nDESCRIPTION: This code snippet demonstrates the rendering of a Histogram chart in React. The <Hist> component utilized inside the <Chart> component summarizes data across specified bins.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<Chart data={query_name}>\\n    <Hist/>\\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Value Component Example with Monthly Orders\nDESCRIPTION: Shows a practical example of using Value component within a sentence to display multiple values from query results.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThe most recent month of data began <Value data={monthly_orders} />,\nwhen there were <Value data={monthly_orders} column=orders/> orders.\n```\n\n----------------------------------------\n\nTITLE: Install Evidence via Command Line\nDESCRIPTION: These commands create a new Evidence project using degit, navigate into the project directory, install dependencies using npm, generate source files, and start the development server.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/install-evidence/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Customizing Funnel Chart Appearance in Evidence Dev\nDESCRIPTION: This set of FunnelChart components showcases various customization options such as removing the legend, changing the sort order, aligning the funnel, and displaying percentages.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/funnel-chart/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage \n    valueCol=customers\n    legend=false\n/>\n\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage \n    valueCol=customers \n    title=\"Funnel Chart\" \n    subtitle=\"Descending\" \n    funnelSort=\"Descending\"\n/>\n\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage \n    valueCol=customers \n    title=\"Funnel Chart\" \n    subtitle=\"Ascending\" \n    outlineColor=\"white\" \n    funnelSort=\"ascending\"\n/>\n\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage \n    valueCol=customers \n    title=\"Funnel Chart\" \n    subtitle=\"Right Aligned\" \n    outlineColor=\"white\" \n    funnelAlign=\"right\"\n/>\n\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage \n    valueCol=customers \n    title=\"Funnel Chart\" \n    subtitle=\"Left Aligned\" \n    outlineColor=\"white\" \n    funnelAlign=\"left\"\n/>\n\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage \n    valueCol=customers \n    title=\"Funnel Chart\" \n    subtitle=\"Funnel with Percent\" \n    showPercent=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Traffic Flow Data with SQL\nDESCRIPTION: SQL query that creates a more complex dataset for a Sankey diagram showing website traffic flows from sources to destinations. The query generates multiple levels of data flow using source-target pairs with associated counts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 'google' as source, 'all_traffic' as target, 100 as count\nunion all\nselect 'direct' as source, 'all_traffic' as target, 50 as count\nunion all\nselect 'facebook' as source, 'all_traffic' as target, 25 as count\nunion all\nselect 'bing' as source, 'all_traffic' as target, 25 as count\nunion all\nselect 'tiktok' as source, 'all_traffic' as target, 25 as count\nunion all\nselect 'twitter' as source, 'all_traffic' as target, 25 as count\nunion all\nselect 'linkedin' as source, 'all_traffic' as target, 25 as count\nunion all\nselect 'pinterest' as source, 'all_traffic' as target, 25 as count\nunion all\nselect 'all_traffic' as source, '/' as target, 50 as count\nunion all\nselect 'all_traffic' as source, '/docs' as target, 150 as count\nunion all\nselect 'all_traffic' as source, '/blog' as target, 25 as count\nunion all\nselect 'all_traffic' as source, '/about' as target, 75 as count\n```\n\n----------------------------------------\n\nTITLE: Combining Area and Point Layers in BaseMap\nDESCRIPTION: This snippet demonstrates how to use the BaseMap component to combine area and point layers on a single map. It uses the Areas component for zip code sales data and the Points component for location data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<BaseMap>\n  <Areas data={la_zip_sales} geoId=ZCTA5CE10 areaCol=zip_code value=sales valueFmt=usd/>\n  <Points data={la_locations} lat=lat long=long color=#179917/>\n</BaseMap>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tabs with Markdown Content\nDESCRIPTION: Demonstrates how to create a basic Tabs component with two tabs containing markdown content. Shows usage of the Tabs and Tab components with label attributes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/tabs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs>\n    <Tab label=\"First Tab\">\n        Content of the First Tab\n\n        You can use **markdown** here too!\n    </Tab>\n    <Tab label=\"Second Tab\">\n        Content of the Second Tab\n\n        Here's a [link](https://www.google.com)\n    </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Linking to Internal App Pages in Svelte\nDESCRIPTION: This Svelte code snippet demonstrates linking to an app's internal parameterized pages from DataTable rows, providing guided navigation based on query results while keeping link columns out of view by default.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_35\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders} link=category_link />\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar Chart in Evidence\nDESCRIPTION: A grouped bar chart displaying sales data by category over months in 2021, where each category is shown as a separate bar for each month.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021} \n    x=month \n    y=sales_usd0k \n    series=category \n    type=grouped\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Aggregation Functions in DataTable\nDESCRIPTION: This example shows how to use different built-in aggregation functions for the total row in a DataTable. It includes sum, weighted mean, and mean aggregations with custom formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_example} totalRow=true rows=5>\n  <Column id=country/>\n  <Column id=gdp_usd totalAgg=sum/>\n  <Column id=gdp_growth totalAgg=weightedMean weightCol=gdp_usd fmt='pct2'/>\n  <Column id=population totalAgg=mean fmt='#,##0\"M\"'/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Long Horizontal Bar Chart with Sorting in Evidence\nDESCRIPTION: A long horizontal bar chart displaying sales data by item, with sorting enabled to organize data in ascending or descending order.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={items_all_time}\n    x=item\n    y=sales_usd0k\n    swapXY=true \n    sort=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering SQL Query with Dropdown Selections\nDESCRIPTION: SQL query that uses the selected dropdown values (category and year) to filter orders data, demonstrating how to use dropdown inputs in parameterized queries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect category, order_datetime, sales from needful_things.orders\nwhere category = '${inputs.category.value}'\nand date_part('year', order_datetime) = '${inputs.year.value}'\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Stacked Bar Chart in Evidence\nDESCRIPTION: Shows how to implement a horizontal stacked bar chart that displays sales by category and channel. This chart type is useful for comparing totals and compositions across categories.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={categories_by_channel}\n    x=category\n    y=sales\n    series=channel\n    swapXY=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying ECharts Options to Evidence BarChart\nDESCRIPTION: Demonstrates how to pass ECharts options to an Evidence BarChart component using the echartsOptions property. This allows for direct customization of the underlying ECharts configuration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart\n    data={query_name}\n    x=column_x\n    y=column_y\n    echartsOptions={{exampleOption: 'exampleValue'}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling Callout Example (HTML, JSX)\nDESCRIPTION: Shows how to customize the appearance of a callout on a line chart by adjusting properties, such as position, color, size, and symbol attributes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <Callout\n        x=\"2019-07-01\"\n        y=6590\n        label=\"Sales really dropped here\"\n        labelPosition=right\n        color=negative\n        symbolSize=16\n        symbolBorderWidth=1\n        symbolBorderColor=negative\n        symbolOpacity=0.25\n    />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sankey Diagram Data with SQL\nDESCRIPTION: SQL query that creates a simple dataset for a Sankey diagram showing flows between products/services and profits/expenses. The query uses UNION ALL to combine multiple source-target pairs with associated values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'products' as source, 'profits' as target, 100 as amount, 0.67 as percent\nunion all\nselect 'products' as source, 'expenses' as target, 50 as amount, 0.33 as percent\nunion all\nselect 'services' as source, 'profits' as target, 25 as amount, 0.50 as percent\nunion all\nselect 'services' as source, 'expenses' as target, 25 as amount, 0.50 as percent\n```\n\n----------------------------------------\n\nTITLE: DateInput Range Picker with LineChart\nDESCRIPTION: A complete example showing a date range picker with a LineChart visualization. This demonstrates the use of range mode and how to filter data between two dates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```sql filtered_query_ranged\nselect \n    *\nfrom ${orders_by_day}\nwhere day between '${inputs.range_filtering_a_query.start}' - '${inputs.range_filtering_a_query.end}'\n```\n\n<DateInput\n    name=range_filtering_a_query\n    data={orders_by_day}\n    dates=day\n    title='Date Range'\n    range\n/>\n\n<LineChart\n    data={filtered_query_ranged}\n    x=day\n    y=sales\n/>\n```\n\n----------------------------------------\n\nTITLE: ECharts Funnel Chart Configuration\nDESCRIPTION: This JavaScript object defines the configuration options for an ECharts funnel chart.  It sets the tooltip format and series type to 'funnel', and passes in the data from the `funnel_data` SQL query into the series data. The 'name' and 'value' are automatically mapped by ECharts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n      <ECharts config={\n              {\n                  tooltip: {\n                      formatter: '{b}: {c}'\n                  },\n                  series: [\n                      {\n                      type: 'funnel',\n                      data: [...funnel_data],\n                      }\n                  ]\n              }\n          }\n      />\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Heatmap Implementation in Markdown\nDESCRIPTION: Shows how to implement a basic calendar heatmap visualization with title and subtitle, using data from the orders_by_day_2021 dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/calendar-heatmap/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CalendarHeatmap \n    data={orders_by_day_2021}\n    date=day\n    value=sales\n    title=\"Calendar Heatmap\"\n    subtitle=\"Daily Sales\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal 100% Stacked Bar Chart in Evidence\nDESCRIPTION: Demonstrates the creation of a horizontal 100% stacked bar chart, showing the percentage contribution of each channel to the total sales for each category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={categories_by_channel}\n    x=category\n    y=sales\n    series=channel\n    type=stacked100\n    swapXY=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Multi-Series Bubble Chart Example\nDESCRIPTION: Enhanced bubble chart implementation with category-based series for data grouping.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bubble-chart/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<BubbleChart \n    data={price_vs_volume}\n    x=price\n    y=number_of_units\n    series=category\n    size=total_sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Section Grouping with Custom Total Row Color\nDESCRIPTION: Creates a section-grouped DataTable with subtotals, a customized total row background color, and advanced column formatting including color scales and delta indicators.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_48\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders} groupBy=category groupType=section subtotals=true totalRow=true totalRowColor=\"rgba(255, 240, 204, 0.5)\"> \n \t<Column id=state totalAgg=countDistinct totalFmt='[=1]0 \"state\";0 \"states\"'/> \n\t<Column id=category totalAgg=Total/> \n\t<Column id=item  totalAgg=countDistinct totalFmt='0 \"items\"'/> \n\t<Column id=orders contentType=colorscale/> \n\t<Column id=sales fmt=usd1k/> \n\t<Column id=growth contentType=delta neutralMin=-0.02 neutralMax=0.02 fmt=pct1 totalAgg=weightedMean weightCol=sales /> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Multi-level Sankey Diagram in Svelte\nDESCRIPTION: This code snippet demonstrates how to create a Sankey diagram that visualizes data using the SankeyDiagram component in Svelte, with additional properties for a title and subtitle.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram\n    data={traffic_data}\n    title=\"Sankey\"\n    subtitle=\"A simple sankey chart\"\n    sourceCol=source\n    targetCol=target\n    valueCol=count\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Point Map Usage in Svelte\nDESCRIPTION: Demonstrates the basic usage of the PointMap component to display points of interest on a map. It uses latitude, longitude, and sales data from the 'la_locations' dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap \n    data={la_locations} \n    lat=lat \n    long=long  \n    pointName=point_name \n    height=200\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Orders Data with SQL\nDESCRIPTION: SQL query to select all columns from the orders table, ordered by ID and limited to 100 rows.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from needful_things.orders\norder by id\nlimit 100\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Box Plot with Custom Colors in JSX\nDESCRIPTION: This code snippet shows how to create a horizontal box plot with custom colors for each experiment. It includes whiskers and uses the swapXY prop for horizontal orientation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/box-plot/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxPlot \n    data={box}\n    name=experiment\n    midpoint=value\n    min=min\n    max=max\n    color=color\n    confidenceInterval=confidence\n    swapXY=true\n    yFmt='+0.0%;-0.0%;0'\n/>\n```\n\n----------------------------------------\n\nTITLE: USMap with Legend and Filter\nDESCRIPTION: Implementation showing how to add a legend with filtering capabilities to the map.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/us-map/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<USMap\n    data={state_population}\n    state=state_name\n    value=population\n    colorScale={['maroon','white','#1c0d80']}\n    legend=true\n    filter=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation for Large Data Sources on Mac OS / Linux\nDESCRIPTION: Command to increase Node.js process memory allocation for running source queries on Unix-like systems\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS=\"--max-old-space-size=4096\" npm run sources\n```\n\n----------------------------------------\n\nTITLE: Rendering Area Charts in React\nDESCRIPTION: This snippet renders AreaChart components for various cases: full data, missing X values, missing Y values, and nulls. It showcases the use of the AreaChart component to visualize data as filled areas.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<AreaChart data={full}  series=series title=\"Full Data\"/>\n<AreaChart data={missingX}  series=series title=\"Missing X\"/>\n<AreaChart data={missingY} series=series title=\"Missing Y\"/>\n<AreaChart data={nulls}  series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Querying Order Counts by Item and State\nDESCRIPTION: SQL query that counts orders by product item and state from the needful_things.orders table, ordered by state and item to create a structured visualization of geographic sales patterns.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/heatmap/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect item, state, count(1) as orders from needful_things.orders\ngroup by all\norder by state asc, item asc\n```\n\n----------------------------------------\n\nTITLE: Configuring Box Plot with Reference Line\nDESCRIPTION: Demonstrates how to create a box plot chart with a reference line annotation, showing configuration of data, name, midpoint, and confidence interval\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/box-plot/index.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<BoxPlot \n    data={box}\n    name=experiment\n    midpoint=value\n    confidenceInterval=confidence\n>\n    <ReferenceLine y=0.04 label='Target'/>\n</BoxPlot>\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from an API using JavaScript\nDESCRIPTION: This JavaScript snippet fetches data from a specified URL and exports it as a `data` object.  It demonstrates a basic example of retrieving data from an API endpoint. The data is expected to be in JSON format.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/javascript/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet url = 'https://pokeapi.co/api/v2/pokemon/';\n\nconst response = await fetch(url);\nconst json = await response.json();\nconst data = json.results;\n\n// Export the data object\nexport { data };\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Heatmap with Daily Sales (JSX)\nDESCRIPTION: This JSX code renders a Calendar Heatmap component using the 'obd' data. It displays daily sales with USD formatting and includes a title and subtitle.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/calendar-heatmap/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarHeatmap \n    data={obd} \n    date=date \n    value=orders \n    filter=false\n    valueFmt=usd\n    title=\"Calendar Heatmap\"\n    subtitle=\"Daily Sales\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Sankey Diagram in Svelte\nDESCRIPTION: Svelte code that renders a vertically oriented Sankey diagram. This example extends the basic implementation by adding the orient=vertical property to change the flow direction.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n    data={query_name} \n    sourceCol=sourceCol\n    targetCol=targetCol\n    valueCol=valueCol\n    orient=vertical\n/>\n```\n\n----------------------------------------\n\nTITLE: 100% Stacked Area Chart in Evidence\nDESCRIPTION: Creates a 100% stacked area chart showing the relative proportion of sales across categories for each month. Each vertical slice represents 100% of sales, with categories shown as proportions.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart \n    data={orders_by_category} \n    x=month \n    y=sales_usd0k \n    series=category\n    type=stacked100\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Linear Regression Reference Line to a ScatterPlot\nDESCRIPTION: This example demonstrates how to add a calculated linear regression line to a ScatterPlot. It uses the slope and intercept values from the reg query to plot a line from x=0 to x=400000, with y-values calculated using the regression formula.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<ScatterPlot\n    data={orders_by_state}\n    x=sales_usd\n    y=num_orders\n    xMin=0\n    series=state\n>\n     <ReferenceLine\n        x=0\n        y={reg[0].slope * 0 + reg[0].intercept}\n        x2=400000\n        y2={reg[0].slope * 400000 + reg[0].intercept}\n        label=\"Linear Regression\"\n        labelPosition=aboveCenter\n    />\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Chart Component Implementation in HTML\nDESCRIPTION: Implements various chart components (LineChart, AreaChart, BarChart, ScatterPlot, BubbleChart) using the defined data arrays. Each chart type is demonstrated with all three data scenarios and includes configuration options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSingle/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>Series Column with Numeric X Axis</h1>\n<h2>Line Chart</h2>\n<LineChart data={full} title=\"Full Data\" xTickMarks=true yBaseline=true yTickMarks=true yGridlines=false/>\n<LineChart data={missingX} title=\"Missing X\"/>\n<LineChart data={nulls}  title=\"Nulls\"/>\n\n<h2>Area Chart</h2>\n<AreaChart data={full}  title=\"Full Data\"/>\n<AreaChart data={missingX}  title=\"Missing X\"/>\n<AreaChart data={nulls}  title=\"Nulls\"/>\n\n<h2>Bar Chart</h2>\n<BarChart data={full}  title=\"Full Data\"/>\n<BarChart data={missingX}  title=\"Missing X\"/>\n<BarChart data={nulls}  title=\"Nulls\"/>\n\n<h2>horizontal Bar Chart</h2>\n<BarChart data={full}  title=\"Full Data\" swapXY=true/>\n<BarChart data={missingX}  title=\"Missing X\" swapXY=true/>\n<BarChart data={nulls}  title=\"Nulls\" swapXY=true/>\n\n<h2>Scatter Plot</h2>\n<ScatterPlot data={full}  title=\"Full Data\"/>\n<ScatterPlot data={missingX}  title=\"Missing X\"/>\n<ScatterPlot data={nulls}  title=\"Nulls\"/>\n\n<h2>Bubble Chart</h2>\n<BubbleChart data={full} size=y y=y title=\"Full Data\"/>\n<BubbleChart data={missingX}  size=y y=y title=\"Missing X\"/>\n<BubbleChart data={nulls}  size=y y=y title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Post Data with Stacked Bar Chart in Evidence\nDESCRIPTION: HTML component that creates a stacked bar chart to visualize the query results. The chart shows posts by gender across different tags with customized display options like labels, gridlines, and axis settings.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/y-axis-trickery.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<BarChart \n    data = {q}\n    title = 'Posts by gender'\n    subtitle = 'distinct posts by tag & gender'\n    y=posts\n    series=gender\n    x=tag\n    yMax=1\n    labels=true\n    stackTotalLabel=false\n    yGridlines=false\n    yAxisLabels=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Default Bubble Chart Example\nDESCRIPTION: Simple bubble chart without series categorization showing basic metrics.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bubble-chart/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<BubbleChart \n    data={price_vs_volume}\n    x=price\n    y=number_of_units\n    size=total_sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Total Row Customization in DataTable\nDESCRIPTION: This example showcases advanced customization of the total row in a DataTable. It demonstrates various aggregation methods, custom total formats, and different numeric formatting options for multiple columns.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} totalRow=true rows=5>\n  <Column id=country totalAgg=\"All Countries\"/>\n  <Column id=continent totalAgg=countDistinct totalFmt='# \"Unique continents\"'/>\n  <Column id=gdp_usd totalAgg=sum fmt='$#,##0\"B\"' totalFmt='$#,##0.0,\"T\"'/>\n  <Column id=gdp_growth totalAgg=mean fmt='pct2' totalFmt='pct1'/>\n  <Column id=interest_rate totalAgg=mean fmt='pct2' totalFmt='pct1'/>\n  <Column id=inflation_rate totalAgg=mean fmt='pct2' totalFmt='pct1'/>\n  <Column id=jobless_rate totalAgg=mean fmt='pct0'/>\n  <Column id=gov_budget totalAgg=mean fmt='0.0\"%\"'/>\n  <Column id=debt_to_gdp totalAgg=mean fmt='0\"%\"'/>\n  <Column id=current_account totalAgg=mean fmt='0.0\"%\"'/>\n  <Column id=population totalAgg=sum fmt='#,##0\"M\"'/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: BigValue with Sparkline\nDESCRIPTION: Example showing BigValue implementation with sparkline visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/big-value/index.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<BigValue \n  data={orders_with_comparisons} \n  value=sales\n  sparkline=month\n/>\n```\n\n----------------------------------------\n\nTITLE: Multi-Year Calendar Heatmap Implementation in Markdown\nDESCRIPTION: Demonstrates how to create a calendar heatmap spanning multiple years using the orders_by_day dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/calendar-heatmap/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<CalendarHeatmap \n    data={orders_by_day}\n    date=day\n    value=sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Customized Histogram in Markdown\nDESCRIPTION: Markdown code to create a Histogram component with a custom x-axis title, using the 'orders_week' dataset and 'sales' as the x-axis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/histogram/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Histogram\n    data={orders_week}\n    x=sales\n    xAxisTitle=\"Weekly Sales\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Pivoting Sales Data by Month Number\nDESCRIPTION: This SQL snippet pivots the previously selected sales data by month number, summing the sales figures for each category. It organizes the data for easier analysis of trends across different categories and time periods.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/pivot/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPIVOT ${months_since_jan} ON month_number USING SUM(sales_usd0k) GROUP BY category\n```\n\n----------------------------------------\n\nTITLE: Custom Color Scale Calendar Heatmap in Markdown\nDESCRIPTION: Shows how to customize the color scale of a calendar heatmap using RGB values to create a gradient from yellow to red.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/calendar-heatmap/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<CalendarHeatmap\n    data={orders_by_day_2021}\n    date=day\n    value=sales\n    colorScale={[\n        ['rgb(254,234,159)', 'rgb(254,234,159)'],\n        ['rgb(218,66,41)', 'rgb(218,66,41)']\n    ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group with a Title in Evidence\nDESCRIPTION: Shows how to add a descriptive title above a button group component that uses data from a query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup \n    data={categories} \n    name=category_selector \n    value=category\n    title=\"Select a Category\"\n/>\n\nSelected: {inputs.category_selector}\n```\n\n----------------------------------------\n\nTITLE: Complete Query Implementation Example\nDESCRIPTION: Full example showing query definition, loading states, error handling, and result iteration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/sdk/README.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { getQueries } from '$evidence/queries';\n\tconst queries = getQueries();\n\t/** @type {import(\"@evidence-dev/query-store\").QueryStore} */\n\tlet { myFirstQuery } = $queries;\n\t$: ({ myFirstQuery } = $queries);\n</script>\n\n<pre><code evidence-query-name=\"myFirstQuery\" lang=\"sql\">\nSELECT * FROM my_first_table\n</code></pre>\n\n{#if !$myFirstQuery.loaded}\n\tLoading...\n{:else if $myFirstQuery.error}\n\tError: {$myFirstQuery.error.message}\n{:else}\n\t{#each $myFirstQuery as row (row.id)}\n\t\tRow ID: {row.id}\n\t{:else}\n\t\tNo resuls available\n\t{/each}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Bubble Chart with Axis Titles in Evidence\nDESCRIPTION: Creates a simple bubble chart using the smallb dataset with x, y coordinates and size. Includes axis titles for better visualization context.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bubble-chart/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<BubbleChart data={smallb} x=x y=y size=size xAxisTitle=true yAxisTitle=true/>\n```\n\n----------------------------------------\n\nTITLE: Link Drilldown Point Map in Svelte\nDESCRIPTION: Demonstrates how to enable navigation on click of a point by passing in a link column.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap \n    data={la_locations} \n    lat=lat \n    long=long \n    link=link_col \n    height=200\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Area Chart with Custom End Labels in Evidence\nDESCRIPTION: Creates a basic area chart filtered for 'Sinister Toys' category with custom end labels using echartsOptions. The chart includes specific formatting for series labels and grid positioning.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart\n    data={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\n    x=month\n    legend=false\n    echartsOptions={{\n        series: [\n        {\n            endLabel: {\n                show: true,\n                formatter: (params) => params.seriesName,\n                offset: [0, -5], \n            }\n        },\n        ,\n        {\n            endLabel: {\n                show: true,\n                formatter: () => \"AOV\",\n                offset: [0, 70],\n            }\n        }\n        ],\n        grid: {\n            right: '50px',\n            top: '10px'\n        }\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Documentation Structure\nDESCRIPTION: Structured documentation layout using Markdown and HTML for displaying Evidence library components. The document is organized into sections for Data components and various chart types, with visual examples for each component variation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/all-components/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 0\ntitle: All Components\nhide_title: false\nhide_table_of_contents: false\ndescription:  An index of the components available in the Evidence library.\n---\n\n## Data\n\n<Grid cols=2>\n<div class=\"border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition\">\n    <a href=\"/components/data/value\">\n    ### [Value](/components/data/value)\n    <img src=\"/img/value-needful-things.png\" alt=\"Value\" class=\"markdown\">\n    </a>\n</div>\n...\n```\n\n----------------------------------------\n\nTITLE: Using Annotations in Charts\nDESCRIPTION: This snippet describes how to include annotations in charts using React. It shows the integration of the <ReferenceLine> and <ReferenceArea> components within a <Chart> to enhance data readability and context.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Chart data={sales_data} x=date y=sales>\\n  <Line y=sales/>\\n  <ReferenceLine data={target_data} y=target label=name/>\\n  <ReferenceArea xMin='2020-03-14' xMax='2020-05-01'/>\\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Querying Monthly Sales Data in SQL\nDESCRIPTION: SQL query to calculate monthly sales totals by truncating order dates to month level and summing sales values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/prerender/pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect date_trunc('month', order_datetime) as x, sum(sales) as y\nfrom needful_things.orders\ngroup by x\n```\n\n----------------------------------------\n\nTITLE: Querying Sales Data by Category and Year (SQL)\nDESCRIPTION: This SQL query retrieves monthly sales data, filtered by category and year based on user inputs. It calculates the sum of sales for each category and month, and includes a 'magic' text field.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/dev-server-startup/pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n  select\n      date_trunc('month', order_datetime) as month,\n      sum(sales) as sales_usd,\n      category,\n      'Magic Text 🪄' as magic\n  from needful_things.orders\n  where category like '${inputs.category.value}'\n  and date_part('year', order_datetime) like '${inputs.year.value}'\n  group by all\n  order by sales_usd desc\n```\n\n----------------------------------------\n\nTITLE: Using SQL Code Fences in Evidence\nDESCRIPTION: Demonstrates how to execute SQL queries in Evidence using code fences with the SQL language identifier and a query name.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nThis code fence will execute a SQL query and display the results:\n\n```sql orders\nSELECT *\nFROM needful_things.orders\nWHERE category = 'Sinister Toys'\n```\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Custom Components in Evidence\nDESCRIPTION: Shows the recommended folder structure for creating custom components in Evidence, with a 'components' folder in the project root.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/custom/custom-component/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n|-- pages/\n|   `-- index.md\n`-- components/\n    `-- Hello.svelte\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Labels in Sankey Diagram with Svelte\nDESCRIPTION: Svelte code that demonstrates the default 'name' node labeling option for a Sankey diagram. This configuration displays only the node names on the diagram, using the source and target columns as the basis for labels.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  nodeLabels=name\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple Sankey SQL Data\nDESCRIPTION: Defines a basic SQL query for creating a Sankey diagram showing product and service flow to profits and expenses\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/diagrams/sankey/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'products' as source, 'profits' as target, 100 as amount, 0.67 as percent\nunion all\nselect 'products' as source, 'expenses' as target, 50 as amount, 0.33 as percent\nunion all\nselect 'services' as source, 'profits' as target, 25 as amount, 0.50 as percent\nunion all\nselect 'services' as source, 'expenses' as target, 25 as amount, 0.50 as percent\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Chart in Svelte\nDESCRIPTION: Svelte code to create a basic line chart using the LineChart component from Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month}\n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Multiple Y Columns in Svelte\nDESCRIPTION: Svelte code to create a line chart with multiple Y-axis columns using the LineChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month}\n    x=month\n    y={['sales_usd0k','orders']} \n    yAxisTitle=\"Sales per Month\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Value-Only Link Labels in Sankey Diagram with Svelte\nDESCRIPTION: Svelte code that configures a Sankey diagram to display only values on link labels without percentages. The value formatting is set to USD currency using the valueFmt property.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  valueFmt=usd\n  linkLabels=value\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Horizontal Box Plot in Markdown\nDESCRIPTION: This snippet shows how to create a horizontal box plot by adding the swapXY property to the BoxPlot component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/box-plot/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<BoxPlot \n    data={sales_distribution_by_channel}\n    name=channel\n    intervalBottom=first_quartile\n    midpoint=median\n    intervalTop=third_quartile\n    yFmt=usd0\n    swapXY=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Multi-Select Monthly Sales with Dimension Grid in SQL\nDESCRIPTION: This SQL query calculates monthly sales, filtering the data based on multiple selected dimensions from the Dimension Grid input. It showcases the multi-select functionality of Dimension Grid.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dimension-grid/index.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect \norder_month, \nsum(sales) as sales_usd0 \nfrom needful_things.orders \nwhere ${inputs.multi_dimensions}\ngroup by all \n```\n\n----------------------------------------\n\nTITLE: Rendering Dimension Grid and Line Chart in Markdown\nDESCRIPTION: This markdown snippet shows how to render a Dimension Grid component and a Line Chart component using Evidence syntax. It demonstrates the basic usage of these components with data binding.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dimension-grid/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<DimensionGrid data={orders} metric='sum(sales)' name=selected_dimensions /> \n\n<LineChart data={monthly_sales} handleMissing=zero/>\n```\n\n----------------------------------------\n\nTITLE: Generating Funnel Data with SQL\nDESCRIPTION: This SQL query creates a sample dataset for a funnel chart. It defines five stages (Show, Click, Visit, Inquiry, Order) with corresponding customer counts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/funnel-chart/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect 97 as customers, 'Show' as stage\nunion all\nselect 102 as customers, 'Click' as stage\nunion all\nselect 49 as customers, 'Visit' as stage\nunion all\nselect 40 as customers, 'Inquiry' as stage\nunion all\nselect 14 as customers, 'Order' as stage\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group using Options from a Query in Evidence\nDESCRIPTION: Demonstrates how to create a button group component that populates options from a query, displaying the selected value below.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup \n    data={categories} \n    name=category_picker \n    value=category\n/>\n\nSelected: {inputs.category_picker}\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Dropdown Values in a Table\nDESCRIPTION: Creates an HTML table that displays the label and value of selected dropdown options, demonstrating how to access dropdown selections via the inputs object.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table>\n    <tr>\n        <th class=\"px-4\">Label</th><th class=\"px-4\">Value</th>\n    </tr>\n    <tr>\n        <td class=\"px-4\">{inputs.category.label}</td><td class=\"px-4\">{inputs.category.value}</td>\n    </tr>\n    <tr>\n        <td class=\"px-4\">{inputs.year.label}</td><td class=\"px-4\">{inputs.year.value}</td>\n    </tr>\n    \n</table>\n```\n\n----------------------------------------\n\nTITLE: Using Dimension Grid as Input for SQL Filtering\nDESCRIPTION: This example demonstrates how to use Dimension Grid as an input to filter SQL queries dynamically. It shows both the Dimension Grid component setup and the corresponding SQL query using the input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dimension-grid/index.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<DimensionGrid \n    data={my_query} \n    name=\"selected_dimensions\"\n/>\n\n\n```sql filtered_query\nselect *\nfrom source_name.table\nwhere ${inputs.selected_dimensions}\n```\n```\n\n----------------------------------------\n\nTITLE: DateInput with Custom Title\nDESCRIPTION: Example showing how to add a custom title to a DateInput component. This provides better context for users when selecting dates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<DateInput\n    name=date_range_with_title\n    data={orders_by_day}\n    dates=day\n    title=\"Select a Date Input\"/>\n```\n\n----------------------------------------\n\nTITLE: Stacked Area Chart with Custom Height in Evidence\nDESCRIPTION: Creates a stacked area chart with a custom chart area height of 380 pixels. This demonstrates how to control the vertical size of the visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart \n    data={orders_by_category} \n    x=month \n    y=sales_usd0k \n    series=category\n    chartAreaHeight=380\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Chart Annotations Example\nDESCRIPTION: Demonstrates all four types of annotations (ReferenceLine, ReferenceArea, ReferencePoint, and Callout) on a line chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <ReferenceLine y=7500 label=\"Reference Line\" hideValue labelPosition=\"aboveStart\" color=positive/>\n    <ReferenceArea xMin='2020-03-14' xMax='2020-08-15' label=\"Reference Area\" color=warning/>\n    <ReferencePoint x=\"2019-07-01\" y=6590 label=\"Reference Point\" labelPosition=bottom color=negative/>\n    <Callout x=\"2021-05-01\" y=11012 labelPosition=bottom labelWidth=fit>\n        Callout\n        Data trending up here\n    </Callout>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Implementation\nDESCRIPTION: Basic implementation of a dropdown component with data from a query, showing value selection.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dropdown/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Dropdown \n    data={categories} \n    name=category1 \n    value=category_name \n    title=\"Select a Category\" \n    defaultValue=\"Sinister Toys\"\n/>\n\nSelected: {inputs.category1.value}\n```\n\n----------------------------------------\n\nTITLE: Implementing Colored Reference Lines in LineChart\nDESCRIPTION: Example showing how to add multiple reference lines to a LineChart component with different colors and labels. Demonstrates usage of built-in color schemes and custom hex colors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0k yAxisTitle=\"Sales per Month\">\n    <ReferenceLine y=1500 color=negative label=negative/>\n    <ReferenceLine y=3500 color=warning label=warning/>\n    <ReferenceLine y=5500 color=positive label=positive/>\n    <ReferenceLine y=7500 color=info label=info/>\n    <ReferenceLine y=9500 color=base-content-muted label=base-content-muted/>\n    <ReferenceLine y=11500 color=#63178f label=custom/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Data Table in Svelte\nDESCRIPTION: This Svelte snippet creates a DataTable component that displays data about countries, grouped by continent, including various columns with aggregate functions.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} totalRow=true rows=5 wrapTitles groupBy=continent groupType=section totalRowColor=#f2f2f2>\n  <Column id=continent totalAgg=\"Total\" totalFmt='# \"Unique continents\"'/>\n  <Column id=country totalAgg=countDistinct totalFmt='0 \"countries\"'/>\n  <Column id=gdp_usd totalAgg=sum fmt='$#,##0\"B\"' totalFmt='$#,##0.0,\"T\"' colGroup=\"GDP\"/>\n  <Column id=gdp_growth totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' colGroup=\"GDP\" contentType=delta/>\n  <Column id=jobless_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' contentType=colorscale colorScale=negative colGroup=\"Labour Market\"/>\n  <Column id=population totalAgg=sum fmt='#,##0\"M\"' totalFmt='#,##0.0,\"B\"' colGroup=\"Labour Market\"/>\n  <Column id=interest_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' wrapTitle=false colGroup=\"Other\"/>\n  <Column id=inflation_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' colGroup=\"Other\"/>\n  <Column id=gov_budget totalAgg=weightedMean weightCol=gdp_usd fmt='0.0\"%\"' contentType=delta colGroup=\"Other\"/>\n  <Column id=current_account totalAgg=weightedMean weightCol=gdp_usd fmt='0.0\"%\"' colGroup=\"Other\"/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Bar Chart with Secondary Line Chart and Custom Colors in Evidence\nDESCRIPTION: A bar chart with a secondary y-axis displayed as a line chart with labels enabled. Uses custom color palette and shows data labels for both series.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart data={orders_by_month} x=month y=sales_usd0k y2=num_orders_num0 y2SeriesType=line y2Labels=true colorPalette={['rgb(110,117,176,0.8)','rgb(37,91,161)']} labels=true/>\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Conditional Formatting Logic\nDESCRIPTION: SQL query that adds a custom_format column with different currency format codes based on country values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect *,\ncase\n    when country in ('Austria', 'Ukraine') then 'eur'\n    when country = 'Sweden' then 'sek'\n    when country = 'Vietnam' then '\"₫\"#,##0'\n    else 'usd' end as custom_format\nfrom ${country_summary}\n```\n\n----------------------------------------\n\nTITLE: Defining Connect Group Property - JSX\nDESCRIPTION: Specifies a group name to connect this chart with other charts, allowing synchronized tooltip hovering among them. Charts with the same connect group name will react together.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=connectGroup\n    description=\"Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Tooltip with Click and Link in Areas Layer\nDESCRIPTION: This example demonstrates a custom tooltip for an Areas layer with click interaction and a clickable link, along with formatted values and styling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<BaseMap>\n    <Areas \n        data={la_zip_sales} \n        areaCol=zip_code\n        geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'\n        geoId=ZCTA5CE10\n        value=sales\n        valueFmt=usd\n        height=250\n        tooltipType=click\n        tooltip={[\n            {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},\n            {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},\n            {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}\n        ]}\n    />\n</BaseMap>\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Titles in DataTable\nDESCRIPTION: Sets custom display titles for columns in a DataTable using the title attribute on Column components. This allows for more user-friendly column headers.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_40\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_summary}>\n\t<Column id=country title=\"Country Name\" />\n\t<Column id=country_id align=center title=\"ID\" />\n\t<Column id=category align=center title=\"Product Category\" />\n\t<Column id=value_usd title=\"Sales in 2022\" />\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Custom Gradient Area Map Implementation in Svelte\nDESCRIPTION: Creates an area map with custom gradient colors for scalar values, using two colors to create a value-based gradient. Includes USD formatting for values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<AreaMap\n    data={grouped_locations}\n    lat=lat\n    long=long\n    value=sales\n    geoId=ZCTA5CE10\n    areaCol=zip_code\n    colorPalette={['#C65D47', '#4A8EBA']}\n    valueFmt=usd\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Node Labels in Sankey Diagram with Svelte\nDESCRIPTION: Svelte code that configures a Sankey diagram to display both name and value in node labels. This example also uses the valueFmt property to format values as USD currency.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  nodeLabels=full\n  valueFmt=usd\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding an Arrow Reference Line with Custom Formatting\nDESCRIPTION: This example shows how to add an arrow-type reference line to a BarChart. The arrow points from 'Japan' to 'Germany' with a label showing \"-23%\". It uses custom positioning and solid line type with an arrow symbol.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<BarChart \n    data={countries}\n    x=country\n    y=gdp_usd\n>\n    <ReferenceLine \n        x='Japan'\n        y=6500\n        x2='Germany'\n        y2=5000\n        label=\"-23%\"\n        labelPosition=aboveCenter\n        lineType=solid\n        symbol=arrow\n    />\n</BarChart>\n```\n\n----------------------------------------\n\nTITLE: Example SQL Data Preparation\nDESCRIPTION: This example demonstrates a SQL query using 'SELECT' and 'UNION ALL' clauses to prepare sample data containing regions, products, and sales figures for use in heatmap visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 'West' as region, 'A' as product, 120 as sales\nUNION ALL\nSELECT 'West', 'B', 200\nUNION ALL\nSELECT 'West', 'C', 150\nUNION ALL\nSELECT 'East', 'A', 110\nUNION ALL\nSELECT 'East', 'B', 315\nUNION ALL\nSELECT 'East', 'C', 450\n```\n\n----------------------------------------\n\nTITLE: Applying Logarithmic Scale to Bubble Chart in Evidence\nDESCRIPTION: Enhances the country economic data visualization with a logarithmic scale on the y-axis. Uses base-8 logarithmic scale to better display the distribution of jobless rates across countries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bubble-chart/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<BubbleChart\n    data={countries}\n    x=inflation_rate_pct1\n    y=jobless_rate_pct1\n    size=gdp_usd\n    series=continent\n    tooltipTitle=country\n    yLog=true\n    yLogBase=8\n/>\n```\n\n----------------------------------------\n\nTITLE: Area Chart with Log Scale in Evidence\nDESCRIPTION: Creates an area chart with a logarithmic y-axis scale (base 2) for the 'Sinister Toys' category. Sales data is formatted as currency, and the log scale helps visualize data with large variations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart\n    data={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\n    x=month\n    y=sales_usd0k \n    yFmt=\"$###\"\n    yLog=true\n    yLogBase=2\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Chart with Data-driven Reference Area in HTML\nDESCRIPTION: This snippet illustrates rendering a LineChart that uses a data-driven reference area to visualize sales per month. The reference area is dynamically defined between specified campaign dates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle=\"Sales per Month\">\n    <ReferenceArea data={multiple_dates} xMin=start_date xMax=end_date label=campaign_name/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Using Another Column for Scaling in DataTable\nDESCRIPTION: This SQL snippet creates a dataset with letters associated with numbers, with an additional scale-defining number and formatting type. The result set is used in a DataTable to enhance the data presentation based on the scaling factor.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/conditional-formatting/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n select 'A' as name, 1 as number, 2 as scale_defining_number, 'usd' as fmt\n union all\n select 'B',2,10,'eur'\nunion all\n select 'C',3,30,'num0'\n union all\n select 'D',4,20,'pct'\n union all\n select 'E',5,10,'usd'\n union all\n select 'F',6,5,'pct'\n union all\n select 'G',7,1,'pct'\n union all\n select 'H',8,44,'eur'\n union all\n select 'I',9,4,'#,##0.00\"kg\"'\n union all\n select 'J',10,55, 'usd'\n order by number asc\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dimension Grid in Evidence\nDESCRIPTION: This snippet renders a DimensionGrid component, using the result of the `ecommerce_orders` SQL query as its data source. The `name` property is set to `selected_dimensions`, which enables dimension selection within the grid.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/dimension-grid/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: evidence\nCODE:\n```\n<DimensionGrid data={ecommerce_orders} name=selected_dimensions/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Expanded Details Component in Markdown\nDESCRIPTION: Example of implementing a Details component with an initially expanded state using the open=true property. Contains the same content structure as the default state example.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/details/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Details title=\"Definitions\">\n    \n    Definition of metrics in Solutions Targets\n\n    ### Time to Proposal\n\n    Average number of days it takes to create a proposal for a customer\n\n    *Calculation:*\n    Sum of the number of days it took to create each proposal, divided by the number of proposals created\n\n    *Source:*\n    Hubspot\n\n</Details>\n```\n\n----------------------------------------\n\nTITLE: Querying CSV Files in Evidence\nDESCRIPTION: Basic SQL syntax for querying CSV files stored in Evidence project sources directory. The query selects all columns from a specified CSV file without including the .csv extension.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/csv/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from your_csv_source_name.csv_file_name\n```\n\n----------------------------------------\n\nTITLE: Enabling External Links in Svelte DataTable\nDESCRIPTION: A Svelte DataTable setup showing rows as interactive links, navigating to external URLs formed from specific column values such as countries used as search keywords in Google links.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_33\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} search=true link=country_url showLinkCol/>\n```\n\n----------------------------------------\n\nTITLE: SQL for Embedding HTML in Table\nDESCRIPTION: This SQL query selects rows with embedded HTML content displayed as text in the 'HTML in Table' column. It is ideal for environments using HTML for formatting within data entries, providing enriched visual context to users.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"sql html_in_table\\nselect '<b>Bold</b> text' as \\\"HTML in Table\\\", 0 as row_number union all\\nselect '<i>Italic</i> text', 1 union all\\nselect '<a href=\\\"https://evidence.dev\\\">Link</a>', 2 union all\\nselect '<img src=\\\"https://raw.githubusercontent.com/evidence-dev/media-kit/main/png/wordmark-gray-800.png\\\" width=\\\"200px\\\"/>', 3 union all\\nselect 'Inline <code class=markdown>Code</code></br> is supported', 4\\norder by row_number\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Post Tags by Hashtag ID (Multi Select, With Default)\nDESCRIPTION: This SQL query filters the `post_count_by_tag` table based on the values selected in the 'multi_with_default' dropdown. It utilizes the `IN` operator to filter for multiple hashtag IDs.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-basic-usage.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n```sql q_multi_with_default\nSELECT * FROM ${post_count_by_tag} WHERE hashtag_id in ${inputs.multi_with_default.value}\n```\n```\n\n----------------------------------------\n\nTITLE: Selecting Orders Data from Database - SQL\nDESCRIPTION: This SQL snippet retrieves the specified columns from the 'orders' table. It serves as a basic example of querying data from a database system compatible with SQL-like syntax.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/query-functions/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, order_datetime, first_name, last_name, sales, category, item FROM orders\n```\n\n----------------------------------------\n\nTITLE: Referencing Query Result in SQL\nDESCRIPTION: Selects the 'n_months' value from the first row of the 'working_reference' query result.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ${working_reference[0].n_months} as months\n```\n\n----------------------------------------\n\nTITLE: Filtering Query Results with a Button Group in Evidence\nDESCRIPTION: Demonstrates how to use a button group to filter data displayed in a DataTable component using SQL parameters.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    category, item, sum(sales) as total_sales\nfrom needful_things.orders\nwhere category like '${inputs.category_button_group}'\ngroup by all\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup\n    data={categories} \n    name=category_button_group\n    value=category\n/>\n\n<DataTable data={filtered_query} emptySet=pass emptyMessage=\"No category selected\"/>\n```\n\n----------------------------------------\n\nTITLE: Labeled Area Chart\nDESCRIPTION: Area chart with value labels formatted in USD thousands.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/area-chart/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<AreaChart \n    data={orders_by_month}\n    x=month\n    y=sales\n    labels=true\n    labelFmt=usd1k\n/>\n```\n\n----------------------------------------\n\nTITLE: Value Component with Red Negatives\nDESCRIPTION: Shows how to configure the Value component to display negative values in red.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<Value data={NegativeSales} column=\"max_sales\" agg=\"avg\" fmt=\"usd0\" redNegatives=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Heatmap Color Scale in DataTable Svelte\nDESCRIPTION: A Svelte DataTable showcasing a heatmap-like color scale with multiple color transitions. This example uses a gradient to visualize different magnitude levels within numerical data, further enhancing chart readability.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_22\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={numbers}>\\n  <Column id=name/>\\n  <Column id=number contentType=colorscale colorScale={['#6db678','#ebbb38','#ce5050']}/>\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group with Hardcoded Options in Evidence\nDESCRIPTION: Shows how to create a button group with manually defined options using ButtonGroupItem components instead of data from a query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup name=hardcoded_options>\n    <ButtonGroupItem valueLabel=\"Option One\" value=\"1\" />\n    <ButtonGroupItem valueLabel=\"Option Two\" value=\"2\" />\n    <ButtonGroupItem valueLabel=\"Option Three\" value=\"3\" />\n</ButtonGroup>\n\nSelected: {inputs.hardcoded_options}\n```\n\n----------------------------------------\n\nTITLE: Querying Orders Data by Category and Year in SQL\nDESCRIPTION: A SQL query that aggregates sales data by month and category from the needful_things.orders table. It filters results based on selected category and year parameters from dropdown inputs, using date functions to group by month and calculate total sales.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n  select\n      date_trunc('month', order_datetime) as month,\n      sum(sales) as sales_usd,\n      category\n  from needful_things.orders\n  where category like '${inputs.category.value}'\n  and date_part('year', order_datetime) like '${inputs.year.value}'\n  group by all\n  order by sales_usd desc\n```\n\n----------------------------------------\n\nTITLE: Registering Source Plugins in Evidence Configuration\nDESCRIPTION: YAML configuration to register plugins in the evidence.config.yaml file. This example shows how to register both component plugins and data source plugins.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/source-plugins/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n    components: \n        @evidence-dev/core-components: {}\n    datasources: \n        @cool-new-db/evidence-source-plugin\n```\n\n----------------------------------------\n\nTITLE: Grouped Locations Categories Query\nDESCRIPTION: SQL query to categorize locations into different business types based on ID ranges.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/bubble-map/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  *, \n  CASE \n    WHEN id BETWEEN 0 AND 4 THEN 'Hotels'\n    WHEN id BETWEEN 5 AND 9 THEN 'Restaurants'\n    WHEN id BETWEEN 10 AND 14 THEN 'Golf Courses'\n    WHEN id BETWEEN 15 AND 19 THEN 'Shops'\n    WHEN id BETWEEN 20 AND 24 THEN 'Bars'\n    WHEN id BETWEEN 25 AND 29 THEN 'Entertainment'\n    WHEN id BETWEEN 30 AND 34 THEN 'Banks'\n  END AS Category\nFROM la_locations\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot Example with Full Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `ScatterPlot` component in Evidence. It renders a scatter plot using the `full` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_40\n\nLANGUAGE: Evidence\nCODE:\n```\n<ScatterPlot data={full} series=fed_reserve_district x=established_date title={titles[0]}/>\n```\n\n----------------------------------------\n\nTITLE: Using seriesOptions for Consistent Series Styling\nDESCRIPTION: Shows how to use the seriesOptions property to apply consistent styling across all series in an Evidence chart, simplifying the process of customizing multiple series.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<BarChart\n    data={country_sales}\n    x=date\n    y=sales\n    series=country\n    seriesOptions={{\n        itemStyle: {\n            borderWidth: 1,\n            borderColor: 'red'\n        }\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Alert Components in Markdown\nDESCRIPTION: Demonstrates the different types of Alert components with various status options including default, info, positive, warning, and negative alerts. Each alert displays a message in a distinctively styled container based on its status.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/alert/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Alert>\nThis is a default alert\n</Alert>\n\n<Alert status=\"info\">\nThis is a informational alert\n</Alert>\n\n<Alert status=\"positive\">\nThis is a positive alert\n</Alert>\n\n<Alert status=\"warning\">\nThis is a warning alert\n</Alert>\n\n<Alert status=\"negative\">\nThis is a negative alert\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sankey Diagram with Node Depth Override in Svelte\nDESCRIPTION: Svelte code that renders a Sankey diagram with custom node depth positioning. This example uses the depthOverride property to manually position the 'services revenue' node at depth level 1, and sets node alignment to the left.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n    data={apple_income_statement} \n    title=\"Apple Income Statement\" \n    subtitle=\"USD Billions\" \n    sourceCol=source \n    targetCol=target \n    valueCol=amount_usd \n    depthOverride={{'services revenue': 1}}\n    nodeAlign=left\n/>\n```\n\n----------------------------------------\n\nTITLE: DateRange Component with Manual Date Range\nDESCRIPTION: Shows how to create a date range picker with manually specified start and end dates, rather than deriving them from a query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange\n    name=manual_date_range\n    start=2019-01-01\n    end=2019-12-31\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Data for Box Plot in SQL\nDESCRIPTION: This SQL query retrieves the necessary data for constructing a box plot, including channel names and quartile values for sales distribution.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/box-plot/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    channel as name,\n    first_quartile as intervalBottom,\n    median as midpoint,\n    third_quartile as intervalTop\nfrom ${sales_distribution_by_channel}\n```\n\n----------------------------------------\n\nTITLE: Defining Downloadable Image Property - JSX\nDESCRIPTION: Specifies whether to provide a button for users to save the chart as an image, which is useful for sharing and presentations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=\"downloadableImage\"\n    description=\"Whether to show the button to allow users to save the chart as an image\"\n    required=false\n    options={['true', 'false']}\n    defaultValue=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Box Plot with Whiskers in JSX\nDESCRIPTION: This example demonstrates how to add whiskers to a box plot by including min and max values. It also shows how to add a custom y-axis title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/box-plot/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxPlot \n    data={box}\n    name=experiment\n    midpoint=value\n    min=min\n    max=max\n    confidenceInterval=confidence\n    yFmt='+0.0%;-0.0%;0'\n    yAxisTitle=\"change vs. baseline\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Tooltip with Hover in Areas Layer\nDESCRIPTION: This example shows how to create a custom tooltip for an Areas layer with hover interaction, including formatted values and styling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<BaseMap>\n    <Areas \n        data={la_zip_sales} \n        areaCol=zip_code\n        geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'\n        geoId=ZCTA5CE10\n        value=sales\n        valueFmt=usd\n        height=250\n        tooltip={[\n            {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},\n            {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},\n            {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}\n        ]}\n    />\n</BaseMap>\n```\n\n----------------------------------------\n\nTITLE: Querying User and Tag Counts\nDESCRIPTION: This SQL snippet retrieves distinct post counts per user, along with their associated tags. It joins multiple tables and groups the result by user and tag IDs, ordering them subsequently. Dependencies include the 'post_tags', 'posts', 'users', and 'hashtags' tables with relevant schema.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/filter-deps.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT COUNT(DISTINCT p.id) as postCount, u.id as userId, u.user_name, h.tag, h.id as tagId FROM post_tags pt\n    INNER JOIN posts p on p.id      = pt.post_id\n    INNER JOIN users u on u.id      = p.user_id \n    INNER JOIN hashtags h on h.id   = pt.hashtag_id\nGROUP BY ALL\nORDER BY userId, tagId\n```\n\n----------------------------------------\n\nTITLE: Basic Text Input Implementation\nDESCRIPTION: Basic implementation of a text input component with name and search title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/text-input/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<TextInput\n    name=name_of_input\n    title=\"Search\"\n/>\n\nSelected: {inputs.text_input_name}\n```\n\n----------------------------------------\n\nTITLE: Grouped DataTable with Subtotals\nDESCRIPTION: Creates a grouped DataTable with subtotals for each group, allowing users to see aggregated metrics for each group category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_43\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=true> \n \t<Column id=state/> \n\t<Column id=category totalAgg=\"\"/> \n\t<Column id=item totalAgg=\"\"/> \n\t<Column id=orders/> \n\t<Column id=sales fmt=usd/> \n\t<Column id=growth fmt=pct1/> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Heatmap with Custom Color Palette (JSX)\nDESCRIPTION: These JSX code snippets render Calendar Heatmap components with custom color palettes. One uses navy, light yellow, and purple, while the other uses white and green.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/calendar-heatmap/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarHeatmap\n    data={oneyear}\n    date=date\n    value=orders\n    title=\"Calendar Heatmap\"\n    subtitle=\"Daily Orders\"\n    colorPalette={['navy', 'lightyellow', 'purple']}\n/>\n\n<CalendarHeatmap\n    data={oneyear}\n    date=date\n    value=orders\n    title=\"Calendar Heatmap\"\n    subtitle=\"Daily Orders\"\n    colorPalette={['white', 'green']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Plot Implementation in Evidence.dev\nDESCRIPTION: Creates a simple scatter plot that displays the correlation between price and number of units, with price formatted as USD. The data comes from the price_vs_volume query and uses category as the series differentiator.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/scatter-plot/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ScatterPlot \n    data={price_vs_volume}\n    x=price\n    y=number_of_units\n    xFmt=usd0\n    series=category\n/>\n```\n\n----------------------------------------\n\nTITLE: Data Table Display in Evidence\nDESCRIPTION: Displays a data table showing the raw data from orders_by_category. This provides a way to view the underlying data being used in the visualizations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={orders_by_category}/>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Filtered Locations\nDESCRIPTION: SQL query to filter la_locations based on the selected point name from the input map.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${la_locations}\nwhere point_name = '${inputs.my_point_map.point_name}' OR '${inputs.my_point_map.point_name}' = 'true'\n```\n\n----------------------------------------\n\nTITLE: Basic USMap Implementation\nDESCRIPTION: Basic usage of the USMap component to display population data across US states.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/us-map/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<USMap\n    data={state_population}\n    state=state_name\n    value=population\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Stacked Bar Charts in React\nDESCRIPTION: This snippet consists of Stacked Bar Chart components for visualizing the data in stacked format across multiple scenarios: full data, missing X, Y, and nulls. Each chart enhances data comparison.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<BarChart data={full}  series=series title=\"Full Data\" />\n<BarChart data={missingX}  series=series title=\"Missing X\"/>\n<BarChart data={missingY} series=series title=\"Missing Y\"/>\n<BarChart data={nulls}  series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Configuration Example in JavaScript\nDESCRIPTION: Demonstrates how to configure complex tooltips with custom formatting, styling, and link options for geospatial data visualization\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntooltip={[\n    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},\n    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},\n    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}\n]}\n```\n\n----------------------------------------\n\nTITLE: Grouped BarChart Example with Full Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a grouped bar chart using the `full` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, sets the type to grouped, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_30\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={full} series=fed_reserve_district type=grouped x=established_date title={titles[0]}/>\n```\n\n----------------------------------------\n\nTITLE: Basic Bubble Chart Implementation\nDESCRIPTION: Basic bubble chart implementation showing price vs number of units with total sales determining bubble size.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bubble-chart/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<BubbleChart \n    data={price_vs_volume}\n    x=price\n    y=number_of_units\n    xFmt=usd0\n    series=category\n    size=total_sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding Bar Chart with Annotations in HTML\nDESCRIPTION: This HTML snippet demonstrates how to create a bar chart component using specific data inputs and include annotations for reference lines and areas. It enhances the data visualization with contextual information regarding critical time frames.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<BarChart data={orders_by_month} x=month y=sales>\n  <ReferenceArea xMin='2020-03-14' xMax='2021-05-01' label='COVID-19 Lockdown'/>\n  <ReferenceLine data={target_data} y=target label=name/>\n</BarChart>\n```\n\n----------------------------------------\n\nTITLE: Modal with LineChart Component in Svelte\nDESCRIPTION: Shows how to embed a LineChart component within a Modal to display order data visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/modal/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Modal title='Chart Example' buttonText='Click to See Chart'>\n    <LineChart\n        data={orders_by_month}\n        x=order_month\n        y=sales_usd0k\n    />\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Line Chart Formatting with Date and Currency\nDESCRIPTION: Shows how to apply formatting to x and y axes using `xFmt` and `yFmt` props with Excel-style format codes\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/formatting/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<LineChart \n    data={sales_data} \n    x=date \n    y=sales \n    xFmt=\"m/d\"\n    yFmt=\"eur\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Pokemon API Data with JavaScript in Evidence\nDESCRIPTION: Example of creating a JavaScript data source that fetches Pokemon data from an API and exports it for use in Evidence. Demonstrates basic fetch request and data export pattern.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/javascript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet url = 'https://pokeapi.co/api/v2/pokemon/';\n\nconst response = await fetch(url);\nconst json = await response.json();\nconst data = json.results;\n\nexport { data };\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple DataTable with Links\nDESCRIPTION: JSX code for a basic Evidence DataTable component that displays country data with links. This configuration automatically shows links from the country_url field without detailed column customization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/new-table/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={tableq} link=country_url showLinkCol=true/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Grouped Bar Charts in React\nDESCRIPTION: In this snippet, Grouped Bar Chart components are rendered to compare multiple series in grouped format. It caters to scenarios such as full data and missing values while promoting ease of comparison.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<BarChart data={full}  type=grouped series=series title=\"Full Data\"/>\n<BarChart data={missingX}  type=grouped series=series title=\"Missing X\"/>\n<BarChart data={missingY} type=grouped series=series title=\"Missing Y\"/>\n<BarChart data={nulls}  type=grouped series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Reference Area Implementation Example\nDESCRIPTION: Example showing how to implement reference areas in a LineChart with date ranges and custom colors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle=\"Sales per Month\">\n    <ReferenceArea xMin='2020-03-14' xMax='2020-08-15' label=First color=warning/>\n    <ReferenceArea xMin='2021-03-14' xMax='2021-08-15' label=Second/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Very Long Horizontal Bar Chart with Multiple Y-Series in Evidence\nDESCRIPTION: A horizontal bar chart displaying character episode data with two data series ('best_of_episodes' and 'non_best_of_episodes') shown as stacked bars.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={characters_ep_total} \n    x=character_name \n    y={['best_of_episodes','non_best_of_episodes']}\n    swapXY=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Secondary Line Series in Evidence\nDESCRIPTION: Demonstrates how to create a bar chart with a secondary y-axis represented as a line series. This is useful for showing the relationship between two metrics with different scales and data types.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_month} \n    x=month \n    y=sales\n    yFmt=usd0k\n    y2=num_orders\n    y2SeriesType=line\n/>\n```\n\n----------------------------------------\n\nTITLE: Link Columns with Unique Labels in DataTable\nDESCRIPTION: This Svelte snippet explains how to create link columns with unique labels per row in a DataTable, allowing for different clickable labels per entry, thereby adding interactive functionality to each row.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_29\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries}>\\n\\t<Column id=country_url contentType=link linkLabel=country />\\n\\t<Column id=country_id align=center />\\n\\t<Column id=category />\\n\\t<Column id=value_usd />\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Rendering Data with BigValue Component in Evidence\nDESCRIPTION: Uses the BigValue component to display the value from the 'value_col' column of 'my_query'. The component includes a link to '/page-b' which will navigate the user to that page when clicked.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/big-value-link.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BigValue data={my_query} value=value_col link=/page-b />\n```\n\n----------------------------------------\n\nTITLE: Filtering a Query with a Default Value - SQL\nDESCRIPTION: This snippet illustrates a SQL query where a default value can be used in the dropdown to select all items. It uses the 'like' operator to include items when '%' is selected, allowing for more flexible filtering of results.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/filters/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    item\nfrom needful_things.orders\ngroup by 1\n\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    date_trunc('month', order_date) as month,\n    sum(sales) as sales_usd\nfrom needful_things.orders\nwhere item like '${inputs.selected_item.value}'\ngroup by 1\n\n```\n\n----------------------------------------\n\nTITLE: GitLab Pages CI/CD Configuration\nDESCRIPTION: Configuration for deploying an Evidence project using GitLab Pages with Node.js build steps and file management\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/gitlab-pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild image: node:22\napplication files are in the `public` folder: true\ninstallation steps: npm ci\nbuild steps:\n  - npm run sources\n  - npm run build\n  - cp -r build public\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Secondary Y-Axis Bar in Markdown\nDESCRIPTION: Markdown code to create a line chart with a secondary Y-axis displayed as a bar chart using the LineChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<LineChart \n    data={orders_by_month}\n    x=month\n    y=sales_usd0k\n    y2=orders\n    y2SeriesType=bar\n    yAxisTitle=\"Sales per Month\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group with a Default Value in Evidence\nDESCRIPTION: Demonstrates setting a default selected value for a button group using the defaultValue property.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup\n    data={categories}\n    name=selected_button1\n    value=category\n    defaultValue=\"Cursed Sporting Goods\"\n/>\n\nSelected: {inputs.selected_button1}\n```\n\n----------------------------------------\n\nTITLE: Sample Tooltip Configuration in JavaScript\nDESCRIPTION: This snippet shows an example of how to configure tooltips for the BubbleMap using an array of objects. Each object specifies the properties for displaying data related to zip code and sales, including formatting and styles for better readability.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/bubble-map/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntooltip=[\n    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},\n    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},\n    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}\n]}\n```\n\n----------------------------------------\n\nTITLE: Querying total sales by category - SQL\nDESCRIPTION: This SQL query retrieves the total sales, number of orders, and average order value by category from the provided dataset. It aggregates the results and outputs values for each category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/data-table/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect category, sum(sales_usd0k) as sales, sum(num_orders_num0) as orders, sales/orders as aov\nfrom ${orders_by_category}\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Configuring BubbleChart with ReferenceLine in Evidence\nDESCRIPTION: Example showing how to create a bubble chart with price vs volume data and add a reference line annotation. The chart includes formatting for price in USD and demonstrates the use of the ReferenceLine component for annotations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bubble-chart/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<BubbleChart \n    data={price_vs_volume}\n    x=price\n    xFmt=usd0\n    y=number_of_units\n    size=total_sales\n>\n    <ReferenceLine\n        x=75\n        label=\"Consumer Limit\"\n    />\n</BubbleChart>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Content in DataTable Svelte\nDESCRIPTION: A Svelte code example that enables rendering HTML content within a table column, using the 'contentType=html' attribute to ensure HTML tags are processed as intended. This functionality supports intricate HTML formats and styling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_32\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={html_in_table}>\\n    <Column id=\\\"HTML in Table\\\" contentType=html/>\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Formatted Y-Axis Area Chart\nDESCRIPTION: Area chart with USD formatting applied to the y-axis values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/area-chart/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<AreaChart \n    data={orders_by_month}\n    x=month\n    y=sales\n    yFmt=usd0\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing 100% Stacked Bar Chart in Evidence\nDESCRIPTION: Demonstrates the creation of a 100% stacked bar chart, which shows the percentage contribution of each category to the total sales each month. This chart type is useful for showing composition and proportions.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021}\n    x=month\n    y=sales\n    yFmt=pct0\n    series=category\n    type=stacked100\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Details Component in Markdown\nDESCRIPTION: Example of implementing a collapsible Details component with a default collapsed state. The component includes a title and markdown content that can be revealed when expanded.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/details/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Details title=\"Definitions\">\n    \n    Definition of metrics in Solutions Targets\n\n    ### Time to Proposal\n\n    Average number of days it takes to create a proposal for a customer\n\n    *Calculation:*\n    Sum of the number of days it took to create each proposal, divided by the number of proposals created\n\n    *Source:*\n    Hubspot\n\n</Details>\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Series Line Chart in Markdown\nDESCRIPTION: Markdown code to create a multi-series line chart using the LineChart component from Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<LineChart \n    data={orders_by_category}\n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n    series=category\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Diagonal Reference Line with X2 and Y2 Coordinates\nDESCRIPTION: This example demonstrates creating a diagonal reference line in a ScatterPlot by specifying both starting coordinates (x,y) and ending coordinates (x2,y2). The line connects the two points with a descriptive label.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<ScatterPlot\n    data={countries}\n    x=gdp_usd\n    y=gdp_growth_pct1\n    tooltipTitle=country\n    series=continent\n>\n   <ReferenceLine \n    x=5000 \n    y=0.01 \n    x2=10000 \n    y2=0.09 \n    label=\"[x,y] to [x2,y2]\"/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Series Scatter Plot with Custom Height in HTML\nDESCRIPTION: This snippet demonstrates how to create a multi-series scatter plot with a custom chart area height. It plots GDP against GDP growth rate for different countries, grouped by continent.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/scatter-plot/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ScatterPlot\n    data={countries}\n    x=gdp_usd\n    y=gdp_growth_pct1\n    tooltipTitle=country\n    series=continent\n    chartAreaHeight=380\n/>\n```\n\n----------------------------------------\n\nTITLE: World Area Map for Country Sales\nDESCRIPTION: Evidence AreaMap component visualizing sales data across countries using a GeoJSON map\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/maps.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaMap data={countries} geoJsonUrl=\"/worldMap.json\" geoId=name areaCol=country value=sales/>\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable with Color Scale for Negative Numbers\nDESCRIPTION: This JSX snippet defines a DataTable component to render the 'negatives' dataset. The dataset features columns for name, number, and status, where the number column uses a diverging color scale, allowing visual assessment of negative and positive values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/conditional-formatting/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={negatives} rows=all>\n  <Column id=name/>\n  <Column id=number contentType=colorscale colorScale={['#ce5050','white','#6db678']}\n  colorMid=0/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Basic DateInput Implementation with Chart\nDESCRIPTION: A markdown/Svelte implementation showing how to define a DateInput component that filters data for a BarChart component. This demonstrates the basic usage pattern of DateInput with visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```sql filtered_query\nselect \n    *\nfrom ${orders_by_day}\nwhere day > '${inputs.range_filtering_a_query.value}'\n```\n\n<DateInput\n    name=date_filtering_a_query\n    data={orders_by_day}\n    dates=day\n/>\n\n<BarChart\n    data={filtered_query}\n    x=day\n    y=sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Blogs using DataTable in JavaScript\nDESCRIPTION: The JavaScript snippet uses a DataTable component to display blog data. It requires the DataTable component to be imported and assumes that a blogs data object is available. The <DataTable> component accepts \"data\" as a prop for the dataset and \"search\" to enable a search bar within the table. The expected data is an array of blog post objects.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/search-very-long.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={blogs} search/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Box Plot in Markdown\nDESCRIPTION: This snippet demonstrates how to create a basic box plot using the BoxPlot component in Evidence. It specifies the data source and key data points for constructing the boxes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/box-plot/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<BoxPlot \n    data={sales_distribution_by_channel}\n    name=channel\n    intervalBottom=first_quartile\n    midpoint=median\n    intervalTop=third_quartile\n    yFmt=usd0\n/>\n```\n\n----------------------------------------\n\nTITLE: DateInput with Multiple Preset Ranges\nDESCRIPTION: Example showing how to provide multiple preset range options for a date picker. This customizes the dropdown with specific time periods relevant to the analysis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<DateInput\n    name=\"date_range_3\"\n    range\n    presetRanges={['Last 7 Days', 'Last 3 Months', 'Year to Date', 'All Time']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Hover Tooltip Point Map in Svelte\nDESCRIPTION: Demonstrates how to create a custom hover tooltip for the PointMap component, including formatting and styling options for different fields.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap \n    data={la_locations} \n    lat=lat \n    long=long \n    value=sales \n    valueFmt=usd \n    pointName=point_name \n    height=200\n    tooltipType=hover\n    tooltip={[\n        {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},\n        {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'}    \n    ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: SQL for App Page Links\nDESCRIPTION: An SQL query creating URLs to parameterized app pages from DataTable rows by concatenating category names with base URLs, enhancing application navigation through generated links from data entries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"sql\\nselect\\n    category,\\n    '/parameterized-pages/' || category as category_link,\\n    sum(sales) as sales_usd0\\nfrom needful_things.orders\\ngroup by 1\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Legend Position with echartsOptions\nDESCRIPTION: Demonstrates how to customize the legend position and style using echartsOptions. This example places the legend on the right side of the chart with a vertical orientation and border.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\nechartsOptions={{\n    legend: {\n        right: 'right',\n        top: 'middle',\n        align: 'auto',\n        orient: 'vertical',\n        padding: 7,\n        borderColor: '#ccc',\n        borderWidth: 1,\n    },\n    grid: {\n        right: '120px'\n    }\n}}\n```\n\n----------------------------------------\n\nTITLE: Location Data Query\nDESCRIPTION: SQL query to fetch location data with a generated Google search link for each point.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/bubble-map/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *, 'https://www.google.com/search?q=' || point_name as link_col from la_locations\n```\n\n----------------------------------------\n\nTITLE: String-Based Table Date Range Selection\nDESCRIPTION: Defines a date range directly on a string table named \"orders\" for filtering data using SQL. This facilitates fetching data constrained to the specified date ranges and displaying it in a <DataTable>.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/daterange.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange data=\"orders\" dates=\"order_datetime\" name=\"order_range_2\" />\n```\n\nLANGUAGE: range_of_orders_2\nCODE:\n```\nselect * from orders where order_datetime between '${inputs.order_range_2.start}' and '${inputs.order_range_2.end}'\nlimit 1000\n```\n\n----------------------------------------\n\nTITLE: DateRange Component Using Data from Query\nDESCRIPTION: Demonstrates how to create a date range picker using data from a query. The component uses the 'orders_by_day' query and references the 'day' column for date values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange\n    name=date_range_from_query\n    data={orders_by_day}\n    dates=day\n/>\n\nFrom {inputs.date_range_from_query.start} to {inputs.date_range_from_query.end}\n```\n\n----------------------------------------\n\nTITLE: Value Component with Aggregation\nDESCRIPTION: Shows how to use the Value component with aggregation and formatting options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<Value data={orders} column=\"sales\" agg=\"avg\" fmt=\"usd0\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Dropdown for Chart Driver in React\nDESCRIPTION: This JSX snippet defines a Dropdown component populated with hashtag data fetched via the dropdownQuery SQL. It is initialized with three default values (0, 1, 2), representing the selected items. It facilitates the user's selection of hashtags to influence the output of the chart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-debug.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Dropdown data={dropdownQuery} name=\"chartDriver\" label=label value=value multiple defaultValue={[0,1,2]}/>\n```\n\n----------------------------------------\n\nTITLE: Stacked BarChart Example with Missing Y Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a stacked 100% bar chart using the `missingY` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, a dynamic title, and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_16\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingY} series=fed_reserve_district x=established_date title={titles[1]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sankey Diagram in Svelte\nDESCRIPTION: Svelte code that renders a Sankey diagram using the SankeyDiagram component. This example sets up the basic required properties including data source, column mappings for source, target, and values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n    data={query_name} \n    sourceCol= sourceCol\n    targetCol = targetCol\n    valueCol= valueCol\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Delta Component Usage in Markdown\nDESCRIPTION: Example of using the Delta component to display a formatted positive value with custom formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThis value is <Delta data={growth} column=positive fmt=\"+0.0%;-0.0%;0.0%\" /> since last month.\n```\n\n----------------------------------------\n\nTITLE: Applying SQL Queries with Default Date Values\nDESCRIPTION: Configures a <DateRange> component with default dates and queries SQL data between these built-in defaults. Includes defaulting to \"Last 7 Days\" if unspecified, illustrated with data display in both <DataTable> and <LineChart> components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/daterange.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange\n    name=date_picker\n    start='2021-01-01'\n    end='2021-10-21'\n    defaultValue='Last 7 Days'\n/>\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect \n'${inputs.date_picker.start}' as start, \n'${inputs.date_picker.end}' as end\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect \ndate_trunc('day', order_datetime) as date,\ncount(*) as orders\nfrom orders\nwhere order_datetime between '${inputs.date_picker.start}' and '${inputs.date_picker.end}'\ngroup by 1\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Heatmaps with Different Legend Options (JSX)\nDESCRIPTION: These JSX code snippets demonstrate Calendar Heatmap components with various legend configurations: default legend, no legend, and filter legend.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/calendar-heatmap/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarHeatmap\n    data={oneyear}\n    date=date\n    value=orders\n    filter=false\n/>\n\n<CalendarHeatmap\n    data={oneyear}\n    date=date\n    value=orders\n    legend=false\n    filter=false\n/>\n\n<CalendarHeatmap\n    data={oneyear}\n    date=date\n    value=orders\n    filter=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Rotated Labels Heatmap Example in Svelte\nDESCRIPTION: This Svelte code snippet showcases a heatmap component visualizing 'item_state' data with added customizations such as rotating x-axis labels, setting a title, and subtitle. It also specifies several style adjustments like right padding and cell height.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_4\n\nLANGUAGE: Svelte\nCODE:\n```\n<Heatmap \n    data={item_state} \n    x=item \n    y=state \n    value=orders \n    xLabelRotation=-45\n    colorScale={['white', 'maroon']} \n    title=\"Item Sales\"\n    subtitle=\"By State\"\n    rightPadding=40\n    cellHeight=25\n    nullsZero=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Colored Callouts Example (HTML, JSX)\nDESCRIPTION: Demonstrates how to use different colors for callouts based on predefined styles. This helps in visual differentiation to convey additional meaning in the data presentation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <Callout x=\"2019-03-01\" y=3000 color=info label=info />\n    <Callout x=\"2019-09-01\" y=3000 color=negative label=negative />\n    <Callout x=\"2020-03-01\" y=3000 color=warning label=warning />\n    <Callout x=\"2020-09-01\" y=3000 color=positive label=positive />\n    <Callout x=\"2021-03-01\" y=3000 color=base-content-muted label=base-content-muted />\n    <Callout x=\"2021-09-01\" y=3000 color=#63178f label=custom />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Area Map for Zip Code Sales\nDESCRIPTION: Evidence AreaMap component visualizing sales data by zip code\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/maps.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaMap title=\"Area Map\" data={la_zip_sales} geoId=ZCTA5CE10 areaCol=zip_code value=sales/>\n```\n\n----------------------------------------\n\nTITLE: SQL Query with URL Parameter for Templated Pages\nDESCRIPTION: This SQL snippet filters query results using a parameter extracted from the URL, ensuring page-specific data is returned. The parameter substitutes part of the SQL query conditionally.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/templated-pages/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    sum(sales) as sales_usd \nfrom needful_things.orders\nwhere first_name = '${params.customer}'\ngroup by 1\n```\n\n----------------------------------------\n\nTITLE: Creating Country Economic Data Bubble Chart in Evidence\nDESCRIPTION: Generates a bubble chart displaying country economic data with debt-to-GDP ratio on x-axis, GDP growth percentage on y-axis, and GDP USD value determining bubble size. Country names are shown in tooltips.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bubble-chart/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<BubbleChart\n    data={countries}\n    x=debt_to_gdp\n    y=gdp_growth_pct1\n    size=gdp_usd\n    tooltipTitle=country\n/>\n```\n\n----------------------------------------\n\nTITLE: DataTable with Wrapped Titles in Svelte\nDESCRIPTION: Simple example showing how to enable title wrapping in the DataTable component using the wrapTitles property.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_51\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} wrapTitles=true />\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Partials in Evidence\nDESCRIPTION: Demonstrates how to use partials to reuse content across multiple pages in Evidence, with examples of both the partial reference and the partial content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n{@partial \"my-first-partial.md\"}\n\nAnd some content specific to this page.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n# This is my first partial\n\nThis is some content in the partial.\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Range Slider\nDESCRIPTION: Creates a slider with range values derived from a data column\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<Slider\n    title='data slider'\n    name='RangeSlider'\n    size=large\n    step=100\n    data={flight_data}\n    range=fare\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Posts for Selected User and Tag\nDESCRIPTION: This SQL query selects posts based on user and tag IDs using a query derived from JavaScript inputs. It requires 'posts' and 'post_tags' tables. Only non-negative identifiers are processed, imposing a constraint on input validation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/filter-deps.md#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT p.* FROM posts p\nWHERE p.user_id = ${inputs.user.value}\n  AND ${inputs.tag.value} IN (SELECT pt.hashtag_id FROM post_tags pt where pt.post_id = p.id)\n  AND ${inputs.user.value} >= 0 AND ${inputs.tag.value} >= 0\n```\n\n----------------------------------------\n\nTITLE: DateInput with Manual Date Range\nDESCRIPTION: Example showing how to manually specify the start and end dates for a date range picker. This sets a fixed range for the entire year of 2019.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<DateInput\n    name=manual_date_range\n    start=2019-01-01\n    end=2019-12-31\n    range\n/>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Identifying Sales Drops\nDESCRIPTION: SQL query to identify significant sales drops by calculating differences between consecutive months.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    month,\n    sales,\n    concat('Sales dropped $', round(abs(sales_diff))::int::text) as label\nfrom (\n    select\n        month,\n        sales,\n        sales - lag(sales) over (order by month) as sales_diff\n    from ${orders_by_month}\n)\nwhere sales_diff < -2000\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SQL Query in Evidence\nDESCRIPTION: This query demonstrates a basic SQL select statement that returns a numeric metric and the current date. It's a working example of how to structure a simple query in Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/writing-queries/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n13 as metric,\ncurrent_date() as today\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data for Box Plots in SQL\nDESCRIPTION: This SQL query creates a sample dataset for box plot visualizations. It includes experiment names, min/max values, midpoints, confidence intervals, and colors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/box-plot/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Blue button' as experiment, -0.07 as min, -0.021 as value, 0.03 as max, 0.03 as confidence, '#b00b0b' as color\nunion all\nselect 'Video' as experiment, -0.09 as min, -0.03 as value, 0.03 as max,0.03 as confidence, '#0f9106' as color\nunion all\nselect 'Simpler CTA' as experiment,-0.04 as min,  0.02 as value,0.06 as max, 0.03 as confidence, '#044191' as color\nunion all\nselect 'Larger Font' as experiment, 0.02 as min, 0.06 as value, 0.11 as max,0.03 as confidence, '#0f9106' as color\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Histogram in Markdown\nDESCRIPTION: Markdown code to create a basic Histogram component using the 'orders' dataset and 'sales' as the x-axis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/histogram/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Histogram\n    data={orders}\n    x=sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating BarChart Components in JSX\nDESCRIPTION: This snippet showcases the use of <BarChart> JSX components to render different configurations of bar charts. Dependencies include a series of datasets represented by variables like 'full', 'missingX', and 'missingY'. Key parameters include 'data' for the dataset, 'series' for the series mapping, 'title' for the chart title, and optional 'type' or 'swapXY' for plot customization. The inputs are data objects, and outputs are semantic visual charts on the UI. This component does not handle data preprocessing.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeriesMulty/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<BarChart data={missingY} series=series title=\"Missing Y\"/>\n<BarChart data={nulls}  series=series title=\"Nulls\"/>\n\n<BarChart data={full}  series=series title=\"Full Data\" type=stacked100/>\n<BarChart data={missingX}  series=series title=\"Missing X\" type=stacked100/>\n<BarChart data={missingY} series=series title=\"Missing Y\" type=stacked100/>\n<BarChart data={nulls}  series=series title=\"Nulls\" type=stacked100/>\n\n<BarChart data={full}  swapXY=true series=series title=\"Full Data\"/>\n<BarChart data={missingY}  swapXY=true series=series title=\"Missing Y\"/>\n<BarChart data={missingX}  swapXY=true series=series title=\"Missing X\"/>\n<BarChart data={xSync}  swapXY=true series=series title=\"X out of sync\"/>\n<BarChart data={nulls}  swapXY=true series=series title=\"Nulls\"/>\n\n<BarChart data={full}  swapXY=true series=series title=\"Full Data\" type=stacked100/>\n<BarChart data={missingY}  swapXY=true series=series title=\"Missing Y\" type=stacked100/>\n<BarChart data={missingX}  swapXY=true series=series title=\"Missing X\" type=stacked100/>\n<BarChart data={xSync}  swapXY=true series=series title=\"X out of sync\" type=stacked100/>\n<BarChart data={nulls}  swapXY=true series=series title=\"Nulls\" type=stacked100/>\n\n<BarChart data={full}  type=grouped series=series title=\"Full Data\"/>\n<BarChart data={missingX}  type=grouped series=series title=\"Missing X\"/>\n<BarChart data={missingY} type=grouped series=series title=\"Missing Y\"/>\n<BarChart data={nulls}  type=grouped series=series title=\"Nulls\"/>\n\n<BarChart data={full}  swapXY=true type=grouped series=series title=\"Full Data\"/>\n<BarChart data={missingY}  swapXY=true type=grouped series=series title=\"Missing Y\"/>\n<BarChart data={missingX}  swapXY=true type=grouped series=series title=\"Missing X\"/>\n<BarChart data={xSync}  swapXY=true type=grouped series=series title=\"X out of sync\"/>\n<BarChart data={nulls}  swapXY=true type=grouped series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Scatter and Bubble Charts in JSX\nDESCRIPTION: This snippet provides examples of <ScatterPlot> and <BubbleChart> components, enabling the rendering of scatter and bubble charts respectively. ScatterPlot does not accept size parameters, while BubbleChart includes the 'size' parameter (e.g., size=y1), alongside 'legend' as an optional display toggle. The inputs are data objects, outputs are the corresponding plots on user interfaces. No explicit preprocessing of data is handled within these components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeriesMulty/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<ScatterPlot data={full}  series=series title=\"Full Data\"/>\n<ScatterPlot data={missingX}  series=series title=\"Missing X\"/>\n<ScatterPlot data={missingY} series=series title=\"Missing Y\"/>\n<ScatterPlot data={nulls}  series=series title=\"Nulls\"/>\n\n<BubbleChart data={full} size=y1 series=series title=\"Full Data\"/>\n<BubbleChart data={missingX}  size=y1 series=series title=\"Missing X\" legend=true/>\n<BubbleChart data={missingY}  size=y1 series=series title=\"Missing Y\" legend=true/>\n<BubbleChart data={nulls}  size=y1 series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Custom Basemap Point Map in Svelte\nDESCRIPTION: Shows how to use a custom basemap URL for the PointMap component. It includes attribution for OpenStreetMap contributors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap \n    data={la_locations} \n    lat=lat \n    long=long \n    value=sales \n    valueFmt=usd \n    pointName=point_name \n    height=200 \n    basemap={`https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.{ext}`}\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Funnel Chart Component in Markdown\nDESCRIPTION: This snippet demonstrates how to create a basic funnel chart using the FunnelChart component in Evidence. It uses the data generated from the SQL query and specifies the name and value columns.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/funnel-chart/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage\n    valueCol=customers\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Query with Multi-Select Dropdown Values\nDESCRIPTION: SQL query that uses a multi-select dropdown's values with the IN operator to filter orders data based on multiple selected categories.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect * from needful_things.orders\nwhere category in ${inputs.multi_select.value}\n```\n\n----------------------------------------\n\nTITLE: Input Point Map in Svelte\nDESCRIPTION: Shows how to use the PointMap as an input by setting a name prop, which allows the clicked point's data to be used as an input value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap \n    data={la_locations} \n    lat=lat \n    long=long \n    name=my_point_map \n    height=200\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Sankey Diagram Colors in Svelte\nDESCRIPTION: Svelte code that demonstrates how to apply a custom color palette to a Sankey diagram. This example sets muted link colors and defines a custom array of hex color values for the nodes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  linkColor=base-content-muted\n  colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Evidence Dropdowns\nDESCRIPTION: Examples showing how to set default values for dropdowns, both for hardcoded options and query-based dropdowns.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Dropdown name=default_option defaultValue=2>\n    <DropdownOption value=1 valueLabel=\"Option 1\" />\n    <DropdownOption value=2 valueLabel=\"Option 2\" />\n    <DropdownOption value=3 valueLabel=\"Option 3\" />\n</Dropdown>\n\n{inputs.default_option.value}\n\n\n<Dropdown \n    name=default_category \n    data={categories} \n    value=category \n    defaultValue=\"Cursed Sporting Goods\"\n/>\n\n{inputs.default_category.value}\n\n\n<Dropdown \n    name=default_not_an_option \n    data={categories} \n    value=category \n    title=\"Default not present in query\"\n    defaultValue=\"Not an option\"\n/>\n\n{inputs.default_not_an_option.value}\n```\n\n----------------------------------------\n\nTITLE: ECharts Donut Chart Configuration\nDESCRIPTION: This JavaScript object defines the configuration options for an ECharts donut chart. It sets the tooltip format and series type to 'pie', and passes in the data from the `donut_data` SQL query into the series data. The radius parameter creates the donut hole effect.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n      <ECharts config={\n          {\n              tooltip: {\n                  formatter: '{b}: {c} ({d}%)'\n              },\n            series: [\n              {\n                type: 'pie',\n                radius: ['40%', '70%'],\n                data: [...donut_data],\n              }\n            ]\n            }\n          }\n      />\n```\n\n----------------------------------------\n\nTITLE: Displaying All Columns in a DataTable\nDESCRIPTION: Svelte component that renders all columns from the orders_summary query result in a DataTable.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders_summary}/>\n```\n\n----------------------------------------\n\nTITLE: Dataset-Based Reference Line Configuration Query\nDESCRIPTION: SQL query showing different configuration options for dataset-based reference lines including vertical, horizontal, and multi-point lines.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect 'x_col' as x, null as y, null as x2, null as y2, 'Vertical lines at values in x_col' as Result union all\nselect null, 'y_col', null, null, 'Horizontal lines at values in y_col' union all\nselect 'x_col', 'y_col', null, null, 'Vertical lines at x_col (ignores y_col)' union all\nselect 'x_col', 'y_col', 'x2_col', 'y2_col', 'Sloped Lines from [x_col, y_col] to [x2_col, y2_col]'\norder by 2 nulls first, 1 nulls first, 3 nulls first, 4 nulls first\n```\n\n----------------------------------------\n\nTITLE: Apple Income Statement Sankey SQL Data\nDESCRIPTION: Generates a detailed SQL query representing Apple's financial flow from product revenues to operating profit\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/diagrams/sankey/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect 'iphone' as source, 'product revenue' as target, 51 as amount_usd\nunion all\nselect 'mac' as source, 'product revenue' as target, 10 as amount_usd\n... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar Chart with Negative Values in Evidence\nDESCRIPTION: A grouped bar chart displaying marketing spend across different channels with support for negative values, where each channel is shown as a separate bar.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={marketing_spend}\n    x=month_begin \n    y=spend\n    series=marketing_channel\n    type=grouped\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Bubble Chart Height in Evidence\nDESCRIPTION: Extends the multi-series bubble chart example with a custom chart area height of 380 pixels. Maintains the same data visualization of inflation rate vs. jobless rate grouped by continent.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bubble-chart/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<BubbleChart\n    data={countries}\n    x=inflation_rate_pct1\n    y=jobless_rate_pct1\n    size=gdp_usd\n    series=continent\n    tooltipTitle=country\n    chartAreaHeight=380\n/>\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Search SQL Implementation\nDESCRIPTION: SQL query example showing how to implement fuzzy search using the text input component with DuckDB's damerau_levenshtein function.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/text-input/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users\nORDER BY {inputs.first_name_search.search('first_name')}\nLIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Unpivot Data for Heatmap\nDESCRIPTION: This section explains using SQL's 'UNPIVOT' functionality to transform column-based data into a row-based format, suitable for heatmap input. It modifies 'region_sales' data by unpivoting it to produce a product-sales table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nUNPIVOT ${region_sales}\non COLUMNS(* EXCLUDE(region))\nINTO\n    NAME product\n    VALUE sales\n```\n\n----------------------------------------\n\nTITLE: Stacked BarChart Example with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a stacked 100% bar chart using the `xSync` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, a dynamic title, and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_18\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={xSync} series=fed_reserve_district x=established_date title={titles[3]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Adding Series Labels Next to Chart Lines\nDESCRIPTION: Demonstrates how to add labels at the end of each series line in a LineChart using echartsOptions. This example also adjusts the grid to accommodate the labels.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\nechartsOptions={{\n    series: [\n    {\n        endLabel: {\n            show: true,\n            formatter: (params) => params.seriesName,\n            offset: [0, 0], // [x, y] offset from the end of the line\n        }\n    },\n    {\n        endLabel: {\n            show: true,\n            formatter: (params) => params.seriesName,\n            offset: [0, 0], // [x, y] offset from the end of the line\n        }\n    }\n    ],\n    grid: {\n        right: '50px',\n        top: '10px'\n    }\n}}\n```\n\n----------------------------------------\n\nTITLE: Persisting Selected Tab to URL\nDESCRIPTION: Shows how to persist the selected tab in the URL for sharing purposes using the id attribute on the Tabs component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/tabs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs id=\"example-tab\">\n    <Tab label=\"One\">\n        Click Second id Tab and notice the the url updates!\n    </Tab>\n    <Tab label=\"Two\">\n        Refresh the page and the tab you selected persists!\n    </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Annotations in Evidence\nDESCRIPTION: Example of adding reference lines and areas to an Evidence area chart, demonstrating how to annotate chart data with additional contextual information\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/area-chart/index.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<AreaChart data={sales_data} x=date y=sales>\n\t<ReferenceLine data={target_data} y=target label=name />\n\t<ReferenceArea xMin='2020-03-14' xMax='2020-05-01' />\n</AreaChart>\n```\n\n----------------------------------------\n\nTITLE: Text Input with Default Value and Search Function\nDESCRIPTION: Demonstrates setting a default value and using a search function on the input value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/text-input.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<TextInput name=yet_another_search title=\"Default Selected\" defaultValue=\"Sporting\"/>\n\nInput: {inputs.yet_another_search}\n\nSearch Value: {inputs.yet_another_search.search?.('column_name')}\n```\n\n----------------------------------------\n\nTITLE: Filtered Locations Query\nDESCRIPTION: SQL query to filter locations based on selected point name from user input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/bubble-map/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${la_locations}\nwhere point_name = '${inputs.my_point_map.point_name}' OR '${inputs.my_point_map.point_name}' = 'true'\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data with SQL Query\nDESCRIPTION: A SQL query that generates a small dataset with start/end points and labels for time series data visualization. The query uses UNION ALL to combine two rows of sample data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/stringSeries/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 'a1' as start, 'a3' as tend, 'ABC' as label\nunion all\nselect 'a5' as start, 'a6' as tend, 'DEF' as label\n```\n\n----------------------------------------\n\nTITLE: Querying Hashtags for Dropdown Options\nDESCRIPTION: This SQL query retrieves hashtag data to populate the options in the Evidence Dropdown component. It selects the `tag` column as `label` and the `id` column as `value`, which are then used by the dropdown component to display the options and their corresponding values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-basic-usage.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```sql hashtags\nSELECT tag as label, id as value from hashtags\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group with Alternative Labels in Evidence\nDESCRIPTION: Shows how to use different column values for the display labels versus the actual values in a button group component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup\n    data={categories} \n    name=alternative_labels_selector\n    value=category\n    label=short_category\n/>\n\nSelected: {inputs.alternative_labels_selector}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sparkline visualization using SQL - SQL\nDESCRIPTION: This SQL snippet constructs a common table expression (CTE) to summarize monthly sales per category, which can be displayed using sparkline representations in a DataTable. The result is a structured dataset of total sales and monthly sales details.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/data-table/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nWITH monthly_sales AS (\n    SELECT \n        category,\n        DATE_TRUNC('month', order_datetime) AS date,\n        SUM(sales) AS monthly_sales\n    FROM \n        needful_things.orders\n    GROUP BY \n        category, DATE_TRUNC('month', order_datetime)\n)\nSELECT \n    category,\n    sum(monthly_sales) as total_sales,\n    ARRAY_AGG({'date': date, 'sales': monthly_sales}) AS sales\nFROM \n    monthly_sales\nGROUP BY \n    category\norder by total_sales desc\n```\n\n----------------------------------------\n\nTITLE: Horizontal Stacked Bar Chart with Sorting Disabled in Evidence\nDESCRIPTION: A horizontal stacked bar chart showing category sales data by month with sorting disabled and explicit category type specified for the x-axis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category}\n    swapXY=true\n    x=month\n    y=sales_usd0k\n    series=category\n    xType=category\n    sort=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Positive Delta Value in Chip Format\nDESCRIPTION: Example of displaying a positive delta value as a chip with percentage formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<Delta data={growth} column=growth fmt=pct1 chip=true />\n```\n\n----------------------------------------\n\nTITLE: LastRefreshed Component with Custom Prefix in Markdown\nDESCRIPTION: Shows how to use the LastRefreshed component with a custom prefix to display an alternative message for the last data update time.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/last-refreshed/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<LastRefreshed prefix=\"Data last updated\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Table with Custom Framework\nDESCRIPTION: This snippet illustrates how to display a data table with a dynamic dimension column based on user input within a custom framework. It utilizes previously selected data and buttons to render a table showing a cohort, a selected dimension, and metadata. Requires 'datum' data and button group input 'inputs.dimension'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/reactive-columns/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: CustomUI\nCODE:\n```\n<DataTable data={datum}>\\n\\t<Column id=\\\"cohort\\\" title=\\\"Week\\\" />\\n\\t<Column id={inputs.dimension} />\\n\\t<Column id=\\\"metadata\\\" title=\\\"Metadata\\\" />\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Filtering with Date Range in SQL\nDESCRIPTION: SQL query using date range filtering with start and end dates from a DateInput component. This demonstrates the BETWEEN operator for date range filtering.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    *\nfrom ${orders_by_day}\nwhere day between '${inputs.range_filtering_a_query.start}' and '${inputs.range_filtering_a_query.end}'\n```\n\n----------------------------------------\n\nTITLE: DataTable with Selected Columns\nDESCRIPTION: Svelte component that displays only specific columns from the orders_summary query with custom column titles and formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders_summary}> \n    <Column id=state title=\"Sales State\"/> \n\t<Column id=item/> \n\t<Column id=category/> \n\t<Column id=sales fmt=usd/> \n\t<Column id=channel/> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Creating Accordion with Custom Title Slot in Markdown\nDESCRIPTION: Shows how to use a custom title slot in the AccordionItem to include components within the accordion title. This example includes a Value component in the title of the first item.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/accordion/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Accordion>\n  <AccordionItem title=\"Item 1\">\n    <span slot='title'>Custom Title <Value data={growth} fmt=pct1 /></span>\n    Content 1 \n  </AccordionItem>\n  <AccordionItem title=\"Item 2\">\n    <p>Content 2</p>\n  </AccordionItem>\n  <AccordionItem title=\"Item 3\">\n    <p>Content 3</p>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Displaying Data with DataTable Component in Svelte\nDESCRIPTION: Renders the complete dataset in a tabular format using the DataTable component. DataTable automatically generates columns and formatting based on the data provided.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/single-value.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={datas} />\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTable with Column Groups\nDESCRIPTION: HTML/XML-style component configuration that sets up a data table with grouped columns, formatting options, and aggregation rules for economic data display.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/column-groups/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<DataTable data={countries} totalRow=true rows=5 wrapTitles groupBy=continent groupType=section totalRowColor=#f2f2f2>\n  <Column id=continent totalAgg=\"Total\" totalFmt='# \"Unique continents\"'/>\n  <Column id=country totalAgg=countDistinct totalFmt='0 \"countries\"'/>\n  <Column id=gdp_usd totalAgg=sum fmt='$#,##0\"B\"' totalFmt='$#,##0.0,\"T\"' colGroup=\"GDP\"/>\n  <Column id=gdp_growth totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' colGroup=\"GDP\" contentType=delta/>\n  <Column id=jobless_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' contentType=colorscale colorScale=negative colGroup=\"Labour Market\"/>\n  <Column id=population totalAgg=sum fmt='#,##0\"M\"' totalFmt='#,##0.0,\"B\"' colGroup=\"Labour Market\"/>\n  <Column id=interest_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' wrapTitle=false colGroup=\"Other\"/>\n  <Column id=inflation_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' colGroup=\"Other\"/>\n  <Column id=gov_budget totalAgg=weightedMean weightCol=gdp_usd fmt='0.0\"%\"' contentType=delta colGroup=\"Other\"/>\n  <Column id=current_account totalAgg=weightedMean weightCol=gdp_usd fmt='0.0\"%\"' colGroup=\"Other\"/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Filtered Orders Query\nDESCRIPTION: SQL query that filters the order history based on selected categories from the dropdown input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dropdown/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${order_history}\nwhere category in ${inputs.category.value}\n```\n\n----------------------------------------\n\nTITLE: 100% Stacked Area Chart Implementation\nDESCRIPTION: Area chart showing proportional sales data by category using 100% stacked layout.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/area-chart/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<AreaChart \n    data={orders_by_category_2021}\n    x=month\n    y=sales\n    series=category\n    type=stacked100\n/>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Date Range Filters on Orders Data\nDESCRIPTION: Utilizes <DateRange> and SQL to filter orders data based on dynamic date ranges inputted by the user. The <DateRange> component captures the dates, which are then applied to filter orders in the SQL query. The data is subsequently displayed using a <DataTable> component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/daterange.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange data={orders} dates=\"order_datetime\" name=\"order_range\" />\n```\n\nLANGUAGE: range_of_orders\nCODE:\n```\nselect * from orders where order_datetime between '${inputs.order_range.start}' and '${inputs.order_range.end}'\nlimit 1000\n```\n\n----------------------------------------\n\nTITLE: Rendering ECharts Component - HTML/JSX\nDESCRIPTION: This snippet shows how to render the ECharts component with the configuration options set previously. It requires the ECharts library and a suitable component setup for embedding the chart in a webpage. The expected input is the `options` object containing all chart configurations, and the output is a scatter plot displayed within the specified HTML context.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_13\n\nLANGUAGE: HTML/JSX\nCODE:\n```\n<ECharts config={options}/>\n```\n\n----------------------------------------\n\nTITLE: Scalar Legend Area Map Implementation in Svelte\nDESCRIPTION: Implements an area map with scalar value representation using USD formatting. Shows basic map configuration without custom colors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<AreaMap\n    data={grouped_locations}\n    lat=lat\n    long=long\n    value=sales\n    geoId=ZCTA5CE10\n    areaCol=zip_code\n    valueFmt=usd\n/>\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot Example with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `ScatterPlot` component in Evidence. It renders a scatter plot using the `xSync` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_43\n\nLANGUAGE: Evidence\nCODE:\n```\n<ScatterPlot data={xSync} series=fed_reserve_district x=established_date title={titles[3]}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Button Component in Evidence (Markdown)\nDESCRIPTION: This code snippet demonstrates how to use the LinkButton component in Evidence to create a styled link that appears as a button. The component takes a 'url' prop and content for the button text.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/link-button/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<LinkButton url='/components/ui/link-button'>\n  My Link Button\n</LinkButton>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in QueryLoad Components\nDESCRIPTION: Shows how to implement error handling for database queries using the error slot in the QueryLoad component to provide meaningful feedback to users when queries fail.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/custom/component-queries/index.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<QueryLoad data={query} let:loaded={tables}>\n    <svelte:fragment slot=\"skeleton\" />\n    \n    <svelte:fragment slot=\"error\" let:error>\n        <div class=\"text-red-600\">\n            <h3 class=\"font-bold\">Unable to load data</h3>\n            <p>{error.message}</p>\n            <p class=\"text-sm mt-2\">\n                Please check your query and try again.\n            </p>\n        </div>\n    </svelte:fragment>\n\n    <ul>\n        {#each tables as table}\n            <li>{table.table_name}</li>\n        {/each}\n    </ul>\n</QueryLoad>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scatter Plot with Economic Data in HTML\nDESCRIPTION: This snippet demonstrates how to create a basic scatter plot using the ScatterPlot component. It plots GDP against GDP growth rate for different countries, with a reference line at 6.5% growth.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/scatter-plot/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ScatterPlot\ndata={countries}\nx=gdp_usd\ny=gdp_growth_pct1\ntooltipTitle=country\n>\n\n    <ReferenceLine y=0.065/>\n\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Horizontal BarChart Example with Full Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal bar chart using the `full` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, sets the title to \"Full Data\", and disables sorting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_20\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={full} x=established_date series=fed_reserve_district swapXY=true title=\"Full Data\" sort=false/>\n```\n\n----------------------------------------\n\nTITLE: BigValue Component Configuration\nDESCRIPTION: This snippet shows how to configure the BigValue component in Evidence. It includes properties like `data`, `value`, `sparkline`, `comparison`, `comparisonTitle`, `sparklineType`, `connectGroup`, and `comparisonDelta` to customize the display of key metrics and comparisons. Different configurations are used to highlight different metrics and comparisons.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/big-value/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"<BigValue \ndata = {owc} \nvalue=sales_usd0k\nsparkline=month\ncomparison=sales_change_pct0\ncomparisonTitle=\\\"vs. Last Month\\\"\nsparklineType=area\nconnectGroup=bigvalues\ncomparisonDelta=false\n/>\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\"<BigValue data = {owc} \nvalue=num_orders_num0\ntitle=\\\"Orders\\\"\nsparkline=month\nsparklineType=bar\ncomparison=num_orders_change_pct0\ncomparisonTitle=\\\"vs. Last Month\\\"\nsparklineColor=maroon\nsparklineDateFmt=shortdate\nconnectGroup=bigvalues\n/>\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\"<BigValue data = {owc} \nvalue=aov_usd2\ntitle=\\\"AOV ($)\\\"\nsparkline=month\ncomparison=aov_change_pct0\ncomparisonTitle=\\\"vs. Last Month\\\"\nsparklineColor=navy\nsparklineDateFmt=mmm\nsparklineYScale=true\nconnectGroup=bigvalues\n/> \"\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\"<BigValue data = {owc} \nvalue=aov_usd2\ntitle=\\\"AOV ($)\\\"\nsparkline=month\ncomparison=aov_change_pct0\ncomparisonTitle=\\\"vs. Last Month\\\"\nsparklineColor=navy\nsparklineDateFmt=mmm\nsparklineYScale=true\nconnectGroup=bigvalues\nneutralMin=-0.07\nneutralMax=0.07\n/> \"\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\"<BigValue data = {owc} \nvalue=num_orders_num0\ntitle=\\\"Orders\\\"\nsparkline=month\nsparklineType=bar\ncomparison=num_orders_change_pct0\ncomparisonTitle=\\\"vs. Last Month\\\"\nsparklineColor=maroon\nsparklineDateFmt=shortdate\nconnectGroup=bigvalues\ndownIsGood=true\n/>\"\n```\n\nLANGUAGE: markdown\nCODE:\n```\n\"<BigValue \ndata = {orders_with_comparisons} \n/>\"\n```\n\n----------------------------------------\n\nTITLE: Default Scatter Plot Implementation in Evidence.dev\nDESCRIPTION: Creates a basic scatter plot showing the relationship between price and number of units without any additional formatting or series differentiation. This represents the minimal configuration required for a scatter plot.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/scatter-plot/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ScatterPlot \n    data={price_vs_volume}\n    x=price\n    y=number_of_units\n/>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Source Queries\nDESCRIPTION: Demonstrates how to set environment variables for build-time query parameter interpolation\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nEVIDENCE_VAR__client_id=123\n```\n\n----------------------------------------\n\nTITLE: Creating a Y=X Reference Line\nDESCRIPTION: This example shows how to create a diagonal reference line representing the equation y=x in a ScatterPlot. It uses coordinates that start at (0,0) and end at (0.09,0.09) to create a 45-degree reference line.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<ScatterPlot\n    data={countries}\n    x=jobless_rate_pct1\n    xMin=0\n    y=gdp_growth_pct1\n    tooltipTitle=country\n    series=continent\n>\n   <ReferenceLine \n    x=0.0\n    y=0.0\n    x2=0.09\n    y2=0.09 \n    label=\"y=x\"/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Using Group Component in Grid Layout with HTML\nDESCRIPTION: HTML example showing how to use the Group component within a Grid to combine multiple items in a single cell. It demonstrates mixing text and a BarChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/grid/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Grid cols=2>\n    <LineChart data={orders_by_category} x=order_month y=orders/>\n   <Group>\n      Some text\n    <BarChart data={orders_by_category} x=order_month y=orders fillColor=#00b4e0/>\n   </Group>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grouped Bar Chart in Evidence\nDESCRIPTION: A horizontal grouped bar chart displaying sales data by category with grouped bars for each month and category-typed x-axis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category} \n    swapXY=true \n    x=month\n    y=sales_usd0k \n    series=category \n    type=grouped \n    xType=category\n/>\n```\n\n----------------------------------------\n\nTITLE: Horizontal BarChart Example with Missing X Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal bar chart using the `missingX` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, and sets the title to \"Missing X\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_22\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingX} x=established_date series=fed_reserve_district swapXY=true title=\"Missing X\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Country Summary Data in Svelte\nDESCRIPTION: This Svelte snippet utilizes the DataTable component to display the country summary data dynamically. It defines columns for country name, category, value in USD, and year-over-year change with appropriate formatting. The component enhances user experience by presenting data in a structured and interactive way.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_summary}>\n\t<Column id=country />\n\t<Column id=category />\n\t<Column id=value_usd />\n    <Column id=yoy contentType=delta fmt=pct title=\"Y/Y Chg\"/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Area Chart with Disabled Downloads in Evidence\nDESCRIPTION: Creates an area chart for 'Sinister Toys' category where both data and image download options are disabled. This demonstrates how to control download capabilities for visualizations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart\n    data={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\n    x=month\n    y=sales_usd0k \n    downloadableData=false\n    downloadableImage=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Default Markers in Svelte\nDESCRIPTION: Svelte code to create a line chart with default markers using the LineChart component from Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month}\n    x=month\n    y=sales_usd0k\n    markers=true \n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Line Chart in Evidence\nDESCRIPTION: This snippet renders a LineChart component, using the result of the `weekly_ecommerce_orders` SQL query as its data source. The component displays the aggregated weekly ecommerce orders.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/dimension-grid/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: evidence\nCODE:\n```\n<LineChart \n    data={weekly_ecommerce_orders}\n/>\n```\n\n----------------------------------------\n\nTITLE: DateInput with Single Preset Range\nDESCRIPTION: Example showing how to customize a date range picker with a single preset option. This limits the available preset ranges to only 'Last 7 Days'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<DateInput \n    name=\"date_range_2\" \n    presetRanges={'Last 7 Days'} \n    range\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Categories from Database\nDESCRIPTION: This SQL query retrieves distinct category values from the 'needful_things.orders' table, excluding null values. The result is grouped and ordered alphabetically by category, which is then used as a data source for a dropdown component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/lots-of-dropdowns.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```sql categories\n  select\n    category\n  from needful_things.orders\n  where category is not null\n  group by 1\n  order by category asc\n```\n```\n\n----------------------------------------\n\nTITLE: Export Components in index.js (Manifest Method)\nDESCRIPTION: This JavaScript snippet demonstrates how to export components from the `src/lib` directory when using a manifest file. It creates an `index.js` file that exports each component listed in the `evidence.manifest.yaml` file, making them available for use in Evidence applications.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/create-component-plugin/index.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"    export {default as ComponentOne} from \\\"./ComponentOne\\\";\\n    export {default as ComponentTwo} from \\\"./ComponentTwo\\\";\\n    \"\n```\n\n----------------------------------------\n\nTITLE: Format Orders With Comparisons - SQL\nDESCRIPTION: This SQL query selects several fields such as month, category, sales, number of orders, and average order value from the orders_with_comparisons dataset with aliases, aiding in clear representation within data tables.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/total-rows/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect \n    month,\n    category,\n    sales_usd0k as sales,\n    num_orders_num0 as num_orders,\n    aov_usd2 as aov\nfrom ${orders_with_comparisons}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query-Based Dropdown Components in Evidence\nDESCRIPTION: Example of creating dropdown components using query results. Shows both a simple category dropdown and a year dropdown with custom title and ordering.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Dropdown data={categories} name=category value=category/>\n\n<Dropdown data={years} name=year value=year order=year title=\"Order Year\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Box Plot with Custom Colors in Markdown\nDESCRIPTION: This snippet shows how to apply custom colors to a box plot by specifying a color property in the BoxPlot component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/box-plot/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<BoxPlot \n    data={sales_distribution_by_channel}\n    name=channel\n    intervalBottom=first_quartile\n    midpoint=median\n    intervalTop=third_quartile\n    yFmt=usd0\n    color=color\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Bar Borders with echartsOptions\nDESCRIPTION: Demonstrates how to add custom borders to bars in a BarChart using echartsOptions. This example shows how to apply the same style to multiple series individually.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<BarChart\n    data={country_sales}\n    x=date\n    y=sales\n    series=country\n    echartsOptions={{\n        series: [\n            {itemStyle: {\n                borderWidth: 1,\n                borderColor: 'red'\n            }},\n            {itemStyle: {\n                borderWidth: 1,\n                borderColor: 'red'\n            }},\n            {itemStyle: {\n                borderWidth: 1,\n                borderColor: 'red'\n            }},\n            {itemStyle: {\n                borderWidth: 1,\n                borderColor: 'red'\n            }}\n        ]\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Post Tags by Hashtag ID (Multi Select, No Default)\nDESCRIPTION: This SQL query filters the `post_count_by_tag` table based on the values selected in the 'multi_no_default' dropdown. It uses the `IN` operator to filter by multiple hashtag IDs.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-basic-usage.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n```sql q_multi_no_default\nSELECT * FROM ${post_count_by_tag} WHERE hashtag_id in ${inputs.multi_no_default.value}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Command Data Table - JavaScript\nDESCRIPTION: This JavaScript snippet utilizes the DataTable component to display the commands and their descriptions clearly. It formats the command information in a table layout, providing a user-friendly view of the troubleshooting commands.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/guides/troubleshooting/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={commands} formatColumnTitles=false>\n    <Column id=\"Description\" wrap/>\n    <Column id=\"Command\" wrap contentType=html/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Categories and Rendering Bar Charts - Markdown with SQL Statement\nDESCRIPTION: This markdown snippet illustrates how to iterate through unique categories from the orders and create BarChart visualizations based on sales data for each category. It utilizes SQL queries to gather the necessary data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/query-functions/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{#each categories as category}\n    <BarChart data={orders_by_category.where(`category = '${category}'`)} />\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Styling Hardcoded Button Group as Tabs in Evidence\nDESCRIPTION: Demonstrates how to create a tabs-style button group with manually defined options using ButtonGroupItem components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup name=button_tabs_hardcoded_options display=tabs>\n    <ButtonGroupItem valueLabel=\"Option One\" value=\"1\" />\n    <ButtonGroupItem valueLabel=\"Option Two\" value=\"2\" />\n    <ButtonGroupItem valueLabel=\"Option Three\" value=\"3\" />\n</ButtonGroup>\n\nSelected: {inputs.button_tabs_hardcoded_options}\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data for Funnel Chart in SQL\nDESCRIPTION: This SQL query creates a sample dataset for a funnel chart, representing customer progression through different stages of a process.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/funnel-chart/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from (\n    select 150 as customers, 'Show' as stage, 1 as stage_id\n    union all\n    select 102 as customers, 'Click' as stage, 2 as stage_id\n    union all\n    select 49 as customers, 'Visit' as stage, 3 as stage_id\n    union all\n    select 40 as customers, 'Inquiry' as stage, 4 as stage_id\n    union all\n    select 14 as customers, 'Order' as stage, 5 as stage_id\n) order by stage_id asc\n```\n\n----------------------------------------\n\nTITLE: Custom Sized Embed Component in Markdown\nDESCRIPTION: Shows how to customize the dimensions of the Embed component using width and height attributes. This example sets a specific width and height for the embedded content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/embed/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Embed \n    url=\"https://www.youtube.com/embed/UiCioBZ5IDU?si=dychrQurRTlhz9DN\"\n    title=\"Sample Video\"\n    width=800\n    height=450\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTable with Row Shading\nDESCRIPTION: Creates a DataTable with row shading enabled, which adds alternating background colors to rows for better readability.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_36\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} rowShading=true />\n```\n\n----------------------------------------\n\nTITLE: Filtering a Query with Date Input in SQL\nDESCRIPTION: SQL query that filters data from orders_by_day table based on a selected date from a DateInput component. This shows how to use the date value in a WHERE clause.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect \n*\nfrom ${orders_by_day}\nwhere day > '${inputs.date_filtering_a_query.value}'\n```\n\n----------------------------------------\n\nTITLE: Positioning Delta Symbol on Left in Chip Format\nDESCRIPTION: Example of displaying a delta value as a chip with the symbol positioned on the left side.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<Delta data={growth} column=positive fmt=pct1 chip=true symbolPosition=left/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Sankey Diagram in Svelte\nDESCRIPTION: This snippet demonstrates how to create a basic Sankey diagram using the SankeyDiagram component in Svelte. It specifies properties such as data source, columns for source/target, and link color.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  linkColor=gradient\n  colorPalette={['#6e0e08', '#3d8cc4', '#1b5218', '#ebb154']}/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dimension Grid with Metric in Evidence\nDESCRIPTION: This snippet renders a DimensionGrid component using the `orders` data and aggregates the 'sales' column. The metric is specified as `sum(sales)`, which calculates the sum of sales for each dimension combination.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/dimension-grid/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: evidence\nCODE:\n```\n<DimensionGrid data={orders} metric=sum(sales)/>\n```\n\n----------------------------------------\n\nTITLE: Defining Single Reference Point in LineChart\nDESCRIPTION: Example showing how to add a single reference point with label to a line chart with specific x and y coordinates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <ReferencePoint x=\"2019-07-01\" y=6590 label=\"2019-07-01 : Big drop\" labelPosition=bottom/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Calculating User Growth by Month with SQL\nDESCRIPTION: SQL query that calculates user count by month and the month-over-month growth (delta). Uses a CTE to first group users by month, then applies window functions to compute the change in user count.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/user-analytics.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nWITH raw as (\n    SELECT\n        COUNT(*) as userCount,\n        DATE_TRUNC('month', created_at) m\n    FROM users\n    GROUP BY 2\n    ORDER BY 2 desc\n)\nSELECT userCount, userCount - LAG(userCount, -1) OVER (order by m desc) as delta, m from raw\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Link Labels in Sankey Diagram with Svelte\nDESCRIPTION: Svelte code that demonstrates the default 'full' link labeling option which shows both value and percentage on links. This requires the percentCol property to properly display percentages alongside values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  valueFmt=usd\n  linkLabels=full\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Monthly Sales with Dimension Grid Input in SQL\nDESCRIPTION: This SQL query calculates monthly sales, filtering the data based on the selected dimensions from the Dimension Grid input. It demonstrates how to use the Dimension Grid as a dynamic filter in queries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dimension-grid/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect \norder_month, \nsum(sales) as sales_usd0 \nfrom needful_things.orders \nwhere ${inputs.selected_dimensions}\ngroup by all \n```\n\n----------------------------------------\n\nTITLE: Querying Years from Database\nDESCRIPTION: This SQL query extracts the year from the 'order_datetime' column in the 'needful_things.orders' table. It groups and orders the results by year in ascending order and the data is used as the data source for a dropdown component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/lots-of-dropdowns.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```sql years\n  select\n    date_part('year', order_datetime) as year\n  from needful_things.orders\n  where year is not null\n  group by 1\n  order by year asc\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Orders Data in SQL\nDESCRIPTION: This SQL query selects state, category, item, channel, and sales from the needful_things.orders table. It provides the base data for the Dimension Grid example.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dimension-grid/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect state, category, item, channel, sales from needful_things.orders\n```\n\n----------------------------------------\n\nTITLE: Setting Source-Based Link Colors in Sankey Diagram with Svelte\nDESCRIPTION: Svelte code that configures link colors in a Sankey diagram to match their source nodes. This creates a visual connection between source nodes and their outgoing links using the same color palette.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  linkColor=source\n  colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Extended Orders Data in SQL\nDESCRIPTION: SQL query to select all columns from the needful_things.orders table, limiting the result to 10000 rows.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/histogram/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from needful_things.orders limit 10000\n```\n\n----------------------------------------\n\nTITLE: Creating ButtonGroup with Query Data in HTML\nDESCRIPTION: Creates a ButtonGroup component using data from a SQL query. The selected value is stored in the 'first_category_name' input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/button-group/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ButtonGroup data={categories} name=first_category_name value=category />\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Category and Month in SQL\nDESCRIPTION: SQL query that aggregates order data by both category and month, calculating total sales and order count. This provides multi-dimensional time-series data for more complex sparkline visualizations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sparkline/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect category, order_month as month, sum(sales) as sales_usd0k, count(1) as orders from needful_things.orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Filtering Post Tags by Hashtag ID (Multi Select, Without Default)\nDESCRIPTION: This SQL query filters the `post_count_by_tag` table based on the values selected in the 'multi_without_default' dropdown. It uses the `IN` operator to filter by multiple hashtag IDs.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-basic-usage.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n```sql q_multi_without_default\nSELECT * FROM ${post_count_by_tag} WHERE hashtag_id in ${inputs.multi_without_default.value}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Category and Day of Week\nDESCRIPTION: SQL query that retrieves order counts grouped by product category and day of week from the needful_things.orders table, including day name and numeric day for sorting purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/heatmap/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect category, dayname(order_datetime) as day, dayofweek(order_datetime) as day_num, count(*) as order_count from needful_things.orders\ngroup by all\norder by category, day_num  \n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable with summary data - JSX\nDESCRIPTION: This JSX snippet defines a DataTable component that receives summary data and displays various metrics including sales, orders, and AOV with formatting options. It provides conditional formatting based on content type.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/data-table/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={summary}> \n\t<Column id=category/> \n\t<Column id=sales fmt=usd0k contentType=colorscale colorScale={['#304a8a','#e8efff']}/> \n\t<Column id=orders/> \n\t<Column id=aov fmt=usd2 contentType=colorscale colorScale={['#b52626','#FFFFFF','#2e9939']}/> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Adding Data Zoom to Chart with echartsOptions\nDESCRIPTION: Shows how to add a data zoom feature to a chart using echartsOptions. This allows users to zoom and pan the chart data range.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\nechartsOptions={{\n    dataZoom: [\n        {\n            start: 0,\n            end: 100,\n        },\n    ],\n    grid: {\n        bottom: '50px',\n    },\n}}\n```\n\n----------------------------------------\n\nTITLE: Text Input with Default Value\nDESCRIPTION: Shows how to set a default value for a TextInput component and access its value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/text-input.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<TextInput name=search_input_with_default defaultValue=\"Hello World\" />\n\nInput: {inputs.search_input_with_default}  \nInput is set: {!inputs.search_input_with_default[Unset]}\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI\nDESCRIPTION: This snippet demonstrates how to install the Firebase CLI globally using npm. The CLI is necessary for deploying applications to Firebase.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/firebase/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Likers for a Selected Tag in SQL\nDESCRIPTION: This SQL query counts the number of unique users who have liked posts containing a specific hashtag within a selected time range. It joins users, likes, post_tags, and posts tables to identify distinct likers.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/trends.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(DISTINCT u.ID) as authorCount\nFROM users u\n    INNER JOIN likes l ON l.user_id = u.id\n    INNER JOIN post_tags pt ON pt.post_id = l.post_id\n    INNER JOIN posts p ON pt.post_id = p.id\nWHERE pt.hashtag_id = ${inputs.selected_tag.value} AND p.created_at > CURRENT_DATE - INTERVAL ${inputs.time_range.value}\nGROUP BY pt.hashtag_id\n```\n\n----------------------------------------\n\nTITLE: Stacked Area Chart in Evidence\nDESCRIPTION: Creates a stacked area chart showing sales data across all categories. The x-axis represents months, y-axis shows sales in USD, and different categories are stacked and represented by different colors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart \n    data={orders_by_category} \n    x=month \n    y=sales_usd0k \n    series=category\n/>\n```\n\n----------------------------------------\n\nTITLE: User Credentials YAML for PostgreSQL SSL Connection\nDESCRIPTION: This YAML snippet contains the configuration for user credentials used in connecting to PostgreSQL with SSL, including base64 encoded user key and certificates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/postgres/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nuser: \"USERNAME_AS_BASE64\"\nssl:\n  rejectUnauthorized: true\n  key: \"USER_KEY_AS_BASE64\"\n  cert: \"USER_CERT_AS_BASE64\"\n```\n\nHere you encode the full user key and cert file as base64 and put them in the correct options. If you do not want to verify the server certificate, for example because you have a self signed certificate, then change rejectUnauthorized to false.\n```\n\n----------------------------------------\n\nTITLE: Querying Items and Sales without User Input using SQL\nDESCRIPTION: This SQL query retrieves items and their total sales from the 'needful_things.orders' table, without any filtering based on user input. The query aggregates sales by item and orders the results in descending order of sales. The result is used to display top selling items.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/echarts-blink.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n```sql noninterpolated_items\nselect\n    item,\n    sum(sales) as sales,\nfrom needful_things.orders\ngroup by item\norder by sales desc\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Values Inline for Callouts (HTML, JSX)\nDESCRIPTION: Specifies additional parameters to define the x and y coordinates, as well as the label for the callout point in the line chart. These parameters are essential for accurate callout placement.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<PropListing\n        name=x\n        description=\"x coordinate value where the point will be plotted\"\n        options=\"number | string | date\"\n    />\n    <PropListing\n        name=y\n        description=\"y coordinate value where the point will be plotted\"\n        options=\"number | string | date\"\n    />\n    <PropListing\n        name=label\n        description=\"Text to show as label for the point\"\n        required=true\n        options=\"string\"\n    />\n```\n\n----------------------------------------\n\nTITLE: DataTable with Section Grouping\nDESCRIPTION: Creates a DataTable with section-based grouping instead of accordion, where all data is visible at once but separated into visual sections by state.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_46\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders} groupBy=state groupType=section/>\n```\n\n----------------------------------------\n\nTITLE: DateRange Component with Single Preset Range\nDESCRIPTION: Shows how to customize the date range picker to display only a single preset range option ('Last 7 Days') in the dropdown menu.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<DateRange\n    name=\"date_range_preset\"\n    presetRanges={'Last 7 Days'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Bar Chart with Reference Line in Evidence\nDESCRIPTION: A horizontal bar chart displaying category data with axes swapped and a reference line at y=66. The x-axis is labeled as 'Country'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Country\nswapXY=true\n>\n\n    <ReferenceLine y=66/>\n\n</BarChart>\n```\n\n----------------------------------------\n\nTITLE: Importing Pencil icon and defining button configurations\nDESCRIPTION: Imports the Pencil icon from the @evidence-dev/component-utilities/icons library and defines arrays for different button configurations. These configurations include icon positions, variants (success, info, warn, error), and sizes (sm, base, lg). These arrays are used to dynamically generate multiple instances of the Button component within the table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/button/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    import {Pencil} from '@evidence-dev/component-utilities/icons'\n\n    const icons = [\n        { iconPosition: \"left\", icon: Pencil },\n        { iconPosition: \"right\", icon: Pencil },\n        { iconPosition: \"hidden\", icon: undefined }\n    ]\n    const variants = [\"success\", \"info\", \"warn\", \"error\"]\n    const sizes = [\"sm\", \"base\", \"lg\"]\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding a Data-Driven Reference Line from Database\nDESCRIPTION: This example shows how to add reference lines to a LineChart using data from a database query. It uses the multiple_dates dataset to place vertical reference lines at each start_date value in the dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_20\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n>\n    <ReferenceLine data={multiple_dates} x=start_date/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Bar Chart in Evidence\nDESCRIPTION: Shows the implementation of a default bar chart using monthly sales data. This basic chart plots sales against months.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_month}\n    x=month\n    y=sales\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Colored Area Map Implementation in Svelte\nDESCRIPTION: Creates an area map with custom categorical color palette for different regions using GeoJSON data. Demonstrates usage of colorPalette prop for custom legend colors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<AreaMap\n    data={grouped_locations}\n    lat=lat\n    long=long\n    value=Category\n    geoId=ZCTA5CE10\n    areaCol=zip_code\n    colorPalette={['#C65D47', '#5BAF7A', '#4A8EBA', '#D35B85', '#E1C16D', '#6F5B9A', '#4E8D8D']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Connected Sparkline Implementation with Multiple Types in HTML\nDESCRIPTION: Example showing how to create connected sparklines of different types (bar, area, line) with customized formatting and styling. The connectGroup parameter links the charts for synchronized interaction.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sparkline/index.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Sparkline data={sales_by_date} dateCol=date valueCol=sales type=bar  valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>\n<Sparkline data={sales_by_date} dateCol=date valueCol=sales type=area color=maroon valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>\n<Sparkline data={sales_by_date} dateCol=date valueCol=sales type=line color=purple valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Options for MySQL - Configuration\nDESCRIPTION: This section outlines the SSL configuration options available for securely connecting to a MySQL database. It specifies default and alternative settings for SSL connections, which may be necessary depending on the database hosting environment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/mysql/index.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSSL options are:\n\n- `false` (default)\n- `true`\n- `Amazon RDS`\n- A credentials object\n```\n\n----------------------------------------\n\nTITLE: Multiple Dropdown Components for Years\nDESCRIPTION: These HTML snippets define multiple Evidence Dropdown components for filtering data by year, with each dropdown having its own name (year[n]). They use the 'years' data to populate the dropdown options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/lots-of-dropdowns.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n\n<Dropdown\n  name=year2\n  value=year\n  data={years}\n  title=Year\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All years\"/>\n</Dropdown>\n\nyear2: {inputs.year2.value}\n\n</div><div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n\n<Dropdown\n  name=year3\n  value=year\n  data={years}\n  title=Year\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All years\"/>\n</Dropdown>\n\nyear3: {inputs.year3.value}\n</div><div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n\n\n<Dropdown\n  name=year4\n  value=year\n  data={years}\n  title=Year\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All years\"/>\n</Dropdown>\n\nyear4: {inputs.year4.value}\n\n</div><div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n\n<Dropdown\n  name=year5\n  value=year\n  data={years}\n  title=Year\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All years\"/>\n</Dropdown>\n\nyear5: {inputs.year5.value}\n</div><div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n\n\n<Dropdown\n  name=year6\n  value=year\n  data={years}\n  title=Year\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All years\"/>\n</Dropdown>\n\nyear6: {inputs.year6.value}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Data Arrays in JavaScript\nDESCRIPTION: Defines multiple data arrays for testing chart behavior with various data scenarios including complete datasets, missing values, and null values. Each array contains time series data with x-axis values (years), series identifiers, and multiple y-value measurements.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeriesMulty/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = \n[\n    {x: 1900, series: 'A', y1: 103, y2: 135, y3: 88},\n    {x: 1900, series: 'B', y1: 240, y2: 299, y3: 201},\n    {x: 1900, series: 'C', y1: 361, y2: 318, y3: 314},\n    {x: 1901, series: 'A', y1: 105, y2: 138, y3: 93},\n    {x: 1901, series: 'B', y1: 298, y2: 215, y3: 277},\n    {x: 1901, series: 'C', y1: 394, y2: 306, y3: 348},\n    {x: 1902, series: 'A', y1: 106, y2: 132, y3: 103},\n    {x: 1902, series: 'B', y1: 209, y2: 282, y3: 227},\n    {x: 1902, series: 'C', y1: 384, y2: 367, y3: 312},\n    {x: 1903, series: 'A', y1: 108, y2: 130, y3: 105},\n    {x: 1903, series: 'B', y1: 296, y2: 274, y3: 259},\n    {x: 1903, series: 'C', y1: 330, y2: 301, y3: 338},\n    {x: 1904, series: 'A', y1: 109, y2: 128, y3: 102},\n    {x: 1904, series: 'B', y1: 280, y2: 266, y3: 293},\n    {x: 1904, series: 'C', y1: 332, y2: 342, y3: 343},\n    {x: 1905, series: 'A', y1: 111, y2: 124, y3: 101},\n    {x: 1905, series: 'B', y1: 218, y2: 288, y3: 204},\n    {x: 1905, series: 'C', y1: 318, y2: 375, y3: 313},\n    {x: 1906, series: 'A', y1: 120, y2: 122, y3: 100},\n    {x: 1906, series: 'B', y1: 261, y2: 275, y3: 265},\n    {x: 1906, series: 'C', y1: 332, y2: 397, y3: 388},\n    {x: 1907, series: 'A', y1: 133, y2: 131, y3: 100},\n    {x: 1907, series: 'B', y1: 285, y2: 259, y3: 229},\n    {x: 1907, series: 'C', y1: 334, y2: 390, y3: 372},\n    {x: 1908, series: 'A', y1: 142, y2: 128, y3: 99},\n    {x: 1908, series: 'B', y1: 257, y2: 219, y3: 235},\n    {x: 1908, series: 'C', y1: 350, y2: 388, y3: 364},\n    {x: 1909, series: 'A', y1: 156, y2: 135, y3: 97},\n    {x: 1909, series: 'B', y1: 228, y2: 275, y3: 299},\n    {x: 1909, series: 'C', y1: 321, y2: 352, y3: 359},\n    {x: 1910, series: 'A', y1: 168, y2: 137, y3: 95},\n    {x: 1910, series: 'B', y1: 212, y2: 216, y3: 270},\n    {x: 1910, series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Diverging Scale in Svelte DataTable\nDESCRIPTION: This Svelte component uses a DataTable to showcase a diverging color scale for numerical data. The color scale is specified by an array indicating transition points from green to red with white as mid-point.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_21\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={numbers}>\\n  <Column id=name/>\\n  <Column id=number contentType=colorscale colorScale={['#6db678','white','#ce5050']}/>\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Evidence Preprocess Pipeline with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the Evidence Preprocess pipeline. It shows the processing steps at both runtime and preprocessing stages, including query extraction, execution, markdown to Svelte conversion, and frontmatter injection.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/preprocess/README.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Evidence Preprocess Steps\n---\nflowchart TD\n    A([\"At Runtime *1\"])\n    B[\"At Preprocess\"]\n\n    Content[Markdown File]\n    ExtractQueries([Discover Queries for Page])\n    ExecuteQueries([Execute Queries for Page *2 *3])\n    MarkdownToSvelte[\"Convert Markdown to Svelte\"]\n    AddScriptTags[\"Ensure script tags exist\"]\n    InjectFrontmatter[Inject Frontmatter Tags]\n\n    Content --> A\n    A --> ExtractQueries\n    ExtractQueries --> ExecuteQueries\n\n    Content --> B\n    B --> MarkdownToSvelte\n    MarkdownToSvelte --> AddScriptTags\n    AddScriptTags --> InjectFrontmatter\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Palette in Bar Chart for Evidence\nDESCRIPTION: Demonstrates how to apply a custom color palette to a bar chart. This allows for brand-specific or visually appealing color schemes in the chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021}\n    x=month \n    y=sales \n    series=category \n    colorPalette={[\n        '#cf0d06',\n        '#eb5752',\n        '#e88a87',\n        '#fcdad9',\n        ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Renderer Property - JSX\nDESCRIPTION: Specifies the type of renderer to use for the chart, either canvas or SVG. Proper selection impacts rendering performance and visual quality. Documentation link provided for best practices.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=renderer\n    description=\"Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>.\"\n    options={['canvas', 'svg']}\n    defaultValue=\"canvas\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Target Metrics SQL\nDESCRIPTION: SQL query that generates target and stretch goals for different years. Creates a union of rows with target values, stretch goals, and corresponding years.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nselect 90000 as target, 100000 as stretch, 2020 as year\nunion all\nselect 100000, 140000, 2021\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Timestamp Data in Snowflake\nDESCRIPTION: Creates a sample dataset with timestamps and sales values using Snowflake's TIMESTAMP type. Demonstrates the basic timestamp format without timezone information.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/snowflake-dates/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n        to_timestamp('2020-04-22') as timestamp,\n        100 as sales_usd\nunion all\nselect\n        to_timestamp('2020-04-23') as timestamp,\n        110 as sales_usd\nunion all\nselect\n        to_timestamp('2020-04-24') as timestamp,\n        120 as sales_usd\nunion all\nselect\n        to_timestamp('2020-04-25') as timestamp,\n        140 as sales_usd\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTable with Custom Link Labels\nDESCRIPTION: JSX code for an Evidence DataTable component that displays country data with search functionality and custom link configuration. This setup uses the country name as the link label for better user experience.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/new-table/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={tableq} search=true rowShading=false>\n    <Column id=country_url contentType=link linkLabel=\"country\" title=\"Country Details\" align=right openInNewTab=true/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Bar Chart with Custom Height and Titles in Evidence\nDESCRIPTION: A bar chart with custom chart area height of 380px, including title and subtitle elements, displaying sales data by category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category} \n    x=category \n    y=sales_usd0k \n    series=category\n    xAxisTitle=Category\n\tchartAreaHeight=380\n    title=\"Title\"\n    subtitle=\"Subtitle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Selected Orders Query\nDESCRIPTION: This SQL snippet selects orders corresponding to multiple selected IDs, allowing for broader selection. It relies on the inputs from 'multiple_selected_order_ids' for execution, effectively querying multiple records at once.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown.md#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from orders where id in ${inputs.multiple_selected_order_ids.value}\n```\n\n----------------------------------------\n\nTITLE: Using Theme Color Names in Evidence Charts\nDESCRIPTION: Markdown example showing how to use a predefined theme color name with a BarChart component. Evidence will automatically apply the appropriate light and dark mode values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart\n    data={my_data}\n    fillColor=primary\n/>\n```\n\n----------------------------------------\n\nTITLE: Building static reports with npm\nDESCRIPTION: This command builds a static version of the reports and places them in the `build` directory. It's the standard command for preparing an Evidence project for deployment to a static site host.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/overview/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm run build\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Column Titles with SQL\nDESCRIPTION: This SQL snippet demonstrates how to query column names and apply a consistent title formatting using evidence format tags. It sorts the result by row number to clearly structure the output. Dependencies include having a SQL environment set up with access to the required database.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/formatting/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect 'sales_usd' as column_name, 'Sales ($)' as formatted_title, 0 as row_num union all\nselect 'customer_id', 'Customer ID', 1 union all\nselect 'growth_pct', 'Growth', 2 union all\nselect 'customer_number_num2k', 'Customer Number', 3\norder by row_num\n```\n\n----------------------------------------\n\nTITLE: LA Zip Sales Query\nDESCRIPTION: SQL query that selects zip code sales data and creates a Google search link for each zip code, excluding zip code 90704.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *, 'https://www.google.com/search?q=' || zip_code as link_col from la_zip_sales\nwhere zip_code <> 90704\n```\n\n----------------------------------------\n\nTITLE: Link Component Options Parameters\nDESCRIPTION: This section defines the parameters needed for the Link component, including the required 'url', the default 'label', the optional 'newTab' and the customizable 'class'. Each parameter is detailed with its purpose.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/link/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing \n    name=\"url\"\n    required={true}\n    options=\"string\"\n/>\n\n<PropListing \n    name=\"label\"\n    defaultValue=\"Click here\"\n/>\n\n<PropListing \n    name=\"newTab\"\n    defaultValue=\"false\"\n    options={['true', 'false']}\n/>\n\n<PropListing \n    name=\"class\"\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Neutral Delta Value in Chip Format with Range Definition\nDESCRIPTION: Example of displaying a neutral delta value as a chip with percentage formatting and a defined neutral range.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<Delta data={growth} column=neutral fmt=pct1 chip=true neutralMin=-0.02 neutralMax=0.02 />\n```\n\n----------------------------------------\n\nTITLE: Creating Test Abbreviation Data\nDESCRIPTION: SQL query creating test data with state abbreviations and values. Uses a different column name (namef) for state identification.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/maps/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect 'CA' as namef, 100 as value\nunion all\nselect 'TX' as namef, 200 as value\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Country Data for Line Charts in SQL\nDESCRIPTION: This SQL query creates a sample dataset containing yearly values for different countries from 1990 to 1996. The data is structured to demonstrate multi-series line charts with country as the series and year as the x-axis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/line-chart/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Canada' as country, 60 as value, 1990 as year\nunion all\nselect 'Canada' as country, 83 as value, 1991 as year\nunion all\nselect 'Canada' as country, 95 as value, 1992 as year\nunion all\nselect 'Canada' as country, 182 as value, 1993 as year\nunion all\nselect 'Canada' as country, 87 as value, 1994 as year\nunion all\nselect 'Canada' as country, 103 as value, 1995 as year\nunion all\nselect 'Canada' as country, 111 as value, 1996 as year\nunion all\nselect 'US' as country, 41 as value, 1990 as year\nunion all\nselect 'US' as country, 47 as value, 1991 as year\nunion all\nselect 'US' as country, 70 as value, 1992 as year\nunion all\nselect 'US' as country, 65 as value, 1993 as year\nunion all\nselect 'US' as country, 80 as value, 1994 as year\nunion all\nselect 'US' as country, 90 as value, 1995 as year\nunion all\nselect 'US' as country, 125 as value, 1996 as year\nunion all\nselect 'UK' as country, 61 as value, 1990 as year\nunion all\nselect 'UK' as country, 63 as value, 1991 as year\nunion all\nselect 'UK' as country, 68 as value, 1992 as year\nunion all\nselect 'UK' as country, 73 as value, 1993 as year\nunion all\nselect 'UK' as country, 80 as value, 1994 as year\nunion all\nselect 'UK' as country, 83 as value, 1995 as year\nunion all\nselect 'UK' as country, 85 as value, 1996 as year\nunion all\nselect 'China' as country, 30 as value, 1990 as year\nunion all\nselect 'China' as country, 33 as value, 1991 as year\nunion all\nselect 'China' as country, 40 as value, 1992 as year\nunion all\nselect 'China' as country, 52 as value, 1993 as year\nunion all\nselect 'China' as country, 65 as value, 1994 as year\nunion all\nselect 'China' as country, 78 as value, 1995 as year\nunion all\nselect 'China' as country, 101 as value, 1996 as year\n```\n\n----------------------------------------\n\nTITLE: Displaying Orders Data in Accordion Group Table\nDESCRIPTION: These HTML components utilize a custom <DataTable> component to display orders data grouped by state in an accordion format. Options include configurations with or without subtotals, totals, and with groups closed by default. Expected input is an 'orders' data set and output is a configured table display.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/table-groups/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=true> \n \t<Column id=state/> \n\t<Column id=category totalAgg=\"\"/> \n\t<Column id=item totalAgg=\"\"/> \n\t<Column id=orders/> \n\t<Column id=sales fmt=usd/> \n\t<Column id=growth fmt=pct1/> \n </DataTable>\n\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=state> \n \t<Column id=state/> \n\t<Column id=category totalAgg=\"\"/> \n\t<Column id=item totalAgg=\"\"/> \n\t<Column id=orders/> \n\t<Column id=sales fmt=usd/> \n\t<Column id=growth fmt=pct1/> \n </DataTable>\n\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=true totalRow=true/>\n\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=true totalRow=true groupsOpen=false> \n \t<Column id=state totalAgg=countDistinct totalFmt='0 \"states\"'/> \n\t<Column id=category totalAgg=countDistinct totalFmt='[=1]0 \"category\";0 \"categories\"'/> \n\t<Column id=item  totalAgg=countDistinct totalFmt='[=1]0 \"item\";0 \"items\"'/> \n\t<Column id=orders contentType=colorscale/> \n\t<Column id=sales fmt=usd0k/> \n\t<Column id=growth contentType=delta fmt=pct totalAgg=weightedMean weightCol=sales/> \n </DataTable>\n\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=category subtotals=true totalRow=true> \n \t<Column id=state totalAgg=countDistinct totalFmt='0 \"states\"'/> \n\t<Column id=category totalAgg=Total/> \n\t<Column id=item  totalAgg=countDistinct totalFmt='0 \"items\"'/> \n\t<Column id=orders contentType=colorscale/> \n\t<Column id=sales fmt=usd0k/> \n\t<Column id=growth contentType=delta fmt=pct totalAgg=weightedMean weightCol=sales/> \n </DataTable>\n\n```\n\n----------------------------------------\n\nTITLE: Basic Line Component Structure in Evidence\nDESCRIPTION: The basic structure of the Line component, which is used inside a Chart container to create line visualizations. This component is typically used with additional properties to customize the appearance.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Chart data={query_name}>\n    <Line/>\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Querying Post Data by Tag and Gender with SQL\nDESCRIPTION: SQL query that joins post_tags, posts, hashtags, and users tables to count distinct posts by tag and gender. The query groups by all columns and orders by the post count in descending order.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/y-axis-trickery.md#2025-04-21_snippet_0\n\nLANGUAGE: q\nCODE:\n```\nSELECT count(distinct p.id) as posts, t.tag, u.gender  FROM post_tags pt\n    INNER JOIN posts p on pt.post_id = p.id\n    INNER JOIN hashtags t on pt.hashtag_id = t.id\n    INNER JOIN users u on p.user_id = u.id\nGROUP BY ALL\nORDER BY 1 desc\n```\n\n----------------------------------------\n\nTITLE: Querying Monthly Orders and Sales Data with SQL\nDESCRIPTION: SQL query that creates a sample dataset with monthly order and sales data spanning from December 2021 to December 2022. Each record contains month, number of orders, and sales values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/expressions/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT '2022-12-01' AS month, 645 AS num_orders, 987 AS sales\nUNION ALL\nSELECT '2022-11-01' AS month, 752 AS num_orders, 960 AS sales\nUNION ALL\nSELECT '2022-10-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-09-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-08-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-07-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-06-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-05-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-04-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-03-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-02-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2022-01-01' AS month, 1000 AS num_orders, 1000 AS sales\nUNION ALL\nSELECT '2021-12-01' AS month, 600 AS num_orders, 600 AS sales\n```\n\n----------------------------------------\n\nTITLE: Heatmap Component Preview in Markdown\nDESCRIPTION: This snippet provides a Markdown representation for previewing a heatmap, where 'orders' data is used and visualized by specifying x-axis as 'day', y-axis as 'category', and heat value as 'order_count'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<Heatmap \n    data={orders} \n    x=day \n    y=category \n    value=order_count \n    valueFmt=usd \n/>\n```\n\n----------------------------------------\n\nTITLE: AreaChart Example in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `AreaChart` component in Evidence. It renders a stacked 100% area chart using the `missingX` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: Evidence\nCODE:\n```\n<AreaChart data={missingX} series=fed_reserve_district x=established_date title={titles[2]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders for DataTable - React\nDESCRIPTION: This snippet filters the 'orders_by_category' dataset based on the category provided in the page parameters and renders a DataTable component to display the filtered data. It uses JavaScript's array filter method and optional chaining to ensure safe access to properties.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/templated-pages/[category]/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DataTable\n\tdata={orders_by_category.filter(d => d.category?.toLowerCase() === $page.params.category?.toLowerCase())}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Filter Property - JSX\nDESCRIPTION: Enables draggable filtering on the legend, which can only be used when the legend is enabled. This enhances the interactivity of the chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=filter\n    description=\"Allow draggable filtering on the legend. Must be used with `legend=true`\"\n    options={['true', 'false']}\n    defaultValue=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Categories for ButtonGroup\nDESCRIPTION: This SQL query retrieves distinct categories from the `needful_things.orders` table. It is designed to provide data for populating a ButtonGroup component with available category options. The results are used as the data source for the ButtonGroup.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/button-range.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```sql categories\nselect category from needful_things.orders group by category\n```\n```\n\n----------------------------------------\n\nTITLE: Summarizing Orders by Month Using Subquery\nDESCRIPTION: This query uses a subquery (referencing the 'orders' query) to group and count orders by month. It demonstrates the use of parameterized queries in the SQL context.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/sqlite-dates/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect order_month, count(*) as orders\nfrom ${orders}\ngroup by 1\norder by 1 asc\n```\n\n----------------------------------------\n\nTITLE: Querying Orders with Checkbox Input in SQL\nDESCRIPTION: Demonstrates a SQL query that uses a checkbox input to conditionally filter low-value orders.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/checkbox/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    COUNT(*) as records_count\nfrom needful_things.orders\nWHERE  not ${inputs.exclude_low_value} -- When True, Do not evaluate the next condition\n    OR ( \n            ${inputs.exclude_low_value} -- Input is set to false\n        AND sales < 10  -- Apply this condition\n    )\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar Chart with Logarithmic Y-Scale in Evidence\nDESCRIPTION: A grouped bar chart with logarithmic y-axis scale to better visualize data with large value differences between categories.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021} \n    x=month \n    y=sales_usd0k \n    series=category\n    type=grouped\n    yLog=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Axis Pointer to Tooltip with echartsOptions\nDESCRIPTION: Shows how to add an axis pointer to the tooltip of a BarChart using echartsOptions. This enhances the tooltip with cross-hair lines for better data point identification.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\nechartsOptions={{\n    tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n            type: 'cross',\n            label: {\n                backgroundColor: '#6a7985'\n            }\n        }\n    },\n}}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for ECharts Pie Chart\nDESCRIPTION: This SQL query transforms the data from `pie_query` CTE to match the expected format for the ECharts pie chart. It selects the `pie` column and aliases it as `name`, and selects the `count` column and aliases it as `value`. ECharts expects 'name' and 'value' columns for pie chart data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n```sql pie_data\nselect pie as name, count as value\nfrom ${pie_query}\n```\n```\n\n----------------------------------------\n\nTITLE: Bar Chart with Multiple Y Axes in Evidence\nDESCRIPTION: A bar chart with two y-axes showing sales and number of orders, with the second y-axis displayed as a bar chart and formatted in Euro currency.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart data={orders_by_month} x=month y=sales_usd0k y2=num_orders_num0 y2SeriesType=bar y2Fmt=eur />\n```\n\n----------------------------------------\n\nTITLE: Customizing Sankey Diagram with ECharts Options in Svelte\nDESCRIPTION: Svelte code that renders a Sankey diagram with custom ECharts options. This example shows how to modify the chart's title appearance by setting custom text and styling through the echartsOptions property.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n    data={traffic_data} \n    title=\"Sankey\" \n    subtitle=\"A simple sankey chart\" \n    sourceCol=source \n    targetCol=target \n    valueCol=count \n    echartsOptions={{\n        title: {\n            text: \"Custom Echarts Option\",\n            textStyle: {\n              color: '#476fff'\n            }\n        }\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Useful GeoJSON URLs\nDESCRIPTION: SQL query to select useful GeoJSON URLs for political countries, states, and populated places, ordered by scale, category, and file.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect * \nfrom ${all_geojson_urls}\nwhere category in ('political_countries', 'political_states')\nor file ilike 'populated_places%'\norder by scale desc, category, file\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Negative Value Sparkline Data\nDESCRIPTION: This SQL query generates sample data including negative values for a sparkline demonstration. It is similar to the previous query but contains negative 'sales' values to showcase the sparkline's ability to handle such data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/sparkline/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 100 as sales, '2020-01-01'::date as date\nunion all\nselect 120 as sales, '2020-02-01'::date as date\nunion all\nselect -140 as sales, '2020-03-01'::date as date\nunion all\nselect -170 as sales, '2020-04-01'::date as date\nunion all\nselect 190 as sales, '2020-05-01'::date as date\n```\n\n----------------------------------------\n\nTITLE: DataTable with Format-Driven Columns\nDESCRIPTION: Svelte component showing how to use a column value to drive the formatting of another column using the fmtColumn property.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_summary_fmts}>\n\t<Column id=country />\n\t<Column id=category />\n\t<Column id=value_usd fmtColumn=custom_format/>\n    <Column id=yoy title=\"Y/Y Growth\" fmt=pct3/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Selecting Data for Multi-level Sankey Diagrams Using SQL\nDESCRIPTION: This SQL snippet shows how to prepare data for a multi-level Sankey diagram by using a union operation to combine multiple queries that represent different levels of source and target nodes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    channel as source,\n    'all_traffic' as target,\n    count(user_id) as count\nfrom events.web_events\ngroup by 1,2\n\nunion all\n\nselect \n    'all_traffic' as source,\n    page_route as target,\n    count(user_id) as count\nfrom events.web_events\ngroup by 1, 2\n```\n\n----------------------------------------\n\nTITLE: Value Component with Custom Color\nDESCRIPTION: Demonstrates setting a custom color for the Value component output.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<Value data={orders} column=\"sales\" agg=\"avg\" fmt=\"usd0\" color=\"#85BB65\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Most Recent Month from State Data\nDESCRIPTION: SQL query that extracts the maximum (most recent) month from the state_current dataset. References the previous query result using template literal syntax.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/states/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect max(month) as month from ${state_current}\n```\n\n----------------------------------------\n\nTITLE: Passing API Key via Environment Variable in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define an environment variable `EVIDENCE_API_KEY`. This variable can then be used to store API keys and other sensitive information.  This is particularly useful for managing credentials in different environments.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/javascript/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEVIDENCE_API_KEY=1234567890\n```\n\n----------------------------------------\n\nTITLE: Hacker News Posts SQL Query with Links\nDESCRIPTION: SQL query creating a dataset of Hacker News posts with title, link, date, score, and author information using UNION ALL\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/text-wrapping/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Steven Hawking has died' as  title, 'https://news.ycombinator.com/item?id=16582136' as link, '2018-03-14' as date, 6015 as score, 'Cogito' as author\nunion all\nselect 'The CIA's communications suffered a catastrophic compromise' as title, 'https://news.ycombinator.com/item?id=16582136' as link, '2018-03-14' as date, 6015 as score, 'epaga' as author\nunion all\nselect 'A message to Our Customers' as title, 'https://news.ycombinator.com/item?id=16582136' as link, '2016-02-15' as date, 5771 as score, 'epaga' as author\nunion all\nselect 'The FBI is creating a \"nation of suspects\"' as title, 'https://news.ycombinator.com/item?id=16582136' as link, '2016-02-15' as date, 5771 as score, 'patricktomas' as author\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Reference Points in LineChart\nDESCRIPTION: Implementation showing how to use data from a query to generate multiple reference points with custom labels.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <ReferencePoint data={sales_drops} x=month y=sales label=label labelPosition=bottom align=right />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Basic DateRange Component Usage\nDESCRIPTION: Creates a simple date range picker that displays the selected start and end dates. The component uses data from a query named 'orders_by_day' and references the 'day' column for the date range.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange\n    name=date_range_name\n    data={orders_by_day}\n    dates=day\n/>\n\nFrom {inputs.date_range_name.start} to {inputs.date_range_name.end}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration in YAML for SSL Connection\nDESCRIPTION: This YAML snippet configures a PostgreSQL datasource in Evidence for SSL connection. It specifies the database name and connection options including SSL settings.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/postgres/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nname: mydatabase\n  type: postgres\n  options:\n    host: example.myhost.com\n    port: 5432\n    database: mydatabase\n    ssl:\n      sslmode: require\n```\n\n```\n\n----------------------------------------\n\nTITLE: Finding Intersection of Most Liked and Posted Tags in SQL\nDESCRIPTION: This SQL query finds hashtags that appear in both the most-liked and most-posted lists. It uses common table expressions (CTEs) to reference the previous queries and identifies tags that exist in both result sets.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/trends.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nWITH A AS (\n    SELECT * FROM ${most_liked_tags}\n), B AS ( SELECT * FROM ${most_posted_tags} )\nSELECT DISTINCT tag, hashtag_id FROM ( SELECT * FROM A UNION SELECT * FROM B )\n    WHERE tag in (SELECT tag FROM A) AND tag in (SELECT tag FROM B)\n```\n\n----------------------------------------\n\nTITLE: SQL Data Generation for Country Information\nDESCRIPTION: Creates a comprehensive dataset of country information including date, value, country details, and flag/URL resources using UNION ALL queries\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/initially-filtered-table/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect '2020-04-30' as date, 87 as value_usd, 'Austria' as country, 'B' as category, 100384 as country_id, 'AT' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AT.png' as flag, 'https://www.google.ca/search?q=austria' as country_url\nunion all\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Scatter Plot Data and Options - JavaScript\nDESCRIPTION: This snippet initializes the data for the scatter plots based on Anscombe's quartet and sets up chart options including title, axes, tooltip, and mark lines. It requires ECharts for rendering the visualizations. Key parameters include `dataAll` for the data points and `options` for the configuration of the chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dataAll = [\n  [\n    [10.0, 8.04],\n    [8.0, 6.95],\n    [13.0, 7.58],\n    [9.0, 8.81],\n    [11.0, 8.33],\n    [14.0, 9.96],\n    [6.0, 7.24],\n    [4.0, 4.26],\n    [12.0, 10.84],\n    [7.0, 4.82],\n    [5.0, 5.68]\n  ],\n  [\n    [10.0, 9.14],\n    [8.0, 8.14],\n    [13.0, 8.74],\n    [9.0, 8.77],\n    [11.0, 9.26],\n    [14.0, 8.1],\n    [6.0, 6.13],\n    [4.0, 3.1],\n    [12.0, 9.13],\n    [7.0, 7.26],\n    [5.0, 4.74]\n  ],\n  [\n    [10.0, 7.46],\n    [8.0, 6.77],\n    [13.0, 12.74],\n    [9.0, 7.11],\n    [11.0, 7.81],\n    [14.0, 8.84],\n    [6.0, 6.08],\n    [4.0, 5.39],\n    [12.0, 8.15],\n    [7.0, 6.42],\n    [5.0, 5.73]\n  ],\n  [\n    [8.0, 6.58],\n    [8.0, 5.76],\n    [8.0, 7.71],\n    [8.0, 8.84],\n    [8.0, 8.47],\n    [8.0, 7.04],\n    [8.0, 5.25],\n    [19.0, 12.5],\n    [8.0, 5.56],\n    [8.0, 7.91],\n    [8.0, 6.89]\n  ]\n];\nconst markLineOpt = {\n  animation: false,\n  label: {\n    formatter: 'y = 0.5 * x + 3',\n    align: 'right'\n  },\n  lineStyle: {\n    type: 'solid'\n  },\n  tooltip: {\n    formatter: 'y = 0.5 * x + 3'\n  },\n  data: [\n    [\n      {\n        coord: [0, 3],\n        symbol: 'none'\n      },\n      {\n        coord: [20, 13],\n        symbol: 'none'\n      }\n    ]\n  ]\n};\nlet options = {\n  title: {\n    text: \"Anscombe's quartet\",\n    left: 'center',\n    top: 0\n  },\n  grid: [\n    { left: '7%', top: '7%', width: '38%', height: '38%' },\n    { right: '7%', top: '7%', width: '38%', height: '38%' },\n    { left: '7%', bottom: '7%', width: '38%', height: '38%' },\n    { right: '7%', bottom: '7%', width: '38%', height: '38%' }\n  ],\n  tooltip: {\n    formatter: 'Group {a}: ({c})'\n  },\n  xAxis: [\n    { gridIndex: 0, min: 0, max: 20 },\n    { gridIndex: 1, min: 0, max: 20 },\n    { gridIndex: 2, min: 0, max: 20 },\n    { gridIndex: 3, min: 0, max: 20 }\n  ],\n  yAxis: [\n    { gridIndex: 0, min: 0, max: 15 },\n    { gridIndex: 1, min: 0, max: 15 },\n    { gridIndex: 2, min: 0, max: 15 },\n    { gridIndex: 3, min: 0, max: 15 }\n  ],\n  toolbox: {\n      show: true,\n      feature: {\n          saveAsImage: {\n              show: true\n          }\n      }\n  },\n  series: [\n    {\n      name: 'I',\n      type: 'scatter',\n      xAxisIndex: 0,\n      yAxisIndex: 0,\n      data: dataAll[0],\n      markLine: markLineOpt\n    },\n    {\n      name: 'II',\n      type: 'scatter',\n      xAxisIndex: 1,\n      yAxisIndex: 1,\n      data: dataAll[1],\n      markLine: markLineOpt\n    },\n    {\n      name: 'III',\n      type: 'scatter',\n      xAxisIndex: 2,\n      yAxisIndex: 2,\n      data: dataAll[2],\n      markLine: markLineOpt\n    },\n    {\n      name: 'IV',\n      type: 'scatter',\n      xAxisIndex: 3,\n      yAxisIndex: 3,\n      data: dataAll[3],\n      markLine: markLineOpt\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: BarChart Example with Full Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence using the `full` data set. It renders a standard bar chart using the `full` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_10\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={full} series=fed_reserve_district x=established_date title={titles[0]}/>\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Histogram in HTML\nDESCRIPTION: HTML code demonstrating how to add ReferenceLine and ReferenceArea annotations to a Histogram component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/histogram/index.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Histogram data={sales_data} x=category>\n  <ReferenceLine y=20/>\n  <ReferenceArea xMin=3 xMax=8/>\n</Histogram>\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Chart Types with Different Data Scenarios\nDESCRIPTION: Shows the implementation of multiple chart types (Line, Area, 100% Stacked Area, and Bar charts) using the defined datasets. Each chart demonstrates how the visualization handles different data scenarios including complete datasets, missing values, and null values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeriesMulty/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Series Column with Numeric X Axis</h1>\n<h2>Line Chart</h2>\n<LineChart data={full} series=series title=\"Full Data\"/>\n<LineChart data={missingX} series=series title=\"Missing X\"/>\n<LineChart data={missingY} series=series title=\"Missing Y\" markers=true/>\n<LineChart data={nulls}  series=series title=\"Nulls\"/>\n\n<h2>Area Chart</h2>\n<AreaChart data={full}  series=series title=\"Full Data\"/>\n<AreaChart data={missingX}  series=series title=\"Missing X\"/>\n<AreaChart data={missingY} series=series title=\"Missing Y\"/>\n<AreaChart data={nulls}  series=series title=\"Nulls\"/>\n\n<h2>100% Stacked Area Chart</h2>\n<AreaChart data={full}  series=series title=\"Full Data\" type=stacked100/>\n<AreaChart data={missingX}  series=series title=\"Missing X\" type=stacked100/>\n<AreaChart data={missingY} series=series title=\"Missing Y\" type=stacked100/>\n<AreaChart data={nulls}  series=series title=\"Nulls\" type=stacked100/>\n\n<h2>Stacked Bar Chart</h2>\n<BarChart data={full}  series=series title=\"Full Data\"/>\n<BarChart data={missingX}  series=series title=\"Missing X\"/>\n```\n\n----------------------------------------\n\nTITLE: Querying Category Lookup with Abbreviated Labels\nDESCRIPTION: This SQL query retrieves categories and their abbreviations. It uses the `categories` query and creates an `abbrev` column by taking the uppercase of the first three letters of the category. This is designed to provide data with alternative labels for a ButtonGroup component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/button-range.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n```sql category_lookup\nselect \n    category, \n    upper(left(category,3)) as abbrev \nfrom ${categories}\n```\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Funnel Chart Data\nDESCRIPTION: This SQL query generates sample data for a funnel chart, representing the number of leads in different stages. It defines a CTE (Common Table Expression) named `funnel_stages` that returns stage names and corresponding counts. This data will be used to populate the ECharts funnel chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n```sql funnel_stages\nselect 'Emailed' as stage, 129 as count\nunion all\nselect 'Meeting' as stage, 86 as count\nunion all\nselect 'Proposal' as stage, 65 as count\nunion all\nselect 'Signed' as stage, 44 as count\n```\n```\n\n----------------------------------------\n\nTITLE: Querying JavaScript Data Source in Evidence Markdown\nDESCRIPTION: Shows how to reference and query data from a JavaScript source file using SQL syntax in Evidence markdown files.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/javascript/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```sql pokedex\nselect * from pokedex\n```\n```\n\n----------------------------------------\n\nTITLE: Basic DownloadData Component Usage\nDESCRIPTION: Basic implementation of the DownloadData component that creates a download button for the categories dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/download-data/index.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<DownloadData data={categories}/>\n```\n\n----------------------------------------\n\nTITLE: Querying LA Locations Data\nDESCRIPTION: SQL query to retrieve location information for Los Angeles\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/maps.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from la_locations\n```\n\n----------------------------------------\n\nTITLE: ECharts Pie Chart Configuration\nDESCRIPTION: This JavaScript object defines the configuration options for an ECharts pie chart. It sets the tooltip format and series type to 'pie', and passes in the data from the `pie_data` SQL query into the series data. The '{d}%' in the formatter displays the percentage.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n      <ECharts config={\n          {\n              tooltip: {\n                  formatter: '{b}: {c} ({d}%)'\n              },\n              series: [\n              {\n                type: 'pie',\n                data: [...pie_data],\n              }\n            ]\n            }\n          }\n      />\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Preset Options in HTML\nDESCRIPTION: Creates a ButtonGroup using a preset 'dates' option set. The selected value is stored in the 'preset_input' input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/button-group/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ButtonGroup name=preset_input value=category preset=dates />\n```\n\n----------------------------------------\n\nTITLE: Logarithmic Scale Bar and Line Chart in Evidence\nDESCRIPTION: Shows how to implement a bar and line chart with a logarithmic y-axis scale, includes a reference line for January 2020.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/mixed-charts/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Chart\ndata={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\nx=month\nyLog=true>\n<Bar y=sales_usd0k/>\n<Line y=num_orders_num0/>\n<ReferenceLine x='2020-01-01' label=date lineColor=base-content-muted/>\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Filtering Data Using SQL with Lowercase URLs\nDESCRIPTION: This SQL snippet demonstrates how to filter data in a table while accounting for Netlify’s URL lowercasing. It uses the LOWER function to ensure case-insensitive matches for the specified parameter.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/netlify/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM source_name.my_table \nWHERE LOWER(my_column) = LOWER('${params.my_param}')\n```\n\n----------------------------------------\n\nTITLE: Using Partials in Evidence Markdown\nDESCRIPTION: This snippet shows how to utilize partial markdown files in Evidence to reuse shared content across different markdown files. The `@partial` syntax is used for inclusion.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n&#123;@partial \"my-first-partial.md\"&#125;\n\nAnd some content specific to this page.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n# This is my first partial\n\nThis is some content in the partial.\n```\n\n----------------------------------------\n\nTITLE: Fetching Sample Marketing Spend Data\nDESCRIPTION: This query selects all columns from the marketing_spend table, limiting the result to 100 rows. It offers a glimpse into the marketing spend data structure and content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/sqlite-dates/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from marketing_spend\nlimit 100\n```\n\n----------------------------------------\n\nTITLE: Creating US State Map Data with SQL\nDESCRIPTION: SQL query generating sample value data for specific US states. Creates a dataset with state names and corresponding values for map visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/maps/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Arkansas' as name, 100 as value\nunion all\nselect 'Illinois' as name, 200 as value\nunion all\nselect 'Florida' as name, 1000 as value\nunion all\nselect 'New York' as name, 1110 as value\nunion all\nselect 'California' as name, 2000 as value\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Charts with Print Components in JSX\nDESCRIPTION: JSX code demonstrating the use of LineChart component with various props and print-related components like PageBreak and PrintGroup. It shows how to control chart appearance and printing behavior.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/print-components/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n    yFmt=eur\n    xFmt='mmm d'\n/>\n\n<PageBreak/>\n\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n    yFmt=eur\n    xFmt='mmm d'\n    lineColor=purple\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<PrintGroup>\n    <Heatmap data={item_channel} x=channel y=item value=orders/>\n    <Heatmap data={item_channel} x=channel y=item value=orders/>\n</PrintGroup>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n    yFmt=eur\n    xFmt='mmm d'\n/>\n\n<PrintGroup hidden=true>\n    <LineChart \n        data={orders_by_month} \n        x=month\n        y=sales_usd0k \n        yAxisTitle=\"Sales per Month\"\n        yFmt=eur\n        xFmt='mmm d'\n        lineColor=purple\n    />\n</PrintGroup>\n```\n\n----------------------------------------\n\nTITLE: Location Category Query\nDESCRIPTION: SQL query that categorizes locations based on ID ranges into different business types like Hotels, Restaurants, etc.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n    *, \n    CASE \n        WHEN id BETWEEN 0 AND 500 THEN 'Hotels'\n        WHEN id BETWEEN 501 AND 1000 THEN 'Restaurants'\n        WHEN id BETWEEN 1001 AND 1500 THEN 'Golf Courses'\n        WHEN id BETWEEN 1501 AND 2000 THEN 'Shops'\n        WHEN id BETWEEN 2001 AND 2500 THEN 'Bars'\n        WHEN id BETWEEN 2501 AND 3000 THEN 'Entertainment'\n        WHEN id BETWEEN 3001 AND 4000 THEN 'Banks'\n    END AS Category\nFROM la_zip_sales\nWHERE zip_code <> 90704\nORDER BY 1;\n```\n\n----------------------------------------\n\nTITLE: Flight Data Query Definition\nDESCRIPTION: SQL query to fetch flight fare data for slider demonstrations\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\tCAST(fare AS INT) AS fare,\n\tCAST((SELECT MAX(fare) FROM flights) AS INT) AS max_fare,\nFROM flights\nLIMIT 100\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Location Summary\nDESCRIPTION: This SQL query creates a table `location_summary` with sample data for cities, including their ID, name, sales in USD, and gross margin percentage. It uses UNION ALL to combine the data for each city.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/loops/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT 1 as id, 'New York' as name, 9000 as sales_usd, 0.60 as gross_margin_pct UNION ALL\nSELECT 2, 'Los Angeles', 5000, 0.45 UNION ALL\nSELECT 3, 'Toronto', 4000, 0.70\"\n```\n\n----------------------------------------\n\nTITLE: ECharts Treemap Configuration\nDESCRIPTION: This JavaScript object defines the configuration options for an ECharts treemap. It sets the chart title, tooltip format, and series type to 'treemap', and passes in the data from the `test_data` SQL query into the series data. The roam and nodeClick are set to false to prevent user interaction.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  <ECharts config={\n        {\n          title: {\n            text: 'Treemap Example',\n            left: 'center'\n          },\n            tooltip: {\n                formatter: '{b}: {c}'\n            },\n          series: [\n            {\n              type: 'treemap',\n              visibleMin: 300,\n              label: {\n                show: true,\n                formatter: '{b}'\n              },\n              itemStyle: {\n                borderColor: '#fff'\n              },\n              roam: false,\n              nodeClick: false,\n              data: [...test_data],\n              breadcrumb: {\n                show: false\n              }\n            }\n          ]\n          }\n        }\n    />\n```\n\n----------------------------------------\n\nTITLE: Authenticated API Request with Environment Variables\nDESCRIPTION: Example showing how to use environment variables for API authentication in an Evidence JavaScript source. Demonstrates accessing credentials and making authenticated requests.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/javascript/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet key = process.env.EVIDENCE_API_KEY;\nlet url = 'https://whatever.com/api';\n\nconst response = await fetch(url, {\n\theaders: {\n\t\t'x-api-key': key\n\t}\n});\n\nconst json = await response.json();\nconst data = json.results;\n\nexport { data };\n```\n\n----------------------------------------\n\nTITLE: Configuring Anscombe's Quartet Data and Chart Options in JavaScript\nDESCRIPTION: Defines the data structure and configuration options for creating Anscombe's quartet visualization using ECharts. Includes data points, mark line options, grid layout, axes configuration, and series definitions for four scatter plots.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/custom-charts/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataAll = [\n  [\n    [10.0, 8.04],\n    [8.0, 6.95],\n    [13.0, 7.58],\n    [9.0, 8.81],\n    [11.0, 8.33],\n    [14.0, 9.96],\n    [6.0, 7.24],\n    [4.0, 4.26],\n    [12.0, 10.84],\n    [7.0, 4.82],\n    [5.0, 5.68]\n  ],\n  [\n    [10.0, 9.14],\n    [8.0, 8.14],\n    [13.0, 8.74],\n    [9.0, 8.77],\n    [11.0, 9.26],\n    [14.0, 8.1],\n    [6.0, 6.13],\n    [4.0, 3.1],\n    [12.0, 9.13],\n    [7.0, 7.26],\n    [5.0, 4.74]\n  ],\n  [\n    [10.0, 7.46],\n    [8.0, 6.77],\n    [13.0, 12.74],\n    [9.0, 7.11],\n    [11.0, 7.81],\n    [14.0, 8.84],\n    [6.0, 6.08],\n    [4.0, 5.39],\n    [12.0, 8.15],\n    [7.0, 6.42],\n    [5.0, 5.73]\n  ],\n  [\n    [8.0, 6.58],\n    [8.0, 5.76],\n    [8.0, 7.71],\n    [8.0, 8.84],\n    [8.0, 8.47],\n    [8.0, 7.04],\n    [8.0, 5.25],\n    [19.0, 12.5],\n    [8.0, 5.56],\n    [8.0, 7.91],\n    [8.0, 6.89]\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: Tooltip Configuration in JavaScript\nDESCRIPTION: Example configuration for customizing map tooltips with formatting, styling, and link options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntooltip={[\n    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},\n    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},\n    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}\n]}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Build-Time Variable Interpolation\nDESCRIPTION: Example of using environment variables in source queries with dynamic value substitution\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/index.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from customers\nwhere client_id = ${client_id}\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Category and Selected Items\nDESCRIPTION: This SQL query retrieves all order records associated with a specific category and a selection of items. The query dynamically incorporates user inputs for both category and item selections.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dependent-dropdown.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"sql item\\nSELECT * FROM needful_things.orders\\nWHERE category = '${inputs.category.value}'\\nAND item in ${inputs.item.value}\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Value Component in HTML\nDESCRIPTION: Demonstrates how to use the `fmt` prop to format sales data with a currency format\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/formatting/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Value data={sales_data} column=sales fmt='$#,##0' />\n```\n\n----------------------------------------\n\nTITLE: Rendering Scatter Plot with Reference Area in HTML\nDESCRIPTION: This snippet demonstrates the creation of a ScatterPlot that visualizes GDP data by country, including a reference area to highlight a specific range of GDP and growth percentage.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<ScatterPlot data={countries} x=gdp_usd y=gdp_growth_pct1 tooltipTitle=country series=continent>\n    <ReferenceArea xMin=16000 xMax=24000 yMin=-0.03 yMax=0.055 label=\"Large and stagnant\" color=base-content-muted border=true/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset with Non-Aligned X Values\nDESCRIPTION: Defines a test dataset where one data point has a non-integer x value (1905.5), testing how charts handle inconsistent x-axis increments while maintaining the visual continuity of the data series.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeriesMulty/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet xSync = \n[\n    {x: 1900, series: 'A', y1: 103, y2: 135, y3: 88},\n    {x: 1900, series: 'B', y1: 240, y2: 299, y3: 201},\n    {x: 1900, series: 'C', y1: 361, y2: 318, y3: 314},\n    {x: 1901, series: 'A', y1: 105, y2: 138, y3: 93},\n    {x: 1901, series: 'B', y1: 298, y2: 215, y3: 277},\n    {x: 1901, series: 'C', y1: 394, y2: 306, y3: 348},\n    {x: 1902, series: 'A', y1: 106, y2: 132, y3: 103},\n    {x: 1902, series: 'B', y1: 209, y2: 282, y3: 227},\n    {x: 1902, series: 'C', y1: 384, y2: 367, y3: 312},\n    {x: 1903, series: 'A', y1: 108, y2: 130, y3: 105},\n    {x: 1903, series: 'B', y1: 296, y2: 274, y3: 259},\n    {x: 1903, series: 'C', y1: 330, y2: 301, y3: 338},\n    {x: 1904, series: 'A', y1: 109, y2: 128, y3: 102},\n    {x: 1904, series: 'B', y1: 280, y2: 266, y3: 293},\n    {x: 1904, series: 'C', y1: 332, y2: 342, y3: 343},\n    {x: 1905, series: 'A', y1: 111, y2: 124, y3: 101},\n    {x: 1905, series: 'B', y1: 218, y2: 288, y3: 204},\n    {x: 1905.5, series: 'C', y1: 318, y2: 375, y3: 313},\n    {x: 1906, series: 'A', y1: 120, y2: 122, y3: 100},\n    {x: 1906, series: 'B', y1: 261, y2: 275, y3: 265},\n    {x: 1906, series: 'C', y1: 332, y2: 397, y3: 388},\n    {x: 1907, series: 'A', y1: 133, y2: 131, y3: 100},\n    {x: 1907, series: 'B', y1: 285, y2: 259, y3: 229},\n    {x: 1907, series: 'C', y1: 334, y2: 390, y3: 372},\n    {x: 1908, series: 'A', y1: 142, y2: 128, y3: 99},\n    {x: 1908, series: 'B', y1: 257, y2: 219, y3: 235},\n    {x: 1908, series: 'C', y1: 350, y2: 388, y3: 364},\n    {x: 1909, series: 'A', y1: 156, y2: 135, y3: 97},\n    {x: 1909, series: 'B', y1: 228, y2: 275, y3: 299},\n    {x: 1909, series: 'C', y1: 321, y2: 352, y3: 359},\n    {x: 1910, series: 'A', y1: 168, y2: 137, y3: 95},\n    {x: 1910, series: 'B', y1: 212, y2: 216, y3: 270},\n    {x: 1910, series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Note Component in Markdown\nDESCRIPTION: This snippet demonstrates the default usage of the Note component to display small, styled text for additional context or information.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/note/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Note>\n    This is a note for additional context.\n</Note>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Dynamic Sparkline Data\nDESCRIPTION: This SQL query generates sample data used for dynamic sparklines and filtering. It includes 'category', 'year' as date, and 'value' columns, which are used to populate the sparkline and allow for filtering based on the selected category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/sparkline/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect 'a' as category, '2020-01-01'::date as year, 100 as value\nunion all\nselect 'a', '2021-01-01'::date, 130\nunion all\nselect 'a', '2022-01-01'::date, 150\nunion all\nselect 'a', '2023-01-01'::date, 170\nunion all\nselect 'a', '2024-01-01'::date, 190\nunion all\nselect 'b', '2020-01-01'::date, 50\nunion all\nselect 'b', '2021-01-01'::date, 60\nunion all\nselect 'b', '2022-01-01'::date, 100\nunion all\nselect 'b', '2023-01-01'::date, 80\nunion all\nselect 'b', '2024-01-01'::date, 130\n```\n\n----------------------------------------\n\nTITLE: ECharts Series Configuration Example\nDESCRIPTION: Shows an example of the ECharts series configuration for a stacked bar chart with multiple series. This illustrates the structure of the series array in the ECharts configuration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nseries: [\n    {type: 'bar', barWidth: 5, name: 'Canada', data: [200,5525,222,444,666]},\n    {type: 'bar', barWidth: 5, name: 'US', data: [1200,1555,1222,4144,6616]},\n    {type: 'bar', barWidth: 5, name: 'UK', data: [2060,525,262,4844,4666]},\n    {type: 'bar', barWidth: 5, name: 'Australia', data: [2200,5555,2252,8444,3666]}\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Months Since January for Sales Data\nDESCRIPTION: This SQL snippet calculates the number of months since January for sales data, grouping the results by category and providing total sales figures in USD. It uses a common table expression to reference the orders data from the specified dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/pivot/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    datediff('month',MIN(month) over (),month) as month_number,\n    category,\n    sales_usd0k\nfrom ${orders_by_category_2021}\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Arrays for Chart Visualization Examples in JavaScript\nDESCRIPTION: Defines three JavaScript arrays containing time series data with different series (A, B, C) across years from 1900 to 1910. The arrays represent different data scenarios: complete data (full), missing data points (missingY), and data containing null values (nulls).\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/stringSeriesMulty/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet full = \n[\n    {x: \"1900\", series: 'A', y1: 103, y2: 135, y3: 88},\n    {x: \"1900\", series: 'B', y1: 240, y2: 299, y3: 201},\n    {x: \"1900\", series: 'C', y1: 361, y2: 318, y3: 314},\n    {x: \"1901\", series: 'A', y1: 105, y2: 138, y3: 93},\n    {x: \"1901\", series: 'B', y1: 298, y2: 215, y3: 277},\n    {x: \"1901\", series: 'C', y1: 394, y2: 306, y3: 348},\n    {x: \"1902\", series: 'A', y1: 106, y2: 132, y3: 103},\n    {x: \"1902\", series: 'B', y1: 209, y2: 282, y3: 227},\n    {x: \"1902\", series: 'C', y1: 384, y2: 367, y3: 312},\n    {x: \"1903\", series: 'A', y1: 108, y2: 130, y3: 105},\n    {x: \"1903\", series: 'B', y1: 296, y2: 274, y3: 259},\n    {x: \"1903\", series: 'C', y1: 330, y2: 301, y3: 338},\n    {x: \"1904\", series: 'A', y1: 109, y2: 128, y3: 102},\n    {x: \"1904\", series: 'B', y1: 280, y2: 266, y3: 293},\n    {x: \"1904\", series: 'C', y1: 332, y2: 342, y3: 343},\n    {x: \"1905\", series: 'A', y1: 111, y2: 124, y3: 101},\n    {x: \"1905\", series: 'B', y1: 218, y2: 288, y3: 204},\n    {x: \"1905\", series: 'C', y1: 318, y2: 375, y3: 313},\n    {x: \"1906\", series: 'A', y1: 120, y2: 122, y3: 100},\n    {x: \"1906\", series: 'B', y1: 261, y2: 275, y3: 265},\n    {x: \"1906\", series: 'C', y1: 332, y2: 397, y3: 388},\n    {x: \"1907\", series: 'A', y1: 133, y2: 131, y3: 100},\n    {x: \"1907\", series: 'B', y1: 285, y2: 259, y3: 229},\n    {x: \"1907\", series: 'C', y1: 334, y2: 390, y3: 372},\n    {x: \"1908\", series: 'A', y1: 142, y2: 128, y3: 99},\n    {x: \"1908\", series: 'B', y1: 257, y2: 219, y3: 235},\n    {x: \"1908\", series: 'C', y1: 350, y2: 388, y3: 364},\n    {x: \"1909\", series: 'A', y1: 156, y2: 135, y3: 97},\n    {x: \"1909\", series: 'B', y1: 228, y2: 275, y3: 299},\n    {x: \"1909\", series: 'C', y1: 321, y2: 352, y3: 359},\n    {x: \"1910\", series: 'A', y1: 168, y2: 137, y3: 95},\n    {x: \"1910\", series: 'B', y1: 212, y2: 216, y3: 270},\n    {x: \"1910\", series: 'C', y1: 400, y2: 340, y3: 400}\n]\n\nlet missingY = \n[ // remove B 1902\n    {x: \"1900\", series: 'A', y1: 103, y2: 135, y3: 88},\n    {x: \"1900\", series: 'B', y1: 240, y2: 299, y3: 201},\n    {x: \"1900\", series: 'C', y1: 361, y2: 318, y3: 314},\n    {x: \"1901\", series: 'A', y1: 105, y2: 138, y3: 93},\n    {x: \"1901\", series: 'B', y1: 298, y2: 215, y3: 277},\n    {x: \"1901\", series: 'C', y1: 394, y2: 306, y3: 348},\n    {x: \"1902\", series: 'A', y1: 106, y2: 132, y3: 103},\n    {x: \"1902\", series: 'C', y1: 384, y2: 367, y3: 312},\n    {x: \"1903\", series: 'A', y1: 108, y2: 130, y3: 105},\n    {x: \"1903\", series: 'B', y1: 296, y2: 274, y3: 259},\n    {x: \"1903\", series: 'C', y1: 330, y2: 301, y3: 338},\n    {x: \"1904\", series: 'A', y1: 109, y2: 128, y3: 102},\n    {x: \"1904\", series: 'B', y1: 280, y2: 266, y3: 293},\n    {x: \"1904\", series: 'C', y1: 332, y2: 342, y3: 343},\n    {x: \"1905\", series: 'A', y1: 111, y2: 124, y3: 101},\n    {x: \"1905\", series: 'B', y1: 218, y2: 288, y3: 204},\n    {x: \"1905\", series: 'C', y1: 318, y2: 375, y3: 313},\n    {x: \"1906\", series: 'A', y1: 120, y2: 122, y3: 100},\n    {x: \"1906\", series: 'B', y1: 261, y2: 275, y3: 265},\n    {x: \"1906\", series: 'C', y1: 332, y2: 397, y3: 388},\n    {x: \"1907\", series: 'A', y1: 133, y2: 131, y3: 100},\n    {x: \"1907\", series: 'B', y1: 285, y2: 259, y3: 229},\n    {x: \"1907\", series: 'C', y1: 334, y2: 390, y3: 372},\n    {x: \"1908\", series: 'A', y1: 142, y2: 128, y3: 99},\n    {x: \"1908\", series: 'B', y1: 257, y2: 219, y3: 235},\n    {x: \"1908\", series: 'C', y1: 350, y2: 388, y3: 364},\n    {x: \"1909\", series: 'A', y1: 156, y2: 135, y3: 97},\n    {x: \"1909\", series: 'B', y1: 228, y2: 275, y3: 299},\n    {x: \"1909\", series: 'C', y1: 321, y2: 352, y3: 359},\n    {x: \"1910\", series: 'A', y1: 168, y2: 137, y3: 95},\n    {x: \"1910\", series: 'B', y1: 212, y2: 216, y3: 270},\n    {x: \"1910\", series: 'C', y1: 400, y2: 340, y3: 400}\n]\n\nlet nulls =\n[\n    {x: \"1900\", series: 'A', y1: 103, y2: 135, y3: 88},\n    {x: \"1900\", series: 'B', y1: 240, y2: 299, y3: 201},\n    {x: \"1900\", series: 'C', y1: 361, y2: 318, y3: 314},\n    {x: \"1901\", series: 'A', y1: 105, y2: 138, y3: 93},\n    {x: \"1901\", series: 'B', y1: 298, y2: 215, y3: 277},\n    {x: \"1901\", series: 'C', y1: 394, y2: 306, y3: 348},\n    {x: \"1902\", series: 'A', y1: null, y2: 132, y3: 103},\n    {x: \"1902\", series: 'B', y1: 209, y2: 282, y3: 227},\n    {x: \"1902\", series: 'C', y1: 384, y2: 367, y3: 312},\n    {x: \"1903\", series: 'A', y1: 108, y2: 130, y3: 105},\n    {x: \"1903\", series: 'B', y1: 296, y2: 274, y3: 259},\n    {x: \"1903\", series: 'C', y1: 330, y2: 301, y3: 338},\n    {x: \"1904\", series: 'A', y1: 109, y2: 128, y3: 102},\n    {x: \"1904\", series: 'B', y1: 280, y2: 266, y3: 293},\n    {x: \"1904\", series: 'C', y1: 332, y2: null, y3: 343},\n    {x: \"1905\", series: 'A', y1: 111, y2: 124, y3: 101},\n    {x: \"1905\", series: 'B', y1: 218, y2: 288, y3: 204},\n    {x: \"1905\", series: 'C', y1: 318, y2: 375, y3: 313},\n    {x: \"1906\", series: 'A', y1: 120, y2: 122, y3: 100},\n    {x: \"1906\", series: 'B', y1: 261, y2: 275, y3: 265},\n    {x: \"1906\", series: 'C', y1: 332, y2: 397, y3: 388},\n    {x: \"1907\", series: 'A', y1: 133, y2: 131, y3: 100},\n    {x: \"1907\", series: 'B', y1: 285, y2: 259, y3: 229},\n    {x: \"1907\", series: 'C', y1: 334, y2: 390, y3: 372},\n    {x: \"1908\", series: 'A', y1: 142, y2: 128, y3: 99},\n    {x: \"1908\", series: 'B', y1: 257, y2: 219, y3: null},\n    {x: \"1908\", series: 'C', y1: 350, y2: 388, y3: 364},\n    {x: \"1909\", series: 'A', y1: 156, y2: 135, y3: 97},\n    {x: \"1909\", series: 'B', y1: 228, y2: 275, y3: 299},\n    {x: \"1909\", series: 'C', y1: 321, y2: 352, y3: 359},\n    {x: \"1910\", series: 'A', y1: 168, y2: 137, y3: 95},\n    {x: \"1910\", series: 'B', y1: 212, y2: 216, y3: 270},\n    {x: \"1910\", series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox with SQL Query Results in Markdown\nDESCRIPTION: Shows how to use a checkbox to control a SQL query and display its results using BigValue component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/checkbox/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```sql orders\nselect \n    COUNT(*) as records_count\nfrom needful_things.orders\nWHERE  not ${inputs.exclude_low_value} -- When True, Do not evaluate the next condition\n    OR ( \n            ${inputs.exclude_low_value} -- Input is set to false\n        AND sales < 10  -- Apply this condition\n    )\n```\n\n<Checkbox\n    title=\"Exclude low values\" \n    name=exclude_low_value\n/>\n\n<BigValue fmt=num0 value=records_count data={orders}/>\n```\n\n----------------------------------------\n\nTITLE: Including Images in DataTable Columns\nDESCRIPTION: This Svelte snippet illustrates how to include images in DataTable columns, using either absolute or relative paths for the source of the image. The example demonstrates image alignment and scaling methods within the cell.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_28\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries}>\\n\\t<Column id=flag contentType=image height=30px align=center />\\n\\t<Column id=country />\\n\\t<Column id=country_id align=center />\\n\\t<Column id=category />\\n\\t<Column id=value_usd />\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Y-Axis Reference Lines with Custom Label Positions\nDESCRIPTION: This example demonstrates adding two horizontal reference lines to a LineChart - one for 'Target' at y=90000 with the label positioned below the end, and another for 'Forecast' at y=105000 with default positioning.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n>\n    <ReferenceLine y=90000 label=\"Target\" labelPosition=belowEnd/>\n    <ReferenceLine y=105000 label=\"Forecast\"/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Configuring ECharts Pie Chart in React\nDESCRIPTION: This JSX snippet renders a pie chart using the ECharts library, configured with tooltip formatting and data sourced from chartQuery. It illustrates a current attempt to visualize the distribution of hashtags in a pie chart format. This chart is still in a working phase and may require further adjustments to function correctly.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-debug.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<ECharts config={{\n        tooltip: {\n            formatter: '{b}: {c} ({d}%)'\n        },\n        series: [\n        {\n          type: 'pie',\n          data: chartQuery,\n        }\n      ]\n      }}\n    }/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Sheets Connection in YAML\nDESCRIPTION: Defines the connection parameters for a Google Sheets data source, including source name, type, and sheet identification details\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/google-sheets/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: [your_source_name]\ntype: gsheets\noptions: {}\nsheets:\n   [your_workbook_name]: [your_sheet_id]\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Treemap Data\nDESCRIPTION: This SQL query generates sample data for a treemap chart, representing sales by country.  It defines a CTE (Common Table Expression) named `sales_by_country` that returns country names and corresponding sales values. This is the first step in providing the right format for the ECharts treemap component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```sql sales_by_country\nselect 'Canada' as country, 100 as sales\nunion all\nselect 'US' as country, 250 as sales\nunion all\nselect 'UK' as country, 130 as sales\nunion all\nselect 'Australia' as country, 95 as sales\n```\n```\n\n----------------------------------------\n\nTITLE: Scalar Legend Point Map in Svelte\nDESCRIPTION: Demonstrates how to create a PointMap with a scalar legend based on the 'sales' field.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap\n    data={grouped_locations}\n    lat=lat\n    long=long\n    value=sales\n    valueFmt=usd\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Color to Tabs\nDESCRIPTION: Shows how to set a custom color for tabs using a hexadecimal color code in the color attribute.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/tabs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs color=#ff0000>\n    <Tab label=\"Red Tabs\">\n        Content of the First Tab\n    </Tab>\n    <Tab label=\"Second Tab\">\n        Content of the Second Tab\n    </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Category in SQL\nDESCRIPTION: Retrieves monthly sales data grouped by category, including total sales, number of orders, and average order value. Results are ordered by month and sales in descending order.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    date_trunc('month', order_datetime) as month,\n    category,\n    sum(sales) as sales_usd0k,\n    count(sales) as num_orders_num0,\n    sales_usd0k / count(sales) as aov_usd2\nfrom needful_things.orders\ngroup by month, category\norder by month, sales_usd0k desc\n```\n\n----------------------------------------\n\nTITLE: State Orders Analysis Query\nDESCRIPTION: SQL query that aggregates order counts by state, excluding Alaska and Hawaii from the results.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect state, count(*) as orders\nfrom orders\nwhere state != 'Alaska' and state != 'Hawaii'\ngroup by state\n```\n\n----------------------------------------\n\nTITLE: Aggregating Orders by Month\nDESCRIPTION: This query aggregates order data by month, calculating the number of orders, total sales, and average order value. It uses substr() to extract the year and month from the order_datetime field.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/sqlite-dates/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  substr(order_datetime,1,7) as date,\n  count(*) as number_of_orders,\n  sum(sales) as sales_usd0k,\n  sum(sales)/count(*) as average_order_value_usd2\nfrom orders\n\ngroup by date order by 1 desc\n```\n\n----------------------------------------\n\nTITLE: Structuring Nested Templated Pages\nDESCRIPTION: Demonstrates a bash-style file structure for handling nested templated pages, where folders can also be parameterized for deeper URL structures.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/templated-pages/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npages/\n`-- customers/\n    `-- [customer]/\n        |-- index.md\n        `-- [branch].md\n```\n\n----------------------------------------\n\nTITLE: Left-Aligned Funnel Chart in Markdown\nDESCRIPTION: This snippet demonstrates how to create a left-aligned funnel chart by setting the funnelAlign property to 'left' in the FunnelChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/funnel-chart/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage\n    valueCol=customers\n    funnelAlign=left\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Line and Area Charts with JavaScript\nDESCRIPTION: This snippet is responsible for setting up LineCharts and AreaCharts using the previously defined datasets. It utilizes predefined data structures to visualize data trends over time by district, with features such as markers and reference areas. Requires JavaScript and a charting library that supports LineChart and AreaChart components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<h1>Series Column with Date X Axis</h1>\n<h2>Line Chart</h2>\n<LineChart data={full} series=fed_reserve_district x=established_date title={titles[0]} markers=true/>\n<LineChart data={missingY} series=fed_reserve_district x=established_date title={titles[1]} markers=true/>\n<LineChart data={missingX} series=fed_reserve_district x=established_date title={titles[2]}/>\n<LineChart data={xSync} series=fed_reserve_district x=established_date title={titles[3]}/>\n<LineChart data={nulls} series=fed_reserve_district x=established_date title={titles[4]}/>\n\n<h2>Area Chart</h2>\n<AreaChart data={full} series=fed_reserve_district x=established_date title={titles[0]}/>\n<AreaChart data={missingY} series=fed_reserve_district x=established_date title={titles[1]}/>\n<AreaChart data={missingX} series=fed_reserve_district x=established_date title={titles[2]}/>\n<AreaChart data={xSync} series=fed_reserve_district x=established_date title={titles[3]}/>\n<AreaChart data={nulls} series=fed_reserve_district x=established_date title={titles[4]}>\n    <ReferenceArea xMin=2016 xMax=2018 label=Recession/>\n</AreaChart>\n\n<h2>100% Stacked Area Chart</h2>\n<AreaChart data={full} series=fed_reserve_district x=established_date title={titles[0]} type=stacked100/>\n<AreaChart data={missingY} series=fed_reserve_district x=established_date title={titles[1]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Empty Circle Markers in Svelte\nDESCRIPTION: Svelte code to create a line chart with empty circle markers using the LineChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month}\n    x=month\n    y=sales_usd0k \n    markers=true\n    markerShape=emptyCircle\n/>\n```\n\n----------------------------------------\n\nTITLE: Country Sales Data Query\nDESCRIPTION: SQL query to create a dataset of sales for Italy, Spain, and Portugal\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/maps.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Italy' as country, 1000 as sales\nunion all\nselect 'Spain' as country, 500 as sales\nunion all\nselect 'Portugal' as country, 50 as sales\n```\n\n----------------------------------------\n\nTITLE: Basic Order History Query\nDESCRIPTION: SQL query that retrieves order details including ID, datetime, category, item and sales information with a limit of 100 records.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dropdown/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect id, order_datetime, category, item, sales  from needful_things.orders\nlimit 100\n```\n\n----------------------------------------\n\nTITLE: Basic Chart Component Structure in Evidence\nDESCRIPTION: The basic structure of the Chart component in Evidence, which serves as a container for chart primitives like Bar, Line, and others. This component requires a data prop referencing a query name.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Chart data={query_name}>\n    Insert primitives here\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Creating State Sales Data Table with SQL\nDESCRIPTION: SQL query that creates a temporary dataset with state sales information including state abbreviations, month, value, and state-specific links. Uses UNION ALL to combine multiple state records.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/states/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'CA' as state, '2022-12' as month, 198 as value, '/states/CA' as state_link\nunion all\nselect 'NY' as state, '2022-12' as month, 321 as value, '/states/NY' as state_link\nunion all\nselect 'TX' as state, '2022-12' as month, 321 as value, '/states/TX' as state_link\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Data Arrays in JavaScript\nDESCRIPTION: Defines four test data arrays representing different data scenarios: complete data (full), data with missing Y values (missingY), data with missing X values (missingX), and data with null values (nulls). Each array contains objects with x, series, and y properties.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/stringSeries/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = \n[\n{x: \"a1\", series: 'a', y: 10},\n{x: \"a1\", series: 'b', y: 24},\n{x: \"a1\", series: 'c', y: 45},\n{x: \"a2\", series: 'a', y: 14},\n{x: \"a2\", series: 'b', y: 26},\n{x: \"a2\", series: 'c', y: 51},\n{x: \"a3\", series: 'a', y: 16},\n{x: \"a3\", series: 'b', y: 22},\n{x: \"a3\", series: 'c', y: 53},\n{x: \"a4\", series: 'a', y: 11},\n{x: \"a4\", series: 'b', y: 20},\n{x: \"a4\", series: 'c', y: 60},\n{x: \"a5\", series: 'a', y: 18},\n{x: \"a5\", series: 'b', y: 28},\n{x: \"a5\", series: 'c', y: 58},\n{x: \"a6\", series: 'a', y: 15},\n{x: \"a6\", series: 'b', y: 22},\n{x: \"a6\", series: 'c', y: 63}\n]\n\nlet missingY = \n[\n{x: \"a1\", series: 'a', y: 10},\n{x: \"a1\", series: 'b', y: 24},\n{x: \"a1\", series: 'c', y: 45},\n{x: \"a2\", series: 'a', y: 14},\n{x: \"a2\", series: 'b', y: 26},\n{x: \"a3\", series: 'a', y: 6},\n{x: \"a3\", series: 'b', y: 3},\n{x: \"a3\", series: 'c', y: 5},\n{x: \"a4\", series: 'a', y: 11},\n{x: \"a4\", series: 'b', y: 20},\n{x: \"a4\", series: 'c', y: 60},\n{x: \"a5\", series: 'a', y: 18},\n{x: \"a5\", series: 'b', y: 28},\n{x: \"a5\", series: 'c', y: 58},\n{x: \"a6\", series: 'a', y: 15},\n{x: \"a6\", series: 'b', y: 22},\n{x: \"a6\", series: 'c', y: 63}\n]\n\n\nlet missingX =\n[\n{x: \"a1\", series: 'a', y: 10},\n{x: \"a1\", series: 'b', y: 24},\n{x: \"a1\", series: 'c', y: 45},\n{x: \"a2\", series: 'a', y: 14},\n{x: \"a2\", series: 'b', y: 26},\n{x: \"a2\", series: 'c', y: 51},\n{x: \"a3\", series: 'a', y: 16},\n{x: \"a3\", series: 'b', y: 22},\n{x: \"a3\", series: 'c', y: 53},\n{x: \"a5\", series: 'a', y: 18},\n{x: \"a5\", series: 'b', y: 28},\n{x: \"a5\", series: 'c', y: 58},\n{x: \"a6\", series: 'a', y: 15},\n{x: \"a6\", series: 'b', y: 22},\n{x: \"a6\", series: 'c', y: 63}\n]\n\nlet nulls =\n[\n{x: \"a1\", series: 'a', y: 10},\n{x: \"a1\", series: 'b', y: 24},\n{x: \"a1\", series: 'c', y: 45},\n{x: \"a2\", series: 'a', y: 14},\n{x: \"a2\", series: 'b', y: 26},\n{x: \"a2\", series: 'c', y: null},\n{x: \"a3\", series: 'a', y: 16},\n{x: \"a3\", series: 'b', y: 22},\n{x: \"a3\", series: 'c', y: 53},\n{x: \"a4\", series: 'a', y: 11},\n{x: \"a4\", series: 'b', y: 20},\n{x: \"a4\", series: 'c', y: 60},\n{x: \"a5\", series: 'a', y: null},\n{x: \"a5\", series: 'b', y: 28},\n{x: \"a5\", series: 'c', y: 58},\n{x: \"a6\", series: 'a', y: 15},\n{x: \"a6\", series: 'b', y: 22},\n{x: \"a6\", series: 'c', y: 63}\n]\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query Using Code Element\nDESCRIPTION: Example of writing a basic SQL query using the Evidence code element with query naming.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<pre><code evidence-query-name=\"myFirstQuery\" lang=\"sql\">\nSELECT * FROM my_first_table\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Logarithmic Y-Axis in HTML\nDESCRIPTION: This snippet shows how to create a scatter plot with a logarithmic y-axis. It plots GDP against GDP growth rate for different countries, grouped by continent, with a reference line at 6.5% growth.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/scatter-plot/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ScatterPlot\ndata={countries}\nx=gdp_usd\ny=gdp_growth_pct1\ntooltipTitle=country\nseries=continent\nyLog=true\n>\n\n    <ReferenceLine y=0.065/>\n\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders by Category and Year in SQL\nDESCRIPTION: SQL query that filters orders by category and year using input parameters, calculating monthly sales totals by category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/prerender/pages/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    date_trunc('month', order_datetime) as month,\n    sum(sales) as sales_usd,\n    category\nfrom needful_things.orders\nwhere category like '${inputs.category.value}'\nand date_part('year', order_datetime) like '${inputs.year.value}'\ngroup by all\norder by sales_usd desc\n```\n\n----------------------------------------\n\nTITLE: BarChart Example with Nulls Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence using the `nulls` data set. It renders a standard bar chart using the `nulls` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_14\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={nulls} series=fed_reserve_district x=established_date title={titles[4]}/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Economic Data for Scatter Plots in JavaScript\nDESCRIPTION: This snippet defines several arrays of objects containing economic data for different countries and regions. It includes information such as GDP, growth rates, and other economic indicators.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/scatter-plot/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet regions = [\n    {region: 'West', score_a: 59, score_b: 51},\n    {region: 'West', score_a: 70, score_b: 43},\n    // ... more data\n]\n\nlet regions_states = [\n    {region: 'West', state: 'WA', score_a: 59, score_b: 51},\n    {region: 'West', state: 'CA', score_a: 70, score_b: 43},\n    // ... more data\n]\n\nlet single_region = [\n    {region: 'TX', score_a: 59, score_b: 51},\n    {region: 'OK', score_a: 70, score_b: 43},\n    // ... more data\n]\n\nlet countries = [\n    {country: 'United States', continent: 'North America', gdp_usd: 22996, gdp_growth_pct1: 0.017, interest_rate_pct1: 0.025, inflation_rate_pct1: 0.085, jobless_rate_pct1: 0.037, gov_budget: -16.7, debt_to_gdp: 137.2, current_account: -3.6, population: 332.4},\n    {country: 'China', continent: 'Asia', gdp_usd: 17734, gdp_growth_pct1: 0.004, interest_rate_pct1: 0.0365, inflation_rate_pct1: 0.027, jobless_rate_pct1: 0.054, gov_budget: -3.7, debt_to_gdp: 66.8, current_account: 1.8, population: 1412.6},\n    // ... more data\n]\n```\n\n----------------------------------------\n\nTITLE: Including Red Negatives in DataTable Svelte\nDESCRIPTION: This Svelte component allows for automatic highlighting of negative numbers in red within a DataTable, providing a clear visual cue to identify negative values in a data column.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_27\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={negatives}>\\n  <Column id=name/>\\n  <Column id=number redNegatives=true/>\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query for Categories Data\nDESCRIPTION: SQL query that retrieves category sales data, grouped by category and ordered by sales in descending order.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/download-data/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect category, sum(sales) as sales from needful_things.orders\ngroup by all\norder by sales desc\n```\n\n----------------------------------------\n\nTITLE: Sales Query with Category Wildcard Selection\nDESCRIPTION: SQL query to retrieve sales data across categories using a LIKE clause, allowing for percentage-based filtering\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/needful_things.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    item,\n    sum(sales) as sales,\nfrom needful_things.orders\nwhere category like '${inputs.category2.value}'\ngroup by item\norder by sales desc\n```\n\n----------------------------------------\n\nTITLE: Querying Time Series Data with SQL in Evidence Dev\nDESCRIPTION: SQL query that generates a sample time series dataset with dates and corresponding values. Creates 6 rows of data spanning from April 25-30, 2020 with incrementing values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/dates-and-times/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect date '2020-04-25' as date, 100 as value\nunion all\nselect date '2020-04-26' as date, 103 as value\nunion all\nselect date '2020-04-27' as date, 106 as value\nunion all\nselect date '2020-04-28' as date, 109 as value\nunion all\nselect date '2020-04-29' as date, 115 as value\nunion all\nselect date '2020-04-30' as date, 125 as value\nlimit 100\n```\n\n----------------------------------------\n\nTITLE: Querying Categories for Dropdown in SQL\nDESCRIPTION: SQL query that selects unique categories from the needful_things.orders table to populate a dropdown menu.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect category from needful_things.orders group by all\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Sparkline Data\nDESCRIPTION: This SQL query generates sample data for a sparkline, with 'sales' as the value and 'date' as the date. It uses UNION ALL to combine multiple SELECT statements into a single result set, providing the data points needed to plot the sparkline.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/sparkline/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 100 as sales, '2020-01-01'::date as date\nunion all\nselect 120 as sales, '2020-02-01'::date as date\nunion all\nselect 140 as sales, '2020-03-01'::date as date\nunion all\nselect 170 as sales, '2020-04-01'::date as date\nunion all\nselect 190 as sales, '2020-05-01'::date as date\n```\n\n----------------------------------------\n\nTITLE: Flag Component for Plugin Inclusion (Svelte)\nDESCRIPTION: This snippet shows how to flag a component in a Svelte file to be included as part of an Evidence plugin. Adding this script tag exports a constant called `evidenceInclude` which indicates that this component should be included in the plugin when built.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/create-component-plugin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"&lt;script context=\\\"module\\\"&gt;\\n    export const evidenceInclude = true;\\n&lt;/script&gt;\"\n```\n\n----------------------------------------\n\nTITLE: Funnel Chart with Percentage Labels in Markdown\nDESCRIPTION: This example shows how to display percentage labels on a funnel chart by setting the showPercent property to true in the FunnelChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/funnel-chart/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage\n    valueCol=customers\n    showPercent=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Date Type Conversion and Edge Case Testing\nDESCRIPTION: Comprehensive SQL query exploring different date and timestamp representations, including string to date conversions and boundary conditions like leap years\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/date-formatting-and-performance.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\t'1970-01-01' as str_date, '1970-01-01'::DATE as reg_date\nUNION ALL SELECT\n\t'2020-01-01' as str_date, '2020-01-01'::DATE as reg_date\nUNION ALL SELECT\n\t'2020-01-01' as str_date, '2020-01-01 00:00:00'::TIMESTAMP as reg_date\nUNION ALL SELECT\n\t'2020-01-01' as str_date, '2020-01-01 23:59:59'::TIMESTAMP as reg_date\nUNION ALL SELECT\n\t'2020-02-29' as str_date, '2020-02-29'::DATE as reg_date\nUNION ALL SELECT\n\t'2020-02-29' as str_date, '2020-02-29 00:00:00'::TIMESTAMP as reg_date\nUNION ALL SELECT\n\t'2020-02-29' as str_date, '2020-02-29 23:59:59'::TIMESTAMP as reg_date\n```\n\n----------------------------------------\n\nTITLE: Displaying Neutral Delta Value with Range Definition\nDESCRIPTION: Example of displaying a neutral delta value with percentage formatting and a defined neutral range.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<Delta data={growth} column=neutral fmt=pct1 neutralMin=-0.02 neutralMax=0.02 />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Environment Database Credentials\nDESCRIPTION: Add development database credentials via the settings page or local configuration. Used for iterative development and testing before production deployment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/environments/index.md#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n.env\n```\n\n----------------------------------------\n\nTITLE: Querying Negative Numbers Using SQL\nDESCRIPTION: This SQL snippet creates a dataset of letters associated with negative integers and statuses, using UNION to combine multiple SELECT statements. It assigns a status to each number which indicates its state, providing a range from -5 to 12.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/conditional-formatting/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 'A' as name, -5 as number,0 as status\nunion all\nselect 'B', -4 as number, 1 as status\nunion all\nselect 'C', -3 as number, 2 as status\nunion all\nselect 'D', -2 as number,0\nunion all\nselect 'E', -1 as number,1\nunion all\nselect 'F', 0 as number,1\nunion all\nselect 'G', 1 as number,2\nunion all\nselect 'H', 2 as number,2\nunion all\nselect 'I', 3 as number,0\nunion all\nselect 'J', 4 as number,0\nunion all\nselect 'K', 5 as number,2\nunion all\nselect 'L', 6 as number,1\nunion all\nselect 'M', 7 as number,2\nunion all\nselect 'N', 8 as number,1\nunion all\nselect 'O', 9 as number,0\nunion all\nselect 'P', 10 as number,0\nunion all\nselect 'Q', 11 as number,1\nunion all\nselect 'R', 12 as number,1\nunion all\nselect 'S', 13 as number,1\nunion all\nselect 'T', 14 as number,1\norder by number asc\n\n```\n\n----------------------------------------\n\nTITLE: Creating Time Series Data for Line Chart Visualization\nDESCRIPTION: Generates a simple time series dataset with time values and corresponding numeric values using UNION ALL. This query creates test data that will be used with a LineChart component for visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/bigquery-dates/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect '11:10' as time, 100 as value\nunion all\nselect '11:11' as time, 105 as value\nunion all\nselect '11:12' as time, 110 as value\nunion all\nselect '11:13' as time, 113 as value\nunion all\nselect '11:14' as time, 122 as value\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal with Title and Button Text - React\nDESCRIPTION: This snippet demonstrates how to create a Modal component in React with a specified title and button text. It allows users to see a simple modal interface with descriptive text content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/modal/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Modal title=\"Title\" buttonText='Open Modal'> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. </Modal>\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable Component with nully Data\nDESCRIPTION: This snippet uses React (JSX) to render a DataTable component by passing the 'nully' data as a prop. This assumes that 'nully' is an array of objects that will be displayed in a tabular format.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/nullish-bools.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript JSX\nCODE:\n```\n<DataTable data={nully} />\n```\n\n----------------------------------------\n\nTITLE: Specifying Row and Column in Value Component\nDESCRIPTION: Demonstrates how to display a specific row and column from query results using the Value component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Value \n    data={query_name}\n    column=column_name \n    row=6\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Callout Properties (HTML, JSX)\nDESCRIPTION: Defines a set of customizable properties for callouts in a line chart, including color, label width, position, and more. Each property is described with acceptable options and default values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<PropListing\n        name=color\n        description=\"Color to override default line and label colors\"\n        options=\"CSS name | hexademical | RGB | HSL\"\n        defaultValue=base-content-muted\n    />\n    <PropListing\n        name=labelColor\n        description=\"Color to override default label color. If used, takes precedence over `color`\"\n        options=\"CSS name | hexademical | RGB | HSL\"\n    />\n    <PropListing\n        name=labelWidth\n        description=\"The width available for the label. If text is longer than this width, it will wrap to new lines.\"\n        options=\"fit | string | number\"\n        defaultValue=fit\n    />\n    <PropListing\n        name=labelPadding\n        options=number\n        description=\"Padding between the text and the border of the label background\"\n    />\n    <PropListing\n        name=labelPosition\n        description=\"Where the label will appear relative to the point\"\n        options={\"top\", \"right\", \"bottom\", \"left\"}\n        defaultValue=top\n    />\n    <PropListing\n        name=labelBackgroundColor\n        description=\"The color of the background behind the label\"\n        options=\"CSS name | hexademical | RGB | HSL\"\n        defaultValue=\"hsla(360, 100%, 100%, 0.7)\"\n    />\n    <PropListing\n        name=labelBorderWidth\n        description=\"The thickness of the border around the label (in pixels)\"\n        options=number\n    />\n    <PropListing\n        name=labelBorderRadius\n        description=\"The radius of rounded corners on the label background (in pixels)\"\n        options=number\n    />\n    <PropListing\n        name=labelBorderColor\n        description=\"The color of the border around the label background\"\n        options=\"CSS name | hexademical | RGB | HSL\"\n    />\n    <PropListing\n        name=labelBorderType\n        description=\"The type of border around the label background (dashed or dotted)\"\n        options={\"solid\", \"dotted\", \"dashed\"}\n    />\n    <PropListing\n        name=fontSize\n        description=\"The size of the font in the label\"\n        options=number\n    />\n    <PropListing\n        name=align\n        description=\"How to align the label to the symbol, and the text within the label\"\n        options={\"left\", \"center\", \"right\"}\n    />\n    <PropListing\n        name=bold\n        description=\"Make the label text bold\"\n        options={[true, false]}\n        defaultValue=false\n    />\n    <PropListing\n        name=italic\n        description=\"Make the label text italic\"\n        options={[true, false]}\n        defaultValue=false\n    />\n    <PropListing\n        name=symbol\n        description=\"The type of symbol used to mark the x/y coordinate(s)\"\n        options={\"circle\", \"rect\", \"roundRect\", \"triangle\", \"diamond\", \"pin\", \"arrow\", \"none\"}\n        defaultValue=circle\n    />\n    <PropListing\n        name=symbolColor\n        description=\"Color to override default symbol color. If used, takes precedence over `color`\"\n        options=\"CSS name | hexademical | RGB | HSL\"\n    />\n    <PropListing\n        name=symbolSize\n        description=\"The size of the symbol\"\n        options=number\n        defaultValue=8\n    />\n    <PropListing\n        name=symbolOpacity\n        description=\"The opacity of the symbol\"\n        options=number\n    />\n    <PropListing\n        name=symbolBorderWidth\n        description=\"The width of the border around the symbol\"\n        options=number\n    />\n    <PropListing\n        name=symbolBorderColor\n        description=\"The color of the border around the symbol\"\n        options=\"CSS name | hexademical | RGB | HSL\"\n    />\n    <PropListing\n        name=preserveWhitespace\n        description=\"When true, stops multiline labels from having whitespace at the start/end of lines trimmed\"\n        options={[true, false]}\n        defaultValue=false\n    />\n```\n\n----------------------------------------\n\nTITLE: Stacked BarChart Example with Full Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a stacked 100% bar chart using the `full` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, a dynamic title, and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_15\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={full} series=fed_reserve_district x=established_date title={titles[0]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Series Names in Mixed-Type Charts\nDESCRIPTION: This example shows how to override the name of a specific series in a mixed-type chart. It renames the 'fda_recalls' series to 'FDA Recalls' for better capitalization while keeping the data visualization the same.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Chart data={fda_recalls}>\n    <Bar y=voluntary_recalls/>\n    <Line y=fda_recalls name=\"FDA Recalls\"/>\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sales by Item for Selected Category\nDESCRIPTION: SQL query to fetch sales data for items within a specific category, sorted by total sales in descending order\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/needful_things.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    item,\n    sum(sales) as sales,\nfrom needful_things.orders\nwhere category = '${inputs.category.value}'\ngroup by item\norder by sales desc\n```\n\n----------------------------------------\n\nTITLE: Invalid Log Scale Stacked Area Chart in Evidence\nDESCRIPTION: Example of an improperly configured stacked area chart with log scale enabled. Log scales cannot be used with stacked area charts, demonstrating an invalid configuration for reference.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart \n    data={orders_by_category} \n    x=month \n    y=sales_usd0k \n    series=category\n    yLog=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable with Status for Negative Numbers in Red\nDESCRIPTION: This JSX snippet defines a DataTable component to render the 'negatives' dataset, where the number column highlights negative values in red for quick identification. It is useful for visual analysis of negative numerical values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/conditional-formatting/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={negatives}>\n  <Column id=name/>\n  <Column id=number redNegatives=true/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: DataTable Component with Link Column Configuration\nDESCRIPTION: JSX component setup that displays the SQL query results in a DataTable, configuring the link_col as an interactive link column with a custom title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/table-row-links.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={my_query} link=link_col>\n\t<Column id=link_col title=Link />\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Querying User Count in Twinstibook Platform with SQL\nDESCRIPTION: This SQL query counts the total number of users in the fake social media platform and returns a string literal for demonstration purposes. The results are used in visualization components below the query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) as usercount, 'somestr' as somestr FROM users\n```\n\n----------------------------------------\n\nTITLE: Categorical Legend Point Map in Svelte\nDESCRIPTION: Demonstrates how to create a PointMap with a categorical legend based on the 'Category' field.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap\n    data={grouped_locations}\n    lat=lat\n    long=long\n    value=Category\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Order Categories in SQL\nDESCRIPTION: Retrieves unique, lowercase categories from the orders table, ensuring no duplicate category names are returned\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/categories/index.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT(lower(category)) as category FROM orders\n```\n\n----------------------------------------\n\nTITLE: Creating Single Accordion in Markdown\nDESCRIPTION: Shows how to create an accordion where only one item can be open at a time using the 'single' prop. Each AccordionItem contains simple paragraph content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/accordion/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Accordion single>\n  <AccordionItem title=\"Item 1\">\n    <p>Content 1</p>\n  </AccordionItem>\n  <AccordionItem title=\"Item 2\">\n    <p>Content 2</p>\n  </AccordionItem>\n  <AccordionItem title=\"Item 3\">\n    <p>Content 3</p>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal with Markdown Content - React\nDESCRIPTION: This snippet illustrates the creation of a Modal component in React that incorporates Markdown content for richer text formatting. The modal's button text is customizable, enhancing user interaction and content presentation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/modal/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Modal buttonText='Open Modal with Markdown'> \n\n**Lorem** ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \n- Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n- Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n1. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \n2. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n3. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \n\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with Border and Custom Padding in Evidence\nDESCRIPTION: Example showing how to display an image with a border and custom padding using Tailwind classes\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/image/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Image \n    url=\"https://raw.githubusercontent.com/evidence-dev/media-kit/refs/heads/main/png/wordmark-gray-800.png\" \n    description=\"Sample placeholder image\"\n    height=80\n    border=true \n    class=\"p-4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Data Arrays in JavaScript\nDESCRIPTION: Defines three data arrays representing time series data from 1985 to 1996. Includes a full dataset, one with missing x-values, and one with null values. Each array contains objects with year and value properties.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSingle/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = [\n    {year: '1985-01-01', value: 302},\n    {year: '1986-01-01', value: 375},\n    {year: '1987-01-01', value: 336},\n    {year: '1988-01-01', value: 579},\n    {year: '1989-01-01', value: 443},\n    {year: '1990-01-01', value: 598},\n    {year: '1991-01-01', value: 303},\n    {year: '1992-01-01', value: 587},\n    {year: '1993-01-01', value: 305},\n    {year: '1994-01-01', value: 262},\n    {year: '1995-01-01', value: 399},\n    {year: '1996-01-01', value: 406}\n]\n\nlet missingX =[\n    {year: '1985-01-01', value: 302},\n    {year: '1986-01-01', value: 375},\n    {year: '1987-01-01', value: 336},\n    {year: '1988-01-01', value: 579},\n    {year: '1990-01-01', value: 598},\n    {year: '1991-01-01', value: 303},\n    {year: '1992-01-01', value: 587},\n    {year: '1993-01-01', value: 305},\n    {year: '1994-01-01', value: 262},\n    {year: '1995-01-01', value: 399},\n    {year: '1996-01-01', value: 406}\n]\n\nlet nulls =[\n    {year: '1985-01-01', value: 302},\n    {year: '1986-01-01', value: 375},\n    {year: '1987-01-01', value: 336},\n    {year: '1988-01-01', value: 579},\n    {year: '1989-01-01', value: null},\n    {year: '1990-01-01', value: 598},\n    {year: '1991-01-01', value: 303},\n    {year: '1992-01-01', value: null},\n    {year: '1993-01-01', value: 305},\n    {year: '1994-01-01', value: 262},\n    {year: '1995-01-01', value: 399},\n    {year: '1996-01-01', value: 406}\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Categories in SQL\nDESCRIPTION: SQL query to select categories from a table. This query is referenced in the ButtonGroup components to populate options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/button-group/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    category, \n    upper(left(category,3)) as abbrev \nfrom ${categories}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Handler for Interactive Chart\nDESCRIPTION: Defines click event handling functionality for the ECharts visualization, allowing user interaction with data points and logging clicked data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/custom-charts/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport let clickedData = undefined;\n\nfunction click_handler(ev) {\n    const params = ev.detail;\n    console.log(params);\n    clickedData = params.data;\n}\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Hardcoded Options in HTML\nDESCRIPTION: Creates a ButtonGroup with manually defined options using ButtonGroupItem components. The selected value is stored in the 'option_name' input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/button-group/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ButtonGroup name=option_name>\n    <ButtonGroupItem valueLabel=\"Option One\" value=\"1\" />\n    <ButtonGroupItem valueLabel=\"Option Two\" value=\"2\" default />\n    <ButtonGroupItem valueLabel=\"Option Three\" value=\"3\" />\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Custom Basemap with Points Layer\nDESCRIPTION: This example demonstrates how to use a custom basemap URL and add a Points layer with custom styling options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<BaseMap basemap={`https://tile.openstreetmap.org/{z}/{x}/{y}.png`} attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'>\n    <Points \n        data={la_locations}\n        lat=lat\n        long=long\n        value=sales\n        valueFmt=usd\n        pointName=point_name\n        color=violet\n        borderColor=black\n        borderWidth=2\n    />\n</BaseMap>\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Category SQL\nDESCRIPTION: This SQL query retrieves a summary of orders by category including total sales, number of orders, and average order value grouped by month. The table is sourced from the 'needful_things.orders' and outputs aggregated numerical data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"orders_by_category\\nselect order_month as month, category, sum(sales) as sales_usd0k, count(1) as num_orders_num0,\\nsum(sales) / count(1) as aov_usd2\\nfrom needful_things.orders\\ngroup by all\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PointMap Component with Location Data\nDESCRIPTION: This snippet configures a `PointMap` component to visualize the location data from the `grouped_locations2` dataset. It specifies the latitude and longitude columns, the value column (`legend_id`) for color-coding, and a custom color palette. The tooltip displays the `point_name` and `sales` information with specific formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/pointmap-legend.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n  <PointMap\n\t\tshowLegend={true}\n\t\tlegendPosition=\"bottomLeft\"\n\t\tdata={grouped_locations2}\n\t\tlat=\"lat\"\n\t\tlong=\"long\"\n\t\tvalue=\"legend_id\"\n\t\tcolorPalette={['green', 'blue', 'red', 'yellow', 'purple', 'orange', 'pink', 'brown']}\n\t\ttooltipType=\"hover\"\n\t\ttooltip={[\n\t\t\t{ id: 'point_name', showColumnName: false, valueClass: 'text-lg font-semibold' },\n\t\t\t{ id: 'sales', fmt: 'usd', fieldClass: 'text-[grey]', valueClass: 'text-[green]' }\n\t\t]}\n\t/>\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Static Adapter\nDESCRIPTION: Bash command to install the Svelte adapter-static as a development dependency for configuring SPA mode\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/rendering-modes/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @sveltejs/adapter-static\n```\n\n----------------------------------------\n\nTITLE: Displaying Orders Data in Section Group Table\nDESCRIPTION: These HTML components use <DataTable> to display orders data grouped by state or category in a section format. The configurations include options for subtotals, totals, and customized columns. The input is an 'orders' data set and the output is a structured data table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/table-groups/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=true groupType=section> \n \t<Column id=state totalAgg=countDistinct totalFmt='[=1]0 \"state\";0 \"states\"'/> \n\t<Column id=category totalAgg=Total/> \n\t<Column id=item  totalAgg=countDistinct totalFmt='0 \"items\"'/> \n\t<Column id=orders/> \n\t<Column id=sales fmt=usd1k/> \n\t<Column id=growth contentType=delta neutralMin=-0.02 neutralMax=0.02 fmt=pct1 totalAgg=weightedMean weightCol=sales /> \n</DataTable>\n\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=false groupType=section/>\n\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=true groupType=section totalRow=true/>\n\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<DataTable data={orders} groupBy=category groupType=section subtotals=true totalRow=true totalRowColor=#fff0cc> \n \t<Column id=state totalAgg=countDistinct totalFmt='[=1]0 \"state\";0 \"states\"'/> \n\t<Column id=category totalAgg=Total/> \n\t<Column id=item  totalAgg=countDistinct totalFmt='0 \"items\"'/> \n\t<Column id=orders contentType=colorscale/> \n\t<Column id=sales fmt=usd1k/> \n\t<Column id=growth contentType=delta neutralMin=-0.02 neutralMax=0.02 fmt=pct1 totalAgg=weightedMean weightCol=sales /> \n</DataTable>\n\n```\n\n----------------------------------------\n\nTITLE: Text Input with Placeholder\nDESCRIPTION: Implementation of text input with a title and placeholder text for user guidance.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/text-input/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<TextInput\n    name=name_of_input\n    title=\"Freetext Search\"\n    placeholder=\"Start typing\"\n/>\n\nSelected: {inputs.text_input3}\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Default Value and Extra Option in HTML\nDESCRIPTION: Creates a ButtonGroup with data from a query and an additional 'All Categories' option. The selected value is stored in the 'category_name_with_extras' input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/button-group/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ButtonGroup data={categories} name=category_name_with_extras value=category title=\"Select a Category\">\n    <ButtonGroupItem valueLabel=\"All Categories\" value=\"%\" default/>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Filtered Target Query with Variable\nDESCRIPTION: SQL query that filters target metrics based on a selected year using a parameterized input value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${target}\nwhere year = ${inputs.year.value}\n```\n\n----------------------------------------\n\nTITLE: Configuring Evidence Deployment Paths\nDESCRIPTION: This snippet illustrates how to adjust the base path and build configuration for deploying an Evidence app on GitHub Pages. It modifies the 'evidence.config.yaml' file for setting the base path and updates the 'package.json' scripts to specify the build directory. Ensure your repository is correctly set before deployment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/github-pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndeployment:\n  basePath: /my-evidence-app\n```\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"build\": \"EVIDENCE_BUILD_DIR=./build/my-evidence-app evidence build\",\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Categories from Orders\nDESCRIPTION: This SQL snippet retrieves distinct categories from the 'needful_things.orders' database table. It is designed to populate UI elements like dropdowns or accordions with categories dynamically. The query requires access to the 'needful_things.orders' table and outputs a distinct list of category names.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/accordion/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect distinct category from needful_things.orders\n```\n\n----------------------------------------\n\nTITLE: BarChart Example with Missing Y Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence using the `missingY` data set. It renders a standard bar chart using the `missingY` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_11\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingY} series=fed_reserve_district x=established_date title={titles[1]}/>\n```\n\n----------------------------------------\n\nTITLE: Multiline Label Reference Point\nDESCRIPTION: Example showing how to create a reference point with a multiline label using line breaks.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <ReferencePoint x=\"2019-07-01\" y=6590 labelPosition=bottom align=left>\n        A label with\n        line breaks in it\n        to allow longer text\n    </ReferencePoint>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: AreaChart Example with Null Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `AreaChart` component in Evidence, using `nulls` as the data. It renders a stacked 100% area chart using the `nulls` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_9\n\nLANGUAGE: Evidence\nCODE:\n```\n<AreaChart data={nulls} series=fed_reserve_district x=established_date title={titles[4]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Creating Single Series SQL Data for 100% Stacked Chart\nDESCRIPTION: SQL query that generates a single year (1994) of data for four countries (Canada, US, UK, and China) with their corresponding values. This simplified dataset is used for demonstrating single series 100% stacked charts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/stacked-charts/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Canada' as country, 87 as value, 1994 as year\nunion all\nselect 'US' as country, 65 as value, 1994 as year\nunion all\nselect 'UK' as country, 80 as value, 1994 as year\nunion all\nselect 'China' as country, 65 as value, 1994 as year\n```\n\n----------------------------------------\n\nTITLE: Custom Color Palette Point Map in Svelte\nDESCRIPTION: Demonstrates how to use a custom color palette for the PointMap component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap \n    data={la_locations} \n    lat=lat \n    long=long \n    value=sales \n    valueFmt=usd \n    pointName=point_name \n    height=200\n    colorPalette={['yellow','orange','red','darkred']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Positive Delta Value\nDESCRIPTION: Example of displaying a positive delta value with percentage formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Delta data={growth} column=positive fmt=pct1 />\n```\n\n----------------------------------------\n\nTITLE: Bubble Chart Example with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BubbleChart` component in Evidence. It renders a bubble chart using the `xSync` dataset, `fed_reserve_district` as the series, `banks` for size and y-axis, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_48\n\nLANGUAGE: Evidence\nCODE:\n```\n<BubbleChart data={xSync} series=fed_reserve_district size=banks y=banks x=established_date title={titles[3]}/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Data Arrays in JavaScript\nDESCRIPTION: Defines two data arrays 'full' and 'nulls' containing time series data from 1900-1910 with three y-values per year. The 'nulls' array includes some null values to demonstrate null handling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/stringMulty/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = [\n    {x: \"1900\", y1: 103, y2: 135, y3: 88},\n    {x: \"1901\", y1: 105, y2: 138, y3: 93},\n    {x: \"1902\", y1: 106, y2: 132, y3: 103},\n    {x: \"1903\", y1: 108, y2: 130, y3: 105},\n    {x: \"1904\", y1: 109, y2: 128, y3: 102},\n    {x: \"1905\", y1: 111, y2: 124, y3: 101},\n    {x: \"1906\", y1: 120, y2: 122, y3: 100},\n    {x: \"1907\", y1: 133, y2: 131, y3: 100},\n    {x: \"1908\", y1: 142, y2: 128, y3: 99},\n    {x: \"1909\", y1: 156, y2: 135, y3: 97},\n    {x: \"1910\", y1: 168, y2: 137, y3: 95}\n]\n\nlet nulls =\n[\n    {x: \"1900\", y1: 103, y2: 135, y3: 88},\n    {x: \"1901\", y1: 105, y2: 138, y3: 93},\n    {x: \"1902\", y1: null, y2: 132, y3: 103},\n    {x: \"1903\", y1: 108, y2: 130, y3: 105},\n    {x: \"1904\", y1: 109, y2: 128, y3: 102},\n    {x: \"1905\", y1: 111, y2: 124, y3: 101},\n    {x: \"1906\", y1: 120, y2: 122, y3: 100},\n    {x: \"1907\", y1: 133, y2: 131, y3: 100},\n    {x: \"1908\", y1: 142, y2: null, y3: 99},\n    {x: \"1909\", y1: 156, y2: 135, y3: 97},\n    {x: \"1910\", y1: 168, y2: 137, y3: 95}\n]\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Multiple Date Ranges\nDESCRIPTION: This SQL query creates a dataset with multiple date ranges, each with a start and end date. These date ranges are used for reference lines and areas in charts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect '2019-12-05' as start_date, '2019-12-31' as end_date\nunion all\nselect '2020-07-14' as start_date, '2020-08-20' as end_date\nunion all\nselect '2021-04-14' as start_date, '2021-05-03' as end_date\n```\n\n----------------------------------------\n\nTITLE: Basic Bubble Map Implementation\nDESCRIPTION: Basic implementation of a bubble map showing locations with sales data using size and value formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/bubble-map/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<BubbleMap \n    data={la_locations} \n    lat=lat \n    long=long \n    size=sales \n    sizeFmt=eur\n    value=sales \n    valueFmt=eur\n    pointName=point_name \n/>\n```\n\n----------------------------------------\n\nTITLE: Traffic Sources Sankey SQL Query\nDESCRIPTION: Creates a comprehensive SQL dataset representing traffic sources and page destinations for website analytics\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/diagrams/sankey/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 'google' as source, 'all_traffic' as target, 100 as count\nunion all\nselect 'direct' as source, 'all_traffic' as target, 50 as count\nunion all\nselect 'facebook' as source, 'all_traffic' as target, 25 as count\n... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Color Variations for Reference Points\nDESCRIPTION: Demonstration of different color options for reference points including semantic colors and custom hex values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <ReferencePoint x=\"2019-03-01\" y=3000 color=info label=info />\n    <ReferencePoint x=\"2019-09-01\" y=3000 color=negative label=negative />\n    <ReferencePoint x=\"2020-03-01\" y=3000 color=warning label=warning />\n    <ReferencePoint x=\"2020-09-01\" y=3000 color=positive label=positive />\n    <ReferencePoint x=\"2021-03-01\" y=3000 color=base-content-muted label=base-content-muted />\n    <ReferencePoint x=\"2021-09-01\" y=3000 color=#63178f label=custom />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BigQuery Date and Time Data Types\nDESCRIPTION: Shows how to cast strings to different date and time data types in BigQuery. The query demonstrates DATE, DATETIME, TIMESTAMP, and TIME type casting with specific examples.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/bigquery-dates/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    CAST('2022-07-21' AS DATE) as date,\n    CAST('2022-07-21 11:21:24' AS DATETIME) as datetime,\n    CAST('2022-07-21 11:21:24Z' AS TIMESTAMP) as timestamp,\n    CAST('11:21:24' AS TIME) as time\n```\n\n----------------------------------------\n\nTITLE: BarChart Example with Missing X Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence using the `missingX` data set. It renders a standard bar chart using the `missingX` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_12\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingX} series=fed_reserve_district x=established_date title={titles[2]}/>\n```\n\n----------------------------------------\n\nTITLE: Querying Orders with SQL\nDESCRIPTION: This SQL query selects specific columns from the 'needful_things.orders' table. The selected columns include 'id', 'state', 'category', 'item', 'channel_group', 'channel', and 'sales'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/dimension-grid/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n```orders \n\nselect \nid,\nstate, \ncategory, \nitem,\nchannel_group,\nchannel,\nsales\nfrom needful_things.orders \n\n```\n```\n\n----------------------------------------\n\nTITLE: Positioning Delta Symbol on Left\nDESCRIPTION: Example of displaying a delta value with the symbol positioned on the left side.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<Delta data={growth} column=positive fmt=pct1 symbolPosition=left/>\n```\n\n----------------------------------------\n\nTITLE: Querying Orders Table with LIMIT\nDESCRIPTION: This SQL query retrieves all columns from the 'orders' table, limiting the result set to a maximum of 5000 rows. It's intended for fetching a sample of the orders data for analysis or display.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders LIMIT 5000\n```\n\n----------------------------------------\n\nTITLE: Dependent Query\nDESCRIPTION: SQL query that references another query result using template syntax\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/sql-file-queries/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT t * 2 as x FROM ${test_query}\n```\n\n----------------------------------------\n\nTITLE: BigValue with Comparisons\nDESCRIPTION: Shows how to implement BigValue with month-over-month comparison features.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/big-value/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<BigValue \n  data={orders_with_comparisons} \n  value=num_orders\n  comparison=order_growth\n  comparisonFmt=pct1\n  comparisonTitle=\"MoM\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Grouped BarChart Example with Nulls Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a grouped bar chart using the `nulls` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, sets the type to grouped, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_34\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={nulls} series=fed_reserve_district type=grouped x=established_date title={titles[4]}/>\n```\n\n----------------------------------------\n\nTITLE: Querying orders table with LIMIT in SQL\nDESCRIPTION: This SQL query selects all columns from the 'orders' table and limits the result set to 0 rows. This is often used for quickly retrieving the schema of a table without returning any actual data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/empty-codeblock.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```sql some_query\nSELECT * FROM orders\nLIMIT 0\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Bar and Line Chart Implementation in Evidence\nDESCRIPTION: Creates a combined bar and line chart showing sales and order numbers for Sinister Toys category. Includes a reference line marking January 2020.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/mixed-charts/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Chart\ndata={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\nx=month>\n<Bar y=sales_usd0k/>\n<Line y=num_orders_num0/>\n<ReferenceLine x='2020-01-01' label=date lineColor=base-content-muted/>\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Adding ReferenceLine to a LineChart in Evidence\nDESCRIPTION: This example demonstrates adding a simple ReferenceLine component to a LineChart. The reference line marks specific points on the x-axis using date values from the generated_multiple_dates dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n>\n    <ReferenceLine data={generated_multiple_dates} x=start_date/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: AreaChart Example with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `AreaChart` component in Evidence, using `xSync` as the data. It renders a stacked 100% area chart using the `xSync` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_8\n\nLANGUAGE: Evidence\nCODE:\n```\n<AreaChart data={xSync} series=fed_reserve_district x=established_date title={titles[3]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Defining Series Options Property - JSX\nDESCRIPTION: Customizes options for all series in the chart. It applies settings across the series, streamlining the configuration process. Reference page link is included for available options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=seriesOptions\n    description=\"Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/charts/echarts-options' class=markdown>reference page</a> for available options.\"\n    options=\"{`{{exampleSeriesOption:'exampleValue'}}`}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Data Array in JavaScript\nDESCRIPTION: Creates a sample dataset containing price values for demonstration purposes. This array of objects is used throughout the file to showcase different visualization components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/single-value.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst datas = [\n\t\t{ price: 59.99 },\n\t\t{ price: 10.99 },\n\t\t{ price: 29.99 },\n\t\t{ price: 99.99 }\n\t];\n```\n\n----------------------------------------\n\nTITLE: USMap with Custom Color Scale\nDESCRIPTION: Example showing how to implement a custom color scale with legend using specific colors.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/us-map/index.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<USMap\n    data={state_population}\n    state=state_name\n    value=population\n    colorScale={['maroon','white','#1c0d80']}\n    legend=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Grouping Locations with SQL CASE Statement\nDESCRIPTION: This SQL query selects all columns from the `la_locations` table and adds a calculated `legend_id` column. The `legend_id` is determined by the `id` column, using a `CASE` statement to assign different IDs based on ranges of `id` values. This is likely used to group locations for visualization purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/pointmap-legend.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```grouped_locations2\nSELECT \n  *, \n  CASE \n\t\tWHEN id BETWEEN 0 AND 4 THEN 1\n\t\tWHEN id BETWEEN 5 AND 9 THEN 2\n\t\tWHEN id BETWEEN 10 AND 14 THEN 3\n\t\tWHEN id BETWEEN 15 AND 19 THEN 4\n\t\tWHEN id BETWEEN 20 AND 24 THEN 5\n\t\tWHEN id BETWEEN 25 AND 29 THEN 6\n\t\tWHEN id BETWEEN 30 AND 34 THEN 7\n  END AS legend_id\nFROM la_locations\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Select Dimension Grid and Line Chart in HTML\nDESCRIPTION: This HTML snippet demonstrates how to render a multi-select Dimension Grid component and a Line Chart component. It shows the usage of the 'multiple' prop for enabling multi-select functionality.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dimension-grid/index.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<DimensionGrid \n    data={orders} \n    metric='sum(sales)' \n    name=multi_dimensions \n    multiple\n/>\n\n<LineChart data={monthly_sales_multi} y=sales_usd0/> \n\n\n```monthly_sales_multi\nselect \norder_month, \nsum(sales) as sales_usd0 \nfrom needful_things.orders\nwhere ${inputs.multi_dimensions} \ngroup by all \n```\n```\n\n----------------------------------------\n\nTITLE: LineChart Component Configuration\nDESCRIPTION: This snippet shows how to configure the LineChart component in Evidence.  It includes properties like `data`, `y`, and `yAxisTitle` to customize the display of the chart.  It also filters the data to only include records where the `category` is \"Sinister Toys\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/big-value/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n\"<LineChart\ndata = {orders_with_comparisons.filter(d => d.category === \\\"Sinister Toys\\\")}\ny=sales_usd0k\nyAxisTitle=\\\"Sales\\\"\n/>\"\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Month in SQL\nDESCRIPTION: SQL query that aggregates order data by month, calculating total sales and order count. This provides time-series data suitable for visualization in a sparkline.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sparkline/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect order_month as month, sum(sales) as sales_usd0k, count(1) as orders from needful_things.orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data with Missing Values for Line Charts in SQL\nDESCRIPTION: This SQL query creates a dataset with intentional null values to demonstrate how line charts can handle missing data points. It includes two value columns with missing values on specific dates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/line-chart/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect '2021-01-01'::date as date, null as value, null as value2\nunion all\nselect '2021-01-02'::date as date, null as value, null as value2\nunion all\nselect '2021-01-03'::date as date, null as value, null as value2\nunion all\nselect '2021-01-04'::date as date, 100 as value, 200 as value2\nunion all\nselect '2021-01-05'::date as date, null as value, null as value2\nunion all\nselect '2021-01-06'::date as date, null as value, null as value2\nunion all\nselect '2021-01-07'::date as date, null as value, null as value2\n```\n\n----------------------------------------\n\nTITLE: GeoJSON Query Implementation in SQL\nDESCRIPTION: SQL queries to fetch and filter GeoJSON URL data, excluding properties and filtering for specific political and populated categories.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/area-map/index.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect * exclude(properties)\nfrom geojson_urls\norder by scale, category, file\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * \nfrom ${all_geojson_urls}\nwhere category in ('political_countries', 'political_states')\nor file ilike 'populated_places%'\norder by scale desc, category, file\n```\n\n----------------------------------------\n\nTITLE: Bubble Chart Example with Nulls Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BubbleChart` component in Evidence. It renders a bubble chart using the `nulls` dataset, `fed_reserve_district` as the series, `banks` for size and y-axis, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_49\n\nLANGUAGE: Evidence\nCODE:\n```\n<BubbleChart data={nulls} series=fed_reserve_district size=banks y=banks x=established_date title={titles[4]}/>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Full Component Re-renders in Svelte\nDESCRIPTION: The provided Svelte code shows an inefficient method of rendering a BarChart component based on dropdown selection, which causes the entire component to re-render. It is recommended to use a conditional operator for changing data sources instead to improve performance.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/guides/best-practices/index.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n````svelte\n```sql categories\nselect * from categories\n```\n\n```sql products\nselect * from products\n```\n\n<Dropdown name=chart_picker>\n    <DropdownOption value=\"categories\"/>\n    <DropdownOption value=\"products\"/>\n</Dropdown>\n\n{#if inputs.chart_picker.value == \"categories\"}\n\n    <BarChart data={categories}/>\n\n{:else}\n\n    <BarChart data={products}/>\n\n{/if}\n````\n```\n\nLANGUAGE: svelte\nCODE:\n```\n````svelte\n```sql categories\nselect * from categories\n```\n\n```sql products\nselect * from products\n```\n\n<Dropdown name=chart_picker>\n    <DropdownOption value=\"categories\"/>\n    <DropdownOption value=\"products\"/>\n</Dropdown>\n\n<BarChart \n    data={inputs.chart_picker.value==\"categories\" ? categories : products}\n/>\n````\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Dimension Grid in HTML\nDESCRIPTION: This HTML snippet shows the most basic usage of the Dimension Grid component, binding it to a data source named 'my_query'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dimension-grid/index.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<DimensionGrid data={my_query} />\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Pie Chart Data\nDESCRIPTION: This SQL query generates sample data for a pie chart, representing the count of different pies. It defines a CTE named `pie_query` that returns pie names and corresponding counts. This data will be used to create an ECharts pie chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n```sql pie_query\nselect 'Apple' as pie, 60 as count\nunion all\nselect 'Blueberry' as pie, 70 as count\nunion all\nselect 'Cherry' as pie, 40 as count\nunion all\nselect 'Pecan' as pie, 35 as count\n```\n```\n\n----------------------------------------\n\nTITLE: Horizontal Stacked BarChart with Missing X Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal 100% stacked bar chart using the `missingX` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, sets the title to \"Missing X\", and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_27\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingX} x=established_date series=fed_reserve_district swapXY=true title=\"Missing X\" type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Original Bank Dataset Array - JavaScript\nDESCRIPTION: Defines an array of objects containing bank establishment data across Federal Reserve districts from 2015-2021, with each object tracking district, date, and number of banks.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet orig = [\n    {fed_reserve_district: 'NY', established_date: '2015-01-01', banks: 1},\n    {fed_reserve_district: 'SF', established_date: '2017-01-01', banks: 1},\n    {fed_reserve_district: 'ATL', established_date: '2017-01-01', banks: 1},\n    // ... additional entries\n]\n```\n\n----------------------------------------\n\nTITLE: Summarizing Sales by Selected Category - SQL\nDESCRIPTION: This SQL snippet computes total sales over a grouped dataset by date for a specified category. The category name is provided as a dynamic input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/categories/[category]/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(sales) as sales, datetrunc('day', order_datetime) as date FROM needful_things.orders WHERE lower(category) = lower('${inputs.category.value}') GROUP BY ALL\n```\n\n----------------------------------------\n\nTITLE: Rendering Bubble Chart with React\nDESCRIPTION: This snippet illustrates how to create a Bubble chart in React. The <Bubble> component is embedded within the <Chart> component to represent data where each point can vary in size, emphasizing certain data aspects.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Chart data={query_name}>\\n    <Bubble/>\\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Querying Social Media Comments with SQL\nDESCRIPTION: This SQL query selects all columns from the 'social_media.comments' table. It assumes the existence of a schema named 'social_media' and a table named 'comments' within that schema.  The query retrieves all rows and columns from this table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/faker-test-page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM social_media.comments\n```\n\n----------------------------------------\n\nTITLE: Multiple Dates SQL Query\nDESCRIPTION: SQL query that generates sample campaign data with start and end dates for reference line examples.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect '2019-12-05'::date as start_date, '2020-02-05'::date as end_date, 'Campaign 1' as campaign_name union all\nselect '2020-07-14'::date, '2020-09-14'::date, 'Campaign 2' union all\nselect '2021-04-14'::date, '2021-06-14'::date, 'Campaign 3'\n```\n\n----------------------------------------\n\nTITLE: Using Direct Hex Colors in Evidence Charts\nDESCRIPTION: Markdown example showing how to directly specify a hex color code for a BarChart component. Evidence will automatically generate a similar color for dark mode.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart\n    data={my_data}\n    fillColor=\"#3b82f6\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Executing Top 100 Orders Query\nDESCRIPTION: This SQL snippet fetches the top 100 orders from the database. It does not have any parameters and simply limits the results to a maximum of 100 entries, making it useful for retrieving a quick overview of order records.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from orders limit 100\n```\n\n----------------------------------------\n\nTITLE: Setting Target-Based Link Colors in Sankey Diagram with Svelte\nDESCRIPTION: Svelte code that configures link colors in a Sankey diagram to match their target nodes. This creates a visual connection between target nodes and their incoming links using the same color palette.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  linkColor=target\n  colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}\n/>\n```\n\n----------------------------------------\n\nTITLE: QuerySSR Component Usage\nDESCRIPTION: Example of using the QuerySSR component for server-side rendering support with manual queries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/sdk/README.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { runQuery } from '$evidence/queries';\n\timport QuerySSR from '$evidence/QuerySSR.svelte';\n\n\tlet manualQuery = runQuery('x', `SELECT * FROM users`);\n\t$: manualQuery = runQuery('x', `SELECT * FROM users`);\n</script>\n\n<QuerySSR queries={[manualQuery]} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Data Arrays in JavaScript\nDESCRIPTION: Defines three data arrays containing time series data from 1900-1910 with different y-values. Includes a complete dataset, one with missing x-values, and one with null values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberMulty/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = [\n    {x: 1900, y1: 103, y2: 135, y3: 88},\n    {x: 1901, y1: 105, y2: 138, y3: 93},\n    {x: 1902, y1: 106, y2: 132, y3: 103},\n    {x: 1903, y1: 108, y2: 130, y3: 105},\n    {x: 1904, y1: 109, y2: 128, y3: 102},\n    {x: 1905, y1: 111, y2: 124, y3: 101},\n    {x: 1906, y1: 120, y2: 122, y3: 100},\n    {x: 1907, y1: 133, y2: 131, y3: 100},\n    {x: 1908, y1: 142, y2: 128, y3: 99},\n    {x: 1909, y1: 156, y2: 135, y3: 97},\n    {x: 1910, y1: 168, y2: 137, y3: 95}\n]\n\nlet missingX =[\n    {x: 1900, y1: 103, y2: 135, y3: 88},\n    {x: 1901, y1: 105, y2: 138, y3: 93},\n    {x: 1902, y1: 106, y2: 132, y3: 103},\n    {x: 1903, y1: 108, y2: 130, y3: 105},\n    {x: 1904, y1: 109, y2: 128, y3: 102},\n    {x: 1906, y1: 120, y2: 122, y3: 100},\n    {x: 1907, y1: 133, y2: 131, y3: 100},\n    {x: 1908, y1: 142, y2: 128, y3: 99},\n    {x: 1909, y1: 156, y2: 135, y3: 97},\n    {x: 1910, y1: 168, y2: 137, y3: 95}\n]\n\nlet nulls =[\n    {x: 1900, y1: 103, y2: 135, y3: 88},\n    {x: 1901, y1: 105, y2: 138, y3: 93},\n    {x: 1902, y1: 106, y2: 132, y3: 103},\n    {x: 1903, y1: null, y2: 130, y3: 105},\n    {x: 1904, y1: 109, y2: 128, y3: 102},\n    {x: 1905, y1: 111, y2: 124, y3: null},\n    {x: 1906, y1: 120, y2: 122, y3: 100},\n    {x: 1907, y1: 133, y2: 131, y3: 100},\n    {x: 1908, y1: 142, y2: null, y3: 99},\n    {x: 1909, y1: 156, y2: 135, y3: 97},\n    {x: 1910, y1: 168, y2: 137, y3: 95}\n]\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Filtering by Date Range\nDESCRIPTION: SQL query that filters data from orders_by_day based on the selected date range. This query uses template literals to dynamically insert the selected start and end dates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    *\nfrom ${orders_by_day}\nwhere day between '${inputs.range_filtering_a_query.start}' and '${inputs.range_filtering_a_query.end}'\n```\n\n----------------------------------------\n\nTITLE: Filtering Post Tags by Hashtag ID (Single Select, Without Default)\nDESCRIPTION: This SQL query filters the `post_count_by_tag` table based on the value selected in the 'single_without_default' dropdown. It dynamically inserts the selected value into the WHERE clause using template literals.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-basic-usage.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n```sql q_single_without_default\nSELECT * FROM ${post_count_by_tag} WHERE hashtag_id = ${inputs.single_without_default.value}\n```\n```\n\n----------------------------------------\n\nTITLE: Grouped BarChart Example with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a grouped bar chart using the `xSync` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, sets the type to grouped, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_33\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={xSync} series=fed_reserve_district type=grouped x=established_date title={titles[3]}/>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Evidence CLI Commands\nDESCRIPTION: SQL query that generates a table of Evidence CLI commands with their VS Code equivalents and descriptions. This includes commands for creating projects, running development servers, building for production, and more.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/cli/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect '<code>npx degit evidence-dev/template my-project</code>' as \"CLI\", '<code>Evidence: New Evidence Project</code>' as \"VS Code\", 'Create a new project from the template' as \"Description\", 0 as row_num UNION ALL\nselect '<code>npm run sources</code>' as \"CLI\", '<code>Evidence: Run Sources</code>' as \"VS Code\", 'Extract data from sources' as \"Description\", 1 as row_num UNION ALL\nselect '<code>npm run dev</code>' as \"CLI\", '<code>Evidence: Start Server</code>' as \"VS Code\", 'Start the development server in the current directory' as \"Description\", 2 as row_num UNION ALL\nselect '<code>npm run build</code>' as \"CLI\", '<code>Evidence: Build</code>' as \"VS Code\", 'Build the app for production' as \"Description\", 3 as row_num UNION ALL\nselect '<code>npm run build:strict</code>' as \"CLI\", '<code>Evidence: Built Strict</code>' as \"VS Code\", 'Build, but fails on query or component errors' as \"Description\", 4 as row_num UNION ALL\nselect '<code>npm run preview</code>' as \"CLI\", 'N/A' as \"VS Code\", 'Preview the built site' as \"Description\", 5 as row_num UNION ALL\nselect '<code>Ctrl / Cmd</code> + <code>C</code>' as \"CLI\", '<code>Evidence: Stop Server</code>' as \"VS Code\", 'Stop the dev server (when running)' as \"Description\", 6 as row_num UNION ALL\nselect '<code>r</code>' as \"CLI\", 'N/A' as \"VS Code\", 'Restart the dev server (when running)' as \"Description\", 7 as row_num\nORDER BY row_num\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot Example with Nulls Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `ScatterPlot` component in Evidence. It renders a scatter plot using the `nulls` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_44\n\nLANGUAGE: Evidence\nCODE:\n```\n<ScatterPlot data={nulls} series=fed_reserve_district x=established_date title={titles[4]}/>\n```\n\n----------------------------------------\n\nTITLE: Chart Component Implementation Examples\nDESCRIPTION: Demonstrates various chart components with different configurations for handling data scenarios. Shows implementation of Line, Area, Bar, Scatter, and Bubble charts with options for handling nulls and axis orientation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/stringSingle/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>Series Column with String X Axis</h1>\n<h2>Line Chart</h2>\n<LineChart data={full} title=\"Full Data\" xBaseline=true yGridlines=false yBaseline=true xTickMarks=true yTickMarks=true/>\n<LineChart data={missingX} title=\"Missing X\"/>\n<LineChart data={nulls} handleNulls=gaps title=\"Nulls - handleNulls=gaps (default)\"/>\n<LineChart data={nulls} handleNulls=connect title=\"Nulls - handleNulls=connect\"/>\n<LineChart data={nulls} handleNulls=zero title=\"Nulls - handleNulls=zero\"/>\n\n<h2>Area Chart</h2>\n<AreaChart data={full}  title=\"Full Data\" line=false/>\n<AreaChart data={missingX}  title=\"Missing X\"/>\n<AreaChart data={nulls} handleNulls=gaps title=\"Nulls - handleNulls=gaps (default)\"/>\n<AreaChart data={nulls} handleNulls=connect title=\"Nulls - handleNulls=connect\"/>\n<AreaChart data={nulls} handleNulls=zero title=\"Nulls - handleNulls=zero\"/>\n\n<h2>Bar Chart</h2>\n<BarChart data={full}  title=\"Full Data\"/>\n<BarChart data={missingX}  title=\"Missing X\"/>\n<BarChart data={nulls}  title=\"Nulls\"/>\n\n<h2>Horizontal Bar Chart</h2>\n<BarChart data={full}  title=\"Full Data\" swapXY=true/>\n<BarChart data={missingX}  title=\"Missing X\" swapXY=true/>\n<BarChart data={nulls}  title=\"Nulls\" swapXY=true/>\n\n<h2>Scatter Plot</h2>\n<ScatterPlot data={full}  title=\"Full Data\"/>\n<ScatterPlot data={missingX}  title=\"Missing X\"/>\n<ScatterPlot data={nulls}  title=\"Nulls - handleNulls=none (default)\"/>\n<ScatterPlot data={nulls}  title=\"Nulls - handleNulls=zero\" handleNulls=zero/>\n\n<h2>Bubble Chart</h2>\n<BubbleChart data={full} size=y y=y title=\"Full Data\"/>\n<BubbleChart data={missingX}  size=y y=y title=\"Missing X\"/>\n<BubbleChart data={nulls}  size=y y=y title=\"Nulls - handleNulls=none (default)\"/>\n<BubbleChart data={nulls} size=y y=y title=\"Nulls - handleNulls=zero\" handleNulls=zero/>\n```\n\n----------------------------------------\n\nTITLE: Querying Categories for Dropdown Options\nDESCRIPTION: SQL query that fetches distinct categories and their abbreviations from the needful_things.orders table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dropdown/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct category as category_name, upper(left(category, 3)) as abbrev from needful_things.orders\n```\n\n----------------------------------------\n\nTITLE: SQL Query for ECharts Donut Chart\nDESCRIPTION: This SQL query transforms the data from `donut_query` CTE to match the expected format for the ECharts donut chart.  It selects the `donut` column and aliases it as `name`, and selects the `count` column and aliases it as `value`. This prepares the data for the ECharts donut chart, ensuring it's in the correct format.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n```sql donut_data\nselect donut as name, count as value\nfrom ${donut_query}\n```\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Grouped Locations\nDESCRIPTION: SQL query to categorize locations into different types based on their ID ranges.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  *, \n  CASE \n    WHEN id BETWEEN 0 AND 4 THEN 'Hotels'\n    WHEN id BETWEEN 5 AND 9 THEN 'Restaurants'\n    WHEN id BETWEEN 10 AND 14 THEN 'Golf Courses'\n    WHEN id BETWEEN 15 AND 19 THEN 'Shops'\n    WHEN id BETWEEN 20 AND 24 THEN 'Bars'\n    WHEN id BETWEEN 25 AND 29 THEN 'Entertainment'\n    WHEN id BETWEEN 30 AND 34 THEN 'Banks'\n  END AS Category\nFROM la_locations\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Category in SQL\nDESCRIPTION: SQL query to retrieve order counts grouped by order month from the needful_things.orders table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/grid/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect order_month, count(1) as orders from needful_things.orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Classes with HTML in Evidence\nDESCRIPTION: Markdown example showing how to use Tailwind CSS classes with HTML elements in an Evidence project. This demonstrates applying background, border, and text color classes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"bg-primary border border-primary p-4 text-primary-content\">Hello!</div>\n```\n\n----------------------------------------\n\nTITLE: Selecting and Aggregating Orders Data\nDESCRIPTION: This SQL query is used to select state, category, and item along with aggregated results such as order count, sales sum, and growth calculation from the 'needful_things.orders' table. The data is grouped and ordered for further processing. It requires a database connection to execute.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/table-groups/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect state, category, item, count(1) as orders, sum(sales) as sales, if(random() > 0.3, 1, -1) * 0.1 * random() as growth from needful_things.orders\ngroup by all\nlimit 25\n\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Area Height Property - JSX\nDESCRIPTION: Specifies the minimum height of the chart area in pixels, excluding the header and footer. This property affects all viewport sizes and can impact the mobile user experience.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=chartAreaHeight\n    description=\"Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX.\"\n    options=\"number\"\n    defaultValue=\"auto set based on y-axis values\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Stacked BarChart with Nulls Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal 100% stacked bar chart using the `nulls` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, sets the title to \"Nulls\", and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_29\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={nulls} x=established_date series=fed_reserve_district swapXY=true title=\"Nulls\" type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Area Chart with Step Line in Evidence\nDESCRIPTION: Creates an area chart with a step line effect for 'Sinister Toys' category data. The step position is set to 'middle', controlling how the line steps between data points.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart\ndata={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\nx=month\nstep=true\nstepPosition=middle\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Color Categorical Legend Point Map in Svelte\nDESCRIPTION: Shows how to use custom colors for a categorical legend in the PointMap component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap\n    data={grouped_locations}\n    lat=lat\n    long=long\n    value=Category\n    colorPalette={['#C65D47', '#5BAF7A', '#4A8EBA', '#D35B85', '#E1C16D', '#6F5B9A', '#4E8D8D']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Links with Each Loop in Markdown\nDESCRIPTION: Shows how to dynamically create markdown links using an `{#each}` loop, iterating over SQL query results to render links for each customer.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/templated-pages/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{#each customers as customer}\n\n- [{customer.customer_name}](/customers/{customer.customer_name})\n\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Variables\nDESCRIPTION: This snippet shows how to utilize page variables in Evidence Markdown to display the current page path dynamically. The variable is accessed using the `{$...}` syntax.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nThe current page path is: {$page.route.id}\n\n<!-- Result: The current page path is: /core-concepts/syntax -->\n```\n\n----------------------------------------\n\nTITLE: Default Usage of Embed Component in Markdown\nDESCRIPTION: Demonstrates the basic usage of the Embed component to display a YouTube video. The component requires a URL and title attribute.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/embed/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Embed \n    url=\"https://www.youtube.com/embed/UiCioBZ5IDU?si=dychrQurRTlhz9DN\"\n    title=\"Sample Video\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Point Map in Svelte\nDESCRIPTION: Shows how to apply custom styling to the points on the map, including color, size, opacity, and border width.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap \n    data={la_locations} \n    lat=lat \n    long=long \n    pointName=point_name \n    height=200\n    color=#128c2b\n    size=10\n    opacity=0.6\n    borderWidth=0\n/>\n```\n\n----------------------------------------\n\nTITLE: Bubble Chart Example with Full Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BubbleChart` component in Evidence. It renders a bubble chart using the `full` dataset, `fed_reserve_district` as the series, `banks` for size and y-axis, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_45\n\nLANGUAGE: Evidence\nCODE:\n```\n<BubbleChart data={full} series=fed_reserve_district size=banks y=banks x=established_date title={titles[0]}/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Tokens with SQL in Evidence\nDESCRIPTION: SQL query that generates a list of color tokens used in Evidence, including their purpose and usage locations. This query creates HTML spans with appropriate styling classes for visual representation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect '<span class=\"font-semibold text-primary\">primary</span>' as 'color', 'Represents your project/brand' as 'purpose', 'Logo color, buttons, links, DimensionGrid' as 'where-its-used' union all\n\tselect '<span class=\"font-semibold text-accent\">accent</span>', 'Focuses your attention', 'Map selected state (Chart selected state coming soon!)' union all\n\tselect '<span class=\"font-semibold text-base-content\">base</span>', 'The base color of your application', 'Background and text colors' union all\n\tselect '<span class=\"font-semibold text-info\">info</span>', 'Provide information', 'Alerts, annotations' union all\n\tselect '<span class=\"font-semibold text-positive\">positive</span>', 'Indicate something is good', 'Alerts, annotations, Delta indicator' union all\n\tselect '<span class=\"font-semibold text-warning\">warning</span>', 'Warn readers', 'Alerts, annotations' union all\n\tselect '<span class=\"font-semibold text-negative\">negative</span>', 'Indicate something is bad', 'Alerts, annotations, Delta indicator'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Colors in BarChart Component\nDESCRIPTION: Markdown example demonstrating how to apply a custom color token to a BarChart component in Evidence. The color is referenced by the name defined in the theme configuration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart\n\tdata={my_data}\n\tfillColor=myOtherColor\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Custom Color Palette in Markdown\nDESCRIPTION: Markdown code to create a multi-series line chart with a custom color palette using the LineChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<LineChart \n    data={orders_by_category}\n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n    series=category\n    colorPalette={\n        [\n        '#cf0d06',\n        '#eb5752',\n        '#e88a87',\n        '#fcdad9',\n        ]\n    }\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Base Path to Custom Components in Svelte\nDESCRIPTION: A Svelte script example for custom components that need to incorporate the base path into their links. Uses the 'addBasePath' utility from '@evidence-dev/sdk/utils/svelte' to adjust relative URLs. Requires installation of the '@evidence-dev/sdk' package.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/base-paths/index.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n&lt;script&gt;\n  export let link;\n  import { addBasePath } from '@evidence-dev/sdk/utils/svelte';\n&lt;/script&gt;\n\n<a href={addBasePath(link)}>My Component</a>\n```\n\n----------------------------------------\n\nTITLE: Querying Different Timestamp Types in Snowflake\nDESCRIPTION: Demonstrates the conversion of a date string to different timestamp formats using Snowflake's built-in conversion functions. Shows the difference between regular timestamp, timestamp with time zone, timestamp with no time zone, and timestamp with local time zone.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/snowflake-dates/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    to_date('2020-04-22') as date,\n    to_timestamp('2020-04-22') as timestamp,\n    to_timestamp_tz('2020-04-22') as timestamp_tz,\n    to_timestamp_ntz('2020-04-22') as timestamp_ntz,\n    to_timestamp_ltz('2020-04-22') as timestamp_ltz\n```\n\n----------------------------------------\n\nTITLE: Creating Chart Annotation Data with Value Ranges in SQL\nDESCRIPTION: This SQL query creates annotation data with start and end values, labels, and colors. This can be used to create threshold markers or regions on charts to indicate different value ranges.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/line-chart/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 0 as startval, 1000 as endval, 'Normal' as label, 'green' as color\nunion all\nselect 2200 as startval, 2500 as endval, 'Elevated' as label, 'yellow' as color\nunion all\nselect 4125 as startval, 5000 as endval, 'Emergency' as label, 'red' as color\n```\n\n----------------------------------------\n\nTITLE: Filtering Hashtags by Selected ID in SQL\nDESCRIPTION: SQL query that filters the hashtags table to return only the row matching the ID selected through the dropdown component. Uses a parameterized query with a reference to the input value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/flicker.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM hashtags\nWHERE id = ${inputs.selected_tag.value}\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable for Item Display\nDESCRIPTION: This React component is designed to display a DataTable that represents the item records fetched from the database. It serves to visualize the data in a structured format.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dependent-dropdown.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"<DataTable data={item} />\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Table with SQL Query Results in Evidence\nDESCRIPTION: This code demonstrates how to render a data table in Evidence using the DataTable component. It displays the results from a 'test_query' variable, which likely contains the results of a SQL query executed elsewhere in the application.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/partials/uses-unique-component.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={test_query}/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Heatmap for One Year (JSX)\nDESCRIPTION: This JSX code renders a Calendar Heatmap component using the 'oneyear' data. It displays daily orders for a specific year without a year label.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/calendar-heatmap/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarHeatmap\n    data={oneyear}\n    date=date\n    value=orders\n    title=\"Calendar Heatmap\"\n    subtitle=\"Daily Orders\"\n    yearLabel=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Complete Example with SQL and DataTable in Markdown\nDESCRIPTION: Provides a full example of a markdown file utilizing a SQL query with a DataTable component to generate templated pages, displaying customer-specific content with dynamic links.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/templated-pages/index.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# Customers\n\n```sql customers\nselect\n    first_name,\n    '/customers/' || first_name as customer_link,\n    sum(sales) as sales_usd \nfrom needful_things.orders\ngroup by 1\n```\n\n<DataTable\n    data={customers}\n    link=customer_link\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Component in Markdown (Evidence)\nDESCRIPTION: Demonstrates how to use a custom component in an Evidence markdown file, including passing data as props.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/custom/custom-component/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n```sql sales_by_country \nselect 'Canada' as country, 100 as sales_usd \nunion all \nselect 'USA' as country, 200 as sales_usd \nunion all \nselect 'UK' as country, 300 as sales_usd \n```\n\n<!-- To use data in the component, pass it to the component as a prop\n     You can use multiple queries, and name the props anything you like -->\n<Hello myData={sales_by_country} />\n```\n\n----------------------------------------\n\nTITLE: Creating Test Data for Heatmap Demonstration\nDESCRIPTION: SQL query that generates simple test data with days of the week, categories ABC and DEF, and corresponding values for demonstrating basic heatmap functionality.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/heatmap/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Mon' as day, 'ABC' as category, 100 as value\nunion all\nselect 'Tue' as day, 'ABC' as category, 120 as value\nunion all\nselect 'Wed' as day, 'ABC' as category, 130 as value\nunion all\nselect 'Mon' as day, 'DEF' as category, 160 as value\nunion all\nselect 'Tue' as day, 'DEF' as category, 180 as value\nunion all\nselect 'Wed' as day, 'DEF' as category, 190 as value\n```\n\n----------------------------------------\n\nTITLE: Defined Point Callout Example (HTML, JSX)\nDESCRIPTION: An example of using a callout within a line chart to highlight a specific point of interest on the chart. Displays a message when the x and y coordinates are set.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <Callout x=\"2019-07-01\" y=6590 label=\"Sales really dropped here\" labelPosition=bottom/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Counting Total Users in SQL\nDESCRIPTION: Simple SQL query that counts the total number of users in the 'users' table. This query returns a single row with the userCount metric.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/user-analytics.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) as userCount FROM users\n```\n\n----------------------------------------\n\nTITLE: Querying DuckDB Type Examples in SQL\nDESCRIPTION: A comprehensive SQL query demonstrating multiple DuckDB data types, including integers, floats, strings, dates, timestamps, and special types like UUID and bit\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/types/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    'example varchar' AS varchar,\n    true AS bool,\n    127 AS tinyint,\n    32767 AS smallint,\n    2147483647 AS int,\n    9223372036854775807 AS bigint,\n    12345678901234567890 AS hugeint,\n    255 AS utinyint,\n    65535 AS usmallint,\n    4294967295 AS uint,\n    18446744073709551615 AS ubigint,\n    current_date()::DATE AS date,\n    '12:34:56'::TIME AS time,\n    '2023-01-01 12:34:56'::TIMESTAMP AS timestamp,\n    '2023-01-01 12:34:56'::TIMESTAMP_S AS timestamp_s,\n    '2023-01-01 12:34:56'::TIMESTAMP_MS AS timestamp_ms,\n    '2023-01-01 12:34:56'::TIMESTAMP_NS AS timestamp_ns,\n    '12:34:56+00:00'::TIME WITH TIME ZONE AS time_tz,\n    '2023-01-01 12:34:56+00:00'::TIMESTAMP WITH TIME ZONE AS timestamp_tz,\n    3.14 AS float,\n    3.14159265359 AS double,\n    3.14159265359::DECIMAL(4,1) AS dec_4_1,\n    3.14159265359::DECIMAL(9,4) AS dec_9_4,\n    3.14159265359::DECIMAL(18,6) AS dec_18_6,\n    3.14159265359::DECIMAL(38,10) AS dec38_10,\n    B'101010' AS bit, \n    X'53514C' AS blob,\n    'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'::UUID AS uuid\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Component with Tooltip in Markdown\nDESCRIPTION: This snippet demonstrates how to use the Info component inline within markdown text to display a tooltip with additional information.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/info/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nData was sourced from the World Bank <Info description=\"World Economic Indicators dataset from past 12 months\" />\n```\n\n----------------------------------------\n\nTITLE: Querying Categories from Orders Table in SQL\nDESCRIPTION: A SQL query that fetches distinct categories from the needful_things.orders table. This query returns a list of unique categories by using the GROUP BY clause, which will populate a dropdown component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n  select\n      category\n  from needful_things.orders\n  group by category\n```\n\n----------------------------------------\n\nTITLE: USMap with Info Color Scale\nDESCRIPTION: Implementation showing the info color scale variation of the USMap component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/us-map/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<USMap\n    data={state_population}\n    state=state_name\n    value=population\n    colorScale=info\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Positive Numbers Using SQL\nDESCRIPTION: This SQL snippet generates a dataset of letters associated with ascending positive integers, using UNION to combine multiple SELECT statements. Each letter is assigned a unique number from 1 to 10.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/conditional-formatting/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n select 'A' as name, 1 as number\n union all\n select 'B',2\nunion all\n select 'C',3\n union all\n select 'D',4\n union all\n select 'E',5\n union all\n select 'F',6\n union all\n select 'G',7\n union all\n select 'H',8\n union all\n select 'I',9\n union all\n select 'J',10\n order by number asc\n \n```\n\n----------------------------------------\n\nTITLE: USMap with State Abbreviations\nDESCRIPTION: Implementation showing how to use state abbreviations instead of full state names.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/us-map/index.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<USMap data={map_data} state=state_abbrev value=sales_usd abbreviations=true />\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Date Data in Snowflake\nDESCRIPTION: Creates a sample dataset with dates and sales values using Snowflake's DATE type. Uses UNION ALL to combine multiple rows of data for visualization purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/snowflake-dates/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n        to_date('2020-04-22') as date,\n        100 as sales_usd\nunion all\nselect\n        to_date('2020-04-23') as date,\n        110 as sales_usd\nunion all\nselect\n        to_date('2020-04-24') as date,\n        120 as sales_usd\nunion all\nselect\n        to_date('2020-04-25') as date,\n        140 as sales_usd\n```\n\n----------------------------------------\n\nTITLE: Toast Notification UI Form in Svelte\nDESCRIPTION: This HTML template creates a form-like interface for configuring toast notifications. It includes input fields for ID, status dropdown, title, message, and timeout, along with buttons to trigger notifications at different frequencies.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/toast-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label class=\"flex gap-2 px-2 py-1 bg-gray-200 my-1 justify-between\">\n  ID\n  <div>\n  <input bind:value={id}/>\n  <button class=\"bg-red-400 px-2 py-1\" on:click={() => id = undefined}>Unset</button>\n  </div>\n</label>\n\n\n<label class=\"flex gap-2 px-2 py-1 bg-gray-200 my-1 justify-between\">\n  Status\n  <select bind:value={status}>\n    <option value={undefined}>Undefined</option>\n    <option value=\"error\">Error</option>\n    <option value=\"warning\">Warning</option>\n    <option value=\"success\">Success</option>\n    <option value=\"info\">Info</option>\n  </select>\n</label>\n\n<label class=\"flex gap-2 px-2 py-1 bg-gray-200 my-1 justify-between\">\n  Title\n  <input bind:value={title}/>\n</label>\n\n<label class=\"flex gap-2 px-2 py-1 bg-gray-200 my-1 justify-between\">\n  Message\n  <textarea bind:value={message}/>\n</label>\n\n\n<label class=\"flex gap-2 px-2 py-1 bg-gray-200 my-1 justify-between\">\n  Timeout\n  <input type=\"number\" bind:value={timeout}/>\n</label>\n\n\n<button class=\"bg-green-400 px-2 py-1 mx-1\" on:click={() => addToast()}> Submit </button>\n<button class=\"bg-green-400 px-2 py-1 mx-1\" on:click={() => addToast(2)}> Submit 2x </button>\n<button class=\"bg-green-400 px-2 py-1 mx-1\" on:click={() => addToast(4)}> Submit 4x </button>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Nullish Dates\nDESCRIPTION: Retrieves all records from the 'nullish_dates' table, likely used to populate the 'nully' dataset\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/nullish-dates.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM nullish_dates\n```\n\n----------------------------------------\n\nTITLE: Defining Toast Notification Properties and Add Function in Svelte\nDESCRIPTION: This script defines the properties for toast notifications including ID, title, message, timeout, and status. It also contains a function to add one or more toasts to the application with the specified properties.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/toast-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n  // import {toasts} from \"@evidence-dev/component-utilities/stores\"\n  \n  /** @type {string} */\n  let id;\n  /** @type {string} */\n  let title;\n  /** @type {string} */\n  let message;\n  /** @type {number} */\n  let timeout = 2000;\n  /** @type { import(\"@evidence-dev/component-utilities/stores\").ToastStatus } */\n  let status;\n\n  /**\n   * @param {number} [times=1]\n   */\n  function addToast(times = 1) {\n    for (let i = 0; i < times; i++ ) {\n      toasts.add(\n        { id, title, message, status },\n        timeout\n      )\n    }\n  }\n  \n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Echarts Options Property - JSX\nDESCRIPTION: Allows custom Echarts options to override default settings for the chart. This enables flexibility in adjusting various configurations for chart behavior and appearance.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=echartsOptions\n    description=\"Custom Echarts options to override the default options. See <a href='/components/charts/echarts-options' class=markdown>reference page</a> for available options.\"\n    options=\"{`{{exampleOption:'exampleValue'}}`}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Markdown\nDESCRIPTION: Shows how to embed both online images and local images stored in the project's static folder using the ![alt text](url) syntax.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![An online image](https://i.imgur.com/xyI27iZ.gif)\n\n![An image stored in the project's static folder](/my-image.png)\n```\n\n----------------------------------------\n\nTITLE: Filtering a Query with a Dropdown - SQL\nDESCRIPTION: This snippet demonstrates a SQL query that retrieves unique items from the 'orders' table, which can be filtered via a dropdown component. It includes a sample query to fetch sales data grouped by month depending on the selected item from the dropdown.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/filters/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    item\nfrom needful_things.orders\ngroup by 1\n\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    date_trunc('month', order_date) as month,\n    sum(sales) as sales_usd\nfrom needful_things.orders\nwhere item = '${inputs.selected_item.value}'\ngroup by 1\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for Customer Page\nDESCRIPTION: Example markdown file representing an individual customer page, dynamically rendering the customer's name and total purchases using the templated page's parameters.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/templated-pages/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n# {params.customer}\n\n```sql customers\nselect\n    sum(sales) as sales_usd \nfrom needful_things.orders\nwhere first_name = '${params.customer}'\ngroup by 1\n```\n\n{params.customer} bought items worth <Value data={customers} column=sales_usd />.\n```\n\n----------------------------------------\n\nTITLE: Dropdown Component for Categories\nDESCRIPTION: This HTML snippet defines an Evidence Dropdown component to filter by category. It uses the 'categories' data (obtained from the SQL query) to populate the dropdown options and allows selecting a specific category or \"All categories\" using a default value of \"%\" which is then accessible through inputs.category[n].value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/lots-of-dropdowns.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n<Dropdown\n  name=category1\n  value=category\n  data={categories}\n  title=Category\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All categories\"/>\n</Dropdown>\n\n    category1: {inputs.category1.value}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Monthly State Trends in SQL\nDESCRIPTION: SQL query that generates monthly trend data for CA, NY, and TX states throughout 2022. Each record contains a state code, date, and monthly value showing the progression over time.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/states/[state]/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 'CA' as state, '2022-01-01'::DATE as month, 100 as value\nunion all\nselect 'CA' as state, '2022-02-01'::DATE as month, 103 as value\nunion all\nselect 'CA' as state, '2022-03-01'::DATE as month, 106 as value\nunion all\nselect 'CA' as state, '2022-04-01'::DATE as month, 111 as value\nunion all\nselect 'CA' as state, '2022-05-01'::DATE as month, 121 as value\nunion all\nselect 'CA' as state, '2022-06-01'::DATE as month, 102 as value\nunion all\nselect 'CA' as state, '2022-07-01'::DATE as month, 112 as value\nunion all\nselect 'CA' as state, '2022-08-01'::DATE as month, 103 as value\nunion all\nselect 'CA' as state, '2022-09-01'::DATE as month, 98 as value\nunion all\nselect 'CA' as state, '2022-10-01'::DATE as month, 121 as value\nunion all\nselect 'CA' as state, '2022-11-01'::DATE as month, 146 as value\nunion all\nselect 'CA' as state, '2022-12-01'::DATE as month, 198 as value\nunion all\nselect 'NY' as state, '2022-01-01'::DATE as month, 200 as value\nunion all\nselect 'NY' as state, '2022-02-01'::DATE as month, 203 as value\nunion all\nselect 'NY' as state, '2022-03-01'::DATE as month, 206 as value\nunion all\nselect 'NY' as state, '2022-04-01'::DATE as month, 211 as value\nunion all\nselect 'NY' as state, '2022-05-01'::DATE as month, 222 as value\nunion all\nselect 'NY' as state, '2022-06-01'::DATE as month, 235 as value\nunion all\nselect 'NY' as state, '2022-07-01'::DATE as month, 265 as value\nunion all\nselect 'NY' as state, '2022-08-01'::DATE as month, 288 as value\nunion all\nselect 'NY' as state, '2022-09-01'::DATE as month, 312 as value\nunion all\nselect 'NY' as state, '2022-10-01'::DATE as month, 285 as value\nunion all\nselect 'NY' as state, '2022-11-01'::DATE as month, 292 as value\nunion all\nselect 'NY' as state, '2022-12-01'::DATE as month, 321 as value\nunion all\nselect 'TX' as state, '2022-01-01'::DATE as month, 250 as value\nunion all\nselect 'TX' as state, '2022-02-01'::DATE as month, 223 as value\nunion all\nselect 'TX' as state, '2022-03-01'::DATE as month, 236 as value\nunion all\nselect 'TX' as state, '2022-04-01'::DATE as month, 261 as value\nunion all\nselect 'TX' as state, '2022-05-01'::DATE as month, 182 as value\nunion all\nselect 'TX' as state, '2022-06-01'::DATE as month, 85 as value\nunion all\nselect 'TX' as state, '2022-07-01'::DATE as month, 95 as value\nunion all\nselect 'TX' as state, '2022-08-01'::DATE as month, 212 as value\nunion all\nselect 'TX' as state, '2022-09-01'::DATE as month, 312 as value\nunion all\nselect 'TX' as state, '2022-10-01'::DATE as month, 285 as value\nunion all\nselect 'TX' as state, '2022-11-01'::DATE as month, 292 as value\nunion all\nselect 'TX' as state, '2022-12-01'::DATE as month, 321 as value\n```\n\n----------------------------------------\n\nTITLE: Adding a Diagonal Reference Line with Only X2 Specified\nDESCRIPTION: This example shows a reference line in a ScatterPlot where starting coordinates (x,y) and only the ending x-coordinate (x2) are specified. The y2 value is assumed to be the same as y in this case.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<ScatterPlot\n    data={countries}\n    x=gdp_usd\n    y=gdp_growth_pct1\n    tooltipTitle=country\n    series=continent\n>\n   <ReferenceLine \n    x=5000 \n    y=0.01 \n    x2=10000 \n    label=\"Just x2\"/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Generating Date Range with Random Values in SQL\nDESCRIPTION: This SQL query creates a date range from 2018-01-01 to 2020-01-01 with 2-year intervals as start points, then generates daily timestamps with random values. It uses PostgreSQL's generate_series function to create the series of dates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/wack-dates.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nwith date_range as (\n  select\n     generate_series as start_timestamp,\n     '2020-01-01'::date as stop_timestamp\n  from\n     generate_series(timestamp '2018-01-01', timestamp '2020-01-01', interval '2 year')\n)\nselect\n  unnest(generate_series(start_timestamp, stop_timestamp, interval '1 day')) as timestamp,\n  random()\nfrom\n  date_range\n```\n\n----------------------------------------\n\nTITLE: Adding a Diagonal Reference Line with Only Y2 Specified\nDESCRIPTION: This example demonstrates a reference line in a ScatterPlot where starting coordinates (x,y) and only the ending y-coordinate (y2) are specified. The x2 value is assumed to be the same as x in this case.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<ScatterPlot\n    data={countries}\n    x=gdp_usd\n    y=gdp_growth_pct1\n    tooltipTitle=country\n    series=continent\n>\n   <ReferenceLine \n    x=5000 \n    y=0.01  \n    y2=0.09\n    label=\"Just y2\"/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Orders Query Example\nDESCRIPTION: SQL query selecting email, item, and sales data from needful_things.orders table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n    email, item, sales\nFROM \n    needful_things.orders\n```\n\n----------------------------------------\n\nTITLE: Querying Rendering Modes Comparison using SQL\nDESCRIPTION: SQL query generating a comparison table between Static Site Generation and Single Page App rendering modes, showcasing different characteristics and performance metrics\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/rendering-modes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Content Rendering' as rendering_mode, 'Pre-rendered at build time' as static_site_generation, 'Rendered on the client side' as single_page_app, 1 as row_number union all\nselect 'Page Generation', 'Each page generated ahead of time', 'Only one HTML file generated', 2 union all\nselect 'Built Output', 'All pages have corresponding HTML files', 'Pages rendered on the fly using JavaScript', 3 union all\nselect 'Build Duration', 'Slower due to building all pages', 'Fast as only one page is built', 4 union all\nselect 'Performance', 'Fast page loads', 'Slower page loads', 5 union all\nselect 'SEO', 'Rich SEO for all pages', 'Generic SEO for your whole app', 6\norder by row_number\n```\n\n----------------------------------------\n\nTITLE: Default Usage of Link Component in Markdown\nDESCRIPTION: This snippet illustrates the basic implementation of the Link component, demonstrating how to create a standard link with a destination URL and label.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/link/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Link \n    url=\"https://github.com/evidence-dev/evidence\"\n    label=\"Visit Example\"\n/>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n<Link \n    url=\"https://github.com/evidence-dev/evidence\"\n    label=\"Visit Example\"\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable with Scale Defining Column\nDESCRIPTION: This JSX snippet defines a DataTable component to render the 'numbers_othercol' dataset with an additional column for scale-defining values. It utilizes a color scale for numbers and includes formatting for display purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/conditional-formatting/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={numbers_othercol}>\n  <Column id=name/>\n  <Column id=scale_defining_number fontColor={['green','red']}/>\n  <Column id=number contentType=colorscale colorScale={['#6db678','white','#ce5050']} scaleColumn=scale_defining_number fmtCol=fmt/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Date Ranges with Markdown\nDESCRIPTION: This snippet demonstrates the use of a <DateRange> component in markdown for specifying a static date range. This is primarily used for documentation and illustrative purposes without dynamic changes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/daterange.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange start=\"2022-01-02\" end=\"2023-05-07\" />\n```\n\n----------------------------------------\n\nTITLE: Horizontal Stacked BarChart with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal 100% stacked bar chart using the `xSync` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, sets the title to \"X out of sync\", and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_28\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={xSync} x=established_date series=fed_reserve_district swapXY=true title=\"X out of sync\" type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Querying Ecommerce Orders with SQL\nDESCRIPTION: This SQL query retrieves all data from the 'ecommerce.order_items' table. It serves as a data source for the DimensionGrid component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/dimension-grid/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```ecommerce_orders\n\nselect * from ecommerce.order_items \n\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Sparkline Component Implementation in Markdown\nDESCRIPTION: Example of a basic Sparkline component implementation that visualizes sales data over time. The component requires a data source, date column, and value column to render the sparkline chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sparkline/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Sparkline \n    data={sales_by_date} \n    dateCol=date \n    valueCol=sales \n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Large Date Range SQL Query\nDESCRIPTION: Creates an extensive date range from 1990 to 4747, demonstrating SQL date generation capabilities and potential performance testing\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/date-formatting-and-performance.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM range('1990-01-01'::DATE, '4747-11-29'::DATE, interval '1' day)\n```\n\n----------------------------------------\n\nTITLE: Reference Line with Out-of-Bounds Error Example\nDESCRIPTION: This example illustrates an error case where a reference line's ending x-coordinate (x2=27000) is outside the bounds of the chart data. This demonstrates how Evidence handles reference lines that extend beyond visible chart boundaries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<ScatterPlot\n    data={countries}\n    x=gdp_usd\n    y=gdp_growth_pct1\n    tooltipTitle=country\n    series=continent\n>\n   <ReferenceLine \n    x=5000 \n    y=0.01 \n    x2=27000 \n    y2=0.09 \n    label=\"Outside Bounds\"/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Adding ReferenceArea to a LineChart in Evidence\nDESCRIPTION: This example shows how to add a ReferenceArea component to a LineChart. The reference area spans between start_date and end_date values from the generated_multiple_dates dataset, with a muted color background.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n>\n    <ReferenceArea data={generated_multiple_dates} xMin=start_date xMax=end_date color=base-content-muted/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Sales - SQL\nDESCRIPTION: This SQL snippet calculates the total sales from a defined set of items. It requires the items parameter that holds the filtered orders from which the sales total is derived.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/categories/[category]/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(sales) as total FROM ${items}\n```\n\n----------------------------------------\n\nTITLE: Filtering Post Tags by Hashtag ID (Single Select, With Default)\nDESCRIPTION: This SQL query filters the `post_count_by_tag` table based on the value selected in the 'single_with_default' dropdown. It dynamically inserts the selected value into the WHERE clause using template literals.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-basic-usage.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n```sql q_single_with_default\nSELECT * FROM ${post_count_by_tag} WHERE hashtag_id = ${inputs.single_with_default.value}\n```\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Search SQL Transformed\nDESCRIPTION: The transformed SQL query showing the actual implementation of fuzzy search using damerau_levenshtein function.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/text-input/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users\nORDER BY damerau_levenshtein(first_name, '{inputs.first_name_search}')\nLIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Querying Total Sales in SQL\nDESCRIPTION: This SQL snippet retrieves the total sales in USD, which is a fundamental metric for sales reporting. The expected output is a single integer value representing total sales. It is crucial for analyzing sales performance over a specified period.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/value-component/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 1000 as total_sales_usd\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTable without Lines or Shading\nDESCRIPTION: Creates a minimal DataTable with row lines disabled for a cleaner presentation style.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_38\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} rowLines=false />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Echarts Options in JSX with React\nDESCRIPTION: This snippet allows users to define custom options for Echarts in a React component. It includes properties for overriding default options for both individual charts and all series, providing flexibility for detailed customization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PropListing\n    name=echartsOptions\n    description=\"Custom Echarts options to override the default options. See <a href='/components/charts/echarts-options' class=markdown>reference page</a> for available options.\"\n    options=\"{`{{exampleOption:'exampleValue'}}`}\"\n/>\n<PropListing\n    name=seriesOptions\n    description=\"Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/charts/echarts-options' class=markdown>reference page</a> for available options.\"\n    options=\"{`{{exampleSeriesOption:'exampleValue'}}`}\"\n/>\n<PropListing\n    name=printEchartsConfig\n    description=\"Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options\"\n    options={['true', 'false']}\n    defaultValue=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Negative Delta Value in Chip Format\nDESCRIPTION: Example of displaying a negative delta value as a chip with percentage formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<Delta data={growth} column=negative fmt=pct1 chip=true/>\n```\n\n----------------------------------------\n\nTITLE: Creating US State Sales Data with Abbreviations\nDESCRIPTION: SQL query generating sales data for US states using state abbreviations. Includes sales values in USD for different states.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/maps/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect 'CA' as name, 100 as sales_usd\nunion all\nselect 'TX' as name, 120 as sales_usd\nunion all\nselect 'FL' as name, 20 as sales_usd\nunion all\nselect 'WA' as name, 5 as sales_usd\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Categories from Orders (SQL)\nDESCRIPTION: This SQL query selects distinct categories from the needful_things.orders table. It's used to populate a dropdown menu for category selection.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/dev-server-startup/pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n  select\n      category\n  from needful_things.orders\n  group by category\n```\n\n----------------------------------------\n\nTITLE: Hardcoded Dropdown Options\nDESCRIPTION: Example of a dropdown with manually defined options using DropdownOption components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/dropdown/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<Dropdown name=hardcoded>\n    <DropdownOption valueLabel=\"Option One\" value=\"1\" />\n    <DropdownOption valueLabel=\"Option Two\" value=\"2\" />\n    <DropdownOption valueLabel=\"Option Three\" value=\"3\" />\n</Dropdown>\n\nSelected: {inputs.hardcoded.value}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Item Sales\nDESCRIPTION: This SQL query calculates the total sales for each item in the 'orders' table. It groups the data by item, sums the sales, and orders the results in descending order of sales, showing the top-selling items.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/fullscreen.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"select\\n    item,\\n    sum(sales) as sales,\\nfrom orders\\ngroup by item\\norder by sales desc\"\n```\n\n----------------------------------------\n\nTITLE: Integrating ReferenceLine and ReferenceArea in LineChart\nDESCRIPTION: Demonstrates how to use ReferenceLine and ReferenceArea components to annotate line charts with specific data sets. No external dependencies are mentioned. It expects inputs like sales data, target data, and date ranges, and it outputs a line chart with annotations. There are no significant limitations as the components are used in a standard manner.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<LineChart data=\"{sales_data}\" x=\"date\" y=\"sales\">\n    <ReferenceLine data=\"{target_data}\" y=\"target\" label=\"name\" />\n    <ReferenceArea xMin=\"2020-03-14\" xMax=\"2020-05-01\" />\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Confidence Interval for Box Plot in SQL\nDESCRIPTION: This SQL query demonstrates an alternative approach to constructing box plot data, using a median value and a confidence interval instead of explicit quartiles.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/box-plot/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    channel as name,\n    median as midpoint,\n    20 as confidence_interval\nfrom ${sales_distribution_by_channel}\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Tables with Different Date Formatting in Evidence\nDESCRIPTION: These Evidence DataTable components display the month data in two different ways. The first one shows how the date gets automatically coerced (incorrectly) when no format is specified, while the second one uses a specific date format string to display the dates properly.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/wack-dates.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={months}>\n  <Column id=month />\n</DataTable>\n\n<DataTable data={months}>\n  <Column id=month fmt=\"yyyy-mm-dd HH:MM:SS\" />\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Using SQL Query in DataTable Component\nDESCRIPTION: Illustrates how to use a SQL query to generate a data table in a markdown document with dynamic links per customer based on query results.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/templated-pages/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<DataTable\n    data={customers}\n    link=customer_link\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Page Structure with Navigation\nDESCRIPTION: Shows the basic structure of a markdown page with a heading indicating nesting level and a navigation link to a deeper nested page. Includes HTML entity for right arrow in the link.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/hierarchical nav/nested-level-1/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This page is nested 1 level deep\n\nThere is a page at level 0, this level, and level 3. There is no page at level 2.\n\nThis is a [link to a very nested page &rarr;](/hierarchical%20nav/nested-level-1/nested-level-2/nested-level-3)\n```\n\n----------------------------------------\n\nTITLE: Executing Postgres Query in JavaScript\nDESCRIPTION: This function executes a SQL query on a Postgres database. It handles connecting to the database, running the query, and closing the connection. It also includes error handling and query timing.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/postgres/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function runQuery(query, connectionSettings) {\n    const client = getClient(connectionSettings)\n    await client.connect()\n    const start = new Date()\n    try {\n        const res = await client.query(query)\n        const duration = new Date() - start\n        console.log('Executed query', { duration })\n        await client.end()\n        return res.rows\n    } catch (error) {\n        console.error('Error executing query', error)\n        await client.end()\n        throw error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Label Positioning Callout Example (HTML, JSX)\nDESCRIPTION: Demonstrates different label positioning options for callouts on a line chart, offering flexibility in presentation based on specific requirements.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <Callout x=\"2019-07-01\" y=6590 label=top labelPosition=top/>\n    <Callout x=\"2019-07-01\" y=6590 label=right labelPosition=right/>\n    <Callout x=\"2019-07-01\" y=6590 label=bottom labelPosition=bottom/>\n    <Callout x=\"2019-07-01\" y=6590 label=left labelPosition=left/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grouped BarChart with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal grouped bar chart using the `xSync` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, enables swapping X and Y axes, sets the type to grouped, and sets the title to \"X out of sync\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_38\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={xSync} series=fed_reserve_district x=established_date swapXY=true type=grouped title=\"X out of sync\"/>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Evidence Monorepo Dependencies with Mermaid Diagram\nDESCRIPTION: A comprehensive Mermaid flowchart showing the dependency relationships between Evidence packages. The diagram organizes packages into logical groups including Core Evidence Functionality, Svelte Language Support, UI Utilities, and SDK User Interfaces, with color-coded relationships indicating package interdependencies.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/MONOREPO_ROADMAP.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n  theme: dark\n---\n%%{ init: { 'flowchart': { 'curve': 'monotoneX' } } }%%\ngraph LR\n    %% dependency-free (excluding logging)\n    usql(\"🦆 usql-duckdb\")\n    echarts(\"📊 echarts\")\n    icons(\"🎨 icons\")\n    tailwind(\"🍃 tailwind\")\n\n    %% library\n    lang-svelte(\"🧩 lang-svelte\")\n    sdk(\"🛠️ sdk\")\n    vite(\"📦 vite\")\n\n    %% product\n    ui-svelte(\"🖼️ ui-svelte\")\n    application-shell(\"📓 application-shell\")\n    cli(\"⌨️ cli\")\n    vscode(\"🆚 vscode\")\n\n\n  subgraph core[\"🧠 Core Evidence Functionality\"]\n    vite\n    usql\n    sdk\n  end\n\n  subgraph svelte-support[\"🎭 Svelte Language Support\"]\n    lang-svelte\n    ui-svelte\n  end\n\n  subgraph ui-utilities[\"🎨 UI Utilities\"]\n      tailwind\n      icons\n      echarts\n  end\n\n  subgraph sdk-client[\"🖥️ SDK User Interfaces\"]\n    direction TB\n    cli\n    vscode\n  end\n\n  lang-svelte --> sdk\n  lang-svelte --> vite\n\n  linkStyle 0,1 stroke:coral,stroke-width:2px;\n\n  application-shell --> ui-svelte\n  application-shell --> lang-svelte\n  application-shell --> tailwind\n  application-shell --> icons\n  application-shell --> sdk\n\n  linkStyle 2,3,4,5,6 stroke:yellow,stroke-width:2px;\n\n\n  ui-svelte --> icons\n  ui-svelte --> tailwind\n  ui-svelte --> echarts\n  ui-svelte --> sdk\n  ui-svelte --> vite\n\n\n  linkStyle 7,8,9,10,11 stroke:red,stroke-width:2px;\n\n\n  sdk --> usql\n  linkStyle 12 stroke:cyan,stroke-width:2px;\n\n  sdk-client --> sdk\n  vite --> sdk\n\nnote[\"📝 Packages not shown:\nlogging, telemetry\n(used by most packages)\"]\n\n    cli ~~~ vscode\n    note ~~~ sdk-client\n```\n\n----------------------------------------\n\nTITLE: Large-sized Slider Implementation\nDESCRIPTION: Shows a large-sized slider configuration with custom range and default value\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<Slider\n    title=\"Months Large\" \n    name=monthsLarge\n    defaultValue=18\n    min=0\n    max=36\n    size=large\n/>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Chart Query Data in React\nDESCRIPTION: This block demonstrates iterating over the chartQuery data to display each record in a formatted JSON style within a <pre> tag. It is primarily used for testing and ensuring that the data returned from the queries is properly structured and accessible.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-debug.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{#each chartQuery as d}\n    <pre>{JSON.stringify(d, null, 2)}</pre>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Generating Large Option Set for Dropdowns\nDESCRIPTION: SQL query that generates a larger set of options by combining channel_month and state values to demonstrate dropdown behavior with many options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect \"channel_month\" || ' ' || \"state\" as vendor from orders group by all\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Option for Postgres Data Source Plugin\nDESCRIPTION: Example of a nested configuration for SSL options in a data source plugin, demonstrating conditional option display based on boolean value\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/create-source-plugin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nssl: {\n    type: 'boolean',\n    // ...\n    nest: true,\n    children: {\n        [true]: {\n            sslmode: {\n                // ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Data Table with External Query Results\nDESCRIPTION: This HTML snippet uses the DataTable component from Evidence Dev to display the results of the 'external' query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/sql-file-query.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<DataTable data={external}/>\n```\n\n----------------------------------------\n\nTITLE: Slider without Min/Max Display\nDESCRIPTION: Creates a slider that hides the minimum and maximum value displays\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Slider\n    title=\"Months\" \n    name=monthsWithoutMinMax\n    min=0\n    max=36\n    showMaxMin=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Modifying Build Directory in Package.json\nDESCRIPTION: Sets the EVIDENCE_BUILD_DIR environment variable in package.json to specify the build output directory for the Evidence app. This modification is necessary for the 'npm run preview' command to function correctly. Requires Node.js and npm.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/base-paths/index.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"build\": \"EVIDENCE_BUILD_DIR=./build/my-base-path evidence build\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Numbers with Union All in SQL\nDESCRIPTION: This SQL query uses UNION ALL to compile a list of names and numbers in ascending order. It demonstrates basic SQL aggregation techniques and ordering without complex joins or conditions.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"numbers\\n select 'A' as name, 1 as number\\n union all\\n select 'B',2\\nunion all\\n select 'C',3\\n union all\\n select 'D',4\\n union all\\n select 'E',5\\n union all\\n select 'F',6\\n union all\\n select 'G',7\\n union all\\n select 'H',8\\n union all\\n select 'I',9\\n union all\\n select 'J',10\\n order by number asc\\n \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Checkbox with Default Value in Markdown\nDESCRIPTION: Shows how to create a checkbox with a default checked state and display its selected value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/checkbox/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Checkbox\n    title=\"Title of checkbox\" \n    name=name_of_checkbox\n    checked=true\n/>\n\nSelected Value: {inputs.name_of_checkbox}\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Legend Property - JSX\nDESCRIPTION: Allows the user to turn on or off the chart legend. This is important for indicating what each representation in the chart stands for. The default value is set to true.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=legend\n    description=\"Turn on or off the legend\"\n    options={['true', 'false']}\n    defaultValue=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: MIT Courses SQL Query with Extended Descriptions\nDESCRIPTION: SQL query generating a dataset of MIT course details with comprehensive course descriptions using UNION ALL\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/text-wrapping/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect \n  '6.0001' as course, 'Introduction to Computer Science and Programming in Python' as title, 'This course is the first of a two-course sequence: Introduction to Computer Science and Programming Using Python, and Introduction to Computational Thinking and Data Science. Together, they are designed to help people with no prior exposure to computer science or programming learn to think computationally and write programs to tackle useful problems. Some of the people taking the two courses will use them as a stepping stone to more advanced computer science courses, but for many it will be their first and last computer science courses. This run features lecture videos, lecture exercises, and problem sets using Python 3.5. Even if you previously took the course with Python 2.7, you will be able to easily transition to Python 3.5 in future courses, or enroll now to refresh your learning.' as description\nunion all\nselect\n '8.01' as course, 'Physics I: Classical Mechanics' as title, 'This freshman-level course is the second semester of introductory physics. The focus is on electricity and magnetism. The subject is taught using the TEAL (Technology Enabled Active Learning) format which utilizes small group interaction and current technology. The TEAL/Studio Project at MIT is a new approach to physics education designed to help students develop much better intuition about, and conceptual models of, physical phenomena.' as description\nunion all\nselect \n  '8.02' as course, 'Physics II: Electricity and Magnetism' as title, 'This freshman-level course is the second semester of introductory physics. The focus is on electricity and magnetism.' as description\nunion all\nselect \n  '8.03' as course, 'Physics III: Vibrations and Waves' as title, 'This freshman-level course is the third semester of introductory physics. The focus is on waves and relativity.' as description\nunion all\nselect \n  '9.00SC' as course, 'Introduction to Psychology' as title, 'This course is a survey of the scientific study of human nature, including how the mind works, and how the brain supports the mind. Topics include the mental and neural bases of perception, emotion, learning, memory, cognition, child development, personality, psychopathology, and social interaction. Students will consider how such knowledge relates to debates about nature and nurture, free will, consciousness, human differences, self, and society.' as description\n```\n\n----------------------------------------\n\nTITLE: DateRange Component with Custom Title\nDESCRIPTION: Demonstrates how to add a custom title to the date range picker for better user context.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange\n    name=date_range_with_title\n    data={orders_by_day}\n    dates=day\n    title=\"Select a Date Range\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Items and Sales with User Input using SQL\nDESCRIPTION: This SQL query retrieves items and their total sales from the 'needful_things.orders' table, filtering the results based on a user-provided category. The category is passed via the 'inputs.category.value' parameter. The query aggregates sales by item, orders the results in descending order of sales, and provides data for the BarChart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/echarts-blink.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```sql items\nselect\n    item,\n    sum(sales) as sales,\nfrom needful_things.orders\nwhere category = '${inputs.category.value}'\ngroup by item\norder by sales desc\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Chart for Orders by Month\nDESCRIPTION: This JSX code creates a LineChart visualization using the 'orders_by_month' data. It plots the number of orders over time, with the date on the x-axis and number of orders on the y-axis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/sqlite-dates/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n    data={orders_by_month}\n    x=date\n    y=number_of_orders\n    sort=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Using YAML Frontmatter in Evidence\nDESCRIPTION: Shows how to add metadata to an Evidence page using YAML frontmatter at the beginning of the document.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Evidence Docs\n---\n```\n\n----------------------------------------\n\nTITLE: JavaScript Sankey Data Array\nDESCRIPTION: Defines a JavaScript array of Sankey diagram data representing traffic sources and page URLs\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/diagrams/sankey/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet sankeyData = [\n  {\n    source: 'source',\n    target: 'google',\n    count: 3\n  },\n  ... (truncated for brevity)\n]\n```\n\n----------------------------------------\n\nTITLE: Multiline Label Callout Example (HTML, JSX)\nDESCRIPTION: Illustrates how to create a callout with a multiline label that can provide richer commentary. The structure allows for line breaks to enhance message clarity.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <Callout x=\"2019-07-01\" y=6590 labelPosition=bottom align=left>\n        Callout\n        with\n        line\n        breaks\n    </Callout>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot Example with Missing Y Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `ScatterPlot` component in Evidence. It renders a scatter plot using the `missingY` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_41\n\nLANGUAGE: Evidence\nCODE:\n```\n<ScatterPlot data={missingY} series=fed_reserve_district x=established_date title={titles[1]}/>\n```\n\n----------------------------------------\n\nTITLE: Setting Prod Environment Variables\nDESCRIPTION: Configure production database credentials as environment variables. Specific implementation depends on deployment platform and chosen method of environment separation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/environments/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# Production environment variables\\nDB_HOST=prod-database-host\\nDB_USER=prod-username\\nDB_SCHEMA=production_schema\n```\n\n----------------------------------------\n\nTITLE: Configuring Evidence Settings in VS Code settings.json\nDESCRIPTION: Example configuration showing how to customize Evidence extension settings in the VS Code workspace settings file. Demonstrates setting a custom port, auto-start behavior, and local template project path.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/extension/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"evidence.defaultPort\": 5000,\n  \"evidence.autoStart\": \"false\",\n  \"evidence.templateProjectUrl: \"file://E:/projects/evidence.dev/template\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Width Tabs\nDESCRIPTION: Shows how to create tabs that span the full width of the container using the fullWidth attribute set to true.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/tabs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs fullWidth=true>\n    <Tab label=\"First Tab\">\n        Content of the First Tab\n    </Tab>\n    <Tab label=\"Second Tab\">\n        Content of the Second Tab\n    </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Out of Memory Error Handling for Large Data Sources\nDESCRIPTION: Shows how to increase Node.js process memory when working with large data sources to prevent heap limit errors\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/index.md#2025-04-21_snippet_1\n\nLANGUAGE: code\nCODE:\n```\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory\n```\n\n----------------------------------------\n\nTITLE: Querying Product Categories in SQL\nDESCRIPTION: SQL query to retrieve distinct product categories from orders table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/prerender/pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    category\nfrom needful_things.orders\ngroup by category\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Minor Updates and Hot Fixes\nDESCRIPTION: Details minor changes including dependency fixes, LinkedChart improvements, and query button functionality updates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/evidence/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 15.0.0\n\n### Minor Changes\n\n- f7a08956: Addition of missing dependencies in multiple pkg, fix the LinkedChart by moving to svelte:component\n- 54904e9e: Hot Fix, Fix show/hide Query button, rework on reactivity and query toast, move build:strict to vite command\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New CSV Data Source in Evidence\nDESCRIPTION: This code snippet describes how to add a new CSV data source, specifically adding information about EV charging stations across the US. The process involves uploading a CSV file, setting connection parameters, and organizing files within a source directory.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_8\n\nLANGUAGE: code\nCODE:\n```\nsources/\n`-- ev_stations/\n   |-- connection.yaml\n   |-- connection.options.yaml\n   `-- us_alt_fuel_stations.csv\n```\n\n----------------------------------------\n\nTITLE: Bubble Chart Example with Missing Y Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BubbleChart` component in Evidence. It renders a bubble chart using the `missingY` dataset, `fed_reserve_district` as the series, `banks` for size and y-axis, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_46\n\nLANGUAGE: Evidence\nCODE:\n```\n<BubbleChart data={missingY} series=fed_reserve_district size=banks y=banks x=established_date title={titles[1]}/>\n```\n\n----------------------------------------\n\nTITLE: Select Aggregated Orders by Category - SQL\nDESCRIPTION: This SQL snippet calculates the total sales and orders, and computes the average order value (AOV) from the orders_by_category dataset. The query uses SUM() functions to aggregate the data across the dataset.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/total-rows/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect \n  sum(sales_usd0k), \n  sum(num_orders_num0),\n  sum(sales_usd0k) / sum(num_orders_num0) as aov_usd2\nfrom ${orders_by_category}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Evidence Pages\nDESCRIPTION: Example of setting environment variables for use in Evidence pages. These variables must be prefixed with VITE_ and are stored in a .env file.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/cli/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nVITE_customer_attribute=premium\n```\n\n----------------------------------------\n\nTITLE: Multiple Label Positions Demo\nDESCRIPTION: Demonstration of different label position options (top, right, bottom, left) for reference points.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>\n    <ReferencePoint x=\"2019-07-01\" y=6590 label=top labelPosition=top/>\n    <ReferencePoint x=\"2019-07-01\" y=6590 label=right labelPosition=right/>\n    <ReferencePoint x=\"2019-07-01\" y=6590 label=bottom labelPosition=bottom/>\n    <ReferencePoint x=\"2019-07-01\" y=6590 label=left labelPosition=left/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Query Aliasing Configuration\nDESCRIPTION: Example of how to alias SQL query names in YAML frontmatter configuration\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/sql-file-queries/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nqueries:\n  - default_query_name.sql # This will be referenced as default_query_name\n  - alias: default_query_name.sql # This will be referenced as alias\n#      ^ This is the key\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Country Metrics - JavaScript\nDESCRIPTION: This JavaScript snippet invokes a data table component to display the queried country metrics. It defines various columns such as country, category, value in USD, and year-over-year change percentage. The data source is specified as 'tableq2', and the table can be searched without row shading. The component requires appropriate libraries for rendering data tables and handling events.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/new-table/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={tableq2} search=true rowShading=false link=country_url>\n    <Column id=country />\n    <Column id=country_id align=center/>\n    <Column id=flag contentType=image width=50px align=centre/>\n    <Column id=category align=center/>\n    <Column id=value_usd/>\n    <Column id=yoy contentType=delta fmt=pct title=\"Y/Y Chg\"/>\n    <Column id=country_url contentType=link linkLabel=\"Details &rarr;\" title=\"Country Details\" align=right openInNewTab=true/>\n</DataTable>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={tableq2}>\n\t<Column id=\"country\" />\n\t<Column id=\"category\" />\n\t<Column id=\"value_usd\" />\n    <Column id=\"yoy\" contentType=delta fmt=pct title=\"Y/Y Chg\"/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Using PageBreak Component with Charts\nDESCRIPTION: Shows how to force content onto a new page during printing using the PageBreak component. Example includes two line charts separated by a page break.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/print-format-components/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nThe purple line chart in this section will print on a new page.\n\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n/>\n\n<PageBreak/>\n\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    lineColor=purple\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of LastRefreshed Component in Markdown\nDESCRIPTION: Demonstrates the basic usage of the LastRefreshed component to display the last data refresh time.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/last-refreshed/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<LastRefreshed/>\n```\n\n----------------------------------------\n\nTITLE: Selecting a Constant Value in SQL\nDESCRIPTION: This SQL query selects the integer value 1. It represents the simplest form of a SQL SELECT statement that returns a constant value rather than data from a table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/hmr/pages/error-handling/reserved-word-query-name.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 1\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Checkbox in Markdown\nDESCRIPTION: Demonstrates how to create a basic checkbox with a title and name attribute.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/checkbox/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Checkbox\n    title=\"Hide Months 0\" \n    name=hide_months_0 \n/>\n```\n\n----------------------------------------\n\nTITLE: BigValue with Page Link\nDESCRIPTION: Demonstrates how to make BigValue component clickable with navigation link.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/big-value/index.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<BigValue \n  data={orders_with_comparisons} \n  value=num_orders\n  sparkline=month\n  comparison=order_growth\n  comparisonFmt=pct1\n  comparisonTitle=\"vs. Last Month\"\n  link='/components/data/big-value'\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Snowflake Data Source in Evidence\nDESCRIPTION: This snippet demonstrates how to initialize a new data source connection to Snowflake within the Evidence platform. It sets up the source with a specified name, making it ready for querying data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/snowflake/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<NewSource sourceName=\"Snowflake\" />\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Filtering Dynamic Sparkline Data\nDESCRIPTION: This SQL query filters data dynamically based on the selected category from the dropdown.  It references the 'dynamic' dataset and uses the 'inputs.category.value' from the dropdown to filter the results.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/sparkline/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${dynamic}\nwhere category like '${inputs.category.value}'\n```\n\n----------------------------------------\n\nTITLE: Chart Querying Hashtag Post Counts with SQL\nDESCRIPTION: This SQL snippet retrieves the count of posts associated with specific hashtags by joining the hashtags and post_tags tables. It groups the results by the tag and filters the hashtags based on user selection from the dropdown. This data is used for rendering a bar chart that visualizes post counts against the hashtags.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-debug.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) as postCount, tag FROM hashtags\n        INNER JOIN post_tags pt on hashtags.id = pt.hashtag_id\n        WHERE pt.hashtag_id in ${inputs.chartDriver.value}\n        GROUP BY all\n```\n\n----------------------------------------\n\nTITLE: Link Columns with Consistent String Label\nDESCRIPTION: This Svelte example demonstrates how to use a consistent string as link label for all rows in a DataTable column. It allows for a universal clickable action, enhancing usability with a predictable linkage behavior.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_30\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries}>\\n\\t<Column id=country />\\n\\t<Column id=country_id align=center />\\n\\t<Column id=category />\\n\\t<Column id=value_usd />\\n\\t<Column id=country_url contentType=link linkLabel=\\\"Details &rarr;\\\" />\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Python Code Block Example\nDESCRIPTION: This Python code snippet showcases basic variable assignment and addition. It assigns the values 100 and 200 to variables 'x' and 'y' respectively, and then calculates their sum, storing the result in variable 'z'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/markdown/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nx = 100\ny = 200\nz = x + y\n```\n```\n\n----------------------------------------\n\nTITLE: Query Building and Loading State Management in Svelte\nDESCRIPTION: Svelte script that builds and manages SQL queries with loading states using Evidence's query builder utility.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/prerender/pages/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { buildQuery } from \"@evidence-dev/component-utilities/buildQuery\";\n\nconst nonssr_query = buildQuery(\"SELECT category, COUNT(*) as count FROM needful_things.orders GROUP BY category\", \"nonssr\");\nconst ssr_query = buildQuery(\"SELECT category, COUNT(*) * 2 as count FROM needful_things.orders GROUP BY category\", \"ssr\", data.ssr_data, { knownColumns: data.ssr_columns });\n\n// replicate chart double loading\nsetTimeout(() => {\n\tsales_month = sales_month;\n}, 1400);\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Alternative Labels in HTML\nDESCRIPTION: Creates a ButtonGroup using data from a query with alternative labels for display. The selected value is stored in the 'alternative_labels' input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/button-group/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ButtonGroup \n    data={category_lookup} \n    name=alternative_labels \n    value=category\n    label=abbrev \n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Evidence Template Using the CLI\nDESCRIPTION: Commands to create a new Evidence project from a template using degit, install dependencies, and start the development server.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/packaging/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Styling Button Group as Tabs in Evidence\nDESCRIPTION: Shows how to display a button group with a tabs-style visual appearance using the display property.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup \n    data={categories} \n    name=buttons_as_tabs \n    value=category\n    display=tabs\n/>\n\nSelected: {inputs.buttons_as_tabs}\n```\n\n----------------------------------------\n\nTITLE: Rendering Svelte LastRefreshed with Default\nDESCRIPTION: This snippet renders the LastRefreshed component in Svelte with the default setting, which does not include a custom prefix. It requires the LastRefreshed component to be available for import in the Svelte environment. The output is a rendered component with the default refresh text.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/last-refreshed/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<LastRefreshed/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tabs with Theme Color\nDESCRIPTION: Demonstrates how to apply a theme color to the tabs using the color attribute set to a theme token (primary in this case).\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/tabs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs color=primary>\n    <Tab label=\"Primary Tabs\">\n        Content of the First Tab\n    </Tab>\n    <Tab label=\"Second Tab\">\n        Content of the Second Tab\n    </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Data with Missing Time Period in JavaScript\nDESCRIPTION: A dataset with a missing time period (year 1906 completely removed) to test how visualizations handle gaps in the timeline. This tests the ability to properly scale axes and maintain visual continuity.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet missingX =\n[ // remove 1906\n    {date: '1900-01-01', series: 'A', y1: 103, y2: 135, y3: 88},\n    {date: '1900-01-01', series: 'B', y1: 240, y2: 299, y3: 201},\n    {date: '1900-01-01', series: 'C', y1: 361, y2: 318, y3: 314},\n    {date: '1901-01-01', series: 'A', y1: 105, y2: 138, y3: 93},\n    {date: '1901-01-01', series: 'B', y1: 298, y2: 215, y3: 277},\n    {date: '1901-01-01', series: 'C', y1: 394, y2: 306, y3: 348},\n    {date: '1902-01-01', series: 'A', y1: 106, y2: 132, y3: 103},\n    {date: '1902-01-01', series: 'B', y1: 209, y2: 282, y3: 227},\n    {date: '1902-01-01', series: 'C', y1: 384, y2: 367, y3: 312},\n    {date: '1903-01-01', series: 'A', y1: 108, y2: 130, y3: 105},\n    {date: '1903-01-01', series: 'B', y1: 296, y2: 274, y3: 259},\n    {date: '1903-01-01', series: 'C', y1: 330, y2: 301, y3: 338},\n    {date: '1904-01-01', series: 'A', y1: 109, y2: 128, y3: 102},\n    {date: '1904-01-01', series: 'B', y1: 280, y2: 266, y3: 293},\n    {date: '1904-01-01', series: 'C', y1: 332, y2: 342, y3: 343},\n    {date: '1905-01-01', series: 'A', y1: 111, y2: 124, y3: 101},\n    {date: '1905-01-01', series: 'B', y1: 218, y2: 288, y3: 204},\n    {date: '1905-01-01', series: 'C', y1: 318, y2: 375, y3: 313},\n    {date: '1907-01-01', series: 'A', y1: 133, y2: 131, y3: 100},\n    {date: '1907-01-01', series: 'B', y1: 285, y2: 259, y3: 229},\n    {date: '1907-01-01', series: 'C', y1: 334, y2: 390, y3: 372},\n    {date: '1908-01-01', series: 'A', y1: 142, y2: 128, y3: 99},\n    {date: '1908-01-01', series: 'B', y1: 257, y2: 219, y3: 235},\n    {date: '1908-01-01', series: 'C', y1: 350, y2: 388, y3: 364},\n    {date: '1909-01-01', series: 'A', y1: 156, y2: 135, y3: 97},\n    {date: '1909-01-01', series: 'B', y1: 228, y2: 275, y3: 299},\n    {date: '1909-01-01', series: 'C', y1: 321, y2: 352, y3: 359},\n    {date: '1910-01-01', series: 'A', y1: 168, y2: 137, y3: 95},\n    {date: '1910-01-01', series: 'B', y1: 212, y2: 216, y3: 270},\n    {date: '1910-01-01', series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Apple Income Statement Data with SQL for Sankey Diagram\nDESCRIPTION: SQL query that generates financial data for Apple's income statement to be visualized in a Sankey diagram. The query creates source-target pairs showing flow of revenue from products to profit with associated monetary values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect 'iphone' as source, 'product revenue' as target, 51 as amount_usd\nunion all\nselect 'mac' as source, 'product revenue' as target, 10 as amount_usd\nunion all\nselect 'ipad' as source, 'product revenue' as target, 8 as amount_usd\nunion all\nselect 'wearables and home' as source, 'product revenue' as target, 9 as amount_usd\nunion all\nselect 'services revenue' as source, 'revenue' as target, 20 as amount_usd\nunion all\nselect 'product revenue' as source, 'revenue' as target, 78 as amount_usd\nunion all\nselect 'revenue' as source, 'gross profit' as target, 43 as amount_usd\nunion all\nselect 'gross profit' as source, 'operating profit' as target, 30 as amount_usd\nunion all\nselect 'gross profit' as source, 'operating expenses' as target, 13 as amount_usd\nunion all\nselect 'revenue' as source, 'cost of revenue' as target, 55 as amount_usd\n```\n\n----------------------------------------\n\nTITLE: Svelte Checkbox Binding\nDESCRIPTION: This Svelte code creates a checkbox input element and binds its 'checked' state to the 'open' variable.  This allows the checkbox state to directly update the 'open' variable and vice versa, enabling interactive control of other components based on the checkbox state.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/fullscreen.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n\"<input type=\\\"checkbox\\\" id=\\\"open\\\" bind:checked={open} />\"\n```\n\n----------------------------------------\n\nTITLE: Declaring First Partial Template in Evidence Framework\nDESCRIPTION: A minimal partial template declaration for the Evidence framework. This serves as a placeholder or starting point for defining a reusable component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/partials/docs.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This is my first partial\n```\n\n----------------------------------------\n\nTITLE: Defining Downloadable Data Property - JSX\nDESCRIPTION: Indicates whether to show a download button that allows users to download the chart data. This enhances user interaction and data accessibility.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=\"downloadableData\"\n    description=\"Whether to show the download button to allow users to download the data\"\n    required=false\n    options={['true', 'false']}\n    defaultValue=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Install Evidence with dbt\nDESCRIPTION: These commands install Evidence inside a dbt project within a folder called `reports`. They use npm to install dependencies, generate source files, and start the development server, with the prefix option to specify the `reports` directory.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/install-evidence/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd path/to/your/dbt/project\nnpx degit evidence-dev/template reports\nnpm --prefix ./reports install\nnpm --prefix ./reports run sources\nnpm --prefix ./reports run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logo to Evidence Default Layout\nDESCRIPTION: Example showing how to add a custom logo to the Evidence default layout by specifying the logo property pointing to an image in the static directory.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/layouts/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<EvidenceDefaultLayout {data} logo=\"/my-logo.png\" >\n\t<slot slot=\"content\" />\n</EvidenceDefaultLayout>\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Range and Steps\nDESCRIPTION: Implements a slider with defined minimum, maximum and step values for month selection\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Slider\n    title=\"Months\" \n    name=monthsWithSteps\n    min=0\n    max=36\n    step=12\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Left-Aligned Image in Evidence\nDESCRIPTION: Example demonstrating how to display a left-aligned image with custom height using the Image component\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/image/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Image \n    url=\"https://raw.githubusercontent.com/evidence-dev/media-kit/refs/heads/main/png/wordmark-gray-800.png\"\n    description=\"Sample placeholder image\"\n    height=80\n    align=\"left\"\n/>\n```\n\n----------------------------------------\n\nTITLE: RunQuery Implementation Example\nDESCRIPTION: Example showing direct query execution using runQuery, including dynamic queries and state handling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/sdk/README.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { runQuery } from '$evidence/queries';\n\n\tconst myFirstQuery = runQuery('myFirstQuery', 'SELECT 1');\n\tmyFirstQuery.fetch();\n\n\tlet x = 0;\n\tlet dynamicQuery = runQuery('dynamicQuery', `SELECT ${x}`);\n\t$: dynamicQuery = runQuery('dynamicQuery', `SELECT ${x}`);\n\t$: dynamicQuery.fetch();\n</script>\n\n{#if !$myFirstQuery.loaded}\n\tLoading...\n{:else if $myFirstQuery.error}\n\tError: {$myFirstQuery.error.message}\n{:else}\n\t{#each $myFirstQuery as row (row.id)}\n\t\tRow ID: {row.id}\n\t{:else}\n\t\tNo resuls available\n\t{/each}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Executing Selected Items Within Date Range Query\nDESCRIPTION: This complex query fetches records from the orders table where the item matches user-selected values and the order date falls within a specified range. It combines multi-parameter filtering for refined data retrieval.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown.md#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM orders \nWHERE \titem in ${inputs.item.value} \n\tAND order_datetime BETWEEN '${inputs.range.start}' \n\tAND '${inputs.range.end}' \nlimit 100\n```\n\n----------------------------------------\n\nTITLE: Querying Order Data from Needful Things Database in SQL\nDESCRIPTION: SQL query that selects email, item, and sales data from the orders table in the needful_things schema. The query is limited to 1000 records and is named 'orders' for reference in the Evidence project.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/slider.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n    email, item, sales\nFROM \n    needful_things.orders limit 1000\n```\n\n----------------------------------------\n\nTITLE: DateRange Component Visible During Print/Export\nDESCRIPTION: Shows how to configure a date range picker to remain visible when printing or exporting the report by setting the hideDuringPrint option to false.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange\n    name=date_range_visible_during_print\n    data={orders_by_day}\n    dates=day\n    hideDuringPrint={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure\nDESCRIPTION: This HTML snippet outlines the structure of a simple web page, including a title, heading, and two paragraphs, demonstrating the use of basic HTML elements.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<head>\n\t<title>My Page</title>\n</head>\n<body>\n\t<h1>My Page</h1>\n\t<p>This is my page.</p>\n\t<!-- a really long line of code-->\n\t<p>Here is another paragraph. It is really long and will need scroll if possible.</p>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Grouped BarChart Example with Missing Y Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a grouped bar chart using the `missingY` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, sets the type to grouped, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_31\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingY} series=fed_reserve_district type=grouped x=established_date title={titles[1]}/>\n```\n\n----------------------------------------\n\nTITLE: Setting Percentage-Only Link Labels in Sankey Diagram with Svelte\nDESCRIPTION: Svelte code that configures a Sankey diagram to display only percentage values on link labels. This example requires the percentCol property to show the flow percentages between nodes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  valueFmt=usd\n  linkLabels=percent\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Timestamp_ltz Data in Snowflake\nDESCRIPTION: Creates a sample dataset using Snowflake's TIMESTAMP_LTZ (Local Time Zone) type. Shows how to work with timestamps that are automatically converted to the session's local timezone.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/snowflake-dates/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n        to_timestamp_ltz('2020-04-22') as timestamp_ltz,\n        100 as sales_usd\nunion all\nselect\n        to_timestamp_ltz('2020-04-23') as timestamp_ltz,\n        110 as sales_usd\nunion all\nselect\n        to_timestamp_ltz('2020-04-24') as timestamp_ltz,\n        120 as sales_usd\nunion all\nselect\n        to_timestamp_ltz('2020-04-25') as timestamp_ltz,\n        140 as sales_usd\n```\n\n----------------------------------------\n\nTITLE: Querying Post Tags\nDESCRIPTION: This SQL query retrieves all data from the `post_tags` table. This table is later used to filter data based on the selected values from the dropdown components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-basic-usage.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```sql post_count_by_tag\nSELECT * FROM post_tags\n```\n```\n\n----------------------------------------\n\nTITLE: Components Page Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the Components documentation page, setting the title, sidebar position, and sidebar link visibility.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Components\"\nsidebar_position: 2\nsidebar_link: false\n---\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styling to Note Component in Markdown\nDESCRIPTION: This example shows how to apply custom styling to the Note component using Tailwind classes. The 'text-negative' class is used to customize the appearance.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/note/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Note class=\"text-negative\">\n    This is a custom-styled note.\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Configuring Trino Connection in Evidence YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up a Trino connection in an Evidence project. It includes the necessary parameters such as host, port, catalog, schema, and authentication details.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/trino/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  my_trino_source:\n    type: trino\n    host: your-trino-host.com\n    port: 443\n    catalog: your_catalog\n    schema: your_schema\n    username: your_username\n    password: ${TRINO_PASSWORD}\n    # optional parameters\n    ssl: true\n    timezone: America/New_York\n```\n\n----------------------------------------\n\nTITLE: Using Code Blocks for R in Markdown\nDESCRIPTION: Shows how to display R code in a non-executable code block using the r language identifier.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_9\n\nLANGUAGE: r\nCODE:\n```\nnames <- c(\"Alice\", \"Bob\", \"Charlie\")\n\nfor (name in names) {\n    print(paste(\"Hello, \", name))\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Missing Close Bracket Error in SQL\nDESCRIPTION: Shows an example of a syntax error where the closing bracket is missing in a reference.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    n_days / 365 as approx_years\nfrom ${working_reference\n```\n\n----------------------------------------\n\nTITLE: Styling Accordion with Custom Classes in Markdown\nDESCRIPTION: Demonstrates how to override default styles of the Accordion and AccordionItem components using custom CSS classes. This example applies rounded corners, background color, and removes borders.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/accordion/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Accordion class=\"rounded-xl bg-gray-50 px-4 mt-4\">\n  <AccordionItem title=\"Item 1\" class=\"border-none\">\n    <p>Content 1</p>\n  </AccordionItem>\n  <AccordionItem title=\"Item 2\" class=\"border-none\">\n    <p>Content 2</p>\n  </AccordionItem>\n  <AccordionItem title=\"Item 3\" class=\"border-none\">\n    <p>Content 3</p>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Svelte DataTable Component Configuration\nDESCRIPTION: Configures a responsive DataTable with dynamic columns, search functionality, and country-specific display options\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/initially-filtered-table/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<DataTable\n    data={filteredData}\n    search=true\n    rowShading=false\n    link=country_url\n>\n    <Column id=country title={`Country (${filteredData.length})`} />\n    <Column id=country_id align=center/>\n    <Column id=flag contentType=image height=40px  align=center />\n    <Column id=category align=center/>\n    <Column id=value_usd/>\n    <Column id=country_url contentType=link linkLabel=\"Details &rarr;\" title=\"Country Details\" align=right openInNewTab=true/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Linear Regression SQL Query\nDESCRIPTION: Complex SQL query that calculates linear regression coefficients and generates best fit line coordinates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nWITH \ncoeffs AS (\n    SELECT\n        regr_slope(num_orders, sales) AS slope,\n        regr_intercept(num_orders, sales) AS intercept,\n        regr_r2(num_orders, sales) AS r_squared\n    FROM ${orders_by_state}\n)\n\nSELECT \n    min(sales) AS x, \n    max(sales) AS x2, \n    min(sales) * slope + intercept AS y, \n    max(sales) * slope + intercept AS y2, \n    'Best Fit (y = ' || ROUND(slope, 2) || 'x + ' || ROUND(intercept, 2) || ', R^2 = ' || ROUND(r_squared, 3) || ')' AS label\nFROM coeffs, ${orders_by_state}\nGROUP BY slope, intercept, r_squared\n```\n\n----------------------------------------\n\nTITLE: Overriding Components from Other Plugins\nDESCRIPTION: This YAML configuration snippet demonstrates how to override components from other plugins in Evidence. It allows replacing built-in components with components from custom plugins.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/component-plugins/index.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    @evidence-dev/core-components: {}\n    @acme/charting:\n        overrides:\n            - LineChart\n```\n\n----------------------------------------\n\nTITLE: Horizontal BarChart Example with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal bar chart using the `xSync` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, and sets the title to \"X out of sync\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_23\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={xSync} x=established_date series=fed_reserve_district swapXY=true title=\"X out of sync\"/>\n```\n\n----------------------------------------\n\nTITLE: CSS Code Block Example\nDESCRIPTION: This CSS code snippet defines styles for a 'pre' element to display code blocks with scrollable overflow, a dark background, rounded corners, and a flex layout. The styles enhance the visual presentation and usability of code blocks within a webpage.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/markdown/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n```css\npre {\n\toverflow: scroll;\n\tbackground: #1f2937;\n\tborder-radius: 3px;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\tjustify-content: space-between;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Custom Axis Ranges in HTML\nDESCRIPTION: This snippet demonstrates how to create a scatter plot with custom minimum and maximum values for both x and y axes. It plots GDP against debt-to-GDP ratio for different countries, grouped by continent.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/scatter-plot/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ScatterPlot\ndata={countries}\nx=gdp_usd\ny=debt_to_gdp\ntooltipTitle=country\nseries=continent\nxMin=1000\nxMax=20000\nyMin=50\nyMax=200\n/>\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Title in HTML\nDESCRIPTION: Creates a ButtonGroup with a title, using data from a query. The selected value is stored in the 'second_category_name' input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/button-group/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ButtonGroup \n    data={categories} \n    name=second_category_name \n    value=category\n    title=\"Select a Category\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grouped BarChart with Missing X Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal grouped bar chart using the `missingX` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, enables swapping X and Y axes, sets the type to grouped, and sets the title to \"Missing X\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_37\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingX} series=fed_reserve_district x=established_date swapXY=true type=grouped title=\"Missing X\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Code Blocks for Python in Markdown\nDESCRIPTION: Shows how to display Python code in a non-executable code block using the python language identifier.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\n\nfor name in names:\n    print(\"Hello, \" + name)\n```\n\n----------------------------------------\n\nTITLE: Creating Headers in Markdown\nDESCRIPTION: Shows how to create headers of different levels (H1 through H6) using the hash symbol in markdown.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# H1 Header\n\n## H2 Header\n\n### H3 Header\n\n#### H4 Header\n\n##### H5 Header\n\n###### H6 Header\n```\n\n----------------------------------------\n\nTITLE: Importing Data Generation Function in Svelte\nDESCRIPTION: Imports the genSeries function from a utility module for generating test data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/test-charts.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    import {genSeries} from \"@evidence-dev/component-utilities/tests/getCompletedData.fixture\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for SQLite Adapter in JavaScript\nDESCRIPTION: This snippet imports necessary dependencies for the SQLite adapter, including better-sqlite3 for database operations, fs for file system access, and path for file path handling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/sqlite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Database from \"better-sqlite3\";\nimport fs from \"fs\";\nimport path from \"path\";\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grouped BarChart with Nulls Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal grouped bar chart using the `nulls` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, enables swapping X and Y axes, sets the type to grouped, and sets the title to \"Nulls\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_39\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={nulls} series=fed_reserve_district x=established_date swapXY=true type=grouped title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Calculating sum of sales with dynamic filtering in SQL\nDESCRIPTION: This SQL query calculates the sum of the 'sales' column from the 'orders' table, but filters the rows based on a dynamic threshold set by an input named 'randy'. The 'inputs.randy' value, likely controlled by a UI slider, is used to filter orders based on a random value generated for each row.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/orders/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT SUM(sales) as total FROM orders WHERE 100 * random() < ${inputs.randy}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving All User Data\nDESCRIPTION: SQL query that selects all columns and rows from the users table. This query is used to feed the DataTable component for displaying raw user data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/user-analytics.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users\n```\n\n----------------------------------------\n\nTITLE: Horizontal BarChart Example with Nulls Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal bar chart using the `nulls` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, and sets the title to \"Nulls\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_24\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={nulls} x=established_date series=fed_reserve_district swapXY=true title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Alert - HTML\nDESCRIPTION: This snippet describes a success alert with the status set to 'success', typically used to indicate positive outcomes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/alert/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Alert status=\"success\">\nThis is the successful alert\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Evidence in Codespaces\nDESCRIPTION: Commands to install dependencies and start an Evidence project in Codespaces with a host that allows external connections.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/packaging/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run sources\nnpm run dev -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset with Missing X Values\nDESCRIPTION: Defines a test dataset where an entire x-axis value (1903) is missing from the dataset. This tests how charts handle gaps in the x-axis while maintaining series continuity.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeriesMulty/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet missingX =\n[\n    {x: 1900, series: 'A', y1: 103, y2: 135, y3: 88},\n    {x: 1900, series: 'B', y1: 240, y2: 299, y3: 201},\n    {x: 1900, series: 'C', y1: 361, y2: 318, y3: 314},\n    {x: 1901, series: 'A', y1: 105, y2: 138, y3: 93},\n    {x: 1901, series: 'B', y1: 298, y2: 215, y3: 277},\n    {x: 1901, series: 'C', y1: 394, y2: 306, y3: 348},\n    {x: 1902, series: 'A', y1: 106, y2: 132, y3: 103},\n    {x: 1902, series: 'B', y1: 209, y2: 282, y3: 227},\n    {x: 1902, series: 'C', y1: 384, y2: 367, y3: 312},\n    {x: 1904, series: 'A', y1: 109, y2: 128, y3: 102},\n    {x: 1904, series: 'B', y1: 280, y2: 266, y3: 293},\n    {x: 1904, series: 'C', y1: 332, y2: 342, y3: 343},\n    {x: 1905, series: 'A', y1: 111, y2: 124, y3: 101},\n    {x: 1905, series: 'B', y1: 218, y2: 288, y3: 204},\n    {x: 1905, series: 'C', y1: 318, y2: 375, y3: 313},\n    {x: 1906, series: 'A', y1: 120, y2: 122, y3: 100},\n    {x: 1906, series: 'B', y1: 261, y2: 275, y3: 265},\n    {x: 1906, series: 'C', y1: 332, y2: 397, y3: 388},\n    {x: 1907, series: 'A', y1: 133, y2: 131, y3: 100},\n    {x: 1907, series: 'B', y1: 285, y2: 259, y3: 229},\n    {x: 1907, series: 'C', y1: 334, y2: 390, y3: 372},\n    {x: 1908, series: 'A', y1: 142, y2: 128, y3: 99},\n    {x: 1908, series: 'B', y1: 257, y2: 219, y3: 235},\n    {x: 1908, series: 'C', y1: 350, y2: 388, y3: 364},\n    {x: 1909, series: 'A', y1: 156, y2: 135, y3: 97},\n    {x: 1909, series: 'B', y1: 228, y2: 275, y3: 299},\n    {x: 1909, series: 'C', y1: 321, y2: 352, y3: 359},\n    {x: 1910, series: 'A', y1: 168, y2: 137, y3: 95},\n    {x: 1910, series: 'B', y1: 212, y2: 216, y3: 270},\n    {x: 1910, series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Using Info Component with Theme Color in Markdown\nDESCRIPTION: This example shows how to use the Info component with a theme color (primary) to style the tooltip icon.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/info/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nData was sourced from the World Bank <Info description=\"World Economic Indicators dataset from past 12 months\" color=\"primary\" />\n```\n\n----------------------------------------\n\nTITLE: Selecting all columns from orders table\nDESCRIPTION: This query attempts to select all columns from the 'orders' table. The language tag 'something' is not a standard language, so it's unclear how this snippet would be interpreted. The purpose is likely to be an incomplete or placeholder SQL statement.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/empty-codeblock.md#2025-04-21_snippet_1\n\nLANGUAGE: something\nCODE:\n```\n```something\nSELECT * FROM orders\n```\n```\n\n----------------------------------------\n\nTITLE: Svelte Dynamic Filtering Script\nDESCRIPTION: Implements reactive filtering of country data based on external input, allowing users to dynamically search and filter country records\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/initially-filtered-table/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet externalFilterValue = 'Bra';\nlet filteredData = [];\n$: externalFilterValue, (filteredData = tableq.filter(x => x.country.includes(externalFilterValue)))\n```\n\n----------------------------------------\n\nTITLE: Registering Component Plugins in evidence.config.yaml\nDESCRIPTION: This YAML snippet illustrates how to register installed component plugins in the Evidence configuration file. This registration enables the plugins for use within the app.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/component-plugins/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n    components: \n        @evidence-dev/core-components: {}\n        @acme/charting: {}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Theme Colors in HTML/CSS\nDESCRIPTION: Example of using a custom theme color in HTML/CSS classes. The color name should be converted to kebab-case when used in Tailwind classes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/tailwind/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"text-my-custom-color\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Order Counts by Item and Month\nDESCRIPTION: SQL query that aggregates order counts by product item and month name from the needful_things.orders table, using the monthname function to extract readable month names.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/heatmap/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect item, monthname(order_datetime) as month, count(1) as orders from needful_things.orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Querying Marketing Spend Data in SQL\nDESCRIPTION: Basic SQL query to select all records from the marketing_spend table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/query-store/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM marketing_spend\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Paragraphs in Markdown\nDESCRIPTION: Demonstrates how to create text paragraphs in markdown with proper spacing between paragraphs using blank lines.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThis is a paragraph. It can be as long as you want.\n\nAdd line breaks by leaving a blank line between paragraphs.\n```\n\n----------------------------------------\n\nTITLE: Text Input with Custom Placeholder\nDESCRIPTION: Shows how to add both a custom title and placeholder to a TextInput component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/text-input.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<TextInput name=another_search title=\"Freetext Search\" placeholder=\"Start typing\"/>\n\nInput: {inputs.another_search}  \nInput is set: {!inputs.another_search[Unset]}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group with Hardcoded Options and Default Value in Evidence\nDESCRIPTION: Demonstrates setting a default selected option in a hardcoded button group using the default property on a ButtonGroupItem.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/button-group/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<ButtonGroup name=hardcoded_options_default>\n    <ButtonGroupItem valueLabel=\"Option One\" value=\"1\" />\n    <ButtonGroupItem valueLabel=\"Option Two\" value=\"2\" default />\n    <ButtonGroupItem valueLabel=\"Option Three\" value=\"3\" />\n</ButtonGroup>\n\nSelected: {inputs.hardcoded_options_default}\n```\n\n----------------------------------------\n\nTITLE: Applying Text Styles in Markdown\nDESCRIPTION: Shows various text formatting options in markdown including bold, italic, strikethrough, and inline code formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**Bold** text is wrapped in double asterisks\n_Italic_ text is wrapped in single asterisks\n~~Strikethrough~~ text is wrapped in double tildes\n`Inline code` is wrapped in backticks\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Category with Dynamic Filtering in SQL\nDESCRIPTION: SQL query that retrieves monthly sales data grouped by category from the needful_things database. It uses dynamic parameters for category and year filtering, truncating dates to month level and calculating sum of sales. Results are grouped and ordered by sales amount.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/packaging/pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n      date_trunc('month', order_datetime) as month,\n      sum(sales) as sales_usd,\n      category\n  from needful_things.orders\n  where category like '${inputs.category.value}'\n  and date_part('year', order_datetime) like '${inputs.year.value}'\n  group by all\n  order by sales_usd desc\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Dataset for Bar Chart Visualization in SQL\nDESCRIPTION: This SQL query generates a sample dataset with country, value, and year columns for visualization purposes. It includes data for Canada, US, UK, and China from 1990 to 1996, useful for creating bar charts or histograms.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/histogram/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Canada' as country, 60 as value, 1990 as year\nunion all\nselect 'Canada' as country, 83 as value, 1991 as year\nunion all\nselect 'Canada' as country, 95 as value, 1992 as year\nunion all\nselect 'Canada' as country, 182 as value, 1993 as year\nunion all\nselect 'Canada' as country, 87 as value, 1994 as year\nunion all\nselect 'Canada' as country, 103 as value, 1995 as year\nunion all\nselect 'Canada' as country, 111 as value, 1996 as year\nunion all\nselect 'US' as country, 41 as value, 1990 as year\nunion all\nselect 'US' as country, 47 as value, 1991 as year\nunion all\nselect 'US' as country, 70 as value, 1992 as year\nunion all\nselect 'US' as country, 65 as value, 1993 as year\nunion all\nselect 'US' as country, 80 as value, 1994 as year\nunion all\nselect 'US' as country, 90 as value, 1995 as year\nunion all\nselect 'US' as country, 125 as value, 1996 as year\nunion all\nselect 'UK' as country, 61 as value, 1990 as year\nunion all\nselect 'UK' as country, 63 as value, 1991 as year\nunion all\nselect 'UK' as country, 68 as value, 1992 as year\nunion all\nselect 'UK' as country, 73 as value, 1993 as year\nunion all\nselect 'UK' as country, 80 as value, 1994 as year\nunion all\nselect 'UK' as country, 83 as value, 1995 as year\nunion all\nselect 'UK' as country, 85 as value, 1996 as year\nunion all\nselect 'China' as country, 30 as value, 1990 as year\nunion all\nselect 'China' as country, 33 as value, 1991 as year\nunion all\nselect 'China' as country, 40 as value, 1992 as year\nunion all\nselect 'China' as country, 52 as value, 1993 as year\nunion all\nselect 'China' as country, 65 as value, 1994 as year\nunion all\nselect 'China' as country, 78 as value, 1995 as year\nunion all\nselect 'China' as country, 101 as value, 1996 as year\n```\n\n----------------------------------------\n\nTITLE: Querying Blog Posts in SQL\nDESCRIPTION: The SQL snippet is used to select all records from the mocks.blog_posts table. Prerequisites include having a database set up with a table named blog_posts under the mocks schema. No parameters are required, and the output will include all columns and rows from the blog_posts table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/search-very-long.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM mocks.blog_posts\n```\n\n----------------------------------------\n\nTITLE: Horizontal Stacked BarChart with Full Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal 100% stacked bar chart using the `full` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, sets the title to \"Full Data\", disables sorting, and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_25\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={full} x=established_date series=fed_reserve_district swapXY=true title=\"Full Data\" sort=false type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Expanding Order Data for Visualization\nDESCRIPTION: SQL query that takes the orders dataset and creates an expanded version by adding additional categories with '_x' and '_w' suffixes, allowing for more complex heatmap visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/heatmap/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${orders}\nunion all\nselect concat(category,'_x') as category, day, day_num, order_count from ${orders}\nunion all\nselect concat(category,'_w') as category, day, day_num, order_count from ${orders}\n```\n\n----------------------------------------\n\nTITLE: Rendering Various Chart Types with Series Data in Evidence Framework\nDESCRIPTION: Demonstrates the use of Evidence's charting components to render multiple chart types (Line, Area, Bar, Scatter, Bubble) with three data scenarios: full data, missing data points, and data with null values. The charts are grouped by type and showcase different configurations including stacked, grouped, and horizontal orientations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/stringSeriesMulty/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Series Column with String X Axis</h1>\n<h2>Line Chart</h2>\n<LineChart data={full} series=series title=\"Full Data\"/>\n<LineChart data={missingY} series=series title=\"Missing Y\"/>\n<LineChart data={nulls}  series=series title=\"Nulls\"/>\n\n<h2>Area Chart</h2>\n<AreaChart data={full}  series=series title=\"Full Data\"/>\n<AreaChart data={missingY} series=series title=\"Missing Y\"/>\n<AreaChart data={nulls}  series=series title=\"Nulls\"/>\n\n<h2>100% Area Chart</h2>\n<AreaChart data={full}  series=series title=\"Full Data\" type=stacked100/>\n<AreaChart data={missingY} series=series title=\"Missing Y\" type=stacked100/>\n<AreaChart data={nulls}  series=series title=\"Nulls\" type=stacked100/>\n\n<h2>Stacked Bar Chart</h2>\n<BarChart data={full}  series=series title=\"Full Data\"/>\n<BarChart data={missingY} series=series title=\"Missing Y\"/>\n<BarChart data={nulls}  series=series title=\"Nulls\"/>\n\n<h2>100% Stacked Bar Chart</h2>\n<BarChart data={full}  series=series title=\"Full Data\" type=stacked100/>\n<BarChart data={missingY} series=series title=\"Missing Y\" type=stacked100/>\n<BarChart data={nulls}  series=series title=\"Nulls\" type=stacked100/>\n\n<h2>Horizontal Stacked Bar Chart</h2>\n<BarChart data={full}  swapXY=true series=series title=\"Full Data\" xType=value/>\n<BarChart data={missingY}  swapXY=true series=series title=\"Missing Y\"/>\n<BarChart data={nulls}  swapXY=true series=series title=\"Nulls\"/>\n\n<h2>100% Horizontal Stacked Bar Chart</h2>\n<BarChart data={full}  swapXY=true series=series title=\"Full Data\" xType=value type=stacked100/>\n<BarChart data={missingY}  swapXY=true series=series title=\"Missing Y\" type=stacked100/>\n<BarChart data={nulls}  swapXY=true series=series title=\"Nulls\" type=stacked100/>\n\n<h2>Grouped Bar Chart</h2>\n<BarChart data={full}  type=grouped series=series title=\"Full Data\"/>\n<BarChart data={missingY} type=grouped series=series title=\"Missing Y\"/>\n<BarChart data={nulls}  type=grouped series=series title=\"Nulls\"/>\n\n<h2>Horizontal Grouped Bar Chart</h2>\n<BarChart data={full}  swapXY=true type=grouped series=series title=\"Full Data\"/>\n<BarChart data={missingY}  swapXY=true type=grouped series=series title=\"Missing Y\"/>\n<BarChart data={nulls}  swapXY=true type=grouped series=series title=\"Nulls\"/>\n\n<h2>Scatter Plot</h2>\n<ScatterPlot data={full}  series=series title=\"Full Data\"/>\n<ScatterPlot data={missingY} series=series title=\"Missing Y\"/>\n<ScatterPlot data={nulls}  series=series title=\"Nulls\"/>\n\n<h2>Bubble Chart</h2>\n<BubbleChart data={full} size=y1 series=series title=\"Full Data\"/>\n<BubbleChart data={missingY}  size=y1 series=series title=\"Missing Y\" legend=true/>\n<BubbleChart data={nulls}  size=y1 series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Sidebar Settings in YAML\nDESCRIPTION: YAML configuration that disables the sidebar link for this page by setting sidebar_link to false.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/hierarchical nav/not-shown-in-sidebar/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsidebar_link: false\n```\n\n----------------------------------------\n\nTITLE: DownloadData Component with Custom Text\nDESCRIPTION: Implementation of the DownloadData component with a custom button text label.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/download-data/index.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<DownloadData data={categories} text=\"Click Here\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Database Credentials in Evidence\nDESCRIPTION: Example of setting environment variables for database credentials in an Evidence project. The variables use the format EVIDENCE_SOURCE__[source_name]__[variable_name].\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/cli/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nEVIDENCE_VAR__customer_name=\"Acme Corporation\"\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Evidence Packages via CLI\nDESCRIPTION: This bash command updates the Evidence application to the latest version using npm. It installs the latest versions of the '@evidence-dev/evidence' and '@evidence-dev/core-components' packages. Ensure npm is installed and configured properly before running this command.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/guides/updating-your-app/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @evidence-dev/evidence@latest @evidence-dev/core-components@latest\n```\n\n----------------------------------------\n\nTITLE: Tag Dropdown Component\nDESCRIPTION: JavaScript Dropdown component used for selecting hashtags based on SQL results. It filters tags correlated with user inputs and supports displaying all tags. It relies on 'user_tags' data availability.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/filter-deps.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Dropdown   data={user_tags} \n            value=\"tagId\" label=\"tag\"\n            title=\"Tag\" name=\"tag\"\n            where=\"userId = {inputs.user.value} OR {inputs.user.value} < 0\">\n    <DropdownOption value={-1} valueLabel=\"All Hashtags\" />\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Commented Out SQL Query with Text Input\nDESCRIPTION: A commented out example of how to use a text input to filter an SQL query. Currently not functional.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/text-input.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders \nWHERE category LIKE '%${inputs.search_input}'\n```\n\n----------------------------------------\n\nTITLE: CSV Source Configuration Options\nDESCRIPTION: SQL query demonstrating various DuckDB source options for CSV file handling, including header and delimiter configurations. The query creates a reference table of available options and their outcomes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/csv/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 'header=false' as \"Option String\", 'Reads the first line as the first row of data' as \"Outcome\", 0 as row_num UNION ALL\nselect 'delim=\"|\"', 'Use \"|\" characters as delimiters when reading the csv', 1 UNION ALL\nselect 'header=false,delim=\"|\"', 'Use both of these options', 2\norder by row_num\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Accordion in Markdown\nDESCRIPTION: Demonstrates how to create a basic accordion with multiple items using markdown syntax. Each AccordionItem can contain markdown content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/accordion/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Accordion>\n  <AccordionItem title=\"Item 1\">\n\n    This is the first item's accordion body.\n\n    You can use **markdown** here too!\n\n    Make sure to include an empty line after the component if you want to use markdown.\n\n  </AccordionItem>\n  <AccordionItem title=\"Item 2\">\n\n    This is the second item's accordion body with <b>bold text</b>.\n\n  </AccordionItem>\n  <AccordionItem title=\"Item 3\">\n\n    This is the third item's accordion body.\n\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Box Plot in JSX\nDESCRIPTION: This snippet shows how to create a horizontal box plot by adding the swapXY prop. It also includes a custom y-axis title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/box-plot/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BoxPlot \n    data={box}\n    name=experiment\n    midpoint=value\n    confidenceInterval=confidence\n    swapXY=true\n    yFmt='+0.0%;-0.0%;0'\n    yAxisTitle=\"Change vs. baseline\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring SPA Rendering Mode in package.json\nDESCRIPTION: Updating build and preview scripts in package.json to enable Single Page App rendering mode by setting the VITE_EVIDENCE_SPA environment variable\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/rendering-modes/index.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"build\": \"VITE_EVIDENCE_SPA=true evidence build\",\n\"preview\": \"VITE_EVIDENCE_SPA=true evidence preview\"\n```\n\n----------------------------------------\n\nTITLE: Querying ZIP Code Sales Data\nDESCRIPTION: SQL query to fetch ZIP code sales data, excluding ZIP code 90704. It also creates a Google search link for each ZIP code.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *, 'https://www.google.com/search?q=' || zip_code as link_col from la_zip_sales\nwhere zip_code <> 90704\n```\n\n----------------------------------------\n\nTITLE: Querying Orders by Month and Category in SQL\nDESCRIPTION: SQL queries to fetch orders data grouped by month and category. These queries are referenced in the markdown content for data visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/print-components/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\norders_by_month: orders_by_month.sql\norders_by_category: orders_by_category.sql\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders for AreaChart - React\nDESCRIPTION: This snippet filters the 'orders_by_category' dataset similarly to the previous snippet but uses the filtered data to render an AreaChart component, plotting 'month' on the x-axis and 'sales_usd0k' on the y-axis. This visualization is aimed at displaying sales trends over time by category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/templated-pages/[category]/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<AreaChart \n\tdata={orders_by_category.filter(d => d.category?.toLowerCase() === $page.params.category?.toLowerCase())}\n\tx=month\n\ty=sales_usd0k\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with Custom Size in Evidence\nDESCRIPTION: Example showing how to display an image with a custom height of 80 pixels using the Image component\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/image/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Image \n    url=\"https://raw.githubusercontent.com/evidence-dev/media-kit/refs/heads/main/png/wordmark-gray-800.png\"\n    description=\"Sample placeholder image\"\n    height=80\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider UI Component in Evidence JSX\nDESCRIPTION: JSX code that creates a slider UI component with the title 'Months'. The slider allows values from 0 to 36 with steps of 12, and assigns the selected value to a variable named 'monthsWithSteps'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/slider.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Slider\n    title=\"Months\" \n    name=monthsWithSteps\n    min=0\n    max=36\n    step=12\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Alert - HTML\nDESCRIPTION: This snippet represents a warning alert with the status set to 'warning', intended to caution the user about potential issues.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/alert/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Alert status=\"warning\">\nThis is the warning alert\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: 3-Column Grid Bar Chart Layout\nDESCRIPTION: Creates a grid with 3 columns, displaying multiple bar charts using the same data source and configuration\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/grid/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: evidence\nCODE:\n```\n<Grid cols=3>\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Category\n/>\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Category\n/>\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Category\n/>\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Category\n/>\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Category\n/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregate Query with SQL\nDESCRIPTION: This SQL snippet aggregates sales data by month and category from the orders table. It calculates the total sales and number of orders for each category per month.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    date_trunc('month', order_datetime) as month,\n    category,\n    sum(sales) as sales_usd0k,\n    count(sales) as num_orders_num0\nfrom needful_things.orders\ngroup by month, category\norder by month, sales_usd0k desc\n```\n\n----------------------------------------\n\nTITLE: Creating a New MySQL Source in Evidence - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new MySQL data source in the Evidence framework. The snippet defines the MySQL source with a specified name, allowing the Evidence application to interface with the MySQL database for querying purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/mysql/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<NewSource sourceName=\\\"MySQL\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Title Property - JSX\nDESCRIPTION: Defines the title property for the chart, which appears at the top left of the chart. It is a string value and is used to provide context to the users regarding what the chart represents.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=title\n    description=\"Chart title. Appears at top left of chart.\"\n    options=\"string\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Stacked BarChart Example with Missing X Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a stacked 100% bar chart using the `missingX` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, a dynamic title, and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_17\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingX} series=fed_reserve_district x=established_date title={titles[2]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Selecting Categories from Orders - SQL\nDESCRIPTION: This SQL snippet retrieves distinct category names from the 'orders' table, converting them to lowercase for case-insensitive comparisons.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/categories/[category]/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT lower(category) as category FROM needful_things.orders\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Evidence Source Queries\nDESCRIPTION: Example of using environment variables in Evidence source queries. Variables are accessed using ${variable_name} syntax and must be prefixed with EVIDENCE_VAR__ in the environment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/cli/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect *\nfrom orders\nwhere customer_name = '${customer_name}'\n```\n\n----------------------------------------\n\nTITLE: Filtering Post Tags by Hashtag ID (Single Select, No Default)\nDESCRIPTION: This SQL query filters the `post_count_by_tag` table based on the value selected in the 'single_no_default' dropdown. It uses template literals to dynamically insert the selected value into the WHERE clause.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-basic-usage.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n```sql q_single_no_default\nSELECT * FROM ${post_count_by_tag} WHERE hashtag_id = ${inputs.single_no_default.value}\n```\n```\n\n----------------------------------------\n\nTITLE: Using PrintGroup with Hidden Property\nDESCRIPTION: Shows how to hide specific content during printing using PrintGroup's hidden property while maintaining visibility in the UI.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/print-format-components/index.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nThe purple line chart will be hidden on print\n\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n/>\n\n<PrintGroup hidden=true>\n    <LineChart \n        data={orders_by_month} \n        x=month\n        y=sales_usd0k \n        lineColor=purple\n    />\n</PrintGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Evidence in Codespaces\nDESCRIPTION: Commands to install dependencies and start Evidence development server in Codespaces environment with host binding for remote access.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run sources\nnpm run dev -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Generating Nested Test Cases for Chart Components in Svelte\nDESCRIPTION: Creates a nested structure to test various chart types with different data configurations. It iterates through combinations of x-axis types, gaps, nulls, and series existence to generate comprehensive test cases.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/test-charts.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Accordion>\n{#each ['number', 'date', 'category'] as xType}\n{#each [true, false] as xHasGaps}\n{#each [true, false] as yHasNulls}\n{#each [true, false] as seriesAlwaysExists}\n{@const opts = {xHasGaps, yHasNulls, seriesAlwaysExists, maxSeriesCount: 2, minSeriesLen: 50, maxSeriesLen: 50, maxInterval: 1, maxOffset: 0, xType}}\n{@const label = Object.entries(opts).map(kv => kv.join('=')).join(', ')}\n<AccordionItem title={label}>\n\n                    {@const data = genSeries(opts)}\n                    <DataTable data={data.data}/>\n                    {#each ['zero', 'connect', 'gap'] as handleMissing}\n\n                        <h3 class=\"markdown\">{Object.entries({handleMissing}).map(kv => kv.join(\"=\")).join(\", \")}</h3>\n\n                        <Accordion>\n                            <AccordionItem title=\"Line Charts\">\n\n                                With Series\n                                <LineChart data={data.data} series=\"series\" y={data.keys.y} x={data.keys.x} {handleMissing}/>\n                                Without Series\n                                <LineChart data={data.data} y={data.keys.y} x={data.keys.x} {handleMissing}/>\n                            </AccordionItem>\n\n\n                            <AccordionItem title=\"Area Charts\">\n                                With Series\n                                <AreaChart data={data.data} series=\"series\" y={data.keys.y} x={data.keys.x} {handleMissing}/>\n                                Without Series\n                                <AreaChart data={data.data} y={data.keys.y} x={data.keys.x} {handleMissing}/>\n                            </AccordionItem>\n\n                            <AccordionItem title=\"Bar Charts\">\n                                With Series\n                                <BarChart data={data.data} series=\"series\" y={data.keys.y} x={data.keys.x} {handleMissing}/>\n                                Without Series\n                                <BarChart data={data.data} y={data.keys.y} x={data.keys.x} {handleMissing}/>\n                            </AccordionItem>\n                        </Accordion>\n\n\n                {/each}\n            </AccordionItem>\n            {/each}\n        {/each}\n    {/each}\n\n{/each}\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Implementation in Markdown\nDESCRIPTION: Shows basic implementation of a Modal component with title and button text properties to display Lorem ipsum content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/modal/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Modal title=\"Title\" buttonText='Open Modal'> \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with gcloud CLI for BigQuery in Bash\nDESCRIPTION: This command uses the gcloud CLI to log in and authenticate for BigQuery access. It stores credentials that Evidence will use to connect to BigQuery. This method is only available for local development as it requires browser access.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/bigquery/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Querying Weekly Ecommerce Orders with SQL and Inputs\nDESCRIPTION: This SQL query aggregates data from 'ecommerce.order_items' on a weekly basis and counts orders, filtered by a selected dimension. The query uses the `date_trunc` function and an input parameter `inputs.selected_dimensions` to filter the data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/dimension-grid/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```weekly_ecommerce_orders\n\nselect  \ndate_trunc('week', InvoiceDate),\ncount(*) filter(${inputs.selected_dimensions}) as selected_orders\nfrom ecommerce.order_items\ngroup by all \n\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Component Plugins using npm\nDESCRIPTION: This snippet demonstrates how to install the @acme/charting component plugin using npm. It is a prerequisite for using the plugin within the Evidence app.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/component-plugins/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @acme/charting\n```\n\n----------------------------------------\n\nTITLE: Displaying Danger Alert - HTML\nDESCRIPTION: This snippet illustrates a danger alert with the status set to 'danger', used to communicate serious problems.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/alert/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Alert status=\"danger\">\nThis is the dangerous alert\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Overriding Colors with Same Value for Light/Dark Mode in Evidence\nDESCRIPTION: YAML configuration demonstrating how to override color tokens with the same value for both light and dark modes, providing a simplified approach to theming.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n\tcolors:\n\t\tprimary: \"#ef4444\"\n\t\taccent: \"#a855f7\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Evidence Project Using CLI\nDESCRIPTION: CLI commands to create a new Evidence project from a template, install dependencies, and start the development server. This process involves using degit to clone the template, changing into the project directory, and running npm commands.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/prerender/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: SSR Hook Configuration\nDESCRIPTION: Server-side rendering hook setup for Evidence SDK with query preprocessing support.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/sdk/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ssrHook } from '$evidence/ssrHook.svelte.js';\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\t/** @type {{ name: string, queryString: string}[]} */\n\tconst presentQueries = [];\n\tconst response = await resolve(event, {\n\t\ttransformPageChunk: ssrHook(presentQueries)\n\t});\n\treturn response;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Integer Dataset for Histogram in SQL\nDESCRIPTION: This SQL query creates a simple dataset with a single column of integer values for basic histogram visualization. It contains repeated values (1, 2, and 3) that can be used to demonstrate frequency distribution in a histogram.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/histogram/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 1 as measure\nunion all\nselect 1 as measure\nunion all\nselect 1 as measure\nunion all\nselect 1 as measure\nunion all\nselect 1 as measure\nunion all\nselect 1 as measure\nunion all\nselect 2 as measure\nunion all\nselect 2 as measure\nunion all\nselect 2 as measure\nunion all\nselect 2 as measure\nunion all\nselect 2 as measure\nunion all\nselect 2 as measure\nunion all\nselect 3 as measure\n```\n\n----------------------------------------\n\nTITLE: Displaying Advanced Color Tokens with SQL in Evidence\nDESCRIPTION: SQL query that generates a list of advanced color tokens used in Evidence, including their usage locations and default values. This creates HTML spans for visual representation of these advanced tokens.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect '<span class=\"p-0.5 rounded-xs font-semibold bg-primary text-primary-content\">primary-content</span>' as 'color', 'Text color used on top of a primary background' as 'where-its-used', 'A readable shade of primary' as default union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold bg-accent text-accent-content\">accent-content</span>', 'Text color used on top of an accent background', 'A readable shade of accent' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold bg-base-100\">base-100</span>', 'Page background color', 'Alias of `base`' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold bg-base-200\">base-200</span>', 'Secondary page background color', 'A shade of base-100' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold bg-base-300\">base-300</span>', 'Tertiary page background color', 'A shade of base-100' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold text-base-content-muted\">base-content-muted</span>', 'Muted text color', 'A shade of base-100' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold text-base-content\">base-content</span>', 'Body text color', 'A shade of base-100' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold text-base-heading\">base-heading</span>', 'Header text color', 'A shade of base-100' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold bg-info text-info-content\">info-content</span>', 'Text color used on top of an info background', 'A readable shade of info' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold bg-positive text-positive-content\">positive-content</span>', 'Text color used on top of a positive background', 'A readable shade of positive' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold bg-warning text-warning-content\">warning-content</span>', 'Text color used on top of a warning background', 'A readable shade of warning' union all\n\tselect '<span class=\"p-0.5 rounded-xs font-semibold bg-negative text-negative-content\">negative-content</span>', 'Text color used on top of a negative background', 'A readable shade of negative'\n```\n\n----------------------------------------\n\nTITLE: Overriding Colors with Different Light/Dark Mode Values in Evidence\nDESCRIPTION: YAML configuration showing how to override color tokens with different values for light and dark modes. This allows for mode-specific color schemes in an Evidence project.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n\tcolors:\n\t\tprimary:\n\t\t\tlight: \"#dc2626\"\n\t\t\tdark: \"#f87171\"\n\t\taccent:\n\t\t\tlight: \"#7c3aed\"\n\t\t\tdark: \"#a78bfa\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Numbered List with Value Components in Svelte\nDESCRIPTION: Generates a numbered list where each item displays a price using the Value component. The list shows the index number (starting from 1) followed by the price value in a more compact format than BigValue.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/single-value.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<ul>\n{#each datas as row, i}\n\t<li>\n\t\t{i+1}: <Value data={row} value=\"price\" />\n\t</li>\n{/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Querying orders table with limit in SQL\nDESCRIPTION: This SQL query selects all columns from the 'orders' table, creates a 'link' column by concatenating '/orders/' with the 'id', and limits the result to the first 20 rows. It's used to fetch a limited number of orders for display, with each order having a generated link.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/orders/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT *, '/orders/' || id as link FROM orders LIMIT 20\"\n```\n\n----------------------------------------\n\nTITLE: Using LineBreak Component in HTML\nDESCRIPTION: Demonstrates how to insert line breaks in both UI and print views using the LineBreak component. Supports multiple line breaks through the 'lines' prop.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/print-format-components/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nText on original line <LineBreak/> Text on new line\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders by Category and Date Range - SQL\nDESCRIPTION: This SQL snippet selects all orders that match a specific category and fall within a designated date range. It uses parameters for category and date inputs, with a limit of 1000 records returned.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/categories/[category]/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders WHERE lower(category) = lower('${params.category}') AND order_month BETWEEN '${inputs.range.start}'::DATE AND '${inputs.range.end}'::DATE - INTERVAL 7 DAY\nlimit 1000\n```\n\n----------------------------------------\n\nTITLE: Creating a New Evidence Project Using Degit\nDESCRIPTION: Command to create a new Evidence project from a template using degit. This is the first step in setting up a test environment for Evidence features.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit https://github.com/evidence-dev/template my-tests\ncd my-tests\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart with Total Label Disabled in Evidence\nDESCRIPTION: A stacked bar chart with value labels for individual segments but with the total stack value label turned off using the stackTotalLabel property.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021} \n    x=month \n    y=sales_usd0k \n    series=category\n    labels=true\n    stackTotalLabel=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path in Evidence YAML\nDESCRIPTION: This YAML snippet sets the base path for an Evidence app, which dictates where the app is served from within a subdirectory. The basePath should start with a '/' and not end with one. It requires an 'evidence.config.yaml' file at the project's root directory.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/base-paths/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndeployment:\n  basePath: /my-base-path\n```\n\n----------------------------------------\n\nTITLE: User Dropdown Component\nDESCRIPTION: A JavaScript component rendering a Dropdown menu for selecting users based on SQL query data. It filters users by tag ids, allows displaying all users, and requires the 'user_tags' data object as input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/filter-deps.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Dropdown   data={user_tags} \n            value=\"userId\" label=\"user_name\" \n            title=\"User\" name=\"user\" \n            where=\"tagId = {inputs.tag.value} OR {inputs.tag.value} < 0\">\n    <DropdownOption value={-1} valueLabel=\"All Users\" />\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Rendering LinkButton Component in Evidence-dev Project\nDESCRIPTION: This code snippet demonstrates the usage of a custom LinkButton component in an Evidence-dev project. The component creates a clickable link to navigate to 'page-a' within the project structure.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/link-button.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<LinkButton url=/page-a>Go to page a</LinkButton>\n```\n\n----------------------------------------\n\nTITLE: Link Component Opening in a New Tab\nDESCRIPTION: This snippet demonstrates how to configure the Link component to open in a new tab by setting the newTab parameter to true.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/link/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Link \n    url=\"https://github.com/evidence-dev/evidence\"\n    label=\"Visit Example\"\n    newTab=true\n/>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n<Link \n    url=\"https://github.com/evidence-dev/evidence\"\n    label=\"Visit Example\"\n    newTab=true\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Warning Alert for Snowflake Column Name Casing\nDESCRIPTION: This snippet displays a warning alert informing users that all column names in Snowflake will be converted to lowercase in Evidence. It enhances user awareness about naming conventions when using the platform.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/snowflake/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Alert status=\"warning\">\n\n**Column name casing**<br>\nAll Snowflake column names are converted to lowercase in Evidence.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Counting Months from Previous Query in SQL\nDESCRIPTION: Counts the number of unique months from the result of the 'orders_by_category' query using a reference.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect count(*) as n_months from ${orders_by_category}\n```\n\n----------------------------------------\n\nTITLE: Querying Country Data with SQL\nDESCRIPTION: This SQL query retrieves data about various countries, including their continent, GDP, growth rate, interest rate, inflation rate, jobless rate, government budget, debt-to-GDP ratio, current account, and population. The query uses UNION ALL to combine data for multiple countries into a single result set.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/total-rows/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT 'United States' as country, 'North America' as continent, 22996 as gdp_usd, 0.017 as gdp_growth, 0.025 as interest_rate, 0.085 as inflation_rate, 0.037 as jobless_rate, -16.7 as gov_budget, 137.2 as debt_to_gdp, -3.6 as current_account, 332.4 as population\nUNION ALL\nSELECT 'China', 'Asia', 17734, 0.004, 0.0365, 0.027, 0.054, -3.7, 66.8, 1.8, 1412.6\nUNION ALL\nSELECT 'Japan', 'Asia', 4937, 0.002, -0.001, 0.026, 0.026, -12.6, 266.2, 3.2, 125.31\nUNION ALL\nSELECT 'Germany', 'Europe', 4223, 0.017, 0.005, 0.079, 0.055, -3.7, 69.3, 7.4, 83.16\nUNION ALL\nSELECT 'United Kingdom', 'Europe', 3187, 0.029, 0.0175, 0.101, 0.038, -6, 95.9, -2.6, 67.53\nUNION ALL\nSELECT 'India', 'Asia', 3173, 0.135, 0.054, 0.0671, 0.078, -9.4, 73.95, -1.7, 1380\nUNION ALL\nSELECT 'France', 'Europe', 2937, 0.042, 0.005, 0.058, 0.074, -6.5, 112.9, 0.4, 67.63\nUNION ALL\nSELECT 'Italy', 'Europe', 2100, 0.047, 0.005, 0.084, 0.079, -7.2, 150.8, 2.5, 59.24\nUNION ALL\nSELECT 'Canada', 'North America', 1991, 0.029, 0.025, 0.076, 0.049, -4.7, 117.8, 0.1, 38.44\nUNION ALL\nSELECT 'South Korea', 'Asia', 1799, 0.029, 0.025, 0.057, 0.029, -6.1, 42.6, 3.5, 51.74\nUNION ALL\nSELECT 'Russia', 'Europe', 1776, -0.04, 0.08, 0.151, 0.039, 0.8, 18.2, 6.8, 145.55\nUNION ALL\nSELECT 'Brazil', 'South America', 1609, 0.032, 0.1375, 0.1007, 0.091, -4.5, 80.27, -1.8, 213.32\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Missing Reference Error in SQL\nDESCRIPTION: Shows an example of a query with a missing reference, which would result in an error.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    count(*) as n_days\nfrom ${}\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Default Value in HTML\nDESCRIPTION: Creates a ButtonGroup with hardcoded options and a default value set to the first option. The selected value is stored in the 'default_value_input' input.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/button-group/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ButtonGroup name=default_value_input>\n    <ButtonGroupItem valueLabel=\"Option One\" value=1 default/>\n    <ButtonGroupItem valueLabel=\"Option Two\" value=2 />\n    <ButtonGroupItem valueLabel=\"Option Three\" value=3 />\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Generic Svelte Component Libraries\nDESCRIPTION: This advanced YAML configuration snippet illustrates how to use Svelte component libraries that are not specifically Evidence plugins by documenting their components manually.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/component-plugins/index.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  @evidence-dev/core-components: {}\n  carbon-components-svelte:\n    provides:\n      - Button\n      - CodeSnippet\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Evidence Project in Codespaces\nDESCRIPTION: Commands to install dependencies and start the Evidence project in a Codespace environment. This includes installing packages, running sources, and starting the development server with host configuration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/prerender/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run sources\nnpm run dev -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Querying Orders\nDESCRIPTION: The SQL snippet retrieves all records from the \"orders\" table in the \"needful_things\" database.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/templated-pages/[category]/[item]/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from needful_things.orders\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Sales Data by Category and Day\nDESCRIPTION: SQL query that generates sample sales data with categories A and B across different days of the week, including day names and numeric values for proper sorting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/heatmap/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'A' as cat, 'Mon' as day_name, 1 as day_num, 100 as sales union all\nselect 'A' as cat, 'Thu' as day_name, 4 as day_num, 200 as sales union all\nselect 'A' as cat, 'Sat' as day_name, 6 as day_num, 400 as sales union all\nselect 'A' as cat, 'Tue' as day_name, 2 as day_num, 300 as sales union all\nselect 'A' as cat, 'Wed' as day_name, 3 as day_num, 200 as sales union all\nselect 'A' as cat, 'Fri' as day_name, 5 as day_num, 500 as sales union all\nselect 'B' as cat, 'Mon' as day_name, 1 as day_num, 700 as sales union all\nselect 'B' as cat, 'Thu' as day_name, 4 as day_num, 200 as sales union all\nselect 'B' as cat, 'Sat' as day_name, 6 as day_num, 400 as sales union all\nselect 'B' as cat, 'Tue' as day_name, 2 as day_num, 100 as sales union all\nselect 'B' as cat, 'Wed' as day_name, 3 as day_num, 700 as sales union all\nselect 'B' as cat, 'Fri' as day_name, 5 as day_num, 400 as sales union all\nselect 'B' as cat, 'Sun' as day_name, 0 as day_num, 300 as sales\n```\n\n----------------------------------------\n\nTITLE: Using Custom Color in HTML Elements with Class and CSS Variables\nDESCRIPTION: Demonstrates two approaches for applying a custom color to div elements: using the bg-my-custom-color CSS class and using the --myCustomColor CSS variable in an inline style.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/themes/pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-testid=\"div-myCustomColor-class\" class=\"bg-my-custom-color\">\n\tdiv-myCustomColor-class\n</div>\n\n<div data-testid=\"div-myCustomColor-var\" style=\"background: var(--myCustomColor)\">\n\tdiv-myCustomColor-var\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Background Color to Tabs\nDESCRIPTION: Demonstrates how to add a background color to the active tab using the background attribute set to true.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/tabs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs background=true>\n    <Tab label=\"First Tab\">\n        Content of the First Tab\n    </Tab>\n    <Tab label=\"Second Tab\">\n        Content of the Second Tab\n    </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Rendering BigValue Components with Svelte Each Block\nDESCRIPTION: Iterates through the data array to render each price value as a BigValue component. BigValue is typically used for displaying prominent metrics or KPIs in a dashboard.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/single-value.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#each datas as row}\n\t<BigValue data={row} value=\"price\" />\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Values from Dropdowns\nDESCRIPTION: HTML paragraphs that show the selected labels from both single and multi-select dropdowns, demonstrating how to access and display these values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<p>\n    Multiselect: {inputs.vendor_multi.label}\n</p>\n\n<p>\n    Single Select: {inputs.vendor.label}\n</p>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Orders Data\nDESCRIPTION: SQL query that retrieves monthly order data for use in the chart example.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/modal/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect order_month, sum(sales) as sales_usd0k from needful_things.orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Setting Up Evidence Project Using CLI\nDESCRIPTION: Commands to create a new Evidence project from a template using the CLI. This includes downloading the template, installing dependencies, and starting the development server.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/hmr/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Tooltip Configuration in JavaScript\nDESCRIPTION: Example configuration for defining tooltip properties with customizable formatting, styling, and content types\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntooltip={[\n    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},\n    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},\n    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}\n]}\n```\n\n----------------------------------------\n\nTITLE: Organizing Project Structure for Static Files\nDESCRIPTION: Illustrates the project structure for storing static files like images in Evidence, with the static folder in the project root.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n+-- pages/\n|   `-- index.md\n`-- static/\n    `-- my-image.png\n```\n\n----------------------------------------\n\nTITLE: Configuration of Trust Server Certificate Option\nDESCRIPTION: This section describes the use of the `trustServerCertificate` option to enable encrypted connections while bypassing certificate trust validation. By default, this option is configured to disabled.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/mssql/index.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Selecting Data from Orders Table with SQL in Evidence\nDESCRIPTION: A SQL query that selects all columns from the orders table with a limit of 12 rows. This query is executed within Evidence.dev's SQL code block and the results are stored in the 'orders' variable for use in components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/value-in-toc.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders limit 12 \n```\n\n----------------------------------------\n\nTITLE: Azure Static Web App GitHub Actions Workflow Configuration\nDESCRIPTION: GitHub Actions workflow configuration for deploying Evidence project to Azure Static Apps with custom build and environment variable management\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/azure-static-apps/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Build And Deploy\n            id: builddeploy\n            uses: Azure/static-web-apps-deploy@v1\n            with:\n               ...\n               # Add this line\n               app_build_command: \"npm run sources && npm run build\" \n               ###### End of Repository/Build Configurations ######\n            env: \n               # Add and uncomment your environment variables here\n               # Note that GitHub capitalizes the names of secrets, but Evidence requires the casing to match your source and option names\n               # EVIDENCE_SOURCE__my_source__username: ${{ secrets.EVIDENCE_SOURCE__MY_SOURCE__USERNAME }}\n               # EVIDENCE_SOURCE__my_source__private_key: ${{ secrets.EVIDENCE_SOURCE__MY_SOURCE__PRIVATE_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Creating a table to showcase Button component variations\nDESCRIPTION: This Svelte code creates a table that iterates through the previously defined button configurations (variants, outline, sizes, and icons). For each combination, a row is generated in the table.  Each row displays the configuration settings and renders a Button component with the corresponding properties applied.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/button/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<table class=\"w-full border border-black\">\n    <tr>\n        <th class=\"pl-4 py-4\">Variant</th>\n        <th class=\"bg-gray-200\">Outlined</th>\n        <th>Size</th>\n        <th class=\"bg-gray-200\">Icon Position</th>\n        <th></th>\n    </tr>\n\n    {#each variants as variant}\n    {#each [false, true] as outline}\n    {#each sizes as size}\n    {#each icons as {iconPosition, icon}}\n    <tr class=\"odd:bg-gray-200 border border-gray-700 group text-center\">\n        <td class=\"pl-4 h-16\">{variant}</td>\n        <td class=\"group-odd:bg-gray-400 group-even:bg-gray-200\">{outline}</td>\n        <td>{size}</td>\n        <td class=\"group-odd:bg-gray-400 group-even:bg-gray-200\">{iconPosition}</td>\n        <td class=\"pr-4\"><div class=\"flex justify-center items-middle h-full\"><Button {size} {variant} {iconPosition} {icon} {outline}>Click Me!</Button></div></td>\n    </tr>\n    {/each}\n    {/each}\n    {/each}\n    {/each}\n</table>\n```\n\n----------------------------------------\n\nTITLE: Typescript Type Definition for Nested Options\nDESCRIPTION: Type definition showing the structure of nested configuration options with conditional SSL mode selection\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/create-source-plugin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ ssl: false } | { ssl: { sslmode: string } }\n```\n\n----------------------------------------\n\nTITLE: Rendering 100% Stacked Bar Charts in React\nDESCRIPTION: This snippet showcases 100% Stacked Bar Charts that represent the data proportionally for different scenarios, enhancing the analytical capability of the charts. Each BarChart is configured to evaluate different datasets.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<BarChart data={full}  series=series title=\"Full Data\" type=stacked100/>\n<BarChart data={missingX}  series=series title=\"Missing X\" type=stacked10/>\n<BarChart data={missingY} series=series title=\"Missing Y\" type=stacked10/>\n<BarChart data={nulls}  series=series title=\"Nulls\" type=stacked10/>\n```\n\n----------------------------------------\n\nTITLE: Hiding Sidebar in Evidence Default Layout\nDESCRIPTION: Example showing how to configure the EvidenceDefaultLayout to hide the sidebar on all pages by setting the hideSidebar property to true.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/layouts/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<EvidenceDefaultLayout {data} hideSidebar=true >\n\t<slot slot=\"content\" />\n</EvidenceDefaultLayout>\n```\n\n----------------------------------------\n\nTITLE: Sample Data Query for Country Sales\nDESCRIPTION: SQL query that generates sample data for country sales across multiple years. This data is used in the chart examples throughout the documentation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Canada' as country, 2020 as year, 100 as sales\nunion all\nselect 'Canada' as country, 2021 as year, 150 as sales\nunion all\nselect 'Canada' as country, 2022 as year, 200 as sales\nunion all\nselect 'Canada' as country, 2023 as year, 250 as sales\nunion all\nselect 'US' as country, 2020 as year, 200 as sales\nunion all\nselect 'US' as country, 2021 as year, 350 as sales\nunion all\nselect 'US' as country, 2022 as year, 400 as sales\nunion all\nselect 'US' as country, 2023 as year, 450 as sales\n```\n\n----------------------------------------\n\nTITLE: Embedding Images with HTML img Tag in Markdown\nDESCRIPTION: Shows how to embed an image using the HTML <img/> tag in markdown, specifying the source and alt text attributes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/images-and-links.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/twitter-card-black-bg.png\" alt=\"Twitter Card\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Evidence Pages with YAML Syntax\nDESCRIPTION: Example of frontmatter syntax for Evidence pages, enclosed by triple dashes. This demonstrates how to set page title, description, and social sharing metadata using YAML syntax.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/frontmatter/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Frontmatter in Evidence\ndescription: Here is a detailed description of the page that is typically up to 160 characters\nog:\n  title: Title for social\n  description: Description for social\n  image: /icon.svg\n---\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Evidence in Codespaces\nDESCRIPTION: Commands to install dependencies and start an Evidence project in Codespaces environment. Uses npm to install packages and run the development server with host configuration for Codespaces compatibility.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/spa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run sources\nnpm run dev -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Initializing US State Population Data in JavaScript\nDESCRIPTION: Defines a JavaScript array containing population data for all US states and territories. Each entry includes state name and population count.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/maps/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet demoData = [\n              { name: 'Alabama', population: 4822023 },\n              { name: 'Alaska', population: 731449 },\n              { name: 'Arizona', population: 6553255 },\n              { name: 'Arkansas', population: 2949131 },\n              { name: 'California', population: 38041430 },\n              { name: 'Colorado', population: 5187582 },\n              { name: 'Connecticut', population: 3590347 },\n              { name: 'Delaware', population: 917092 },\n              { name: 'District of Columbia', population: 632323 },\n              { name: 'Florida', population: 19317568 },\n              { name: 'Georgia', population: 9919945 },\n              { name: 'Hawaii', population: 1392313 },\n              { name: 'Idaho', population: 1595728 },\n              { name: 'Illinois', population: 12875255 },\n              { name: 'Indiana', population: 6537334 },\n              { name: 'Iowa', population: 3074186 },\n              { name: 'Kansas', population: 2885905 },\n              { name: 'Kentucky', population: 4380415 },\n              { name: 'Louisiana', population: 4601893 },\n              { name: 'Maine', population: 1329192 },\n              { name: 'Maryland', population: 5884563 },\n              { name: 'Massachusetts', population: 6646144 },\n              { name: 'Michigan', population: 9883360 },\n              { name: 'Minnesota', population: 5379139 },\n              { name: 'Mississippi', population: 2984926 },\n              { name: 'Missouri', population: 6021988 },\n              { name: 'Montana', population: 1005141 },\n              { name: 'Nebraska', population: 1855525 },\n              { name: 'Nevada', population: 2758931 },\n              { name: 'New Hampshire', population: 1320718 },\n              { name: 'New Jersey', population: 8864590 },\n              { name: 'New Mexico', population: 2085538 },\n              { name: 'New York', population: 19570261 },\n              { name: 'North Carolina', population: 9752073 },\n              { name: 'North Dakota', population: 699628 },\n              { name: 'Ohio', population: 11544225 },\n              { name: 'Oklahoma', population: 3814820 },\n              { name: 'Oregon', population: 3899353 },\n              { name: 'Pennsylvania', population: 12763536 },\n              { name: 'Rhode Island', population: 1050292 },\n              { name: 'South Carolina', population: 4723723 },\n              { name: 'South Dakota', population: 833354 },\n              { name: 'Tennessee', population: 6456243 },\n              { name: 'Texas', population: 26059203 },\n              { name: 'Utah', population: 2855287 },\n              { name: 'Vermont', population: 626011 },\n              { name: 'Virginia', population: 8185867 },\n              { name: 'Washington', population: 6897012 },\n              { name: 'West Virginia', population: 1855413 },\n              { name: 'Wisconsin', population: 5726398 },\n              { name: 'Wyoming', population: 576412 },\n              { name: 'Puerto Rico', population: 3667084 }\n            ]\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Connection in Evidence\nDESCRIPTION: This snippet demonstrates how to initialize a new SQLite data source in Evidence using the <NewSource> component. The 'sourceName' attribute specifies the name of the data source to be connected.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/sqlite/index.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<NewSource sourceName=\"SQLite\" />\n```\n\n----------------------------------------\n\nTITLE: Text Input with Default Value\nDESCRIPTION: Text input implementation with a pre-filled default value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/text-input/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<TextInput\n    name=name_of_input\n    title=\"Default Selected\"\n    defaultValue=\"Sporting\"\n/>\n\nSelected: {inputs.text_input4}\n```\n\n----------------------------------------\n\nTITLE: Rendering Big Link Component in Markdown\nDESCRIPTION: This snippet demonstrates how to use the BigLink component in Markdown to create a styled URL link. The component takes a 'url' prop and the link text as its content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/big-link/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<BigLink url='/components/ui/big-link'>My Big Link</BigLink>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Evidence in Codespaces\nDESCRIPTION: Commands to set up an Evidence project in GitHub Codespaces. Installs dependencies, runs the sources command, and starts the development server with host configuration for Codespaces.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/themes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run sources\nnpm run dev -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Full-width Slider Implementation\nDESCRIPTION: Demonstrates a full-width slider with custom range settings\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<Slider\n    title=\"Months Full\" \n    name=monthsFull\n    min=0\n    max=36\n    size=full\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Evidence Documentation Locally with PNPM\nDESCRIPTION: This command runs the Evidence documentation locally using PNPM. It should be executed from the root of the monorepo. The docs will typically run on localhost:3000, which may conflict with the default Evidence development port.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run docs\n```\n\n----------------------------------------\n\nTITLE: DateRange Component with Default Preset Value\nDESCRIPTION: Shows how to set a default preset value for the date range picker, which will be automatically selected when the component loads.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<DateRange\n    name=\"date_range_preset_3\"\n    defaultValue={'Last 7 Days'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Source Plugins with npm\nDESCRIPTION: Command to install a new data source plugin using npm. This example installs a hypothetical plugin for connecting to a new database type.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/source-plugins/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @cool-new-db/evidence-source-plugin\n```\n\n----------------------------------------\n\nTITLE: Querying Order Counts by Item and Channel\nDESCRIPTION: SQL query that counts orders grouped by product item and sales channel from the needful_things.orders table to visualize the relationship between products and sales channels.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/heatmap/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect item, channel, count(1) as orders from needful_things.orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Timestamp_tz Data in Snowflake\nDESCRIPTION: Creates a sample dataset with timezone-aware timestamps using Snowflake's TIMESTAMP_TZ type. Includes sales data with timestamps that maintain timezone information.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/snowflake-dates/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n        to_timestamp_tz('2020-04-22') as timestamp_tz,\n        100 as sales_usd\nunion all\nselect\n        to_timestamp_tz('2020-04-23') as timestamp_tz,\n        110 as sales_usd\nunion all\nselect\n        to_timestamp_tz('2020-04-24') as timestamp_tz,\n        120 as sales_usd\nunion all\nselect\n        to_timestamp_tz('2020-04-25') as timestamp_tz,\n        140 as sales_usd\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Data with Unsynchronized Dates in JavaScript\nDESCRIPTION: A dataset with a date inconsistency (series 'B' in 1905 has a different date than others) to test how visualizations handle non-aligned dates across series. This tests proper date handling and alignment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet xSync = \n[ // change B 1905 to Feb 12\n    {date: '1900-01-01', series: 'A', y1: 103, y2: 135, y3: 88},\n    {date: '1900-01-01', series: 'B', y1: 240, y2: 299, y3: 201},\n    {date: '1900-01-01', series: 'C', y1: 361, y2: 318, y3: 314},\n    {date: '1901-01-01', series: 'A', y1: 105, y2: 138, y3: 93},\n    {date: '1901-01-01', series: 'B', y1: 298, y2: 215, y3: 277},\n    {date: '1901-01-01', series: 'C', y1: 394, y2: 306, y3: 348},\n    {date: '1902-01-01', series: 'A', y1: 106, y2: 132, y3: 103},\n    {date: '1902-01-01', series: 'B', y1: 209, y2: 282, y3: 227},\n    {date: '1902-01-01', series: 'C', y1: 384, y2: 367, y3: 312},\n    {date: '1903-01-01', series: 'A', y1: 108, y2: 130, y3: 105},\n    {date: '1903-01-01', series: 'B', y1: 296, y2: 274, y3: 259},\n    {date: '1903-01-01', series: 'C', y1: 330, y2: 301, y3: 338},\n    {date: '1904-01-01', series: 'A', y1: 109, y2: 128, y3: 102},\n    {date: '1904-01-01', series: 'B', y1: 280, y2: 266, y3: 293},\n    {date: '1904-01-01', series: 'C', y1: 332, y2: 342, y3: 343},\n    {date: '1905-01-01', series: 'A', y1: 111, y2: 124, y3: 101},\n    {date: '1905-02-12', series: 'B', y1: 218, y2: 288, y3: 204},\n    {date: '1905-01-01', series: 'C', y1: 318, y2: 375, y3: 313},\n    {date: '1906-01-01', series: 'A', y1: 120, y2: 122, y3: 100},\n    {date: '1906-01-01', series: 'B', y1: 261, y2: 275, y3: 265},\n    {date: '1906-01-01', series: 'C', y1: 332, y2: 397, y3: 388},\n    {date: '1907-01-01', series: 'A', y1: 133, y2: 131, y3: 100},\n    {date: '1907-01-01', series: 'B', y1: 285, y2: 259, y3: 229},\n    {date: '1907-01-01', series: 'C', y1: 334, y2: 390, y3: 372},\n    {date: '1908-01-01', series: 'A', y1: 142, y2: 128, y3: 99},\n    {date: '1908-01-01', series: 'B', y1: 257, y2: 219, y3: 235},\n    {date: '1908-01-01', series: 'C', y1: 350, y2: 388, y3: 364},\n    {date: '1909-01-01', series: 'A', y1: 156, y2: 135, y3: 97},\n    {date: '1909-01-01', series: 'B', y1: 228, y2: 275, y3: 299},\n    {date: '1909-01-01', series: 'C', y1: 321, y2: 352, y3: 359},\n    {date: '1910-01-01', series: 'A', y1: 168, y2: 137, y3: 95},\n    {date: '1910-01-01', series: 'B', y1: 212, y2: 216, y3: 270},\n    {date: '1910-01-01', series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom React Component in JSX\nDESCRIPTION: This code snippet demonstrates how to render a custom React component named MyComponent. The component is self-closing, indicating it likely doesn't accept any children or props.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/using-custom-component.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<MyComponent />\n```\n\n----------------------------------------\n\nTITLE: Initializing a New SQL Server Source\nDESCRIPTION: This snippet initializes a new data source for SQL Server in the Evidence application. It sets the name for the SQL source that will be utilized for querying the database.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/mssql/index.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<NewSource sourceName=\"MSSQL\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates simple variable declaration and arithmetic operations. It sums two predefined numbers and stores the result in a third variable.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 100;\nlet y = 200;\nlet z = x + y;\n```\n\n----------------------------------------\n\nTITLE: Rendering Hardcoded Default Value Dropdown in React\nDESCRIPTION: This JSX snippet creates a Dropdown component that starts with a hardcoded default value of 5. It includes options from 1 to 5 for users to select from. This dropdown is independent from the previous queries, allowing for fixed selections while other elements are data-driven.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-debug.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Dropdown name=\"hardCodedDefault\" defaultValue={[5]}>\n  <DropdownOption label=\"1\" value={1}/>\n  <DropdownOption label=\"2\" value={2}/>\n  <DropdownOption label=\"3\" value={3}/>\n  <DropdownOption label=\"4\" value={4}/>\n  <DropdownOption label=\"5\" value={5}/>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Negative Sales Query\nDESCRIPTION: SQL query calculating maximum negative sales value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n      MAX(sales)*-1 as max_sales\nFROM \n    needful_things.orders\n```\n\n----------------------------------------\n\nTITLE: Embedding Images with Markdown Syntax\nDESCRIPTION: Demonstrates how to embed an image using markdown's image syntax with alt text and image path.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/images-and-links.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Twitter Card](/twitter-card-black-bg.png)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Broken SQL Query in Evidence\nDESCRIPTION: This query is intentionally broken to showcase how Evidence handles errors. It attempts to perform a division operation without proper column naming, which may cause issues in some SQL environments.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/writing-queries/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 100/2 as whoops\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Breadcrumb\nDESCRIPTION: This SQL query constructs a breadcrumb string by concatenating fields from the 'orders' table. It includes the first name, last name, order month, and the order ID passed as a parameter. The parameter 'params.order_id' is used in a WHERE clause to filter the results.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/orders/[order_id].md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT first_name || ' ' || last_name || '''s ' || order_month || ' Order' as breadcrumb FROM orders WHERE id = '${params.order_id}'\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Complete Time Series Test Data in JavaScript\nDESCRIPTION: A complete dataset with three series (A, B, C) spanning 11 years (1900-1910) with three metrics (y1, y2, y3) for each series at each time point. This represents the baseline complete dataset for visualization testing.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = \n[\n    {date: '1900-01-01', series: 'A', y1: 103, y2: 135, y3: 88},\n    {date: '1900-01-01', series: 'B', y1: 240, y2: 299, y3: 201},\n    {date: '1900-01-01', series: 'C', y1: 361, y2: 318, y3: 314},\n    {date: '1901-01-01', series: 'A', y1: 105, y2: 138, y3: 93},\n    {date: '1901-01-01', series: 'B', y1: 298, y2: 215, y3: 277},\n    {date: '1901-01-01', series: 'C', y1: 394, y2: 306, y3: 348},\n    {date: '1902-01-01', series: 'A', y1: 106, y2: 132, y3: 103},\n    {date: '1902-01-01', series: 'B', y1: 209, y2: 282, y3: 227},\n    {date: '1902-01-01', series: 'C', y1: 384, y2: 367, y3: 312},\n    {date: '1903-01-01', series: 'A', y1: 108, y2: 130, y3: 105},\n    {date: '1903-01-01', series: 'B', y1: 296, y2: 274, y3: 259},\n    {date: '1903-01-01', series: 'C', y1: 330, y2: 301, y3: 338},\n    {date: '1904-01-01', series: 'A', y1: 109, y2: 128, y3: 102},\n    {date: '1904-01-01', series: 'B', y1: 280, y2: 266, y3: 293},\n    {date: '1904-01-01', series: 'C', y1: 332, y2: 342, y3: 343},\n    {date: '1905-01-01', series: 'A', y1: 111, y2: 124, y3: 101},\n    {date: '1905-01-01', series: 'B', y1: 218, y2: 288, y3: 204},\n    {date: '1905-01-01', series: 'C', y1: 318, y2: 375, y3: 313},\n    {date: '1906-01-01', series: 'A', y1: 120, y2: 122, y3: 100},\n    {date: '1906-01-01', series: 'B', y1: 261, y2: 275, y3: 265},\n    {date: '1906-01-01', series: 'C', y1: 332, y2: 397, y3: 388},\n    {date: '1907-01-01', series: 'A', y1: 133, y2: 131, y3: 100},\n    {date: '1907-01-01', series: 'B', y1: 285, y2: 259, y3: 229},\n    {date: '1907-01-01', series: 'C', y1: 334, y2: 390, y3: 372},\n    {date: '1908-01-01', series: 'A', y1: 142, y2: 128, y3: 99},\n    {date: '1908-01-01', series: 'B', y1: 257, y2: 219, y3: 235},\n    {date: '1908-01-01', series: 'C', y1: 350, y2: 388, y3: 364},\n    {date: '1909-01-01', series: 'A', y1: 156, y2: 135, y3: 97},\n    {date: '1909-01-01', series: 'B', y1: 228, y2: 275, y3: 299},\n    {date: '1909-01-01', series: 'C', y1: 321, y2: 352, y3: 359},\n    {date: '1910-01-01', series: 'A', y1: 168, y2: 137, y3: 95},\n    {date: '1910-01-01', series: 'B', y1: 212, y2: 216, y3: 270},\n    {date: '1910-01-01', series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating LinkButton Component in React\nDESCRIPTION: This snippet shows how to use the LinkButton component to create a clickable link that navigates to a specified URL. It includes a url prop for the destination and children to specify the button text.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/link-button/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<LinkButton url=\"/text-and-metrics/text\"> Key and Metrics </LinkButton>\n```\n\n----------------------------------------\n\nTITLE: Selecting Distinct Order Months - SQL\nDESCRIPTION: This SQL snippet retrieves distinct order months from the 'orders' table for analyzing monthly sales trends. It does not require any parameters.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/categories/[category]/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT(order_month) FROM orders\n```\n\n----------------------------------------\n\nTITLE: Svelte variable declaration\nDESCRIPTION: This Svelte script declares a boolean variable named 'open' and initializes it to 'false'. This variable is likely used to control the visibility of a UI element.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/fullscreen.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n\"<script>\\n\\tlet open = false;\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Build Command\nDESCRIPTION: Modifying package.json to enable strict build mode, preventing deployment of sites with errors in charts or queries\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/cloud/evidence-cloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"build\": \"evidence build:strict\"\n```\n\n----------------------------------------\n\nTITLE: Adding New Components in Svelte\nDESCRIPTION: Introduces new ReferencePoint and Callout components to the library for enhanced data visualization and annotation capabilities.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/core-components/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\nAdd ReferencePoint and Callout components\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup Commands\nDESCRIPTION: Series of commands to set up the development environment, including installing dependencies and running the example project\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run sources:example-project\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev:core-components\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev:example-project\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Data with Missing Series in JavaScript\nDESCRIPTION: A dataset with a missing data point (series 'B' in year 1905) to test how visualizations handle missing series data. This can be used to test resilience to incomplete datasets.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet missingY = \n[ // remove B in 1905\n    {date: '1900-01-01', series: 'A', y1: 103, y2: 135, y3: 88},\n    {date: '1900-01-01', series: 'B', y1: 240, y2: 299, y3: 201},\n    {date: '1900-01-01', series: 'C', y1: 361, y2: 318, y3: 314},\n    {date: '1901-01-01', series: 'A', y1: 105, y2: 138, y3: 93},\n    {date: '1901-01-01', series: 'B', y1: 298, y2: 215, y3: 277},\n    {date: '1901-01-01', series: 'C', y1: 394, y2: 306, y3: 348},\n    {date: '1902-01-01', series: 'A', y1: 106, y2: 132, y3: 103},\n    {date: '1902-01-01', series: 'B', y1: 209, y2: 282, y3: 227},\n    {date: '1902-01-01', series: 'C', y1: 384, y2: 367, y3: 312},\n    {date: '1903-01-01', series: 'A', y1: 108, y2: 130, y3: 105},\n    {date: '1903-01-01', series: 'B', y1: 296, y2: 274, y3: 259},\n    {date: '1903-01-01', series: 'C', y1: 330, y2: 301, y3: 338},\n    {date: '1904-01-01', series: 'A', y1: 109, y2: 128, y3: 102},\n    {date: '1904-01-01', series: 'B', y1: 280, y2: 266, y3: 293},\n    {date: '1904-01-01', series: 'C', y1: 332, y2: 342, y3: 343},\n    {date: '1905-01-01', series: 'A', y1: 111, y2: 124, y3: 101},\n    {date: '1905-01-01', series: 'C', y1: 318, y2: 375, y3: 313},\n    {date: '1906-01-01', series: 'A', y1: 120, y2: 122, y3: 100},\n    {date: '1906-01-01', series: 'B', y1: 261, y2: 275, y3: 265},\n    {date: '1906-01-01', series: 'C', y1: 332, y2: 397, y3: 388},\n    {date: '1907-01-01', series: 'A', y1: 133, y2: 131, y3: 100},\n    {date: '1907-01-01', series: 'B', y1: 285, y2: 259, y3: 229},\n    {date: '1907-01-01', series: 'C', y1: 334, y2: 390, y3: 372},\n    {date: '1908-01-01', series: 'A', y1: 142, y2: 128, y3: 99},\n    {date: '1908-01-01', series: 'B', y1: 257, y2: 219, y3: 235},\n    {date: '1908-01-01', series: 'C', y1: 350, y2: 388, y3: 364},\n    {date: '1909-01-01', series: 'A', y1: 156, y2: 135, y3: 97},\n    {date: '1909-01-01', series: 'B', y1: 228, y2: 275, y3: 299},\n    {date: '1909-01-01', series: 'C', y1: 321, y2: 352, y3: 359},\n    {date: '1910-01-01', series: 'A', y1: 168, y2: 137, y3: 95},\n    {date: '1910-01-01', series: 'B', y1: 212, y2: 216, y3: 270},\n    {date: '1910-01-01', series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Hosting\nDESCRIPTION: This snippet initializes Firebase Hosting in the current project directory, guiding the user through specific configuration options for their Firebase project setup.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/firebase/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase init hosting\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions for Build and Deploy\nDESCRIPTION: This YAML snippet specifies the GitHub Actions workflow to run build commands before deploying the application. It also uses environment variables for secure credentials.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/firebase/index.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- run: npm ci && npm run sources && npm run build\n  env:\n    EVIDENCE_SOURCE__my_source__username: ${{ secrets.EVIDENCE_SOURCE__MY_SOURCE__USERNAME }}\n    EVIDENCE_SOURCE__my_source__private_key: ${{ secrets.EVIDENCE_SOURCE__MY_SOURCE__PRIVATE_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Svelte Variable for Tag Selection\nDESCRIPTION: This Svelte script initializes a variable to store the currently selected tag for inspection. It's used to manage the state of the tag selection in the dashboard interface.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/trends.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let currentTag;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Medium-sized Slider Implementation\nDESCRIPTION: Demonstrates a medium-sized slider with custom range and default value\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Slider\n    title=\"Months Medium\" \n    name=monthsMedium\n    defaultValue=4\n    min=0\n    max=36\n    size=medium\n/>\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Dates and Timestamps in PostgreSQL\nDESCRIPTION: This SQL query demonstrates the use of TO_DATE and TO_TIMESTAMP functions in PostgreSQL to convert string representations of dates into date and timestamp data types. It shows how to handle different date formats and create both date and timestamp objects.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/postgres-dates/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    TO_DATE('2020-03-23', 'YYYY-MM-DD') as date,\n    TO_DATE('March 23, 2020', 'Month DD, YYYY') as datef,\n    TO_TIMESTAMP('2020-03-23', 'YYYY-MM-DD') as timestamp\n```\n\n----------------------------------------\n\nTITLE: Implementing BigLink Component in JSX\nDESCRIPTION: A BigLink component that creates a hyperlink to another page. It references '/nested/page-c' as the destination URL.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/big-link.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BigLink href=/nested/page-c>Go to page c</BigLink>\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Markdown\nDESCRIPTION: Demonstrates how to create simple tables in markdown using pipe characters and dashes for column headers.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Row 1    | Row 1    | Row 1    |\n| Row 2    | Row 2    | Row 2    |\n```\n\n----------------------------------------\n\nTITLE: Executing Basic SQL Query\nDESCRIPTION: Simple inline SQL query that selects the number 10 with alias 't'\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/sql-file-queries/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 10 as t\n```\n\n----------------------------------------\n\nTITLE: Initializing Monthly Bank Dataset Array - JavaScript\nDESCRIPTION: Creates an array of bank establishment data with monthly granularity, including some partial dates and covering a shorter time period with more frequent entries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet fullMonths = [\n    {fed_reserve_district: 'SF', established_date: '2017-11-01', banks: 1},\n    {fed_reserve_district: 'ATL', established_date: '2017-10-15', banks: 1},\n    // ... additional entries\n]\n```\n\n----------------------------------------\n\nTITLE: Copying Default Layout Template Using Bash Command\nDESCRIPTION: Command to copy the default layout template file from the Evidence template directory to the pages directory, allowing for customization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/layouts/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .evidence/template/src/pages/+layout.svelte pages\n```\n\n----------------------------------------\n\nTITLE: Reference Line Configuration Options Query\nDESCRIPTION: SQL query demonstrating various reference line configuration options including vertical, horizontal, and sloped lines with different coordinate combinations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect 5 as x, null as y, null as x2, null as y2, 'Vertical line at x=5' as Result union all\nselect null, 100, null, null, 'Horizontal line at y=100' union all\nselect 5, 100, null, null, 'Vertical line at x=5 (ignores y)' union all\nselect 5, 100, 10, 200, 'Sloped line from [5, 100] to [10, 200]' union all\nselect 5, 100, null, 200, 'Vertical line from [5, 100] to [5, 200]' union all\nselect 5, 100, 10, null, 'Horizontal line from [5, 100] to [10, 100]'\norder by 2 nulls first, 1 nulls first, 3 nulls first, 4 nulls first\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 6.0.4\nDESCRIPTION: Changelog entry documenting a patch update to bump the vitest dependency version.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/preprocess/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n- 64486c669: bump vitest\n```\n\n----------------------------------------\n\nTITLE: Querying Sample Growth Data with SQL\nDESCRIPTION: SQL query that creates a dataset with positive, negative, and neutral delta values for demonstration purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 0.366 as positive, -0.366 as negative, 0.01 as neutral\n```\n\n----------------------------------------\n\nTITLE: Date Formats SQL Table\nDESCRIPTION: SQL query generating a table of date format examples with their corresponding format codes and outputs\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/formatting/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect 'ddd' as format_name, 'ddd' as format_code, '2022-01-09 12:45' as example_input, 'Sun' as example_output, 0 as row_num union all\nselect 'dddd', 'dddd', '2022-01-09 12:45', 'Sunday', 1 union all\n... (additional date format variations)\n```\n\n----------------------------------------\n\nTITLE: Logging into Firebase\nDESCRIPTION: This snippet logs into Firebase using the Firebase CLI. It opens a browser window for authentication.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/firebase/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Fixing XML Parser Vulnerability in JavaScript\nDESCRIPTION: Overrides the fast-xml-parser version to >=4.4.1 to resolve a vulnerability in the library.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/core-components/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nOverride fast-xml-parser version to >=4.4.1 to resolve vulnerability\n```\n\n----------------------------------------\n\nTITLE: Rendering 100% Stacked Area Charts in React\nDESCRIPTION: This snippet demonstrates the rendering of AreaChart components configured as 100% stacked charts for full data, missing X, Y, and null values. It emphasizes the component's ability to represent proportional data visually.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<AreaChart data={full}  series=series title=\"Full Data\" type=stacked100/>\n<AreaChart data={missingX}  series=series title=\"Missing X\" type=stacked100/>\n<AreaChart data={missingY} series=series title=\"Missing Y\" type=stacked100/>\n<AreaChart data={nulls}  series=series title=\"Nulls\" type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Deployment Schedule Configuration in GitHub Actions Workflow\nDESCRIPTION: Configuration for adding a scheduled deployment trigger to the GitHub Actions workflow, enabling automatic daily deployment at midnight\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/azure-static-apps/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches: 'main'\n  schedule:\n    - cron: '0 0 * * *' # This is midnight every day\n```\n\n----------------------------------------\n\nTITLE: Specifying Light/Dark Colors Explicitly in Evidence Charts\nDESCRIPTION: Markdown example demonstrating how to explicitly define different colors for light and dark modes in a BarChart component using an array of two color values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart\n    data={my_data}\n    fillColor={[\"#1d4ed8\", \"#93c5fd\"]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Arrays for Chart Visualization\nDESCRIPTION: Defines three data arrays for chart testing: full data, data with missing X values, and data with null Y values. Each array contains objects with x and y properties where x is a letter and y is a numeric value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/stringSingle/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = [\n    {x: \"A\", y: 34},\n    {x: \"B\", y: 57},\n    {x: \"C\", y: 26},\n    {x: \"D\", y: 41},\n    {x: \"E\", y: 41},\n    {x: \"F\", y: 62},\n    {x: \"G\", y: 32},\n    {x: \"H\", y: 52},\n    {x: \"I\", y: 48},\n    {x: \"J\", y: 52},\n    {x: \"K\", y: 48},\n    {x: \"L\", y: 48}\n]\n\nlet missingX =[\n    {x: \"A\", y: 34},\n    {x: \"B\", y: 57},\n    {x: \"C\", y: 26},\n    {x: \"E\", y: 41},\n    {x: \"F\", y: 62},\n    {x: \"G\", y: 32},\n    {x: \"H\", y: 52},\n    {x: \"I\", y: 48},\n    {x: \"J\", y: 52},\n    {x: \"K\", y: 48},\n    {x: \"L\", y: 48}\n]\n\nlet nulls =[\n    {x: \"A\", y: 34},\n    {x: \"B\", y: 57},\n    {x: \"C\", y: 26},\n    {x: \"D\", y: 41},\n    {x: \"E\", y: 41},\n    {x: \"F\", y: null},\n    {x: \"G\", y: 32},\n    {x: \"H\", y: 52},\n    {x: \"I\", y: 48},\n    {x: \"J\", y: 52},\n    {x: \"K\", y: 48},\n    {x: \"L\", y: 48}\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Keppel Color Palette in HTML Grid\nDESCRIPTION: This code snippet creates a grid layout to showcase a custom color palette using Keppel shades from 50 to 950. Each color is displayed in a square with its shade label, using Tailwind CSS classes for styling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/theme.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<Grid cols=4>\n    <div class=\"bg-keppel-50 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-900\"> Keppel 50 </span>\n    </div>\n    <div class=\"bg-keppel-100 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-900\"> Keppel 100 </span>\n    </div>\n    <div class=\"bg-keppel-200 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-900\"> Keppel 200 </span>\n    </div>\n    <div class=\"bg-keppel-300 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-900\"> Keppel 300 </span>\n    </div>\n    <div class=\"bg-keppel-400 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-900\"> Keppel 400 </span>\n    </div>\n    <div class=\"bg-keppel-500 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-900\"> Keppel 500 </span>\n    </div>\n    <div class=\"bg-keppel-600 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-50\"> Keppel 600 </span>\n    </div>\n    <div class=\"bg-keppel-700 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-50\"> Keppel 700 </span>\n    </div>\n    <div class=\"bg-keppel-800 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-50\"> Keppel 800 </span>\n    </div>\n    <div class=\"bg-keppel-900 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-50\"> Keppel 900 </span>\n    </div>\n    <div class=\"bg-keppel-950 w-full aspect-square flex flex-col justify-end pb-4 items-center\">\n        <span class=\"text-keppel-50\"> Keppel 950 </span>\n    </div>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Updating NPM\nDESCRIPTION: This command updates NPM to the latest version globally. Keeping NPM up to date ensures compatibility and access to the latest features and bug fixes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/guides/system-requirements/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install -g npm@latest\"\n```\n\n----------------------------------------\n\nTITLE: Schedule Data Refresh\nDESCRIPTION: This YAML snippet establishes a cron schedule in the GitHub Actions workflow for automated data refresh, set to run daily at midnight.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/firebase/index.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  schedule:\n    - cron: '0 0 * * *' # This is midnight every day\n```\n\n----------------------------------------\n\nTITLE: Setting Up an Evidence Project via CLI\nDESCRIPTION: Command sequence for creating a new Evidence project using the CLI. Downloads the template, installs dependencies, and starts the development server.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/themes/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Hardcoded Dropdown Options in Evidence\nDESCRIPTION: Example of creating a dropdown with hardcoded options using DropdownOption components rather than data from a query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Dropdown name=hardcoded_option >\n    <DropdownOption value=1 valueLabel=\"Option 1\" />\n    <DropdownOption value=2 valueLabel=\"Option 2\" />\n    <DropdownOption value=3 valueLabel=\"Option 3\" />\n</Dropdown>\n\n{inputs.hardcoded_option.value}\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON Stringified Data in Evidence\nDESCRIPTION: This snippet demonstrates how to stringify the query results from the 'months' query. This shows the raw string representation of the data before it gets coerced into date format by the DataTable component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/wack-dates.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{JSON.stringify(months, null, 2)}\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in Markdown\nDESCRIPTION: Demonstrates how to create both unordered (bullet) lists using dashes and ordered (numbered) lists in markdown.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- This is a unordered list\n- It uses dashes\n- To indicate items\n\n1. This is an ordered list\n1. It uses numbers to indicate order\n1. The numbers you type don't matter, they will be automatically numbered\n```\n\n----------------------------------------\n\nTITLE: Chart Page Configuration in Markdown Frontmatter\nDESCRIPTION: Markdown frontmatter configuration block that defines metadata for a charts documentation page, including title and sidebar display settings.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Charts\nsidebar_link: false\nsidebar_position: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Dropdown Component for Years\nDESCRIPTION: This HTML snippet defines an Evidence Dropdown component for filtering data by year.  It uses the 'years' data (obtained from the SQL query) to populate the dropdown options.  The default value is set to \"%\" to show all years initially, and the selected value is accessible through inputs.year[n].value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/lots-of-dropdowns.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n\n<Dropdown\n  name=year1\n  value=year\n  data={years}\n  title=Year\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All years\"/>\n</Dropdown>\n\nyear1: {inputs.year1.value}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build in CLI\nDESCRIPTION: Command to preview the production build locally before deployment, allowing verification of the built application in a production-like environment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder/another-sub-folder/another-sub-folder/a-nested-page.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Breadcrumbs in JavaScript\nDESCRIPTION: Adds functionality to allow for dynamic breadcrumbs via frontmatter in the application.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/core-components/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nallow for dynamic breadcrumbs via frontmatter\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Naming Convention for Evidence Sources\nDESCRIPTION: Demonstrates the key format for configuring source credentials in GitLab CI/CD variables\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/gitlab-pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEVIDENCE_SOURCE__[your_source]__[option_name]\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Adapter Class in JavaScript\nDESCRIPTION: This code defines the SQLiteAdapter class with methods for connecting to the database, running queries, and retrieving metadata. It includes error handling and connection management.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/sqlite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class SQLiteAdapter {\n    constructor(settings) {\n        this.settings = settings;\n        this.db = null;\n    }\n\n    async connect() {\n        if (!this.db) {\n            try {\n                this.db = new Database(this.settings.filename);\n            } catch (err) {\n                throw new Error(`Failed to connect to SQLite database: ${err.message}`);\n            }\n        }\n        return this.db;\n    }\n\n    async disconnect() {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n    }\n\n    async runQuery(query) {\n        await this.connect();\n        try {\n            const statement = this.db.prepare(query);\n            return statement.all();\n        } catch (err) {\n            throw new Error(`Failed to execute query: ${err.message}`);\n        }\n    }\n\n    async getTableNames() {\n        await this.connect();\n        const query = \"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\";\n        try {\n            const result = await this.runQuery(query);\n            return result.map(row => row.name);\n        } catch (err) {\n            throw new Error(`Failed to get table names: ${err.message}`);\n        }\n    }\n\n    async getColumnNames(table) {\n        await this.connect();\n        const query = `PRAGMA table_info(${table})`;\n        try {\n            const result = await this.runQuery(query);\n            return result.map(row => row.name);\n        } catch (err) {\n            throw new Error(`Failed to get column names for table ${table}: ${err.message}`);\n        }\n    }\n\n    async getPreview(table) {\n        await this.connect();\n        const query = `SELECT * FROM ${table} LIMIT 10`;\n        try {\n            return await this.runQuery(query);\n        } catch (err) {\n            throw new Error(`Failed to get preview for table ${table}: ${err.message}`);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Development and Preview Modes\nDESCRIPTION: Shell commands to run the tests in both development mode and after building the project for preview mode.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:dev\n\npnpm build\npnpm test:preview\n```\n\n----------------------------------------\n\nTITLE: Configuration of Connection Timeout\nDESCRIPTION: The `connection_timeout` setting determines the maximum duration, in milliseconds, for establishing a connection to SQL Server. This value defaults to 15000 ms.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/mssql/index.md#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: NGINX Configuration for SPA Mode\nDESCRIPTION: NGINX server block configuration to redirect all URLs to index.html, ensuring proper routing in a Single Page App deployment\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/rendering-modes/index.md#2025-04-21_snippet_4\n\nLANGUAGE: code\nCODE:\n```\nroot /path/to/your/project/build/;\n\nlocation / {\n    try_files $uri $uri/ $uri.html /index.html;\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grouped BarChart with Full Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal grouped bar chart using the `full` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, enables swapping X and Y axes, sets the type to grouped, and sets the title to \"Full Data\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_35\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={full} series=fed_reserve_district x=established_date swapXY=true type=grouped title=\"Full Data\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Years List for Dropdown in SQL\nDESCRIPTION: SQL query that creates a list of years (2019, 2020, 2021) using UNION ALL to populate a year selection dropdown.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/dropdown/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect 2019 as year \nunion all \nselect 2020 as year\nunion all\nselect 2021 as year\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte for SPA Mode\nDESCRIPTION: JavaScript configuration for Svelte using adapter-static to enable Single Page App rendering with a fallback to index.html\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/configuration/rendering-modes/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import(\"@sveltejs/kit\").Config} */\nexport default {\n    kit: {\n        adapter: adapter({\n            fallback: 'index.html'\n        })\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Data Arrays for Federal Reserve Analysis\nDESCRIPTION: This snippet defines several JavaScript arrays containing data about various Federal Reserve districts, capturing the district's name, an establishment date, and the number of banks for different years. The arrays are structured to facilitate data visualization with charting libraries. No external dependencies are required other than standard JavaScript.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n{fed_reserve_district: 'DAL', established_date: '2015-01-01', banks: 0},\n{fed_reserve_district: 'KC', established_date: '2015-01-01', banks: 0},\n{fed_reserve_district: 'CHI', established_date: '2015-01-01', banks: 0},\n\n{fed_reserve_district: 'NY', established_date: '2016-01-01', banks: 0},\n{fed_reserve_district: 'SF', established_date: '2016-01-01', banks: 0},\n{fed_reserve_district: 'ATL', established_date: '2016-01-01', banks: 0},\n{fed_reserve_district: 'DAL', established_date: '2016-01-01', banks: 0},\n{fed_reserve_district: 'KC', established_date: '2016-01-01', banks: 0},\n{fed_reserve_district: 'CHI', established_date: '2016-01-01', banks: 0},\n\n{fed_reserve_district: 'SF', established_date: '2017-01-01', banks: 1},\n{fed_reserve_district: 'ATL', established_date: '2017-01-01', banks: 1},\n{fed_reserve_district: 'DAL', established_date: '2017-01-01', banks: 3},\n{fed_reserve_district: 'KC', established_date: '2017-01-01', banks: 0},\n{fed_reserve_district: 'CHI', established_date: '2017-01-01', banks: 0},\n{fed_reserve_district: 'NY', established_date: '2017-01-01', banks: 0},\n\n{fed_reserve_district: 'ATL', established_date: '2018-01-01', banks: 3},\n{fed_reserve_district: 'SF', established_date: '2018-01-01', banks: 3},\n{fed_reserve_district: 'NY', established_date: '2018-01-01', banks: 1},\n{fed_reserve_district: 'DAL', established_date: '2018-01-01', banks: 1},\n{fed_reserve_district: 'CHI', established_date: '2018-01-01', banks: 0},\n{fed_reserve_district: 'KC', established_date: '2018-01-01', banks: 0},\n\n{fed_reserve_district: 'ATL', established_date: '2019-01-01', banks: 4},\n{fed_reserve_district: 'NY', established_date: '2019-01-01', banks: 4},\n{fed_reserve_district: 'CHI', established_date: '2019-01-01', banks: 2},\n{fed_reserve_district: 'SF', established_date: '2019-01-01', banks: 1},\n{fed_reserve_district: 'DAL', established_date: '2019-01-01', banks: 2},\n{fed_reserve_district: 'KC', established_date: '2019-01-01', banks: 0},\n\n{fed_reserve_district: 'NY', established_date: '2020-01-01', banks: 1},\n{fed_reserve_district: 'ATL', established_date: '2020-01-01', banks: 4},\n{fed_reserve_district: 'SF', established_date: '2020-01-01', banks: 1},\n{fed_reserve_district: 'KC', established_date: '2020-01-31', banks: 1},\n{fed_reserve_district: 'CHI', established_date: '2020-01-01', banks: 0},\n{fed_reserve_district: 'DAL', established_date: '2020-01-01', banks: 0},\n\n{fed_reserve_district: 'SF', established_date: '2021-01-01', banks: 2},\n{fed_reserve_district: 'ATL', established_date: '2021-01-01', banks: 3},\n{fed_reserve_district: 'CHI', established_date: '2021-01-01', banks: 3},\n{fed_reserve_district: 'DAL', established_date: '2021-01-01', banks: 1},\n{fed_reserve_district: 'KC', established_date: '2021-01-01', banks: 0},\n{fed_reserve_district: 'NY', established_date: '2021-01-01', banks: 0}\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet missingX = [ // take out 2016 and 2020\n    {fed_reserve_district: 'NY', established_date: '2015-01-01', banks: 1},\n    {fed_reserve_district: 'SF', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'ATL', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'DAL', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'KC', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'CHI', established_date: '2015-01-01', banks: 0},\n\n    {fed_reserve_district: 'SF', established_date: '2017-01-01', banks: 1},\n    {fed_reserve_district: 'ATL', established_date: '2017-01-01', banks: 1},\n    {fed_reserve_district: 'DAL', established_date: '2017-01-01', banks: 3},\n    {fed_reserve_district: 'KC', established_date: '2017-01-01', banks: 0},\n    {fed_reserve_district: 'CHI', established_date: '2017-01-01', banks: 0},\n    {fed_reserve_district: 'NY', established_date: '2017-01-01', banks: 0},\n\n    {fed_reserve_district: 'ATL', established_date: '2018-01-01', banks: 3},\n    {fed_reserve_district: 'SF', established_date: '2018-01-01', banks: 3},\n    {fed_reserve_district: 'NY', established_date: '2018-01-01', banks: 1},\n    {fed_reserve_district: 'DAL', established_date: '2018-01-01', banks: 1},\n    {fed_reserve_district: 'CHI', established_date: '2018-01-01', banks: 0},\n    {fed_reserve_district: 'KC', established_date: '2018-01-01', banks: 0},\n\n    {fed_reserve_district: 'ATL', established_date: '2019-01-01', banks: 4},\n    {fed_reserve_district: 'NY', established_date: '2019-01-01', banks: 4},\n    {fed_reserve_district: 'CHI', established_date: '2019-01-01', banks: 2},\n    {fed_reserve_district: 'SF', established_date: '2019-01-01', banks: 1},\n    {fed_reserve_district: 'DAL', established_date: '2019-01-01', banks: 2},\n    {fed_reserve_district: 'KC', established_date: '2019-01-01', banks: 0},\n\n    {fed_reserve_district: 'SF', established_date: '2021-01-01', banks: 2},\n    {fed_reserve_district: 'ATL', established_date: '2021-01-01', banks: 3},\n    {fed_reserve_district: 'CHI', established_date: '2021-01-01', banks: 3},\n    {fed_reserve_district: 'DAL', established_date: '2021-01-01', banks: 1},\n    {fed_reserve_district: 'KC', established_date: '2021-01-01', banks: 0},\n    {fed_reserve_district: 'NY', established_date: '2021-01-01', banks: 0}\n]\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet missingY = [ // take out SF 2018 and NY 2016\n    {fed_reserve_district: 'NY', established_date: '2015-01-01', banks: 1},\n    {fed_reserve_district: 'SF', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'ATL', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'DAL', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'KC', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'CHI', established_date: '2015-01-01', banks: 0},\n    \n    {fed_reserve_district: 'SF', established_date: '2016-01-01', banks: 0},\n    {fed_reserve_district: 'ATL', established_date: '2016-01-01', banks: 0},\n    {fed_reserve_district: 'DAL', established_date: '2016-01-01', banks: 0},\n    {fed_reserve_district: 'KC', established_date: '2016-01-01', banks: 0},\n    {fed_reserve_district: 'CHI', established_date: '2016-01-01', banks: 0},\n\n    {fed_reserve_district: 'SF', established_date: '2017-01-01', banks: 1},\n    {fed_reserve_district: 'ATL', established_date: '2017-01-01', banks: 1},\n    {fed_reserve_district: 'DAL', established_date: '2017-01-01', banks: 3},\n    {fed_reserve_district: 'KC', established_date: '2017-01-01', banks: 0},\n    {fed_reserve_district: 'CHI', established_date: '2017-01-01', banks: 0},\n    {fed_reserve_district: 'NY', established_date: '2017-01-01', banks: 0},\n\n    {fed_reserve_district: 'ATL', established_date: '2018-01-01', banks: 3},\n    {fed_reserve_district: 'NY', established_date: '2018-01-01', banks: 1},\n    {fed_reserve_district: 'DAL', established_date: '2018-01-01', banks: 1},\n    {fed_reserve_district: 'CHI', established_date: '2018-01-01', banks: 0},\n    {fed_reserve_district: 'KC', established_date: '2018-01-01', banks: 0},\n\n    {fed_reserve_district: 'ATL', established_date: '2019-01-01', banks: 4},\n    {fed_reserve_district: 'NY', established_date: '2019-01-01', banks: 4},\n    {fed_reserve_district: 'CHI', established_date: '2019-01-01', banks: 2},\n    {fed_reserve_district: 'SF', established_date: '2019-01-01', banks: 1},\n    {fed_reserve_district: 'DAL', established_date: '2019-01-01', banks: 2},\n    {fed_reserve_district: 'KC', established_date: '2019-01-01', banks: 0},\n\n    {fed_reserve_district: 'NY', established_date: '2020-01-01', banks: 1},\n    {fed_reserve_district: 'ATL', established_date: '2020-01-01', banks: 4},\n    {fed_reserve_district: 'SF', established_date: '2020-01-01', banks: 1},\n    {fed_reserve_district: 'KC', established_date: '2020-01-01', banks: 1},\n    {fed_reserve_district: 'CHI', established_date: '2020-01-01', banks: 0},\n    {fed_reserve_district: 'DAL', established_date: '2020-01-01', banks: 0},\n\n    {fed_reserve_district: 'SF', established_date: '2021-01-01', banks: 2},\n    {fed_reserve_district: 'ATL', established_date: '2021-01-01', banks: 3},\n    {fed_reserve_district: 'CHI', established_date: '2021-01-01', banks: 3},\n    {fed_reserve_district: 'DAL', established_date: '2021-01-01', banks: 1},\n    {fed_reserve_district: 'KC', established_date: '2021-01-01', banks: 0},\n    {fed_reserve_district: 'NY', established_date: '2021-01-01', banks: 0}\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Evidence Project via CLI\nDESCRIPTION: Command sequence to create a new Evidence project using degit, install dependencies, and start the development server. Creates a new project from the evidence-dev template repository.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/spa/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation for Large Data Sources on Windows\nDESCRIPTION: Command to increase Node.js process memory allocation for running source queries on Windows systems\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset NODE_OPTIONS=--max-old-space-size=4096 && npm run sources\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Evidence Page Templates\nDESCRIPTION: Example of using VITE_ prefixed environment variables in Svelte templates for Evidence pages. Variables are accessed through import.meta.env and can be used for conditional rendering.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/cli/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  const customer_attribute = import.meta.env.VITE_customer_attribute;\n</script>\n\n{#if customer_attribute === 'premium'}\n\nPremium content\n\n{:else if customer_attribute === 'free'}\n\nFree content\n\n{/if}\n```\n\n----------------------------------------\n\nTITLE: DownloadData Component with Custom Query ID\nDESCRIPTION: Implementation of the DownloadData component with a custom query ID for the output filename.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/download-data/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<DownloadData data={categories} queryID=my_file/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a documentation page about maps, specifying the title and sidebar settings.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Maps\nsidebar_link: false\nsidebar_position: 6\n---\n```\n\n----------------------------------------\n\nTITLE: Utilizing Color Breakpoints in Svelte\nDESCRIPTION: A Svelte code snippet showcasing the use of color breakpoints in a DataTable to manage how numbers are assigned to sections of a three-part color scale. Specifically, it has a middle color value specified to fine-tune the display of numbers around zero.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={negatives} rows=all>\\n  <Column id=name/>\\n  <Column id=number contentType=colorscale colorScale={['#ce5050','white','#6db678']} colorMid=0/>\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 1.1.0\nDESCRIPTION: Minor version update adding authentication methods and connection timeout option\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/mssql/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- bcd56f5bd: Add alternatives authentication methods\n\n### Patch Changes\n\n- 2d89e4624: Add connectionTimeout option to mssql connector\n```\n\n----------------------------------------\n\nTITLE: Creating Economic Indicators Dataset in SQL\nDESCRIPTION: SQL query that creates a dataset of economic indicators (GDP, growth rates, population, etc.) for major world economies using UNION ALL statements.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/column-groups/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 'United States' as country, 'North America' as continent, 22996 as gdp_usd, 0.017 as gdp_growth, 0.025 as interest_rate, 0.085 as inflation_rate, 0.037 as jobless_rate, -16.7 as gov_budget, 137.2 as debt_to_gdp, -3.6 as current_account, 332.4 as population\nUNION ALL\nSELECT 'China', 'Asia', 17734, 0.004, 0.0365, 0.027, 0.054, -3.7, 66.8, 1.8, 1412.6\nUNION ALL\nSELECT 'Japan', 'Asia', 4937, 0.002, -0.001, 0.026, 0.026, -12.6, 266.2, 3.2, 125.31\nUNION ALL\nSELECT 'Germany', 'Europe', 4223, 0.017, 0.005, 0.079, 0.055, -3.7, 69.3, 7.4, 83.16\nUNION ALL\nSELECT 'United Kingdom', 'Europe', 3187, 0.029, 0.0175, 0.101, 0.038, -6, 95.9, -2.6, 67.53\nUNION ALL\nSELECT 'India', 'Asia', 3173, 0.135, 0.054, 0.0671, 0.078, -9.4, 73.95, -1.7, 1380\nUNION ALL\nSELECT 'France', 'Europe', 2937, 0.042, 0.005, 0.058, 0.074, -6.5, 112.9, 0.4, 67.63\nUNION ALL\nSELECT 'Italy', 'Europe', 2100, 0.047, 0.005, 0.084, 0.079, -7.2, 150.8, 2.5, 59.24\nUNION ALL\nSELECT 'Canada', 'North America', 1991, 0.029, 0.025, 0.076, 0.049, -4.7, 117.8, 0.1, 38.44\nUNION ALL\nSELECT 'South Korea', 'Asia', 1799, 0.029, 0.025, 0.057, 0.029, -6.1, 42.6, 3.5, 51.74\nUNION ALL\nSELECT 'Russia', 'Europe', 1776, -0.04, 0.08, 0.151, 0.039, 0.8, 18.2, 6.8, 145.55\nUNION ALL\nSELECT 'Brazil', 'South America', 1609, 0.032, 0.1375, 0.1007, 0.091, -4.5, 80.27, -1.8, 213.32\n```\n\n----------------------------------------\n\nTITLE: Fetching Sample Reviews Data\nDESCRIPTION: This query selects all columns from the reviews table, limiting the result to 100 rows. It provides a snapshot of the review data structure and content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/sqlite-dates/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from reviews\nlimit 100\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Connection Function for SQLite in JavaScript\nDESCRIPTION: This function tests the connection to a SQLite database by attempting to connect and run a simple query. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/sqlite/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function testConnection(settings) {\n    const adapter = new SQLiteAdapter(settings);\n    try {\n        await adapter.connect();\n        await adapter.runQuery('SELECT 1');\n        return true;\n    } catch (err) {\n        return false;\n    } finally {\n        await adapter.disconnect();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL for Red Negatives\nDESCRIPTION: An SQL query that selects names and numerical values to illustrate working with red-highlighted negatives, assisting in the visual identification of negative data points within a DataTable.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"negatives\\nselect 'A' as name, -5 as number,0 as status\\nunion all\\nselect 'B', -4 as number, 1 as status\\nunion all\\nselect 'C', -3 as number, 2 as status\\nunion all\\nselect 'D', -2 as number,0\\nunion all\\nselect 'E', -1 as number,1\\nunion all\\nselect 'F', 0 as number,1\\nunion all\\nselect 'G', 1 as number,2\\nunion all\\nselect 'H', 2 as number,2\\nunion all\\nselect 'I', 3 as number,0\\nunion all\\nselect 'J', 4 as number,0\\norder by number asc\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright for Testing\nDESCRIPTION: Command to set up Playwright for end-to-end testing with JavaScript, without browsers or examples, and in quiet mode.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm create playwright@latest --lang=js --no-browsers --no-examples --quiet\n```\n\n----------------------------------------\n\nTITLE: Counting Total Posts for a Selected Tag in SQL\nDESCRIPTION: This SQL query counts the total number of posts containing a specific hashtag within a selected time range. It filters posts by creation date and joins with the post_tags table to match the selected hashtag ID.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/trends.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- total_posts\nSELECT COUNT(*) as postCount FROM posts p\n    INNER JOIN post_tags pt on p.id = pt.post_id\nWHERE p.created_at > CURRENT_DATE - INTERVAL ${inputs.time_range.value} AND pt.hashtag_id = ${inputs.selected_tag.value}\nGROUP BY pt.hashtag_id\n```\n\n----------------------------------------\n\nTITLE: Configuration of Request Timeout\nDESCRIPTION: This setting controls the maximum execution time, in milliseconds, for a SQL query before it is forcibly terminated. The default is set to 15000 ms.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/mssql/index.md#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Book Information SQL Query with Long Text Fields\nDESCRIPTION: SQL query creating a dataset of book titles and their summaries with multiple rows using UNION ALL\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/text-wrapping/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect \n  'How to win friends and influence people' as title, 'Become genuinely interested in other people.\\n    Smile.\\n    Remember that a persons name is to that person the sweetest and most important sound in any language.\\n    Be a good listener. Encourage others to talk about themselves.\\n    Talk in terms of the other persons interests.\\n    Make the other person feel important – and do it sincerely.' as summary\nunion all\nselect \n  'The 7 Habits of Highly Effective People', 'Be Proactive.\\n    Begin with the End in Mind.\\n    Put First Things First.\\n    Think Win-Win.\\n    Seek First to Understand, Then to Be Understood.\\n    Synergize.\\n    Sharpen the Saw.' as summary\nunion all\nselect \n  'Never split the difference' as title, 'Never split the difference.\\n    Use tactical empathy.\\n    Silence is golden.\\n    Mirroring.\\n    Labeling.\\n    Accusation audit.\\n    Calibrated questions.\\n    No deal is better than a bad deal.' as summary\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Evidence in Codespaces\nDESCRIPTION: Commands to install dependencies and start the Evidence development server in Codespaces environment with host configuration for remote access.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run sources\nnpm run dev -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Horizontal Grouped BarChart with Missing Y Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal grouped bar chart using the `missingY` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, enables swapping X and Y axes, sets the type to grouped, and sets the title to \"Missing Y\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_36\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingY} series=fed_reserve_district x=established_date swapXY=true type=grouped title=\"Missing Y\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Svelte LastRefreshed with Custom Prefix\nDESCRIPTION: This snippet demonstrates rendering the LastRefreshed component in Svelte with a custom prefix of 'Updated'. The component needs to be imported or defined in the Svelte environment, and the prefix attribute is used to modify the displayed text.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/last-refreshed/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<LastRefreshed prefix=\\\"Updated\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Rules in Markdown\nDESCRIPTION: Demonstrates how to add horizontal rules (dividing lines) in markdown using three consecutive dashes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nBelow is a horizontal rule\n\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Browser Tab Title with Frontmatter\nDESCRIPTION: Example showing how to set a custom browser tab title for an Evidence page using the title property in markdown frontmatter.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/layouts/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My New Page Title\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Options in YAML Frontmatter for Evidence Dev\nDESCRIPTION: This YAML frontmatter configuration sets the sidebar to never appear and specifies its position. It's used at the top of Markdown files in Evidence Dev projects to control page layout and navigation options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/sidebar/never/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar: never\nsidebar_position: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Performing Union Operations in SQL\nDESCRIPTION: The snippet demonstrates a basic union operation using SQL. It selects constant values and combines them into a single set. Dependencies include an SQL environment to execute the query. It expects no input, and the output is a set of values {1, 2}.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/partials/index.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1\\nUNION\\nSELECT 2\n```\n\n----------------------------------------\n\nTITLE: Querying Location Data\nDESCRIPTION: SQL query to fetch location data and create a Google search link for each point name.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect *, 'https://www.google.com/search?q=' || point_name as link_col from la_locations\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Subtitle Property - JSX\nDESCRIPTION: Defines the subtitle property for the chart, which appears just under the title. This is useful for providing additional explanation or context to the chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=subtitle\n    description=\"Chart subtitle. Appears just under title.\"\n    options=\"string\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Checking NPM Version\nDESCRIPTION: This command is used to check the version of NPM installed on the system.  Verifying the NPM version ensures it meets the minimum requirements specified for Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/guides/system-requirements/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"npm -v\"\n```\n\n----------------------------------------\n\nTITLE: Committing the Test Project to Git\nDESCRIPTION: Git commands to exclude generated directories from version control and commit the new test project, ensuring proper configuration for collaboration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# Make sure the .evidence/meta and .evidence/template directories aren't committed, they should be in the .gitignore\n# If they are showing in your diff, run the following:\ngit rm -r --cached .evidence/meta .evidence/template\n\ngit add .\ngit commit -m \"test: add e2e/my-tests\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for Evidence Themes\nDESCRIPTION: Required plugin configuration in vite.config.js to enable the Evidence themes virtual module.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/tailwind/src/vite-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nevidenceThemes()\n```\n\n----------------------------------------\n\nTITLE: Fetching Categories from Database in SQL\nDESCRIPTION: SQL query that selects distinct categories from the needful_things.orders table, grouping by category to provide unique values for a dropdown filter.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/basic/pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    category\nfrom needful_things.orders\ngroup by category\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Unconnected Table with SQL\nDESCRIPTION: This SQL snippet attempts to select all data from a table that is not connected, potentially for error testing or demonstration purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from a_table_that_isnt_connected\n```\n\n----------------------------------------\n\nTITLE: Setting Up TypeScript Types for Evidence Themes\nDESCRIPTION: Required TypeScript configuration in tsconfig.json to enable type definitions for the Evidence themes module.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/tailwind/src/vite-plugin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n@evidence-dev/tailwind\n```\n\n----------------------------------------\n\nTITLE: SQL Query that Never Resolves\nDESCRIPTION: This SQL query is designed to never resolve, as it references an input that does not exist. It is used to demonstrate how the ButtonGroup handles unresolved queries. The expected behavior is that the ButtonGroup will not be populated with data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/button-range.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```sql neverResolve\n    SELECT '${inputs.madeUp.value}'\n```\n```\n\n----------------------------------------\n\nTITLE: Define Components in evidence.manifest.yaml\nDESCRIPTION: This YAML snippet illustrates how to define components in an `evidence.manifest.yaml` file for component exporting.  This manifest file lists the component names to be included in the plugin, offering an alternative to flagging each individual component file.  This method can be used in cases when a large component library already exists.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/create-component-plugin/index.md#2025-04-21_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n\"    components:\\n    - ComponentOne\\n    - ComponentTwo\\n    \"\n```\n\n----------------------------------------\n\nTITLE: Updating Evidence in VS Code\nDESCRIPTION: This command triggers an update to the latest version of Evidence through the VS Code extension. Access the command palette in VS Code to run this command and ensure the IDE is connected to the internet for downloading the latest update.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/guides/updating-your-app/index.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nEvidence: Update to Latest Version\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Component Page in Evidence\nDESCRIPTION: YAML frontmatter for a documentation page titled 'Custom' that configures its sidebar position and visibility settings. The page is positioned at position 99 in the navigation hierarchy but is set to not appear as a link in the sidebar.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/custom/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Custom\nsidebar_position: 99\nsidebar_link: false\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Value Component Props in Svelte\nDESCRIPTION: Updates the Value component's props to enable conditional color rendering based on certain conditions.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/core-components/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\nUpdated Value component's props for conditional color rendering\n```\n\n----------------------------------------\n\nTITLE: Generating Page Links with SQL Union Query\nDESCRIPTION: SQL query that creates a column of page links by combining two hardcoded path values using UNION ALL. Creates a single column named 'link_col' containing relative page paths.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/table-row-links.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect '/page-a' as link_col\nunion all\nselect '/nested/page-c' as link_col\n```\n\n----------------------------------------\n\nTITLE: Styling CSS Reference Import\nDESCRIPTION: CSS styling for markdown content that imports a theme reference and applies margin-top spacing to markdown elements.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/all-components/index.md#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@reference \"@evidence-dev/evidence/theme.css\";\n.markdown {\n    @apply mt-2;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Items for DataTable - React\nDESCRIPTION: This snippet utilizes the 'item_by_category' dataset and filters it based on the input category from page parameters. It renders a DataTable component with a specified column for items. The filtered data is showcased in the table with a single row per item.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/templated-pages/[category]/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DataTable \n\tdata={item_by_category.filter(d => d.category?.toLowerCase() === $page.params.category?.toLowerCase())}\n\tlink=item \n\trows=1\n>\n    <Column id=\"item\" />\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Executing Full Order Selection Query\nDESCRIPTION: This SQL snippet retrieves all orders based on the selected order ID from user inputs. It requires an active database connection and utilizes dynamic parameters for order ID. The input parameter '${inputs.selected_order_id.value}' determines the specific order to be fetched.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from orders where id = '${inputs.selected_order_id.value}'\n```\n\n----------------------------------------\n\nTITLE: BarChart Example with xSync Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence using the `xSync` data set. It renders a standard bar chart using the `xSync` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_13\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={xSync} series=fed_reserve_district x=established_date title={titles[3]}/>\n```\n\n----------------------------------------\n\nTITLE: Importing Evidence Themes Virtual Module Path\nDESCRIPTION: The module import path used to access Evidence themes functionality. This is a virtual module that requires additional configuration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/tailwind/src/vite-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$evidence/themes\n```\n\n----------------------------------------\n\nTITLE: SQL for Scale from Another Column\nDESCRIPTION: An SQL command that selects various fields including a 'scale_defining_number' used to control color scaling in a DataTable. This approach allows for external column value referencing to apply color scales.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"numbers_othercol\\n select 'A' as name, 1 as number, 2 as scale_defining_number, 'usd' as fmt\\n union all\\n select 'B',2,10,'eur'\\nunion all\\n select 'C',3,30,'num0'\\n union all\\n select 'D',4,20,'pct'\\n union all\\n select 'E',5,10,'usd'\\n union all\\n select 'F',6,5,'pct'\\n union all\\n select 'G',7,1,'pct'\\n union all\\n select 'H',8,44,'eur'\\n union all\\n select 'I',9,4,'#,##0.00\\\"kg\\\"'\\n union all\\n select 'J',10,55, 'usd'\\n order by number asc\\n \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Aggregating Users by Gender\nDESCRIPTION: SQL query that groups users by gender and counts how many users are in each gender category. Results are sorted alphabetically by gender.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/user-analytics.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) userCount, gender FROM users group by 2 order by 2 asc\n```\n\n----------------------------------------\n\nTITLE: Fetching All DuckDB Type Data with test_all_types() Function\nDESCRIPTION: A SQL query using a built-in function to retrieve a comprehensive test dataset containing examples of all DuckDB data types, limited to 2 rows for demonstration\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/types/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    *\nfrom test_all_types()\nlimit 2\n```\n\n----------------------------------------\n\nTITLE: Executing Another Simple SQL Query with Long Name in Evidence\nDESCRIPTION: This query is similar to the first working query but with a different calculation. It demonstrates how Evidence handles queries with long, descriptive names and performs basic arithmetic operations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/writing-queries/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n1 + 1 as metric,\ncurrent_date() as today\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Database Schema Function for SQLite in JavaScript\nDESCRIPTION: This function retrieves the schema of a SQLite database, including table names and column information for each table. It returns an array of objects representing the database structure.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/sqlite/README.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getDatabaseSchema(settings) {\n    const adapter = new SQLiteAdapter(settings);\n    try {\n        await adapter.connect();\n        const tables = await adapter.getTableNames();\n        const schema = [];\n        for (const table of tables) {\n            const columns = await adapter.getColumnNames(table);\n            schema.push({\n                name: table,\n                columns: columns.map(column => ({ name: column }))\n            });\n        }\n        return schema;\n    } finally {\n        await adapter.disconnect();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Input with Custom Title\nDESCRIPTION: Demonstrates adding a custom title to a TextInput component and accessing its value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/text-input.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<TextInput name=another_search_input title=\"Search\"/>\n\nInput: {inputs.another_search_input}  \nInput is set: {!inputs.another_search_input[Unset]}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Vercel Deploy with GitHub Actions - YAML\nDESCRIPTION: This YAML configuration file is used within GitHub Actions to automate the deployment of an Evidence app to Vercel on a scheduled basis. It sets up a workflow to post to a Vercel deploy hook at a specified time.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/vercel/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"name: Schedule Vercel Deploy\\non:\\n  workflow_dispatch:\\non:\\n  schedule:\\non:\\n    - cron: '0 10 * * *' # Once a day around 6am ET (10am UTC)\\njobs:\\non:\\n  build:\\non:\\n    name: Request Vercel Webhook\\non:\\n    runs-on: ubuntu-latest\\non:\\n    steps:\\non:\\n      - name: POST to Deploy Hook\\non:\\n        env:\\non:\\n          BUILD_HOOK: ${{ secrets.VERCEL_DEPLOY_HOOK }}\\non:\\n        run: curl -X POST -d {} $BUILD_HOOK\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration in Evidence Cloud\nDESCRIPTION: Formatting environment variables for Evidence Cloud deployment with specific key naming conventions\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/cloud/evidence-cloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nEVIDENCE_SOURCE__[your_source]__[option_name]\n```\n\n----------------------------------------\n\nTITLE: Unpivoting Data with R\nDESCRIPTION: This R snippet utilizes the tidyr package to perform an unpivot operation on a data frame. It restructures the data from wide format to long format by adding 'key' and 'value' columns while maintaining 'id'. The 'tidyr' library must be installed to use this functionality.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/tabs/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlibrary(tidyr)\n\ndf <- data.frame(\n    id = c(1, 2, 3),\n    col1 = c('a', 'b', 'c'),\n    col2 = c('d', 'e', 'f'),\n    col3 = c('g', 'h', 'i')\n)\n\ndf %>% pivot_longer(cols = starts_with(\"col\"), names_to = \"key\", values_to = \"value\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Update for @evidence-dev/faker-datasource in Markdown\nDESCRIPTION: This snippet shows the format used for displaying version updates in the changelog. It includes the version number, change type (e.g., Patch Changes), and a brief description of the changes made.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/faker/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.1.5\n\n### Patch Changes\n\n- 888bd8e50: Use a freshly seeded faker instance for each table\n```\n\n----------------------------------------\n\nTITLE: Querying Current State Values in SQL\nDESCRIPTION: SQL query that generates current state values for multiple US states. Each record contains a state code, month (2022-12), and a value of 321 (except CA with 198).\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/states/[state]/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 'CA' as state, '2022-12' as month, 198 as value\nunion all\nselect 'NY' as state, '2022-12' as month, 321 as value\nunion all\nselect 'TX' as state, '2022-12' as month, 321 as value\nunion all\nselect 'AL' as state, '2022-12' as month, 321 as value\nunion all\nselect 'DC' as state, '2022-12' as month, 321 as value\nunion all\nselect 'FL' as state, '2022-12' as month, 321 as value\nunion all\nselect 'GA' as state, '2022-12' as month, 321 as value\nunion all\nselect 'ID' as state, '2022-12' as month, 321 as value\nunion all\nselect 'IL' as state, '2022-12' as month, 321 as value\nunion all\nselect 'LA' as state, '2022-12' as month, 321 as value\nunion all\nselect 'MO' as state, '2022-12' as month, 321 as value\nunion all\nselect 'MI' as state, '2022-12' as month, 321 as value\nunion all\nselect 'MS' as state, '2022-12' as month, 321 as value\nunion all\nselect 'NE' as state, '2022-12' as month, 321 as value\nunion all\nselect 'NV' as state, '2022-12' as month, 321 as value\nunion all\nselect 'OH' as state, '2022-12' as month, 321 as value\nunion all\nselect 'OK' as state, '2022-12' as month, 321 as value\nunion all\nselect 'PA' as state, '2022-12' as month, 321 as value\nunion all\nselect 'RI' as state, '2022-12' as month, 321 as value\nunion all\nselect 'CT' as state, '2022-12' as month, 321 as value\nunion all\nselect 'SD' as state, '2022-12' as month, 321 as value\nunion all\nselect 'ND' as state, '2022-12' as month, 321 as value\nunion all\nselect 'MT' as state, '2022-12' as month, 321 as value\nunion all\nselect 'UT' as state, '2022-12' as month, 321 as value\nunion all\nselect 'VA' as state, '2022-12' as month, 321 as value\nunion all\nselect 'WV' as state, '2022-12' as month, 321 as value\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Evidence Project Dependencies\nDESCRIPTION: These commands clone the Evidence repository, navigate to the project directory, and install the necessary dependencies using pnpm.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder-no-index/[templated].md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/evidence-dev/evidence.git\ncd evidence\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Actions Workflow for Deployment\nDESCRIPTION: This GitHub Actions workflow automates the deployment of an Evidence app to GitHub Pages. It triggers on pushes to the 'main' branch, installs necessary dependencies, builds the project, uploads artifacts, and deploys the site. Adjust the workflow as needed by uncommenting and editing environment variables for your specific sources.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/github-pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches: 'main' # or whichever branch you want to deploy from\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Install Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: npm\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: build\n        env:\n          BASE_PATH: '/${{ github.event.repository.name }}'\n          ## Add and uncomment any environment variables here\n          ## EVIDENCE_SOURCE__my_source__username: ${{ secrets.EVIDENCE_SOURCE__MY_SOURCE__USERNAME }}\n          ## EVIDENCE_SOURCE__my_source__private_key: ${{ secrets.EVIDENCE_SOURCE__MY_SOURCE__PRIVATE_KEY }}\n        run: |\n          npm run sources\n          npm run build\n\n      - name: Upload Artifacts\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: 'build/${{ github.event.repository.name }}'\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n\n    permissions:\n      pages: write\n      id-token: write\n\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - name: Deploy\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n----------------------------------------\n\nTITLE: Starting Evidence Server via Command Line\nDESCRIPTION: Command to start the Evidence development server from project root directory\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: First-time Deployment to Firebase Hosting\nDESCRIPTION: This snippet shows the command to deploy an application to Firebase Hosting for the first time using the Firebase CLI.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/firebase/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only hosting\n```\n\n----------------------------------------\n\nTITLE: Schedule data refresh with cron expression\nDESCRIPTION: This YAML snippet demonstrates how to schedule data refresh using a cron expression within a GitHub Actions workflow.  The `schedule` trigger is used to run the workflow at specified intervals, in this case, every 10 minutes.  This allows for automated updates to the Evidence project deployed on Hugging Face Spaces.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/hugging-face-spaces/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches: 'main'\n  schedule:\n    # This is every 10 minutes\n    - cron: '*/10 * * * *' \n```\n\n----------------------------------------\n\nTITLE: Querying String with Dollar Sign in SQL\nDESCRIPTION: Selects a string containing a dollar sign, which could potentially cause issues with string interpolation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 'evi.+e$' as funky\n```\n\n----------------------------------------\n\nTITLE: Dropdown Querying Hashtags with SQL\nDESCRIPTION: This SQL snippet fetches hashtags from the database, returning their IDs as values and tags as labels, for populating a dropdown component. It sorts the results by the ID in ascending order. The query is essential for dynamically loading the tags into the dropdown UI element.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-debug.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id as value, tag as label from hashtags ORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Rendering Scatter Plots in React\nDESCRIPTION: This snippet utilizes ScatterPlot components to visualize full data and cases with missing values. It highlights data correlations through point representation, enhancing insights from disparate data points.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<ScatterPlot data={full}  series=series title=\"Full Data\"/>\n<ScatterPlot data={missingX}  series=series title=\"Missing X\"/>\n<ScatterPlot data={missingY} series=series title=\"Missing Y\"/>\n<ScatterPlot data={nulls}  series=series title=\"Nulls\"/>\n```\n\n----------------------------------------\n\nTITLE: Querying All Orders from Database in SQL\nDESCRIPTION: This SQL query selects all columns and rows from the 'orders' table. It's used to retrieve the complete set of order data for further processing or display in Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/hmr/pages/orders.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from orders;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Circular Reference Error in SQL (1)\nDESCRIPTION: Illustrates a circular reference error where two queries reference each other, causing an infinite loop.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${circular_reference_2}\n```\n\n----------------------------------------\n\nTITLE: Querying Ordered Categories by Selected Inputs\nDESCRIPTION: This SQL query retrieves categories from the 'needful_things.orders' table filtered by a selected category input. The query accepts inputs from user selections and orders the results in descending manner. It requires a selected category input from a UI element and renders a list of categories matching the input criteria.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/accordion/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect distinct category from needful_things.orders where category in ${inputs.selected_category.value} order by 1 desc\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Date in UI\nDESCRIPTION: Example showing how to display the value of a selected date from a DateInput component. This demonstrates how to reference the input value for display purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<DateInput\n    name=date_range_from_query\n    data={orders_by_day}\n    dates=day\n/>\n\nDate Selected: {inputs.date_input_from_query.value}\n```\n\n----------------------------------------\n\nTITLE: Building the Evidence Project for AWS Amplify\nDESCRIPTION: This snippet provides the frontend build command necessary for deploying the Evidence app to AWS Amplify. It executes the commands to prepare the project for deployment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/aws-amplify/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run sources && npm run build\n```\n\n----------------------------------------\n\nTITLE: Creating New Evidence Component in CLI\nDESCRIPTION: Command to create a new Evidence component. This launches an interactive prompt to guide the user through creating a new component in the project structure.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder/another-sub-folder/another-sub-folder/a-nested-page.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run new:component\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Evidence in Codespaces\nDESCRIPTION: Commands to install dependencies and start an Evidence project in Codespaces. The --host flag ensures the server is accessible through Codespaces.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/dev-server-startup/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run sources\nnpm run dev -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Evidence Logo in HTML\nDESCRIPTION: This HTML snippet displays the Evidence logo, with different versions for light and dark color schemes. It uses the <picture> element to provide alternative sources based on user preferences.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"./sites/docs/static/img/wordmark-dark.svg\">\n  <img alt=\"Evidence Logo\" src=\"./sites/docs/static/img/wordmark-light.svg\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Displaying Negative Delta Value\nDESCRIPTION: Example of displaying a negative delta value with percentage formatting.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/delta/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Delta data={growth} column=negative fmt=pct1 />\n```\n\n----------------------------------------\n\nTITLE: Querying Database with SQL\nDESCRIPTION: This SQL snippet retrieves all records from the 'orders' table, providing the complete data set for analysis or reporting. It does not require any specific dependencies aside from access to a database containing the 'orders' table. Key parameters are implicit as it fetches all columns and rows, so expected output is a dataset of all order entries.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/BigValueArrays.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: This command is used to check the version of Node.js installed on the system. It's a simple way to verify if the installed version meets the minimum requirements for Evidence.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/guides/system-requirements/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"node -v\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Displaying Variable in Svelte\nDESCRIPTION: Defines a numeric variable x in a Svelte script block and displays it using Svelte's curly brace syntax for reactivity. The script sets x to 10 and renders it in the template.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/partials/has-script-tag.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let x = 10;\n</script>\n\n{x}\n```\n\n----------------------------------------\n\nTITLE: Querying Orders Table with Comment Handling\nDESCRIPTION: This SQL query demonstrates how to handle semicolons and comments within a SQL query. It selects all columns from the 'orders' table with a limit of 5000 rows, and includes both single-line and multi-line comments, as well as escaped semicolons.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /* ; */ ';', * FROM orders LIMIT 5000 -- This should run without issues\n-- ;;;;\n/*\n    Hi;;\n*/; -- note that the trailing semicolon is all the way down here\n```\n\n----------------------------------------\n\nTITLE: Rendering Bar Chart with React\nDESCRIPTION: This snippet demonstrates how to render a Bar chart in React. The <Chart> component is used to input data for the <Bar> component, which enables the creation of visual representations of data organized into bars.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/mixed-type-charts/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Chart data={query_name}>\\n    <Bar/>\\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Value Component with Placeholder\nDESCRIPTION: Demonstrates using a placeholder value when writing reports before queries are ready.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/value/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Value placeholder=\"sales last year\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Data Series in JavaScript\nDESCRIPTION: Defines multiple data series arrays for testing different chart scenarios. Includes complete data sets, series with missing values, null values, and out-of-sync x-values. Each array contains objects with x, y, and series properties.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeries/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet numberSeriesFull = [\n{x: 1, series: 'a', y: 10},\n{x: 1, series: 'b', y: 24},\n{x: 1, series: 'c', y: 45},\n{x: 3, series: 'a', y: 16},\n{x: 3, series: 'b', y: 22},\n{x: 3, series: 'c', y: 53},\n{x: 2, series: 'a', y: 14},\n{x: 2, series: 'b', y: 26},\n{x: 2, series: 'c', y: 51},\n{x: 4, series: 'a', y: 11},\n{x: 4, series: 'b', y: 20},\n{x: 4, series: 'c', y: 60},\n{x: 5, series: 'a', y: 18},\n{x: 5, series: 'b', y: 28},\n{x: 5, series: 'c', y: 58},\n{x: 6, series: 'a', y: 15},\n{x: 6, series: 'b', y: 22},\n{x: 6, series: 'c', y: 63}\n]\n\nlet numberSeriesMissingY = [\n{x: 1, series: 'a', y: 10},\n{x: 1, series: 'b', y: 24},\n{x: 1, series: 'c', y: 45},\n{x: 2, series: 'a', y: 14},\n{x: 2, series: 'c', y: 51},\n{x: 3, series: 'a', y: 16},\n{x: 3, series: 'b', y: 22},\n{x: 3, series: 'c', y: 53},\n{x: 4, series: 'a', y: 11},\n{x: 4, series: 'b', y: 20},\n{x: 4, series: 'c', y: 60},\n{x: 5, series: 'a', y: 18},\n{x: 5, series: 'b', y: 28},\n{x: 5, series: 'c', y: 58},\n{x: 6, series: 'a', y: 15},\n{x: 6, series: 'b', y: 22},\n{x: 6, series: 'c', y: 63}\n]\n\nlet numberSeriesMissingX = [\n{x: 1, series: 'a', y: 10},\n{x: 1, series: 'b', y: 24},\n{x: 1, series: 'c', y: 45},\n{x: 3, series: 'a', y: 16},\n{x: 3, series: 'b', y: 22},\n{x: 3, series: 'c', y: 53},\n{x: 4, series: 'a', y: 11},\n{x: 4, series: 'b', y: 20},\n{x: 4, series: 'c', y: 60},\n{x: 5, series: 'a', y: 18},\n{x: 5, series: 'b', y: 28},\n{x: 5, series: 'c', y: 58},\n{x: 6, series: 'a', y: 15},\n{x: 6, series: 'b', y: 22},\n{x: 6, series: 'c', y: 63}\n]\n\nlet numberSeriesXSync = [\n{x: 1, series: 'a', y: 10},\n{x: 1, series: 'b', y: 24},\n{x: 1, series: 'c', y: 45},\n{x: 2, series: 'a', y: 14},\n{x: 2, series: 'b', y: 26},\n{x: 2, series: 'c', y: 51},\n{x: 3, series: 'a', y: 16},\n{x: 3, series: 'b', y: 22},\n{x: 3.3456, series: 'c', y: 53},\n{x: 4, series: 'a', y: 11},\n{x: 4, series: 'b', y: 20},\n{x: 4, series: 'c', y: 60},\n{x: 5, series: 'a', y: 18},\n{x: 5, series: 'b', y: 28},\n{x: 5, series: 'c', y: 58},\n{x: 6, series: 'a', y: 15},\n{x: 6, series: 'b', y: 22},\n{x: 6, series: 'c', y: 63}\n]\n\nlet numberSeriesNulls = [\n{x: 1, series: 'a', y: 10},\n{x: 1, series: 'b', y: 24},\n{x: 1, series: 'c', y: 45},\n{x: 2, series: 'a', y: null},\n{x: 2, series: 'b', y: 26},\n{x: 2, series: 'c', y: 51},\n{x: 3, series: 'a', y: 16},\n{x: 3, series: 'b', y: 22},\n{x: 3, series: 'c', y: 53},\n{x: 4, series: 'a', y: 11},\n{x: 4, series: 'b', y: null},\n{x: 4, series: 'c', y: 60},\n{x: 5, series: 'a', y: 18},\n{x: 5, series: 'b', y: 28},\n{x: 5, series: 'c', y: 58},\n{x: 6, series: 'a', y: 15},\n{x: 6, series: 'b', y: 22},\n{x: 6, series: 'c', y: 63}\n]\n\nlet barTest = [\n    {x: 1, y: 10, series: \"A\"},\n    {x: 3, y: 12, series: \"A\"},\n    {x: 1, y: 22, series: \"B\"},\n    {x: 3, y: 24, series: \"B\"}\n]\n\nlet full5 = [\n  { x: 1, series: 'a', y: 10 },\n  { x: 1, series: 'b', y: 24 },\n  { x: 1, series: 'c', y: 45 },\n  { x: 2, series: 'a', y: undefined },\n  { x: 2, series: 'b', y: undefined },\n  { x: 2, series: 'c', y: undefined },\n  { x: 3, series: 'a', y: 16 },\n  { x: 3, series: 'b', y: 22 },\n  { x: 3, series: 'c', y: 53 },\n  { x: 4, series: 'a', y: 11 },\n  { x: 4, series: 'b', y: 20 },\n  { x: 4, series: 'c', y: 60 },\n  { x: 5, series: 'a', y: 18 },\n  { x: 5, series: 'b', y: 28 },\n  { x: 5, series: 'c', y: 58 },\n  { x: 6, series: 'a', y: 15 },\n  { x: 6, series: 'b', y: 22 },\n  { x: 6, series: 'c', y: 63 }\n]\n```\n\n----------------------------------------\n\nTITLE: Counting Aggregated Results with SQL\nDESCRIPTION: This SQL snippet counts the number of months from a previous query result. It uses a Common Table Expression (CTE) to reference the results from the 'orders_by_category' query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect count(*) as n_months from ${orders_by_category}\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation\nDESCRIPTION: Creates a basic slider input with default value and USD formatting\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Slider\n    title=\"sales\" \n    name=sales\n    defaultValue=50\n    fmt=\"usd0\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Partial SQL Query in Evidence\nDESCRIPTION: This snippet defines a simple SQL query as a partial named 'partial_declared_query'. It then demonstrates how to reference the first result of this query in the content using curly brace notation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/partials/declares-query.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 'hello from partial land'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Circular Reference Error in SQL (2)\nDESCRIPTION: Second part of the circular reference error example, completing the loop with the first query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect * from ${circular_reference_1}\n```\n\n----------------------------------------\n\nTITLE: Checking Version Numbers - SQL\nDESCRIPTION: This SQL snippet is used to check the versions of npm and NodeJS for the Evidence application. By running these commands, users can verify the versions in use, which is crucial for troubleshooting and ensuring compatibility.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/guides/troubleshooting/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect '<code>npm view @evidence-dev/evidence version</code>' as \"Command\", 'Check Evidence version' as \"Description\" UNION ALL\nselect '<code>node -v</code>' as \"Command\", 'Check NodeJS version' as \"Description\"\n```\n\n----------------------------------------\n\nTITLE: Reference Line Missing X2/Y2 Error Example\nDESCRIPTION: This example shows an error case where a reference line is provided with only starting coordinates (x,y) but no ending coordinates (x2,y2). Reference lines require either a single axis value or both start and end points.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<ScatterPlot\n    data={countries}\n    x=gdp_usd\n    y=gdp_growth_pct1\n    tooltipTitle=country\n    series=continent\n>\n   <ReferenceLine \n    x=5000 \n    y=0.01 \n    label=\"Error\"/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Horizontal BarChart Example with Missing Y Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal bar chart using the `missingY` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, and sets the title to \"Missing Y\".\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_21\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingY} x=established_date series=fed_reserve_district swapXY=true title=\"Missing Y\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Timestamp_ntz Data in Snowflake\nDESCRIPTION: Creates a sample dataset using Snowflake's TIMESTAMP_NTZ (No Time Zone) type. Demonstrates timestamps without timezone information for time-agnostic data storage.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/snowflake-dates/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect\n        to_timestamp_ntz('2020-04-22') as timestamp_ntz,\n        100 as sales_usd\nunion all\nselect\n        to_timestamp_ntz('2020-04-23') as timestamp_ntz,\n        110 as sales_usd\nunion all\nselect\n        to_timestamp_ntz('2020-04-24') as timestamp_ntz,\n        120 as sales_usd\nunion all\nselect\n        to_timestamp_ntz('2020-04-25') as timestamp_ntz,\n        140 as sales_usd\n```\n\n----------------------------------------\n\nTITLE: SQL Query for LA Locations Data\nDESCRIPTION: SQL query to select data from the la_locations table and create a link column for each point.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect *, 'https://www.google.com/search?q=' || point_name as link_col from la_locations\n```\n\n----------------------------------------\n\nTITLE: Querying Orders with Comparisons\nDESCRIPTION: This SQL query selects all columns from a table referenced by the variable `orders_with_comparisons`, filtering the results to include only records where the `category` is 'Odd Equipment'. This query is intended to provide data for the BigValue component, specifically for displaying metrics related to 'Odd Equipment'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/big-value/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"select * from ${orders_with_comparisons}\nwhere category = 'Odd Equipment'\"\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Color to Info Component in Markdown\nDESCRIPTION: This snippet illustrates how to apply a custom color (red) to the Info component's tooltip icon.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/info/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nData was sourced from the World Bank <Info description=\"World Economic Indicators dataset from past 12 months\" color=\"red\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Partial Bank Dataset Array - JavaScript\nDESCRIPTION: Defines a partial array of bank establishment data, showing the beginning of a dataset structure similar to the other arrays.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet xSync = [\n    {fed_reserve_district: 'NY', established_date: '2015-01-01', banks: 1},\n    {fed_reserve_district: 'SF', established_date: '2015-01-01', banks: 0},\n    {fed_reserve_district: 'ATL', established_date: '2015-01-01', banks: 0},\n]\n```\n\n----------------------------------------\n\nTITLE: Horizontal Stacked BarChart with Missing Y Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a horizontal 100% stacked bar chart using the `missingY` dataset, `established_date` as the x-axis, `fed_reserve_district` as the series, enables swapping X and Y axes, sets the title to \"Missing Y\", and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_26\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingY} x=established_date series=fed_reserve_district swapXY=true title=\"Missing Y\" type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Running Evidence Development Server\nDESCRIPTION: This command starts the Evidence development server, allowing developers to work on and test the project locally.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder-no-index/[templated].md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Non-existent Query Variable using JSON Stringify\nDESCRIPTION: Attempts to stringify and display a test_query variable that is undefined or not accessible in the current scope.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/partials/uses-query.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{JSON.stringify(test_query)}\n```\n\n----------------------------------------\n\nTITLE: Setting Value-Based Node Labels in Sankey Diagram with Svelte\nDESCRIPTION: Svelte code that configures a Sankey diagram to display value-based node labels instead of names. This displays the calculated value totals at each node rather than the node names.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/sankey-diagram/index.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<SankeyDiagram \n  data={simple_sankey} \n  sourceCol=source \n  targetCol=target \n  valueCol=amount \n  percentCol=percent \n  nodeLabels=value\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Blockquotes in Markdown\nDESCRIPTION: Shows how to create blockquotes including nested blockquotes using the greater-than symbol in markdown.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n> This is a blockquote\n>\n> It can span multiple lines\n>\n> > And can be nested\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Variables for Chart Examples in JavaScript\nDESCRIPTION: This JavaScript code creates an array of country economic data and a function to generate date ranges. It also sets up an interval to periodically update the generated date ranges, which are later used in chart examples.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet countries = [\n    {country: 'United States', continent: 'North America', gdp_usd: 22996, gdp_growth_pct1: 0.017, interest_rate_pct1: 0.025, inflation_rate_pct1: 0.085, jobless_rate_pct1: 0.037, gov_budget: -16.7, debt_to_gdp: 137.2, current_account: -3.6, population: 332.4},\n    {country: 'China', continent: 'Asia', gdp_usd: 17734, gdp_growth_pct1: 0.004, interest_rate_pct1: 0.0365, inflation_rate_pct1: 0.027, jobless_rate_pct1: 0.054, gov_budget: -3.7, debt_to_gdp: 66.8, current_account: 1.8, population: 1412.6},\n    {country: 'Japan', continent: 'Asia', gdp_usd: 4937, gdp_growth_pct1: 0.002, interest_rate_pct1: -0.001, inflation_rate_pct1: 0.026, jobless_rate_pct1: 0.026, gov_budget: -12.6, debt_to_gdp: 266.2, current_account: 3.2, population: 125.31},\n    {country: 'Germany', continent: 'Europe', gdp_usd: 4223, gdp_growth_pct1: 0.017, interest_rate_pct1: 0.005, inflation_rate_pct1: 0.079, jobless_rate_pct1: 0.055, gov_budget: -3.7, debt_to_gdp: 69.3, current_account: 7.4, population: 83.16},\n    {country: 'United Kingdom', continent: 'Europe', gdp_usd: 3187, gdp_growth_pct1: 0.029, interest_rate_pct1: 0.0175, inflation_rate_pct1: 0.101, jobless_rate_pct1: 0.038, gov_budget: -6, debt_to_gdp: 95.9, current_account: -2.6, population: 67.53},\n    {country: 'India', continent: 'Asia', gdp_usd: 3173, gdp_growth_pct1: 0.135, interest_rate_pct1: 0.054, inflation_rate_pct1: 0.0671, jobless_rate_pct1: 0.078, gov_budget: -9.4, debt_to_gdp: 73.95, current_account: -1.7, population: 1380},\n    {country: 'France', continent: 'Europe', gdp_usd: 2937, gdp_growth_pct1: 0.042, interest_rate_pct1: 0.005, inflation_rate_pct1: 0.058, jobless_rate_pct1: 0.074, gov_budget: -6.5, debt_to_gdp: 112.9, current_account: 0.4, population: 67.63},\n    {country: 'Italy', continent: 'Europe', gdp_usd: 2100, gdp_growth_pct1: 0.047, interest_rate_pct1: 0.005, inflation_rate_pct1: 0.084, jobless_rate_pct1: 0.079, gov_budget: -7.2, debt_to_gdp: 150.8, current_account: 2.5, population: 59.24},\n    {country: 'Canada', continent: 'North America', gdp_usd: 1991, gdp_growth_pct1: 0.029, interest_rate_pct1: 0.025, inflation_rate_pct1: 0.076, jobless_rate_pct1: 0.049, gov_budget: -4.7, debt_to_gdp: 117.8, current_account: 0.1, population: 38.44},\n    {country: 'South Korea', continent: 'Asia', gdp_usd: 1799, gdp_growth_pct1: 0.029, interest_rate_pct1: 0.025, inflation_rate_pct1: 0.057, jobless_rate_pct1: 0.029, gov_budget: -6.1, debt_to_gdp: 42.6, current_account: 3.5, population: 51.74},\n    {country: 'Russia', continent: 'Europe', gdp_usd: 1776, gdp_growth_pct1: -0.04, interest_rate_pct1: 0.08, inflation_rate_pct1: 0.151, jobless_rate_pct1: 0.039, gov_budget: 0.8, debt_to_gdp: 18.2, current_account: 6.8, population: 145.55},\n    {country: 'Brazil', continent: 'South America', gdp_usd: 1609, gdp_growth_pct1: 0.032, interest_rate_pct1: 0.1375, inflation_rate_pct1: 0.1007, jobless_rate_pct1: 0.091, gov_budget: -4.5, debt_to_gdp: 80.27, current_account: -1.8, population: 213.32}\n]\n\nlet generated_multiple_dates = [{ start_date: '2019-12-05', end_date: '2019-12-31' }, { start_date: '2020-07-14', end_date: '2020-08-20' }, { start_date: '2021-04-14', end_date: '2021-05-03' }]\n\nconst date_range = 1638316800000 - 1546300800000;\n\nconst generate_date = (third) => {\n\tconst start = 1546300800000 + (date_range / 3) * (third - 1);\n\tconst end = start + date_range / 3;\n\treturn new Date(start + Math.random() * (end - start));\n};\n\nconst interval = setInterval(() => {\n\tgenerated_multiple_dates = [\n\t\t{\n\t\t\tstart_date: generate_date(1),\n\t\t\tend_date: generate_date(1)\n\t\t},\n\t\t{\n\t\t\tstart_date: generate_date(2),\n\t\t\tend_date: generate_date(2)\n\t\t},\n\t\t{\n\t\t\tstart_date: generate_date(3),\n\t\t\tend_date: generate_date(3)\n\t\t}\n\t]\n}, 1000);\n\nonDestroy(() => {\n\tclearInterval(interval);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Category Links in Svelte\nDESCRIPTION: Uses Svelte's each block to dynamically generate an unordered list of category links based on retrieved categories\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/categories/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Svelte\nCODE:\n```\n<ul>\n{#each categories as { category }}\n\t<li>\n\t\t<a href=\"/categories/{category}/\">{category}</a>\n\t</li>\n{/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Input Implementation\nDESCRIPTION: Demonstrates a basic TextInput component usage and how to access its value and check if it's set.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/text-input.md#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<TextInput name=search_input/>\n\nInput: {inputs.search_input}  \nInput is set: {!inputs.search_input[Unset]}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js and pnpm for Evidence Development\nDESCRIPTION: This snippet shows the commands to install Node.js using nvm and pnpm, which are prerequisites for setting up the Evidence development environment.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder-no-index/[templated].md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 18\nnpm install -g pnpm@8\n```\n\n----------------------------------------\n\nTITLE: Calculating Average User Engagement Metrics\nDESCRIPTION: Complex SQL query that calculates multiple engagement metrics per user (likes given, likes received, comments posted, posts made) and then averages these metrics across all users. Uses a CTE with subqueries to gather metrics from different tables.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/user-analytics.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nWITH USER_METRICS AS (\n    SELECT user_name,\n            (SELECT COUNT(*) FROM LIKES L WHERE L.user_id = U.id) as user_likes,\n            (SELECT COUNT(*) FROM COMMENTS C WHERE C.user_id = U.id) as user_comments,\n            (SELECT COUNT(*) FROM POSTS P WHERE P.user_id = U.id) as user_posts,\n            (\n                SELECT COUNT(distinct l.id) FROM posts p\n                INNER JOIN likes l on p.id = l.post_id\n                WHERE p.user_id = u.id\n            ) as recieved_likes\n    from users U\n)\nSELECT  AVG(user_likes) as avg_likes_given,\n        AVG(recieved_likes) as avg_likes_received,\n        AVG(user_comments) as avg_comments,\n        AVG(user_posts) as avg_posts\nFROM USER_METRICS\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple SQL Query in Evidence\nDESCRIPTION: A basic SQL query that selects the numeric value 123 and aliases it as 'value_col'. This query is named 'my_query' which makes it available as a data object in the Evidence framework.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/big-value-link.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 123 as value_col\n```\n\n----------------------------------------\n\nTITLE: Installing PNPM Package Manager\nDESCRIPTION: Command to globally install the PNPM package manager as a prerequisite for development\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Datasets for Data Visualization in JavaScript\nDESCRIPTION: Defines three sample datasets with date and multiple y-values for visualization testing. The datasets include a full dataset, one with a missing x-value (1904), and one with null values in the y-columns to demonstrate how charts handle incomplete data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateMulty/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = \n[\n    {date: '1900-01-01', y1: 103, y2: 135, y3: 88},\n    {date: '1901-01-01', y1: 105, y2: 138, y3: 93},\n    {date: '1902-01-01', y1: 106, y2: 132, y3: 103},\n    {date: '1903-01-01', y1: 108, y2: 130, y3: 105},\n    {date: '1904-01-01', y1: 109, y2: 128, y3: 102},\n    {date: '1905-01-01', y1: 111, y2: 124, y3: 101},\n    {date: '1906-01-01', y1: 120, y2: 122, y3: 100},\n    {date: '1907-01-01', y1: 133, y2: 131, y3: 100},\n    {date: '1908-01-01', y1: 142, y2: 128, y3: 99},\n    {date: '1909-01-01', y1: 156, y2: 135, y3: 97},\n    {date: '1910-01-01', y1: 168, y2: 137, y3: 95}\n]\n\nlet missingX =\n[\n    {date: '1900-01-01', y1: 103, y2: 135, y3: 88},\n    {date: '1901-01-01', y1: 105, y2: 138, y3: 93},\n    {date: '1902-01-01', y1: 106, y2: 132, y3: 103},\n    {date: '1903-01-01', y1: 108, y2: 130, y3: 105},\n    {date: '1905-01-01', y1: 111, y2: 124, y3: 101},\n    {date: '1906-01-01', y1: 120, y2: 122, y3: 100},\n    {date: '1907-01-01', y1: 133, y2: 131, y3: 100},\n    {date: '1908-01-01', y1: 142, y2: 128, y3: 99},\n    {date: '1909-01-01', y1: 156, y2: 135, y3: 97},\n    {date: '1910-01-01', y1: 168, y2: 137, y3: 95}\n]\n\nlet nulls =\n[\n    {date: '1900-01-01', y1: 103, y2: 135, y3: 88},\n    {date: '1901-01-01', y1: 105, y2: 138, y3: 93},\n    {date: '1902-01-01', y1: 106, y2: null, y3: 103},\n    {date: '1903-01-01', y1: 108, y2: 130, y3: 105},\n    {date: '1904-01-01', y1: 109, y2: 128, y3: 102},\n    {date: '1905-01-01', y1: 111, y2: 124, y3: null},\n    {date: '1906-01-01', y1: 120, y2: 122, y3: 100},\n    {date: '1907-01-01', y1: 133, y2: 131, y3: 100},\n    {date: '1908-01-01', y1: 142, y2: 128, y3: 99},\n    {date: '1909-01-01', y1: 156, y2: 135, y3: 97},\n    {date: '1910-01-01', y1: 168, y2: 137, y3: 95}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Colors in Evidence Configuration\nDESCRIPTION: YAML configuration showing how to create custom color tokens in Evidence. This demonstrates both single-value colors and separate light/dark mode definitions.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n\tcolors:\n\t\tmyColor: \"#10b981\"\n\t\tmyOtherColor:\n\t\t\tlight: \"#c026d3\"\n\t\t\tdark: \"#f472b6\"\n```\n\n----------------------------------------\n\nTITLE: Borderless Embed Component in Markdown\nDESCRIPTION: Illustrates how to remove the border from the Embed component by setting the border attribute to false. This creates a seamless integration of the embedded content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/embed/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Embed \n    url=\"https://www.youtube.com/embed/UiCioBZ5IDU?si=dychrQurRTlhz9DN\"\n    title=\"Sample Video\"\n    border=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in SQLite Database\nDESCRIPTION: This query retrieves the names of all tables in the SQLite database schema. It's useful for getting an overview of the database structure.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/sqlite-dates/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name FROM sqlite_schema WHERE type ='table'\n```\n\n----------------------------------------\n\nTITLE: USMap with Links and Titles\nDESCRIPTION: Example showing how to implement clickable state links and add titles to the map.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/us-map/index.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<USMap\n\tdata={state_current}\n\tstate=state\n\tvalue=value\n\tabbreviations=true\n\tlink=state_link\n\ttitle=\"Sales by State\"\n\tsubtitle=\"{most_recent_month[0].month}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Country Data with SQL Unions\nDESCRIPTION: SQL query that creates a dataset with country information by using UNION ALL to combine multiple records. Each record contains date, monetary value, country name, category, ID, country code, flag URL, and search URL.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/new-table/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect date '2020-05-05' as date, 342 as value_usd, 'Denmark' as country, 'B' as category, 102948 as country_id, 'DK' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/DK.png' as flag, 'https://www.google.ca/search?q=denmark' as country_url\nunion all\nselect date '2020-05-06' as date, 331 as value_usd, 'Estonia' as country, 'D' as category, 102495 as country_id, 'EE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/EE.png' as flag, 'https://www.google.ca/search?q=estonia' as country_url\nunion all\nselect date '2020-05-07' as date, 98 as value_usd, 'Finland' as country, 'B' as category, 104962 as country_id, 'FI' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/FI.png' as flag, 'https://www.google.ca/search?q=finland' as country_url\nunion all\nselect date '2020-05-08' as date, 128 as value_usd, 'Ghana' as country, 'C' as category, 100599 as country_id, 'GH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/GH.png' as flag, 'https://www.google.ca/search?q=ghana' as country_url\nunion all\nselect date '2020-05-09' as date, 153 as value_usd, 'Honduras' as country, 'D' as category, 102494 as country_id, 'HN' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/HN.png' as flag, 'https://www.google.ca/search?q=honduras' as country_url\nunion all\nselect date '2020-05-10' as date, 384 as value_usd, 'India' as country, 'A' as category, 101948 as country_id, 'IN' as country_code,  'https://flaglog.com/codes/standardized-rectangle-120px/IN.png' as flag, 'https://www.google.ca/search?q=india' as country_url\nunion all\nselect date '2020-05-11' as date, 234 as value_usd, 'Ireland' as country, 'B' as category, 100987 as country_id, 'IE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/IE.png' as flag, 'https://www.google.ca/search?q=ireland' as country_url\nunion all\nselect date '2020-05-12' as date, 67 as value_usd, 'Jamaica' as country, 'C' as category, 101248 as country_id, 'JM' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/JM.png' as flag, 'https://www.google.ca/search?q=jamaica' as country_url\nunion all\nselect date '2020-05-13' as date, 125 as value_usd, 'Kenya' as country, 'C' as category, 101947 as country_id, 'KE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/KE.png' as flag, 'https://www.google.ca/search?q=kenya' as country_url\nunion all\nselect date '2020-05-14' as date, 118 as value_usd, 'Lebanon' as country, 'D' as category, 108849 as country_id, 'LB' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/LB.png' as flag, 'https://www.google.ca/search?q=lebanon' as country_url\nunion all\nselect date '2020-05-15' as date, 263 as value_usd, 'Mexico' as country, 'B' as category, 100763 as country_id, 'MX' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/MX.png' as flag, 'https://www.google.ca/search?q=mexico' as country_url\nunion all\nselect date '2020-05-16' as date, 211 as value_usd, 'Nigeria' as country, 'A' as category, 100837 as country_id, 'NG' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/NG.png' as flag, 'https://www.google.ca/search?q=nigeria' as country_url\nunion all\nselect date '2020-05-17' as date, 192 as value_usd, 'Oman' as country, 'D' as category, 100993 as country_id, 'OM' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/OM.png' as flag, 'https://www.google.ca/search?q=oman' as country_url\nunion all\nselect date '2020-05-18' as date, 59 as value_usd, 'Philippines' as country, 'D' as category, 104128 as country_id, 'PH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/PH.png' as flag, 'https://www.google.ca/search?q=philippines' as country_url\nunion all\nselect date '2020-05-19' as date, 113 as value_usd, 'Qatar' as country, 'C' as category, 100181 as country_id, 'QA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/QA.png' as flag, 'https://www.google.ca/search?q=qatar' as country_url\nunion all\nselect date '2020-05-20' as date, 190 as value_usd, 'Romania' as country, 'A' as category, 101384 as country_id, 'RO' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/RO.png' as flag, 'https://www.google.ca/search?q=romania ! startups' as country_url\nunion all\nselect date '2020-05-21' as date, 190 as value_usd, 'Sweden' as country, 'B' as category, 101847 as country_id, 'SE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/SE.png' as flag, 'https://www.google.ca/search?q=sweden' as country_url\nunion all\nselect date '2020-05-22' as date, 248 as value_usd, 'Thailand' as country, 'C' as category, 104837 as country_id, 'TH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/TH.png' as flag, 'https://www.google.ca/search?q=thailand' as country_url\nunion all\nselect date '2020-05-23' as date, 168 as value_usd, 'Ukraine' as country, 'C' as category, 101938 as country_id, 'UA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/UA.png' as flag, 'https://www.google.ca/search?q=ukraine' as country_url\nunion all\nselect date '2020-05-24' as date, 101 as value_usd, 'Vietnam' as country, 'A' as category, 104948 as country_id, 'VN' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/VN.png' as flag, 'https://www.google.ca/search?q=vietnam' as country_url\nunion all\nselect date '2020-05-25' as date, 67 as value_usd, 'Yemen' as country, 'B' as category, 100774 as country_id, 'YE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/YE.png' as flag, 'https://www.google.ca/search?q=yemen' as country_url\nunion all\nselect date '2020-05-26' as date, 100 as value_usd, 'Zimbabwe' as country, 'A' as category, 100337 as country_id, 'ZW' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/ZW.png' as flag, 'https://www.google.ca/search?q=zimbabwe' as country_url\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Major Version 4.0.0\nDESCRIPTION: Major version change introducing DuckDB and .parquet files for data handling, along with QueryStore implementation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/preprocess/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n- cb0fc468: This update includes major changes to the way Evidence interacts with data.\n  Instead of running queries against the production database, and including it\n  with the project as pre-rendered, static JSON data; those queries are now stored as .parquet files.\n\n  .parquet enables the use of DuckDB on the client, allowing for much greater levels of interactivity\n  on pages, and interoperability between different data sources (e.g. joins across postgres & mysql).\n\n- e1facffd: Add QueryStore concept\n\n  - Loads data as it is requested, rather than all at page-load / build\n  - Uses duckdb to get data length / column data\n  - Ties metadata, mutation queries, and data together to make component development easier\n  - Provides information regarding loading (and query errors in the future)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Theme Colors in YAML\nDESCRIPTION: Example of defining a custom theme color in the evidence.config.yaml file. The color name should be in camelCase when defined, but used in kebab-case in Tailwind classes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/tailwind/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmyCustomColor: '#FF0000'\n```\n\n----------------------------------------\n\nTITLE: Initializing Complete Bank Dataset Array - JavaScript\nDESCRIPTION: Creates a comprehensive array of bank establishment data with zero values instead of nulls, providing complete coverage across all districts and time periods.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = [\n    {fed_reserve_district: 'NY', established_date: '2015-01-01', banks: 1},\n    {fed_reserve_district: 'SF', established_date: '2015-01-01', banks: 0},\n    // ... additional entries\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Builds and Deployments with npm on Cloudflare Pages\nDESCRIPTION: This snippet specifies the commands to build the Evidence project for deployment on Cloudflare Pages, along with the output directory. Ensure that you have Node.js and npm installed, and your project correctly configured. These commands build the source files and prepare them for serving.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/cloudflare-pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run sources && npm run build\n```\n\n----------------------------------------\n\nTITLE: Fetching Sample Orders Data\nDESCRIPTION: This query selects all columns from the orders table, limiting the result to 100 rows. It's used to get a quick look at the structure and content of the orders data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/sqlite-dates/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from orders\nlimit 100\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Markdown\nDESCRIPTION: Demonstrates how to create both external and internal links in markdown using the [text](url) syntax.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/markdown/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[External link](https://google.com)\n\n[Internal link](/another/page)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Major Version 6.0.0\nDESCRIPTION: Major version update implementing theming and appearances functionality.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/preprocess/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n- e2c95d172: Theming & Appearances\n```\n\n----------------------------------------\n\nTITLE: Invalid Log Scale Area Chart Without Y-axis in Evidence\nDESCRIPTION: Example of an improperly configured area chart with log scale enabled but no y-axis specified. This shows an invalid configuration for reference.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/area-chart/+page.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<AreaChart\n    data={orders_by_category.filter(d => d.category === \"Sinister Toys\")}\n    x=month\n    yLog=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Validating Data Properties in JavaScript\nDESCRIPTION: This snippet checks if an array named 'nully' has been loaded and verifies that specific properties are true or false for its elements. It throws an error if any conditions are not met, ensuring the integrity of the data before further processing.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/nullish-bools.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$: if (nully.loaded) {\\n\\tconsole.log([...nully])\\n\\tif (nully[0].from_canada !== true) throw new Error('from_canada should be true');\\n\\tif (nully[1].from_canada !== true) throw new Error('from_canada should be true');\\n\\tif (nully[2].from_canada !== false) throw new Error('from_canada should be false');\\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming and Overriding Components\nDESCRIPTION: This YAML snippet shows how to rename a component before overriding it in Evidence, which helps in maintaining custom implementations while using standard library components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/component-plugins/index.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    @evidence-dev/core-components: {}\n    @acme/charting:\n        aliases:\n            CustomLineChart: LineChart # Rename CustomLineChart\n        overrides:\n            - LineChart # Override LineChart with the now renamed CustomLineChart\n```\n\n----------------------------------------\n\nTITLE: Scheduling Deployment Jobs with GitHub Actions\nDESCRIPTION: The snippet adds a schedule trigger to the GitHub Actions workflow for deploying Evidence apps, allowing periodic deployment using cron expressions. This example is configured to run every 10 minutes and can be modified depending on your specific deployment schedule needs.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/self-host/github-pages/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches: 'main'\n  schedule:\n    # This is every 10 minutes\n    - cron: '*/10 * * * *'\n```\n\n----------------------------------------\n\nTITLE: Styled Modal with Markdown Support\nDESCRIPTION: Demonstrates how to use markdown formatting within modal content, including bold and italic text styles.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/modal/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Modal title=\"Title\" buttonText='Open Modal'>\n\n**bold** and _italic_ text is supported.\n\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Calendar Heatmap Without Year Label in Markdown\nDESCRIPTION: Demonstrates how to hide the year label in a calendar heatmap visualization using the yearLabel property set to false.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/calendar-heatmap/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<CalendarHeatmap \n    data={orders_by_day_2021}\n    date=day\n    value=sales\n    yearLabel=false\n/> \n```\n\n----------------------------------------\n\nTITLE: Checking Query Result Type in JavaScript\nDESCRIPTION: This JavaScript expression checks if the 'external' variable is an instance of the Query class, likely for type verification or conditional logic.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/sql-file-query.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ external instanceof Query }\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Test Scripts\nDESCRIPTION: Diff showing how to modify the test scripts in package.json to support both development and preview testing environments using cross-env.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n{\n\t\"scripts\": {\n-\t\t\"test\": \"evidence build\",\n+\t\t\"test:preview\": \"cross-env playwright test\",\n+\t\t\"test:dev\": \"cross-env DEV=true playwright test\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Data for Delta Component Examples\nDESCRIPTION: This SQL query generates sample data with sales figures and dates. The data includes null values to demonstrate how the Delta component handles missing data. This data is used throughout the document to showcase the Delta component's functionality with various input values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/delta/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 100 as sales, '2020-01-01'::date as date\nunion all\nselect null as sales, '2020-02-01'::date as date\nunion all\nselect 0 as sales, '2020-03-01'::date as date\nunion all\nselect 170 as sales, '2020-04-01'::date as date\nunion all\nselect 190 as sales, '2020-05-01'::date as date\n```\n\n----------------------------------------\n\nTITLE: Point Map for Locations\nDESCRIPTION: Evidence PointMap component displaying location points\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/maps.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<PointMap title=\"Point Map\" data={la_locations} lat=lat long=long/>\n```\n\n----------------------------------------\n\nTITLE: Using Different Port for Evidence Development Server\nDESCRIPTION: Command to start the Evidence development server on a specific port. This is useful when the default port is already in use or when running multiple instances.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder/another-sub-folder/another-sub-folder/a-nested-page.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -- --port 4001\n```\n\n----------------------------------------\n\nTITLE: Svelte DataTable Rendering\nDESCRIPTION: Renders the 'nully' dataset in a DataTable component for display purposes\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/nullish-dates.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={nully} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Data Arrays in JavaScript\nDESCRIPTION: Defines three test data arrays: full (complete dataset), missingX (dataset with missing x values), and nulls (dataset with null y values). Each array contains x,y coordinate pairs for visualization testing.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSingle/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet full = [\n    {x: 14, y: 34},\n    {x: 15, y: 57},\n    {x: 16, y: 26},\n    {x: 17, y: 41},\n    {x: 18, y: 41},\n    {x: 19, y: 62},\n    {x: 20, y: 32},\n    {x: 21, y: 52},\n    {x: 22, y: 48},\n    {x: 23, y: 52},\n    {x: 24, y: 48},\n    {x: 25, y: 48}\n]\n\nlet missingX =[\n    {x: 14, y: 34},\n    {x: 15, y: 57},\n    {x: 16, y: 26},\n    {x: 17, y: 41},\n    {x: 18, y: 41},\n    {x: 20, y: 32},\n    {x: 21, y: 52},\n    {x: 22, y: 48},\n    {x: 23, y: 52},\n    {x: 24, y: 48},\n    {x: 25, y: 48}\n]\n\nlet nulls =[\n    {x: 14, y: 34},\n    {x: 15, y: 57},\n    {x: 16, y: null},\n    {x: 17, y: 41},\n    {x: 18, y: 41},\n    {x: 19, y: 62},\n    {x: 20, y: 32},\n    {x: 21, y: 52},\n    {x: 22, y: null},\n    {x: 23, y: null},\n    {x: 24, y: 48},\n    {x: 25, y: 48}\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Cross-env Dependency\nDESCRIPTION: Command to install cross-env as a dev dependency, which will be used for setting environment variables across different platforms in test scripts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm install -D cross-env --ignore-scripts\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Orders by State Analysis\nDESCRIPTION: This SQL query aggregates sales data by state, calculating the total sales amount and number of orders for each state (excluding Alaska). The results are ordered by total sales in descending order.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    state,\n    sum(sales) as sales_usd,\n    count(*) as num_orders\nfrom needful_things.orders\nwhere state != 'Alaska'\ngroup by all\norder by sales_usd desc\n```\n\n----------------------------------------\n\nTITLE: Section Grouping with Subtotals and Delta Formatting\nDESCRIPTION: Creates a section-grouped DataTable with subtotals and columns featuring distinct formatting, including delta indicators for visualizing changes with customized neutral thresholds.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_47\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders} groupBy=state subtotals=true groupType=section>\n \t<Column id=state totalAgg=countDistinct totalFmt='[=1]0 \"state\";0 \"states\"'/> \n\t<Column id=category totalAgg=Total/> \n\t<Column id=item  totalAgg=countDistinct totalFmt='0 \"items\"'/> \n\t<Column id=orders/> \n\t<Column id=sales fmt=usd1k/> \n\t<Column id=growth contentType=delta neutralMin=-0.02 neutralMax=0.02 fmt=pct1 totalAgg=weightedMean weightCol=sales /> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: BigValue with Non-Delta Comparison\nDESCRIPTION: Shows how to implement BigValue with non-delta comparison display.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/big-value/index.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<BigValue \n  data={orders_with_comparisons} \n  value=num_orders\n  comparison=prev_month_orders\n  comparisonTitle=\"Last Month\"\n  comparisonDelta=false\n/>\n```\n\n----------------------------------------\n\nTITLE: Unpivoting Data with Python\nDESCRIPTION: This Python snippet uses the pandas library to unpivot a DataFrame. It converts specified columns ('col1', 'col2', 'col3') into a long format with 'key' and 'value' columns. It requires the 'pandas' library to be installed.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/tabs/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'id': [1, 2, 3],\n    'col1': ['a', 'b', 'c'],\n    'col2': ['d', 'e', 'f'],\n    'col3': ['g', 'h', 'i']\n})\n\ndf.melt(id_vars=['id'], var_name='key', value_name='value')\n```\n\n----------------------------------------\n\nTITLE: Evidence Markdown Query Example\nDESCRIPTION: Markdown code block showing how to embed a SQL query in an Evidence page\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Hello Evidence\n\n### Orders Table\n\n```my_query_summary\nselect * from needful_things.my_query\n```\n```\n\n----------------------------------------\n\nTITLE: 2-Column Grid with Large Gap Layout\nDESCRIPTION: Demonstrates a grid with 2 columns and a large gap size, displaying bar charts using a consistent data configuration\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/grid/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: evidence\nCODE:\n```\n<Grid cols=2 gapSize=lg>\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Category\n/>\n<BarChart\ndata={orders_by_category}\nx=category\ny=sales_usd0k\nxAxisTitle=Category\n/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Bubble Chart Example with Missing X Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BubbleChart` component in Evidence. It renders a bubble chart using the `missingX` dataset, `fed_reserve_district` as the series, `banks` for size and y-axis, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_47\n\nLANGUAGE: Evidence\nCODE:\n```\n<BubbleChart data={missingX} series=fed_reserve_district size=banks y=banks x=established_date title={titles[2]}/>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Donut Chart Data\nDESCRIPTION: This SQL query generates sample data for a donut chart, representing the count of different donuts. It defines a CTE named `donut_query` that returns donut names and corresponding counts. This data is used to render the ECharts donut chart.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n```sql donut_query\nselect 'Glazed' as donut, 213 as count\nunion all\nselect 'Cruller' as donut, 442 as count\nunion all\nselect 'Jelly-filled' as donut, 321 as count\nunion all\nselect 'Cream-filled' as donut, 350 as count\n```\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Evidence with JavaScript\nDESCRIPTION: Example of accessing environment variables in an Evidence project. This shows how to use the built-in $env store to access variables defined in .env files.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder/another-sub-folder/another-sub-folder/a-nested-page.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { $env } from '@evidence-dev/core-components';\n\nconsole.log($env.MY_ENV_VARIABLE)\n```\n\n----------------------------------------\n\nTITLE: Evidence Dev Version Change Log Entry\nDESCRIPTION: A markdown changelog section detailing patch changes to Evidence Dev component versions. Lists multiple dependency updates with version numbers and commit references.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [5a9edf0c]\n- Updated dependencies [0e0a4392]\n- Updated dependencies [d04554f1]\n- Updated dependencies [2a663d79]\n- Updated dependencies [1027087a]\n- Updated dependencies [e3a88847]\n- Updated dependencies [f33b58c5]\n- Updated dependencies [38cc19db]\n- Updated dependencies [7e401d4d]\n- Updated dependencies [1dd61938]\n  - @evidence-dev/core-components@3.0.5\n  - @evidence-dev/csv@1.0.4\n  - @evidence-dev/duckdb@1.0.4\n  - @evidence-dev/postgres@1.0.2\n  - @evidence-dev/snowflake@1.0.2\n  - @evidence-dev/sqlite@2.0.2\n  - @evidence-dev/faker-datasource@2.0.2\n  - @evidence-dev/evidence@24.0.8\n```\n\n----------------------------------------\n\nTITLE: SQL Query for ECharts Treemap\nDESCRIPTION: This SQL query transforms the data from `sales_by_country` CTE to match the expected format for the ECharts treemap. It selects the `country` column and aliases it as `name`, and selects the `sales` column and aliases it as `value`. This is required since ECharts expects 'name' and 'value' columns for treemap data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n```sql test_data\nselect country as name, sales as value\nfrom ${sales_by_country}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sales Data with Dynamic Filtering in SQL\nDESCRIPTION: SQL query that aggregates sales data by month and category, with dynamic filtering based on user-selected category and year from dropdown inputs. The query truncates dates to month level and calculates sum of sales for each group.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/basic/pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    date_trunc('month', order_datetime) as month,\n    sum(sales) as sales_usd,\n    category\nfrom needful_things.orders\nwhere category like '${inputs.category.value}'\nand date_part('year', order_datetime) like '${inputs.year.value}'\ngroup by all\norder by sales_usd desc\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth Access Token for BigQuery in Bash\nDESCRIPTION: This command generates an OAuth access token for BigQuery using the gcloud CLI. The token can be used in Evidence app configurations but expires after 1 hour. It's useful when gcloud CLI can't be installed on the deployment device and a service account is not preferred.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/bigquery/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default print-access-token\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in Markdown Changelog\nDESCRIPTION: This snippet shows the version number and change type for a package update in a markdown changelog format. It includes the version number, change type, and a brief description of the change.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/core-components/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.2.0\n\n### Minor Changes\n\n- 7713d3e73: Improved settings page UI\n\n### Patch Changes\n\n- 64486c669: bump vitest\n- 4efd427a7: Use theme class instead of data-\n- 656543815: Dont hide entire kebab menu when neverShowQueries is true\n- Updated dependencies [254a90551]\n- Updated dependencies [64486c669]\n- Updated dependencies [4efd427a7]\n  - @evidence-dev/tailwind@3.0.9\n  - @evidence-dev/component-utilities@4.0.9\n```\n\n----------------------------------------\n\nTITLE: Displaying Compact Data Table in React\nDESCRIPTION: This snippet renders a compact data table using the DataTable component, sourced from 'orders_by_category'. It is designed to present a more concise view of the same data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/compact-table/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={orders_by_category} compact/>\n```\n\n----------------------------------------\n\nTITLE: Querying Order Data for Calendar Heatmap (OBD)\nDESCRIPTION: This OBD query selects order data from the needful_things.orders table, grouping by date and counting orders. It filters data between August 2019 and April 2021.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/calendar-heatmap/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: obd\nCODE:\n```\nselect order_datetime::date as date, count(1) as orders\nfrom needful_things.orders\nwhere order_datetime <'2021-04-01'\nand order_datetime > '2019-08-01'\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Data-Driven Max Value Slider\nDESCRIPTION: Implements a slider with maximum value derived from a data column\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/slider/index.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<Slider\n    title='data slider'\n    name='MaxColSlider'\n    size=large\n    step=100\n    data={flight_data}\n    maxColumn=max_fare\n    min=0\n    defaultValue=max_fare\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Item and Channel Data in SQL\nDESCRIPTION: SQL query to count orders grouped by item and channel. This query is used to generate data for heatmap visualizations.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/print-components/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect item, channel, count(1) as orders from orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot Example with Missing X Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `ScatterPlot` component in Evidence. It renders a scatter plot using the `missingX` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_42\n\nLANGUAGE: Evidence\nCODE:\n```\n<ScatterPlot data={missingX} series=fed_reserve_district x=established_date title={titles[2]}/>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for ECharts Funnel Chart\nDESCRIPTION: This SQL query transforms the data from `funnel_stages` CTE to match the expected format for the ECharts funnel chart.  It selects the `stage` column and aliases it as `name`, and selects the `count` column and aliases it as `value`. ECharts expects 'name' and 'value' columns for funnel chart data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/custom-echarts/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n```sql funnel_data\nselect stage as name, count as value\nfrom ${funnel_stages}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Country Economic Data in SQL\nDESCRIPTION: SQL query that creates a sample dataset of economic indicators for various countries, including GDP, growth rates, and demographic information. The data is structured using UNION ALL to combine multiple rows.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 'United States' as country, 'North America' as continent, 22996 as gdp_usd, 0.017 as gdp_growth, 0.025 as interest_rate, 0.085 as inflation_rate, 0.037 as jobless_rate, -16.7 as gov_budget, 137.2 as debt_to_gdp, -3.6 as current_account, 332.4 as population\nUNION ALL\nSELECT 'China', 'Asia', 17734, 0.004, 0.0365, 0.027, 0.054, -3.7, 66.8, 1.8, 1412.6\nUNION ALL\nSELECT 'Japan', 'Asia', 4937, 0.002, -0.001, 0.026, 0.026, -12.6, 266.2, 3.2, 125.31\nUNION ALL\nSELECT 'Germany', 'Europe', 4223, 0.017, 0.005, 0.079, 0.055, -3.7, 69.3, 7.4, 83.16\nUNION ALL\nSELECT 'United Kingdom', 'Europe', 3187, 0.029, 0.0175, 0.101, 0.038, -6, 95.9, -2.6, 67.53\nUNION ALL\nSELECT 'India', 'Asia', 3173, 0.135, 0.054, 0.0671, 0.078, -9.4, 73.95, -1.7, 1380\nUNION ALL\nSELECT 'France', 'Europe', 2937, 0.042, 0.005, 0.058, 0.074, -6.5, 112.9, 0.4, 67.63\nUNION ALL\nSELECT 'Italy', 'Europe', 2100, 0.047, 0.005, 0.084, 0.079, -7.2, 150.8, 2.5, 59.24\nUNION ALL\nSELECT 'Canada', 'North America', 1991, 0.029, 0.025, 0.076, 0.049, -4.7, 117.8, 0.1, 38.44\nUNION ALL\nSELECT 'South Korea', 'Asia', 1799, 0.029, 0.025, 0.057, 0.029, -6.1, 42.6, 3.5, 51.74\nUNION ALL\nSELECT 'Russia', 'Europe', 1776, -0.04, 0.08, 0.151, 0.039, 0.8, 18.2, 6.8, 145.55\nUNION ALL\nSELECT 'Brazil', 'South America', 1609, 0.032, 0.1375, 0.1007, 0.091, -4.5, 80.27, -1.8, 213.32\n```\n\n----------------------------------------\n\nTITLE: Evidence Dev Major Version 3.0.0 Change Log\nDESCRIPTION: A major version update changelog entry describing significant changes to Evidence's data handling, introducing parquet files and DuckDB client-side functionality.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- cb0fc468: This update includes major changes to the way Evidence interacts with data.\n  Instead of running queries against the production database, and including it\n  with the project as pre-rendered, static JSON data; those queries are now stored as .parquet files.\n\n  .parquet enables the use of DuckDB on the client, allowing for much greater levels of interactivity\n  on pages, and interoperability between different data sources (e.g. joins across postgres & mysql).\n```\n\n----------------------------------------\n\nTITLE: Query Store Implementation\nDESCRIPTION: Example of accessing queries using the Evidence query store with TypeScript typing.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/sdk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { getQueries } from '$evidence/queries';\n\tconst queries = getQueries();\n\t/** @type {import(\"@evidence-dev/query-store\").QueryStore} */\n\tlet { myFirstQuery } = $queries;\n\t$: ({ myFirstQuery } = $queries);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Postgres Client in JavaScript\nDESCRIPTION: This code snippet initializes a Postgres client using the 'pg' library. It sets up the connection configuration and creates a new client instance.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/postgres/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nimport fs from 'fs'\n\nconst { Client } = pg\n\nconst getClient = (settings) => {\n    const config = {\n        host: settings.host,\n        port: settings.port,\n        user: settings.user,\n        password: settings.password,\n        database: settings.database,\n        ssl: settings.ssl ? {\n            rejectUnauthorized: settings.rejectUnauthorized === false ? false : true,\n            ca: settings.ca ? fs.readFileSync(settings.ca).toString() : undefined,\n            key: settings.key ? fs.readFileSync(settings.key).toString() : undefined,\n            cert: settings.cert ? fs.readFileSync(settings.cert).toString() : undefined,\n        } : undefined\n    }\n\n    return new Client(config)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Alert - HTML\nDESCRIPTION: This snippet demonstrates the implementation of a default alert in HTML without any specific status applied.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/alert/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Alert >\nThis is the *default* alert\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Stacked BarChart Example with Nulls Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a stacked 100% bar chart using the `nulls` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, a dynamic title, and specifies the type as 'stacked100'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_19\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={nulls} series=fed_reserve_district x=established_date title={titles[4]} type=stacked100/>\n```\n\n----------------------------------------\n\nTITLE: Querying Categories from Needful Things Database in SQL\nDESCRIPTION: SQL query that selects distinct categories from the orders table in the needful_things database. The results are grouped by category to get a unique list of categories used for dropdown filtering.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/packaging/pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n      category\n  from needful_things.orders\n  group by category\n```\n\n----------------------------------------\n\nTITLE: Querying Category Abbreviations from Orders\nDESCRIPTION: SQL query to retrieve unique categories with their 3-letter abbreviations from the needful_things.orders table, used for dropdown population\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/needful_things.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    category,\n    upper(left(category, 3)) as abbrev\nfrom needful_things.orders\ngroup by category\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Chart for Order Summary\nDESCRIPTION: This JSX code creates another LineChart visualization using the 'order_summary' data. It plots the number of orders over time, with the order month on the x-axis and order count on the y-axis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/database-specific/sqlite-dates/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<LineChart\n    data={order_summary}\n    x=order_month\n    y=orders\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Column Alignment in DataTable\nDESCRIPTION: Configures individual column alignment within a DataTable using the Column component. Columns can be aligned left, right, or center.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_39\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={country_summary}>\n\t<Column id=country align=right />\n\t<Column id=country_id align=center />\n\t<Column id=category align=left />\n\t<Column id=value_usd align=left />\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Markdown Syntax\nDESCRIPTION: Demonstrates how to create a hyperlink using markdown's link syntax with link text and URL.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/images-and-links.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Go to page a](/page-a)\n```\n\n----------------------------------------\n\nTITLE: Querying Pokedex Table\nDESCRIPTION: This SQL query retrieves all columns and rows from the 'pokedex' table. It is designed to fetch complete pokedex data for some purpose.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pokedex\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Series Data with Null Values in JavaScript\nDESCRIPTION: A dataset containing null values (y2 in series 'B' in 1902 and y1 in series 'B' in 1904) to test how visualizations handle null values. This tests proper null handling in charts and graphs.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeriesMulty/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet nulls =\n[\n    {date: '1900-01-01', series: 'A', y1: 103, y2: 135, y3: 88},\n    {date: '1900-01-01', series: 'B', y1: 240, y2: 299, y3: 201},\n    {date: '1900-01-01', series: 'C', y1: 361, y2: 318, y3: 314},\n    {date: '1901-01-01', series: 'A', y1: 105, y2: 138, y3: 93},\n    {date: '1901-01-01', series: 'B', y1: 298, y2: 215, y3: 277},\n    {date: '1901-01-01', series: 'C', y1: 394, y2: 306, y3: 348},\n    {date: '1902-01-01', series: 'A', y1: 106, y2: 132, y3: 103},\n    {date: '1902-01-01', series: 'B', y1: 209, y2: null, y3: 227},\n    {date: '1902-01-01', series: 'C', y1: 384, y2: 367, y3: 312},\n    {date: '1903-01-01', series: 'A', y1: 108, y2: 130, y3: 105},\n    {date: '1903-01-01', series: 'B', y1: 296, y2: 274, y3: 259},\n    {date: '1903-01-01', series: 'C', y1: 330, y2: 301, y3: 338},\n    {date: '1904-01-01', series: 'A', y1: 109, y2: 128, y3: 102},\n    {date: '1904-01-01', series: 'B', y1: null, y2: 266, y3: 293},\n    {date: '1904-01-01', series: 'C', y1: 332, y2: 342, y3: 343},\n    {date: '1905-01-01', series: 'A', y1: 111, y2: 124, y3: 101},\n    {date: '1905-01-01', series: 'B', y1: 218, y2: 288, y3: 204},\n    {date: '1905-01-01', series: 'C', y1: 318, y2: 375, y3: 313},\n    {date: '1906-01-01', series: 'A', y1: 120, y2: 122, y3: 100},\n    {date: '1906-01-01', series: 'B', y1: 261, y2: 275, y3: 265},\n    {date: '1906-01-01', series: 'C', y1: 332, y2: 397, y3: 388}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Scatter Plot with Annotations in HTML\nDESCRIPTION: Example showing how to create a scatter plot with reference lines and areas. The code demonstrates using ReferenceLine for target data and ReferenceArea for date ranges.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/scatter-plot/index.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ScatterPlot data={sales_data} x=date y=sales>\n  <ReferenceLine data={target_data} y=target label=name/>\n  <ReferenceArea xMin='2020-03-14' xMax='2020-05-01'/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Querying Orders for Heatmap\nDESCRIPTION: This SQL query counts orders from the 'needful_things.orders' table, grouping by category and day of the week. It prepares the data for visualization in a heatmap by categorizing orders across days and categories.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect category, dayname(order_datetime) as day, dayofweek(order_datetime) as day_num, count(*) as order_count from needful_things.orders\ngroup by all\norder by category, day_num\n```\n\n----------------------------------------\n\nTITLE: Importing Unset from Evidence SDK\nDESCRIPTION: Imports the Unset utility from the Evidence SDK, which is likely used to check if an input is set or not.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/text-input.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script> import {Unset} from '@evidence-dev/sdk/usql'; </script>\n```\n\n----------------------------------------\n\nTITLE: Using PrintGroup for Content Grouping\nDESCRIPTION: Demonstrates how to keep content together on the same printed page using PrintGroup component. Shows example with multiple heatmaps.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/ui/print-format-components/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<PrintGroup>\n\n    The 2 heatmaps below will be printed on the same page if possible\n\n    <Heatmap data={item_channel} x=channel y=item value=orders/>\n    <Heatmap data={item_channel} x=channel y=item value=orders/>\n</PrintGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset with Null Values\nDESCRIPTION: Defines a test dataset where specific data points contain null values instead of numeric values. This tests how charts handle explicit null values while maintaining the overall structure of the visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeriesMulty/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet nulls =\n[\n    {x: 1900, series: 'A', y1: 103, y2: 135, y3: 88},\n    {x: 1900, series: 'B', y1: 240, y2: 299, y3: 201},\n    {x: 1900, series: 'C', y1: 361, y2: 318, y3: 314},\n    {x: 1901, series: 'A', y1: 105, y2: 138, y3: 93},\n    {x: 1901, series: 'B', y1: 298, y2: 215, y3: 277},\n    {x: 1901, series: 'C', y1: 394, y2: 306, y3: 348},\n    {x: 1902, series: 'A', y1: 106, y2: 132, y3: 103},\n    {x: 1902, series: 'B', y1: 209, y2: 282, y3: 227},\n    {x: 1902, series: 'C', y1: null, y2: 367, y3: 312},\n    {x: 1903, series: 'A', y1: 108, y2: 130, y3: 105},\n    {x: 1903, series: 'B', y1: 296, y2: 274, y3: 259},\n    {x: 1903, series: 'C', y1: 330, y2: 301, y3: 338},\n    {x: 1904, series: 'A', y1: 109, y2: 128, y3: 102},\n    {x: 1904, series: 'B', y1: 280, y2: 266, y3: 293},\n    {x: 1904, series: 'C', y1: 332, y2: 342, y3: 343},\n    {x: 1905, series: 'A', y1: 111, y2: 124, y3: 101},\n    {x: 1905, series: 'B', y1: 218, y2: 288, y3: 204},\n    {x: 1905, series: 'C', y1: 318, y2: 375, y3: 313},\n    {x: 1906, series: 'A', y1: 120, y2: null, y3: 100},\n    {x: 1906, series: 'B', y1: 261, y2: 275, y3: 265},\n    {x: 1906, series: 'C', y1: 332, y2: 397, y3: 388},\n    {x: 1907, series: 'A', y1: 133, y2: 131, y3: 100},\n    {x: 1907, series: 'B', y1: 285, y2: 259, y3: 229},\n    {x: 1907, series: 'C', y1: 334, y2: 390, y3: 372},\n    {x: 1908, series: 'A', y1: 142, y2: 128, y3: 99},\n    {x: 1908, series: 'B', y1: 257, y2: 219, y3: 235},\n    {x: 1908, series: 'C', y1: 350, y2: 388, y3: 364},\n    {x: 1909, series: 'A', y1: 156, y2: 135, y3: 97},\n    {x: 1909, series: 'B', y1: 228, y2: 275, y3: null},\n    {x: 1909, series: 'C', y1: 321, y2: 352, y3: 359},\n    {x: 1910, series: 'A', y1: 168, y2: 137, y3: 95},\n    {x: 1910, series: 'B', y1: 212, y2: 216, y3: 270},\n    {x: 1910, series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Querying One Year of Order Data (OBD)\nDESCRIPTION: This OBD query selects order data for the year 2020 from the previously defined 'obd' query result.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/calendar-heatmap/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: obd\nCODE:\n```\nselect * from ${obd}\nwhere date between '2020-01-02' and '2020-12-31'\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Performance Improvements and Dependency Updates\nDESCRIPTION: Documents performance improvements including query batching and chart resize optimization, along with dependency version updates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/evidence/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- fa958c52: Performance Improvements; Queries now run in batches of 2; Charts are less eager to resize\n- Updated dependencies [847e8c81]\n- Updated dependencies [fa958c52]\n  - @evidence-dev/components@2.2.1\n  - @evidence-dev/db-orchestrator@2.0.2\n```\n\n----------------------------------------\n\nTITLE: Reactive Data Validation in Svelte\nDESCRIPTION: Validates loaded data with conditional checks on 'from_canada' property across different array elements, throwing errors if conditions are not met\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/nullish-dates.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n$: if (nully.loaded) {\n\tconsole.log([...nully])\n\tif (nully[0].from_canada !== true) throw new Error('from_canada should be true');\n\tif (nully[1].from_canada !== true) throw new Error('from_canada should be true');\n\tif (nully[2].from_canada !== false) throw new Error('from_canada should be false');\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Block Example\nDESCRIPTION: This JavaScript code snippet demonstrates variable declaration and addition. It initializes two variables, 'x' and 'y', with values 100 and 200 respectively, and then calculates their sum, storing the result in variable 'z'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/markdown/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet x = 100;\nlet y = 200;\nlet z = x + y;\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Categories from SQL Database\nDESCRIPTION: This SQL query retrieves distinct categories from the orders table in the needful_things database and generates an abbreviation for each category. It groups results by category to avoid duplicates.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dependent-dropdown.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"sql categories\\nselect\\n    category,\\n    upper(left(category, 3)) as abbrev\\nfrom needful_things.orders\\ngroup by category\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Y-Axis Reference Line with Target Label\nDESCRIPTION: This example shows how to add a horizontal reference line to a LineChart with a specific y-value of 90000 and a label of 'Target'. The reference line provides a visual benchmark for the chart data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month} \n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n>\n    <ReferenceLine y=90000 label=\"Target\"/>\n</LineChart>\n```\n\n----------------------------------------\n\nTITLE: Installing Evidence with Bash\nDESCRIPTION: This Bash snippet contains commands for installing Evidence by cloning a template repository, navigating into the project directory, and running the development server.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryDebugger Component in Svelte\nDESCRIPTION: Adds a new QueryDebugger component to facilitate investigation into which queries have run on the page, aiding in debugging and performance optimization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/core-components/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\nAdded a new <QueryDebugger/> component to ease investigation into which queries have run on the page\n```\n\n----------------------------------------\n\nTITLE: Generating World Map Data with SQL\nDESCRIPTION: SQL query creating sample data for world map visualization. Includes values for Canada, United Kingdom, and United States.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/maps/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Canada' as name, 260 as value\nunion all\nselect 'United Kingdom' as name, 300 as value\nunion all\nselect 'United States of America' as name, 500 as value\n```\n\n----------------------------------------\n\nTITLE: Including Other Languages in Markdown\nDESCRIPTION: This snippet demonstrates how to include Python code in Evidence Markdown for documentation purposes. The code is not executed and serves as an example.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/syntax/index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nfor name in names:\n    print(\"Hello, \" + name)\n```\n\n----------------------------------------\n\nTITLE: Alternative Horizontal Stacked Bar Chart in Evidence\nDESCRIPTION: Another horizontal stacked bar chart showing category sales data by month with category type specified for the x-axis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category} \n    x=month \n    y=sales_usd0k \n    series=category \n    swapXY=true \n    xType=category\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset with Missing Y Values\nDESCRIPTION: Defines a test dataset where specific data points are missing (B 1902 and A 1909). This allows testing how charts handle incomplete series data while maintaining the x-axis continuity.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberSeriesMulty/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet missingY = \n[ // B 1902 is missing and A 1909\n    {x: 1900, series: 'A', y1: 103, y2: 135, y3: 88},\n    {x: 1900, series: 'B', y1: 240, y2: 299, y3: 201},\n    {x: 1900, series: 'C', y1: 361, y2: 318, y3: 314},\n    {x: 1901, series: 'A', y1: 105, y2: 138, y3: 93},\n    {x: 1901, series: 'B', y1: 298, y2: 215, y3: 277},\n    {x: 1901, series: 'C', y1: 394, y2: 306, y3: 348},\n    {x: 1902, series: 'A', y1: 106, y2: 132, y3: 103},\n    {x: 1902, series: 'C', y1: 384, y2: 367, y3: 312},\n    {x: 1903, series: 'A', y1: 108, y2: 130, y3: 105},\n    {x: 1903, series: 'B', y1: 296, y2: 274, y3: 259},\n    {x: 1903, series: 'C', y1: 330, y2: 301, y3: 338},\n    {x: 1904, series: 'A', y1: 109, y2: 128, y3: 102},\n    {x: 1904, series: 'B', y1: 280, y2: 266, y3: 293},\n    {x: 1904, series: 'C', y1: 332, y2: 342, y3: 343},\n    {x: 1905, series: 'A', y1: 111, y2: 124, y3: 101},\n    {x: 1905, series: 'B', y1: 218, y2: 288, y3: 204},\n    {x: 1905, series: 'C', y1: 318, y2: 375, y3: 313},\n    {x: 1906, series: 'A', y1: 120, y2: 122, y3: 100},\n    {x: 1906, series: 'B', y1: 261, y2: 275, y3: 265},\n    {x: 1906, series: 'C', y1: 332, y2: 397, y3: 388},\n    {x: 1907, series: 'A', y1: 133, y2: 131, y3: 100},\n    {x: 1907, series: 'B', y1: 285, y2: 259, y3: 229},\n    {x: 1907, series: 'C', y1: 334, y2: 390, y3: 372},\n    {x: 1908, series: 'A', y1: 142, y2: 128, y3: 99},\n    {x: 1908, series: 'B', y1: 257, y2: 219, y3: 235},\n    {x: 1908, series: 'C', y1: 350, y2: 388, y3: 364},\n    {x: 1909, series: 'B', y1: 228, y2: 275, y3: 299},\n    {x: 1909, series: 'C', y1: 321, y2: 352, y3: 359},\n    {x: 1910, series: 'A', y1: 168, y2: 137, y3: 95},\n    {x: 1910, series: 'B', y1: 212, y2: 216, y3: 270},\n    {x: 1910, series: 'C', y1: 400, y2: 340, y3: 400}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Monthly Data with Values in SQL\nDESCRIPTION: This SQL query creates a simple dataset with month values and corresponding numeric values using UNION statements. It creates three records with dates formatted as YYYY-MM-DD and associated numeric values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/wack-dates.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT '2024-01-01' AS month, 100 AS value\nUNION\nSELECT '2023-12-01' AS month, 200 AS value\nUNION\nSELECT '2023-11-01' AS month, 3 AS value\n```\n\n----------------------------------------\n\nTITLE: Querying LA Zip Sales Data\nDESCRIPTION: SQL query to retrieve sales data for Los Angeles zip codes\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/maps.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from la_zip_sales\n```\n\n----------------------------------------\n\nTITLE: Building Evidence Project in CLI\nDESCRIPTION: Command to build the Evidence project, which generates static files that can be deployed to a web server. This creates optimized production-ready assets.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder/another-sub-folder/another-sub-folder/a-nested-page.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Links with HTML a Tag in Markdown\nDESCRIPTION: Shows how to create a hyperlink using the HTML <a/> tag in markdown, specifying the href attribute and link text.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/images-and-links.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/page-a\">Go to page a</a>\n```\n\n----------------------------------------\n\nTITLE: Starting Evidence Development Server in CLI\nDESCRIPTION: Command to start the Evidence development server, which launches a local server for development. The server automatically reloads when changes are detected.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/subfolder/another-sub-folder/another-sub-folder/a-nested-page.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Printing ECharts Configuration for Debugging\nDESCRIPTION: Shows how to print the full ECharts configuration for a chart by adding the printEchartsConfig property. This is useful for debugging and understanding the complete configuration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/echarts-options/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<BarChart\n    data={query_name}\n    x=column_x\n    y=column_y\n    echartsOptions={{exampleOption: 'exampleValue'}}\n    printEchartsConfig=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Selecting Fixed Data in SQL\nDESCRIPTION: This SQL snippet selects fixed values representing a cohort and metadata for use in a data table. No external dependencies or dynamic inputs are required. It outputs three columns: cohort, metadata, and two numerical values, a and b.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/reactive-columns/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT '7 days' as cohort, 'stuff' as metadata, 100 as a, 200 as b\n```\n\n----------------------------------------\n\nTITLE: Customizing Fonts with Tailwind in Evidence\nDESCRIPTION: Markdown example demonstrating how to customize fonts using Tailwind CSS classes in an Evidence project. This shows various text styling options including color, font families, and margins.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nThis is the default text style, which is used when you write text in a markdown file.\n\n<p class=\"text-red-600 italic font-serif\">This red italic serif text is defined inside a HTML p (paragraph) element.</p>\n\n<p class=\"font-mono text-primary mt-3\">This is primary colored text using a monospace font, and a custom top margin.</p>\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Retrieving Orders\nDESCRIPTION: Executes a SQL query to retrieve a limited set of rows from the orders database table. The primary dependency is a connection to the database containing the orders table.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/daterange.md#2025-04-21_snippet_1\n\nLANGUAGE: orders\nCODE:\n```\nselect * from orders limit 1000\n```\n\n----------------------------------------\n\nTITLE: Querying Orders Data in SQL\nDESCRIPTION: SQL query to select all columns from the needful_things.orders table, limiting the result to 1000 rows.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/histogram/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from needful_things.orders limit 1000\n```\n\n----------------------------------------\n\nTITLE: Array Addition in Python\nDESCRIPTION: This Python snippet imports the NumPy library and demonstrates how to add two NumPy arrays element-wise.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nx = np.array([1, 2, 3])\ny = np.array([4, 5, 6])\nz = x + y\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Character Episode Data\nDESCRIPTION: A SQL query to fetch data from the characters_ep_total CSV file for use in a bar chart visualization.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM csv.characters_ep_total\n```\n\n----------------------------------------\n\nTITLE: Supplying a Dataset for Callouts (HTML, JSX)\nDESCRIPTION: Details how to supply a dataset for callouts, allowing for dynamic labeling of multiple points based on data queries, which enhances the visual representation in charts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<PropListing\n        name=data\n        description=\"Query name, wrapped in curly braces\"\n        required=true\n        options=\"query name\"\n    />\n    <PropListing\n        name=x\n        description=\"Column containing x-axis values for points\"\n        options=\"column name\"\n    />\n    <PropListing\n        name=y\n        description=\"Column containing y-axis values for points\"\n        options=\"column name\"\n    />\n    <PropListing\n        name=label\n        description=\"Column containing a label to use for each line\"\n        required=true\n        options=\"column name\"\n    />\n```\n\n----------------------------------------\n\nTITLE: Basic Test Query\nDESCRIPTION: Simple SQL query that selects the number 1 with alias 't'\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/sql-file-queries/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 as t;\n```\n\n----------------------------------------\n\nTITLE: Displaying Original Data Table in React\nDESCRIPTION: This snippet renders a regular data table using the DataTable component with data sourced from 'orders_by_category'. It is intended for displaying standard order category data.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/compact-table/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={orders_by_category}/>\n```\n\n----------------------------------------\n\nTITLE: Interpolating Query with Dollar Sign in SQL\nDESCRIPTION: Demonstrates how to reference a query that contains a dollar sign in its name, which requires special handling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM ${string_with_$}\n```\n\n----------------------------------------\n\nTITLE: Calculating Approximate Years in SQL\nDESCRIPTION: Calculates the approximate number of years by dividing the number of days (from the 'working_reference' query) by 365.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    n_days / 365 as approx_years\nfrom ${working_reference}\n```\n\n----------------------------------------\n\nTITLE: Nested Test Query\nDESCRIPTION: Simple SQL query located in a nested directory that selects the number 2 with alias 't'\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/sql-file-queries/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 2 as t;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Theme Colors in JavaScript\nDESCRIPTION: Example of using a custom theme color in a JavaScript component. The color name should be used in its original camelCase format when referenced in JavaScript.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/tailwind/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<BarChart ... fillColor=myCustomColor />\n```\n\n----------------------------------------\n\nTITLE: Reference Line Conflicting Parameters Error Example\nDESCRIPTION: This example demonstrates an error case where a reference line is provided with both explicit coordinates (x,y,x2,y2) and a data property. These approaches conflict with each other as a reference line should use either direct coordinates or data-driven values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<ScatterPlot\n    data={countries}\n    x=gdp_usd\n    y=gdp_growth_pct1\n    tooltipTitle=country\n    series=continent\n>\n    <ReferenceLine \n     x=continent\n     y=continent\n     x2=continent \n     y2=continent\n     data={countries}\n     label=\"Error\"/>\n</ScatterPlot>\n```\n\n----------------------------------------\n\nTITLE: Styling Preformatted Text with CSS\nDESCRIPTION: This CSS snippet styles preformatted text blocks, giving them a scrollable area, a specific background color, and rounded corners.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\npre {\n\toverflow: scroll;\n\tbackground: #1f2937;\n\tborder-radius: 3px;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\tjustify-content: space-between;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Date Range Picker in Markdown\nDESCRIPTION: This markdown snippet renders a date range picker component. It uses the orders_by_month data source and sets the date column to 'month'. The selected range is stored in the 'range' variable.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/date-range/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<DateRange data={orders_by_month} dates=month name=range/>\n```\n\n----------------------------------------\n\nTITLE: Stepped Area Chart Implementation\nDESCRIPTION: Area chart with stepped lines showing sales data by category.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/area-chart/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<AreaChart \n    data={orders_by_category_2021}\n    x=month\n    y=sales\n    series=category\n    step=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 1.1.2\nDESCRIPTION: Update showing dependency changes in version 1.1.2\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/mssql/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [cb5687cd9]\n  - @evidence-dev/db-commons@1.0.6\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Page Metadata\nDESCRIPTION: This code defines the frontmatter for a reference documentation page in a markdown file. It sets the title to 'Reference', positions the page at position 5 in the sidebar, and sets sidebar_link to false to hide it from the sidebar navigation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Reference\nsidebar_position: 5\nsidebar_link: false\n---\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Control\nDESCRIPTION: This patch introduces the `EVIDENCE_DISABLE_INCLUDE` environment variable. When set, it prevents the inclusion of evidence dependencies. This allows users to selectively disable certain features or dependencies during the build or runtime process.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/evidence/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n071da2b5: Add EVIDENCE_DISABLE_INCLUDE environment variable to prevent inclusion of evidence deps\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameter in Evidence Project (JavaScript)\nDESCRIPTION: This code snippet accesses and displays the value of a query parameter named 'param'. It uses Evidence's templating syntax to insert the parameter value into the page content.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/spa/pages/[param].md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{params.param}\n```\n\n----------------------------------------\n\nTITLE: Querying GeoJSON URLs\nDESCRIPTION: SQL query to select all GeoJSON URLs, excluding properties and ordering by scale, category, and file.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/base-map/index.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect * exclude(properties)\nfrom geojson_urls\norder by scale, category, file\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Playwright Test Suite\nDESCRIPTION: JavaScript test file that defines a basic test which verifies page title. It includes Evidence-specific utility for waiting for page load completion.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// @ts-check\nimport { test, expect } from '@playwright/test';\nimport { waitForPageToLoad } from '../../test-utils';\n\ntest('has title', async ({ page }) => {\n\tawait page.goto('/');\n\tawait waitForPageToLoad(page);\n\n\tawait expect(page).toHaveTitle(/Welcome to Evidence/);\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Select Data from nullish_bool\nDESCRIPTION: This snippet contains an SQL query that selects all columns from a table named 'nullish_bool', which is likely related to the validation of the 'nully' array. It is a prerequisite for the JavaScript snippet to ensure that the data being validated is fetched correctly.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/nullish-bools.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM nullish_bool\n```\n\n----------------------------------------\n\nTITLE: Custom Format Example\nDESCRIPTION: Demonstrates how to use a custom defined format with the Value component\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/formatting/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Value data={sales_data} column=date fmt=mydate />\n```\n\n----------------------------------------\n\nTITLE: Configuration of Encrypt Option\nDESCRIPTION: The `encrypt` option specifies whether SSL encryption should be applied for all data communications between the client and SQL Server, which is essential for Azure database connections.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/data-sources/mssql/index.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Setting up Evidence Project using CLI\nDESCRIPTION: Commands to create a new Evidence project from template, install dependencies, and start the development server using npm and degit.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 1.1.1\nDESCRIPTION: Update adding requestTimeout configuration option\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/mssql/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 330bb5336: Add requestTimeout to mssql connector\n```\n\n----------------------------------------\n\nTITLE: Using Page Parameters in JavaScript\nDESCRIPTION: Demonstrates how to access URL parameters in a JavaScript code block to extract dynamic content for rendering. The parameter value can be leveraged for data querying and display.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/templated-pages/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{params.customer}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Title and Subtitle in Svelte\nDESCRIPTION: Svelte code to create a line chart with a title and subtitle using the LineChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<LineChart \n    data={orders_by_month}\n    x=month\n    y=sales_usd0k \n    yAxisTitle=\"Sales per Month\"\n    title=\"Monthly Sales\"\n    subtitle=\"Includes all categories\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Evidence in Codespaces\nDESCRIPTION: Commands to install dependencies and start an Evidence project in GitHub Codespaces, making it accessible via the browser. This includes installing dependencies, running sources, and starting the development server.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/hmr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run sources\nnpm run dev -- --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Selecting Categories and Abbreviations using SQL\nDESCRIPTION: This SQL query retrieves the unique categories from the 'needful_things.orders' table and creates a three-letter abbreviation for each category by taking the first three letters and converting them to uppercase. It groups the results by category to ensure uniqueness.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/echarts-blink.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```sql categories\nselect\n    category,\n    upper(left(category, 3)) as abbrev\nfrom needful_things.orders\ngroup by category\n```\n```\n\n----------------------------------------\n\nTITLE: Strict Build using npm\nDESCRIPTION: The `npm run build:strict` command builds static reports with stricter error checking. It's used to ensure a broken report is never deployed. This command will fail if any SQL query fails or any component renders an error state.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/deployment/overview/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"npm run build:strict\"\n```\n\n----------------------------------------\n\nTITLE: Defining External SQL Query in YAML\nDESCRIPTION: This YAML block defines an external SQL query to be executed. The query is stored in a separate file named 'external.sql'.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/sql-file-query.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nqueries:\n  - external.sql\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM while ignoring scripts that might run during installation.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install --ignore-scripts\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 2.0.0\nDESCRIPTION: Major version change entry describing the switch to .parquet files and DuckDB for data handling, along with related updates and fixes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/universal-sql/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- cb0fc468: This update includes major changes to the way Evidence interacts with data.\n  Instead of running queries against the production database, and including it\n  with the project as pre-rendered, static JSON data; those queries are now stored as .parquet files.\n\n  .parquet enables the use of DuckDB on the client, allowing for much greater levels of interactivity\n  on pages, and interoperability between different data sources (e.g. joins across postgres & mysql).\n```\n\n----------------------------------------\n\nTITLE: Cache Cleanup Commands\nDESCRIPTION: Commands to clean up cache and node modules when encountering package-related errors, followed by reinstallation\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ./**/.parcel-cache node_modules ./**/dist\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Selecting a Constant Value in SQL\nDESCRIPTION: This SQL query selects the constant value 5. It's a simple example of how to use the SELECT statement in SQL to return a specific value.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/t/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 5\n```\n\n----------------------------------------\n\nTITLE: Trino Changelog Version Entries\nDESCRIPTION: Markdown format changelog entries detailing version changes from 1.0.0 to 1.0.9, including dependency updates, bug fixes, and new features like passwordless auth and HTTPS support.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/datasources/trino/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @evidence-dev/trino\n\n## 1.0.9\n\n### Patch Changes\n\n- Updated dependencies [cb5687cd9]\n  - @evidence-dev/db-commons@1.0.6\n\n## 1.0.8\n\n### Patch Changes\n\n- 70130373a: allow for passwordless auth and https\n- a5f972352: Fix and update to trino client.\n\n## 1.0.7\n\n### Patch Changes\n\n- 6cdedceb0: Remove db-orchestrator\n- Updated dependencies [6cdedceb0]\n  - @evidence-dev/db-commons@1.0.5\n\n## 1.0.6\n\n### Patch Changes\n\n- 6421c6d9b: Add icon to source configuration\n\n## 1.0.5\n\n### Patch Changes\n\n- Updated dependencies [1da26c4e]\n  - @evidence-dev/db-commons@1.0.4\n\n## 1.0.4\n\n### Patch Changes\n\n- 2bcbf0ed: Add keywords to improve searchability for datasources\n- Updated dependencies [31381835]\n  - @evidence-dev/db-commons@1.0.3\n\n## 1.0.3\n\n### Patch Changes\n\n- 168f1c9e: Fix boolean config options for MSSQL and Trino\n\n## 1.0.2\n\n### Patch Changes\n\n- 0e0a4392: Add skeleton README files for adapters\n- 99b915f2: Annotate databricks and trino as evidence source plugins\n- c9793670: - Removed legacy environment variables\n- Updated dependencies [fc7fe470]\n  - @evidence-dev/db-commons@1.0.2\n\n## 1.0.1\n\n### Patch Changes\n\n- Updated dependencies\n  - @evidence-dev/db-commons@1.0.1\n\n## 1.0.0\n\n### Patch Changes\n\n- bf4a112a: Update package.json to use new datasource field\n- 781d2677: exhaust testconnection streams, improve type inference, add trino/databricks adapters\n- a20cd1e0: Fix workspace project version references\n- Updated dependencies [bf4a112a]\n- Updated dependencies [cd57ba69]\n- Updated dependencies [c4822852]\n- Updated dependencies [781d2677]\n- Updated dependencies [20127231]\n- Updated dependencies [29c149d6]\n  - @evidence-dev/db-commons@0.2.1\n\n## 0.1.2-usql.2\n\n### Patch Changes\n\n- a20cd1e0: Fix workspace project version references\n\n## 0.1.2-usql.1\n\n### Patch Changes\n\n- 781d2677: exhaust testconnection streams, improve type inference, add trino/databricks adapters\n- Updated dependencies [781d2677]\n  - @evidence-dev/db-commons@0.2.1-usql.5\n\n## 0.1.2-usql.0\n\n### Patch Changes\n\n- Update package.json to use new datasource field\n- Updated dependencies\n  - @evidence-dev/db-commons@0.2.1-usql.4\n\n## 0.1.1\n\n### Patch Changes\n\n- c2540d2f: Add support for Trino as a data source\n```\n\n----------------------------------------\n\nTITLE: Defining Target Data in SQL\nDESCRIPTION: This SQL snippet defines a target data point for use in chart annotations, providing a fixed value and an associated label. It indicates the target threshold for performance visualization in charts.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nselect 8333 as target, '100k ARR' as name\n```\n\n----------------------------------------\n\nTITLE: Setting up Evidence Project via CLI\nDESCRIPTION: Commands to create a new Evidence project using degit, install dependencies, and start the development server locally.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Grouped BarChart Example with Missing X Data in Evidence\nDESCRIPTION: This snippet demonstrates the usage of the `BarChart` component in Evidence. It renders a grouped bar chart using the `missingX` dataset, `fed_reserve_district` as the series, `established_date` as the x-axis, sets the type to grouped, and a dynamic title.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_32\n\nLANGUAGE: Evidence\nCODE:\n```\n<BarChart data={missingX} series=fed_reserve_district type=grouped x=established_date title={titles[2]}/>\n```\n\n----------------------------------------\n\nTITLE: Executing All Orders Query with Limit\nDESCRIPTION: This SQL command retrieves up to 1000 orders from the orders table, offering a broader dataset but still with a limit on the total number. This is intended for scenarios needing more comprehensive data listings.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from orders limit 1000\n```\n\n----------------------------------------\n\nTITLE: Unpivoting Data with SQL\nDESCRIPTION: This SQL snippet unpivots a table by transforming columns into rows, allowing for better data analysis and visualization. It selects the id, key, and value from 'my_table' using the UNPIVOT clause. It requires SQL server support for the UNPIVOT functionality.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/tabs/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    id,\n    key,\n    value\nfrom\n    my_table\nunpivot\n    (value for key in (col1, col2, col3))\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable Component - JavaScript\nDESCRIPTION: This JavaScript snippet is used for rendering a DataTable component that displays the category links generated from the SQL query. It is structured to show a link for each category retrieved from the query results.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/templated-pages/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DataTable data={categories} rows=1>\n\t<Column id=category_link contentType=link />\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Using Primary Color in HTML Elements with Class and CSS Variables\nDESCRIPTION: Demonstrates two approaches for applying a primary color to div elements: using the bg-primary CSS class and using the --primary CSS variable in an inline style.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/themes/pages/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-testid=\"div-primary-class\" class=\"bg-primary\">\n\tdiv-primary-class\n</div>\n\n<div data-testid=\"div-primary-var\" style=\"background: var(--primary)\">\n\tdiv-primary-var\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Bar Chart for Hashtag Post Counts in React\nDESCRIPTION: This JSX snippet implements a BarChart component using the results of the chartQuery SQL. The chart visualizes the number of posts (y-axis) against hashtags (x-axis), providing insights into hashtag performance. It is important for users to understand hash usage dynamically based on selected dropdown values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dropdown-debug.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<BarChart data={chartQuery} title=\"Posts by Hashtag\" y=postCount x=tag/>\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Function Syntax in JavaScript\nDESCRIPTION: Demonstrates the syntax for the fmt() function which formats numbers using Excel-style format strings in Evidence Dev.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/expressions/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfmt(number, excelFormatString);\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Orders\nDESCRIPTION: This SQL query selects all columns from the 'orders' table and limits the results to the first 1000 rows. It's used to retrieve a sample of order data for display or analysis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/fullscreen.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"SELECT * FROM orders LIMIT 1000\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Colors in Tabs Component\nDESCRIPTION: Markdown example showing how to apply custom color tokens to a Tabs component in Evidence. The custom color defined in the theme configuration is referenced by name.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/themes/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs color=myColor>\n\t<Tab label=\"Tab 1\" id=\"tab1\">Tab 1 content</Tab>\n\t<Tab label=\"Tab 2\" id=\"tab2\">Tab 2 content</Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped DataTable with Accordion Style\nDESCRIPTION: Groups data by a specified column and displays it in an accordion format. This example groups by state without showing subtotals for each group.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_42\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={orders} groupBy=state>\n \t<Column id=state/> \n\t<Column id=category totalAgg=\"\"/> \n\t<Column id=item totalAgg=\"\"/> \n\t<Column id=orders/> \n\t<Column id=sales fmt=usd/> \n\t<Column id=growth fmt=pct1/> \n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart with Labels in Evidence\nDESCRIPTION: A stacked bar chart displaying sales data by category over months in 2021. Includes data labels and custom font styling through echartsOptions.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bar-chart/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BarChart \n    data={orders_by_category_2021} \n    x=month \n    y=sales_usd0k \n    series=category\n    labels=true\n    echartsOptions={{\n    textStyle: {\n        fontFamily: \"Inter\"\n    }\n}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter for Nested Page\nDESCRIPTION: YAML frontmatter configuration that sets the sidebar property to 'never' for a nested page layout\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/base-path/pages/nested/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar: never\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable with Color Scale for Positive Numbers\nDESCRIPTION: This JSX snippet defines a DataTable component to render the 'numbers' dataset. It includes columns for name and number, where the number column utilizes a color scale to visually represent values, providing a gradient from green to red.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/conditional-formatting/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable data={numbers}>\n  <Column id=name/>\n  <Column id=number contentType=colorscale colorScale={['#6db678','white','#ce5050']}/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Conditional Sales Report Suggestion in Evidence\nDESCRIPTION: This code snippet demonstrates how to conditionally display a message and a DataTable based on the number of low-margin customers. If there are more than 15 low-margin customers, a message suggesting up-selling and a DataTable displaying the customers are rendered. Otherwise, a message indicating that there are not enough low-margin customers to warrant a call block is displayed.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/if-else/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\n{#if low_margin_customers.length > 15}\n\nThe following customers are generating low margins.\n\nConsider re-allocating an account management call block to up-sell these customers.\n\n<DataTable data={low_margin_customers}/>\n\n{:else }\n\nThere are fewer than fifteen low margin customers, which is not enough to fill a call block.\n\n{/if}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Print Echarts Config Property - JSX\nDESCRIPTION: This is a helper property used during custom chart development. It inserts a code block displaying the current echarts configuration which aids in debugging the Echarts options utilized.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/heatmap/index.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<PropListing\n    name=printEchartsConfig\n    description=\"Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options\"\n    options={['true', 'false']}\n    defaultValue=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Dropdown Component in JavaScript\nDESCRIPTION: Switches from lodash.debounce to perfect-debounce and removes all lodash.library dependencies in favor of better supported lodash/library. Also rewrites the Dropdown and DropdownOptionStore components.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/ui/core-components/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- Switch to perfect-debounce instead of lodash.debounce\n- Remove all lodash.library in favor of better supported lodash/library\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTable with Row Shading and No Row Lines\nDESCRIPTION: Creates a DataTable with row shading enabled but row lines disabled, giving a cleaner look while maintaining row distinction.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_37\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries} rowShading=true rowLines=false />\n```\n\n----------------------------------------\n\nTITLE: Creating Button Group in Custom Framework\nDESCRIPTION: Defines a button group offering a dimensional selection for data visualization, within a hypothetical UI framework. It contains two buttons for dimensions 'a' and 'b'. The primary purpose is to offer interactive UI elements without specific framework dependencies.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/tables/reactive-columns/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: CustomUI\nCODE:\n```\n<ButtonGroup name=\\\"dimension\\\">\\n\\t<ButtonGroupItem value=\\\"a\\\" valueLabel=\\\"a\\\" />\\n\\t<ButtonGroupItem value=\\\"b\\\" valueLabel=\\\"b\\\" />\\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Minor Version Updates\nDESCRIPTION: Minor version changes including improvements to prerendering and parameter handling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/packages/lib/universal-sql/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- f62bd26e: prerenders clientside duckdb queries in their initial state to allow for some form of prerendering\n- 52d81ce2: fix parameterized page prerendering\n```\n\n----------------------------------------\n\nTITLE: Grouping Orders by Category and Item - SQL\nDESCRIPTION: This SQL snippet groups order data by 'category' and 'item', calculating the total sales for each group. The result is further utilized for visualization purposes.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/core-concepts/query-functions/index.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n    category,\n    item,\n    sum(sales) as total_sales\nFROM orders \ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Query Configuration\nDESCRIPTION: YAML frontmatter configuration showing different ways to reference SQL files, including nested paths and non-SQL files\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/sql-file-queries/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nqueries:\n  - test_query.sql\n  - test_query_nested: nested/test_query.sql\n  - DEP_query.sql\n  - not_sql.python\n  - should_break.sql\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with SQL Query Using Text Input\nDESCRIPTION: An SQL query example showing how to filter data based on a text input value. The query is currently commented out in the original document with a TODO note indicating that it breaks when input is passed to a query.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/input-components/text-input/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders \nWHERE category LIKE '%${inputs.search_input}'\n```\n\n----------------------------------------\n\nTITLE: Ascending Funnel Chart in Markdown\nDESCRIPTION: This example shows how to create an ascending funnel chart by adding the funnelSort property to the FunnelChart component.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/funnel-chart/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<FunnelChart \n    data={funnel_data} \n    nameCol=stage\n    valueCol=customers\n    funnelSort=ascending\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Review Data with SQL\nDESCRIPTION: This SQL snippet retrieves all data from the reviews table in the needful_things database.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/text-and-metrics/code-blocks/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * from needful_things.reviews\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Evidence CLI Options\nDESCRIPTION: SQL query that generates a table of CLI command options with their flags, descriptions, and detailed usage information. Includes options for data sources, queries, debugging, and server configuration.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/reference/cli/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect '<code>sources</code>' as \"Command\", '<code>--changed</code>' as \"Flag\", 'Run sources whose queries have changed' as \"Description\", null as \"Detail\", 0 as row_num UNION ALL\nselect '<code>sources</code>' as \"Command\", '<code>--sources [source_name]</code>' as \"Flag\", 'Run sources from the specified sources' as \"Description\", 'Seperate with commas <code>--sources source1,source2</code>' as \"Detail\", 1 as row_num UNION ALL\nselect '<code>sources</code>' as \"Command\", '<code>--queries [query_name]</code>' as \"Flag\", 'Run the specified queries' as \"Description\", 'Seperate with commas' as \"Detail\", 2 as row_num UNION ALL\nselect '<code>sources</code>' as \"Command\", '<code>--debug</code>' as \"Flag\", 'Show debug output' as \"Description\", null as \"Detail\", 3 as row_num UNION ALL\nselect '<code>dev</code>' as \"Command\", '<code>--open [path]</code>' as \"Flag\", 'Open browser to <code>path</code> on startup' as \"Description\", 'Default <code>--open /</code> opens in root of the project' as \"Detail\", 4 as row_num UNION ALL\nselect '<code>dev</code>' as \"Command\", '<code>--host [host]</code>' as \"Flag\", 'Specify hostname' as \"Description\", '<code>--host 0.0.0.0</code> can be helpful in containers' as \"Detail\", 5 as row_num UNION ALL\nselect '<code>dev</code>' as \"Command\", '<code>--port <port></code>' as \"Flag\", 'Specify port' as \"Description\", 'Automatically increment if default <code>3000</code> is in use' as \"Detail\", 6 as row_num\nORDER BY row_num\n```\n\n----------------------------------------\n\nTITLE: PropListing Component Usage for Chart Configuration\nDESCRIPTION: Examples of PropListing component usage to document chart configuration options including formatting, styling, and axis properties. Each PropListing defines a specific chart property with its description, available options, and default values.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/line-chart/index.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<PropListing\n    name=\"colorPalette\"\n    description=\"Array of custom colours to use for the chart. E.g., {`{['#cf0d06','#eb5752','#e88a87']}`}\"\n    options=\"array of color strings (CSS name | hexademical | RGB | HSL)\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<PropListing\n    name=\"seriesColors\"\n    description=\"Apply a specific color to each series in your chart. Unspecified series will receive colors from the built-in palette as normal. Note the double curly braces required in the syntax `seriesColors={{\\\"Canada\\\": \\\"red\\\", \\\"US\\\": \\\"blue\\\"}}`\"\n    options=\"object with series names and assigned colors\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Multiple BigValue Cards\nDESCRIPTION: Example of multiple BigValue components arranged in a row showing different metrics.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/big-value/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<BigValue \n  data={orders_with_comparisons} \n  value=sales\n  fmt=usd0\n  comparison=sales_growth\n  comparisonFmt=pct1\n  comparisonTitle=\"MoM\"\n/>\n<BigValue \n  data={orders_with_comparisons} \n  value=num_orders\n  title=\"Orders\"\n  comparison=order_growth\n  comparisonFmt=pct1\n  comparisonTitle=\"MoM\"\n/>\n<BigValue \n  data={orders_with_comparisons} \n  value=aov\n  title=\"Average Order Value\"\n  fmt=usd2\n  comparison=aov_growth\n  comparisonFmt=pct1\n  comparisonTitle=\"MoM\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Multiple Dropdown Components for Categories\nDESCRIPTION: These HTML snippets define multiple Evidence Dropdown components with the same structure and purpose as the first category dropdown (name=category[n]), but are separated to allow multiple independent category selections. They use the 'categories' data to populate the dropdown options.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/lots-of-dropdowns.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n<Dropdown\n  name=category2\n  value=category\n  data={categories}\n  title=Category\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All categories\"/>\n</Dropdown>\n\ncategory2: {inputs.category2.value}\n\n</div>\n<div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n<Dropdown\n  name=category3\n  value=category\n  data={categories}\n  title=Category\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All categories\"/>\n</Dropdown>\n\ncategory3: {inputs.category3.value}\n\n</div><div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n<Dropdown\n  name=category4\n  value=category\n  data={categories}\n  title=Category\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All categories\"/>\n</Dropdown>\n\ncategory4: {inputs.category4.value}\n\n</div><div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n\n<Dropdown\n  name=category5\n  value=category\n  data={categories}\n  title=Category\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All categories\"/>\n</Dropdown>\n\ncategory5: {inputs.category5.value}\n\n</div><div class=\"grid grid-cols-2 overflow-x-hidden w-full\">\n\n<Dropdown\n  name=category6\n  value=category\n  data={categories}\n  title=Category\n  defaultValue=\"%\"\n>\n  <DropdownOption value=\"%\" valueLabel=\"All categories\"/>\n</Dropdown>\n\ncategory6: {inputs.category6.value}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Grouped Bar Chart in Evidence\nDESCRIPTION: Illustrates how to create a horizontal grouped bar chart that displays sales by category and channel. This chart type allows for easy comparison of values across categories and channels.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/bar-chart/index.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<BarChart\n    data={categories_by_channel}\n    x=category\n    y=sales\n    series=channel\n    type=grouped\n    swapXY=true\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type for HTML\nDESCRIPTION: Shows how to specify HTML content type and apply markdown styling to HTML elements using class attributes\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_52\n\nLANGUAGE: html\nCODE:\n```\ncontentType=html\n```\n\nLANGUAGE: html\nCODE:\n```\n<code class=markdown>Code</code>\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Scale from Another Column in Svelte\nDESCRIPTION: A Svelte snippet that shows how to render a DataTable where the color scale for a column is determined by the values of another column, utilizing custom formatting columns to specify visual properties dynamically.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_25\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={numbers_othercol}>\\n  <Column id=name/>\\n  <Column id=scale_defining_number fontColor={['green','red']}/>\\n  <Column id=number contentType=colorscale colorScale={['#6db678','white','#ce5050']} scaleColumn=scale_defining_number fmtCol=fmt/>\\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: DateRange Component with Multiple Preset Ranges\nDESCRIPTION: Demonstrates how to customize the date range picker to display multiple specific preset range options in the dropdown menu.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-range/index.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<DateRange\n    name=\"date_range_preset_2\"\n    presetRanges={['Last 7 Days', 'Last 3 Months', 'Year to Date', 'All Time']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Datasets for Bubble Charts in JavaScript\nDESCRIPTION: Defines three datasets used for bubble chart visualizations. The datasets include a small bubble dataset, a region-based dataset with scores and sizes, and a comprehensive country economic dataset with various indicators like GDP, inflation, and population.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/bubble-chart/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet smallb = [\n    {x: 1, y: 10, size: 1},\n    {x: 2, y: 20, size: 10},\n    {x: 3, y: 30, size: 50},\n    {x: 4, y: 40, size: 75},\n    {x: 5, y: 50, size: 100}\n]\n\nlet region_bubble = [\n    {region: 'West', score_a: 63, score_b: 51, size: 55},\n    {region: 'West', score_a: 61, score_b: 52, size: 8},\n    {region: 'West', score_a: 69, score_b: 35, size: 12},\n    {region: 'West', score_a: 50, score_b: 39, size: 28},\n    {region: 'West', score_a: 58, score_b: 49, size: 65},\n    {region: 'West', score_a: 59, score_b: 49, size: 95},\n    {region: 'West', score_a: 50, score_b: 46, size: 31},\n    {region: 'West', score_a: 72, score_b: 34, size: 6},\n    {region: 'West', score_a: 69, score_b: 54, size: 55},\n    {region: 'West', score_a: 46, score_b: 37, size: 78},\n    {region: 'West', score_a: 58, score_b: 31, size: 16},\n    {region: 'West', score_a: 50, score_b: 31, size: 33},\n    {region: 'West', score_a: 71, score_b: 48, size: 64},\n    {region: 'West', score_a: 61, score_b: 47, size: 89},\n    {region: 'East', score_a: 45, score_b: 39, size: 26},\n    {region: 'East', score_a: 68, score_b: 42, size: 66},\n    {region: 'East', score_a: 69, score_b: 62, size: 30},\n    {region: 'East', score_a: 59, score_b: 44, size: 23},\n    {region: 'East', score_a: 86, score_b: 57, size: 20},\n    {region: 'East', score_a: 90, score_b: 41, size: 43},\n    {region: 'East', score_a: 66, score_b: 60, size: 25},\n    {region: 'East', score_a: 70, score_b: 41, size: 2},\n    {region: 'East', score_a: 59, score_b: 42, size: 71},\n    {region: 'East', score_a: 64, score_b: 69, size: 84},\n    {region: 'East', score_a: 85, score_b: 84, size: 73},\n    {region: 'East', score_a: 77, score_b: 54, size: 91},\n    {region: 'East', score_a: 74, score_b: 48, size: 52},\n    {region: 'East', score_a: 88, score_b: 44, size: 21},\n    {region: 'East', score_a: 84, score_b: 85, size: 17},\n    {region: 'East', score_a: 78, score_b: 87, size: 99},\n    {region: 'South', score_a: 120, score_b: 69, size: 1},\n    {region: 'South', score_a: 106, score_b: 74, size: 13},\n    {region: 'South', score_a: 117, score_b: 67, size: 68},\n    {region: 'South', score_a: 89, score_b: 100, size: 36},\n    {region: 'South', score_a: 77, score_b: 65, size: 36},\n    {region: 'South', score_a: 100, score_b: 70, size: 58},\n    {region: 'South', score_a: 76, score_b: 52, size: 27},\n    {region: 'South', score_a: 111, score_b: 81, size: 49},\n    {region: 'South', score_a: 92, score_b: 103, size: 22},\n    {region: 'South', score_a: 105, score_b: 77, size: 71},\n    {region: 'South', score_a: 75, score_b: 89, size: 50},\n    {region: 'South', score_a: 104, score_b: 82, size: 25},\n    {region: 'South', score_a: 109, score_b: 68, size: 85},\n    {region: 'South', score_a: 102, score_b: 88, size: 62},\n    {region: 'South', score_a: 82, score_b: 68, size: 3}\n]\n\nlet countries = [\n    {country: 'United States', continent: 'North America', gdp_usd: 22996, gdp_growth_pct1: 0.017, interest_rate_pct1: 0.025, inflation_rate_pct1: 0.085, jobless_rate_pct1: 0.037, gov_budget: -16.7, debt_to_gdp: 137.2, current_account: -3.6, population: 332.4},\n    {country: 'China', continent: 'Asia', gdp_usd: 17734, gdp_growth_pct1: 0.004, interest_rate_pct1: 0.0365, inflation_rate_pct1: 0.027, jobless_rate_pct1: 0.054, gov_budget: -3.7, debt_to_gdp: 66.8, current_account: 1.8, population: 1412.6},\n    {country: 'Japan', continent: 'Asia', gdp_usd: 4937, gdp_growth_pct1: 0.002, interest_rate_pct1: -0.001, inflation_rate_pct1: 0.026, jobless_rate_pct1: 0.026, gov_budget: -12.6, debt_to_gdp: 266.2, current_account: 3.2, population: 125.31},\n    {country: 'Germany', continent: 'Europe', gdp_usd: 4223, gdp_growth_pct1: 0.017, interest_rate_pct1: 0.005, inflation_rate_pct1: 0.079, jobless_rate_pct1: 0.055, gov_budget: -3.7, debt_to_gdp: 69.3, current_account: 7.4, population: 83.16},\n    {country: 'United Kingdom', continent: 'Europe', gdp_usd: 3187, gdp_growth_pct1: 0.029, interest_rate_pct1: 0.0175, inflation_rate_pct1: 0.101, jobless_rate_pct1: 0.038, gov_budget: -6, debt_to_gdp: 95.9, current_account: -2.6, population: 67.53},\n    {country: 'India', continent: 'Asia', gdp_usd: 3173, gdp_growth_pct1: 0.135, interest_rate_pct1: 0.054, inflation_rate_pct1: 0.0671, jobless_rate_pct1: 0.078, gov_budget: -9.4, debt_to_gdp: 73.95, current_account: -1.7, population: 1380},\n    {country: 'France', continent: 'Europe', gdp_usd: 2937, gdp_growth_pct1: 0.042, interest_rate_pct1: 0.005, inflation_rate_pct1: 0.058, jobless_rate_pct1: 0.074, gov_budget: -6.5, debt_to_gdp: 112.9, current_account: 0.4, population: 67.63},\n    {country: 'Italy', continent: 'Europe', gdp_usd: 2100, gdp_growth_pct1: 0.047, interest_rate_pct1: 0.005, inflation_rate_pct1: 0.084, jobless_rate_pct1: 0.079, gov_budget: -7.2, debt_to_gdp: 150.8, current_account: 2.5, population: 59.24},\n    {country: 'Canada', continent: 'North America', gdp_usd: 1991, gdp_growth_pct1: 0.029, interest_rate_pct1: 0.025, inflation_rate_pct1: 0.076, jobless_rate_pct1: 0.049, gov_budget: -4.7, debt_to_gdp: 117.8, current_account: 0.1, population: 38.44},\n    {country: 'South Korea', continent: 'Asia', gdp_usd: 1799, gdp_growth_pct1: 0.029, interest_rate_pct1: 0.025, inflation_rate_pct1: 0.057, jobless_rate_pct1: 0.029, gov_budget: -6.1, debt_to_gdp: 42.6, current_account: 3.5, population: 51.74},\n    {country: 'Russia', continent: 'Europe', gdp_usd: 1776, gdp_growth_pct1: -0.04, interest_rate_pct1: 0.08, inflation_rate_pct1: 0.151, jobless_rate_pct1: 0.039, gov_budget: 0.8, debt_to_gdp: 18.2, current_account: 6.8, population: 145.55},\n    {country: 'Brazil', continent: 'South America', gdp_usd: 1609, gdp_growth_pct1: 0.032, interest_rate_pct1: 0.1375, inflation_rate_pct1: 0.1007, jobless_rate_pct1: 0.091, gov_budget: -4.5, debt_to_gdp: 80.27, current_account: -1.8, population: 213.32}\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Country Summary Data with SQL\nDESCRIPTION: This SQL snippet generates a summary of financial data for multiple countries, including metrics like value in USD and year-over-year change. Each entry in the union includes details such as the date, country name, category, and country-related links. The generated data can be used for reporting or visualization of country-specific economic statistics.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect date '2020-04-30' as date, 87 as value_usd, 0.0234 as yoy, 'Austria' as country, 'B' as category, 100384 as country_id, 'AT' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AT.png' as flag, 'https://www.google.ca/search?q=austria' as country_url\nunion all\nselect date '2020-05-01' as date, 95 as value_usd, 0.0534 as yoy, 'Australia' as country, 'C' as category, 104942 as country_id, 'AU' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AU.png' as flag, 'https://www.google.ca/search?q=australia' as country_url\nunion all\nselect date '2020-05-02' as date, 163 as value_usd, 0.0264 as yoy, 'Brazil' as country, 'A' as category, 100842 as country_id, 'BR' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/BR.png' as flag, 'https://www.google.ca/search?q=brazil' as country_url\nunion all\nselect date '2020-05-03' as date, 174 as value_usd, 0.0727 as yoy, 'Canada' as country, 'A' as category, 104975 as country_id, 'CA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/CA.png' as flag, 'https://www.google.ca/search?q=canada' as country_url\nunion all\nselect date '2020-05-04' as date, 214 as value_usd, -0.1223 as yoy, 'Chile' as country, 'B' as category, 100644 as country_id, 'CL' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/CL.png' as flag, 'https://www.google.ca/search?q=chile' as country_url\nunion all\nselect date '2020-05-05' as date, 342 as value_usd, 0.0124 as yoy, 'Denmark' as country, 'B' as category, 102948 as country_id, 'DK' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/DK.png' as flag, 'https://www.google.ca/search?q=denmark' as country_url\nunion all\nselect date '2020-05-06' as date, 331 as value_usd, 0.0252 as yoy, 'Estonia' as country, 'D' as category, 102495 as country_id, 'EE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/EE.png' as flag, 'https://www.google.ca/search?q=estonia' as country_url\nunion all\nselect date '2020-05-07' as date, 98 as value_usd, 0.0754 as yoy, 'Finland' as country, 'B' as category, 104962 as country_id, 'FI' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/FI.png' as flag, 'https://www.google.ca/search?q=finland' as country_url\nunion all\nselect date '2020-05-08' as date, 128 as value_usd, -0.0246 as yoy, 'Ghana' as country, 'C' as category, 100599 as country_id, 'GH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/GH.png' as flag, 'https://www.google.ca/search?q=ghana' as country_url\nunion all\nselect date '2020-05-09' as date, 153 as value_usd, 0.0447 as yoy, 'Honduras' as country, 'D' as category, 102494 as country_id, 'HN' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/HN.png' as flag, 'https://www.google.ca/search?q=honduras' as country_url\nunion all\nselect date '2020-05-10' as date, 384 as value_usd, -0.0255 as yoy, 'India' as country, 'A' as category, 101948 as country_id, 'IN' as country_code,  'https://flaglog.com/codes/standardized-rectangle-120px/IN.png' as flag, 'https://www.google.ca/search?q=india' as country_url\nunion all\nselect date '2020-05-11' as date, 234 as value_usd, 0.0855 as yoy, 'Ireland' as country, 'B' as category, 100987 as country_id, 'IE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/IE.png' as flag, 'https://www.google.ca/search?q=ireland' as country_url\nunion all\nselect date '2020-05-12' as date, 67 as value_usd, 0.0635 as yoy, 'Jamaica' as country, 'C' as category, 101248 as country_id, 'JM' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/JM.png' as flag, 'https://www.google.ca/search?q=jamaica' as country_url\nunion all\nselect date '2020-05-13' as date, 125 as value_usd, -0.0232 as yoy, 'Kenya' as country, 'C' as category, 101947 as country_id, 'KE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/KE.png' as flag, 'https://www.google.ca/search?q=kenya' as country_url\nunion all\nselect date '2020-05-14' as date, 118 as value_usd, -0.0343 as yoy, 'Lebanon' as country, 'D' as category, 108849 as country_id, 'LB' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/LB.png' as flag, 'https://www.google.ca/search?q=lebanon' as country_url\nunion all\nselect date '2020-05-15' as date, 263 as value_usd, 0.0883 as yoy, 'Mexico' as country, 'B' as category, 100763 as country_id, 'MX' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/MX.png' as flag, 'https://www.google.ca/search?q=mexico' as country_url\nunion all\nselect date '2020-05-16' as date, 211 as value_usd, 0.0395 as yoy, 'Nigeria' as country, 'A' as category, 100837 as country_id, 'NG' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/NG.png' as flag, 'https://www.google.ca/search?q=nigeria' as country_url\nunion all\nselect date '2020-05-17' as date, 192 as value_usd, 0.0234 as yoy, 'Oman' as country, 'D' as category, 100993 as country_id, 'OM' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/OM.png' as flag, 'https://www.google.ca/search?q=oman' as country_url\nunion all\nselect date '2020-05-18' as date, 59 as value_usd, 0.0828 as yoy, 'Philippines' as country, 'D' as category, 104128 as country_id, 'PH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/PH.png' as flag, 'https://www.google.ca/search?q=philippines' as country_url\nunion all\nselect date '2020-05-19' as date, 113 as value_usd, 0.0554 as yoy, 'Qatar' as country, 'C' as category, 100181 as country_id, 'QA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/QA.png' as flag, 'https://www.google.ca/search?q=qatar' as country_url\nunion all\nselect date '2020-05-20' as date, 190 as value_usd, 0.0134 as yoy, 'Romania' as country, 'A' as category, 101384 as country_id, 'RO' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/RO.png' as flag, 'https://www.google.ca/search?q=romania ! startups' as country_url\nunion all\nselect date '2020-05-21' as date, 190 as value_usd, -0.0554 as yoy, 'Sweden' as country, 'B' as category, 101847 as country_id, 'SE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/SE.png' as flag, 'https://www.google.ca/search?q=sweden' as country_url\nunion all\nselect date '2020-05-22' as date, 248 as value_usd, 0.0254 as yoy, 'Thailand' as country, 'C' as category, 104837 as country_id, 'TH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/TH.png' as flag, 'https://www.google.ca/search?q=thailand' as country_url\nunion all\nselect date '2020-05-23' as date, 168 as value_usd, 0.0294 as yoy, 'Ukraine' as country, 'C' as category, 101938 as country_id, 'UA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/UA.png' as flag, 'https://www.google.ca/search?q=ukraine' as country_url\nunion all\nselect date '2020-05-24' as date, 101 as value_usd, 0.0234 as yoy, 'Vietnam' as country, 'A' as category, 104948 as country_id, 'VN' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/VN.png' as flag, 'https://www.google.ca/search?q=vietnam' as country_url\nunion all\nselect date '2020-05-25' as date, 67 as value_usd, 0.0294 as yoy, 'Yemen' as country, 'B' as category, 100774 as country_id, 'YE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/YE.png' as flag, 'https://www.google.ca/search?q=yemen' as country_url\nunion all\nselect date '2020-05-26' as date, 100 as value_usd, 0.011 as yoy, 'Zimbabwe' as country, 'A' as category, 100337 as country_id, 'ZW' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/ZW.png' as flag, 'https://www.google.ca/search?q=zimbabwe' as country_url\n```\n\n----------------------------------------\n\nTITLE: Bubble Map for Location Sales\nDESCRIPTION: Evidence BubbleMap component showing location points with sales volume\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/maps.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<BubbleMap title=\"Bubble Map\" data={la_locations} lat=lat long=long size=sales/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixed Chart Visualization\nDESCRIPTION: Creates a mixed chart combining scatter plot, line chart, and bar chart using the same dataset. Demonstrates how to combine different chart types with custom styling.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/numberMulty/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Chart data={full}>\n    <Scatter y=y2 opacity=1/>\n    <Line y=y3/>\n    <Bar y=y1 fillColor=maroon fillOpacity=0.3/>\n</Chart>\n```\n\n----------------------------------------\n\nTITLE: Typescript Type Definition for Flat Options\nDESCRIPTION: Alternative type definition demonstrating a flat object structure when nest is set to false\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/create-source-plugin/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ ssl: false } | { ssl: true, sslmode: string }\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Data Table in Evidence\nDESCRIPTION: This snippet demonstrates querying a dataset using 'select * from needful_things.my_query' and displaying the result using a DataTable component. The query retrieves all records and columns from the specified source. A DataTable component is then used to render this data within an Evidence application.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/build-your-first-app/index.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from needful_things.my_query\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<DataTable data={my_query_summary} />\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Campaign Date Ranges with Names\nDESCRIPTION: This SQL query creates a dataset of marketing campaigns with their start and end dates, plus a name for each campaign. Note that the last campaign has a null end date, indicating an ongoing campaign.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/annotations/+page.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect '2019-07-05' as start_date, '2019-11-30' as end_date, 'Campaign A' as name\nunion all\nselect '2020-07-14' as start_date, '2020-12-20' as end_date, 'Campaign B' as name\nunion all\nselect '2021-04-14' as start_date, null as end_date, 'Campaign C' as name\n```\n\n----------------------------------------\n\nTITLE: DateInput with Default Preset Range\nDESCRIPTION: Example showing how to set a default value for a date range picker. This sets 'Last 7 Days' as the initial selection when the component loads.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/inputs/date-input/index.md#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<DateInput\n    name=name_of_date_range\n    defaultValue={'Last 7 Days'}\n    range\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Posts DataTable\nDESCRIPTION: A JavaScript component to display retrieved posts within a DataTable. It handles empty datasets by triggering a warning, necessitating the 'posts' dataset and accompanying inputs.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/filter-deps.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DataTable data={posts} emptySet=\"warn\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright for Evidence Testing\nDESCRIPTION: JavaScript code to configure Playwright by importing a shared configuration file. This simplifies setup while allowing for project-specific overrides.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { config } from '../playwright-config';\n\nexport default defineConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Missing Opening Bracket Error in SQL\nDESCRIPTION: Illustrates a syntax error where the opening bracket is missing in a reference.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    n_days / 365 as approx_years\nfrom working_reference}\n```\n\n----------------------------------------\n\nTITLE: Modifying Package.json Dependencies for Workspace\nDESCRIPTION: Diff showing how to replace version numbers of @evidence-dev dependencies with workspace references. This enables the test project to use the local versions of Evidence packages.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n\t\"dependencies\": {\n-\t\t\"@evidence-dev/bigquery\": \"^2.0.7\",\n-\t\t\"@evidence-dev/core-components\": \"^4.7.2\",\n-\t\t\"@evidence-dev/csv\": \"^1.0.12\",\n-\t\t...\n+\t\t\"@evidence-dev/bigquery\": \"workspace:*\",\n+\t\t\"@evidence-dev/core-components\": \"workspace:*\",\n+\t\t\"@evidence-dev/csv\": \"workspace:*\",\n+\t\t...\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Date-Based Annotation Data for Charts in SQL\nDESCRIPTION: This SQL query creates date-based annotation data with start dates, end dates, and labels. This can be used to annotate specific time periods on timeline charts such as marketing campaigns.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/charts/line-chart/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect '2020-12-05' as start_date, '2022-12-31' as end_date, 'Campaign A' as label\nunion all\nselect '2023-02-14' as start_date, '2023-03-20' as end_date, 'Campaign B' as label\nunion all\nselect '2023-04-14' as start_date, null as end_date, 'Campaign C' as label\n```\n\n----------------------------------------\n\nTITLE: Clickable Link Point Map with Custom Tooltip in Svelte\nDESCRIPTION: Shows how to create a PointMap with a clickable link in the tooltip and custom styling for different tooltip elements.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/maps/point-map/index.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<PointMap \n    data={la_locations} \n    lat=lat \n    long=long \n    value=sales \n    valueFmt=usd \n    pointName=point_name \n    height=200\n    tooltipType=click\n    tooltip={[\n        {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},\n        {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},\n        {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}\n    ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Hashtags from Database in SQL\nDESCRIPTION: SQL query that selects all columns and rows from the 'hashtags' table, providing a complete dataset of available hashtags.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/social-media/flicker.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM hashtags\n```\n\n----------------------------------------\n\nTITLE: Orders by State SQL Query\nDESCRIPTION: SQL query that aggregates sales and order counts by state for regression analysis.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/charts/annotations/index.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    state,\n    sum(sales) as sales,\n    count(*) as num_orders\nfrom orders\ngroup by all\n```\n\n----------------------------------------\n\nTITLE: Displaying Informational Alert - HTML\nDESCRIPTION: This snippet showcases an informational alert with the status set to 'info', used to communicate information to the user.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/ui-components/alert/+page.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Alert status=\"info\">\nThis is the informational alert\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dropdown Component for Item Selection\nDESCRIPTION: This React component renders a dropdown menu populated with items, allowing multiple selections. It includes a default value and a predefined option for user convenience.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dependent-dropdown.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"<Dropdown \\n    data={items}\\n    value=item\\n    name=item\\n    multiple\\n    defaultValue=\\\"Boxing Gloves\\\"\\n>\\n    <DropdownOption value=\\\"Made Up\\\"/>\\n</Dropdown>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Component Aliases\nDESCRIPTION: This YAML snippet shows how to configure aliases for components from plugins, allowing them to be referenced by alternative names in the Evidence markdown.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/plugins/component-plugins/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n    @acme/charting:\n        aliases:\n            LongNameForAChart: AcmeChart\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Formatting in DataTable\nDESCRIPTION: This set of examples demonstrates how to apply conditional formatting to columns in a DataTable. It shows different color scale options including default, positive, negative, and info scales.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/docs/pages/components/data/data-table/index.md#2025-04-21_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries}>\n    <Column id=country />\n    <Column id=country_id align=center/>\n    <Column id=category align=center/>\n    <Column id=value_usd contentType=colorscale/>\n</DataTable>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries}>\n    <Column id=country />\n    <Column id=country_id align=center/>\n    <Column id=category align=center/>\n    <Column id=value_usd contentType=colorscale colorScale=positive/>\n</DataTable>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries}>\n    <Column id=country />\n    <Column id=country_id align=center/>\n    <Column id=category align=center/>\n    <Column id=value_usd contentType=colorscale colorScale=negative/>\n</DataTable>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<DataTable data={countries}>\n    <Column id=country />\n    <Column id=country_id align=center/>\n    <Column id=category align=center/>\n    <Column id=value_usd contentType=colorscale colorScale=info/>\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Installing Evidence Template Using CLI\nDESCRIPTION: Commands to create a new Evidence project from a template using degit, install dependencies, and start the development server.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/e2e/dev-server-startup/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit evidence-dev/template my-project\ncd my-project\nnpm install\nnpm run sources\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Variable in JavaScript\nDESCRIPTION: Sets a variable 'vvv' to the value 129 using JavaScript.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/queries/query-chaining/+page.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet vvv = 129\n```\n\n----------------------------------------\n\nTITLE: Initializing Bank Dataset with Null Values - JavaScript\nDESCRIPTION: Defines an array containing bank establishment data with null values representing missing or unavailable data points across districts and years.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/example-project/src/pages/chart-testing/dateSeries/+page.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet nulls = [\n    {fed_reserve_district: 'NY', established_date: '2015-01-01', banks: 1},\n    {fed_reserve_district: 'SF', established_date: '2015-01-01', banks: null},\n    // ... additional entries\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Items Based on Category Selection\nDESCRIPTION: This SQL snippet fetches distinct items from the orders table, filtering by the selected category. It uses a parameterized query where the category value is dynamically inserted through user input from a dropdown.\nSOURCE: https://github.com/evidence-dev/evidence/blob/next/sites/test-env/pages/dependent-dropdown.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"\"\"sql items\\nselect\\n    DISTINCT(item) as item,\\nfrom needful_things.orders\\nwhere category = '${inputs.category.value}'\\n\"\"\"\n```"
  }
]