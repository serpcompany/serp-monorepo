[
  {
    "owner": "amd",
    "repo": "gaia",
    "content": "TITLE: Starting GAIA Servers with Default Settings (Bash)\nDESCRIPTION: This snippet demonstrates how to start the GAIA servers with default settings using the `gaia-cli start` command. It assumes that the `gaia-cli` tool is installed and configured according to the Getting Started Guide.  This is the simplest way to start the GAIA environment.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start\n```\n\n----------------------------------------\n\nTITLE: Stopping GAIA Servers (Bash)\nDESCRIPTION: This snippet shows how to stop all running GAIA servers using the `gaia-cli stop` command. It is important to use this command to ensure that all server processes are properly shut down. It stops the agent, the model, and any clients.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli stop\n```\n\n----------------------------------------\n\nTITLE: Starting GAIA Servers with Specific Configuration (Bash)\nDESCRIPTION: This snippet shows how to start the GAIA servers with a specific model, backend, device, and data type.  It uses the `gaia-cli start` command with several options to customize the server configuration for optimal performance, specifically using the Llama 3.2 1B Instruct model in iGPU/NPU-hybrid mode.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start --model \"amd/Llama-3.2-1B-Instruct-awq-g128-int4-asym-fp16-onnx-hybrid\" --backend \"oga\" --device \"hybrid\" --dtype \"int4\"\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment\nDESCRIPTION: This command creates a new conda environment named 'gaiaenv' with Python version 3.10. A conda environment is used to isolate project dependencies.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n gaiaenv python=3.10\n```\n\n----------------------------------------\n\nTITLE: Activating Conda Environment\nDESCRIPTION: This command activates the 'gaiaenv' conda environment. Activating the environment ensures that subsequent commands use the correct Python interpreter and dependencies.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda activate gaiaenv\n```\n\n----------------------------------------\n\nTITLE: Starting a Chat Session (Bash)\nDESCRIPTION: This snippet demonstrates how to start an interactive chat session with the AI agent using the `gaia-cli chat` command.  It assumes that the GAIA servers are already running.  The chat session allows for conversational interaction with the AI model.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli chat\n```\n\n----------------------------------------\n\nTITLE: Starting GAIA CLI Servers\nDESCRIPTION: Starts the GAIA CLI servers with default settings.  It demonstrates how to initiate the server and how to specify the model, backend, device, and data type for optimized performance using the Llama 3.2 1B Instruct model.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start\n```\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start --model \"amd/Llama-3.2-1B-Instruct-awq-g128-int4-asym-fp16-onnx-hybrid\" --backend \"oga\" --device \"hybrid\" --dtype \"int4\"\n```\n\n----------------------------------------\n\nTITLE: Cloning GAIA Repository\nDESCRIPTION: This command clones the GAIA repository from GitHub to the local machine. It is the first step in the setup and installation process.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/amd/gaia.git\n```\n\n----------------------------------------\n\nTITLE: Verifying GAIA Installation\nDESCRIPTION: This command runs the `gaia-cli` tool with the `-v` flag to display the GAIA version. This verifies that the installation was successful and that the GAIA CLI is accessible.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli -v\n```\n\n----------------------------------------\n\nTITLE: Llama 3.2 3B Model Usage (Bash)\nDESCRIPTION: This snippet demonstrates how to start the GAIA servers with the Llama 3.2 3B model specified using the `--model` option.  It is a common usage example showing how to select a specific model.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start --model llama3.2:3b\n```\n\n----------------------------------------\n\nTITLE: Launching GAIA CLI Talk Mode\nDESCRIPTION: Launches the GAIA CLI in talk mode, enabling voice-based interaction. The second example shows how to launch the talk mode using only Automatic Speech Recognition (ASR) without Text-to-Speech (TTS).\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli talk\n```\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli talk --no-tts\n```\n\n----------------------------------------\n\nTITLE: GAIA CLI Start Command Usage (Bash)\nDESCRIPTION: This snippet illustrates the general syntax for the `gaia-cli start` command, highlighting the use of optional flags to configure the server. This command allows customization of AI agent behavior and resource allocation.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to GAIA Root\nDESCRIPTION: This command changes the current directory to the GAIA root directory. This is necessary to run subsequent commands within the project context.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncd ./gaia\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging (Bash)\nDESCRIPTION: This snippet shows how to enable debug logging for troubleshooting purposes using the `--logging-level DEBUG` option. This provides verbose logging data for investigation.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start --logging-level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Configuring Whisper Model Size in GAIA CLI Talk Mode\nDESCRIPTION: Configures the Whisper model size for speech recognition in GAIA CLI talk mode. The available options are tiny, base, small, medium, and large. Larger models improve ASR accuracy at the cost of higher resource usage.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli talk --whisper-model-size medium  # Options: tiny, base, small, medium, large\n```\n\n----------------------------------------\n\nTITLE: Listing Audio Devices (Bash)\nDESCRIPTION: This snippet demonstrates how to list available audio input devices using the `gaia-cli talk --list-devices` command. This is helpful for identifying the correct device for voice interaction.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli talk --list-devices\n```\n\n----------------------------------------\n\nTITLE: GAIA CLI Youtube Utility Usage (Bash)\nDESCRIPTION: This snippet demonstrates the general syntax for the `gaia-cli youtube` command, highlighting the use of options like `--download-transcript` and `--output-path` to download transcripts from YouTube videos.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli youtube [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Downloading YouTube Transcript (Bash)\nDESCRIPTION: This snippet shows how to download a transcript from a YouTube URL and save it to a specified output path using the `gaia-cli youtube` command with the `--download-transcript` and `--output-path` options.  It is used to extract text from YouTube videos.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli youtube --download-transcript \"https://youtube.com/watch?v=...\" --output-path transcript.txt\n```\n\n----------------------------------------\n\nTITLE: Launching GAIA Servers in a Separate Terminal Window (Bash)\nDESCRIPTION: This snippet shows how to launch the GAIA servers in a separate terminal window using the `--background terminal` option.  This is useful for running the servers in the background without blocking the current terminal.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start --background terminal\n```\n\n----------------------------------------\n\nTITLE: Launching Silently with Logging (Bash)\nDESCRIPTION: This snippet demonstrates how to launch the GAIA servers silently in the background with output redirected to `gaia.cli.log` using the `--background silent` option.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start --background silent\n```\n\n----------------------------------------\n\nTITLE: Showing Performance Stats After Each Response (Bash)\nDESCRIPTION: This snippet demonstrates how to enable performance statistics after each response using the `--stats` option. This enables runtime analytics.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start --stats\n```\n\n----------------------------------------\n\nTITLE: Specifying Audio Device Index in GAIA CLI Talk Mode\nDESCRIPTION: Specifies which audio device to use for voice input in GAIA CLI talk mode. This is useful when multiple microphones are available. The default audio device index is 1.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli talk --audio-device-index 2  # Default: 1\n```\n\n----------------------------------------\n\nTITLE: Killing a Process on a Specific Port (Bash)\nDESCRIPTION: This snippet shows how to terminate a process running on a specific port using the `gaia-cli kill --port PORT_NUMBER` command.  This is a cleanup function.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli kill --port PORT_NUMBER\n```\n\n----------------------------------------\n\nTITLE: Killing Process Running on Port 8000 (Bash)\nDESCRIPTION: This snippet demonstrates how to kill a process running on port 8000 using the `gaia-cli kill` command. It provides a practical example of process termination.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli kill --port 8000\n```\n\n----------------------------------------\n\nTITLE: Killing Process Running on Port 8001 (Bash)\nDESCRIPTION: This snippet demonstrates how to kill a process running on port 8001 using the `gaia-cli kill` command.  It provides another practical example of how to terminate processes.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli kill --port 8001\n```\n\n----------------------------------------\n\nTITLE: Running GAIA (Bash)\nDESCRIPTION: This command launches the GAIA application to test the newly compiled UI changes. It assumes the 'gaia' executable is in the system's PATH or can be run from the current directory.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/ui.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngaia\n```\n\n----------------------------------------\n\nTITLE: GAIA CLI Test Command Usage (Bash)\nDESCRIPTION: This snippet shows the general syntax for the `gaia-cli test` command, highlighting the use of the `--test-type` option to specify the type of test to run. It provides a framework for various TTS and ASR tests.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type TYPE [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Installing GAIA Dependencies (Hybrid)\nDESCRIPTION: This command installs GAIA dependencies for Hybrid mode (Ryzen AI systems) using pip. The `-e` flag enables editable mode, creating links to sources instead of copying files. The `.[hybrid,joker,clip,talk,dev]` specifies the extra dependencies to install.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[hybrid,joker,clip,talk,dev]\n```\n\n----------------------------------------\n\nTITLE: Installing Ryzen AI Dependencies (Hybrid)\nDESCRIPTION: This command installs Ryzen AI specific dependencies using the `lemonade-install` tool. The `--ryzenai hybrid` flag specifies that the installation is for hybrid mode. The `-y` flag automatically confirms all prompts.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlemonade-install --ryzenai hybrid -y\n```\n\n----------------------------------------\n\nTITLE: Navigating to Interface Directory (Bash)\nDESCRIPTION: This command changes the current directory to the 'interface' directory within the GAIA project's source code, facilitating subsequent compilation steps.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/ui.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd src/gaia/interface\n```\n\n----------------------------------------\n\nTITLE: Navigating to Qt Applications Directory (Bash)\nDESCRIPTION: This command guides the user to the directory where Qt Designer (designer.exe) is located within a typical Python environment setup using miniconda. It assumes the environment name is known.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/ui.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nC:\\Users\\<YOUR_USER>\\miniconda3\\envs\\<YOUR_GAIA_ENV>\\Lib\\site-packages\\qt6_applications\\Qt\\bin\n```\n\n----------------------------------------\n\nTITLE: Launching in a New Terminal Window (Bash)\nDESCRIPTION: This snippet shows how to launch the GAIA servers in a new terminal window using the `--background terminal` option.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli start --background terminal\n```\n\n----------------------------------------\n\nTITLE: ASR File Transcription Test (Bash)\nDESCRIPTION: This snippet demonstrates how to test ASR file transcription using the `asr-file-transcription` test type, an input audio file, and a Whisper model size.  It converts audio files into text.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type asr-file-transcription --input-audio-file ./data/audio/test.m4a --whisper-model-size base\n```\n\n----------------------------------------\n\nTITLE: ASR Microphone Input Test (Bash)\nDESCRIPTION: This snippet shows how to test ASR microphone input for a specified duration using the `asr-microphone` test type, recording duration, and audio device index.  It transcribes speech captured from a microphone.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type asr-microphone --recording-duration 30 --audio-device-index 1\n```\n\n----------------------------------------\n\nTITLE: ASR Audio File Transcription Test in GAIA CLI\nDESCRIPTION: Tests the transcription of an existing audio file using the ASR system in GAIA CLI.  Requires specifying the path to the audio file with the `--input-audio-file` option. The whisper model size can also be adjusted.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type asr-file-transcription --input-audio-file path/to/audio.wav\n```\n\n----------------------------------------\n\nTITLE: ASR List Audio Devices Test in GAIA CLI\nDESCRIPTION: Lists available audio input devices using the ASR system in GAIA CLI. This is useful for determining the correct audio device index to use for voice input.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type asr-list-audio-devices\n```\n\n----------------------------------------\n\nTITLE: ASR Microphone Recording Test in GAIA CLI\nDESCRIPTION: Tests real-time transcription from your microphone using the ASR system in GAIA CLI.  The recording duration can be specified using the `--recording-duration` option, and the whisper model size and audio device index can also be adjusted.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type asr-microphone --recording-duration 15\n```\n\n----------------------------------------\n\nTITLE: TTS Streaming Test (Bash)\nDESCRIPTION: This snippet demonstrates how to test TTS streaming playback using the `tts-streaming` test type and custom text. This validates the streaming functionality of the TTS system.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type tts-streaming --test-text \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: TTS Audio File Generation Test (Bash)\nDESCRIPTION: This snippet shows how to test TTS audio file generation using the `tts-audio-file` test type, custom text, and an output file path. It creates an audio file from the specified text and verifies the output.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type tts-audio-file --test-text \"Hello, world!\" --output-audio-file my_speech.wav\n```\n\n----------------------------------------\n\nTITLE: TTS Text Preprocessing Test in GAIA CLI\nDESCRIPTION: Tests how the TTS system processes and formats text before speech generation in GAIA CLI. Optionally provide custom test text using the `--test-text` option.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type tts-preprocessing\n```\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type tts-preprocessing --test-text \"Your test text here\"\n```\n\n----------------------------------------\n\nTITLE: TTS Streaming Playback Test in GAIA CLI\nDESCRIPTION: Tests real-time audio generation and playback with progress visualization using the TTS system in GAIA CLI. Optionally provide custom test text using the `--test-text` option.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type tts-streaming\n```\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type tts-streaming --test-text \"Your test text here\"\n```\n\n----------------------------------------\n\nTITLE: TTS Audio File Generation Test in GAIA CLI\nDESCRIPTION: Tests audio generation and saves the output to a WAV file using the TTS system in GAIA CLI. Specify the test text with the `--test-text` option and the output file path with the `--output-audio-file` option.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/talk.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type tts-audio-file --test-text \"Your test text here\" --output-audio-file ./test_output.wav\n```\n\n----------------------------------------\n\nTITLE: Compiling UI Form with pyside6-uic (Bash)\nDESCRIPTION: This command uses the `pyside6-uic` tool to compile the `form.ui` file into a Python file (`ui_form.py`). This process converts the UI design into executable code that can be used in the GAIA application.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/ui.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npyside6-uic form.ui -o ui_form.py\n```\n\n----------------------------------------\n\nTITLE: Compiling Resources with pyside6-rcc (Bash)\nDESCRIPTION: This command utilizes `pyside6-rcc` to compile the `resource.qrc` file, which contains definitions of images and other resources used in the UI.  The output is a Python file `rc_resource.py` containing the compiled resources. This step is optional and only needed if resource files were modified.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/ui.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npyside6-rcc resource.qrc -o rc_resource.py\n```\n\n----------------------------------------\n\nTITLE: Running NSIS Compiler with arguments\nDESCRIPTION: This command compiles the NSIS installer with specified OGATOKEN, HF_TOKEN, and MODE. The OGATOKEN is a GitHub token with access to the `oga-npu` repository and the HF_TOKEN is a Hugging Face token. The MODE parameter specifies which mode of installation to use (e.g., NPU).\nSOURCE: https://github.com/amd/gaia/blob/main/docs/installer.md#_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\n\"C:\\Program Files (x86)\\NSIS\\makensis.exe\" /DOGA_TOKEN=<token> /DHF_TOKEN=<token> /DMODE=NPU Installer.nsi\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip\nDESCRIPTION: This command attempts to upgrade the pip package installer to the latest version.  It is provided as a potential solution for pip installation errors encountered during the GAIA setup.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Server State Configuration (JSON)\nDESCRIPTION: This snippet shows the structure of the `.gaia_servers.json` file, which stores server configuration and state information. This configuration file tracks connection details, model configuration, server process IDs, agent settings and logging preferences.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"agent_name\": \"Chaty\",\n    \"host\": \"127.0.0.1\",\n    \"port\": 8001,\n    \"model\": \"llama3.2:1b\",\n    \"max_new_tokens\": 512,\n    \"backend\": \"ollama\",\n    \"device\": \"cpu\",\n    \"dtype\": \"int4\",\n    \"server_pids\": {\n        \"agent\": 27324,\n        \"ollama_model\": 25176,\n        \"ollama_client\": 13988\n    },\n    \"logging_level\": \"DEBUG\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GAIA Dependencies (Generic)\nDESCRIPTION: This command installs GAIA dependencies for Generic mode (non-Ryzen AI systems) using pip. The `-e` flag enables editable mode, creating links to sources instead of copying files. The `.[clip,joker,talk,dev]` specifies the extra dependencies to install.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/dev.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[clip,joker,talk,dev]\n```\n\n----------------------------------------\n\nTITLE: TTS Preprocessing Test (Bash)\nDESCRIPTION: This snippet shows how to test TTS text preprocessing using the `tts-preprocessing` test type and a custom text. It ensures proper text preparation for speech synthesis.\nSOURCE: https://github.com/amd/gaia/blob/main/docs/cli.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngaia-cli test --test-type tts-preprocessing --test-text \"Hello, world!\"\n```"
  }
]