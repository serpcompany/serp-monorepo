[
  {
    "owner": "casper-network",
    "repo": "casper-node",
    "content": "TITLE: Implementing Call Function for Counter Contract Installation in AssemblyScript\nDESCRIPTION: This snippet defines the Call function, which is responsible for installing the counter contract. It initializes the contract state, sets up entry points, and creates necessary keys for contract access and version tracking.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/counter-installer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function call(): void {\n  // Create entry points to get the counter value and to increment the counter by 1.\n  let counterEntryPoints = new CL.EntryPoints();\n\n  let entryPointInc = new CL.EntryPoint(COUNTER_INC, new Array(), new CLType(CLTypeTag.Unit), new CL.PublicAccess(), CL.EntryPointType.Contract);\n  counterEntryPoints.addEntryPoint(entryPointInc);\n  let entryPointGet = new CL.EntryPoint(COUNTER_GET, new Array(), new CLType(CLTypeTag.I32), new CL.PublicAccess(), CL.EntryPointType.Contract);\n  counterEntryPoints.addEntryPoint(entryPointGet);\n\n  // Initialize counter to 0.\n  let counterLocalKey = Key.create(CLValue.fromI32(0));\n  if (!counterLocalKey) {\n    Error.fromUserError(0).revert();\n    return;\n  }\n\n  // Create initial named keys of the contract.\n  let counterNamedKeys = new Array<Pair<String, Key>>();\n  counterNamedKeys.push(new Pair<String, Key>(COUNT_KEY, counterLocalKey));\n\n  const result = CL.newContract(\n    counterEntryPoints,\n    counterNamedKeys,\n    \"counter_package_name\",\n    \"counter_access_uref\",\n  );\n\n  // To create a locked contract instead, use new_locked_contract and throw away the contract version returned\n  // const result = CL.newLockedContract(counterEntryPoints, counterNamedKeys, \"counter_package_name\", \"counter_access_uref\");\n\n  // The current version of the contract will be reachable through named keys\n  const versionURef = Key.create(CLValue.fromI32(result.contractVersion));\n  if (!versionURef) {\n    return;\n  }\n  CL.putKey(CONTRACT_VERSION_KEY, versionURef);\n\n  // Hash of the installed contract will be reachable through named keys\n  CL.putKey(COUNTER_KEY, Key.fromHash(result.contractHash));\n}\n```\n\n----------------------------------------\n\nTITLE: Gas Cost Changes in Storage Operations and Host Functions\nDESCRIPTION: Documentation of significant changes to gas costs in version 7.0.1, including increases to storage operations and host function calls. These changes affect the economic model of executing contracts on the Casper network.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/execution_engine/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.0.1\n\n### Changed\n* Change the cost of `wasm.storage_costs.gas_per_byte` and `shared::storage_costs::DEFAULT_GAS_PER_BYTE_COST` from `630_000` to `1_117_587`.\n* Change the cost of the host function `casper_add_associated_key` from `9_000` to `1_200_000`.\n* Change the cost of the argument `entry_points_size` of host function `casper_add_contract_version` from `0` to `120_000`.\n* Change the cost of the host function `casper_blake2b`and its argument `in_size` from `200` and `0` respectively to `1_200_000` to `120_000`.\n* Change the cost of the host function `casper_call_contract` and its arguments `entry_point_name_size` and `runtime_args_size` from `4_500`, `0` and `420` respectively to `300_000_000`, `120_000` and `120_000`.\n* Change the cost of the host function `casper_call_versioned_contract` and the arguments `entry_point_name_size` and `runtime_args_size` from `4_500`, `0` and `420` respectively to `300_000_000`, `120_000` and `120_000`.\n* Change the cost of the host function `casper_get_balance` from `3_800` to `3_000_000`.\n* Change the cost of arguments `name_size` and `dest_size` of host function `casper_get_named_arg` from `0` to `120_000`.\n* Change the cost of the host function `casper_put_key` and its arguments `name_size` and `key_size` from `38_000`, `1_100` and `0` respectively to `100_000_000`, `120_000` and `120_000`.\n* Change the cost of the host function `casper_read_value` and its argument `key_size` from `6_000` and `0` respectively to `60_000` and `120_000`.\n* Change the cost of the argument `urefs_size` of host function `casper_remove_contract_user_group_urefs` from `0` to `120_000`.\n* Change the cost of the host function `casper_transfer_from_purse_to_purse` from `82_000` to `82_000_000`.\n```\n\n----------------------------------------\n\nTITLE: Simple Casper Smart Contract Example in AssemblyScript\nDESCRIPTION: Basic AssemblyScript smart contract that demonstrates the error handling mechanism in Casper. It imports Error and ErrorCode from the casper-contract package and creates a simple contract that returns an error.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract_as/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//@ts-nocheck\nimport {Error, ErrorCode} from \"casper-contract/error\";\n\n// simplest possible feedback loop\nexport function call(): void {\n    Error.fromErrorCode(ErrorCode.None).revert(); // ErrorCode: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Call Function for Counter Contract Session\nDESCRIPTION: Defines the main call function that executes the session code. It retrieves the counter contract's hash, gets the current counter value, increments it, verifies the new value has increased by exactly 1, and reverts with an error if the increment is incorrect.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/increment-counter/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function call(): void {\n  // Read the Counter smart contract's ContractHash.\n  let contractHashKey = CL.getKey(COUNTER_KEY);\n  if (!contractHashKey) {\n    Error.fromUserError(66).revert();\n    return;\n  }\n  let contractHash = contractHashKey.hash;\n  if (!contractHash) {\n    Error.fromUserError(66).revert();\n    return;\n  }\n\n  // Call Counter to get the current value.\n  let currentCounterValue = counterGet(contractHash);\n\n  // Call Counter to increment the value.\n  counterInc(contractHash);\n\n  // Call Counter to get the new value.\n  let newCounterValue = counterGet(contractHash);\n\n  // Expect counter to increment by one.\n  if (newCounterValue - currentCounterValue != 1) {\n    Error.fromUserError(67).revert();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Structs and Enums for Casper Execution Engine in Rust\nDESCRIPTION: This snippet defines various structs and enums for the Casper execution engine, including EngineConfig, EngineConfigBuilder, Error, ExecutableItem, and more. These structures are essential for configuring and managing the execution engine.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/execution_engine/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nstruct casper_execution_engine::engine_state::engine_config::EngineConfig\nstruct casper_execution_engine::engine_state::engine_config::EngineConfigBuilder\nenum casper_execution_engine::engine_state::Error\nenum casper_execution_engine::engine_state::ExecutableItem\nenum casper_execution_engine::engine_state::InvalidRequest\nenum casper_execution_engine::engine_state::SessionInputData<'a>\nstruct casper_execution_engine::engine_state::BlockInfo\nstruct casper_execution_engine::engine_state::EngineConfig\nstruct casper_execution_engine::engine_state::EngineConfigBuilder\nstruct casper_execution_engine::engine_state::ExecutionEngineV1\nstruct casper_execution_engine::engine_state::SessionDataDeploy<'a>\nstruct casper_execution_engine::engine_state::SessionDataV1<'a>\nstruct casper_execution_engine::engine_state::WasmV1Request\nstruct casper_execution_engine::engine_state::WasmV1Result\n```\n\n----------------------------------------\n\nTITLE: Defining Counter Contract Entry Points in AssemblyScript\nDESCRIPTION: This snippet defines two functions, counter_inc and counter_get, which serve as entry points for incrementing the counter and retrieving its current value. These functions interact with the contract's state using Casper-specific operations.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/counter-installer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Creating a function that will be used by the incrementing entry point.\nexport function counter_inc(): void {\n  let countKey = CL.getKey(COUNT_KEY);\n  if (!countKey) {\n    Error.fromErrorCode(ErrorCode.MissingKey).revert();\n    return;\n  }\n\n  if (!countKey.isURef()) {\n    Error.fromErrorCode(ErrorCode.UnexpectedKeyVariant).revert();\n    return;\n  }\n\n  const one = CLValue.fromI32(1);\n\n  countKey.add(one);\n}\n\n// Creating a function that will be used by the value retrieval entry point.\nexport function counter_get(): void {\n  let countKey = CL.getKey(COUNT_KEY);\n\n  if (!countKey) {\n    Error.fromErrorCode(ErrorCode.MissingKey).revert();\n    return;\n  }\n\n  if (!countKey.isURef()) {\n    Error.fromErrorCode(ErrorCode.UnexpectedKeyVariant).revert();\n    return;\n  }\n  let countData = countKey.read();\n  if (!countData) {\n    Error.fromErrorCode(ErrorCode.ValueNotFound).revert();\n    return;\n  }\n  let value = fromBytesI32(<StaticArray<u8>>countData).unwrap();\n  CL.ret(CLValue.fromI32(value));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants and Functions for Casper Execution Engine Runtime in Rust\nDESCRIPTION: This snippet defines constants and functions for the Casper execution engine runtime, including cryptographic functions, stack management, and WASM validation. It also includes constants for configuring the runtime environment.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/execution_engine/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nconst casper_execution_engine::runtime::cryptography::DIGEST_LENGTH: usize\nfn casper_execution_engine::runtime::cryptography::blake2b<T: core::convert::AsRef<[u8]>>(data: T) -> [u8; 32]\nfn casper_execution_engine::runtime::cryptography::blake3<T: core::convert::AsRef<[u8]>>(data: T) -> [u8; 32]\nfn casper_execution_engine::runtime::cryptography::sha256<T: core::convert::AsRef<[u8]>>(data: T) -> [u8; 32]\nstruct casper_execution_engine::runtime::stack::RuntimeStack\nstruct casper_execution_engine::runtime::stack::RuntimeStackOverflow\ntype casper_execution_engine::runtime::stack::RuntimeStackFrame = casper_types::system::caller::Caller\nenum casper_execution_engine::runtime::PreprocessingError\nenum casper_execution_engine::runtime::WasmValidationError\nstruct casper_execution_engine::runtime::Runtime<'a, R>\nstruct casper_execution_engine::runtime::RuntimeStack\nstruct casper_execution_engine::runtime::RuntimeStackOverflow\nconst casper_execution_engine::runtime::DEFAULT_BR_TABLE_MAX_SIZE: u32\nconst casper_execution_engine::runtime::DEFAULT_MAX_GLOBALS: u32\nconst casper_execution_engine::runtime::DEFAULT_MAX_PARAMETER_COUNT: u32\nconst casper_execution_engine::runtime::DEFAULT_MAX_TABLE_SIZE: u32\nfn casper_execution_engine::runtime::cycles_for_instruction(instruction: &casper_wasm::elements::ops::Instruction) -> u32\nfn casper_execution_engine::runtime::preprocess(wasm_config: casper_types::chainspec::vm_config::wasm_config::WasmConfig, module_bytes: &[u8]) -> core::result::Result<casper_wasm::elements::module::Module, casper_execution_engine::runtime::PreprocessingError>\ntype casper_execution_engine::runtime::RuntimeStackFrame = casper_types::system::caller::Caller\n```\n\n----------------------------------------\n\nTITLE: Compiling Casper Smart Contract to WebAssembly\nDESCRIPTION: Command to compile the AssemblyScript smart contract to WebAssembly (.wasm) format using npm and the predefined build script.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract_as/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run asbuild\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies and Constants for Counter Contract Session\nDESCRIPTION: Sets up the necessary imports from Casper Network's AssemblyScript packages and defines constants for interacting with the Counter Contract. These constants include keys and entry point names used throughout the session code.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/increment-counter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//@ts-nocheck\n// Importing necessary components from other packages.\nimport * as CL from \"../../../../contract_as/assembly\";\nimport { Error, ErrorCode } from \"../../../../contract_as/assembly/error\";\nimport { fromBytesI32, fromBytesString, toBytesMap } from \"../../../../contract_as/assembly/bytesrepr\";\nimport { Key } from \"../../../../contract_as/assembly/key\";\nimport { CLValue, CLType, CLTypeTag } from \"../../../../contract_as/assembly/clvalue\";\nimport { Pair } from \"../../../../contract_as/assembly/pair\";\nimport { RuntimeArgs } from \"../../../../contract_as/assembly/runtime_args\";\n\n\n// Establishing constants for use within our session code.\nconst COUNT_KEY = \"count\";\nconst COUNTER_INC = \"counter_inc\";\nconst COUNTER_GET = \"counter_get\";\nconst COUNTER_KEY = \"counter\";\nconst CONTRACT_VERSION_KEY = \"version\";\n```\n\n----------------------------------------\n\nTITLE: Deploying Hello World Assembly Script on Casper NCTL Network\nDESCRIPTION: This command deploys the Hello World assembly script on an NCTL network. It specifies the node address, chain name, secret key path, payment amount, contract path, and a runtime argument for the message.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/hello-world/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client put-deploy \\\n    --node-address http://localhost:11101 \\\n    --chain-name casper-net-1 \\\n    --secret-key [KEY PATH]/secret_key.pem \\\n    --payment-amount 5000000000000 \\\n    --session-path [CONTRACT PATH]/contract.wasm \\\n    --session-arg \"message:string='hello world'\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Building casper-node on Ubuntu\nDESCRIPTION: Installs the necessary dependencies for building casper-node from source on an Ubuntu system, including CMake, SSL development libraries, and Rust.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Ubuntu prerequisites setup example\napt update\napt install cmake libssl-dev pkg-config gcc g++ -y\n# the '-s -- -y' part ensures silent mode. Omit if you want to customize\ncurl https://sh.rustup.rs -sSf | sh -s -- -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies and Constants for Counter Contract in AssemblyScript\nDESCRIPTION: This snippet imports necessary dependencies and establishes constants for use within the installed contract. It sets up the foundation for the counter contract implementation.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/counter-installer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Importing necessary aspects of external packages.\nimport * as CL from \"../../../../contract_as/assembly\";\nimport { Error, ErrorCode } from \"../../../../contract_as/assembly/error\";\nimport { fromBytesI32, fromBytesString, toBytesMap } from \"../../../../contract_as/assembly/bytesrepr\";\nimport { Key } from \"../../../../contract_as/assembly/key\";\nimport { CLValue, CLType, CLTypeTag } from \"../../../../contract_as/assembly/clvalue\";\nimport { Pair } from \"../../../../contract_as/assembly/pair\";\n\n// Establishing constants for use within the installing contract.\nconst COUNT_KEY = \"count\";\nconst COUNTER_INC = \"counter_inc\";\nconst COUNTER_GET = \"counter_get\";\nconst COUNTER_KEY = \"counter\";\nconst CONTRACT_VERSION_KEY = \"version\";\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables to Override Node Configuration\nDESCRIPTION: Demonstrates how to override configuration options through the NODE_CONFIG environment variable when running a node.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_CONFIG=consensus.secret_key_path=secret_keys/node-1.pem;network.known_addresses=[1.2.3.4:34553, 200.201.203.204:34553]\ncasper-node validator /etc/casper-node/config.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Casper Smart Contract Compilation\nDESCRIPTION: Script entries needed in package.json to enable AssemblyScript compilation with optimizations for the Casper platform. The script creates an optimized WebAssembly file with specific flags for the Casper environment.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract_as/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-contract-name\",\n  ...\n  \"scripts\": {\n    \"asbuild:optimized\": \"asc assembly/index.ts -b dist/your-contract-name.wasm --validate --disable bulk-memory --optimize --optimizeLevel 3 --converge --noAssert --use abort=\",\n    \"asbuild\": \"npm run asbuild:optimized\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying State Values on Casper Network\nDESCRIPTION: This command queries the value stored under a specific URef in the network state. It requires the node address, key (URef hash of the NamedKey), and the state root hash obtained earlier.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/hello-world/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client query-state \\\n> --node-address http://localhost:11101 \\\n> --key [NamedKey Uref Hash] \\\n> --state-root-hash [STATE ROOT HASH]\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for Fast-Sync in Node Section\nDESCRIPTION: Configuration options added to the [node] section to support fast-syncing, including sync_to_genesis, idle_tolerance, max_attempts, control_logic_default_delay, and force_resync.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[node]\nsync_to_genesis = true\nidle_tolerance = \"30min\"\nmax_attempts = 3\ncontrol_logic_default_delay = \"5s\"\nforce_resync = false\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Counter Contract Interaction\nDESCRIPTION: Implements two utility functions that interact with the installed counter contract. counterGet retrieves the current counter value, while counterInc calls the contract to increment the counter by 1.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/increment-counter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction counterGet(contractHash: Uint8Array): i32 {\n  let bytes = CL.callContract(contractHash, COUNTER_GET, new RuntimeArgs());\n  return fromBytesI32(bytes).unwrap();\n}\n\nfunction counterInc(contractHash: Uint8Array): void {\n  CL.callContract(contractHash, COUNTER_INC, new RuntimeArgs());\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving State Root Hash from Casper Network\nDESCRIPTION: This command retrieves the current state root hash from a Casper node, which is required for querying state values stored on the network.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/hello-world/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncasper-client get-state-root-hash --node-address http://localhost:11101\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive Scripting for Consensus Dump\nDESCRIPTION: Shows how to set up non-interactive diagnostics by sending commands to the Casper node using socat. This sequence configures JSON output with quiet mode and requests a consensus dump without the success header.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nset -o json -q true\ndump-consensus\n```\n\n----------------------------------------\n\nTITLE: Running a Validator Node with Configuration File\nDESCRIPTION: Launches a casper-node in validator mode using a specified configuration file.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncasper-node validator /etc/casper-node/config.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for Casper Smart Contract Development\nDESCRIPTION: Commands for creating a new project directory, initializing it, and installing required dependencies (AssemblyScript v0.17.14 and casper-contract).\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract_as/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir project\ncd project\nnpm init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev assemblyscript@0.17.14\nnpm install --save casper-contract\n```\n\n----------------------------------------\n\nTITLE: Network Traffic Estimator Weights Configuration\nDESCRIPTION: Configuration options for the [network.estimator_weights] section to control the weights assigned to different types of network traffic for bandwidth management.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[network.estimator_weights]\nconsensus = 1.0\ndeploy_requests = 1.0\ngossip = 1.0\nfinality_signatures = 1.0\ndeploy_responses = 1.0\nblock_requests = 1.0\nblock_responses = 1.0\ntrie_requests = 1.0\ntrie_responses = 1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Global State Updates in TOML for Casper Network\nDESCRIPTION: This TOML configuration file is used with the 'generic' subcommand to specify updates to account balances, validator stakes, and fund transfers in the Casper Network's global state. It allows for fine-grained control over validator sets and account properties.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/utils/global-state-update-gen/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# can be true or false, optional, false if not present; more detailed description below\n# *must* be listed before all [[accounts]] and [[transfers]] entries\nonly_listed_validators = false\n\n# can be true or false, optional, false if not present; more detailed description below\n# *must* be listed before all [[accounts]] and [[transfers]] entries\nslash_instead_of_unbonding = false\n\n# multiple [[accounts]] definitions are possible\n[[accounts]]\npublic_key = \"...\" # the public key of the account owner\nbalance = \"...\"    # account balance, in motes (optional)\n\n# if the account is supposed to be validator, define the section below\n[accounts.validator]\nbonded_amount = \"...\"      # the staked amount for this account, in motes\ndelegation_rate = ...      # the delegation rate for this validator (optional)\n\n# define delegators as entries in accounts.validator.delegators\n# multiple definitions per validator are possible\n[[accounts.validator.delegators]]\npublic_key = \"...\"         # the delegator's public key\ndelegated_amount = \"...\"   # the amount delegated to the validator, in motes\n\n# multiple [[transfers]] definitions are possible\n[[transfers]]\nfrom = \"account-hash-...\" # the account hash to transfer funds from\nto = \"account-hash-...\"   # the account hash to transfer funds to\namount = \"...\"            # the amount to be transferred, in motes\n```\n\n----------------------------------------\n\nTITLE: Setting Up Rust Build Environment for casper-node\nDESCRIPTION: Prepares the Rust build environment for compiling casper-node using make command.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake setup-rs\n```\n\n----------------------------------------\n\nTITLE: Viewing Faucet Account Details on NCTL Network\nDESCRIPTION: This command provides details about the faucet account on an NCTL network, including its secret key path, public key, account hash, purse, and balance.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/hello-world/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnctl-view-faucet-account\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Message Tracing in Logs\nDESCRIPTION: Configures logging to trace all incoming and outgoing network messages for debugging network communication.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nRUST_LOG=net_in::TRACE,net_out::TRACE\n```\n\n----------------------------------------\n\nTITLE: Network Configuration Options for Peer Management\nDESCRIPTION: Configuration options added to the [network] section to control peer connections, including handshake timeouts, connection limits, and tarpitting features to manage reconnection attempts.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[network]\nmin_peers_for_initialization = 3\nhandshake_timeout = \"20s\"\nmax_incoming_peer_connections = 3\nmax_in_flight_demands = 5\ntarpit_version_threshold = \"1.0.0\"\ntarpit_duration = \"30s\"\ntarpit_chance = 0.1\nblocklist_retain_duration = \"24h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Proptest Seeds for Casper Node Testing\nDESCRIPTION: This YAML configuration specifies seeds for previously encountered failure cases in proptest. It includes two specific cases, one related to 'NextBlock' and another to 'EraId', which are re-run before generating new test cases.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/proptest-regressions/components/diagnostics_port/stop_at.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Seeds for failure cases proptest has generated in the past. It is\n# automatically read and these particular cases re-run before any\n# novel cases are generated.\n#\n# It is recommended to check this file in to source control so that\n# everyone who runs the test benefits from these saved cases.\ncc a95b33d3196ca47b38fb6d16346318cbfbcd6494087384852a2d4bdb585f1edf # shrinks to stop_at = NextBlock\ncc 5d4cf22796e91f3ca192f4b42ff7738143ba06e6ad7ea088abc9e63784be78a6 # shrinks to stop_at = EraId(EraId(0))\n```\n\n----------------------------------------\n\nTITLE: Compiling WebAssembly Smart Contracts for Casper\nDESCRIPTION: These commands compile WebAssembly (Wasm) files that will be used to deploy the assembly script. The first command compiles both Rust and assembly scripts, while the second compiles only assembly scripts.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/hello-world/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build-contracts\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake build-contracts-as\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebAssembly Import Environment for Casper Contracts\nDESCRIPTION: JavaScript code for index.js to load and compile the WebAssembly module with appropriate environment imports. This bootstraps the WebAssembly instance and handles abort calls from the compiled contract.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract_as/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\n​\nconst compiled = new WebAssembly.Module(fs.readFileSync(__dirname + \"/dist/your-contract-name.wasm\"));\n​\nconst imports = {\n    env: {\n        abort(_msg, _file, line, column) {\n            console.error(\"abort called at index.ts:\" + line + \":\" + column);\n        }\n    }\n};\n​\nObject.defineProperty(module, \"exports\", {\n    get: () => new WebAssembly.Instance(compiled, imports).exports\n});\n```\n\n----------------------------------------\n\nTITLE: CPU ISA Feature Flags List\nDESCRIPTION: A comprehensive list of CPU instruction set architecture feature flags including Advanced Vector Extensions (AVX), Streaming SIMD Extensions (SSE), and other specialized processor instructions that may be required or checked by the Casper node software.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/ci/cpu-features-1.4.13-release.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAVX\nAVX2\nBMI\nCMOV\nMODE64\nNOVLX\nPCLMUL\nSHA\nSSE1\nSSE2\nSSE3\nSSE41\nSSSE3\n```\n\n----------------------------------------\n\nTITLE: Building the casper-node Binary\nDESCRIPTION: Compiles the casper-node binary with release optimizations using Cargo.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo build -p casper-node --release\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Configuration Options\nDESCRIPTION: Configuration options for HTTP server sections (rpc_server, rest_server, event_stream_server) allowing independent enabling/disabling of each server and configuring request size limits.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[rpc_server]\nenable_server = true\nmax_body_bytes = 1048576\n\n[rest_server]\nenable_server = true\n\n[event_stream_server]\nenable_server = true\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Categories in Markdown\nDESCRIPTION: This snippet defines categories for changelog entries using Markdown comments. It specifies how to categorize different types of changes such as new features, changes in functionality, deprecations, removals, bug fixes, and security updates.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: <> (Added:      new features)\n[comment]: <> (Changed:    changes in existing functionality)\n[comment]: <> (Deprecated: soon-to-be removed features)\n[comment]: <> (Removed:    now removed features)\n[comment]: <> (Fixed:      any bug fixes)\n[comment]: <> (Security:   in case of vulnerabilities)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for AssemblyScript Smart Contracts\nDESCRIPTION: TypeScript configuration file (tsconfig.json) that extends the AssemblyScript standard configuration and includes all TypeScript files in the assembly directory.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract_as/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../node_modules/assemblyscript/std/assembly.json\",\n  \"include\": [\n    \"./**/*.ts\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Casper Execution Engine in Rust\nDESCRIPTION: This snippet defines various default constant values for the Casper execution engine configuration. These constants include settings for auction bids, transfers, balance hold intervals, rewards computation, and more.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/execution_engine/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_ALLOW_AUCTION_BIDS: bool\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_ALLOW_UNRESTRICTED_TRANSFERS: bool\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_BALANCE_HOLD_INTERVAL: casper_types::timestamp::TimeDiff\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_COMPUTE_REWARDS: bool\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_ENABLE_ENTITY: bool\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_MAXIMUM_DELEGATION_AMOUNT: u64\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_MAX_ASSOCIATED_KEYS: u32\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_MAX_DELEGATORS_PER_VALIDATOR: u32\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_MAX_QUERY_DEPTH: u64\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_MAX_RUNTIME_CALL_STACK_HEIGHT: u32\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_MAX_STORED_VALUE_SIZE: u32\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_MINIMUM_DELEGATION_AMOUNT: u64\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_PROTOCOL_VERSION: casper_types::protocol_version::ProtocolVersion\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_STRICT_ARGUMENT_CHECKING: bool\nconst casper_execution_engine::engine_state::engine_config::DEFAULT_VESTING_SCHEDULE_LENGTH_MILLIS: u64\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in Markdown\nDESCRIPTION: This snippet demonstrates how to include various project badges (build status, crate version, documentation, and license) using Markdown syntax.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/execution_engine/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Build Status](https://drone-auto-casper-network.casperlabs.io/api/badges/casper-network/casper-node/status.svg?branch=dev)](http://drone-auto-casper-network.casperlabs.io/casper-network/casper-node)\n[![Crates.io](https://img.shields.io/crates/v/casper-execution-engine)](https://crates.io/crates/casper-execution-engine)\n[![Documentation](https://docs.rs/casper-execution-engine/badge.svg)](https://docs.rs/casper-execution-engine)\n[![License](https://img.shields.io/badge/license-Apache-blue)](https://github.com/casper-network/casper-node/blob/master/LICENSE)\n```\n\n----------------------------------------\n\nTITLE: Speculative Execution Server Configuration\nDESCRIPTION: Configuration options for the speculative execution JSON-RPC server, allowing control of server enablement, network address, rate limiting, and request size limits.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[speculative_exec_server]\nenable_server = false\naddress = \"127.0.0.1:7778\"\nqps_limit = 10\nmax_body_bytes = 1048576\n```\n\n----------------------------------------\n\nTITLE: Testing Casper Smart Contracts\nDESCRIPTION: These commands run test suites for the Casper contracts. The first command tests both Rust and assembly Wasm files, while the second tests only assembly Wasm files.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/hello-world/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test-contracts\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test-contracts-as\n```\n\n----------------------------------------\n\nTITLE: Running a Node with Specific Logging Level\nDESCRIPTION: Launches a validator node with info-level logging enabled through the RUST_LOG environment variable.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nRUST_LOG=info cargo run --release -- validator resources/local/config.toml\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Support in Cargo.toml for Casper Contract\nDESCRIPTION: This snippet demonstrates how to enable the test-support feature of the casper-contract library in a Cargo.toml file. This feature allows for debugging output when testing the contract offchain using the casper-engine-test-support crate.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract/README.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ncasper-contract = { version = \"1\", features = [\"test-support\"] }\n```\n\n----------------------------------------\n\nTITLE: Running Validation Tests with Casper Validation Tool\nDESCRIPTION: Command to execute all validation tests against the existing fixtures to verify implementation correctness.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/utils/validation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p casper-validation\n```\n\n----------------------------------------\n\nTITLE: Setting up Rust Toolchain for Casper Smart Contracts\nDESCRIPTION: This command sets up the Rust toolchain required for developing smart contracts on the Casper network.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts_as/example/hello-world/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Validating Group Membership in Casper Execution Engine\nDESCRIPTION: A function that validates whether a contract has proper group access permissions. It takes a contract package, entry point access requirements, and a validator function that determines if a URef meets permission criteria. Returns an error if access validation fails.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/execution_engine/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nfn casper_execution_engine::core::runtime_context::validate_group_membership(contract_package: &casper_types::contracts::ContractPackage, access: &casper_types::contracts::EntryPointAccess, validator: impl core::ops::function::Fn(&casper_types::uref::URef) -> bool) -> core::result::Result<(), casper_execution_engine::core::engine_state::ExecError>\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Event Thresholds with Environment Variables\nDESCRIPTION: Shows how to configure the thresholds for logging long-running events and large queue sizes using environment variables.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nCL_EVENT_MAX_MICROSECS=1000\n```\n\nLANGUAGE: sh\nCODE:\n```\nCL_EVENT_QUEUE_DUMP_THRESHOLD=10000\n```\n\n----------------------------------------\n\nTITLE: Configuring Granular Log Levels for Different Modules\nDESCRIPTION: Sets different logging levels for specific modules using the RUST_LOG environment variable with module paths.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nRUST_LOG=casper_node::components::network=trace,casper_node::comp=info,warn\n```\n\n----------------------------------------\n\nTITLE: Gossip Component Configuration\nDESCRIPTION: Configuration option for the [gossip] section to control the timeout for validating and storing items received via gossip protocol.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[gossip]\nvalidate_and_store_timeout = \"5s\"\n```\n\n----------------------------------------\n\nTITLE: Generating Fixtures with Casper Validation Tool\nDESCRIPTION: Command to generate new fixtures JSON files using the built-in generator. The output specifies where the generated fixtures will be saved.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/utils/validation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p casper-validation -- generate --output utils/validation/tests/fixtures\n```\n\n----------------------------------------\n\nTITLE: Faucet Cost Table in Markdown\nDESCRIPTION: A cost breakdown table showing the gas costs associated with different faucet operations. This includes installation, variable setting, and contract calls by both installers and regular users.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contracts/explorer/faucet/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| feature                  | cost              |\n|--------------------------|-------------------|\n| faucet install           | `142_640_262_074` |\n| faucet set variables     | `134_259_210`     |\n| faucet call by installer | `2_879_594_967`   |\n| faucet call by user      | `2_615_492_876`   |\n```\n\n----------------------------------------\n\nTITLE: One-Line Command for Consensus Dump Using socat\nDESCRIPTION: Provides a one-line shell command that pipes commands to socat to capture a consensus dump to a file. This is useful for ad-hoc diagnostics and saves the latest era information to a JSON file.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\necho -e 'set -o json -q true\\ndump-consensus' | socat - unix-client:debug.socket > consensus-dump.json\n```\n\n----------------------------------------\n\nTITLE: Connecting to Node Diagnostics Port with socat\nDESCRIPTION: Uses socat to create an interactive connection to the node's diagnostics socket for debugging and monitoring.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsocat readline unix:/path/to/debug.socket\n```\n\n----------------------------------------\n\nTITLE: Dumping Consensus State via Diagnostics Port\nDESCRIPTION: Requests a dump of the latest consensus state information through the diagnostics interface.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndump-consensus\n```\n\n----------------------------------------\n\nTITLE: Dumping Event Queues with JSON Output\nDESCRIPTION: Demonstrates how to dump the event queues of a Casper node with JSON output. This command shows the current state of all event queues (Regular, Api, Network, Control, and NetworkIncoming) which are typically empty when the node is operating normally.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ndump-queues\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Features in Cargo.toml for Casper Contract\nDESCRIPTION: This snippet shows how to disable the default features of the casper-contract library in a Cargo.toml file. This is useful if you want to use a different global allocator or provide custom panic/out-of-memory handlers.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/smart_contracts/contract/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ncasper-contract = { version = \"1\", default-features = false }\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Output Format in Diagnostics Session\nDESCRIPTION: Configures the diagnostics session to output information in JSON format for easier parsing.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nset --output=json\n```\n\n----------------------------------------\n\nTITLE: Running Casper Updater in Dry Run Mode\nDESCRIPTION: Illustrates how to use the --dry-run flag to preview the files that will be affected by the updater tool without making actual changes.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/ci/casper_updater/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--dry-run\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Bump Type in Casper Updater\nDESCRIPTION: Demonstrates how to use the --bump flag to automatically increment the major, minor, or patch version of Casper packages.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/ci/casper_updater/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--bump=[major|minor|patch]\n```\n\n----------------------------------------\n\nTITLE: Specifying Root Directory for Casper Updater\nDESCRIPTION: Shows how to use the --root-dir flag to specify the path to the casper-node root directory when running the updater tool.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/ci/casper_updater/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--root-dir\n```\n\n----------------------------------------\n\nTITLE: Running the Highway Rewards Analysis Tool\nDESCRIPTION: Command syntax for running the highway-rewards-analysis tool. The tool accepts an optional -v flag for verbose output and requires a FILE parameter containing a Highway protocol state dump in Bincode format.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/utils/highway-rewards-analysis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhighway-rewards-analysis [-v] FILE\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Logo in Markdown\nDESCRIPTION: This snippet shows how to embed the Casper Network logo using Markdown syntax, linking to the project website.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/execution_engine/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![LOGO](https://raw.githubusercontent.com/casper-network/casper-node/master/images/casper-association-logo-primary.svg)](https://casper.network/)\n```\n\n----------------------------------------\n\nTITLE: Recording Proptest Seed for Empty RawBytes Test Case\nDESCRIPTION: A saved proptest seed for a failure case involving an empty RawBytes array. This seed is automatically re-run before new test cases are generated to ensure consistent test coverage.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/types/proptest-regressions/stored_value.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 451b981c778518acba99daaa2eb7b621b1882430c7a665ed85ce06446732117e # shrinks to v = RawBytes([])\n```\n\n----------------------------------------\n\nTITLE: Defining Response Format Structure in Markdown\nDESCRIPTION: This snippet defines the structure of a response in the Binary Port Protocol, including field sizes, names, and descriptions.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/BINARY_PORT_PROTOCOL.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Size in bytes | Field          | Description                                                                                                                                                                                 |\n| ------------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 4             | length         | A LE encoded number of bytes of all the subsequent fields (excluding the length itself). Based on this number the client should \"know\" where the binary response ends.                      |\n| 4             | Request length | number of bytes of the `request` field.                                                                                                                                                     |\n| variable      | request        | The raw binary request that was provided by the client (including the requests `length` field).                                                                                             |\n| 2             | version        | Version of the binary port response structure. Currently supported version is `1`                                                                                                           |\n| 2             | error_code     | Error code, where 0 indicates success.                                                                                                                                                      |\n| 1-2           | response_type  | Optional payload type tag (first byte being 1 indicates that it exists).                                                                                                                    |\n| 4             | payload_length | Number of bytes of the var-length `payload` field.                                                                                                                                          |\n| Variable      | payload        | Payload to be interpreted according to the `response_type`. If there is no response, or the response was erroneous this field will have 0 bytes and `payload_length` will be the number `0` |\n```\n\n----------------------------------------\n\nTITLE: Defining Request Format Structure in Markdown\nDESCRIPTION: This snippet defines the structure of a request in the Binary Port Protocol, including field sizes, names, and descriptions.\nSOURCE: https://github.com/casper-network/casper-node/blob/dev/node/BINARY_PORT_PROTOCOL.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Size in bytes | Field    | Description                                                                                                                                                                                                      |\n| ------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 4             | length   | A LE encoded number of bytes of all the subsequent fields (excluding the length itself). Based on this number the server \"knows\" where the binary request ends.                                                                  |\n| 2             | version  | Version of the binary port header serialized as a single u16 number. The server handles only strictly specified versions and can deny service if the version doesn't meet it's expectation. The current supported version is `1` |\n| 1             | type_tag | Tag identifying the request.                                                                                                                                                                                                     |\n| 2             | id       | An identifier that should dbe understandable to the client and should facilitate correlating requests with responses                                                                                                             |\n| variable      | payload  | Payload to be interpreted according to the `type_tag`.                                                                                                                                                                           |\n```"
  }
]