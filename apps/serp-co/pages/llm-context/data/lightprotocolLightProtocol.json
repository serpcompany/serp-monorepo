[
  {
    "owner": "lightprotocol",
    "repo": "light-protocol",
    "content": "TITLE: Creating a Compressed Token Mint\nDESCRIPTION: Command to create a compressed token mint with usage details and available flags.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nlight create-mint\n```\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ light create-mint [--mint-keypair <value>] [--mint-authority <value>]\n    [--mint-decimals <value>]\n\nFLAGS\n  --mint-authority=<value>  Path to the mint authority keypair file.\n                            Defaults to default local Solana wallet file\n                            path.\n  --mint-decimals=<value>   Number of base 10 digits to the right\n                            of the decimal place [default: 9].\n  --mint-keypair=<value>    Path to a mint keypair file. Defaults to a\n                            random keypair.\n```\n\n----------------------------------------\n\nTITLE: Implementing LightHasher for Nested Structs in Rust\nDESCRIPTION: Demonstrates how to use the LightHasher derive macro with nested structs, including the use of #[hash] and #[skip] attributes for customizing the hashing behavior.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/macros/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(LightHasher, Clone)]\npub struct MyNestedStruct {\n    pub a: i32,\n    pub b: u32,\n    #[hash]\n    pub c: String,\n}\n\n#[derive(LightHasher, Clone)]\npub struct MyAccount {\n    pub a: bool,\n    pub b: u64,\n    pub c: MyNestedStruct,\n    #[hash]\n    pub d: [u8; 32],\n    pub f: Option<usize>,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Light Protocol Development Dependencies\nDESCRIPTION: Script command to install development dependencies for Light Protocol. Dependencies are installed in the .local directory within the repository clone.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/install.sh\n```\n\n----------------------------------------\n\nTITLE: Assigning Native SOL to a Compressed Account\nDESCRIPTION: Command to compress native SOL into a compressed account with usage details and available flags.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nlight compress-sol --amount 1000 --to \"YOUR_WALLET_ADDRESS_BASE58\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ light compress-sol --to <value> --amount <value>\n\nFLAGS\n  --amount=<value>  (required) Amount to compress in lamports.\n  --to=<value>      (required) Specify the recipient address.\n```\n\n----------------------------------------\n\nTITLE: Transferring Compressed Tokens Between Wallets\nDESCRIPTION: Command to transfer compressed tokens from one wallet to another with usage details and available flags.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nlight transfer --mint \"YOUR_MINT_ADDRESS\" --to \"RECIPIENT_WALLET_ADDRESS\" --amount 4200000000\n```\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ light transfer --mint <value> --to <value> --amount <value>\n    [--fee-payer <value>]\n\nFLAGS\n  --amount=<value>     (required) Amount to send.\n  --fee-payer=<value>  Fee payer account. Defaults to the client\n                       keypair.\n  --mint=<value>       (required) Mint to transfer\n  --to=<value>         (required) Recipient address\n\n```\n\n----------------------------------------\n\nTITLE: Decompressing Native SOL from a Compressed Account\nDESCRIPTION: Command to decompress SOL from a compressed account back to native SOL with usage details and available flags.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nlight decompress-sol --amount 42 --to \"YOUR_WALLET_ADDRESS_BASE58\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ light decompress-sol --to <value> --amount <value>\n\nFLAGS\n  --amount=<value>  (required) Amount to decompress in lamports.\n  --to=<value>      (required) Specify the recipient address.\n```\n\n----------------------------------------\n\nTITLE: Minting Compressed Tokens to a Wallet\nDESCRIPTION: Command to mint compressed tokens to a Solana wallet with usage details and available flags.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nlight mint-to --mint \"YOUR_MINT_ADDRESS\" --to \"YOUR_WALLET_ADDRESS\" --amount 4200000000\n```\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ light mint-to --mint <value> --to <value> --amount <value>\n    [--mint-authority <value>]\n\nFLAGS\n  --amount=<value>          (required) Amount to mint.\n  --mint=<value>            (required) Mint address.\n  --mint-authority=<value>  File path of the mint authority keypair.\n                            Defaults to local Solana wallet.\n  --to=<value>              (required) Recipient address.\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Light Protocol SDK Macros with cargo-fuzz in Bash\nDESCRIPTION: Instructions for deep, comprehensive fuzzing of the Light Protocol SDK Macros using cargo-fuzz, including installation and running structure generator and macro input fuzzers.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/macros/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install cargo-fuzz (requires nightly Rust)\ncargo install cargo-fuzz\n\n# Run the structure generator fuzzer (tests runtime behavior)\ncargo +nightly fuzz run struct_generation -- -max_total_time=300\n\n# Run the macro input fuzzer (tests parsing various struct definitions)\ncargo +nightly fuzz run macro_input -- -max_total_time=300\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI for Devnet\nDESCRIPTION: Commands to view current config, switch to Devnet by pointing to an RPC that supports ZK Compression, and adjust Solana config.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlight config --get\n```\n\nLANGUAGE: bash\nCODE:\n```\nlight config --indexerUrl \"https://devnet.helius-rpc.com/?api-key=<api-key>\" \\\n  --proverUrl \"https://devnet.helius-rpc.com/?api-key=<api-key>\" \\\n  --solanaRpcUrl \"https://devnet.helius-rpc.com/?api-key=<api-key>\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Set config\nsolana config set --url \"https://devnet.helius-rpc.com/?api-key=<api-key>\"\n\n# Airdrop 1 SOL\nsolana airdrop 1\n\n# Print your address\nsolana address\n```\n\n----------------------------------------\n\nTITLE: Retrieving Indexer Slot\nDESCRIPTION: This endpoint retrieves the current slot of the indexer. It requires a POST request with a GetIndexerSlotPostRequest object and returns a GetIndexerSlotPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n## get_indexer_slot_post\n\n> models::GetIndexerSlotPost200Response get_indexer_slot_post(get_indexer_slot_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_indexer_slot_post_request** | [**GetIndexerSlotPostRequest**](GetIndexerSlotPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetIndexerSlotPost200Response**](_getIndexerSlot_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Debugging LightHasher Macro in Bash\nDESCRIPTION: Command to run tests with backtrace enabled, useful for debugging the LightHasher macro by printing DataHasher::hash() inputs.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/macros/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUST_BACKTRACE=1 cargo test\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compression Signatures for Token Owner\nDESCRIPTION: This endpoint retrieves compression signatures for a specific token owner. It requires a POST request with a GetCompressionSignaturesForTokenOwnerPostRequest object and returns a GetCompressionSignaturesForAddressPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n## get_compression_signatures_for_token_owner_post\n\n> models::GetCompressionSignaturesForAddressPost200Response get_compression_signatures_for_token_owner_post(get_compression_signatures_for_token_owner_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compression_signatures_for_token_owner_post_request** | [**GetCompressionSignaturesForTokenOwnerPostRequest**](GetCompressionSignaturesForTokenOwnerPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetCompressionSignaturesForAddressPost200Response**](_getCompressionSignaturesForAddress_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Compressed Account Proofs in Light Protocol API\nDESCRIPTION: This endpoint retrieves multiple compressed account proofs. It requires a POST request with a GetMultipleCompressedAccountProofsV2PostRequest object in the body. The response is a GetMultipleCompressedAccountProofsV2Post200Response object.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n## get_multiple_compressed_account_proofs_v2_post\n\n> models::GetMultipleCompressedAccountProofsV2Post200Response get_multiple_compressed_account_proofs_v2_post(get_multiple_compressed_account_proofs_v2_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_multiple_compressed_account_proofs_v2_post_request** | [**GetMultipleCompressedAccountProofsV2PostRequest**](GetMultipleCompressedAccountProofsV2PostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetMultipleCompressedAccountProofsV2Post200Response**](_getMultipleCompressedAccountProofsV2_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Preparing Localnet Environment with SOL\nDESCRIPTION: Commands to airdrop SOL, print address and check balance on the local network.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Airdrop 1 SOL\nsolana airdrop 1\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Print your address\nsolana address\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Print your balance\nsolana balance\n```\n\n----------------------------------------\n\nTITLE: Installing Light Protocol SDK with npm\nDESCRIPTION: Command to install the @lightprotocol/stateless.js package in a Node.js project. This package provides JavaScript SDK functionality for building Solana applications with ZK Compression.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/js/stateless.js/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @lightprotocol/stateless.js\n```\n\n----------------------------------------\n\nTITLE: Get Compressed Account V2 Parameters\nDESCRIPTION: API endpoint parameters and return type definition for retrieving compressed account information version 2.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compressed_account_v2_post_request** | [**GetCompressedAccountV2PostRequest**] |  | [required] |\n```\n\n----------------------------------------\n\nTITLE: Starting Light Test Validator\nDESCRIPTION: Commands to start a Solana test-validator with Light protocol components, with options to skip certain features.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlight test-validator\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Pass --skip-indexer to start without the indexer\nlight test-validator --skip-indexer\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Pass --skip-prover to start without the prover\nlight test-validator --skip-prover\n```\n\n----------------------------------------\n\nTITLE: Checking Forester Status\nDESCRIPTION: Command to check the status of the Forester service, with options to perform comprehensive checks of various components.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/forester/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforester status [OPTIONS] --rpc-url <RPC_URL>\n```\n\n----------------------------------------\n\nTITLE: Installing ZK Compression CLI via npm\nDESCRIPTION: Command to install the ZK Compression CLI globally using npm package manager.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @lightprotocol/zk-compression-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Compressed Token SDK Dependencies\nDESCRIPTION: NPM installation command for setting up the Compressed Token SDK and its dependencies for Node.js or web applications\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/js/compressed-token/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save \\\n    @lightprotocol/compressed-token \\\n    @lightprotocol/stateless.js \\\n```\n\n----------------------------------------\n\nTITLE: Running Light Protocol Stateless.js SDK Tests\nDESCRIPTION: Commands to navigate to the stateless.js directory and run its tests using pnpm.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd js/stateless.js\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Light Prover\nDESCRIPTION: Docker Compose YAML configuration for running Light Prover service with volume mounts and port mappings for both server and metrics\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/prover/server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlight-prover:\n  # Path to the repo root directory\n  build: ./light-prover\n  volumes:\n    - /host/path/to/config:/config\n  ports:\n    # Server\n    - \"3001:3001\"\n    # Metrics\n    - \"9998:9998\"\n\n  docker compose build\n  docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting Light Test Validator\nDESCRIPTION: This snippet demonstrates how to start a Light Protocol test validator using the CLI. It involves changing to the CLI directory and running the test-validator command.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/examples/browser/nextjs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd cli &&\nlight test-validator\n```\n\n----------------------------------------\n\nTITLE: Starting the Forester Service\nDESCRIPTION: Command to start the Forester service with options that can be configured via command-line arguments or environment variables.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/forester/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforester start [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Dependencies for Light Protocol\nDESCRIPTION: Command to install additional dependencies required for building Light Protocol on Ubuntu systems. Includes essential build tools and libraries.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential autoconf automake libtool zlib1g-dev pkg-config libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Verifying Light Compressed Token Program Deployment on Solana\nDESCRIPTION: Command to verify the Light Compressed Token program deployment on Solana mainnet using solana-verify tool. References the specific program ID and commit hash from the repository.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana-verify verify-from-repo --program-id cTokenmWW8bLPjZEBAUgYy3zKxQZW6VKi7bqNFEVv3m -u main --library-name light_compressed_token --commit-hash 1cb0f067b3d2d4e012e76507c077fc348eb88091 https://github.com/Lightprotocol/light-protocol\n```\n\n----------------------------------------\n\nTITLE: Running Basic Forester Commands\nDESCRIPTION: Basic command syntax for the Forester service, showing how to use the primary commands like start, status, and help.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/forester/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforester <COMMAND>\n```\n\n----------------------------------------\n\nTITLE: Running Light Protocol Program Tests\nDESCRIPTION: Command to run program tests for the account-compression module with a single thread to avoid conflicts between local prover servers.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncargo test-sbf -p account-compression-test -- --test-threads=1\n```\n\n----------------------------------------\n\nTITLE: Verifying Light System Program Deployment on Solana\nDESCRIPTION: Command to verify the Light System Program deployment on Solana mainnet using solana-verify tool. References the specific program ID and commit hash from the repository.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-verify verify-from-repo --program-id SySTEM1eSU2p4BGQfQpimFEWWSC1XDFeun3Nqzz3rT7 -u main --library-name light_system_program --commit-hash 1cb0f067b3d2d4e012e76507c077fc348eb88091 https://github.com/Lightprotocol/light-protocol\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Compressed Accounts in Light Protocol API\nDESCRIPTION: This endpoint fetches multiple compressed accounts. It requires a POST request with a GetMultipleCompressedAccountsPostRequest object in the body. The response is a GetMultipleCompressedAccountsPost200Response object.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n## get_multiple_compressed_accounts_post\n\n> models::GetMultipleCompressedAccountsPost200Response get_multiple_compressed_accounts_post(get_multiple_compressed_accounts_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_multiple_compressed_accounts_post_request** | [**GetMultipleCompressedAccountsPostRequest**](GetMultipleCompressedAccountsPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetMultipleCompressedAccountsPost200Response**](_getMultipleCompressedAccounts_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Building ZK Compression CLI from Source - Install and Build\nDESCRIPTION: Commands to install dependencies and build the monorepo from source, which includes building the CLI.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/install.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: GET Compressed Account Endpoint\nDESCRIPTION: HTTP POST endpoint for retrieving compressed account information. Requires a request body and returns a GetCompressedAccountPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /getCompressedAccount\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Zero Copy with Solana Support in Cargo.toml\nDESCRIPTION: Dependency configuration for using Light Zero Copy with Solana program support. This configuration enables zero-copy operations in Solana blockchain programs.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/program-libs/zero-copy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nlight-zero-copy = { version = \"0.1.0\", features = [\"solana\"] }\n```\n\n----------------------------------------\n\nTITLE: GET Compressed Account Balance Endpoint\nDESCRIPTION: HTTP POST endpoint for retrieving compressed account balance information. Requires a request body and returns a GetCompressedAccountBalancePost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /getCompressedAccountBalance\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Building ZK Compression CLI from Source - Activate Development Environment\nDESCRIPTION: Command to activate the development environment from the root of the monorepo.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n. ./scripts/devenv\n```\n\n----------------------------------------\n\nTITLE: GET Batch Address Update Info Endpoint\nDESCRIPTION: HTTP POST endpoint for retrieving batch address update information. Requires a request body and returns a GetBatchAddressUpdateInfoPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /getBatchAddressUpdateInfo\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Running Light Protocol Compressed-Token.js SDK Tests\nDESCRIPTION: Commands to navigate to the compressed-token.js directory and run its tests using pnpm.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd js/compressed-token.js\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compressed Token Balances by Owner\nDESCRIPTION: This endpoint retrieves compressed token balances for a specific owner. It requires a POST request with a GetCompressedTokenBalancesByOwnerPostRequest object and returns a GetCompressedTokenBalancesByOwnerPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## get_compressed_token_balances_by_owner_post\n\n> models::GetCompressedTokenBalancesByOwnerPost200Response get_compressed_token_balances_by_owner_post(get_compressed_token_balances_by_owner_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compressed_token_balances_by_owner_post_request** | [**GetCompressedTokenBalancesByOwnerPostRequest**](GetCompressedTokenBalancesByOwnerPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetCompressedTokenBalancesByOwnerPost200Response**](_getCompressedTokenBalancesByOwner_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Compressed Account Proofs\nDESCRIPTION: This endpoint retrieves multiple compressed account proofs. It requires a POST request with a GetMultipleCompressedAccountProofsPostRequest object and returns a GetMultipleCompressedAccountProofsPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n## get_multiple_compressed_account_proofs_post\n\n> models::GetMultipleCompressedAccountProofsPost200Response get_multiple_compressed_account_proofs_post(get_multiple_compressed_account_proofs_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_multiple_compressed_account_proofs_post_request** | [**GetMultipleCompressedAccountProofsPostRequest**](GetMultipleCompressedAccountProofsPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetMultipleCompressedAccountProofsPost200Response**](_getMultipleCompressedAccountProofs_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: MerkleContextWithNewAddressProof Struct Properties\nDESCRIPTION: Defines properties for a Merkle tree context structure including Solana public keys, indices, and proof elements. Properties include address fields, range addresses, leaf indices, merkle tree reference, and proof elements. Each public key is represented as a base58 string.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/MerkleContextWithNewAddressProof.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\naddress | String | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\nhigher_range_address | String | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\nlow_element_leaf_index | i32 |  | \nlower_range_address | String | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\nmerkle_tree | String | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\nnext_index | i32 |  | \nproof | Vec<String> |  | \nroot | String | A 32-byte hash represented as a base58 string. | \nroot_seq | i32 |  | \n```\n\n----------------------------------------\n\nTITLE: Retrieving Compressed Token Balances by Owner (V2)\nDESCRIPTION: This endpoint is a version 2 implementation for retrieving compressed token balances by owner. It requires a POST request with a GetCompressedTokenBalancesByOwnerV2PostRequest object and returns a GetCompressedTokenBalancesByOwnerV2Post200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## get_compressed_token_balances_by_owner_v2_post\n\n> models::GetCompressedTokenBalancesByOwnerV2Post200Response get_compressed_token_balances_by_owner_v2_post(get_compressed_token_balances_by_owner_v2_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compressed_token_balances_by_owner_v2_post_request** | [**GetCompressedTokenBalancesByOwnerV2PostRequest**](GetCompressedTokenBalancesByOwnerV2PostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetCompressedTokenBalancesByOwnerV2Post200Response**](_getCompressedTokenBalancesByOwnerV2_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Running Light Prover Service in Go\nDESCRIPTION: Basic commands to build and run the Light Prover service using a configuration file\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/prover/server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build .\nlight-prover --config path/to/config/file\n```\n\n----------------------------------------\n\nTITLE: MerkleContextV2 Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the MerkleContextV2 data structure. The structure includes Solana public keys represented as base58 strings and tree context information.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/MerkleContextV2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cpi_context** | Option<**String**> | A Solana public key represented as a base58 string. | [optional][default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**next_tree_context** | Option<[**models::TreeContextInfo**](TreeContextInfo.md)> |  | [optional]\n**queue** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**tree** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**tree_type** | **i32** |  |\n```\n\n----------------------------------------\n\nTITLE: Running Light Prover in Docker\nDESCRIPTION: Docker commands to build and run the Light Prover service with volume mounting for config files and port mapping\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/prover/server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t light-prover .\n\n# /host/path/to/keys should contain the config file\ndocker run -it \\\n    --mount type=bind,source=host/path/to/config,target=/config \\\n    -p 3001:3001 \\\n    light-prover\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple New Address Proofs in Light Protocol API\nDESCRIPTION: This endpoint retrieves multiple new address proofs. It requires a POST request with a GetMultipleNewAddressProofsPostRequest object in the body. The response is a GetMultipleNewAddressProofsPost200Response object.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n## get_multiple_new_address_proofs_post\n\n> models::GetMultipleNewAddressProofsPost200Response get_multiple_new_address_proofs_post(get_multiple_new_address_proofs_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_multiple_new_address_proofs_post_request** | [**GetMultipleNewAddressProofsPostRequest**](GetMultipleNewAddressProofsPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetMultipleNewAddressProofsPost200Response**](_getMultipleNewAddressProofs_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Defining TokenData Structure Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the TokenData structure, including their names, types, descriptions, and default values. It uses a markdown table format to present the information clearly.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TokenData.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TokenData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**amount** | **i32** |  | [default to 100]\n**delegate** | Option<**String**> | A Solana public key represented as a base58 string. | [optional][default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**mint** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**owner** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**state** | [**models::AccountState**](AccountState.md) |  | \n**tlv** | Option<**String**> | A base 64 encoded string. | [optional][default to SGVsbG8sIFdvcmxkIQ==]\n```\n\n----------------------------------------\n\nTITLE: Opening Generated Rust Documentation\nDESCRIPTION: Command to generate and open the crate's documentation using Cargo. This will compile the documentation and open it in the default web browser.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo doc --open\n```\n\n----------------------------------------\n\nTITLE: Activating Light Protocol Development Environment\nDESCRIPTION: Script command to activate the Light Protocol development environment, which sets up the required paths and environment variables.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/devenv.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LightHasher Fuzzing in Bash\nDESCRIPTION: Commands for installing cargo-fuzz and setting up the nightly Rust toolchain required for fuzzing the LightHasher derive macro.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/macros/fuzz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-fuzz\n```\n\nLANGUAGE: bash\nCODE:\n```\nrustup default nightly    # Switch default to nightly\n# OR\nrustup install nightly    # Just install nightly\n```\n\n----------------------------------------\n\nTITLE: TokenAccountListV2 Model Structure Definition\nDESCRIPTION: Defines the properties of TokenAccountListV2 including an optional cursor for pagination and a vector of TokenAccountV2 items. The cursor is a base58 encoded string with a default value.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TokenAccountListV2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cursor** | Option<**String**> | A base 58 encoded string. | [optional][default to 3J98t1WpEZ73CNm]\n**items** | [**Vec<models::TokenAccountV2>**](TokenAccountV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Installing Light Protocol with Full Production Keys\nDESCRIPTION: Script command to install development dependencies with the full set of production keys. The full set includes additional Merkle tree heights used in production environments.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/install.sh --full-keys\n```\n\n----------------------------------------\n\nTITLE: GET Compressed Account Proof Endpoint\nDESCRIPTION: HTTP POST endpoint for retrieving compressed account proof. Requires a request body and returns a GetCompressedAccountProofPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /getCompressedAccountProof\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Defining TokenAccountV2 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the TokenAccountV2 model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TokenAccountV2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **account** | [**models::AccountV2**](AccountV2.md) |  | \n| **token_data** | [**models::TokenData**](TokenData.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Generating Solana Keypair for Development\nDESCRIPTION: Command to generate a new local Solana keypair for development and testing purposes. The keypair is saved to the default Solana configuration directory.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/.config/solana/id.json\n```\n\n----------------------------------------\n\nTITLE: Launching Next.js App for Light Protocol Browser Example\nDESCRIPTION: This snippet shows the commands to start the Next.js app for the Light Protocol browser example. It involves changing to the project directory and running the development server.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/examples/browser/nextjs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ../examples/browser/nextjs &&\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Defining TreeContextInfo Structure in Markdown\nDESCRIPTION: This snippet defines the TreeContextInfo structure with its properties, types, and descriptions. It includes Solana public key fields and a tree type field, along with optional and default values.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TreeContextInfo.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TreeContextInfo\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cpi_context** | Option<**String**> | A Solana public key represented as a base58 string. | [optional][default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**queue** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**tree** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**tree_type** | **i32** |  | \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Setting Forester Environment Variables\nDESCRIPTION: Example of setting configuration options using environment variables with the FORESTER_ prefix instead of command-line arguments.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/forester/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport FORESTER_RPC_URL=\"your-rpc-url-here\"\n```\n\n----------------------------------------\n\nTITLE: Building the Light Protocol Monorepo\nDESCRIPTION: This snippet shows the commands to build the entire Light Protocol monorepo, including setting up the development environment, installing dependencies, and building the project.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/examples/browser/nextjs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../../ &&\n. ./scripts/devenv.sh &&\n./scripts/install.sh &&\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Running All Light Protocol Tests\nDESCRIPTION: Script command to run all tests for the Light Protocol project components.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test.sh\n```\n\n----------------------------------------\n\nTITLE: SignatureInfo Model Properties Table\nDESCRIPTION: Table defining the properties of the SignatureInfo model including block_time (Unix timestamp), signature (Solana transaction), and slot number with their types and default values.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/SignatureInfo.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**block_time** | **i32** | An Unix timestamp (seconds) | [default to 1714081554]\n**signature** | **String** | A Solana transaction signature. | [default to 5J8H5sTvEhnGcB4R8K1n7mfoiWUD9RzPVGES7e3WxC7c]\n**slot** | **i32** |  | [default to 100]\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction with Compression Info in Light Protocol API\nDESCRIPTION: This endpoint retrieves transaction information with compression details. It requires a POST request with a GetTransactionWithCompressionInfoPostRequest object in the body. The response is a GetTransactionWithCompressionInfoPost200Response object.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n## get_transaction_with_compression_info_post\n\n> models::GetTransactionWithCompressionInfoPost200Response get_transaction_with_compression_info_post(get_transaction_with_compression_info_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_transaction_with_compression_info_post_request** | [**GetTransactionWithCompressionInfoPostRequest**](GetTransactionWithCompressionInfoPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetTransactionWithCompressionInfoPost200Response**](_getTransactionWithCompressionInfo_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Zero Copy with Pinocchio Support in Cargo.toml\nDESCRIPTION: Dependency configuration for using Light Zero Copy with Pinocchio framework support. This enables zero-copy operations in projects using the Pinocchio framework.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/program-libs/zero-copy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nlight-zero-copy = { version = \"0.1.0\", features = [\"pinocchio\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining SignatureInfoWithError Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the SignatureInfoWithError struct using a markdown table. It includes the property names, types, descriptions, and default values where applicable.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/SignatureInfoWithError.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SignatureInfoWithError\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**block_time** | **i32** | An Unix timestamp (seconds) | [default to 1714081554]\n**error** | Option<**String**> |  | [optional]\n**signature** | **String** | A Solana transaction signature. | [default to 5J8H5sTvEhnGcB4R8K1n7mfoiWUD9RzPVGES7e3WxC7c]\n**slot** | **i32** |  | [default to 100]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validity Proof in Light Protocol API\nDESCRIPTION: This endpoint fetches a validity proof. It requires a POST request with a GetValidityProofPostRequest object in the body. The response is a GetValidityProofPost200Response object.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n## get_validity_proof_post\n\n> models::GetValidityProofPost200Response get_validity_proof_post(get_validity_proof_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_validity_proof_post_request** | [**GetValidityProofPostRequest**](GetValidityProofPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetValidityProofPost200Response**](_getValidityProof_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Building Light Protocol\nDESCRIPTION: Script command to build the Light Protocol project components using the provided build script.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Defining OwnerBalance Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the OwnerBalance model using a markdown table. It specifies the name, type, description, and default values for each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/OwnerBalance.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **balance** | **i32** |  | [default to 100] |\n| **owner** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj] |\n```\n\n----------------------------------------\n\nTITLE: CI Workflow Integration for LightHasher Fuzzing in YAML\nDESCRIPTION: YAML configuration for integrating LightHasher fuzzing into CI workflows, including installing cargo-fuzz and running both fuzz targets with time and size limits.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/macros/fuzz/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run fuzzers\n  run: |\n    cargo install cargo-fuzz\n    cd sdk-libs/macros\n    cargo +nightly fuzz run macro_input -- -max_total_time=300 -max_len=1232\n    cargo +nightly  fuzz run struct_generation -- -max_total_time=300 -max_len=1232\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compression Signatures for Account\nDESCRIPTION: This endpoint retrieves compression signatures for a specific account. It requires a POST request with a GetCompressionSignaturesForAccountPostRequest object and returns a GetCompressionSignaturesForAccountPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## get_compression_signatures_for_account_post\n\n> models::GetCompressionSignaturesForAccountPost200Response get_compression_signatures_for_account_post(get_compression_signatures_for_account_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compression_signatures_for_account_post_request** | [**GetCompressionSignaturesForAccountPostRequest**](GetCompressionSignaturesForAccountPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetCompressionSignaturesForAccountPost200Response**](_getCompressionSignaturesForAccount_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Verifying Light Registry Program Deployment on Solana\nDESCRIPTION: Command to verify the Light Registry program deployment on Solana mainnet using solana-verify tool. References the specific program ID and commit hash from the repository.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-verify verify-from-repo --program-id Lighton6oQpVkeewmo2mcPTQQp7kYHr4fWpAgJyEmDX -u main --library-name light_registry --commit-hash 1cb0f067b3d2d4e012e76507c077fc348eb88091 https://github.com/Lightprotocol/light-protocol\n```\n\n----------------------------------------\n\nTITLE: Defining PaginatedAccountList Properties in Markdown\nDESCRIPTION: Describes the properties of the PaginatedAccountList model using a markdown table. It includes the property names, types, descriptions, and additional notes.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/PaginatedAccountList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **cursor** | Option<**String**> | A 32-byte hash represented as a base58 string. | [optional] |\n| **items** | [**Vec<models::Account>**](Account.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Compression Signatures\nDESCRIPTION: This endpoint retrieves the latest compression signatures. It requires a POST request with a GetLatestCompressionSignaturesPostRequest object and returns a GetCompressionSignaturesForAddressPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n## get_latest_compression_signatures_post\n\n> models::GetCompressionSignaturesForAddressPost200Response get_latest_compression_signatures_post(get_latest_compression_signatures_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_latest_compression_signatures_post_request** | [**GetLatestCompressionSignaturesPostRequest**](GetLatestCompressionSignaturesPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetCompressionSignaturesForAddressPost200Response**](_getCompressionSignaturesForAddress_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compression Signatures for Owner\nDESCRIPTION: This endpoint retrieves compression signatures for a specific owner. It requires a POST request with a GetCompressionSignaturesForOwnerPostRequest object and returns a GetCompressionSignaturesForAddressPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n## get_compression_signatures_for_owner_post\n\n> models::GetCompressionSignaturesForAddressPost200Response get_compression_signatures_for_owner_post(get_compression_signatures_for_owner_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compression_signatures_for_owner_post_request** | [**GetCompressionSignaturesForOwnerPostRequest**](GetCompressionSignaturesForOwnerPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetCompressionSignaturesForAddressPost200Response**](_getCompressionSignaturesForAddress_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Defining AccountList Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the AccountList model using a markdown table. It specifies that the model has a single property 'items' which is a vector of Account objects.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/AccountList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AccountList\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**items** | [**Vec<models::Account>**](Account.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Non-Voting Signatures\nDESCRIPTION: This endpoint retrieves the latest non-voting signatures. It requires a POST request with a GetLatestNonVotingSignaturesPostRequest object and returns a GetLatestNonVotingSignaturesPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n## get_latest_non_voting_signatures_post\n\n> models::GetLatestNonVotingSignaturesPost200Response get_latest_non_voting_signatures_post(get_latest_non_voting_signatures_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_latest_non_voting_signatures_post_request** | [**GetLatestNonVotingSignaturesPostRequest**](GetLatestNonVotingSignaturesPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetLatestNonVotingSignaturesPost200Response**](_getLatestNonVotingSignatures_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Building Light Protocol with Verifiable Build Script\nDESCRIPTION: Script command to perform a verifiable build of the Light Protocol. Requires solana-verify and docker as prerequisites.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build-verifiable.sh\n```\n\n----------------------------------------\n\nTITLE: Properties Table for GetMultipleCompressedAccountsPost200ResponseResult Model\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the response model. The model contains two main properties: context (of type Context) and value (of type AccountList).\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountsPost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**context** | [**models::Context**](Context.md) |  | \n**value** | [**models::AccountList**](AccountList.md) |  | \n```\n\n----------------------------------------\n\nTITLE: GET Compressed Account Proof V2 Endpoint\nDESCRIPTION: HTTP POST endpoint for retrieving compressed account proof using V2 API. Requires a request body and returns a GetCompressedAccountProofV2Post200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /getCompressedAccountProofV2\nContent-Type: application/json\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Making CLI Available Globally After Building from Source\nDESCRIPTION: Commands to link the CLI globally and verify the installation.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm link --global\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Verify the CLI was correctly installed\nwhich light\n```\n\n----------------------------------------\n\nTITLE: Get Compressed Token Account Balance Parameters\nDESCRIPTION: API endpoint parameters and return type definition for retrieving compressed token account balance information.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compressed_token_account_balance_post_request** | [**GetCompressedTokenAccountBalancePostRequest**] |  | [required] |\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountsByOwnerV2Post200ResponseResult Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressedAccountsByOwnerV2Post200ResponseResult model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountsByOwnerV2Post200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| context | [models::Context](Context.md) |  | \n| value | [models::PaginatedAccountListV2](PaginatedAccountListV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Installing Photon API Client Dependency in Rust\nDESCRIPTION: Instructions for adding the photon-api package as a dependency in a Rust project's Cargo.toml file. The package should be placed in a directory named 'photon-api' under the project folder.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nphoton-api = { path = \"./photon-api\" }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Queue Elements in Light Protocol API\nDESCRIPTION: This endpoint fetches queue elements. It requires a POST request with a GetQueueElementsPostRequest object in the body. The response is a GetQueueElementsPost200Response object.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n## get_queue_elements_post\n\n> models::GetQueueElementsPost200Response get_queue_elements_post(get_queue_elements_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_queue_elements_post_request** | [**GetQueueElementsPostRequest**](GetQueueElementsPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetQueueElementsPost200Response**](_getQueueElements_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedTokenAccountsByDelegatePost200ResponseResult Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetCompressedTokenAccountsByDelegatePost200ResponseResult model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedTokenAccountsByDelegatePost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| context | [models::Context](Context.md) |  | \n| value | [models::TokenAccountList](TokenAccountList.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Configuring Light Zero Copy with Anchor Compatibility in Cargo.toml\nDESCRIPTION: Dependency configuration for backward compatibility with Anchor-based projects. This is an alias to the Solana feature for projects built with the Anchor framework.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/program-libs/zero-copy/README.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nlight-zero-copy = { version = \"0.1.0\", features = [\"anchor\"] }\n```\n\n----------------------------------------\n\nTITLE: GetCompressedAccountProofV2PostRequest Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetCompressedAccountProofV2PostRequest model including field names, types, descriptions and optional notes.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountProofV2PostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetCompressedAccountProofPostRequestParams**](_getCompressedAccountProof_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetValidityProofPost200ResponseResult Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetValidityProofPost200ResponseResult model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetValidityProofPost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| context | [models::Context](Context.md) |  | \n| value | [models::CompressedProofWithContext](CompressedProofWithContext.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Retrieving Indexer Health Status\nDESCRIPTION: This endpoint retrieves the health status of the indexer. It requires a POST request with a GetIndexerHealthPostRequest object and returns a GetIndexerHealthPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n## get_indexer_health_post\n\n> models::GetIndexerHealthPost200Response get_indexer_health_post(get_indexer_health_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_indexer_health_post_request** | [**GetIndexerHealthPostRequest**](GetIndexerHealthPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetIndexerHealthPost200Response**](_getIndexerHealth_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Verifying Account Compression Program Deployment on Solana\nDESCRIPTION: Command to verify the Account Compression program deployment on Solana mainnet using solana-verify tool. References the specific program ID and commit hash from the repository.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-verify verify-from-repo --program-id compr6CUsB5m2jS4Y3831ztGSTnDpnKJTKS95d64XVq -u main --library-name account_compression --commit-hash 1cb0f067b3d2d4e012e76507c077fc348eb88091 https://github.com/Lightprotocol/light-protocol\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountsByOwnerPostRequestParams Model in Markdown\nDESCRIPTION: This markdown snippet defines the properties of the GetCompressedAccountsByOwnerPostRequestParams model. It includes fields for cursor, data_slice, filters, limit, and owner, along with their types, descriptions, and optional metadata.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountsByOwnerPostRequestParams.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetCompressedAccountsByOwnerPostRequestParams\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cursor** | Option<**String**> | A 32-byte hash represented as a base58 string. | [optional]\n**data_slice** | Option<[**models::DataSlice**](DataSlice.md)> |  | [optional]\n**filters** | Option<[**Vec<models::FilterSelector>**](FilterSelector.md)> |  | [optional]\n**limit** | Option<**i32**> |  | [optional]\n**owner** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining GetMultipleCompressedAccountProofsV2Post200ResponseResult Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetMultipleCompressedAccountProofsV2Post200ResponseResult model using a Markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountProofsV2Post200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| context | [models::Context](Context.md) |  | \n| value | [Vec<models::GetCompressedAccountProofResponseValueV2>](GetCompressedAccountProofResponseValueV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Running Tests for Light Protocol SDK Macros in Bash\nDESCRIPTION: Commands to run the test suite for the Light Protocol SDK Macros, including all tests and specific fuzzing tests.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/macros/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\ncargo test\n\n# Run fuzzing tests\ncargo test --test hasher_fuzz\ncargo test --test fuzz_runner\n```\n\n----------------------------------------\n\nTITLE: Defining AccountV2 Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the AccountV2 model using a markdown table. It specifies the name, type, description, and additional notes for each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/AccountV2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AccountV2\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**address** | Option<**String**> | A Solana public key represented as a base58 string. | [optional][default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**data** | Option<[**models::AccountData**](AccountData.md)> |  | [optional]\n**hash** | **String** | A 32-byte hash represented as a base58 string. | \n**lamports** | **i32** |  | [default to 100]\n**leaf_index** | **i32** |  | [default to 100]\n**merkle_context** | [**models::MerkleContextV2**](MerkleContextV2.md) |  | \n**owner** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**prove_by_index** | **bool** |  | \n**seq** | Option<**i32**> |  | [optional][default to 100]\n**slot_created** | **i32** |  | [default to 100]\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransactionWithCompressionInfoPost200ResponseResult Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetTransactionWithCompressionInfoPost200ResponseResult model, including their names, types, descriptions, and optional status.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoPost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetTransactionWithCompressionInfoPost200ResponseResult\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**compression_info** | Option<[**models::GetTransactionWithCompressionInfoPost200ResponseResultCompressionInfo**](_getTransactionWithCompressionInfo_post_200_response_result_compression_info.md)> |  | [optional]\n**transaction** | Option<[**serde_json::Value**](.md)> | An encoded confirmed transaction with status meta | [optional]\n```\n\n----------------------------------------\n\nTITLE: Get Compressed Accounts By Owner Parameters\nDESCRIPTION: API endpoint parameters and return type definition for retrieving compressed accounts by owner.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compressed_accounts_by_owner_post_request** | [**GetCompressedAccountsByOwnerPostRequest**] |  | [required] |\n```\n\n----------------------------------------\n\nTITLE: Defining OwnerBalanceList Properties in Markdown\nDESCRIPTION: Documents the properties of the OwnerBalanceList structure including an optional cursor field for pagination and a vector of OwnerBalance items. The cursor is a base58 encoded string with a default value.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/OwnerBalanceList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cursor** | Option<**String**> | A base 58 encoded string. | [optional][default to 3J98t1WpEZ73CNm]\n**items** | [**Vec<models::OwnerBalance>**](OwnerBalance.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition in Markdown\nDESCRIPTION: Documents the properties of the GetTransactionWithCompressionInfoV2Post200ResponseResult model, including their types, descriptions, and optional status.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoV2Post200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncompression_info | Option<[**models::GetTransactionWithCompressionInfoV2Post200ResponseResultCompressionInfo**](_getTransactionWithCompressionInfoV2_post_200_response_result_compression_info.md)> |  | [optional]\ntransaction | Option<[**serde_json::Value**](.md)> | An encoded confirmed transaction with status meta | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compression Signatures for Address\nDESCRIPTION: This endpoint retrieves compression signatures for a specific address. It requires a POST request with a GetCompressionSignaturesForAddressPostRequest object and returns a GetCompressionSignaturesForAddressPost200Response.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## get_compression_signatures_for_address_post\n\n> models::GetCompressionSignaturesForAddressPost200Response get_compression_signatures_for_address_post(get_compression_signatures_for_address_post_request)\n\n\n### Parameters\n\n\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compression_signatures_for_address_post_request** | [**GetCompressionSignaturesForAddressPostRequest**](GetCompressionSignaturesForAddressPostRequest.md) |  | [required] |\n\n### Return type\n\n[**models::GetCompressionSignaturesForAddressPost200Response**](_getCompressionSignaturesForAddress_post_200_response.md)\n\n### Authorization\n\nNo authorization required\n\n### HTTP request headers\n\n- **Content-Type**: application/json\n- **Accept**: application/json\n```\n\n----------------------------------------\n\nTITLE: Running struct_generation Fuzzer for LightHasher in Bash\nDESCRIPTION: Commands for running the struct_generation fuzzer that tests runtime behavior of generated code with properly typed structs containing random data.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/macros/fuzz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run the fuzzer\ncargo +nightly fuzz run struct_generation\n\n# Run with a time limit and address sanitizer\nRUSTFLAGS=\"-Zsanitizer=address\" cargo +nightly fuzz run struct_generation -- -max_total_time=600\n```\n\n----------------------------------------\n\nTITLE: Defining AccountData Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the AccountData model using a markdown table. It specifies the name, type, description, and default values for each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/AccountData.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **data** | **String** | A base 64 encoded string. | [default to SGVsbG8sIFdvcmxkIQ==] |\n| **data_hash** | **String** | A 32-byte hash represented as a base58 string. | |\n| **discriminator** | **i32** |  | [default to 100] |\n```\n\n----------------------------------------\n\nTITLE: Model Properties Table\nDESCRIPTION: Table defining the properties of the GetTransactionWithCompressionInfoV2Post200ResponseResultCompressionInfo model, including closed and opened accounts collections\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoV2Post200ResponseResultCompressionInfo.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nclosed_accounts | [**Vec<models::ClosedAccountWithOptionalTokenDataV2>**](ClosedAccountWithOptionalTokenDataV2.md) |  | \nopened_accounts | [**Vec<models::AccountWithOptionalTokenDataV2>**](AccountWithOptionalTokenDataV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Running macro_input Fuzzer for LightHasher in Bash\nDESCRIPTION: Commands for running the macro_input fuzzer that tests the macro's input processing directly by generating random struct definitions.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/macros/fuzz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run the fuzzer\ncargo +nightly fuzz run macro_input\n\n# Run with a time limit (e.g., 5 minutes)\ncargo +nightly fuzz run macro_input -- -max_total_time=300\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedTokenAccountsByDelegateV2Post200ResponseResult Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the GetCompressedTokenAccountsByDelegateV2Post200ResponseResult model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedTokenAccountsByDelegateV2Post200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetCompressedTokenAccountsByDelegateV2Post200ResponseResult\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncontext | [**models::Context**](Context.md) |  | \nvalue | [**models::TokenAccountListV2**](TokenAccountListV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountPost200Response Properties Schema\nDESCRIPTION: Documents the properties schema for the GetCompressedAccountPost200Response model. Includes error handling, request ID tracking, JSON-RPC version identification, and result payload.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetCompressedAccountPost200ResponseResult**](_getCompressedAccount_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Request Parameters Structure in Rust\nDESCRIPTION: Defines a structure for requesting multiple compressed accounts, containing two optional fields: addresses and hashes, both represented as vectors of strings. This structure is used for API request parameters.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountsPostRequestParams.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\naddresses: Option<Vec<String>> // Optional vector of address strings\nhashes: Option<Vec<String>> // Optional vector of hash strings\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request to Light Protocol Inclusion Endpoint\nDESCRIPTION: Defines a POST request to the inclusion endpoint on the local Light Protocol server. The request references an external JSON file named 'inclusion_26_1.json' that contains the request payload.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/prover/server/scripts/targets.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:3001/inclusion\n@inclusion_26_1.json\n```\n\n----------------------------------------\n\nTITLE: Response Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetCompressedAccountBalancePost200Response model, including error handling, ID, JSON-RPC version, and result object references.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountBalancePost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetCompressedAccountBalancePost200ResponseResult**](_getCompressedAccountBalance_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Get Compressed Account Balance Parameters\nDESCRIPTION: API endpoint parameters and return type definition for retrieving compressed account balance information.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/DefaultApi.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nName | Type | Description  | Required | Notes\n------------- | ------------- | ------------- | ------------- | -------------\n**get_compressed_balance_by_owner_post_request** | [**GetCompressedBalanceByOwnerPostRequest**] |  | [required] |\n```\n\n----------------------------------------\n\nTITLE: Defining GetValidityProofPostRequestParams Properties in Rust\nDESCRIPTION: Documents the properties of GetValidityProofPostRequestParams struct, which includes an optional vector of hashes as strings and an optional vector of AddressWithTree objects.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetValidityProofPostRequestParams.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nhashes | Option<**Vec<String>**> |  | [optional]\nnew_addresses_with_trees | Option<[**Vec<models::AddressWithTree>**](AddressWithTree.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedMintTokenHoldersPostRequest Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetCompressedMintTokenHoldersPostRequest model, including id, jsonrpc, method, and params fields with their types and descriptions.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedMintTokenHoldersPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetCompressedMintTokenHoldersPostRequestParams**](_getCompressedMintTokenHolders_post_request_params.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountBalancePost200ResponseResult Model in Markdown\nDESCRIPTION: Markdown documentation describing the properties of the GetCompressedAccountBalancePost200ResponseResult model, which includes a context object referencing another model and an integer value with a default of 100.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountBalancePost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetCompressedAccountBalancePost200ResponseResult\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**context** | [**models::Context**](Context.md) |  | \n**value** | **i32** |  | [default to 100]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining GetQueueElementsPostRequestParams Properties in Rust\nDESCRIPTION: Parameter structure for queue element retrieval request with required fields num_elements (i32), queue_type (i32), optional start_offset (i32), and tree (String) which expects a base58-encoded 32-byte hash.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetQueueElementsPostRequestParams.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct GetQueueElementsPostRequestParams {\n    num_elements: i32,\n    queue_type: i32,\n    start_offset: Option<i32>,\n    tree: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountProofV2Post200ResponseResult Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressedAccountProofV2Post200ResponseResult model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountProofV2Post200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| context | [models::Context](Context.md) |  | \n| value | [models::GetCompressedAccountProofResponseValueV2](GetCompressedAccountProofResponseValueV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: GetMultipleCompressedAccountsV2PostRequest Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetMultipleCompressedAccountsV2PostRequest model. Includes id, jsonrpc, method and params fields.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountsV2PostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nid | String | An ID to identify the request. | \njsonrpc | String | The version of the JSON-RPC protocol. | \nmethod | String | The name of the method to invoke. | \nparams | [models::GetMultipleCompressedAccountsV2PostRequestParams](_getMultipleCompressedAccountsV2_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetMultipleCompressedAccountProofsPostRequest Struct in Rust\nDESCRIPTION: This code snippet defines a Rust struct named GetMultipleCompressedAccountProofsPostRequest with four properties: id, jsonrpc, method, and params. It represents a JSON-RPC request for retrieving multiple compressed account proofs.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountProofsPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nstruct GetMultipleCompressedAccountProofsPostRequest {\n    id: String,        // An ID to identify the request.\n    jsonrpc: String,   // The version of the JSON-RPC protocol.\n    method: String,    // The name of the method to invoke.\n    params: Vec<String> // The parameters for the request.\n}\n```\n\n----------------------------------------\n\nTITLE: GetCompressedAccountPostRequest Properties Table\nDESCRIPTION: Markdown table describing the properties and types of the GetCompressedAccountPostRequest model, including ID, JSON-RPC version, method name, and params object reference.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetCompressedAccountPostRequestParams**](_getCompressedAccount_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: API Request Properties Definition in Markdown\nDESCRIPTION: Defines the required properties for making a GetCompressedTokenBalancesByOwnerV2 POST request. The request requires an ID, JSON-RPC version, method name, and params object containing owner details.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedTokenBalancesByOwnerV2PostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetCompressedTokenAccountsByOwnerPostRequestParams**](_getCompressedTokenAccountsByOwner_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountPost200ResponseResult Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressedAccountPost200ResponseResult model using a markdown table. It specifies the name, type, description, and optional status of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountPost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| context | [models::Context](Context.md) |  | \n| value | Option<[models::Account](Account.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetValidityProofV2PostRequest Model Properties Definition\nDESCRIPTION: Markdown table defining the properties of the GetValidityProofV2PostRequest model. Includes property names, types, descriptions and additional notes.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetValidityProofV2PostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetValidityProofPostRequestParams**](_getValidityProof_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedTokenAccountsByDelegatePost200Response Properties in Markdown\nDESCRIPTION: This code snippet outlines the properties of the GetCompressedTokenAccountsByDelegatePost200Response model, including error, id, jsonrpc, and result. It specifies the type and description for each property, along with any optional flags.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedTokenAccountsByDelegatePost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetCompressedTokenAccountsByDelegatePost200Response\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetCompressedTokenAccountsByDelegatePost200ResponseResult**](_getCompressedTokenAccountsByDelegate_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Formal Verification Setup Commands\nDESCRIPTION: Commands for setting up and running formal verification using Elan build system\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/prover/server/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd formal-verification\nlake exe cache get # optional, but speeds up dependency compilation\nlake build         # compiles and checks the theorems\n```\n\n----------------------------------------\n\nTITLE: GetValidityProofV2Post200ResponseResult Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetValidityProofV2Post200ResponseResult model, including context and value fields with their respective types and descriptions.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetValidityProofV2Post200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**context** | [**models::Context**](Context.md) |  | \n**value** | [**models::CompressedProofWithContextV2**](CompressedProofWithContextV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedTokenAccountsByDelegateV2Post200Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressedTokenAccountsByDelegateV2Post200Response model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedTokenAccountsByDelegateV2Post200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| error | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional] |\n| id | **String** | An ID to identify the response. | |\n| jsonrpc | **String** | The version of the JSON-RPC protocol. | |\n| result | Option<[**models::GetCompressedTokenAccountsByDelegateV2Post200ResponseResult**](_getCompressedTokenAccountsByDelegateV2_post_200_response_result.md)> |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining Response Properties for Multiple Compressed Account Proofs API\nDESCRIPTION: Documents the structure and types of properties in the 200 response object for the multiple compressed account proofs endpoint. Includes optional error object, required ID and jsonrpc fields, and optional result object containing the actual proof data.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountProofsPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetMultipleCompressedAccountProofsPost200ResponseResult**](_getMultipleCompressedAccountProofs_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Response Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the GetMultipleCompressedAccountsV2Post200ResponseResult model, including context and value fields that reference other model definitions.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountsV2Post200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncontext | [models::Context](Context.md) |  | \nvalue | [models::AccountListV2](AccountListV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: GetMultipleNewAddressProofsV2PostRequest Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetMultipleNewAddressProofsV2PostRequest model, including property names, types and descriptions.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleNewAddressProofsV2PostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**Vec<models::AddressWithTree>**](AddressWithTree.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Request Model Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetMultipleCompressedAccountProofsV2PostRequest model, including field names, types, and descriptions. The model contains fields for request ID, JSON-RPC version, method name, and an array of parameters.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountProofsV2PostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | **Vec<String>** |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressionSignaturesForAddressPost200ResponseResult Model in Markdown\nDESCRIPTION: This snippet defines the properties of the GetCompressionSignaturesForAddressPost200ResponseResult model. It includes two properties: 'context' of type Context, and 'value' of type PaginatedSignatureInfoList.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressionSignaturesForAddressPost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetCompressionSignaturesForAddressPost200ResponseResult\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**context** | [**models::Context**](Context.md) |  | \n**value** | [**models::PaginatedSignatureInfoList**](PaginatedSignatureInfoList.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetQueueElementsResponseValue Struct in Rust\nDESCRIPTION: Defines a struct named GetQueueElementsResponseValue with properties for account hash, leaf, leaf index, proof, root, root sequence, tree, and transaction hash. Most fields are 32-byte hashes represented as base58 strings, with some integer indices and a vector of strings for the proof.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetQueueElementsResponseValue.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nstruct GetQueueElementsResponseValue {\n    account_hash: String, // A 32-byte hash represented as a base58 string\n    leaf: String, // A 32-byte hash represented as a base58 string\n    leaf_index: i32,\n    proof: Vec<String>,\n    root: String, // A 32-byte hash represented as a base58 string\n    root_seq: i32,\n    tree: String, // A 32-byte hash represented as a base58 string\n    tx_hash: Option<String>, // A 32-byte hash represented as a base58 string (optional)\n}\n```\n\n----------------------------------------\n\nTITLE: Model Properties Table - Markdown\nDESCRIPTION: Property definition table showing the model's properties, types, descriptions and notes using markdown format.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountProofPost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncontext | [**models::Context**](Context.md) |  | \nvalue | [**models::GetCompressedAccountProofResponseValue**](GetCompressedAccountProofResponseValue.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetTransactionWithCompressionInfoPost200Response Struct in Rust\nDESCRIPTION: This code snippet defines a Rust struct for the GetTransactionWithCompressionInfoPost200Response model. It includes fields for error handling, response identification, JSON-RPC version, and the result of the transaction query with compression information.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nstruct GetTransactionWithCompressionInfoPost200Response {\n    error: Option<models::GetBatchAddressUpdateInfoPost200ResponseError>,\n    id: String,\n    jsonrpc: String,\n    result: Option<models::GetTransactionWithCompressionInfoPost200ResponseResult>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountProofPost200Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressedAccountProofPost200Response model using a markdown table. It includes the property names, types, descriptions, and optional notes for each field in the response structure.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountProofPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ---- | ---- | ----------- | ----- |\n| **error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional] |\n| **id** | **String** | An ID to identify the response. | |\n| **jsonrpc** | **String** | The version of the JSON-RPC protocol. | |\n| **result** | Option<[**models::GetCompressedAccountProofPost200ResponseResult**](_getCompressedAccountProof_post_200_response_result.md)> |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressionSignaturesForOwnerPostRequest Properties in Markdown\nDESCRIPTION: Documents the structure of the GetCompressionSignaturesForOwnerPostRequest object, defining its required properties including id, jsonrpc, method, and params. Each property is described with its type and purpose.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressionSignaturesForOwnerPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nid | String | An ID to identify the request. | \njsonrpc | String | The version of the JSON-RPC protocol. | \nmethod | String | The name of the method to invoke. | \nparams | models::GetCompressionSignaturesForOwnerPostRequestParams |  | \n```\n\n----------------------------------------\n\nTITLE: API Model Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetMultipleNewAddressProofsPostRequest model, including property names, types, and descriptions.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleNewAddressProofsPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | **Vec<String>** |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedTokenBalancesByOwnerPost200Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressedTokenBalancesByOwnerPost200Response model using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedTokenBalancesByOwnerPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional] |\n| **id** | **String** | An ID to identify the response. | |\n| **jsonrpc** | **String** | The version of the JSON-RPC protocol. | |\n| **result** | Option<[**models::GetCompressedTokenBalancesByOwnerPost200ResponseResult**](_getCompressedTokenBalancesByOwner_post_200_response_result.md)> |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: GetCompressedAccountsByOwnerPostRequest Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetCompressedAccountsByOwnerPostRequest model including id, jsonrpc, method, and params fields.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountsByOwnerPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nid | String | An ID to identify the request. | \njsonrpc | String | The version of the JSON-RPC protocol. | \nmethod | String | The name of the method to invoke. | \nparams | models::GetCompressedAccountsByOwnerPostRequestParams |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressionSignaturesForOwnerPostRequestParams Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressionSignaturesForOwnerPostRequestParams model using a markdown table. It specifies the name, type, description, and additional notes for each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressionSignaturesForOwnerPostRequestParams.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ---- | ---- | ----------- | ----- |\n| **cursor** | Option<**String**> |  | [optional] |\n| **limit** | Option<**i32**> |  | [optional] |\n| **owner** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj] |\n```\n\n----------------------------------------\n\nTITLE: TokenBalanceList Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the TokenBalanceList model, including cursor and token_balances fields with their types and descriptions.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TokenBalanceList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **cursor** | Option<**String**> | A base 58 encoded string. | [optional][default to 3J98t1WpEZ73CNm] |\n| **token_balances** | [**Vec<models::TokenBalance>**](TokenBalance.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetBatchAddressUpdateInfoPostRequestParams Properties in Markdown\nDESCRIPTION: Describes the properties of the GetBatchAddressUpdateInfoPostRequestParams model, including their names, types, and descriptions. The model has two properties: batch_size (an integer) and tree (a base58 string representing a 32-byte hash).\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetBatchAddressUpdateInfoPostRequestParams.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**batch_size** | **i32** |  | \n**tree** | **String** | A 32-byte hash represented as a base58 string. |\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransactionWithCompressionInfoPostRequestParams Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetTransactionWithCompressionInfoPostRequestParams model. It specifies the 'signature' property, which is a string representing a Solana transaction signature.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoPostRequestParams.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**signature** | **String** | A Solana transaction signature. | [default to 5J8H5sTvEhnGcB4R8K1n7mfoiWUD9RzPVGES7e3WxC7c]\n```\n\n----------------------------------------\n\nTITLE: Defining Account Properties in Markdown Table\nDESCRIPTION: A markdown table that defines the properties of an Account object. It includes property names, types, descriptions, and optional notes such as default values.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/Account.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **address** | Option<**String**> | A Solana public key represented as a base58 string. | [optional][default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj] |\n| **data** | Option<[**models::AccountData**](AccountData.md)> |  | [optional] |\n| **hash** | **String** | A 32-byte hash represented as a base58 string. | |\n| **lamports** | **i32** |  | [default to 100] |\n| **leaf_index** | **i32** |  | [default to 100] |\n| **owner** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj] |\n| **seq** | Option<**i32**> |  | [optional][default to 100] |\n| **slot_created** | **i32** |  | [default to 100] |\n| **tree** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj] |\n```\n\n----------------------------------------\n\nTITLE: Defining TokenAccount Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the TokenAccount model. It specifies two properties: 'account' of type Account and 'token_data' of type TokenData.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TokenAccount.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **account** | [**models::Account**](Account.md) |  | \n| **token_data** | [**models::TokenData**](TokenData.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalance Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the TokenBalance model using a markdown table. It specifies the name, type, description, and default values for the balance and mint properties.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TokenBalance.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **balance** | **i32** |  | [default to 100] |\n| **mint** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj] |\n```\n\n----------------------------------------\n\nTITLE: GetValidityProofPostRequest Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetValidityProofPostRequest model, including property names, types, descriptions, and notes.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetValidityProofPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetValidityProofPostRequestParams**](_getValidityProof_post_request_params.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining TokenAccountList Properties in Markdown\nDESCRIPTION: Describes the properties of the TokenAccountList model using a markdown table. It includes a cursor property (optional string) and an items property (vector of TokenAccount objects).\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TokenAccountList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TokenAccountList\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cursor** | Option<**String**> | A base 58 encoded string. | [optional][default to 3J98t1WpEZ73CNm]\n**items** | [**Vec<models::TokenAccount>**](TokenAccount.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetTransactionWithCompressionInfoV2Post200Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetTransactionWithCompressionInfoV2Post200Response model using a Markdown table. It includes optional error information, a response ID, JSON-RPC version, and an optional result object.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoV2Post200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetTransactionWithCompressionInfoV2Post200ResponseResult**](_getTransactionWithCompressionInfoV2_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetValidityProofV2Post200Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetValidityProofV2Post200Response model using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetValidityProofV2Post200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ---- | ---- | ----------- | ----- |\n| **error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional] |\n| **id** | **String** | An ID to identify the response. | |\n| **jsonrpc** | **String** | The version of the JSON-RPC protocol. | |\n| **result** | Option<[**models::GetValidityProofV2Post200ResponseResult**](_getValidityProofV2_post_200_response_result.md)> |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: SignatureInfoList Model Structure Definition in Markdown\nDESCRIPTION: Defines the structure of SignatureInfoList model which contains a vector property 'items' of type SignatureInfo. This model documentation follows OpenAPI/Swagger format.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/SignatureInfoList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SignatureInfoList\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**items** | [**Vec<models::SignatureInfo>**](SignatureInfo.md) |  | \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining RootIndex Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the RootIndex model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/RootIndex.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **prove_by_index** | **bool** |  | \n| **root_index** | **i32** |  | \n```\n\n----------------------------------------\n\nTITLE: GetValidityProofPost200Response Model Properties\nDESCRIPTION: Defines the property schema for GetValidityProofPost200Response including error handling, request ID, JSON-RPC version, and result payload. Uses optional types for error and result fields.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetValidityProofPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetValidityProofPost200ResponseResult**](_getValidityProof_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Markdown Parameter Documentation for Solana Token Account Query\nDESCRIPTION: Documentation table defining the properties and types for querying compressed token accounts by delegate. Includes cursor for pagination, delegate public key, result limit, and optional mint address filter.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedTokenAccountsByDelegatePostRequestParams.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cursor** | Option<**String**> | A base 58 encoded string. | [optional]\n**delegate** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**limit** | Option<**i32**> |  | [optional]\n**mint** | Option<**String**> | A Solana public key represented as a base58 string. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetLatestNonVotingSignaturesPost200Response model, including property names, types, descriptions, and optional flags.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetLatestNonVotingSignaturesPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetLatestNonVotingSignaturesPost200ResponseResult**](_getLatestNonVotingSignatures_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: SignatureInfoListWithError Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the SignatureInfoListWithError structure, showing the items field which contains a vector of SignatureInfoWithError objects.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/SignatureInfoListWithError.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**items** | [**Vec<models::SignatureInfoWithError>**](SignatureInfoWithError.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressionSignaturesForAddressPost200Response Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the GetCompressionSignaturesForAddressPost200Response model using a markdown table. It specifies the name, type, description, and optional notes for each property of the model.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressionSignaturesForAddressPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n|------|------|-------------|-------|\n| **error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional] |\n| **id** | **String** | An ID to identify the response. | |\n| **jsonrpc** | **String** | The version of the JSON-RPC protocol. | |\n| **result** | Option<[**models::GetCompressionSignaturesForAddressPost200ResponseResult**](_getCompressionSignaturesForAddress_post_200_response_result.md)> |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining GetQueueElementsPost200Response Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetQueueElementsPost200Response model using a markdown table. It specifies the name, type, description, and optional status of each property in the model.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetQueueElementsPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetQueueElementsPost200Response\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetQueueElementsPost200ResponseResult**](_getQueueElements_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining PaginatedSignatureInfoList Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the PaginatedSignatureInfoList model using a markdown table. It specifies two properties: an optional cursor string and a vector of SignatureInfo items.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/PaginatedSignatureInfoList.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cursor** | Option<**String**> |  | [optional]\n**items** | [**Vec<models::SignatureInfo>**](SignatureInfo.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedTokenAccountBalancePostRequest Properties in Markdown\nDESCRIPTION: Property definitions for a JSON-RPC request to get compressed token account balances. Includes id for request identification, jsonrpc version, method name, and params object reference.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedTokenAccountBalancePostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetCompressedTokenAccountBalancePostRequest\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetCompressedAccountPostRequestParams**](_getCompressedAccount_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetBatchAddressUpdateInfoPost200Response Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetBatchAddressUpdateInfoPost200Response model. It includes four properties: error (optional), id (required), jsonrpc (required), and result (optional). Each property is described with its type and purpose.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetBatchAddressUpdateInfoPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseResult**](_getBatchAddressUpdateInfo_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetQueueElementsPostRequest Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetQueueElementsPostRequest model using a markdown table. It includes the name, type, description, and notes for each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetQueueElementsPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **id** | **String** | An ID to identify the request. | |\n| **jsonrpc** | **String** | The version of the JSON-RPC protocol. | |\n| **method** | **String** | The name of the method to invoke. | |\n| **params** | [**models::GetQueueElementsPostRequestParams**](_getQueueElements_post_request_params.md) |  | |\n```\n\n----------------------------------------\n\nTITLE: Defining PaginatedAccountListV2 Model Properties in Markdown\nDESCRIPTION: Describes the properties of the PaginatedAccountListV2 model, including the optional cursor for pagination and the list of AccountV2 items. The cursor is a 32-byte hash represented as a base58 string, and the items are a vector of AccountV2 objects.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/PaginatedAccountListV2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**cursor** | Option<**String**> | A 32-byte hash represented as a base58 string. | [optional]\n**items** | [**Vec<models::AccountV2>**](AccountV2.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition in Markdown\nDESCRIPTION: Defines the structure and properties of the GetBatchAddressUpdateInfoPost429Response model, including optional error object, ID string, and JSON-RPC string fields.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetBatchAddressUpdateInfoPost429Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetBatchAddressUpdateInfoPost429Response\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | Option<**String**> |  | [optional]\n**jsonrpc** | Option<**String**> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetBatchAddressUpdateInfoPostRequest Properties Table\nDESCRIPTION: Markdown table documenting the properties of the GetBatchAddressUpdateInfoPostRequest model, including property names, types, descriptions and notes.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetBatchAddressUpdateInfoPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetBatchAddressUpdateInfoPostRequestParams**](_getBatchAddressUpdateInfo_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Markdown Property Table Definition\nDESCRIPTION: Defines the properties of the GetTransactionWithCompressionInfoPostRequest object using a markdown table format. Contains required fields for JSON-RPC request including id, jsonrpc version, method name, and parameters.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetTransactionWithCompressionInfoPostRequestParams**](_getTransactionWithCompressionInfo_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetIndexerHealthPost200Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetIndexerHealthPost200Response model using a markdown table. It includes the property names, types, descriptions, and additional notes.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetIndexerHealthPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional] |\n| **id** | **String** | An ID to identify the response. | |\n| **jsonrpc** | **String** | The version of the JSON-RPC protocol. | |\n| **result** | Option<**String**> | ok if healthy | [optional][default to Ok] |\n```\n\n----------------------------------------\n\nTITLE: Defining GetBatchAddressUpdateInfoPost200ResponseError Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the GetBatchAddressUpdateInfoPost200ResponseError model using a markdown table. It includes 'code' (optional integer) and 'message' (optional string) fields.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetBatchAddressUpdateInfoPost200ResponseError.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **code** | Option<**i32**> |  | [optional] |\n| **message** | Option<**String**> |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalanceListV2 Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the TokenBalanceListV2 model using a markdown table. It includes two properties: 'cursor' (an optional base58 encoded string for pagination) and 'items' (a vector of TokenBalance objects).\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/TokenBalanceListV2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **cursor** | Option<**String**> | A base 58 encoded string. | [optional][default to 3J98t1WpEZ73CNm] |\n| **items** | [**Vec<models::TokenBalance>**](TokenBalance.md) |  | \n```\n\n----------------------------------------\n\nTITLE: AddressSeq Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the AddressSeq model, including property names, types, descriptions and default values.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/AddressSeq.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**address** | **String** | A Solana public key represented as a base58 string. | [default to 111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj]\n**seq** | **i32** |  |\n```\n\n----------------------------------------\n\nTITLE: Defining ClosedAccountWithOptionalTokenDataV2 Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the ClosedAccountWithOptionalTokenDataV2 struct using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/ClosedAccountWithOptionalTokenDataV2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **account** | [**models::ClosedAccountV2**](ClosedAccountV2.md) |  | \n| **optional_token_data** | Option<[**models::TokenData**](TokenData.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountsByOwnerPost200ResponseResult Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressedAccountsByOwnerPost200ResponseResult model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountsByOwnerPost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| context | [models::Context](Context.md) |  | \n| value | [models::PaginatedAccountList](PaginatedAccountList.md) |  | \n```\n\n----------------------------------------\n\nTITLE: GetTransactionWithCompressionInfoV2PostRequest Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetTransactionWithCompressionInfoV2PostRequest model\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoV2PostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n**params** | [**models::GetTransactionWithCompressionInfoPostRequestParams**](_getTransactionWithCompressionInfo_post_request_params.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedMintTokenHoldersPost200Response Properties in Markdown\nDESCRIPTION: Schema documentation for the GetCompressedMintTokenHoldersPost200Response model. Defines the properties, their types, descriptions, and whether they are optional or required.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedMintTokenHoldersPost200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetCompressedMintTokenHoldersPost200Response\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetCompressedMintTokenHoldersPost200ResponseResult**](_getCompressedMintTokenHolders_post_200_response_result.md)> |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining GetMultipleCompressedAccountsV2Post200Response Properties in Markdown\nDESCRIPTION: This code snippet outlines the properties of the GetMultipleCompressedAccountsV2Post200Response model. It includes fields for error handling, response identification, JSON-RPC version, and the result of the request.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetMultipleCompressedAccountsV2Post200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetMultipleCompressedAccountsV2Post200Response\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetMultipleCompressedAccountsV2Post200ResponseResult**](_getMultipleCompressedAccountsV2_post_200_response_result.md)> |  | [optional]\n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining GetCompressedAccountV2Post200Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCompressedAccountV2Post200Response model. It includes four properties: error, id, jsonrpc, and result, along with their types and descriptions.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetCompressedAccountV2Post200Response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**error** | Option<[**models::GetBatchAddressUpdateInfoPost200ResponseError**](_getBatchAddressUpdateInfo_post_200_response_error.md)> |  | [optional]\n**id** | **String** | An ID to identify the response. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**result** | Option<[**models::GetCompressedAccountV2Post200ResponseResult**](_getCompressedAccountV2_post_200_response_result.md)> |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Compression Info Response Model Properties\nDESCRIPTION: Documents the properties of the GetTransactionWithCompressionInfoPost200ResponseResultCompressionInfo model, which contains arrays of opened and closed accounts with optional token data.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetTransactionWithCompressionInfoPost200ResponseResultCompressionInfo.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetTransactionWithCompressionInfoPost200ResponseResultCompressionInfo\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**closed_accounts** | [**Vec<models::AccountWithOptionalTokenData>**](AccountWithOptionalTokenData.md) |  | \n**opened_accounts** | [**Vec<models::AccountWithOptionalTokenData>**](AccountWithOptionalTokenData.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetQueueElementsPost200ResponseResult Model Properties in Markdown\nDESCRIPTION: Documents the properties of the GetQueueElementsPost200ResponseResult model including context, first_value_queue_index, and value array. Provides type definitions and relationships to other models.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetQueueElementsPost200ResponseResult.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetQueueElementsPost200ResponseResult\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**context** | [**models::Context**](Context.md) |  | \n**first_value_queue_index** | **i32** |  | \n**value** | [**Vec<models::GetQueueElementsResponseValue>**](GetQueueElementsResponseValue.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetIndexerHealthPostRequest Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the GetIndexerHealthPostRequest model, including their names, types, and descriptions. It's used for API documentation and request structure definition.\nSOURCE: https://github.com/lightprotocol/light-protocol/blob/main/sdk-libs/photon-api/docs/GetIndexerHealthPostRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetIndexerHealthPostRequest\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **String** | An ID to identify the request. | \n**jsonrpc** | **String** | The version of the JSON-RPC protocol. | \n**method** | **String** | The name of the method to invoke. | \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```"
  }
]