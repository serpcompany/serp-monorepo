[
  {
    "owner": "processing",
    "repo": "processing-docs",
    "content": "TITLE: Defining Processing-specific Functions\nDESCRIPTION: This section defines various Processing-specific functions and methods, including type conversion functions and file handling methods.\nSOURCE: https://github.com/processing/processing-docs/blob/master/generate/keywords_base.txt#2025-04-10_snippet_5\n\nLANGUAGE: Processing\nCODE:\n```\nboolean\tFUNCTION1\tbooleanconvert_\nbyte\tFUNCTION1\tbyteconvert_\ncache\tFUNCTION2\nchar\tFUNCTION1\tcharconvert_\nstart\tFUNCTION1\nstop\tFUNCTION1\nbreakShape\tFUNCTION1\ncreatePath\tFUNCTION1\nfloat\tFUNCTION1\tfloatconvert_\nint\tFUNCTION1\tintconvert_\nstr\tFUNCTION1\tstrconvert_\nloadMatrix\tFUNCTION1\nparseBoolean\tFUNCTION1\nparseByte\tFUNCTION1\nparseChar\tFUNCTION1\nparseFloat\tFUNCTION1\nparseInt\tFUNCTION1\nsaveFile\tFUNCTION1\nsavePath\tFUNCTION1\nsketchFile\tFUNCTION1\nsketchPath\tFUNCTION1\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Structures for Processing\nDESCRIPTION: This section defines flow control structures used in Processing, such as loops and conditional statements. Each keyword is defined twice with different types for syntax highlighting purposes.\nSOURCE: https://github.com/processing/processing-docs/blob/master/generate/keywords_base.txt#2025-04-10_snippet_4\n\nLANGUAGE: Processing\nCODE:\n```\ncatch\tKEYWORD3\tcatch\ndo\tKEYWORD3\nfor\tKEYWORD3\tfor\nif\tKEYWORD3\tif\nelse\tKEYWORD3\telse\nswitch\tKEYWORD3\tswitch\nsynchronized\tKEYWORD3\nwhile\tKEYWORD3\twhile\ntry\tKEYWORD3\ttry\n\ncatch\tFUNCTION3\tcatch\ndo\tFUNCTION3\nfor\tFUNCTION3\tfor\nif\tFUNCTION3\tif\n#else\tFUNCTION3\telse\nswitch\tFUNCTION3\tswitch\nsynchronized\tFUNCTION3\nwhile\tFUNCTION3\twhile\n#try\tFUNCTION3\ttry\n```\n\n----------------------------------------\n\nTITLE: Defining Data Types for Processing\nDESCRIPTION: This section defines various data types used in Processing, including both Java standard types and Processing-specific types like 'color'.\nSOURCE: https://github.com/processing/processing-docs/blob/master/generate/keywords_base.txt#2025-04-10_snippet_3\n\nLANGUAGE: Processing\nCODE:\n```\nArray\tKEYWORD5\tArray\nArrayList\tKEYWORD5\tArrayList\nBoolean\tKEYWORD5\nByte\tKEYWORD5\nBufferedReader\tKEYWORD5\tBufferedReader\nCharacter\tKEYWORD5\nClass\tKEYWORD5\tclass\nFloat\tKEYWORD5\nInteger\tKEYWORD5\nHashMap\tKEYWORD5\tHashMap\nPrintWriter\tKEYWORD5\tPrintWriter\nString\tKEYWORD5\tString\nStringBuffer\tKEYWORD5\nStringBuilder\tKEYWORD5\nThread\tKEYWORD5\nboolean\tKEYWORD5\tboolean\nbyte\tKEYWORD5\tbyte\nchar\tKEYWORD5\tchar\ncolor\tKEYWORD5\tcolor_datatype\ndouble\tKEYWORD5\tdouble\nfloat \tKEYWORD5\tfloat\nint\tKEYWORD5\tint\nlong\tKEYWORD5\tlong\nvar   KEYWORD5\n```\n\n----------------------------------------\n\nTITLE: Correcting Array Manipulation in Processing\nDESCRIPTION: This code snippet demonstrates correct usage of array manipulation functions in Processing, including append(), shorten(), and arraycopy(). It shows how to properly add and remove elements from arrays, as well as copy array contents.\nSOURCE: https://github.com/processing/processing-docs/blob/master/learning/books/processing-errata.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\nString[] trees = { \"ash\", \"oak\" };\nappend(trees, \"maple\"); // INCORRECT! Does not change the array\nprintln(trees); // Prints [0] \"ash\",  [1] \"oak\"\nprintln();\ntrees = append(trees, \"maple\"); // Add \"maple\" to the end\nprintln(trees); // Prints [0] \"ash\",  [1] \"oak\", [2] \"maple\"\nprintln();\n// Add \"beech\" to the end of the trees array, and creates a new\n// array to store the change\nString[] moretrees = append(trees, \"beech\");\n// Prints [0] \"ash\", [1] \"oak\", [2] \"maple\", [3] \"beech\"\nprintln(moretrees);\n\nString[] trees = { \"lychee\", \"coconut\", \"fig\"};\ntrees = shorten(trees); // Remove the last element from the array\nprintln(trees); // Prints [0] \"lychee\", [1] \"coconut\"\nprintln();\ntrees = shorten(trees); // Remove the last element from the array\nprintln(trees); // Prints [0] \"lychee\"\n\nString[] north = { \"OH\", \"IN\", \"MI\" };\nString[] south = { \"GA\", \"FL\", \"NC\" };\narraycopy(north, south); // Copy from north array to south array\nprintln(south); // Prints [0] \"OH\", [1] \"IN\", [3] \"MI\"\nprintln();\nString[] east = { \"MA\", \"NY\", \"RI\" };\nString[] west = new String[east.length]; // Create a new array\narraycopy(east, west); // Copy from east array to west array\nprintln(west); // Prints [0] \"MA\", [1] \"NY\", [2] \"RI\"\n```\n\n----------------------------------------\n\nTITLE: Defining Processing-specific Keywords and Constants\nDESCRIPTION: This section defines various Processing-specific keywords and constants, including color modes, shape types, and blend modes. Each line defines a keyword, its type (usually LITERAL2), and sometimes associated functions.\nSOURCE: https://github.com/processing/processing-docs/blob/master/generate/keywords_base.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\nADD\tLITERAL2\tblend_\nALIGN_CENTER\tLITERAL2\nALIGN_LEFT\tLITERAL2\nALIGN_RIGHT\tLITERAL2\nALPHA\tLITERAL2\nALPHA_MASK\tLITERAL2\nALT\tLITERAL2\nAMBIENT\tLITERAL2\nARC\tLITERAL2\tcreateShape_\nARROW\tLITERAL2\tcursor_\nARGB\tLITERAL2\nBACKSPACE\tLITERAL2\tkeyCode\n```\n\n----------------------------------------\n\nTITLE: Loading Table Data in Processing\nDESCRIPTION: Code examples showing different ways to load table data, including CSV and TSV formats with explicit file type specification.\nSOURCE: https://github.com/processing/processing-docs/blob/master/todo.txt#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nloadTable(\"somethingorother\", \"csv\");\nloadTable(\"somethingorother.csv\", \"tsv\");\n```\n\n----------------------------------------\n\nTITLE: Fixing Array Handling in Processing Example 33-17\nDESCRIPTION: Demonstrates the proper way to append elements to arrays in Processing, highlighting a common mistake where the return value of append() must be assigned back to the array variable. Shows both incorrect and correct approaches.\nSOURCE: https://github.com/processing/processing-docs/blob/master/content/static/processing-errata.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\nString[] trees = { \"ash\", \"oak\" };\nappend(trees, \"maple\"); // INCORRECT! Does not change the array\nprintln(trees); // Prints [0] \"ash\",  [1] \"oak\"\nprintln();\ntrees = append(trees, \"maple\"); // Add \"maple\" to the end\nprintln(trees); // Prints [0] \"ash\",  [1] \"oak\", [2] \"maple\"\nprintln();\n// Add \"beech\" to the end of the trees array, and creates a new\n// array to store the change\nString[] moretrees = append(trees, \"beech\");\n// Prints [0] \"ash\", [1] \"oak\", [2] \"maple\", [3] \"beech\"\nprintln(moretrees);\n```\n\n----------------------------------------\n\nTITLE: Updating Array Elements in Processing\nDESCRIPTION: Demonstrates correct and incorrect ways to append elements to an array in Processing, including the use of the append() function and creating new arrays.\nSOURCE: https://github.com/processing/processing-docs/blob/master/img/learning/processing-errata.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\nString[] trees = { \"ash\", \"oak\" };\nappend(trees, \"maple\"); // INCORRECT! Does not change the array\nprintln(trees); // Prints [0] \"ash\",  [1] \"oak\"\nprintln();\ntrees = append(trees, \"maple\"); // Add \"maple\" to the end\nprintln(trees); // Prints [0] \"ash\",  [1] \"oak\", [2] \"maple\"\nprintln();\n// Add \"beech\" to the end of the trees array, and creates a new\n// array to store the change\nString[] moretrees = append(trees, \"beech\");\n// Prints [0] \"ash\", [1] \"oak\", [2] \"maple\", [3] \"beech\"\nprintln(moretrees);\n```\n\n----------------------------------------\n\nTITLE: Defining Java Keywords with Parentheses for Processing\nDESCRIPTION: This section defines Java keywords that can be followed by parentheses in Processing. These are typically used for control flow and object-oriented programming concepts.\nSOURCE: https://github.com/processing/processing-docs/blob/master/generate/keywords_base.txt#2025-04-10_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nassert\tKEYWORD6\ncase\tKEYWORD6\tcase\nreturn\tKEYWORD6\treturn\nsuper\tKEYWORD6\tsuper\nthis\tKEYWORD6\tthis\nthrow\tKEYWORD6\n```\n\n----------------------------------------\n\nTITLE: Defining Operators for Processing\nDESCRIPTION: This section defines various operators used in Processing, including arithmetic, assignment, comparison, and logical operators. Each operator is defined without a KEYWORD type.\nSOURCE: https://github.com/processing/processing-docs/blob/master/generate/keywords_base.txt#2025-04-10_snippet_6\n\nLANGUAGE: Processing\nCODE:\n```\n+=\t\taddassign\n+\t\taddition\n[]\t\tarrayaccess\n=\t\tassign\n&\t\tbitwiseAND\n|\t\tbitwiseOR\n,\t\tcomma\n//\t\tcomment\n?\t\tconditional\n{}\t\tcurlybraces\n--\t\tdecrement\n/\t\tdivide\n/=\t\tdivideassign\n/**\t\tdoccomment\n.\t\tdot\n==\t\tequality\n>\t\tgreaterthan\n>=\t\tgreaterthanorequalto\n++\t\tincrement\n!=\t\tinequality\n<<\t\tleftshift\n<\t\tlessthan\n<=\t\tlessthanorequalto\n&&\t\tlogicalAND\n!\t\tlogicalNOT\n||\t\tlogicalOR\n-\t\tminus\n%\t\tmodulo\n/*\t\tmultilinecomment\n*\t\tmultiply\n*=\t\tmultiplyassign\n()\t\tparentheses\n>>\t\trightshift\n;\t\tsemicolon\n-=\t\tsubtractassign\n```\n\n----------------------------------------\n\nTITLE: Defining Java Keywords for Processing\nDESCRIPTION: This section defines standard Java keywords that are also used in Processing. It includes keywords for control flow, modifiers, and basic types.\nSOURCE: https://github.com/processing/processing-docs/blob/master/generate/keywords_base.txt#2025-04-10_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nabstract\tKEYWORD1\nbreak\tKEYWORD1\tbreak\nclass\tKEYWORD1\tclass\ncontinue\tKEYWORD1\tcontinue\ndefault\tKEYWORD1\tdefault\nenum\tKEYWORD1\nextends\tKEYWORD1\textends\nfalse\tKEYWORD1\tfalse\nfinal\tKEYWORD1\tfinal\nfinally\tKEYWORD1\nimplements\tKEYWORD1\timplements\nimport\tKEYWORD1\timport\n```\n\n----------------------------------------\n\nTITLE: Shortening Arrays in Processing Example 33-18\nDESCRIPTION: Demonstrates how to remove elements from the end of arrays using the shorten() method in Processing. Shows that each call to shorten() removes one element and requires reassignment to the original array variable.\nSOURCE: https://github.com/processing/processing-docs/blob/master/content/static/processing-errata.txt#2025-04-10_snippet_1\n\nLANGUAGE: Processing\nCODE:\n```\nString[] trees = { \"lychee\", \"coconut\", \"fig\"};\ntrees = shorten(trees); // Remove the last element from the array\nprintln(trees); // Prints [0] \"lychee\", [1] \"coconut\"\nprintln();\ntrees = shorten(trees); // Remove the last element from the array\nprintln(trees); // Prints [0] \"lychee\"\n```\n\n----------------------------------------\n\nTITLE: Shortening Arrays in Processing\nDESCRIPTION: Shows how to use the shorten() function to remove elements from the end of an array in Processing.\nSOURCE: https://github.com/processing/processing-docs/blob/master/img/learning/processing-errata.txt#2025-04-10_snippet_1\n\nLANGUAGE: Processing\nCODE:\n```\nString[] trees = { \"lychee\", \"coconut\", \"fig\"};\ntrees = shorten(trees); // Remove the last element from the array\nprintln(trees); // Prints [0] \"lychee\", [1] \"coconut\"\nprintln();\ntrees = shorten(trees); // Remove the last element from the array\nprintln(trees); // Prints [0] \"lychee\"\n```\n\n----------------------------------------\n\nTITLE: Array Copying in Processing Example 33-20\nDESCRIPTION: Demonstrates how to use arraycopy() to copy elements between arrays in Processing. Shows two approaches: copying to an existing array and copying to a newly created array of the same length.\nSOURCE: https://github.com/processing/processing-docs/blob/master/content/static/processing-errata.txt#2025-04-10_snippet_2\n\nLANGUAGE: Processing\nCODE:\n```\nString[] north = { \"OH\", \"IN\", \"MI\" };\nString[] south = { \"GA\", \"FL\", \"NC\" };\narraycopy(north, south); // Copy from north array to south array\nprintln(south); // Prints [0] \"OH\", [1] \"IN\", [3] \"MI\"\nprintln();\nString[] east = { \"MA\", \"NY\", \"RI\" };\nString[] west = new String[east.length]; // Create a new array\narraycopy(east, west); // Copy from east array to west array\nprintln(west); // Prints [0] \"MA\", [1] \"NY\", [2] \"RI\"\n```\n\n----------------------------------------\n\nTITLE: Copying Arrays in Processing\nDESCRIPTION: Demonstrates how to copy elements between arrays using the arraycopy() function in Processing.\nSOURCE: https://github.com/processing/processing-docs/blob/master/img/learning/processing-errata.txt#2025-04-10_snippet_2\n\nLANGUAGE: Processing\nCODE:\n```\nString[] north = { \"OH\", \"IN\", \"MI\" };\nString[] south = { \"GA\", \"FL\", \"NC\" };\narraycopy(north, south); // Copy from north array to south array\nprintln(south); // Prints [0] \"OH\", [1] \"IN\", [3] \"MI\"\nprintln();\nString[] east = { \"MA\", \"NY\", \"RI\" };\nString[] west = new String[east.length]; // Create a new array\narraycopy(east, west); // Copy from east array to west array\nprintln(west); // Prints [0] \"MA\", [1] \"NY\", [2] \"RI\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Method Variants from Web Reference in Java\nDESCRIPTION: Example of using the @nowebref Javadoc comment to exclude specific method variants from appearing in the generated web reference documentation.\nSOURCE: https://github.com/processing/processing-docs/blob/master/java_generate/README.md#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/**\n  * @nowebref\n  */\n```\n\n----------------------------------------\n\nTITLE: Updating Pixel Colors in Processing\nDESCRIPTION: Shows how to directly manipulate pixel colors in an image using the pixels array in Processing.\nSOURCE: https://github.com/processing/processing-docs/blob/master/img/learning/processing-errata.txt#2025-04-10_snippet_3\n\nLANGUAGE: Processing\nCODE:\n```\npixels[y*width + x] = color(102);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Pixel Array Access in Processing\nDESCRIPTION: Demonstrates an optimization technique for accessing the pixels array by replacing multiplication with addition.\nSOURCE: https://github.com/processing/processing-docs/blob/master/img/learning/processing-errata.txt#2025-04-10_snippet_4\n\nLANGUAGE: Processing\nCODE:\n```\n// Replaces the multiplication y*width with an addition\n```\n\n----------------------------------------\n\nTITLE: Drawing Line Using Bresenham's Algorithm in Processing\nDESCRIPTION: Implements Bresenham's line drawing algorithm to create a line between two points. This function is used for smooth line drawing in the ChronoDraw sketch.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_7\n\nLANGUAGE: Processing\nCODE:\n```\nvoid drawline(int x1, int y1, int x2, int y2)\n{\n  int sizex, sizey, incx, incy;\n  int countx, county, x, y;\n  sizex=x2-x1;\n  sizey=y2-y1;\n\n  if(sizex<0) {\n    sizex=-sizex;\n    incx=-1;\n  } else {\n    incx=1;\n  }\n\n  if(sizey<0) {\n    sizey=-sizey;\n    incy=-1;\n  }else {\n    incy = 1;\n  }\n  countx=x1;\n  county=y1;\n\n  drawdot(x1, y1);\n  if (sizex>=sizey) {\n    y=sizex>>1;\n    for(int i=0;i<sizex;i++) {\n      y+=sizey;\n      if (y>=sizex) {\n        y-=sizex;\n        county+=incy;\n      }\n      countx+=incx;\n      drawdot(countx, county);\n    }\n  } else {\n    x=sizey>>1;\n    for(int i=0;i<sizey;i++) {\n      x+=sizex;\n      if (x>=sizey) {\n        x-=sizey;\n        countx+=incx;\n      }\n      county+=incy;\n      drawdot(countx, county);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Loop for ChronoDraw Animation in Processing\nDESCRIPTION: Implements the main drawing and animation logic for ChronoDraw. It handles user input, updates frames, and manages the chronological display of drawn content.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_4\n\nLANGUAGE: Processing\nCODE:\n```\nvoid loop(){\n\n  ////drawpixels \n  if (mousePressed) {\n    if (mouseX>=0 && mouseX<width && mouseY>=0 && mouseY<height){\n      drawline(mouseX, mouseY, pmouseX, pmouseY);\n      if (fat) {\n        drawthickline(mouseX, mouseY, pmouseX, pmouseY, 2);\n        drawdot(mouseX+1, mouseY);\n        drawdot(mouseX,   mouseY+1);\n        drawdot(mouseX,   mouseY-1);\n        drawdot(mouseX-1, mouseY);\n        drawdot(mouseX+1, mouseY-1);\n        drawdot(mouseX+1, mouseY+1);\n        drawdot(mouseX-1, mouseY-1);\n        drawdot(mouseX-1, mouseY+1);\n      }\n    }\n  }\n\n  ////draw frames\n  int p = currentpic;\n  for (int j=0; j<vquads; j++){\n    for (int i=0; i<hquads; i++){\n      set(i*quadwidth, j*quadheight, bitlist[p]);\n      p+= framestep;\n      p = p%buflength;\n      if (p<0) p = buflength + p;\n    }\n  }\n\n  //// increment\n  framecounter++;\n  if (framecounter >= framerest){\n    framecounter = 0;\n    currentpic--;\n    if (currentpic < 0) currentpic = buflength - 1;\n  }\n\n  ////btncheck\n  if (keyPressed && key==' ') {\n    btnheight = height / 2;\n    if  (mouseY < btnheight && mouseY >=0){\n      framestep = - int(btnreso / 2) + int(mouseX/(width/btnreso));\n    } else if (mouseY > btnheight && mouseY < height){\n      framerest = int(mouseX/(width/btnreso))*btnresomulti;\n    }\n  } else {\n    btnheight = 8;\n  }\n\n  ////drawgrid\n  if (grid) drawgrid();\n\n  ////drawbtn1\n  noStroke();\n  fill(0,0,255,50);\n  int btnxoffset = width/btnreso * (btnreso / 2 + framestep);\n  rect(btnxoffset, 0, width/btnreso, btnheight);\n\n  ////drawbtn2\n  fill(255,0,0,50);\n  btnxoffset = width/btnreso * framerest / btnresomulti;\n  rect(btnxoffset, height - btnheight , width/btnreso, btnheight);\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Thick Line in ChronoDraw\nDESCRIPTION: Creates a thick line by drawing multiple parallel lines. This function enhances the drawing capabilities of the sketch by allowing for variable line thickness.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_8\n\nLANGUAGE: Processing\nCODE:\n```\nvoid drawthickline(int x1, int y1, int x2, int y2, int thickness) {\n\n  int dX = x2 - x1;\n  int dY = y2 - y1;\n\n  double lineLength = Math.sqrt(dX * dX + dY * dY);\n  double scale = (double)(thickness) / (2 * lineLength);\n  double ddx = -scale * (double)dY;\n  double ddy = scale * (double)dX;\n  ddx += (ddx > 0) ? 0.5 : -0.5;\n  ddy += (ddy > 0) ? 0.5 : -0.5;\n  int dx = (int)ddx;\n  int dy = (int)ddy;\n\n  int xPoints[] = new int[4];\n  int yPoints[] = new int[4];\n\n  xPoints[0] = x1 + dx; yPoints[0] = y1 + dy;\n  xPoints[1] = x1 - dx; yPoints[1] = y1 - dy;\n  xPoints[2] = x2 - dx; yPoints[2] = y2 - dy;\n  xPoints[3] = x2 + dx; yPoints[3] = y2 + dy;\n\n  drawline(xPoints[0], yPoints[0], xPoints[1], yPoints[1]);\n  drawline(xPoints[1], yPoints[1], xPoints[2], yPoints[2]);\n  drawline(xPoints[2], yPoints[2], xPoints[3], yPoints[3]);\n  drawline(xPoints[3], yPoints[3], xPoints[0], yPoints[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Java-Generate for Processing Documentation\nDESCRIPTION: Commands to navigate to the ReferenceGenerator directory and execute the processingrefBuild.sh script to generate Processing documentation.\nSOURCE: https://github.com/processing/processing-docs/blob/master/java_generate/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ReferenceGenerator/\n$ ./processingrefBuild.sh\n```\n\n----------------------------------------\n\nTITLE: Compiling Java-Generate Classes with Ant\nDESCRIPTION: Instructions for using Ant to compile the Java-Generate classes. This process requires navigating to the ReferenceGenerator directory and running the ant compile command.\nSOURCE: https://github.com/processing/processing-docs/blob/master/java_generate/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ReferenceGenerator/\n$ ant compile\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Variables for ChronoDraw in Processing\nDESCRIPTION: Sets up global variables for the ChronoDraw sketch, including dimensions, buffer length, frame settings, and image arrays. These variables control the overall behavior and appearance of the application.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\nint hquads       = 25;\nint vquads       = 1;\nint quadwidth    = 39;\nint quadheight   = 250;\nint buflength    = 200;\nint framestep    = 4;\nint framerest    = 2;\nboolean fat      = false;\nboolean grid     = true;\nint btnresomulti = 2;\nint btnreso      = 25;\nint btnheight;\nint framecounter = 0;\nBImage[] bitlist = new BImage[buflength];\nBImage blank     = new BImage();\nint currentpic   = buflength - 1;\n```\n\n----------------------------------------\n\nTITLE: Drawing Dot in ChronoDraw Frame Buffer\nDESCRIPTION: Places a single white dot in the appropriate frame of the bitlist array. This function is a core component of the drawing mechanism in ChronoDraw.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_6\n\nLANGUAGE: Processing\nCODE:\n```\nvoid drawdot(int qx, int qy){\n  int offsx = qx%quadwidth;\n  int offsy = qy%quadheight;\n  int mx = qx / quadwidth;\n  int my = qy / quadheight;\n  int offsp = mx + my * hquads;\n  int cp = (currentpic + offsp * framestep) % buflength;\n  if (cp < 0) cp = buflength + cp;\n  bitlist[cp].set(offsx, offsy, color(255,255,255));\n}\n```\n\n----------------------------------------\n\nTITLE: Main Animation Loop for Ticker Display in Processing\nDESCRIPTION: Implements the main animation loop, updating the background image (if using a sequence), scrolling the ticker rows, and optionally saving frames as a Targa sequence.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/papa/ticker_applet.txt#2025-04-10_snippet_2\n\nLANGUAGE: Processing\nCODE:\n```\nvoid loop() {\n\n  background(BGColor); // redraw background\n\n  if (isImageSequence)  updateImage();  // if there is an image sequence, update the pixel array every frame\n  for(int i=0; i < row.length; i++) row[i].scroll(); // draw rows\n\n  if (saveTargaSequence) saveFrame(targaSequencePrefix + \"-####.tga\"); // save each frame\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ticker Animation Environment in Processing\nDESCRIPTION: Configures the animation environment, including canvas size, font loading, file naming conventions, and various animation parameters. It also initializes the ticker rows and sets up the image loading process.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/papa/ticker_applet.txt#2025-04-10_snippet_1\n\nLANGUAGE: Processing\nCODE:\n```\nvoid setup() {\n\n  // settings\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n  size(800, 200);                             // size = pixels in the image\n\n  monospace = loadFont(\"SCREENFont-R.vlw\");   // load font (must be a monospace to be authentic)\n\n  fileName = \"test.jpg\";                      // the image must be the exact pixel dimensions of the composition. if you are using an image sequence, this variable doesn't matter\n\n  isImageSequence = false;                    // set if there is a sequence of images or not\n\n  // the following must have 'isImageSequence' set to TRUE in order to be used by the applet\n  sequencePrefix = \"sequence_dir/sequence_\";  // file name (do not include frame numbers)\n  sequenceExtension = \".jpg\";                 // file extension\n  sequenceStartFrame = 0;                     // first frame of the image sequence\n  sequenceEndFrame = 97;                      // last frame of the image sequence\n\n  saveTargaSequence = false;                  // change this to true if you want to save an image sequence\n  targaSequencePrefix = \"SEQUENCE_01-\";       // SEQUENCE_01-###0.tga\n\n  BGColor = color(0,0,0);                      // applet background color\n  tickerBGColor = color(0,0,0);                // ticker-row background color (this was set to black for production --the rows were extruded and textured in post.\n\n  rowSpace = 0;                               // spacing between rows\n  numberofRows = 20;                          // total number of rows\n  minScrollSpeed = 1f;                      // minimum speed rows will be able to scroll\n  maxScrollSpeed = 8f;                     // maximum speed rows will be able to scroll\n\n  rowHeight = height/numberofRows;            // height of each row  (don't touch this variable for full screen)\n  rowWidth = width;                           // width of each row   (don't touch this variable for full screen)\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n  noStroke();\n  noSmooth();\n\nif (!isImageSequence) { updateImage(); } // if not an image sequence, update the pixel array once\nelse { extCount = sequenceStartFrame; }\n\n  // initialize each row\n  row = new TickerRow[numberofRows];\n  for(int i=0; i < row.length; i++)\n  {\n    row[i] = new TickerRow(rowHeight*(i), rowWidth, rowHeight-rowSpace, random(minScrollSpeed, maxScrollSpeed));\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: TickerRow Class Implementation for Scrolling Display in Processing\nDESCRIPTION: Defines the TickerRow class, which manages individual rows of the ticker display. It handles scrolling, symbol ordering, and rendering of stock symbols with dynamic backgrounds based on the loaded image.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/papa/ticker_applet.txt#2025-04-10_snippet_4\n\nLANGUAGE: Processing\nCODE:\n```\nclass TickerRow {\n\n  float ypos, xpos1, xpos2, tickerwidth, tickerheight, speed;\n  String stock;\n  int numSymbols = 31;\n  int selSymbol = int(random(numSymbols));\n  String[] stcksymbol;\n  String order = \"\";\n  int orderlist[];\n\n  TickerRow (int y, int widthsetting, int heightsetting, float scrollSpeed)\n  {\n    ypos = y; // initial y position\n    xpos1 = 0;    // initial x position (for ticker 1\n    tickerwidth = widthsetting;\n    tickerheight = heightsetting;\n    xpos2 = widthsetting; // intial x position (for ticker 2\n    speed = scrollSpeed;\n\n    stcksymbol = new String[numSymbols]; // hard-coded array of stock symbols. Numbers are hardcoded; should really be random but I never got around to it.\n\n    stcksymbol[30] = \"NRA 46.25\";\n    stcksymbol[29] = \"MSSL 21.41\";\n    stcksymbol[28] = \"GNTM 64.52\";\n    stcksymbol[27] = \"JSTS 34.52\";\n    stcksymbol[26] = \"AXS-EVL 12.41\";\n    stcksymbol[25] = \"PTRT_ACT 34.85\";\n    stcksymbol[24] = \"SMRT_BMB 94.82\";\n    stcksymbol[23] = \"HBTN 12.74\";\n    stcksymbol[22] = \"AZNR 94.82\";\n    stcksymbol[21] = \"BLR 52.10\";\n    stcksymbol[20] = \"CHML 51.49\";\n    stcksymbol[19] = \"BIN-LDN 34.45\";\n    stcksymbol[18] = \"SADM 34.30\";\n    stcksymbol[17] = \"SDI_RBIA 6.65\";\n    stcksymbol[16] = \"WTC 13.34\";\n    stcksymbol[15] = \"BSH 45.81\";\n    stcksymbol[14] = \"WMD 7.99\";\n    stcksymbol[13] = \"CHNY 5.34\";\n    stcksymbol[12] = \"RIBS 1.08\";\n    stcksymbol[11] = \"JED 34.20\";\n    stcksymbol[10] = \"ROVS 34.93\";\n    stcksymbol[9] =  \"MRDR 34.12\";\n    stcksymbol[8] =  \"BNKR-BSTR 34.12\";\n    stcksymbol[7] =  \"NRON 44.5\";\n    stcksymbol[6] =  \"HLBR 6.76\";\n    stcksymbol[5] =  \"NRA 9.15\";\n    stcksymbol[4] =  \"CRCE 4.05\";\n    stcksymbol[3] =  \"4OIL 1.76\";\n    stcksymbol[2] =  \"CRD-OIL 2.37\";\n    stcksymbol[1] =  \"MTH 44.93\";\n    stcksymbol[0] =  \"ARMS 0.34\";\n\n    refreshOrder(); // refresh the random order of the symbols on each row\n  }\n\n  void scroll() // old parallax scrolling trick (clone self and seamlessly repeat ad-nauseam). However, after every complete pan, the stock symbols reset. The illusion is complete.\n  {\n    xpos1 -= speed; // decrement xpos1 in relation to speed\n    xpos2 -= speed; // decrement xpos2 in relation to speed\n    if (xpos1 < -width)\n    {\n      xpos1 = width; refreshOrder();\n    }\n    if (xpos2 < -width)\n    {\n      xpos2 = width; refreshOrder();\n    }\n    tickerDisplay(int(xpos1), int(ypos), int(tickerwidth), int(tickerheight)); // scroll ticker 1st part, the original\n    tickerDisplay(int(xpos2), int(ypos), int(tickerwidth), int(tickerheight)); // scroll ticker 2ndpart, the clone(!)\n  }\n\n  void refreshOrder()\n  {\n    for(int i=0; i<numSymbols; i++)\n    {\n      order += String(int(random(numSymbols))) + \" \";\n    }\n    orderlist = splitInts(order);\n  }\n\n  void tickerDisplay(int x, int y, int tickerwidth, int tickerheight)\n  {\n\n    int count, symCount, numRows, charHeight, charWidth, rowHeight, arrayKey, curSymbolLength, keyNumber;\n    String curSymbol;\n\n    textFont(monospace, tickerheight*1.6);\n\n    arrayKey = orderlist[0]; // the current array key\n    keyNumber = 0;\n    count = 0; // the string count\n\n    noStroke();\n    fill(tickerBGColor);\n    rect(x, y, tickerwidth, tickerheight);\n\n    for(int j=0; j<tickerwidth-tickerheight/1.3; j+=tickerheight/1.3)\n    {\n\n      curSymbol = stcksymbol[arrayKey];         // the current symbol\n      curSymbolLength = curSymbol.length();     // length of the current symbol\n\n      if((x+j-2) < width && (x+j-2) > 0)\n      {\n        /*\n        if (brightness(aPixels[x+j-2][y+tickerheight/2]) < 50 )\n        fill(random(0, 80));\n        else\n        */\n        fill(aPixels[x+j-2][y+tickerheight/2]); // fill\n      }\n\n      if (count < curSymbolLength)\n      {\n        text(curSymbol.substring(count,count+1), x+j-2, y+tickerheight);\n        count++;\n      }\n      else if (count == curSymbolLength)\n      {\n\n        //stroke(0,0,255); // will show the space\n        //noFill();\n        //rect(x+j,y,20,30);\n\n        count=0;\n        keyNumber++;\n        j+=tickerheight/2; // put two spaces\n        arrayKey = orderlist[keyNumber];\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ChronoDraw Canvas in Processing\nDESCRIPTION: Initializes the canvas size and creates a blank image template. This setup function is called once at the beginning of the sketch to prepare the drawing environment.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_1\n\nLANGUAGE: Processing\nCODE:\n```\nvoid setup(){\n  size(quadwidth * hquads, quadheight * vquads);\n  blank.width  = quadwidth;\n  blank.height = quadheight;\n  blank.pixels = new color[quadwidth*quadheight];\n  for (int j=0; j<blank.pixels.length; j++){\n    // blank.pixels[j] = color(150,0,0); \n    blank.pixels[j] = color(0,0,0);\n  }\n  clearall();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Input in ChronoDraw\nDESCRIPTION: Processes keyboard input to clear the canvas or toggle the 'fat' drawing mode. This function enhances user interaction with the sketch.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_3\n\nLANGUAGE: Processing\nCODE:\n```\nvoid keyPressed(){\n  if      (key == 'x' || key == 'X') clearall();\n  else if (key == 'f' || key == 'F') fat = !fat;\n//else if (key == 'g' || key == 'G') {grid = !grid; background(0,0,0);} \n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Variables for Ticker Animation in Processing\nDESCRIPTION: Sets up global variables for the ticker animation, including image handling, font, dimensions, and animation settings. It also defines arrays and objects for managing the ticker rows and stock symbols.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/papa/ticker_applet.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\nBImage a;\nBFont monospace;\nint[][] aPixels;\nString fileName, frameNumber, sequenceExtension, sequencePrefix, targaSequencePrefix;\nint rowWidth, rowHeight, rowSpace, numberofRows, sequenceEndFrame, sequenceStartFrame, extCount;\nfloat minScrollSpeed, maxScrollSpeed;\nboolean isImageSequence, saveTargaSequence;\ncolor BGColor, tickerBGColor;\nTickerRow[] row;\n```\n\n----------------------------------------\n\nTITLE: Updating Background Image for Ticker Animation in Processing\nDESCRIPTION: Handles the loading and updating of background images, supporting both single images and image sequences. It manages frame counting for sequences and updates the pixel array used for ticker backgrounds.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/papa/ticker_applet.txt#2025-04-10_snippet_3\n\nLANGUAGE: Processing\nCODE:\n```\nvoid updateImage() {\n\n  if(extCount == sequenceEndFrame) extCount = sequenceStartFrame; // if extension is equal to the end of the sequence, restart at the beginning\n\n  frameNumber = String(extCount);  // adding the appropriate number of zeros\n  if      (frameNumber.length() == 1)  frameNumber = \"0000\" + frameNumber;\n  else if (frameNumber.length() == 2)  frameNumber = \"000\"  + frameNumber;\n  else if (frameNumber.length() == 3)  frameNumber = \"00\"   + frameNumber;\n\n  if (isImageSequence) fileName = sequencePrefix + frameNumber + sequenceExtension;\n\n  a = loadImage(fileName); // Loads the image\n  aPixels = new int[width][height]; // pixel array\n  for(int i=0; i<height; i++) // assign pixel data\n  {\n    for(int j=0; j<width; j++)\n    {\n      aPixels[j][i] = a.pixels[i*width+j];\n    }\n  }\n  extCount++; // increment the extension\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Frames in ChronoDraw\nDESCRIPTION: Resets all frames in the bitlist array to the blank image. This function is used to clear the entire drawing canvas.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_2\n\nLANGUAGE: Processing\nCODE:\n```\nvoid clearall(){\n  for (int i=0; i<bitlist.length; i++){\n    bitlist[i] = blank.copy();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Grid for ChronoDraw in Processing\nDESCRIPTION: Creates a grid overlay on the canvas to visually separate the drawing area into quadrants. This function enhances the visual structure of the sketch.\nSOURCE: https://github.com/processing/processing-docs/blob/master/exhibition/works/chronodraw/chronodraw.txt#2025-04-10_snippet_5\n\nLANGUAGE: Processing\nCODE:\n```\nvoid drawgrid(){\n  stroke(255,255,255,25);\n  //h\n  for (int i=0; i<vquads; i++){\n    int l = i*quadheight;\n    line(0, l, width, l);\n  }\n  line(0, height-1, width, height-1); //last line\n\n  //v\n  for (int i=0; i<hquads; i++){\n    int l = i*quadwidth;\n    line(l, 0, l, height);\n  }\n  line(width-1, 0, width-1, height); //last line\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shape Coordinates in Processing\nDESCRIPTION: This snippet contains a series of x and y coordinates that define a shape or path in Processing. Each line represents a point with its x and y values separated by a tab. These coordinates can be used with Processing's shape drawing functions to create a custom shape.\nSOURCE: https://github.com/processing/processing-docs/blob/master/content/examples/Topics/File IO/LoadFile1/data/positions.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\n70\t35\n69\t35\n68\t39\n67\t42\n66\t47\n64\t51\n64\t54\n63\t57\n60\t60\n58\t64\n51\t69\n48\t72\n44\t73\n39\t75\n35\t75\n30\t75\n25\t75\n21\t75\n17\t73\n13\t69\n12\t66\n11\t61\n11\t57\n10\t49\n10\t45\n10\t38\n12\t32\n13\t29\n16\t23\n20\t19\n24\t16\n27\t15\n31\t13\n33\t13\n37\t13\n40\t15\n42\t16\n45\t19\n46\t21\n47\t24\n48\t26\n48\t29\n48\t33\n47\t39\n43\t45\n42\t47\n38\t50\n35\t51\n32\t51\n30\t51\n27\t50\n27\t50\n26\t46\n26\t41\n29\t36\n30\t34\n31\t33\n31\t33\n32\t33\n33\t33\n34\t33\n34\t33\n35\t33\n37\t33\n39\t33\n42\t32\n44\t31\n46\t29\n48\t29\n49\t27\n52\t24\n53\t23\n57\t19\n61\t16\n63\t14\n67\t13\n69\t12\n69\t12\n77\t11\n77\t11\n80\t11\n86\t16\n90\t21\n93\t25\n95\t29\n95\t32\n95\t33\n95\t37\n94\t41\n93\t44\n92\t46\n91\t49\n89\t51\n87\t55\n85\t59\n82\t62\n80\t64\n79\t67\n77\t69\n74\t71\n68\t72\n65\t73\n63\t73\n62\t73\n60\t72\n58\t69\n57\t67\n57\t66\n56\t60\n56\t56\n56\t54\n58\t49\n60\t47\n62\t47\n63\t47\n67\t48\n70\t52\n73\t55\n74\t57\n74\t58\n74\t60\n74\t62\n73\t65\n70\t68\n67\t69\n65\t70\n63\t70\n62\t70\n60\t68\n57\t65\n55\t64\n50\t62\n46\t61\n40\t60\n38\t60\n36\t60\n32\t61\n30\t62\n27\t64\n26\t68\n25\t71\n25\t77\n25\t81\n26\t84\n28\t86\n31\t87\n33\t88\n36\t88\n39\t86\n41\t85\n43\t83\n44\t81\n45\t76\n45\t74\n45\t71\n40\t67\n37\t65\n34\t63\n33\t61\n33\t61\n32\t60\n33\t49\n37\t45\n41\t41\n45\t39\n47\t38\n51\t37\n54\t37\n58\t38\n61\t41\n63\t44\n65\t46\n66\t49\n66\t51\n67\t55\n67\t58\n67\t60\n66\t62\n64\t65\n63\t66\n61\t67\n60\t68\n58\t68\n55\t69\n54\t69\n51\t69\n48\t69\n46\t68\n45\t66\n44\t65\n44\t63\n44\t61\n44\t59\n44\t56\n44\t55\n45\t53\n47\t52\n49\t50\n50\t48\n51\t47\n52\t46\n54\t46\n55\t45\n55\t45\n56\t44\n57\t44\n```\n\n----------------------------------------\n\nTITLE: Defining Shape Coordinates in Processing\nDESCRIPTION: This code snippet provides a list of x and y coordinates that can be used to define a shape or path in Processing. Each line represents a point with its x and y values separated by a tab. These coordinates can be used with Processing's shape drawing functions to create custom shapes or paths.\nSOURCE: https://github.com/processing/processing-docs/blob/master/content/handbook_2e/examples/32 Data/Ex_10/data/positions.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\n70\t35\n69\t35\n68\t39\n67\t42\n66\t47\n64\t51\n64\t54\n63\t57\n60\t60\n58\t64\n51\t69\n48\t72\n44\t73\n39\t75\n35\t75\n30\t75\n25\t75\n21\t75\n17\t73\n13\t69\n12\t66\n11\t61\n11\t57\n10\t49\n10\t45\n10\t38\n12\t32\n13\t29\n16\t23\n20\t19\n24\t16\n27\t15\n31\t13\n33\t13\n37\t13\n40\t15\n42\t16\n45\t19\n46\t21\n47\t24\n48\t26\n48\t29\n48\t33\n47\t39\n43\t45\n42\t47\n38\t50\n35\t51\n32\t51\n30\t51\n27\t50\n27\t50\n26\t46\n26\t41\n29\t36\n30\t34\n31\t33\n31\t33\n32\t33\n33\t33\n34\t33\n34\t33\n35\t33\n37\t33\n39\t33\n42\t32\n44\t31\n46\t29\n48\t29\n49\t27\n52\t24\n53\t23\n57\t19\n61\t16\n63\t14\n67\t13\n69\t12\n69\t12\n77\t11\n77\t11\n80\t11\n86\t16\n90\t21\n93\t25\n95\t29\n95\t32\n95\t33\n95\t37\n94\t41\n93\t44\n92\t46\n91\t49\n89\t51\n87\t55\n85\t59\n82\t62\n80\t64\n79\t67\n77\t69\n74\t71\n68\t72\n65\t73\n63\t73\n62\t73\n60\t72\n58\t69\n57\t67\n57\t66\n56\t60\n56\t56\n56\t54\n58\t49\n60\t47\n62\t47\n63\t47\n67\t48\n70\t52\n73\t55\n74\t57\n74\t58\n74\t60\n74\t62\n73\t65\n70\t68\n67\t69\n65\t70\n63\t70\n62\t70\n60\t68\n57\t65\n55\t64\n50\t62\n46\t61\n40\t60\n38\t60\n36\t60\n32\t61\n30\t62\n27\t64\n26\t68\n25\t71\n25\t77\n25\t81\n26\t84\n28\t86\n31\t87\n33\t88\n36\t88\n39\t86\n41\t85\n43\t83\n44\t81\n45\t76\n45\t74\n45\t71\n40\t67\n37\t65\n34\t63\n33\t61\n33\t61\n32\t60\n33\t49\n37\t45\n41\t41\n45\t39\n47\t38\n51\t37\n54\t37\n58\t38\n61\t41\n63\t44\n65\t46\n66\t49\n66\t51\n67\t55\n67\t58\n67\t60\n66\t62\n64\t65\n63\t66\n61\t67\n60\t68\n58\t68\n55\t69\n54\t69\n51\t69\n48\t69\n46\t68\n45\t66\n44\t65\n44\t63\n44\t61\n44\t59\n44\t56\n44\t55\n45\t53\n47\t52\n49\t50\n50\t48\n51\t47\n52\t46\n54\t46\n55\t45\n55\t45\n56\t44\n57\t44\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate Pairs for Processing Sketch\nDESCRIPTION: This snippet provides a list of x and y coordinate pairs. Each line contains two numbers separated by a tab, representing the x and y values respectively. These coordinates can be used to draw points, create shapes, or define paths in a Processing sketch.\nSOURCE: https://github.com/processing/processing-docs/blob/master/content/handbook_2e/examples/32 Data/Ex_06/positions.txt#2025-04-10_snippet_0\n\nLANGUAGE: Processing\nCODE:\n```\n35\t45\n41\t42\n46\t37\n50\t32\n57\t27\n62\t24\n65\t23\n68\t23\n69\t26\n69\t29\n69\t32\n68\t36\n67\t39\n65\t41\n64\t45\n62\t46\n59\t48\n55\t49\n53\t52\n49\t53\n47\t56\n45\t60\n45\t61\n45\t63\n47\t65\n50\t65\n52\t66\n54\t66\n56\t66\n60\t69\n62\t72\n62\t74\n62\t76\n61\t78\n59\t80\n55\t82\n52\t82\n49\t82\n45\t82\n42\t82\n39\t82\n35\t82\n33\t82\n30\t82\n30\t81\n31\t66\n28\t66\n25\t62\n23\t59\n22\t55\n22\t52\n22\t47\n23\t42\n25\t39\n27\t36\n30\t33\n33\t31\n35\t30\n38\t29\n41\t29\n42\t30\n43\t31\n45\t34\n46\t36\n48\t39\n50\t41\n53\t43\n57\t45\n60\t46\n62\t48\n63\t50\n64\t51\n64\t53\n64\t56\n64\t58\n64\t61\n63\t65\n62\t68\n60\t69\n56\t72\n52\t73\n48\t74\n44\t74\n42\t74\n40\t74\n38\t73\n36\t72\n34\t70\n33\t69\n32\t67\n31\t65\n30\t63\n30\t21\n30\t21\n34\t21\n41\t20\n46\t19\n50\t18\n51\t17\n51\t16\n58\t27\n58\t27\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable on OSX\nDESCRIPTION: Example of setting the JAVA_HOME environment variable in the .bash_profile on OSX (Mavericks) to properly locate the JDK for Java-Generate compilation.\nSOURCE: https://github.com/processing/processing-docs/blob/master/java_generate/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# in e.g. ~/.bash_profile\n# tell Java where to find JDK and libraries\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home\n```\n\n----------------------------------------\n\nTITLE: Running Build Listing Script - Basic Usage\nDESCRIPTION: Basic command to run the build_listing.py script which reads sources.conf and generates contribs.txt\nSOURCE: https://github.com/processing/processing-docs/blob/master/contrib_generate/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython build_listing.py\n```\n\n----------------------------------------\n\nTITLE: Running Build Listing Script with Custom Files\nDESCRIPTION: Command to run build_listing.py with custom input and output file parameters\nSOURCE: https://github.com/processing/processing-docs/blob/master/contrib_generate/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython build_listing.py sources.conf contribs.txt\n```\n\n----------------------------------------\n\nTITLE: Running Build Listing Script with Version Constraints\nDESCRIPTION: Command to run build_listing.py with Processing version compatibility parameters (216-227)\nSOURCE: https://github.com/processing/processing-docs/blob/master/contrib_generate/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython build_listing.py sources.conf contribs.txt 216 227\n```\n\n----------------------------------------\n\nTITLE: Running Legacy Build Listing Script\nDESCRIPTION: Command to run the build_listing_legacy.py script for Processing 2.x compatibility\nSOURCE: https://github.com/processing/processing-docs/blob/master/contrib_generate/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython build_listing_legacy.py\n```\n\n----------------------------------------\n\nTITLE: XML Path Parsing\nDESCRIPTION: A placeholder code snippet representing XML path parsing functionality, marked for addition to reference.\nSOURCE: https://github.com/processing/processing-docs/blob/master/todo.txt#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nXML.parse()\nparseXML()\nnew XML(name)\ncreateXML()\nappendChild(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Project Gutenberg Standard License Notice\nDESCRIPTION: The required license notice that must be displayed when distributing Project Gutenberg works. This notice indicates the work's free usage terms and references the full license.\nSOURCE: https://github.com/processing/processing-docs/blob/master/content/examples/Topics/Advanced Data/CountingStrings/data/dracula.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThis eBook is for the use of anyone anywhere at no cost and with\\nalmost no restrictions whatsoever.  You may copy it, give it away or\\nre-use it under the terms of the Project Gutenberg License included\\nwith this eBook or online at www.gutenberg.net\n```"
  }
]