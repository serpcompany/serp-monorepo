[
  {
    "owner": "automapper",
    "repo": "automapper",
    "content": "TITLE: Creating Basic AutoMapper Configuration in C#\nDESCRIPTION: Demonstrates how to create a basic mapping configuration between Order and OrderDto types using MapperConfiguration.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nvar config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDto>());\n```\n\n----------------------------------------\n\nTITLE: Performing Object Mapping with AutoMapper in C#\nDESCRIPTION: Shows how to create a mapper instance and perform object mapping using the configured mappings. Includes both generic and non-generic mapping approaches.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar mapper = config.CreateMapper();\n// or\nvar mapper = new Mapper(config);\nOrderDto dto = mapper.Map<OrderDto>(order);\n```\n\n----------------------------------------\n\nTITLE: Scanning Assemblies for Profiles in AutoMapper\nDESCRIPTION: Demonstrates how to automatically scan for profiles in assemblies using different approaches: by assembly instance, assembly names, or marker types. AutoMapper will find classes inheriting from Profile and add them to the configuration.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\n// Scan for all profiles in an assembly\n// ... using instance approach:\nvar config = new MapperConfiguration(cfg => {\n    cfg.AddMaps(myAssembly);\n});\nvar configuration = new MapperConfiguration(cfg => cfg.AddMaps(myAssembly));\n\n// Can also use assembly names:\nvar configuration = new MapperConfiguration(cfg =>\n    cfg.AddMaps(new [] {\n        \"Foo.UI\",\n        \"Foo.Core\"\n    });\n);\n\n// Or marker types for assemblies:\nvar configuration = new MapperConfiguration(cfg =>\n    cfg.AddMaps(new [] {\n        typeof(HomeController),\n        typeof(Entity)\n    });\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing AutoMapper Basic Configuration in C#\nDESCRIPTION: Demonstrates the basic setup of AutoMapper using MapperConfiguration. Shows how to create mapping profiles, define individual maps, and create mapper instances.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Setup.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nvar config = new MapperConfiguration(cfg => {\n    cfg.AddProfile<AppProfile>();\n    cfg.CreateMap<Source, Dest>();\n});\n\nvar mapper = config.CreateMapper();\n// or\nIMapper mapper = new Mapper(config);\nvar dest = mapper.Map<Source, Dest>(new Source());\n```\n\n----------------------------------------\n\nTITLE: Complex Aggregation in Projection in C#\nDESCRIPTION: Example of a complex aggregation with nested restrictions in a projection, showing how AutoMapper can generate sophisticated SQL queries through LINQ.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateProjection<Course, CourseModel>()\n    .ForMember(m => m.EnrollmentsStartingWithA,\n          opt => opt.MapFrom(c => c.Enrollments.Where(e => e.Student.LastName.StartsWith(\"A\")).Count()));\n```\n\n----------------------------------------\n\nTITLE: Using ProjectTo with Entity Framework in C#\nDESCRIPTION: Example of using AutoMapper's ProjectTo to efficiently map from OrderLine entities to OrderLineDTO objects, instructing Entity Framework to only query the needed fields from the database.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n    cfg.CreateProjection<OrderLine, OrderLineDTO>()\n    .ForMember(dto => dto.Item, conf => conf.MapFrom(ol => ol.Item.Name)));\n\npublic List<OrderLineDTO> GetLinesForOrder(int orderId)\n{\n  using (var context = new orderEntities())\n  {\n    return context.OrderLines.Where(ol => ol.OrderId == orderId)\n             .ProjectTo<OrderLineDTO>(configuration).ToList();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper with ASP.NET Core Dependency Injection\nDESCRIPTION: Demonstrates how to add AutoMapper to the ASP.NET Core dependency injection container using the AddAutoMapper method. This allows AutoMapper profiles to be discovered from specified assemblies or marker types.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Dependency-injection.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nservices.AddAutoMapper(profileAssembly1, profileAssembly2 /*, .../*);\n```\n\nLANGUAGE: c#\nCODE:\n```\nservices.AddAutoMapper(typeof(ProfileTypeFromAssembly1), typeof(ProfileTypeFromAssembly2) /*, .../*);\n```\n\n----------------------------------------\n\nTITLE: Testing AutoMapper Configuration Validation\nDESCRIPTION: Shows how to create and validate an AutoMapper configuration using AssertConfigurationIsValid method.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration-validation.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n  cfg.CreateMap<Source, Destination>());\n\nconfiguration.AssertConfigurationIsValid();\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper Mappings in C#\nDESCRIPTION: Initialize and configure AutoMapper by creating mapping definitions between source and destination types. Includes configuration validation for development and mapper instance creation.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => \n{\n    cfg.CreateMap<Foo, FooDto>();\n    cfg.CreateMap<Bar, BarDto>();\n});\n// only during development, validate your mappings; remove it before release\n#if DEBUG\nconfiguration.AssertConfigurationIsValid();\n#endif\n// use DI (http://docs.automapper.org/en/latest/Dependency-injection.html) or create the mapper yourself\nvar mapper = configuration.CreateMapper();\n```\n\n----------------------------------------\n\nTITLE: Adding Profiles to MapperConfiguration in AutoMapper\nDESCRIPTION: Shows different ways to add profiles to the main mapper configuration, either directly by specifying the profile type or instance.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\ncfg.AddProfile<OrganizationProfile>();\ncfg.AddProfile(new OrganizationProfile());\n```\n\n----------------------------------------\n\nTITLE: Testing AutoMapper Configuration in C#\nDESCRIPTION: Example of how to test AutoMapper configuration by asserting the configuration validity in a test method.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar config = AutoMapperConfiguration.Configure();\n\nconfig.AssertConfigurationIsValid();\n```\n\n----------------------------------------\n\nTITLE: Custom Projection with Calculated Properties in C#\nDESCRIPTION: Example of using MapFrom with expressions to create calculated properties in the projection, which will be translated to SQL by the query provider.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => cfg.CreateProjection<Customer, CustomerDto>()\n    .ForMember(d => d.FullName, opt => opt.MapFrom(c => c.FirstName + \" \" + c.LastName))\n    .ForMember(d => d.TotalContacts, opt => opt.MapFrom(c => c.Contacts.Count())));\n```\n\n----------------------------------------\n\nTITLE: Initializing MapperConfiguration in AutoMapper\nDESCRIPTION: Creates a MapperConfiguration instance and initializes configuration with a mapping between Foo and Bar classes and adds a profile. This configuration can be stored statically or in a dependency injection container.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nvar config = new MapperConfiguration(cfg => {\n    cfg.CreateMap<Foo, Bar>();\n    cfg.AddProfile<FooProfile>();\n});\n```\n\n----------------------------------------\n\nTITLE: Parameterized Projections in C#\nDESCRIPTION: Example of parameterizing a projection to incorporate runtime values, such as the current username, directly into the generated SQL query.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\nstring currentUserName = null;\ncfg.CreateProjection<Course, CourseModel>()\n    .ForMember(m => m.CurrentUserName, opt => opt.MapFrom(src => currentUserName));\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoMapper Configuration and Mapping in C#\nDESCRIPTION: Example showing how to configure AutoMapper and perform mapping between complex and flat models.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Flattening.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar customer = new Customer\n\t{\n\t\tName = \"George Costanza\"\n\t};\nvar order = new Order\n\t{\n\t\tCustomer = customer\n\t};\nvar bosco = new Product\n\t{\n\t\tName = \"Bosco\",\n\t\tPrice = 4.99m\n\t};\norder.AddOrderLineItem(bosco, 15);\n\nvar configuration = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDto>());\n\nOrderDto dto = mapper.Map<Order, OrderDto>(order);\n\ndto.CustomerName.ShouldEqual(\"George Costanza\");\ndto.Total.ShouldEqual(74.85m);\n```\n\n----------------------------------------\n\nTITLE: Executing AutoMapper Mappings in C#\nDESCRIPTION: Demonstrates how to use the configured mapper to transform objects from one type to another using AutoMapper's Map method.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar fooDto = mapper.Map<FooDto>(foo);\nvar barDto = mapper.Map<BarDto>(bar);\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper to Use a Custom Value Resolver\nDESCRIPTION: Configuration code showing how to tell AutoMapper to use a custom value resolver for a specific destination member. The example demonstrates using the MapFrom<T> method with a generic type parameter.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n   cfg.CreateMap<Source, Destination>()\n\t .ForMember(dest => dest.Total, opt => opt.MapFrom<CustomResolver>()));\nconfiguration.AssertConfigurationIsValid();\n\nvar source = new Source\n\t{\n\t\tValue1 = 5,\n\t\tValue2 = 7\n\t};\n\nvar result = mapper.Map<Source, Destination>(source);\n\nresult.Total.ShouldEqual(12);\n```\n\n----------------------------------------\n\nTITLE: Configuring Null Substitution in AutoMapper C#\nDESCRIPTION: Demonstrates how to configure and use null substitution in AutoMapper to replace null values with default alternatives during object mapping. The example shows both cases where the source value is null and non-null, illustrating how the substitution only applies when needed.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Null-substitution.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nvar config = new MapperConfiguration(cfg => cfg.CreateMap<Source, Dest>()\n    .ForMember(destination => destination.Value, opt => opt.NullSubstitute(\"Other Value\")));\n\nvar source = new Source { Value = null };\nvar mapper = config.CreateMapper();\nvar dest = mapper.Map<Source, Dest>(source);\n\ndest.Value.ShouldEqual(\"Other Value\");\n\nsource.Value = \"Not null\";\n\ndest = mapper.Map<Source, Dest>(source);\n\ndest.Value.ShouldEqual(\"Not null\");\n```\n\n----------------------------------------\n\nTITLE: Example of Generated LINQ Projection in C#\nDESCRIPTION: Example of a nested LINQ projection that AutoMapper would generate, showing how child collections are handled with Select projections to avoid SELECT N+1 problems.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nfrom i in db.Instructors\norderby i.LastName\nselect new InstructorIndexData.InstructorModel\n{\n    ID = i.ID,\n    FirstMidName = i.FirstMidName,\n    LastName = i.LastName,\n    HireDate = i.HireDate,\n    OfficeAssignmentLocation = i.OfficeAssignment.Location,\n    Courses = i.Courses.Select(c => new InstructorIndexData.InstructorCourseModel\n    {\n        CourseID = c.CourseID,\n        CourseTitle = c.Title\n    }).ToList()\n};\n```\n\n----------------------------------------\n\nTITLE: Using Context-Specific Before and After Map Callbacks in AutoMapper\nDESCRIPTION: Shows how to use before and after map callbacks during mapping execution. This approach allows accessing contextual information like local variables or HTTP context.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Before-and-after-map-actions.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nint i = 10;\nmapper.Map<Source, Dest>(src, opt => {\n    opt.BeforeMap((src, dest) => src.Value = src.Value + i);\n    opt.AfterMap((src, dest) => dest.Name = HttpContext.Current.Identity.Name);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Mapping with AutoMapper.Extensions.EnumMapping in C#\nDESCRIPTION: Example showing how to configure enum mapping between Source and Destination enums using ConvertUsingEnumMapping. It demonstrates default value mapping and custom mapping using MapValue, as well as setting up ReverseMap support.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Enum-Mapping.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing AutoMapper.Extensions.EnumMapping;\n\npublic enum Source\n{\n    Default = 0,\n    First = 1,\n    Second = 2\n}\n\npublic enum Destination\n{\n    Default = 0,\n    Second = 2\n}\n\ninternal class YourProfile : Profile\n{\n    public YourProfile()\n    {\n        CreateMap<Source, Destination>()\n            .ConvertUsingEnumMapping(opt => opt\n\t\t        // optional: .MapByValue() or MapByName(), without configuration MapByValue is used\n\t\t        .MapValue(Source.First, Destination.Default)\n            )\n            .ReverseMap(); // to support Destination to Source mapping, including custom mappings of ConvertUsingEnumMapping\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Polymorphic Collection Mapping in C#\nDESCRIPTION: Demonstrates how to configure and use polymorphic collection mapping. Maps an array of mixed parent/child source objects to their corresponding destination types, preserving the derived type information during mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Lists-and-arrays.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(c=> {\n    c.CreateMap<ParentSource, ParentDestination>()\n\t     .Include<ChildSource, ChildDestination>();\n    c.CreateMap<ChildSource, ChildDestination>();\n});\n\nvar sources = new[]\n\t{\n\t\tnew ParentSource(),\n\t\tnew ChildSource(),\n\t\tnew ParentSource()\n\t};\n\nvar destinations = mapper.Map<ParentSource[], ParentDestination[]>(sources);\n\ndestinations[0].ShouldBeInstanceOf<ParentDestination>();\ndestinations[1].ShouldBeInstanceOf<ChildDestination>();\ndestinations[2].ShouldBeInstanceOf<ParentDestination>();\n```\n\n----------------------------------------\n\nTITLE: Storing MapperConfiguration Instance in AutoMapper\nDESCRIPTION: Shows how to create and store a MapperConfiguration instance that can't be modified once created. This is the preferred approach as of AutoMapper 9.0, as the static API is no longer available.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n    cfg.CreateMap<Foo, Bar>();\n    cfg.AddProfile<FooProfile>();\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Reverse Mapping with MapFrom in C#\nDESCRIPTION: Demonstrates how AutoMapper automatically handles the reverse mapping when using MapFrom with a simple member accessor path. This example specifies the mapping from Order to OrderDto with automatic reverse mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Reverse-Mapping-and-Unflattening.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateMap<Order, OrderDto>()\n  .ForMember(d => d.CustomerName, opt => opt.MapFrom(src => src.Customer.Name))\n  .ReverseMap();\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Destination Classes for Custom Value Resolution\nDESCRIPTION: Example classes demonstrating a scenario where a custom value resolver is needed. The Destination.Total property needs to calculate the sum of Source.Value1 and Source.Value2 properties.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Source\n{\n\tpublic int Value1 { get; set; }\n\tpublic int Value2 { get; set; }\n}\n\npublic class Destination\n{\n\tpublic int Total { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Profile Class in AutoMapper\nDESCRIPTION: Demonstrates how to organize mapping configurations using a Profile class. The example shows the current approach of putting configuration in the constructor, which replaced the Configure method from version 4.x.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n// This is the approach starting with version 5\npublic class OrganizationProfile : Profile\n{\n\tpublic OrganizationProfile()\n\t{\n\t\tCreateMap<Foo, FooDto>();\n\t\t// Use CreateMap... Etc.. here (Profile methods are the same as configuration methods)\n\t}\n}\n\n// How it was done in 4.x - as of 5.0 this is obsolete:\n// public class OrganizationProfile : Profile\n// {\n//     protected override void Configure()\n//     {\n//         CreateMap<Foo, FooDto>();\n//     }\n// }\n```\n\n----------------------------------------\n\nTITLE: Mapping from Dictionary to Objects with Dot Notation in C#\nDESCRIPTION: This snippet demonstrates how to map from a Dictionary<string, object> to an object using AutoMapper. It shows how to use dot notation in dictionary keys to map to nested child objects within the destination type.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Dynamic-and-ExpandoObject-Mapping.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar result = mapper.Map<Foo>(new Dictionary<string, object> { [\"InnerFoo.Bar\"] = 42 });\nresult.InnerFoo.Bar.ShouldEqual(42);\n```\n\n----------------------------------------\n\nTITLE: Using AutoMapper with Dynamic Service Location\nDESCRIPTION: Shows how to use AutoMapper with dynamic service location, which is useful for instance-based containers including child/nested containers. This allows for more flexible dependency injection scenarios.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Dependency-injection.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nvar mapper = new Mapper(configuration, childContainer.GetInstance);\n\nvar dest = mapper.Map<Source, Destination>(new Source { Value = 15 });\n```\n\n----------------------------------------\n\nTITLE: Consolidating ConstructProjectionUsing with ConstructUsing in C#\nDESCRIPTION: Shows the consolidation of ConstructProjectionUsing method with ConstructUsing in AutoMapper 8.0. The new ConstructUsing method now uses Expression<Func<TSource, TDestination>> for both in-memory mapping and LINQ projections.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/8.0-Upgrade-Guide.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\n// IMappingExpression<TSource, TDestination>\n\n// Old\nIMappingExpression<TSource, TDestination> ConstructUsing(Func<TSource, TDestination> ctor);\nIMappingExpression<TSource, TDestination> ConstructUsing(Func<TSource, ResolutionContext, TDestination> ctor);\nIMappingExpression<TSource, TDestination> ConstructProjectionUsing(Expression<Func<TSource, TDestination>> ctorExpression);\n\n// New\nIMappingExpression<TSource, TDestination> ConstructUsing(Expression<Func<TSource, TDestination>> ctor);\nIMappingExpression<TSource, TDestination> ConstructUsing(Func<TSource, ResolutionContext, TDestination> ctor);\n\n// IMappingExpression\n\n// Old\nIMappingExpression ConstructUsing(Func<object, object> ctor);\nIMappingExpression ConstructUsing(Func<object, ResolutionContext, object> ctor);\nIMappingExpression ConstructProjectionUsing(LambdaExpression ctorExpression);\n\n// New\nIMappingExpression ConstructUsing(Expression<Func<object, object>> ctor);\nIMappingExpression ConstructUsing(Func<object, ResolutionContext, object> ctor);\n```\n\n----------------------------------------\n\nTITLE: Custom Constructor Parameter Mapping in AutoMapper\nDESCRIPTION: Demonstrates how to map source properties to differently named constructor parameters using ForCtorParam configuration.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Construction.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class Source {\n    public int Value { get; set; }\n}\npublic class SourceDto {\n    public SourceDto(int valueParamSomeOtherName) {\n        _value = valueParamSomeOtherName;\n    }\n    private int _value;\n    public int Value {\n        get { return _value; }\n    }\n}\nvar configuration = new MapperConfiguration(cfg =>\n  cfg.CreateMap<Source, SourceDto>()\n    .ForCtorParam(\"valueParamSomeOtherName\", opt => opt.MapFrom(src => src.Value))\n);\n```\n\n----------------------------------------\n\nTITLE: Using PreCondition in AutoMapper Mapping\nDESCRIPTION: Example demonstrating how to use PreCondition for early validation before value resolution, useful for optimizing expensive mapping operations.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Conditional-mapping.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n  cfg.CreateMap<Foo,Bar>()\n    .ForMember(dest => dest.baz, opt => {\n        opt.PreCondition(src => (src.baz >= 0));\n        opt.MapFrom(src => {\n            // Expensive resolution process that can be avoided with a PreCondition\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Bidirectional Mapping with ReverseMap in C#\nDESCRIPTION: Configures AutoMapper to map from Order to OrderDto and back using ReverseMap, which enables unflattening behavior automatically.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Reverse-Mapping-and-Unflattening.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n  cfg.CreateMap<Order, OrderDto>()\n     .ReverseMap();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Value Transformer in AutoMapper (C#)\nDESCRIPTION: This snippet demonstrates how to set up a global value transformer for string types in AutoMapper. It adds '!!!' to the end of each string value during mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Value-transformers.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n    cfg.ValueTransformers.Add<string>(val => val + \"!!!\");\n});\n\nvar source = new Source { Value = \"Hello\" };\nvar dest = mapper.Map<Dest>(source);\n\ndest.Value.ShouldBe(\"Hello!!!\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper for Custom Projection in C#\nDESCRIPTION: This snippet demonstrates how to configure AutoMapper for custom projection from CalendarEvent to CalendarEventForm. It includes creating a source object, setting up AutoMapper configuration with custom member mappings, performing the mapping, and asserting the results.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Projection.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n// Model\nvar calendarEvent = new CalendarEvent\n{\n\tDate = new DateTime(2008, 12, 15, 20, 30, 0),\n\tTitle = \"Company Holiday Party\"\n};\n\n// Configure AutoMapper\nvar configuration = new MapperConfiguration(cfg =>\n  cfg.CreateMap<CalendarEvent, CalendarEventForm>()\n\t.ForMember(dest => dest.EventDate, opt => opt.MapFrom(src => src.Date.Date))\n\t.ForMember(dest => dest.EventHour, opt => opt.MapFrom(src => src.Date.Hour))\n\t.ForMember(dest => dest.EventMinute, opt => opt.MapFrom(src => src.Date.Minute)));\n\n// Perform mapping\nCalendarEventForm form = mapper.Map<CalendarEvent, CalendarEventForm>(calendarEvent);\n\nform.EventDate.ShouldEqual(new DateTime(2008, 12, 15));\nform.EventHour.ShouldEqual(20);\nform.EventMinute.ShouldEqual(30);\nform.Title.ShouldEqual(\"Company Holiday Party\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper to search for attribute maps in C#\nDESCRIPTION: Demonstrates how to set up AutoMapper to find and use attribute-based mappings by using the AddMaps method to scan assemblies.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Attribute-mapping.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => cfg.AddMaps(\"MyAssembly\"));\n\nvar mapper = new Mapper(configuration);\n```\n\n----------------------------------------\n\nTITLE: Recognizing Prefixes in Member Names with AutoMapper\nDESCRIPTION: Demonstrates how to recognize common prefixes in property names to avoid creating custom member mappings. This example recognizes and removes the 'frm' prefix when mapping properties.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n    cfg.RecognizePrefixes(\"frm\");\n    cfg.CreateMap<Source, Dest>();\n});\nconfiguration.AssertConfigurationIsValid();\n```\n\n----------------------------------------\n\nTITLE: Using Filtered Collection Mapping in C#\nDESCRIPTION: Example of mapping a filtered collection within a projection, avoiding the need for explicit eager loading (Include) while still preventing SELECT N+1 problems.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nCreateProjection<Entity, Dto>().ForMember(d => d.Collection, o => o.MapFrom(s => s.Collection.Where(i => ...));\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper to Allow Null Collections in C#\nDESCRIPTION: Shows how to configure AutoMapper to allow null collections rather than mapping to empty collections. By default, AutoMapper maps null collections to empty collections, but this behavior can be changed globally.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Lists-and-arrays.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n    cfg.AllowNullCollections = true;\n    cfg.CreateMap<Source, Destination>();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor Selection in AutoMapper\nDESCRIPTION: Demonstrates how to configure which constructors AutoMapper should consider when mapping, such as limiting to public constructors only.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Construction.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\n// use only public constructors\nvar configuration = new MapperConfiguration(cfg => cfg.ShouldUseConstructor = constructor => constructor.IsPublic);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Value Resolver\nDESCRIPTION: Example implementation of IValueResolver that adds two source properties together to calculate a destination property value. This resolver computes the Total property as the sum of Value1 and Value2.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic class CustomResolver : IValueResolver<Source, Destination, int>\n{\n\tpublic int Resolve(Source source, Destination destination, int member, ResolutionContext context)\n\t{\n        return source.Value1 + source.Value2;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Member List Validation\nDESCRIPTION: Shows how to specify which member list to validate against and how to disable validation for specific mappings.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration-validation.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n  cfg.CreateMap<Source, Destination>(MemberList.Source);\n  cfg.CreateMap<Source2, Destination2>(MemberList.None);\n);\n```\n\n----------------------------------------\n\nTITLE: ITypeConverter Interface Definition in AutoMapper\nDESCRIPTION: Shows the interface definition for implementing custom type converters in AutoMapper, which requires a Convert method with source, destination, and context parameters.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-type-converters.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic interface ITypeConverter<in TSource, TDestination>\n{\n\tTDestination Convert(TSource source, TDestination destination, ResolutionContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Simple Expression between Types in AutoMapper with C#\nDESCRIPTION: Example of translating a simple boolean expression from OrderLineDTO to OrderLine. The expression dto.Item.StartsWith(\"A\") is translated to ol.Item.Name.StartsWith(\"A\").\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Expression-Translation-(UseAsDataSource).md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nExpression<Func<OrderLineDTO, bool>> dtoExpression = dto=> dto.Item.StartsWith(\"A\");\nvar expression = mapper.Map<Expression<Func<OrderLine, bool>>>(dtoExpression);\n```\n\n----------------------------------------\n\nTITLE: Passing Key-Value Data to Mapper at Runtime\nDESCRIPTION: Example showing how to pass additional data to the mapping operation at runtime using the Items collection, and accessing it in a custom resolver. This allows for contextual mapping operations.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\nmapper.Map<Source, Dest>(src, opt => opt.Items[\"Foo\"] = \"Bar\");\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Source Model Classes in C#\nDESCRIPTION: Complex object model definition with Order, Product, OrderLineItem and Customer classes showing relationships and business logic.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Flattening.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Order\n{\n\tprivate readonly IList<OrderLineItem> _orderLineItems = new List<OrderLineItem>();\n\n\tpublic Customer Customer { get; set; }\n\n\tpublic OrderLineItem[] GetOrderLineItems()\n\t{\n\t\treturn _orderLineItems.ToArray();\n\t}\n\n\tpublic void AddOrderLineItem(Product product, int quantity)\n\t{\n\t\t_orderLineItems.Add(new OrderLineItem(product, quantity));\n\t}\n\n\tpublic decimal GetTotal()\n\t{\n\t\treturn _orderLineItems.Sum(li => li.GetTotal());\n\t}\n}\n\npublic class Product\n{\n\tpublic decimal Price { get; set; }\n\tpublic string Name { get; set; }\n}\n\npublic class OrderLineItem\n{\n\tpublic OrderLineItem(Product product, int quantity)\n\t{\n\t\tProduct = product;\n\t\tQuantity = quantity;\n\t}\n\n\tpublic Product Product { get; private set; }\n\tpublic int Quantity { get; private set;}\n\n\tpublic decimal GetTotal()\n\t{\n\t\treturn Quantity*Product.Price;\n\t}\n}\n\npublic class Customer\n{\n\tpublic string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Characters in Member Names with AutoMapper\nDESCRIPTION: Shows how to replace individual characters or words in source member names during member matching. This is useful for handling special characters or language-specific translations in property names.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(c =>\n{\n    c.ReplaceMemberName(\"Ä\", \"A\");\n    c.ReplaceMemberName(\"í\", \"i\");\n    c.ReplaceMemberName(\"Airlina\", \"Airline\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper with Dependency Injection in ASP.NET Core\nDESCRIPTION: Shows how to register AutoMapper with the ASP.NET Core dependency injection container. This setup enables the use of dependency-injected IMappingAction implementations.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Before-and-after-map-actions.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddAutoMapper(typeof(Startup).Assembly);\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Mapping to Use Context Items\nDESCRIPTION: Configuration example for using the context Items data in a mapping operation. This shows how to access the runtime data passed to the mapper from within a resolver function.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateMap<Source, Dest>()\n    .ForMember(dest => dest.Foo, opt => opt.MapFrom((src, dest, destMember, context) => context.Items[\"Foo\"]));\n```\n\n----------------------------------------\n\nTITLE: Setting Naming Conventions in AutoMapper\nDESCRIPTION: Shows how to configure source and destination member naming conventions globally. This example maps properties from lower underscore convention to Pascal case convention.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n  cfg.SourceMemberNamingConvention = LowerUnderscoreNamingConvention.Instance;\n  cfg.DestinationMemberNamingConvention = PascalCaseNamingConvention.Instance;\n});\n```\n\n----------------------------------------\n\nTITLE: Safe Custom Mapping with Null Checks\nDESCRIPTION: Example showing how to safely handle possible null values in custom mapping expressions by adding null checking logic to prevent exceptions during the resolution phase.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\n\t.ForMember(d => d.ValueLength, o => o.MapFrom(s => s != null ? s.Value.Length : 0))\n```\n\n----------------------------------------\n\nTITLE: Available Type Converter Registration Methods in AutoMapper\nDESCRIPTION: Shows the three different methods available for registering custom type converters in AutoMapper configuration.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-type-converters.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvoid ConvertUsing(Func<TSource, TDestination> mappingFunction);\nvoid ConvertUsing(ITypeConverter<TSource, TDestination> converter);\nvoid ConvertUsing<TTypeConverter>() where TTypeConverter : ITypeConverter<TSource, TDestination>;\n```\n\n----------------------------------------\n\nTITLE: Clearing and Setting Custom Prefixes in AutoMapper\nDESCRIPTION: Shows how to clear the default recognized prefix 'Get' and set a custom prefix 'tmp' for AutoMapper to recognize during property mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n    cfg.ClearPrefixes();\n    cfg.RecognizePrefixes(\"tmp\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Parameter Open Generic Type Converters in AutoMapper\nDESCRIPTION: Shows how to use open generic type converters with multiple generic type parameters. AutoMapper will fill the generic parameters with the source and destination types.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Open-Generics.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n   cfg.CreateMap(typeof(Source<>), typeof(Destination<>)).ConvertUsing(typeof(Converter<,>)));\n```\n\n----------------------------------------\n\nTITLE: Including All Derived Types\nDESCRIPTION: Demonstrates using IncludeAllDerived to automatically include all derived type mappings.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Mapping-inheritance.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nCreateMap<BaseEntity, BaseDto>()\n    .IncludeAllDerived();\n\nCreateMap<DerivedEntity, DerivedDto>();\n```\n\n----------------------------------------\n\nTITLE: Disabling Unflattening with Ignore in C#\nDESCRIPTION: Demonstrates how to disable unflattening for specific properties by using the Ignore method in the reverse mapping configuration. This prevents CustomerName from updating Customer.Name during reverse mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Reverse-Mapping-and-Unflattening.md#2025-04-16_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateMap<Order, OrderDto>()\n  .ForMember(d => d.CustomerName, opt => opt.MapFrom(src => src.Customer.Name))\n  .ReverseMap()\n  .ForPath(s => s.Customer.Name, opt => opt.Ignore());\n```\n\n----------------------------------------\n\nTITLE: Filtering Properties and Fields in AutoMapper\nDESCRIPTION: Shows how to filter which properties and fields AutoMapper will map. This example configures AutoMapper to ignore all fields and only map properties with public or private getters.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n{\n\t// don't map any fields\n\tcfg.ShouldMapField = fi => false;\n\n\t// map properties with a public or private getter\n\tcfg.ShouldMapProperty = pi =>\n\t\tpi.GetMethod != null && (pi.GetMethod.IsPublic || pi.GetMethod.IsPrivate);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Constructor Usage in Projection with ConstructUsing in C#\nDESCRIPTION: Example of customizing how destination objects are constructed during projection using the ConstructUsing method with an expression.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateProjection<Source, Dest>()\n    .ConstructUsing(src => new Dest(src.Value + 10));\n```\n\n----------------------------------------\n\nTITLE: Declaring an attribute-based map in C#\nDESCRIPTION: Shows how to decorate a destination class with the AutoMapAttribute to create a mapping from a source type, equivalent to CreateMap<TSource, TDestination>().\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Attribute-mapping.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\n[AutoMap(typeof(Order))]\npublic class OrderDto {\n    // destination members\n```\n\n----------------------------------------\n\nTITLE: Implementing IncludeMembers Feature in C#\nDESCRIPTION: Example demonstrating the IncludeMembers feature for more controlled flattening with multiple source objects.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Flattening.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nclass Source\n{\n    public string Name { get; set; }\n    public InnerSource InnerSource { get; set; }\n    public OtherInnerSource OtherInnerSource { get; set; }\n}\nclass InnerSource\n{\n    public string Name { get; set; }\n    public string Description { get; set; }\n}\nclass OtherInnerSource\n{\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public string Title { get; set; }\n}\nclass Destination\n{\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public string Title { get; set; }\n}\n\ncfg.CreateMap<Source, Destination>().IncludeMembers(s=>s.InnerSource, s=>s.OtherInnerSource);\ncfg.CreateMap<InnerSource, Destination>(MemberList.None);\ncfg.CreateMap<OtherInnerSource, Destination>();\n\nvar source = new Source { Name = \"name\", InnerSource = new InnerSource{ Description = \"description\" }, \n                          OtherInnerSource = new OtherInnerSource{ Title = \"title\" } };\nvar destination = mapper.Map<Destination>(source);\ndestination.Name.ShouldBe(\"name\");\ndestination.Description.ShouldBe(\"description\");\ndestination.Title.ShouldBe(\"title\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Before and After Map Actions in AutoMapper\nDESCRIPTION: Demonstrates how to set up global before and after map actions directly in the mapper configuration. The example shows adding a value to the source and setting a property on the destination.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Before-and-after-map-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n  cfg.CreateMap<Source, Dest>()\n    .BeforeMap((src, dest) => src.Value = src.Value + 10)\n    .AfterMap((src, dest) => dest.Name = \"John\");\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting ProjectTo Expression in C#\nDESCRIPTION: This code shows how to access the underlying Expression of a ProjectTo query. This is necessary when you need to analyze the projection logic in more detail.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Understanding-your-mapping.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar expression = context.Entities.ProjectTo<Dto>().Expression;\n```\n\n----------------------------------------\n\nTITLE: Creating Open Generic Type Maps in AutoMapper\nDESCRIPTION: Demonstrates how to create a basic mapping between open generic types in AutoMapper. The example shows mapping from Source<T> to Destination<T> where both classes have a Value property of type T.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Open-Generics.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Source<T> {\n    public T Value { get; set; }\n}\n\npublic class Destination<T> {\n    public T Value { get; set; }\n}\n\n// Create the mapping\nvar configuration = new MapperConfiguration(cfg => cfg.CreateMap(typeof(Source<>), typeof(Destination<>)));\n```\n\n----------------------------------------\n\nTITLE: Using OnEnumerated Callback with UseAsDataSource in AutoMapper C#\nDESCRIPTION: Example of registering a callback function that executes when a mapped query is enumerated, allowing post-processing of the results while maintaining the expression translation benefits.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Expression-Translation-(UseAsDataSource).md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n    cfg.CreateMap<OrderLine, OrderLineDTO>()\n    .ForMember(dto => dto.Item, conf => conf.MapFrom(ol => ol.Item.Name)));\n\npublic IQueryable<OrderLineDTO> GetLinesForOrder(int orderId)\n{\n  using (var context = new orderEntities())\n  {\n    return context.OrderLines.Where(ol => ol.OrderId == orderId)\n             .UseAsDataSource()\n             .For<OrderLineDTO>()\n             .OnEnumerated((dtos) =>\n             {\n                foreach(var dto in dtosCast<OrderLineDTO>())\n                {\n                     // edit some property, or load additional data from the database and augment the dtos\n                }\n             }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Member Visibility in AutoMapper\nDESCRIPTION: Demonstrates how to configure AutoMapper to recognize members with different visibility levels. This example enables mapping of properties with public or internal getters.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n{\n    // map properties with public or internal getters\n    cfg.ShouldMapProperty = p => p.GetMethod.IsPublic || p.GetMethod.IsAssembly;\n    cfg.CreateMap<Source, Destination>();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing and Configuring CurrencyFormatter Value Converter in C#\nDESCRIPTION: This snippet demonstrates how to create a CurrencyFormatter class implementing IValueConverter interface and configure it in AutoMapper for converting decimal values to formatted currency strings.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Value-converters.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class CurrencyFormatter : IValueConverter<decimal, string> {\n    public string Convert(decimal source, ResolutionContext context)\n        => source.ToString(\"c\");\n}\n\nvar configuration = new MapperConfiguration(cfg => {\n   cfg.CreateMap<Order, OrderDto>()\n       .ForMember(d => d.Amount, opt => opt.ConvertUsing(new CurrencyFormatter()));\n   cfg.CreateMap<OrderLineItem, OrderLineItemDto>()\n       .ForMember(d => d.Total, opt => opt.ConvertUsing(new CurrencyFormatter()));\n});\n```\n\n----------------------------------------\n\nTITLE: Consolidating ProjectUsing with ConvertUsing in C#\nDESCRIPTION: Demonstrates the consolidation of ProjectUsing method with ConvertUsing in AutoMapper 8.0. The new ConvertUsing method now uses Expression<Func<TSource, TDestination>> for both in-memory mapping and LINQ projections.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/8.0-Upgrade-Guide.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\n// IMappingExpression\n\n// Old\nvoid ConvertUsing(Func<TSource, TDestination> mappingFunction);\nvoid ProjectUsing(Expression<Func<TSource, TDestination>> mappingExpression);\n\n// New\nvoid ConvertUsing(Expression<Func<TSource, TDestination>> mappingExpression);\n```\n\n----------------------------------------\n\nTITLE: Setting Profile-Specific Naming Conventions in AutoMapper\nDESCRIPTION: Demonstrates how to set naming conventions at the profile level instead of globally. This applies the naming conventions only to maps created within this specific profile.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\npublic class OrganizationProfile : Profile\n{\n  public OrganizationProfile()\n  {\n    SourceMemberNamingConvention = LowerUnderscoreNamingConvention.Instance;\n    DestinationMemberNamingConvention = PascalCaseNamingConvention.Instance;\n    //Put your CreateMap... Etc.. here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Between Dynamic Objects and Concrete Types in C#\nDESCRIPTION: This example demonstrates mapping between a dynamic object and a concrete Foo class with AutoMapper. It shows bidirectional mapping capability without requiring explicit configuration, maintaining property values during conversion.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Dynamic-and-ExpandoObject-Mapping.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Foo {\n    public int Bar { get; set; }\n    public int Baz { get; set; }\n    public Foo InnerFoo { get; set; }\n}\ndynamic foo = new MyDynamicObject();\nfoo.Bar = 5;\nfoo.Baz = 6;\n\nvar configuration = new MapperConfiguration(cfg => {});\n\nvar result = mapper.Map<Foo>(foo);\nresult.Bar.ShouldEqual(5);\nresult.Baz.ShouldEqual(6);\n\ndynamic foo2 = mapper.Map<MyDynamicObject>(result);\nfoo2.Bar.ShouldEqual(5);\nfoo2.Baz.ShouldEqual(6);\n```\n\n----------------------------------------\n\nTITLE: Inheritance Mapping with IncludeBase\nDESCRIPTION: Shows how to configure mapping inheritance using the IncludeBase method in derived type configuration.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Mapping-inheritance.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nCreateMap<BaseEntity, BaseDto>()\n   .ForMember(dest => dest.SomeMember, opt => opt.MapFrom(src => src.OtherMember));\n\nCreateMap<DerivedEntity, DerivedDto>()\n    .IncludeBase<BaseEntity, BaseDto>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Converter with Custom Source Member in C#\nDESCRIPTION: This example shows how to configure a Value Converter in AutoMapper while specifying a custom source member when the source member name does not match the destination member.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Value-converters.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class CurrencyFormatter : IValueConverter<decimal, string> {\n    public string Convert(decimal source, ResolutionContext context)\n        => source.ToString(\"c\");\n}\n\nvar configuration = new MapperConfiguration(cfg => {\n   cfg.CreateMap<Order, OrderDto>()\n       .ForMember(d => d.Amount, opt => opt.ConvertUsing(new CurrencyFormatter(), src => src.OrderAmount));\n   cfg.CreateMap<OrderLineItem, OrderLineItemDto>()\n       .ForMember(d => d.Total, opt => opt.ConvertUsing(new CurrencyFormatter(), src => src.LITotal));\n});\n```\n\n----------------------------------------\n\nTITLE: Collection Mapping with AutoMapper\nDESCRIPTION: When mapping into existing collections, use writable collection types like List<>, HashSet<>, ICollection<>, IList<> or IList instead of readonly collections like IEnumerable<>.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/11.0-Upgrade-Guide.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Use writable collections\nList<T>\nHashSet<T>\nICollection<T>\nIList<T>\nIList\n```\n\n----------------------------------------\n\nTITLE: Building AutoMapper Execution Plan in C#\nDESCRIPTION: This snippet demonstrates how to create a MapperConfiguration and build an execution plan for mapping between two types. It's useful for debugging and understanding the mapping process.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Understanding-your-mapping.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => cfg.CreateMap<Foo, Bar>());\nvar executionPlan = configuration.BuildExecutionPlan(typeof(Foo), typeof(Bar));\n```\n\n----------------------------------------\n\nTITLE: Injecting IMapper in ASP.NET Core Controllers\nDESCRIPTION: Shows how to inject and use the IMapper interface in an ASP.NET Core controller. This allows for dependency injection of AutoMapper's mapping capabilities.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Dependency-injection.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class EmployeesController {\n\tprivate readonly IMapper _mapper;\n\n\tpublic EmployeesController(IMapper mapper) => _mapper = mapper;\n\n\t// use _mapper.Map or _mapper.ProjectTo\n}\n```\n\n----------------------------------------\n\nTITLE: Using Closed Generic Types with AutoMapper\nDESCRIPTION: Shows how to use a closed generic type with an open generic mapping at runtime. AutoMapper applies the open generic type configuration to closed generic types automatically.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Open-Generics.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar source = new Source<int> { Value = 10 };\n\nvar dest = mapper.Map<Source<int>, Destination<int>>(source);\n\ndest.Value.ShouldEqual(10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Translation in AutoMapper with C#\nDESCRIPTION: Configuration setup for AutoMapper expression mapping with sample classes OrderLine, Item, and OrderLineDTO. This demonstrates setting up bidirectional mapping between these types and enabling expression translation.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Expression-Translation-(UseAsDataSource).md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class OrderLine\n{\n  public int Id { get; set; }\n  public int OrderId { get; set; }\n  public Item Item { get; set; }\n  public decimal Quantity { get; set; }\n}\n\npublic class Item\n{\n  public int Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class OrderLineDTO\n{\n  public int Id { get; set; }\n  public int OrderId { get; set; }\n  public string Item { get; set; }\n  public decimal Quantity { get; set; }\n}\n\nvar configuration = new MapperConfiguration(cfg =>\n{\n  cfg.AddExpressionMapping();\n  \n  cfg.CreateMap<OrderLine, OrderLineDTO>()\n    .ForMember(dto => dto.Item, conf => conf.MapFrom(ol => ol.Item.Name));\n  cfg.CreateMap<OrderLineDTO, OrderLine>()\n    .ForMember(ol => ol.Item, conf => conf.MapFrom(dto => dto));\n  cfg.CreateMap<OrderLineDTO, Item>()\n    .ForMember(i => i.Name, conf => conf.MapFrom(dto => dto.Item));\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Type Converter Implementation Example in AutoMapper\nDESCRIPTION: Demonstrates a complete example with all three converter registration approaches and two custom type converter implementations, along with a test case verifying the conversions work correctly.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-type-converters.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\n[Test]\npublic void Example()\n{\n    var configuration = new MapperConfiguration(cfg => {\n      cfg.CreateMap<string, int>().ConvertUsing(s => Convert.ToInt32(s));\n      cfg.CreateMap<string, DateTime>().ConvertUsing(new DateTimeTypeConverter());\n      cfg.CreateMap<string, Type>().ConvertUsing<TypeTypeConverter>();\n      cfg.CreateMap<Source, Destination>();\n    });\n    configuration.AssertConfigurationIsValid();\n\n    var source = new Source\n    {\n        Value1 = \"5\",\n        Value2 = \"01/01/2000\",\n        Value3 = \"AutoMapperSamples.GlobalTypeConverters.GlobalTypeConverters+Destination\"\n    };\n\n    Destination result = mapper.Map<Source, Destination>(source);\n    result.Value3.ShouldEqual(typeof(Destination));\n}\n\npublic class DateTimeTypeConverter : ITypeConverter<string, DateTime>\n{\n    public DateTime Convert(string source, DateTime destination, ResolutionContext context)\n    {\n        return System.Convert.ToDateTime(source);\n    }\n}\n\npublic class TypeTypeConverter : ITypeConverter<string, Type>\n{\n    public Type Convert(string source, Type destination, ResolutionContext context)\n    {\n          return Assembly.GetExecutingAssembly().GetType(source);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Circular References in AutoMapper\nDESCRIPTION: Examples of handling circular references using MaxDepth and PreserveReferences configuration options to prevent stack overflow exceptions.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/5.0-Upgrade-Guide.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\n// Self-referential mapping\ncfg.CreateMap<Category, CategoryDto>().MaxDepth(3);\n\n// Circular references between users and groups\ncfg.CreateMap<User, UserDto>().PreserveReferences();\n```\n\n----------------------------------------\n\nTITLE: Basic Constructor Mapping in AutoMapper\nDESCRIPTION: Shows basic constructor mapping where source property names match destination constructor parameter names.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Construction.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Source {\n    public int Value { get; set; }\n}\npublic class SourceDto {\n    public SourceDto(int value) {\n        _value = value;\n    }\n    private int _value;\n    public int Value {\n        get { return _value; }\n    }\n}\nvar configuration = new MapperConfiguration(cfg => cfg.CreateMap<Source, SourceDto>());\n```\n\n----------------------------------------\n\nTITLE: Compiling Mappings Explicitly in AutoMapper\nDESCRIPTION: Shows how to explicitly compile the type map plans instead of letting AutoMapper lazily compile them on first use. This can be useful for improving performance on application startup.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration.md#2025-04-16_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {});\nconfiguration.CompileMappings();\n```\n\n----------------------------------------\n\nTITLE: Using MapExpressionAsInclude for Entity Framework Include Statements in C#\nDESCRIPTION: Example of mapping an Include expression from a model to its data entity counterpart, allowing navigation properties to be included in queries based on the view model structure.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Expression-Translation-(UseAsDataSource).md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nExpression<Func<IQueryable<CourseModel>, IIncludableQueryable<CourseModel, object>>> exp = i => i.Include(s => s.DepartmentName);\nExpression<Func<IQueryable<Course>, IIncludableQueryable<Course, object>>> expMapped = mapper.MapExpressionAsInclude<Expression<Func<IQueryable<Course>, IIncludableQueryable<Course, object>>>>(exp);\n```\n\n----------------------------------------\n\nTITLE: Defining OrderLineDTO Class in C#\nDESCRIPTION: DTO (Data Transfer Object) class definition for OrderLine that represents the simplified view needed by the application layer, with Item represented as a string rather than an object.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class OrderLineDTO\n{\n  public int Id { get; set; }\n  public int OrderId { get; set; }\n  public string Item { get; set; }\n  public decimal Quantity { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Type Conversion with ConvertUsing in C#\nDESCRIPTION: Example of using ConvertUsing to completely replace a type conversion from source to destination type within a LINQ projection.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateProjection<Source, Dest>().ConvertUsing(src => new Dest { Value = 10 });\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection with IMappingAction in AutoMapper\nDESCRIPTION: Shows how to implement dependency injection with IMappingAction classes. The example demonstrates injecting HttpContextAccessor to access the current HttpContext during mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Before-and-after-map-actions.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SetTraceIdentifierAction : IMappingAction<SomeModel, SomeOtherModel>\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public SetTraceIdentifierAction(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));\n    }\n\n    public void Process(SomeModel source, SomeOtherModel destination, ResolutionContext context)\n    {\n        destination.TraceIdentifier = _httpContextAccessor.HttpContext.TraceIdentifier;\n    }\n}\n\npublic class SomeProfile : Profile\n{\n    public SomeProfile()\n    {\n        CreateMap<SomeModel, SomeOtherModel>()\n            .AfterMap<SetTraceIdentifierAction>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Collection Expressions in AutoMapper with C#\nDESCRIPTION: Example of mapping an expression that works on IQueryable collections, transforming operations like Where and OrderBy from OrderLineDTO to OrderLine queries.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Expression-Translation-(UseAsDataSource).md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nExpression<Func<IQueryable<OrderLineDTO>,IQueryable<OrderLineDTO>>> dtoExpression = dtos => dtos.Where(dto => dto.Quantity > 5).OrderBy(dto => dto.Quantity);\nvar expression = mapper.Map<Expression<Func<IQueryable<OrderLine>,IQueryable<OrderLine>>>(dtoExpression);\n```\n\n----------------------------------------\n\nTITLE: Runtime Polymorphic Mapping Example\nDESCRIPTION: Complete example showing runtime polymorphic mapping with inheritance hierarchy.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Mapping-inheritance.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic class Order { }\npublic class OnlineOrder : Order { }\npublic class MailOrder : Order { }\n\npublic class OrderDto { }\npublic class OnlineOrderDto : OrderDto { }\npublic class MailOrderDto : OrderDto { }\n\nvar configuration = new MapperConfiguration(cfg => {\n    cfg.CreateMap<Order, OrderDto>()\n        .Include<OnlineOrder, OnlineOrderDto>()\n        .Include<MailOrder, MailOrderDto>();\n    cfg.CreateMap<OnlineOrder, OnlineOrderDto>();\n    cfg.CreateMap<MailOrder, MailOrderDto>();\n});\n\n// Perform Mapping\nvar order = new OnlineOrder();\nvar mapped = mapper.Map(order, order.GetType(), typeof(OrderDto));\nAssert.IsType<OnlineOrderDto>(mapped);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Mapping in AutoMapper\nDESCRIPTION: Configuration example showing how to set up a conditional mapping that only executes when the source value is non-negative.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Conditional-mapping.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n  cfg.CreateMap<Foo,Bar>()\n    .ForMember(dest => dest.baz, opt => opt.Condition(src => (src.baz >= 0)));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Classes for OrderLine and Item in C#\nDESCRIPTION: Entity class definitions for OrderLine with a relationship to Item entity, representing the database structure that will be queried with an ORM.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class OrderLine\n{\n  public int Id { get; set; }\n  public int OrderId { get; set; }\n  public Item Item { get; set; }\n  public decimal Quantity { get; set; }\n}\n\npublic class Item\n{\n  public int Id { get; set; }\n  public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Flattened Properties to Navigation Properties in AutoMapper with C#\nDESCRIPTION: This example demonstrates how to map flattened model properties (CourseModel.DepartmentName) to their corresponding navigation properties (Course.Department) in expressions for Entity Framework Include statements.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Expression-Translation-(UseAsDataSource).md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic class CourseModel\n{\n    public int CourseID { get; set; }\n\n    public int DepartmentID { get; set; }\n    public string DepartmentName { get; set; }\n}\npublic class Course\n{\n    public int CourseID { get; set; }\n\n    public int DepartmentID { get; set; }\n    public Department Department { get; set; }\n}\n\npublic class Department\n{\n    public int DepartmentID { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming ForSourceMember Ignore to DoNotValidate in C#\nDESCRIPTION: Shows the renaming of ISourceMemberConfigurationExpression.Ignore to DoNotValidate in AutoMapper 8.0. This change clarifies that it only applies when validating source members with MemberList.Source.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/8.0-Upgrade-Guide.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\n// Old\ncfg.CreateMap<Source, Dest>()\n    .ForSourceMember(source => source.Date, opt => opt.Ignore());\n\n// New\ncfg.CreateMap<Source, Dest>()\n    .ForSourceMember(source => source.Date, opt => opt.DoNotValidate());\n```\n\n----------------------------------------\n\nTITLE: Ignoring members with IgnoreAttribute in C#\nDESCRIPTION: Demonstrates how to use the IgnoreAttribute to exclude specific destination members from being mapped or validated.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Attribute-mapping.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nusing AutoMapper.Configuration.Annotations;\n\n[AutoMap(typeof(Order))]\npublic class OrderDto {\n    [Ignore]\n    public decimal Total { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Customizing Unflattening with ForPath in C#\nDESCRIPTION: Shows how to customize the reverse mapping using ForPath when the automatic reverse mapping isn't sufficient. This approach allows explicit control over how properties are mapped in the reverse direction.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Reverse-Mapping-and-Unflattening.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateMap<Order, OrderDto>()\n  .ForMember(d => d.CustomerName, opt => opt.MapFrom(src => src.Customer.Name))\n  .ReverseMap()\n  .ForPath(s => s.Customer.Name, opt => opt.MapFrom(src => src.CustomerName));\n```\n\n----------------------------------------\n\nTITLE: Using ProjectTo with Post-Processing in AutoMapper C#\nDESCRIPTION: Example of using ProjectTo to project database entities to DTOs and then post-process the results. This demonstrates the traditional approach compared to the UseAsDataSource method.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Expression-Translation-(UseAsDataSource).md#2025-04-16_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n    cfg.CreateMap<OrderLine, OrderLineDTO>()\n    .ForMember(dto => dto.Item, conf => conf.MapFrom(ol => ol.Item.Name)));\n\npublic List<OrderLineDTO> GetLinesForOrder(int orderId)\n{\n  using (var context = new orderEntities())\n  {\n    var dtos = context.OrderLines.Where(ol => ol.OrderId == orderId)\n             .ProjectTo<OrderLineDTO>().ToList();\n    foreach(var dto in dtos)\n    {\n        // edit some property, or load additional data from the database and augment the dtos\n    }\n    return dtos;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Destination Properties in AutoMapper\nDESCRIPTION: Demonstrates how to ignore specific destination properties during mapping to resolve configuration validation errors.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration-validation.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n  cfg.CreateMap<Source, Destination>()\n\t.ForMember(dest => dest.SomeValuefff, opt => opt.Ignore())\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Enum Mapping Validation in C#\nDESCRIPTION: Example of how to enable and test enum mapping validation with AutoMapper. This code shows a unit test that validates enum mapping configurations using EnableEnumMappingValidation and AssertConfigurationIsValid methods.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Enum-Mapping.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MappingConfigurationsTests\n{\n    [Fact]\n    public void WhenProfilesAreConfigured_ItShouldNotThrowException()\n    {\n        // Arrange\n        var config = new MapperConfiguration(configuration =>\n        {\n            configuration.EnableEnumMappingValidation();\n\n            configuration.AddMaps(typeof(AssemblyInfo).GetTypeInfo().Assembly);\n        });\n\t\t\n        // Assert\n        config.AssertConfigurationIsValid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing a Custom Resolver Instance\nDESCRIPTION: Configuration example showing how to supply a specific instance of a value resolver instead of having AutoMapper create one via reflection. This is useful when resolvers have constructor parameters or need dependency injection.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => cfg.CreateMap<Source, Destination>()\n\t.ForMember(dest => dest.Total,\n\t\topt => opt.MapFrom(new CustomResolver())\n\t));\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Resolver Interface in AutoMapper\nDESCRIPTION: Demonstrates the new value resolver interface signature that provides access to source/destination models and destination member being configured against.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/5.0-Upgrade-Guide.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic interface IValueResolver<in TSource, in TDestination, TDestMember>\n{\n    TDestMember Resolve(TSource source, TDestination destination, TDestMember destMember, ResolutionContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Gathering AutoMapper Configuration Before Initialization in C#\nDESCRIPTION: Shows how to separate configuration gathering from initialization using MapperConfigurationExpression. This approach allows for more flexibility in configuration management.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Setup.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar cfg = new MapperConfigurationExpression();\ncfg.CreateMap<Source, Dest>();\ncfg.AddProfile<MyProfile>();\nMyBootstrapper.InitAutoMapper(cfg);\n\nvar mapperConfig = new MapperConfiguration(cfg);\nIMapper mapper = new Mapper(mapperConfig);\n```\n\n----------------------------------------\n\nTITLE: Disabling Constructor Mapping in AutoMapper\nDESCRIPTION: Shows how to disable constructor mapping completely in AutoMapper configuration.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Construction.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => cfg.DisableConstructorMapping());\n```\n\n----------------------------------------\n\nTITLE: Implementing Member Value Resolver in AutoMapper\nDESCRIPTION: Shows the interface for member value resolver used when configuring ResolveUsing with FromMember, providing access to both source and destination members.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/5.0-Upgrade-Guide.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic interface IMemberValueResolver<in TSource, in TDestination, in TSourceMember, TDestMember>\n{\n    TDestMember Resolve(TSource source, TDestination destination, TSourceMember sourceMember, TDestMember destMember, ResolutionContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Inheritance Mapping with Include\nDESCRIPTION: Demonstrates how to configure mapping inheritance using the Include method to inherit base type configuration.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Mapping-inheritance.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nCreateMap<BaseEntity, BaseDto>()\n   .Include<DerivedEntity, DerivedDto>()\n   .ForMember(dest => dest.SomeMember, opt => opt.MapFrom(src => src.OtherMember));\n\nCreateMap<DerivedEntity, DerivedDto>();\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary for Projection Parameters in C#\nDESCRIPTION: Alternative way to provide parameter values for projections using a dictionary, which should be used with caution as it can result in hard-coded values in the query.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\ndbContext.Courses.ProjectTo<CourseModel>(Config, new Dictionary<string, object> { {\"currentUserName\", Request.User.Name} });\n```\n\n----------------------------------------\n\nTITLE: IValueResolver Interface Definition\nDESCRIPTION: The interface definition that must be implemented to create a custom value resolver in AutoMapper. It includes generic type parameters for source, destination, and destination member types.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic interface IValueResolver<in TSource, in TDestination, TDestMember>\n{\n\tTDestMember Resolve(TSource source, TDestination destination, TDestMember destMember, ResolutionContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Executing Nested Mapping with AutoMapper in C#\nDESCRIPTION: This snippet demonstrates how to configure AutoMapper for nested mapping, create a mapper instance, and execute the mapping. It includes creating map configurations, asserting configuration validity, and performing the actual mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Nested-mappings.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar config = new MapperConfiguration(cfg => {\n    cfg.CreateMap<OuterSource, OuterDest>();\n    cfg.CreateMap<InnerSource, InnerDest>();\n});\nconfig.AssertConfigurationIsValid();\n\nvar source = new OuterSource\n\t{\n\t\tValue = 5,\n\t\tInner = new InnerSource {OtherValue = 15}\n\t};\nvar mapper = config.CreateMapper();\nvar dest = mapper.Map<OuterSource, OuterDest>(source);\n\ndest.Value.ShouldEqual(5);\ndest.Inner.ShouldNotBeNull();\ndest.Inner.OtherValue.ShouldEqual(15);\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Converter with Runtime Types and Members in C#\nDESCRIPTION: This example demonstrates how to configure a Value Converter in AutoMapper using System.Type and string-based members for scenarios where types or member names are not known at compile-time.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Value-converters.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic class CurrencyFormatter : IValueConverter<decimal, string> {\n    public string Convert(decimal source, ResolutionContext context)\n        => source.ToString(\"c\");\n}\n\nvar configuration = new MapperConfiguration(cfg => {\n   cfg.CreateMap(typeof(Order), typeof(OrderDto))\n       .ForMember(\"Amount\", opt => opt.ConvertUsing(new CurrencyFormatter(), \"OrderAmount\"));\n   cfg.CreateMap(typeof(OrderLineItem), typeof(OrderLineItemDto))\n       .ForMember(\"Total\", opt => opt.ConvertUsing(new CurrencyFormatter(), \"LITotal\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Inheritance Configuration in Derived Classes\nDESCRIPTION: Shows how to specify inheritance configuration from derived classes using IncludeBase.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Mapping-inheritance.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\n  cfg.CreateMap<Order, OrderDto>()\n    .ForMember(o => o.Id, m => m.MapFrom(s => s.OrderId));\n  cfg.CreateMap<OnlineOrder, OnlineOrderDto>()\n    .IncludeBase<Order, OrderDto>();\n  cfg.CreateMap<MailOrder, MailOrderDto>()\n    .IncludeBase<Order, OrderDto>();\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Between Various Collection Types in C#\nDESCRIPTION: Demonstrates mapping a Source array to different destination collection types including IEnumerable, ICollection, IList, List, and arrays. AutoMapper only requires configuration of element types, not the collection types themselves.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Lists-and-arrays.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => cfg.CreateMap<Source, Destination>());\n\nvar sources = new[]\n\t{\n\t\tnew Source { Value = 5 },\n\t\tnew Source { Value = 6 },\n\t\tnew Source { Value = 7 }\n\t};\n\nIEnumerable<Destination> ienumerableDest = mapper.Map<Source[], IEnumerable<Destination>>(sources);\nICollection<Destination> icollectionDest = mapper.Map<Source[], ICollection<Destination>>(sources);\nIList<Destination> ilistDest = mapper.Map<Source[], IList<Destination>>(sources);\nList<Destination> listDest = mapper.Map<Source[], List<Destination>>(sources);\nDestination[] arrayDest = mapper.Map<Source[], Destination[]>(sources);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Source and Destination Types in C#\nDESCRIPTION: Simple example of source and destination classes used in AutoMapper collection mapping demonstrations. These basic types contain a single Value property of type int.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Lists-and-arrays.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Source\n{\n\tpublic int Value { get; set; }\n}\n\npublic class Destination\n{\n\tpublic int Value { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using As for Simple Inheritance Mapping\nDESCRIPTION: Demonstrates using the As method for redirecting a base map to an existing derived map.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Mapping-inheritance.md#2025-04-16_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\n    cfg.CreateMap<Order, OnlineOrderDto>();\n    cfg.CreateMap<Order, OrderDto>().As<OnlineOrderDto>();\n    \n    mapper.Map<OrderDto>(new Order()).ShouldBeOfType<OnlineOrderDto>();\n```\n\n----------------------------------------\n\nTITLE: Explicit Expansion in Projections for OData Scenarios in C#\nDESCRIPTION: Examples of using explicit expansion to control which members are expanded during projection, which is useful in scenarios like OData where you need fine-grained control.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\ndbContext.Orders.ProjectTo<OrderDto>(configuration,\n    dest => dest.Customer,\n    dest => dest.LineItems);\n// or string-based\ndbContext.Orders.ProjectTo<OrderDto>(configuration,\n    null,\n    \"Customer\",\n    \"LineItems\");\n// for collections\ndbContext.Orders.ProjectTo<OrderDto>(configuration,\n    null,\n    dest => dest.LineItems.Select(item => item.Product));\n```\n\n----------------------------------------\n\nTITLE: Creating Open Generic Type Converters in AutoMapper\nDESCRIPTION: Demonstrates how to use custom type converters with open generic types in AutoMapper. This example configures an open generic converter for the mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Open-Generics.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n   cfg.CreateMap(typeof(Source<>), typeof(Destination<>)).ConvertUsing(typeof(Converter<>)));\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Converter Interface in AutoMapper\nDESCRIPTION: Shows the simplified type converter interface that accepts source and destination objects and returns the converted destination object.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/5.0-Upgrade-Guide.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\npublic interface ITypeConverter<in TSource, TDestination>\n{\n    TDestination Convert(TSource source, TDestination destination, ResolutionContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Converter Using Type in C#\nDESCRIPTION: This snippet illustrates how to configure a Value Converter in AutoMapper by specifying the converter type, allowing for instantiation by a service locator.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Value-converters.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic class CurrencyFormatter : IValueConverter<decimal, string> {\n    public string Convert(decimal source, ResolutionContext context)\n        => source.ToString(\"c\");\n}\n\nvar configuration = new MapperConfiguration(cfg => {\n   cfg.CreateMap<Order, OrderDto>()\n       .ForMember(d => d.Amount, opt => opt.ConvertUsing<CurrencyFormatter, decimal>());\n   cfg.CreateMap<OrderLineItem, OrderLineItemDto>()\n       .ForMember(d => d.Total, opt => opt.ConvertUsing<CurrencyFormatter, decimal>());\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LINQ Projections with AutoMapper in C#\nDESCRIPTION: Demonstrates how to use AutoMapper's ProjectTo method with LINQ queries in a controller context. Shows dependency injection of MapperConfiguration for IQueryable extensions.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Setup.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic class ProductsController : Controller {\n    public ProductsController(MapperConfiguration config) {\n        this.config = config;\n    }\n    private MapperConfiguration config;\n\n    public ActionResult Index(int id) {\n        var dto = dbContext.Products\n                               .Where(p => p.Id == id)\n                               .ProjectTo<ProductDto>(config)\n                               .SingleOrDefault();\n\n        return View(dto);\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Consolidating ResolveUsing with MapFrom in C#\nDESCRIPTION: Illustrates the consolidation of ResolveUsing method with MapFrom in AutoMapper 8.0. The new MapFrom method now uses Expression<Func<TSource, TDestination>> for both in-memory mapping and LINQ projections.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/8.0-Upgrade-Guide.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n// IMappingExpression\n\n// Old\nvoid ResolveUsing(Func<TSource, TDestination> mappingFunction);\nvoid ResolveUsing(Func<TSource, TDestination, TDestination> mappingFunction);\nvoid ResolveUsing<TResult>(Func<TSource, TDestination, TMember, TResult> mappingFunction);\n// Many, many overloads\nvoid MapFrom(Expression<Func<TSource, TDestination>> mapExpression);\n\n// New\nvoid MapFrom(Expression<Func<TSource, TDestination>> mappingExpression);\nvoid MapFrom<TResult>(Func<TSource, TDestination, TResult> mappingFunction);\nvoid MapFrom<TResult>(Func<TSource, TDestination, TMember, TResult> mappingFunction);\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Value Resolver\nDESCRIPTION: Example of a reusable value resolver that works with any object types by using 'object' as the source and destination type parameters. This resolver multiplies the destination member value by 2.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\npublic class MultBy2Resolver : IValueResolver<object, object, int> {\n    public int Resolve(object source, object dest, int destMember, ResolutionContext context) {\n        return destMember * 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Member List Validation in AutoMapper\nDESCRIPTION: Shows how to configure mapping validation against source members or no members using MemberList.None parameter instead of the deprecated IgnoreAllNonExisting extension.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/5.0-Upgrade-Guide.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateMap<ProductDto, Product>(MemberList.None);\n```\n\n----------------------------------------\n\nTITLE: Defining Flattened DTO Class in C#\nDESCRIPTION: Simple DTO class definition that represents the flattened version of the complex Order model.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Flattening.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class OrderDto\n{\n\tpublic string CustomerName { get; set; }\n\tpublic decimal Total { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Resolver with Custom Source Value\nDESCRIPTION: Example of customizing the source value supplied to a resolver to make it more reusable across different mapping configurations. This uses IMemberValueResolver interface for greater flexibility.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg => {\ncfg.CreateMap<Source, Destination>()\n    .ForMember(dest => dest.Total,\n        opt => opt.MapFrom<CustomResolver, decimal>(src => src.SubTotal));\ncfg.CreateMap<OtherSource, OtherDest>()\n    .ForMember(dest => dest.OtherTotal,\n        opt => opt.MapFrom<CustomResolver, decimal>(src => src.OtherSubTotal));\n});\n\npublic class CustomResolver : IMemberValueResolver<object, object, decimal, decimal> {\n    public decimal Resolve(object source, object destination, decimal sourceMember, decimal destinationMember, ResolutionContext context) {\n// logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IMappingAction for Reusable Map Actions in AutoMapper\nDESCRIPTION: Demonstrates how to encapsulate mapping actions into reusable classes by implementing the IMappingAction interface. The example shows a class that sets a name property on the destination object.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Before-and-after-map-actions.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NameMeJohnAction : IMappingAction<SomePersonObject, SomeOtherPersonObject>\n{\n    public void Process(SomePersonObject source, SomeOtherPersonObject destination, ResolutionContext context)\n    {\n        destination.Name = \"John\";\n    }\n}\n\nvar configuration = new MapperConfiguration(cfg => {\n  cfg.CreateMap<SomePersonObject, SomeOtherPersonObject>()\n    .AfterMap<NameMeJohnAction>();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Destination Classes in C#\nDESCRIPTION: Example of mismatched property names between source and destination classes that would cause a configuration validation error.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Configuration-validation.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Source\n{\n\tpublic int SomeValue { get; set; }\n}\n\npublic class Destination\n{\n\tpublic int SomeValuefff { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Recursive Models in AutoMapper in C#\nDESCRIPTION: Configuration to enable support for recursive models in AutoMapper projections by setting the maximum depth for recursive queries.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\nconfiguration.Internal().RecursiveQueriesMaxDepth = someRandomNumber;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unflattening with Reverse Mapping in C#\nDESCRIPTION: Shows a complete example of creating an Order with a Customer, mapping to OrderDto, modifying the flattened CustomerName property, and mapping back to update the nested Customer.Name value.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Reverse-Mapping-and-Unflattening.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nvar customer = new Customer {\n  Name = \"Bob\"\n};\n\nvar order = new Order {\n  Customer = customer,\n  Total = 15.8m\n};\n\nvar orderDto = mapper.Map<Order, OrderDto>(order);\n\norderDto.CustomerName = \"Joe\";\n\nmapper.Map(orderDto, order);\n\norder.Customer.Name.ShouldEqual(\"Joe\");\n```\n\n----------------------------------------\n\nTITLE: Defining Source Class with String Properties in C#\nDESCRIPTION: Defines a Source class with three string properties that will need custom conversion to different types.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-type-converters.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Source\n{\n\tpublic string Value1 { get; set; }\n\tpublic string Value2 { get; set; }\n\tpublic string Value3 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Projections at Runtime in C#\nDESCRIPTION: Example of providing parameter values for a parameterized projection at runtime using an anonymous object to substitute values before the query is sent to the database.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\ndbContext.Courses.ProjectTo<CourseModel>(Config, new { currentUserName = Request.User.Name });\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Classes in C#\nDESCRIPTION: Creates the Order and Customer entity classes that show a nested relationship where an Order contains a Customer object with a Name property.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Reverse-Mapping-and-Unflattening.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class Order {\n  public decimal Total { get; set; }\n  public Customer Customer { get; set; }\n}\n\npublic class Customer {\n  public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Destination Class with Various Property Types in C#\nDESCRIPTION: Defines a Destination class with properties of different types (int, DateTime, Type) that need to be converted from string values.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-type-converters.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class Destination\n{\n\tpublic int Value1 { get; set; }\n\tpublic DateTime Value2 { get; set; }\n\tpublic Type Value3 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a different source member with SourceMemberAttribute in C#\nDESCRIPTION: Shows how to use SourceMemberAttribute to map from a differently named source property using a string name.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Attribute-mapping.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nusing AutoMapper.Configuration.Annotations;\n\n[AutoMap(typeof(Order))]\npublic class OrderDto {\n    [SourceMember(\"OrderTotal\")]\n    public decimal Total { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper with Custom Service Location\nDESCRIPTION: Demonstrates how to configure AutoMapper to use custom service location for constructing value resolvers, type converters, and value converters. This example uses static service location with ObjectFactory.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Dependency-injection.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar configuration = new MapperConfiguration(cfg =>\n{\n    cfg.ConstructServicesUsing(ObjectFactory.GetInstance);\n\n    cfg.CreateMap<Source, Destination>();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Source CalendarEvent Class in C#\nDESCRIPTION: This snippet defines a simple CalendarEvent class with Date and Title properties. It serves as the source object for the projection example.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Projection.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class CalendarEvent\n{\n\tpublic DateTime Date { get; set; }\n\tpublic string Title { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using nameof operator with SourceMemberAttribute in C#\nDESCRIPTION: Demonstrates a type-safe way to specify source members using the nameof operator with SourceMemberAttribute.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Attribute-mapping.md#2025-04-16_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nusing AutoMapper.Configuration.Annotations;\n\n[AutoMap(typeof(Order))]\npublic class OrderDto {\n    [SourceMember(nameof(Order.OrderTotal))]\n    public decimal Total { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Documentation Dependencies for AutoMapper\nDESCRIPTION: This requirements file lists the specific Python packages and their versions needed to build AutoMapper documentation. It includes Sphinx 7.1.2 as the documentation generator, sphinx-rtd-theme 1.3.0rc1 for the Read the Docs theme, and myst_parser 2.0.0 for parsing Markdown content.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nsphinx==7.1.2\nsphinx-rtd-theme==1.3.0rc1\nmyst_parser==2.0.0\n```\n\n----------------------------------------\n\nTITLE: Inheritance Mapping Priority Example\nDESCRIPTION: Demonstrates inheritance mapping priorities with explicit mappings and ignored properties.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Mapping-inheritance.md#2025-04-16_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\n//Domain Objects\npublic class Order { }\npublic class OnlineOrder : Order\n{\n    public string Referrer { get; set; }\n}\npublic class MailOrder : Order { }\n\n//Dtos\npublic class OrderDto\n{\n    public string Referrer { get; set; }\n}\n\n//Mappings\nvar configuration = new MapperConfiguration(cfg => {\n    cfg.CreateMap<Order, OrderDto>()\n        .Include<OnlineOrder, OrderDto>()\n        .Include<MailOrder, OrderDto>()\n        .ForMember(o=>o.Referrer, m=>m.Ignore());\n    cfg.CreateMap<OnlineOrder, OrderDto>();\n    cfg.CreateMap<MailOrder, OrderDto>();\n});\n\n// Perform Mapping\nvar order = new OnlineOrder { Referrer = \"google\" };\nvar mapped = mapper.Map(order, order.GetType(), typeof(OrderDto));\nAssert.IsNull(mapped.Referrer);\n```\n\n----------------------------------------\n\nTITLE: Automatic String Conversion Example in C#\nDESCRIPTION: Example of AutoMapper's automatic ToString() conversion when mapping from an enum to a string property in a projection.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Queryable-Extensions.md#2025-04-16_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\npublic class Order {\n    public OrderTypeEnum OrderType { get; set; }\n}\npublic class OrderDto {\n    public string OrderType { get; set; }\n}\nvar orders = dbContext.Orders.ProjectTo<OrderDto>(configuration).ToList();\norders[0].OrderType.ShouldEqual(\"Online\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper Profile in C#\nDESCRIPTION: Example showing how to create a mapping profile by configuring directly in the constructor instead of overriding Configure method. Demonstrates creating a map and recognizing prefix.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/5.0-Upgrade-Guide.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class MappingProfile : Profile {\n    public MappingProfile() {\n        CreateMap<Foo, Bar>();\n        RecognizePrefix(\"m_\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Problematic Conditional Mapping\nDESCRIPTION: Example demonstrating a potential issue with conditional mapping where the resolver might throw an exception before the condition is evaluated. In this case, calling Length on a null string value would cause an error.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Custom-value-resolvers.md#2025-04-16_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\npublic class SourceClass \n{ \n\tpublic string Value { get; set; }\n}\n\npublic class TargetClass \n{\n\tpublic int ValueLength { get; set; }\n}\n\n// ...\n\nvar source = new SourceClass { Value = null };\nvar target = new TargetClass;\n\nCreateMap<SourceClass, TargetClass>()\n\t.ForMember(d => d.ValueLength, o => o.MapFrom(s => s.Value.Length))\n\t.ForAllMembers(o => o.Condition((src, dest, value) => value != null));\n```\n\n----------------------------------------\n\nTITLE: Using Internal API Extensions in AutoMapper\nDESCRIPTION: To access hidden APIs like ForAllMaps, ForAllPropertyMaps, and Advanced, you need to use the Internal extension method from the AutoMapper.Internal namespace.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/11.0-Upgrade-Guide.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing AutoMapper.Internal;\n\n// Access internal APIs via the Internal() extension method\n```\n\n----------------------------------------\n\nTITLE: Configuring UseDestinationValue in AutoMapper\nDESCRIPTION: Shows how to configure AutoMapper to use existing property of destination object instead of creating new object for a member.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/5.0-Upgrade-Guide.md#2025-04-16_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\ncfg.CreateMap<Source, Destination>()\n   .ForMember(d => d.Child, opt => opt.UseDestinationValue());\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper via NuGet Package Manager\nDESCRIPTION: Command to install AutoMapper package using the NuGet Package Manager Console.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPM> Install-Package AutoMapper\n```\n\n----------------------------------------\n\nTITLE: Projection Configuration in AutoMapper\nDESCRIPTION: For projection-only scenarios using ProjectTo, use CreateProjection instead of CreateMap to optimize startup performance and ensure using supported API subset.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/11.0-Upgrade-Guide.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nCreateProjection<TSource, TDestination>()\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Types for Collection Mapping in C#\nDESCRIPTION: Example of class hierarchies used to demonstrate polymorphic collection mapping. Includes parent and child classes for both source and destination hierarchies, each with their own properties.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Lists-and-arrays.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic class ParentSource\n{\n\tpublic int Value1 { get; set; }\n}\n\npublic class ChildSource : ParentSource\n{\n\tpublic int Value2 { get; set; }\n}\n\npublic class ParentDestination\n{\n\tpublic int Value1 { get; set; }\n}\n\npublic class ChildDestination : ParentDestination\n{\n\tpublic int Value2 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper via .NET CLI\nDESCRIPTION: Command to install AutoMapper package using the .NET CLI command line interface.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package AutoMapper\n```\n\n----------------------------------------\n\nTITLE: Defining Source Classes for Nested Mapping in C#\nDESCRIPTION: This snippet defines two C# classes, OuterSource and InnerSource, which represent complex source types for nested mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Nested-mappings.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class OuterSource\n{\n\tpublic int Value { get; set; }\n\tpublic InnerSource Inner { get; set; }\n}\n\npublic class InnerSource\n{\n\tpublic int OtherValue { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternatives to ServiceCtor (C#)\nDESCRIPTION: Suggests using dependency injection or passing needed objects in the Map call as alternatives to the removed ServiceCtor functionality.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/12.0-Upgrade-Guide.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMap\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - AutoMapper 13.0 Changes\nDESCRIPTION: Documents key changes in AutoMapper 13.0 including .NET 6 targeting, DI package consolidation, removal of AllowAdditiveTypeMapCreation, changes to ProjectTo runtime polymorphic mapping, Context.State implementation, and custom Equals/GetHashCode handling.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/13.0-Upgrade-Guide.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 13.0 Upgrade Guide\n\n[Release notes](https://github.com/AutoMapper/AutoMapper/releases/tag/v13.0.0).\n\n## AutoMapper now targets .Net 6\n\n## `AddAutoMapper` is part of the core package and the DI package is discontinued\n\n## `AllowAdditiveTypeMapCreation` was removed\n\nBe sure to call `CreateMap` once for a source type, destination type pair. If you want to reuse configuration, use mapping inheritance.\n\n## ProjectTo runtime polymorphic mapping with Include/IncludeBase\n\nWe consider this an off the beaten path feature and we don't expose it through `CreateProjection`. You can use [an extension method](https://github.com/AutoMapper/AutoMapper/search?l=C%23&q=Advanced) or `CreateMap`.\n\n## `Context.State` similar to `Context.Items`\n\nThe same pattern the framework uses to pass state to delegates. Note that `State` and `Items` are mutually exclusive per `Map` call.\n\n## Custom Equals/GetHashCode for source objects\n\nTo avoid broken implementations, we no longer call those when checking for identical source objects, we hard code to checking object references.\n```\n\n----------------------------------------\n\nTITLE: Defining Destination Classes for Nested Mapping in C#\nDESCRIPTION: This snippet defines two C# classes, OuterDest and InnerDest, which represent complex destination types for nested mapping.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Nested-mappings.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class OuterDest\n{\n\tpublic int Value { get; set; }\n\tpublic InnerDest Inner { get; set; }\n}\n\npublic class InnerDest\n{\n\tpublic int OtherValue { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Items in ResolutionContext (C#)\nDESCRIPTION: Demonstrates how to access items passed in the Map call using ResolutionContext.Items. From version 12.0.1, TryGetItems can be used to check if a context was passed.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/12.0-Upgrade-Guide.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nResolutionContext.Items\n```\n\nLANGUAGE: csharp\nCODE:\n```\nTryGetItems\n```\n\n----------------------------------------\n\nTITLE: Defining Destination CalendarEventForm Class in C#\nDESCRIPTION: This snippet defines the CalendarEventForm class, which is the destination object for the projection. It has a different structure compared to the source CalendarEvent class.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Projection.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class CalendarEventForm\n{\n\tpublic DateTime EventDate { get; set; }\n\tpublic int EventHour { get; set; }\n\tpublic int EventMinute { get; set; }\n\tpublic string Title { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flattened DTO in C#\nDESCRIPTION: Creates a flattened OrderDto class that represents the Order entity but with the Customer.Name property flattened to CustomerName.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Reverse-Mapping-and-Unflattening.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class OrderDto {\n  public decimal Total { get; set; }\n  public string CustomerName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying AutoMapper Configuration in Issue Template\nDESCRIPTION: A placeholder section for users to include their AutoMapper configuration setup using Mapper.Initialize or CreateMap when reporting an issue.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/ISSUE_TEMPLATE.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Mapper.Initialize or just the CreateMap snippet \n```\n\n----------------------------------------\n\nTITLE: Replacing UseValue with MapFrom in C#\nDESCRIPTION: Demonstrates how to replace UseValue with MapFrom in AutoMapper 8.0. This change makes the underlying configuration more explicit.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/8.0-Upgrade-Guide.md#2025-04-16_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\n// Old\ncfg.CreateMap<Source, Dest>()\n    .ForMember(dest => dest.Date, opt => opt.UseValue(DateTime.Now));\n\n// New\ncfg.CreateMap<Source, Dest>()\n    .ForMember(dest => dest.Date, opt => opt.MapFrom(src => DateTime.Now));\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Development Package from MyGet using PowerShell\nDESCRIPTION: This command installs the latest AutoMapper development build from the MyGet repository. It includes the -IncludePrerelease flag to ensure access to the development versions and specifies the MyGet feed URL directly.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/The-MyGet-build.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package AutoMapper -Source https://www.myget.org/F/automapperdev/api/v3/index.json -IncludePrerelease\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Messages and Pull Requests for AutoMapper\nDESCRIPTION: Demonstrates the expected format for commit messages and pull requests when contributing to AutoMapper. It includes a summary of changes, detailed points, and a bug number reference.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSummary of the changes (Less than 80 chars)\n - Detail 1\n - Detail 2\n\n#bugnumber (in this specific format)\n```\n\n----------------------------------------\n\nTITLE: Reproducing AutoMapper Issue Steps\nDESCRIPTION: A placeholder section for users to provide the code that reproduces their AutoMapper issue, allowing maintainers to see the exact problem in context.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/ISSUE_TEMPLATE.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Your calls to Mapper.Map or ProjectTo here, with source/destination objects constructed\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading for AutoMapper 9.0 Upgrade Guide\nDESCRIPTION: Defines the main heading for the AutoMapper 9.0 upgrade guide using Markdown syntax.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/9.0-Upgrade-Guide.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 9.0 Upgrade Guide\n```\n\n----------------------------------------\n\nTITLE: Markdown Subheading for Static API Removal\nDESCRIPTION: Specifies a subheading for the section about the removal of the static API in AutoMapper 9.0.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/9.0-Upgrade-Guide.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## The static API was removed\n```\n\n----------------------------------------\n\nTITLE: Nullable Attribute Implementation in C#\nDESCRIPTION: Removal of nullable context and attribute specifications from ProjectTo methods in QueryableExtensions.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/src/AutoMapper/ApiCompatBaseline.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nProjectTo<TDestination>(IQueryable source, IConfigurationProvider provider, IDictionary<string, object> parameters = null, params string[] membersToExpand)\n```\n\n----------------------------------------\n\nTITLE: Defining Source/Destination Types in AutoMapper Issue Template\nDESCRIPTION: A placeholder section for users to define their source and destination types when reporting an AutoMapper issue.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/ISSUE_TEMPLATE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Put your source/destination types here\n```\n\n----------------------------------------\n\nTITLE: Defining Classes for Integer Type Mapping in C#\nDESCRIPTION: Sample class definitions showing mapping scenario between int and uint types.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/Conditional-mapping.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nclass Foo{\n  public int baz;\n}\n\nclass Bar {\n  public uint baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Subheading for Automatic Map Creation Changes\nDESCRIPTION: Defines a subheading for the section discussing changes to automatic map creation in AutoMapper 9.0.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/docs/source/9.0-Upgrade-Guide.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## AutoMapper no longer creates maps automatically (CreateMissingTypeMaps and conventions)\n```\n\n----------------------------------------\n\nTITLE: Configuration Annotation Changes in C#\nDESCRIPTION: Changes in AttributeUsage decorators for various configuration annotation attributes, modifying from generic value 384 to specific field and property targets.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/src/AutoMapper/ApiCompatBaseline.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[AttributeUsageAttribute(AttributeTargets.Field | AttributeTargets.Property)]\n```\n\n----------------------------------------\n\nTITLE: Type Classification Change in C#\nDESCRIPTION: Structural change in MultidimensionalArrayFiller from class to struct implementation.\nSOURCE: https://github.com/AutoMapper/AutoMapper/blob/master/src/AutoMapper/ApiCompatBaseline.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nsealed struct MultidimensionalArrayFiller\n```"
  }
]