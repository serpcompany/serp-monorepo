[
  {
    "owner": "tinyfish-io",
    "repo": "agentql",
    "content": "TITLE: Running AgentQL Script for Data Extraction\nDESCRIPTION: This snippet demonstrates how to use AgentQL asynchronously within Google Colab to extract data from a website. It uses Playwright to launch a Chromium browser, navigates to a target webpage, defines an AgentQL query to extract product information (name, price, rating), handles pagination, and saves the extracted data to a JSON file. It also captures a video recording of the browser session and displays it in the Colab notebook.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/collect_paginated_ecommerce_listing_data/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport logging\n\nimport agentql\nfrom playwright.async_api import async_playwright\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\nlogging.basicConfig(level=logging.DEBUG)\nlog = logging.getLogger(__name__)\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n\n    # Set up the video recording\n    video_dir = os.path.abspath(\"videos\")\n    context = await browser.new_context(\n      record_video_dir=\"videos/\",\n      record_video_size={\"width\": 1280, \"height\": 720}\n      )\n    page = await agentql.wrap_async(await context.new_page())\n    await page.goto(\"https://books.toscrape.com/\")\n\n    # define the query to extract product names, prices, and ratings\n    QUERY = \"\"\"\n    {\n            books[] {\n                name\n                price\n                rating\n            }\n    }\n    \"\"\"\n\n    books = []\n\n    # Aggregate the first 50 book names, prices and ratings\n    while len(books) < 50:\n        # collect data from the current page\n        response = await page.query_data(QUERY)\n\n        # limit the total number of books to 50\n        if len(response[\"books\"]) + len(books) > 50:\n            books.extend(response[\"books\"][:50 - len(books)])\n        else:\n            books.extend(response[\"books\"])\n\n        # get the pagination info from the current page\n        pagination_info = await page.get_pagination_info()\n\n        # attempt to navigate to next page\n        if pagination_info.has_next_page:\n            await pagination_info.navigate_to_next_page()\n\n    with open(f\"./books.json\", \"w\") as f:\n        json.dump(books, f, indent=4)\n\n    # Display the video\n    video_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\n    if video_files:\n        video_path = os.path.join(video_dir, video_files[0])\n        with open(video_path, 'rb') as f:\n          video_bytes = f.read()\n          \n        video_b64 = b64encode(video_bytes).decode('utf-8')\n        video_html = f\"\"\"\n        <video width=\"800\" controls>\n          <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n          Your browser does not support the video tag.\n        </video>\n        \"\"\"\n        display(HTML(video_html))\n    else:\n        print(\"No video file was created\")\n```\n\n----------------------------------------\n\nTITLE: Asynchronous AgentQL script for price comparison\nDESCRIPTION: This Python script demonstrates how to use AgentQL asynchronously with Playwright to compare the price of a Nintendo Switch OLED from BestBuy, Nintendo, and Target. It launches a browser, navigates to each website, extracts the price using AgentQL queries, and then displays the recorded browser interaction as a video in the Google Colab notebook.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/compare_product_prices/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentql\nfrom playwright.async_api import async_playwright\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\n# Set the URL to the desired website\nBESTBUY_URL = \"https://www.bestbuy.com/site/nintendo-switch-oled-model-w-joy-con-white/6470923.p?skuId=6470923\"\nTARGET_URL = \"https://www.target.com/p/nintendo-switch-oled-model-with-white-joy-con/-/A-83887639#lnk=sametab\"\nNINTENDO_URL = \"https://www.nintendo.com/us/store/products/nintendo-switch-oled-model-white-set/\"\n\n# Define the queries to get the product price\nPRODUCT_INFO_QUERY = \"\"\"\n{\n    nintendo_switch_price(integer)\n}\n\"\"\"\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n\n      # Set up the video recording\n      video_dir = os.path.abspath(\"videos\")\n      context = await browser.new_context(\n        record_video_dir=\"videos/\",\n        record_video_size={\"width\": 1280, \"height\": 720}\n        )\n      page = await agentql.wrap_async(await context.new_page())\n      await page.goto(BESTBUY_URL, timeout= 60000)\n\n      # Use query_data() method to fetch the price from the BestBuy page\n      response = await page.query_data(PRODUCT_INFO_QUERY)\n\n      print(\"Price at BestBuy: \", response[\"nintendo_switch_price\"])\n\n      await page.goto(NINTENDO_URL, timeout= 60000)\n\n      # Use query_data() method to fetch the price from the Nintendo page\n      response = await page.query_data(PRODUCT_INFO_QUERY)\n\n      print(\"Price at Nintendo: \", response[\"nintendo_switch_price\"])\n\n      await page.goto(TARGET_URL, timeout= 60000)\n\n      # Use query_data() method to fetch the price from the Target page\n      response = await page.query_data(PRODUCT_INFO_QUERY)\n\n      print(\"Price at Target: \", response[\"nintendo_switch_price\"])\n\n      # Display the video\n      video_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\n      if video_files:\n          video_path = os.path.join(video_dir, video_files[0])\n          with open(video_path, 'rb') as f:\n            video_bytes = f.read()\n            \n          video_b64 = b64encode(video_bytes).decode('utf-8')\n          video_html = f\"\"\"\n          <video width=\"800\" controls>\n            <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n            Your browser does not support the video tag.\n          </video>\n          \"\"\"\n          display(HTML(video_html))\n      else:\n          print(\"No video file was created\") \n```\n\n----------------------------------------\n\nTITLE: Run Asynchronous AgentQL Script - Python\nDESCRIPTION: This comprehensive script demonstrates how to use the asynchronous version of AgentQL to scrape paginated data from Hacker News within a Google Colab environment. It initializes Playwright, navigates to the target website, defines an AgentQL query to extract post titles, uses the paginate tool to collect data from multiple pages, saves the aggregated data to a JSON file, and records a video of the browser session.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/collect_paginated_news_headlines/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport logging\n\nimport agentql\nfrom playwright.async_api import async_playwright\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\n# import paginate tool from agentql tools\nfrom agentql.tools.async_api import paginate\n\nlogging.basicConfig(level=logging.DEBUG)\nlog = logging.getLogger(__name__)\n\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n      # Set up the video recording\n      video_dir = os.path.abspath(\"videos\")\n      context = await browser.new_context(\n        record_video_dir=\"videos/\",\n        record_video_size={\"width\": 1280, \"height\": 720}\n        )\n      page = await agentql.wrap_async(await context.new_page())\n      await page.goto(\"https://news.ycombinator.com/\")\n\n      # Define the query to extract post titles\n      QUERY = \"\"\"\n      {\n          posts[] {\n              title\n          }\n      }\n      \"\"\"\n      # Collect all data over the next 3 pages with the query defined above\n      paginated_data = await paginate(page, QUERY, 3)\n\n      # Save the aggregated data to a json file\n      with open(\"./hackernews_paginated_data.json\", \"w\") as f:\n          json.dump(paginated_data, f, indent=4)\n\n      log.debug(\"Paginated data has been saved to hackernews_paginated_data.json\")\n\n      # Display the video\n      video_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\n      if video_files:\n          video_path = os.path.join(video_dir, video_files[0])\n          with open(video_path, 'rb') as f:\n            video_bytes = f.read()\n\n          video_b64 = b64encode(video_bytes).decode('utf-8')\n          video_html = f\"\"\"\n          <video width=\"800\" controls>\n            <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n            Your browser does not support the video tag.\n          </video>\n          \"\"\"\n          display(HTML(video_html))\n      else:\n          print(\"No video file was created\")\n```\n\n----------------------------------------\n\nTITLE: AgentQL Script Execution with Playwright (Python)\nDESCRIPTION: This snippet executes an AgentQL script to interact with a website, specifically to close a cookie dialog. It launches a Chromium browser, navigates to a specified URL, uses AgentQL to query for cookie rejection elements, clicks the rejection button (if found), records a video of the browser session, and displays the video in the Colab output. This requires AgentQL, Playwright, IPython, and base64 libraries. It also assumes that AgentQL API key has been correctly set.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/close_cookie_dialog/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentql\nfrom playwright.async_api import async_playwright\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\n# Set the URL to the desired website\nURL = \"https://gov.uk/\"\n\nQUERY = \"\"\"\n{\n    cookies_form {\n        reject_btn\n    }\n}\n\"\"\"\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n  \n  # Set up the video recording\n  video_dir = os.path.abspath(\"videos\")\n  context = await browser.new_context(\n        record_video_dir=\"videos/\",\n        record_video_size={\"width\": 1280, \"height\": 720} \n    )\n  \n  # Create a new page in the context and wrap it to get access to the AgentQL's querying API\n  page = await agentql.wrap_async(await context.new_page())\n  \n  await page.goto(URL)\n\n  # Use query_elements() method to fetch the cookies dialog button from the page\n  response = await page.query_elements(QUERY)\n\n  # Check if there is a cookie-rejection button on the page\n  if response.cookies_form.reject_btn != None:\n    # If so, click the close button to reject cookies\n    await response.cookies_form.reject_btn.click()\n    \n  # Wait for 10 seconds to see the browser in action\n  await page.wait_for_timeout(10000)\n\n  # Close context to ensure video is saved\n  await context.close()\n    \n  # Display the video\n  video_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\n  if video_files:\n      video_path = os.path.join(video_dir, video_files[0])\n      with open(video_path, 'rb') as f:\n        video_bytes = f.read()\n        \n      video_b64 = b64encode(video_bytes).decode('utf-8')\n      video_html = f\"\"\"\n      <video width=\"800\" controls>\n        <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n        Your browser does not support the video tag.\n      </video>\n      \"\"\"\n      display(HTML(video_html))\n  else:\n      print(\"No video file was created\")\n```\n\n----------------------------------------\n\nTITLE: AgentQL Script for YouTube Comment Analysis\nDESCRIPTION: This script uses AgentQL to extract YouTube comments and performs sentiment analysis on them using the OpenAI API. It launches a Chromium browser using Playwright, navigates to a YouTube video, scrolls to load comments, extracts the comments using AgentQL's `query_data` method, and then uses the OpenAI API to analyze the sentiment of the comments.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/perform_sentiment_analysis/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentql\nfrom openai import OpenAI\nfrom playwright.async_api import async_playwright\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\nURL = \"https://www.youtube.com/watch?v=JfM1mr2bCuk\"\n\n# Define the queries to interact with the page\nQUERY = \"\"\"\n{\n    video_title\n    video_channel\n    comments[] {\n        comment_text\n        author\n    }\n}\n\"\"\"\n\n\nasync def get_comments():\n    async with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n        # Set up the video recording\n        context = await browser.new_context(\n          record_video_dir=\"videos/\",\n          record_video_size={\"width\": 1280, \"height\": 720}\n        )\n\n        page = await agentql.wrap_async(await context.new_page())\n\n        await page.goto(URL)\n\n\n        for _ in range(5):\n            # Wait for the page to load (helps to load the comments on the video)\n            await page.wait_for_page_ready_state()\n\n            # Scroll down the page to load more comments\n            await page.keyboard.press(\"PageDown\")\n\n        # Use query_data() method to fetch the comments from the page\n        response = await page.query_data(QUERY)\n\n        return response\n\n\nasync def perform_sentiment_analysis(comments):\n    USER_MESSAGE = \"These are the comments on the video. I am trying to understand the sentiment of the comments.\"\n\n    for comment in comments[\"comments\"]:\n        USER_MESSAGE += comment[\"comment_text\"]\n\n    SYSTEM_MESSAGE = \"\"\"You are an expert in understanding the social media analytics and analysis and specialize in analyzing sentiment of the comments.\n    Please find the comments on the video as follows:\n\n    \"\"\"\n\n    USER_MESSAGE += \"Could you please provide a summary of the comments on the video. Additionaly, just give only 3 takeaways which would be important for me as the creator of the video.\"\n\n    client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n    completion = await client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {\"role\": \"system\", \"content\": SYSTEM_MESSAGE},\n            {\"role\": \"user\", \"content\": USER_MESSAGE},\n        ],\n    )\n\n    return completion.choices[0].message.content\n\n\ncomments = await get_comments()\nsummary = await perform_sentiment_analysis(comments)\nprint(summary)\n\n# Display the video\nvideo_dir = os.path.abspath(\"videos\")\nvideo_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\nif video_files:\n    video_path = os.path.join(video_dir, video_files[0])\n    with open(video_path, 'rb') as f:\n      video_bytes = f.read()\n\n    video_b64 = b64encode(video_bytes).decode('utf-8')\n    video_html = f\"\"\"\n    <video width=\"800\" controls>\n      <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n      Your browser does not support the video tag.\n    </video>\n    \"\"\"\n    display(HTML(video_html))\nelse:\n    print(\"No video file was created\")\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script Asynchronously in Google Colab\nDESCRIPTION: This snippet demonstrates how to run an AgentQL script asynchronously in Google Colab using Playwright. It initializes Playwright, launches a Chromium browser, wraps the page with AgentQL, navigates to a URL, performs searches using `query_elements`, inputs text, presses Enter, and extracts data using `query_data`. It then prints the extracted data.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/run_script_online_in_google_colab/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentql\nfrom playwright.async_api import async_playwright\n\n\nURL = \"https://scrapeme.live/shop\"\n\nSEARCH_QUERY = \"\"\"\n{\n    search_products_box\n}\n\"\"\"\n\nSTOCK_NUMBER_QUERY = \"\"\"\n{\n    number_in_stock\n}\n\"\"\"\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n    # Create a new page in the browser and wrap it to get access to the AgentQL's querying API\n    page= await agentql.wrap_async(browser.new_page())\n\n    await page.goto(URL)\n\n    # Use query_elements() method to locate the search box and search button from the page\n    response = await page.query_elements(SEARCH_QUERY)\n\n    # Use Playwright's API to fill the search box and press Enter\n    await response.search_products_box.type(\"Charmander\")\n    await page.keyboard.press(\"Enter\")\n\n    # Use query_data() method to fetch the president name from the page\n    response = await page.query_data(STOCK_NUMBER_QUERY)\n\n    print(response)\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL script for web login\nDESCRIPTION: This comprehensive snippet demonstrates web login automation using AgentQL and Playwright in an asynchronous environment. It initializes Playwright, navigates to a login page, queries elements using AgentQL, fills username and password fields, clicks the submit button, records a video of the browser session, and displays the recorded video.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/log_into_sites/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentql\nfrom playwright.async_api import async_playwright\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\n# Set the URL to the desired website\nURL = \"https://practicetestautomation.com/practice-test-login/\"\n\nLOGIN_QUERY = \"\"\"\n{\n    username_field\n    password_field\n    submit_btn\n}\n\"\"\"\n\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n  # Set up the video recording\n  video_dir = os.path.abspath(\"videos\")\n  context = await browser.new_context(\n    record_video_dir=\"videos/\",\n    record_video_size={\"width\": 1280, \"height\": 720}\n  )\n\n  page = await agentql.wrap_async(await context.new_page())\n\n  await page.goto(URL)\n\n  # Get the username and password fields\n  response = await page.query_elements(LOGIN_QUERY)\n\n  # Fill the username and password fields\n  await response.username_field.fill(\"student\")\n  await response.password_field.fill(\"Password123\")\n\n  # Click the submit button\n  await response.submit_btn.click()\n\n  # Used only for demo purposes. It allows you to see the effect of the script.\n  await page.wait_for_timeout(5000)\n\n  await context.close()\n\n  # Display the video\n  video_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\n  if video_files:\n      video_path = os.path.join(video_dir, video_files[0])\n      with open(video_path, 'rb') as f:\n        video_bytes = f.read()\n\n      video_b64 = b64encode(video_bytes).decode('utf-8')\n      video_html = f\"\"\"\n      <video width=\"800\" controls>\n        <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n        Your browser does not support the video tag.\n      </video>\n      \"\"\"\n      display(HTML(video_html))\n  else:\n      print(\"No video file was created\")\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script Asynchronously\nDESCRIPTION: Executes an AgentQL script asynchronously to interact with a webpage using Playwright. It navigates to a specified URL, locates a search box using `query_elements()`, types a search query, presses Enter, and then fetches stock number data using `query_data()`.  This example leverages Playwright's asynchronous API.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/run_script_in_headless_browser/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentql\n\nfrom playwright.async_api import async_playwright\n\n# Set the URL to the desired website\nURL = \"https://scrapeme.live/shop\"\n\nSEARCH_QUERY = \"\"\"\n{\n    search_products_box\n}\n\"\"\"\n\nSTOCK_NUMBER_QUERY = \"\"\"\n{\n    number_in_stock\n}\n\"\"\"\n\n\nasync with async_playwright() as playwright, await playwright.chromium.launch(headless=True) as browser:\n\n        page = await agentql.wrap_async(await browser.new_page())\n\n        await page.goto(URL)\n\n        # Use query_elements() method to locate the search product box from the page\n        response = await page.query_elements(SEARCH_QUERY)\n\n        # Use Playwright's API to fill the search box and press Enter\n        await response.search_products_box.type(\"Charmander\")\n        await page.keyboard.press(\"Enter\")\n\n        # Use query_data() method to fetch the stock number from the page\n        response = await page.query_data(STOCK_NUMBER_QUERY)\n\n        print(response)\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL script for popup handling\nDESCRIPTION: This comprehensive code snippet demonstrates using AgentQL to interact with a website, specifically closing a popup form. It initializes Playwright asynchronously, navigates to a specified URL, uses AgentQL to identify and click a button to close the popup, records the browser session, and displays the recording. It requires AgentQL, Playwright, and IPython dependencies. This is designed for an asynchronous environment like Google Colab.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/close_popup/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentql\nfrom playwright.async_api import async_playwright\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\n# Set the URL to the desired website\nURL = \"https://kinfield.com/\"\n\nQUERY = \"\"\"\n{\n    popup_form {\n        close_btn\n    }\n}\n\"\"\"\n\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n  \n  # Set up the video recording\n  video_dir = os.path.abspath(\"videos\")\n  context = await browser.new_context(\n      record_video_dir=\"videos/\",\n      record_video_size={\"width\": 1280, \"height\": 720}\n      )\n  \n  # Create a new page in the browser and wrap it to get access to the AgentQL's querying API\n  page = await agentql.wrap_async(await context.new_page())\n\n  await page.goto(URL)\n\n  # Use query_elements() method to fetch the close popup button from the page\n  response = await page.query_elements(QUERY)\n\n  # Click the close button to close the popup\n  await response.popup_form.close_btn.click()\n  \n  # Wait for 10 seconds to see the browser in action\n  await page.wait_for_timeout(10000)\n\n  # Close context to ensure video is saved\n  await context.close()\n\n  # Display the video\n  video_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\n  if video_files:\n      video_path = os.path.join(video_dir, video_files[0])\n      with open(video_path, 'rb') as f:\n        video_bytes = f.read()\n        \n      video_b64 = b64encode(video_bytes).decode('utf-8')\n      video_html = f\"\"\"\n      <video width=\"800\" controls>\n        <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n        Your browser does not support the video tag.\n      </video>\n      \"\"\"\n      display(HTML(video_html))\n  else:\n      print(\"No video file was created\")\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script for Browser Automation\nDESCRIPTION: This code snippet demonstrates the core AgentQL functionality: launching a browser, navigating to a URL, interacting with the page (scrolling, waiting for load), querying data using AgentQL's querying API, and displaying a screen recording of the browser session in Google Colab.  It utilizes the asynchronous API of Playwright and AgentQL.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/wait_for_entire_page_load/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentql\nfrom playwright.async_api import async_playwright\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\n# Duckduckgo URL to demonstrate the example for loading more videos on the page\nURL = \"https://duckduckgo.com/?q=machine+learning+lectures+mit&t=h_&iar=videos&iax=videos&ia=videos\"\n\nQUERY = \"\"\"\n{\n    videos(first 10 videos)[] {\n        video_title\n        length\n        views\n    }\n}\n\"\"\"\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n  \n  video_dir = os.path.abspath(\"videos\")\n  context = await browser.new_context(\n    record_video_dir=\"videos/\",\n    record_video_size={\"width\": 1280, \"height\": 720}\n  )\n  \n  # Create a new page in the browser and wrap it to get access to the AgentQL's querying API\n  page = await agentql.wrap_async(await context.new_page())\n\n  await page.goto(URL)\n\n  for _ in range(2):\n      # Wait for additional videos to load completely\n      await page.wait_for_page_ready_state()\n      # Scroll down the page to trigger loading of more videos\n      await page.keyboard.press(\"End\")\n\n  # Use query_data() method to fetch video lists data from the page\n  response = await page.query_data(QUERY)\n\n  # Print the details of the first video\n  print(response[\"videos\"][0])\n\n  # Display the video\n  video_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\n  if video_files:\n      video_path = os.path.join(video_dir, video_files[0])\n      with open(video_path, 'rb') as f:\n        video_bytes = f.read()\n            \n      video_b64 = b64encode(video_bytes).decode('utf-8')\n      video_html = f\"\"\"\n      <video width=\"800\" controls>\n        <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n        Your browser does not support the video tag.\n      </video>\n      \"\"\"\n      display(HTML(video_html))\n  else:\n      print(\"No video file was created\")    \n```\n\n----------------------------------------\n\nTITLE: Launching Chrome with Remote Debugging (Windows)\nDESCRIPTION: This command launches Chrome with remote debugging enabled on port 9222. It's for Windows systems, and assumes Chrome is in the system's PATH. If not, replace `chrome.exe` with the full path to the Chrome executable.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/interact_with_external_or_existing_browser/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchrome.exe --remote-debugging-port=9222\n```\n\n----------------------------------------\n\nTITLE: Run Sentiment Analysis Script\nDESCRIPTION: This command executes the sentiment analysis script using the Python 3 interpreter.  It assumes the script is named `main.py` and is located in the current working directory. The script utilizes both the AgentQL and OpenAI SDKs.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/perform_sentiment_analysis/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script Asynchronously\nDESCRIPTION: This snippet demonstrates how to use AgentQL asynchronously with Playwright to scroll through a website, extract data using AgentQL queries, and record the browser session. It includes setting up Playwright, navigating to a page, scrolling to load content, querying data with AgentQL, and displaying a video recording of the session.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/infinite_scroll/main.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport random\nimport asyncio\n\nimport agentql\nfrom playwright.async_api import async_playwright\nfrom agentql.ext.playwright.async_api import Page\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\nlogging.basicConfig(level=logging.DEBUG)\nlog = logging.getLogger(__name__)\n\n\nasync def key_press_end_scroll(page: Page):\n    await page.keyboard.press(\"End\")\n\n\nasync def mouse_wheel_scroll(page: Page):\n    viewport_height, total_height, scroll_height = await page.evaluate(\n        \"() => [window.innerHeight, document.body.scrollHeight, window.scrollY]\"\n    )\n    while scroll_height < total_height:\n        scroll_height = scroll_height + viewport_height\n        await page.mouse.wheel(delta_x=0, delta_y=viewport_height)\n        asyncio.sleep(random.uniform(0.05, 0.1))\n\n\nQUERY = \"\"\"\n{\n    page_title\n    post_headers[]\n}\n\"\"\"\n\nasync with async_playwright() as playwright, await playwright.chromium.launch() as browser:\n\n    # Set up the video recording\n    video_dir = os.path.abspath(\"videos\")\n    context = await browser.new_context(\n      record_video_dir=\"videos/\",\n      record_video_size={\"width\": 1280, \"height\": 720}\n    )\n    page = await agentql.wrap_async(await context.new_page())\n    \n    log.info(\"Navigating to the page...\")\n\n    await page.goto(\"https://infinite-scroll.com/demo/full-page/\")\n\n    await page.wait_for_page_ready_state()\n\n    num_extra_pages_to_load = 3\n\n    for times in range(num_extra_pages_to_load):\n        log.info(f\"Scrolling to the bottom of the page... (num_times = {times+1})\")\n        await key_press_end_scroll(page)\n        await page.wait_for_page_ready_state()\n        log.info(\"Content loaded!\")\n\n    log.info(\"Issuing AgentQL data query...\")\n    response = await page.query_data(QUERY)\n\n    log.info(f\"AgentQL response: {response}\")\n\n    # Display the video\n    video_files = [f for f in os.listdir(video_dir) if f.endswith('.webm')]\n    if video_files:\n        video_path = os.path.join(video_dir, video_files[0])\n        with open(video_path, 'rb') as f:\n          video_bytes = f.read()\n            \n        video_b64 = b64encode(video_bytes).decode('utf-8')\n        video_html = f\"\"\"\n        <video width=\"800\" controls>\n          <source src=\"data:video/webm;base64,{video_b64}\" type=\"video/webm\">\n          Your browser does not support the video tag.\n        </video>\n        \"\"\"\n        display(HTML(video_html))\n    else:\n        print(\"No video file was created\")     \n```\n\n----------------------------------------\n\nTITLE: Setting AgentQL API Key from Colab Secrets - Python\nDESCRIPTION: This code snippet demonstrates how to retrieve an AgentQL API key from Google Colaboratory's secrets management and set it as an environment variable. It uses the `google.colab.userdata` module to securely access the API key without hardcoding it in the notebook.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/collect_paginated_news_headlines/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Run the JavaScript script\nDESCRIPTION: This command executes the JavaScript file 'main.js' using Node.js.  It assumes that the necessary dependencies (AgentQL SDK, OpenAI SDK) are installed and the OpenAI API key is set as an environment variable.  The script will then perform sentiment analysis on YouTube comments.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/perform-sentiment-analysis/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Setting AgentQL API Key in Google Colab\nDESCRIPTION: This snippet retrieves the AgentQL API key from Google Colab's secrets manager and sets it as an environment variable. This allows the AgentQL script to authenticate with the AgentQL service without hardcoding the API key in the code. The `userdata.get` method is used to securely access the API key.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/collect_paginated_ecommerce_listing_data/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key\nDESCRIPTION: This command sets the OpenAI API key as an environment variable.  The API key is required to authenticate requests to OpenAI's GPT-3.5 model. It's set using the `export` command in the bash shell.  Replace \"My API Key\" with your actual OpenAI API key.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/perform_sentiment_analysis/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"My API Key\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving API key from Google Colab secrets\nDESCRIPTION: This snippet retrieves the AgentQL API key from Google Colab's secrets management system and sets it as an environment variable. It imports necessary modules and accesses the secret using userdata.get().\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/log_into_sites/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependency in Google Colab\nDESCRIPTION: This snippet installs the Chromium browser dependency required by AgentQL's Playwright integration. The `!playwright install chromium` command uses the Playwright CLI to download and install the necessary browser binaries.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/collect_paginated_ecommerce_listing_data/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependency\nDESCRIPTION: This code installs the Playwright dependency required by AgentQL for browser automation. Playwright allows AgentQL to control a browser instance, enabling it to interact with web pages and extract data.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/perform_sentiment_analysis/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright\nDESCRIPTION: This snippet installs the Chromium dependency required by AgentQL using Playwright's CLI.  It ensures that AgentQL can interact with a browser for web scraping and automation within the Google Colab environment.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/infinite_scroll/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL library using pip\nDESCRIPTION: This snippet installs the AgentQL library using pip, enabling its use for web automation tasks. It leverages the %pip magic command in Google Colab.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/log_into_sites/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL\nDESCRIPTION: This snippet installs the AgentQL library using pip within a Google Colab environment. It uses the `%pip` magic command, specific to IPython environments like Google Colab, to install the package.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/infinite_scroll/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL library in Google Colab\nDESCRIPTION: This snippet installs the AgentQL library using pip, which is necessary for using AgentQL functionality in the Colab environment. It utilizes the '%pip' magic command for Colab.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/run_script_online_in_google_colab/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL Library\nDESCRIPTION: Installs the AgentQL library using pip within the Google Colaboratory environment.  This command is executed directly in a Colab cell.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/run_script_in_headless_browser/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Install OpenAI SDK using npm\nDESCRIPTION: This command installs the OpenAI SDK as a project dependency.  It allows the JavaScript script to interact with the OpenAI API for sentiment analysis. The OpenAI SDK must be installed before running the main.js script.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/perform-sentiment-analysis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install openai\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys in Google Colab (Python)\nDESCRIPTION: This snippet retrieves an AgentQL API key from Google Colab's secrets manager and sets it as an environment variable. This allows secure access to AgentQL's services. Requires a configured AGENTQL_API_KEY secret within Google Colab.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/close_cookie_dialog/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script\nDESCRIPTION: This bash command executes the Python script `main.py`. Ensure that Python 3 is installed and the AgentQL SDK is installed as a dependency before running the command. The expected output is the scraped HackerNews headlines from multiple pages.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/collect_paginated_news_headlines/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript with Node.js\nDESCRIPTION: This command demonstrates how to execute the JavaScript file 'main.js' using Node.js.  It assumes Node.js is installed and the current working directory is the project's root folder. No specific dependencies are required beyond Node.js.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/humanlike-antibot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Setting AgentQL API Key from Google Colab Secrets\nDESCRIPTION: This code snippet retrieves the AgentQL API key from Google Colab's secrets management and sets it as an environment variable. It imports `os` and `userdata` from `google.colab` to access the secrets.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/wait_for_entire_page_load/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Running Python Script\nDESCRIPTION: This snippet shows how to execute the Python script. It uses the `python3` command to run the `main.py` file. This assumes that Python 3 is installed and available in the system's PATH. The script should be located in the current working directory.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/wait_for_entire_page_load/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script with Node.js\nDESCRIPTION: This bash command shows how to execute the AgentQL script named 'main.js' using Node.js. The script is assumed to be located in the current working directory. This requires Node.js to be installed on the system.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/close-popup/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Setting AgentQL API Key from Google Colab secrets\nDESCRIPTION: This snippet retrieves the AgentQL API key from Google Colab's secrets and sets it as an environment variable. This is essential for authenticating with the AgentQL service and accessing its features. The `userdata.get()` method securely fetches the API key.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/compare_product_prices/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script with Bash\nDESCRIPTION: This command is used to execute the main.py Python script. It assumes that Python 3 is installed and available in the system's PATH. The script should be saved locally and located in the same directory from which the command is run.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/humanlike-antibot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script with Node.js\nDESCRIPTION: This code snippet shows the command to run the AgentQL script using Node.js.  The script should be saved as `main.js` in the project directory. Requires Node.js to be installed.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/log-into-sites/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys from Google Colab Secrets\nDESCRIPTION: This code snippet retrieves API keys from Google Colab's secrets manager and sets them as environment variables. This is a secure way to store and access sensitive information like API keys without hardcoding them in the code.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/perform_sentiment_analysis/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\nos.environ[\"OPENAI_API_KEY\"]=userdata.get('OPENAI_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script\nDESCRIPTION: This bash command executes the JavaScript file `main.js` using Node.js. It assumes that Node.js is installed and the current working directory contains the `main.js` file.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/get-by-prompt/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Running the AgentQL Example Script\nDESCRIPTION: This command executes the `main.py` script using Python 3.  It assumes the user has saved the provided Python code as `main.py` in the current working directory and that Python 3 is installed and accessible in their environment.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/interact_with_external_or_existing_browser/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Setting up AgentQL API Key from Google Colab secrets\nDESCRIPTION: This code snippet retrieves the AgentQL API key from Google Colab's secrets management and sets it as an environment variable.  It uses `google.colab.userdata` to access the stored API key and `os.environ` to set the environment variable for AgentQL to use during authentication.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/close_popup/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Setting AGENTQL_API_KEY Environment Variable\nDESCRIPTION: Retrieves the AgentQL API key from Google Colab's secrets and sets it as an environment variable. This allows the AgentQL script to authenticate with the AgentQL service. Requires the 'AGENTQL_API_KEY' secret to be set in Colab.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/run_script_in_headless_browser/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Setting AgentQL API Key\nDESCRIPTION: This snippet retrieves the AgentQL API key from Google Colab's secrets manager and sets it as an environment variable. It uses `google.colab.userdata` to securely access the API key and `os.environ` to make it available to AgentQL.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/infinite_scroll/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Install Playwright for AgentQL - Python\nDESCRIPTION: This code installs Playwright, a browser automation library, with the chromium dependency. Playwright is a prerequisite for AgentQL's browser interaction features. The `!` prefix is used in Google Colab to execute shell commands.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/collect_paginated_news_headlines/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Chromium Dependency\nDESCRIPTION: This code snippet installs the Playwright browser dependency (Chromium) required by AgentQL using the `!playwright install chromium` command within a Google Colaboratory environment. The `!` prefix allows executing shell commands.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/wait_for_entire_page_load/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Chromium dependency\nDESCRIPTION: This command installs the Chromium browser dependency required by AgentQL to interact with websites. Playwright is used for browser automation and web scraping. This allows AgentQL to control a browser and extract data from web pages.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/compare_product_prices/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Chromium Dependency\nDESCRIPTION: Installs the Chromium browser, a dependency for Playwright, which AgentQL utilizes for browser automation. This command is executed directly in a Colab cell.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/run_script_in_headless_browser/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Chromium dependency\nDESCRIPTION: This snippet installs the Chromium browser dependency required by AgentQL for browser automation. It utilizes the playwright install command within Google Colab.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/log_into_sites/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright dependency in Google Colab\nDESCRIPTION: This code snippet installs the Chromium browser, a dependency of Playwright, which AgentQL uses for browser automation. The `!playwright install chromium` command downloads and configures Chromium within the Google Colaboratory environment.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/close_popup/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL in Google Colab - Python\nDESCRIPTION: This code snippet installs the AgentQL library using pip within a Google Colaboratory environment. The %pip command is a magic command specific to Colab notebooks, which ensures the library is installed in the correct environment.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/collect_paginated_news_headlines/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Setting AgentQL API Key from Google Colab Secrets\nDESCRIPTION: This code retrieves the AgentQL API key from Google Colab's Secrets and sets it as an environment variable. It relies on the `google.colab` library to access the user's secrets and the `os` module to set the environment variable, allowing AgentQL to authenticate.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/run_script_online_in_google_colab/main.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import user_data\n\nos.environ[\"AGENTQL_API_KEY\"]=userdata.get('AGENTQL_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Run Chrome with Remote Debugging (Windows)\nDESCRIPTION: This command starts Chrome with remote debugging enabled on port 9222. It enables interaction with external tools like AgentQL. Ensure that `chrome.exe` is in the system's PATH or replace it with the correct path to the executable.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/interact-with-external-or-existing-browser/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nchrome.exe --remote-debugging-port=9222\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL Library in Google Colab\nDESCRIPTION: This snippet installs the AgentQL library using pip within a Google Colaboratory environment. The `%pip` magic command ensures that the package is installed specifically for the current Colab session.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/collect_paginated_ecommerce_listing_data/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key environment variable\nDESCRIPTION: This command sets the OpenAI API key as an environment variable. This API key is required to authenticate with the OpenAI service and use its models for sentiment analysis. Ensure the API key is correctly set before running the script.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/perform-sentiment-analysis/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"My API Key\"\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL with pip in Google Colab\nDESCRIPTION: This command installs the AgentQL library using pip, making it available for use in the Google Colaboratory environment. This is a necessary first step to use AgentQL's functionalities for web scraping and data extraction.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/compare_product_prices/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Chromium in Google Colab\nDESCRIPTION: This snippet installs Chromium, a browser engine, and its Playwright dependencies required for AgentQL to interact with web pages.  It uses the '!playwright' command to install the necessary components.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/run_script_online_in_google_colab/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependencies (Python)\nDESCRIPTION: This snippet installs the Chromium browser using Playwright, a dependency required by AgentQL for browser automation. This step ensures that AgentQL can interact with a browser instance. This requires a Google Colab notebook environment and the Playwright library.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/close_cookie_dialog/main.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Running the AgentQL script\nDESCRIPTION: These instructions detail how to run the AgentQL script. It assumes AgentQL SDK is installed. The script should be saved locally as main.py, and executed from the project's folder using the python3 command.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/close_popup/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL Package\nDESCRIPTION: This code snippet demonstrates how to install the AgentQL library using the pip package manager within a Google Colaboratory environment. This is a necessary first step to utilize AgentQL's web scraping and data extraction capabilities.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/perform_sentiment_analysis/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL Library in Google Colab (Python)\nDESCRIPTION: This snippet installs the AgentQL library using pip within a Google Colaboratory environment. This allows the use of AgentQL's browser automation functionalities. This requires a Google Colab notebook environment.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/close_cookie_dialog/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL library in Google Colab\nDESCRIPTION: This code snippet installs the AgentQL library using the `%pip` magic command within a Google Colaboratory environment. This command simplifies package installation and makes AgentQL's functionalities accessible.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/close_popup/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL Library in Google Colab\nDESCRIPTION: This code snippet installs the AgentQL library using the `%pip` command within a Google Colaboratory environment.  This command directly uses pip to install the package.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/googlecolab/wait_for_entire_page_load/main.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentql\n```\n\n----------------------------------------\n\nTITLE: Install OpenAI SDK\nDESCRIPTION: This command installs the OpenAI Python SDK, which is a prerequisite for interacting with OpenAI's GPT-3.5 model for sentiment analysis. It uses pip, the Python package installer, to download and install the openai package from the Python Package Index (PyPI).\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/perform_sentiment_analysis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openai\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome with Remote Debugging (Mac)\nDESCRIPTION: This command launches Google Chrome with remote debugging enabled on port 9222.  This allows external applications like AgentQL to connect and control the browser. It's specifically for macOS systems and assumes Chrome is installed in the standard Applications directory.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/interact_with_external_or_existing_browser/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n```\n\n----------------------------------------\n\nTITLE: Run Chrome with Remote Debugging (macOS)\nDESCRIPTION: This command starts Google Chrome with remote debugging enabled on port 9222. This allows external applications, like AgentQL, to connect and control the browser instance. It requires the full path to the Chrome executable on macOS.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/interact-with-external-or-existing-browser/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script\nDESCRIPTION: This snippet shows how to execute the Python script. It requires Python 3 to be installed on the system.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/submit_form/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running Python Script\nDESCRIPTION: This bash command is used to execute the python script named 'main.py'. It assumes that python3 is installed and available in the system's PATH.  The script should be located in the current directory.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/python/list_query_usage/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript with Node.js\nDESCRIPTION: This command executes the JavaScript file 'main.js' using Node.js.  It assumes that Node.js is installed and configured on the system and that 'main.js' is located in the current working directory. This command starts the AgentQL script defined in 'main.js'.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/submit-form/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Script with Node.js\nDESCRIPTION: This command executes the JavaScript file 'main.js' using Node.js.  It assumes that Node.js is installed and the current working directory is the project's folder. The script likely uses the AgentQL SDK to interact with YouTube.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/collect-youtube-comments/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript with Node.js\nDESCRIPTION: This snippet shows how to execute the JavaScript file using Node.js. It assumes that the AgentQL SDK is installed and the JavaScript file is saved as `main.js`.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/compare-product-prices/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script\nDESCRIPTION: This bash snippet demonstrates how to execute the AgentQL JavaScript script using Node.js. It assumes that Node.js is installed and the script is saved as `main.js` in the current directory.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/wait-for-entire-page-load/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Run AgentQL Script\nDESCRIPTION: This command executes the main.js file using Node.js.  It assumes that the AgentQL SDK has been installed and that the main.js file contains the necessary code to interact with the remotely debugged browser instance. The user must replace the WEBSOCKET_URL placeholder with the appropriate URL.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/interact-with-external-or-existing-browser/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Running AgentQL Script with Node.js\nDESCRIPTION: This snippet demonstrates how to execute the AgentQL JavaScript script using Node.js. It assumes that the AgentQL SDK is installed and the script is saved as main.js in the project directory. It is executed from the command line.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/examples/js/first-steps/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Google Maps Scraper Example in Python\nDESCRIPTION: This example script demonstrates how to scrape Google Maps data using AgentQL in Python. It is located in the `examples/python/maps_scraper` directory of the AgentQL repository. Refer to the linked script for implementation details.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nN/A (Link to external file provided)\n```\n\n----------------------------------------\n\nTITLE: Google Maps Scraper Example in JavaScript\nDESCRIPTION: This example script demonstrates how to scrape Google Maps data using AgentQL in JavaScript. It is located in the `examples/js/maps_scraper` directory of the AgentQL repository. Refer to the linked script for implementation details.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nN/A (Link to external file provided)\n```\n\n----------------------------------------\n\nTITLE: News Aggregator Example in JavaScript\nDESCRIPTION: This example script demonstrates how to build a news aggregator using AgentQL in JavaScript. It is located in the `examples/js/news-aggregator` directory of the AgentQL repository. Refer to the linked script for implementation details.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nN/A (Link to external file provided)\n```\n\n----------------------------------------\n\nTITLE: News Aggregator Example in Python\nDESCRIPTION: This example script demonstrates how to build a news aggregator using AgentQL in Python. It is located in the `examples/python/news-aggregator` directory of the AgentQL repository. Refer to the linked script for implementation details.\nSOURCE: https://github.com/tinyfish-io/agentql/blob/main/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nN/A (Link to external file provided)\n```"
  }
]