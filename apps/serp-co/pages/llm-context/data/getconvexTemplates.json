[
  {
    "owner": "get-convex",
    "repo": "templates",
    "content": "TITLE: Defining a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to define a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments: a number and a string.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/convex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows how to validate arguments, read from the database, and process data before returning it.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start/convex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function shows database querying patterns and argument validation using Convex's type system.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-astro/convex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Example of a Convex query function that demonstrates argument validation, database querying, and data processing. The function accepts numeric and string parameters and returns database documents.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-bare/convex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This snippet demonstrates how to define a mutation function in Convex. It includes argument validation and database insertion. The function takes two string arguments and inserts a new message into the database.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/convex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Example of a Convex mutation function that handles database writes. Shows argument validation and how to insert data into the database with return values.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start/convex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Demonstrates creating a mutation function that modifies the database. Shows how to validate arguments, insert data, and return results from the mutation.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-astro/convex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a Convex mutation function that demonstrates argument validation and database modifications. The function accepts two string parameters, inserts a document, and returns the inserted record.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-bare/convex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet shows how to use a Convex mutation function in a React component. It demonstrates two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/convex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, showing both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start/convex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Shows how to use a Convex mutation function in a React component using the useMutation hook. Includes examples of both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-astro/convex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-bare/convex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component. It uses the useQuery hook to fetch data, passing the required arguments to the function.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/convex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start/convex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-astro/convex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-bare/convex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Templates via NPM\nDESCRIPTION: Command to create a new Convex project using the npm create command, which will set up a Convex project with a template of your choice.\nSOURCE: https://github.com/get-convex/templates/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create convex@latest\n```\n\n----------------------------------------\n\nTITLE: Initialize Basic Convex Project\nDESCRIPTION: Basic command to create a new Convex project using the npm create command. This will launch an interactive prompt for project configuration.\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm create convex@latest\n```\n\n----------------------------------------\n\nTITLE: Create Convex Project with Template\nDESCRIPTION: Creates a new Convex project with a specified template using the -t (--template) flag. This example uses the 'bare' template.\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create convex@latest my-app -- -t bare\n```\n\n----------------------------------------\n\nTITLE: Creating a new Convex project with Next.js, Clerk, and shadcn/ui template\nDESCRIPTION: Command to generate a new project using Convex's CLI tool with a template that includes Next.js, Clerk authentication, Tailwind CSS, and shadcn/ui components.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-nextjs-clerk-shadcn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create convex@latest -t nextjs-clerk-shadcn\n```\n\n----------------------------------------\n\nTITLE: Creating a New Convex Project with Next.js, Lucia, and shadcn/ui Template\nDESCRIPTION: Command to initialize a new project using the Convex CLI with a template that includes Next.js, Lucia authentication, Tailwind CSS, and shadcn/ui components.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-nextjs-lucia-shadcn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create convex@latest -t nextjs-lucia-shadcn\n```\n\n----------------------------------------\n\nTITLE: Creating a New Convex Project with React Template\nDESCRIPTION: Command to generate a new Convex project using the react-vite-clerk-shadcn template. This sets up the initial project structure with all the integrated technologies.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-react-vite-clerk-shadcn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create convex@latest -t react-vite-clerk-shadcn\n```\n\n----------------------------------------\n\nTITLE: Using Convex Sharded Counter Component (TypeScript)\nDESCRIPTION: TypeScript code demonstrating how to initialize and use the Convex Sharded Counter component in a Convex project.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-component/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { components } from \"./_generated/api\";\nimport { ShardedCounter } from \"@convex-dev/sharded-counter\";\n\nconst shardedCounter = new ShardedCounter(components.shardedCounter, {\n  ...options,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Sharded Counter Component (TypeScript)\nDESCRIPTION: TypeScript code to configure the Convex Sharded Counter component in a Convex project's convex.config.ts file.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-component/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/convex.config.ts\nimport { defineApp } from \"convex/server\";\nimport shardedCounter from \"@convex-dev/sharded-counter/convex.config\";\n\nconst app = defineApp();\napp.use(shardedCounter);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing withConvexProvider Function in TypeScript/React\nDESCRIPTION: Implementation of the withConvexProvider higher-order component that initializes a shared Convex client and wraps components with ConvexProvider. Includes type definitions for Props extending JSX.IntrinsicAttributes.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-astro/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialized once so all components share the same client.\nconst client = new ConvexReactClient(CONVEX_URL);\n\nexport function withConvexProvider<Props extends JSX.IntrinsicAttributes>(\n  Component: FunctionComponent<Props>,\n) {\n  return function WithConvexProvider(props: Props) {\n    return (\n      <ConvexProvider client={client}>\n        <Component {...props} />\n      </ConvexProvider>\n    );\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using withConvexProvider Component Wrapper in TypeScript/React\nDESCRIPTION: Example usage of withConvexProvider HOC to wrap a React component with Convex context. Shows how to apply the provider wrapper to a CommentForm component.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-astro/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// CommentForm.tsx\nexport default withConvexProvider(function CommentForm() {\n    ... normal component code ...\n});\n```\n\n----------------------------------------\n\nTITLE: Create Convex Project from GitHub Template\nDESCRIPTION: Creates a new Convex project using a GitHub repository as a template by specifying the owner and repository name.\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm create convex@latest my-app -- -t thomasballinger/convex-clerk-users-table\n```\n\n----------------------------------------\n\nTITLE: Create Convex Project from GitHub Branch\nDESCRIPTION: Creates a new Convex project using a specific branch from a GitHub repository template.\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm create convex@latest my-app -- -t 'thomasballinger/convex-clerk-users-table#branch'\n```\n\n----------------------------------------\n\nTITLE: Create Convex Project in Current Directory\nDESCRIPTION: Initializes a new Convex project in the current directory using '.' as the project name.\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm create convex@latest .\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Sharded Counter Component (npm)\nDESCRIPTION: Command to install the Convex Sharded Counter component package using npm.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-component/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @convex-dev/sharded-counter\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Astro Template via NPM\nDESCRIPTION: Shell command to create a new Convex project using the Astro template through the create-convex CLI tool.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-astro/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm create convex@latest my-app -- --template astro\n```\n\n----------------------------------------\n\nTITLE: Creating a New Convex Project\nDESCRIPTION: Command to initialize a new Convex project using the 'bare' template which includes TypeScript and ESLint support.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-bare/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm create convex@latest -t bare\n```\n\n----------------------------------------\n\nTITLE: Running Convex Functions via CLI\nDESCRIPTION: Command to execute a Convex function named 'myQuery' with JSON parameters using the Convex CLI.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-bare/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex run myFunctions:myQuery '{\"first\": 1, \"second\": \"Hello\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Convex Development Server\nDESCRIPTION: Command to start the Convex development server after setting up Clerk authentication.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-tanstack-start-clerk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment for Convex\nDESCRIPTION: Instructions for installing dependencies and starting local development environment for Convex templates.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\ncd example\nnpm i\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Type Checks for Convex Project\nDESCRIPTION: Commands for building, type checking, testing, and linting the project including the example directory.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm run typecheck\nnpm run test\ncd example\nnpm run lint\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Building the Convex CLI\nDESCRIPTION: Commands to build the create-convex CLI tool from source\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd create-convex\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Testing the Convex CLI - Basic Usage\nDESCRIPTION: Command to test the basic functionality of the CLI tool by running it directly from the build output\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode <path to here>/create-convex/dist/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Testing the Convex CLI - With Template Argument\nDESCRIPTION: Command to test the CLI tool with a specific template argument for React with Vite and shadcn\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode <path to here>/create-convex/dist/index.mjs -t react-vite-shadcn\n```\n\n----------------------------------------\n\nTITLE: Installing Bun Package Manager\nDESCRIPTION: Command to globally install the Bun package manager using npm.\nSOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g bun\n```\n\n----------------------------------------\n\nTITLE: Building One-off Package for Convex\nDESCRIPTION: Commands to build and create a local package for testing purposes.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: Cloning Templates Repository\nDESCRIPTION: Command to clone the templates repository with all submodules.\nSOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --recurse-submodules https://github.com/get-convex/templates/\n```\n\n----------------------------------------\n\nTITLE: Using Convex CLI via NPM Create\nDESCRIPTION: Command to run the CLI tool using npm create, with required -- separator for passing arguments\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm create convex -- -t react-vite-shadcn\n```\n\n----------------------------------------\n\nTITLE: Publishing the Convex CLI\nDESCRIPTION: Series of commands to version bump, commit, tag and publish a new patch release of the CLI tool to npm\nSOURCE: https://github.com/get-convex/templates/blob/main/create-convex/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd create-convex\nnpm version patch\ngit commit -a -m <version number>\ngit tag v<version number>\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Deploying New Version of Convex Package\nDESCRIPTION: Steps for versioning, validating, and publishing a new package version to npm registry with git tag pushing.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# this will change the version and commit it (if you run it in the root directory)\nnpm version patch\nnpm publish --dry-run\n# sanity check files being included\nnpm publish\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Publishing Alpha Release of Convex Package\nDESCRIPTION: Commands for creating and publishing an alpha pre-release version of the package.\nSOURCE: https://github.com/get-convex/templates/blob/main/template-component/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm version prerelease --preid alpha\nnpm publish --tag alpha\n```\n\n----------------------------------------\n\nTITLE: Git Configuration Settings\nDESCRIPTION: Git configuration settings for automatic remote branch tracking and reference updating during rebasing.\nSOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[push]\n\tautoSetupRemote = true\n[rebase]\n   updateRefs = true\n```\n\n----------------------------------------\n\nTITLE: Pulling Repository Updates\nDESCRIPTION: Command to pull updates for both main repository and submodules.\nSOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit pull --recurse-submodules\n```\n\n----------------------------------------\n\nTITLE: Template Change Absorption\nDESCRIPTION: Command sequence for absorbing changes into a template's history.\nSOURCE: https://github.com/get-convex/templates/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd template-foo\njust absorb-prepare\n```"
  }
]