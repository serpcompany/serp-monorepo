[
  {
    "owner": "azuread",
    "repo": "microsoft-authentication-library-for-android",
    "content": "TITLE: Acquiring a Token Interactively with MSAL\nDESCRIPTION: Java code to acquire an authentication token interactively, prompting the user to sign in. Includes building AcquireTokenParameters and handling authentication callbacks.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal AcquireTokenParameters.Builder builder = new AcquireTokenParameters.Builder();\nbuilder.startAuthorizationFromActivity(activity)\n        .withScopes(scopes)\n        .withCallback(getAuthInteractiveCallback());\nfinal AcquireTokenParameters parameters = builder.build();\nmMultipleAccountApp.acquireToken(parameters);\n\n...\n\nprivate AuthenticationCallback getAuthInteractiveCallback() {\n    return new AuthenticationCallback() {\n        @Override\n        public void onSuccess(IAuthenticationResult authenticationResult) {\n            /* Successfully got a token, use it to call a protected resource */\n            String accessToken = authenticationResult.getAccessToken();\n            // Record account used to acquire token\n            mFirstAccount = authenticationResult.getAccount();\n        }\n        @Override\n        public void onError(MsalException exception) {\n            if (exception instanceof MsalClientException) {\n                //An exception from the client (MSAL)\n            } else if (exception instanceof MsalServiceException) {\n                //An exception from the server\n            }\n        }\n        @Override\n        public void onCancel() {\n            /* User canceled the authentication */\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Token Silently with MSAL\nDESCRIPTION: Java code to acquire an authentication token silently (without user interaction) using a previously authenticated account. This should be executed on a worker thread.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n//On a worker thread\nIAccount account = mMultipleAccountApp.getAccount(mFirstAccount.getId());\n\nif(account != null){\n    //Now that we know the account is still present in the local cache or not the device (broker authentication)\n\n    //Request token silently\n    String[] newScopes = {\"Calendars.Read\"};\n    \n    String authority = mMultipleAccountApp.getConfiguration().getDefaultAuthority().getAuthorityURL().toString();\n\n    //Use default authority to request token from pass null\n    final AcquireTokenSilentParameters.Builder builder = new AcquireTokenSilentParameters.Builder();\n    builder.forAccount(account)\n            .withScopes(newScopes)\n            .fromAuthority(authority);\n    final AcquireTokenSilentParameters parameters = builder.build();\n    final IAuthenticationResult result = mMultipleAccountApp.acquireTokenSilent(parameters);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MultipleAccountPublicClientApplication in MSAL\nDESCRIPTION: Java code to initialize a MultipleAccountPublicClientApplication instance that handles multiple accounts within the same application. This is the entry point for MSAL functionality.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString[] scopes = {\"User.Read\"};\nIMultipleAccountPublicClientApplication mMultipleAccountApp = null;\nIAccount mFirstAccount = null;\n\nPublicClientApplication.createMultipleAccountPublicClientApplication(getContext(),\n    R.raw.msal_config,\n    new IPublicClientApplication.IMultipleAccountApplicationCreatedListener() {\n        @Override\n        public void onCreated(IMultipleAccountPublicClientApplication application) {\n            mMultipleAccountApp = application;\n        }\n\n        @Override\n        public void onError(MsalException exception) {\n            //Log Exception Here\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest.xml for MSAL\nDESCRIPTION: XML configuration required in the AndroidManifest.xml to enable MSAL authentication, including necessary permissions and intent filter for handling redirect URIs.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!--Intent filter to capture authorization code response from the default browser on the device calling back to our app after interactive sign in -->\n<activity\n    android:name=\"com.microsoft.identity.client.BrowserTabActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data\n            android:scheme=\"msauth\"\n            android:host=\"<YOUR_PACKAGE_NAME>\"\n            android:path=\"/<YOUR_BASE64_ENCODED_PACKAGE_SIGNATURE>\" />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Creating MSAL Configuration File\nDESCRIPTION: Sample JSON configuration file for MSAL that should be placed as a raw resource. It contains client ID and redirect URI configuration needed for authentication.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"client_id\" : \"<YOUR_CLIENT_ID>\",\n  \"redirect_uri\" : \"msauth://<YOUR_PACKAGE_NAME>/<YOUR_BASE64_URL_ENCODED_PACKAGE_SIGNATURE>\",\n  \"broker_redirect_uri_registered\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PoP Authentication Scheme in MSAL Token Acquisition\nDESCRIPTION: Java code example showing how to configure AcquireTokenParameters with PoP authentication scheme. Includes specifying the HTTP method, URL, and optional nonce value required for PoP token acquisition.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nAcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n         .startAuthorizationFromActivity(activity)\n         .withScopes(...)\n         .withLoginHint(....)\n         .withPrompt(...)\n         .withCallback(...)\n         .withAuthenticationScheme(\n             PoPAuthenticationScheme.builder()\n                 .withMethod(HttpMethod.GET) // The HTTP method used to request the resource\n                 .withUrl(url) // The URL of the resource server\n                 .withNonce(nonce) // Optional nonce value\n                 .build()\n         ).build()\n\nAuthenticationResultFuture result = pca.acquireToken(parameters);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authorization Header from Authentication Result\nDESCRIPTION: Java code example demonstrating how to get the complete Authorization header value from the authentication result, which includes both the authentication scheme prefix and the Signed HTTP Request (SHR) token.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onSuccess(final IAuthenticationResult authenticationResult) {\n    // The below value contains both the SHR and the auth scheme as a prefix\n    // ex: PoP eyJhbGciOiJSU(...)\n    final String authorizationHeader = authenticationResult.getAuthorizationHeader();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MSAL Dependency in Gradle\nDESCRIPTION: Configure the app's build.gradle file to include the MSAL library dependency and necessary repository sources.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation 'com.microsoft.identity.client:msal:4.9.+'\n}\n```\n\nLANGUAGE: gradle\nCODE:\n```\nmaven { \n    url 'https://pkgs.dev.azure.com/MicrosoftDeviceSDK/DuoSDK-Public/_packaging/Duo-SDK-Feed/maven/v1' \n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SHR Token from Authentication Result\nDESCRIPTION: Java code example showing how to extract just the Signed HTTP Request (SHR) token from the authentication result without the authentication scheme prefix.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onSuccess(final IAuthenticationResult authenticationResult) {\n    // Uses the existing MSAL method, this method returns the SHR minus any scheme-prefix.\n    final String shr = authenticationResult.getAccessToken();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authentication Scheme from Authentication Result\nDESCRIPTION: Java code example demonstrating how to get the authentication scheme (e.g., \"Bearer\", \"pop\") used for acquiring the token from the authentication result.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void onSuccess(final IAuthenticationResult authenticationResult) {\n    // Returns \"Bearer\", \"pop\", or whichever scheme was used to acquire this token\n    // Note that authentication scheme prefixes are case insensitive\n    final String scheme = authenticationResult.getAuthenticationScheme();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL for Proof of Possession via app_config.json\nDESCRIPTION: JSON configuration required to enable PoP authentication in MSAL Android. Sets the minimum required broker protocol version to 4.0 or higher to support PoP functionality.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/access_token-pop.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\" : \"4b0db8c2-9f26-4417-8bde-3f0e3656f8e0\",\n  \"redirect_uri\" : \"msauth://com.microsoft.identity.client.sample.local/1wIqXSqBj7w%2Bh11ZifsnqwgyKrY%3D\",\n  \"broker_redirect_uri_registered\": true,\n  \"minimum_required_broker_protocol_version\" : \"4.0\",\n  \"authorities\" : [\n    {\n      \"type\": \"AAD\",\n      \"audience\": {\n        \"type\": \"AzureADandPersonalMicrosoftAccount\"\n      },\n      \"default\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IAccountCredentialCache Interface in Java for Microsoft Authentication Library\nDESCRIPTION: This code snippet defines the IAccountCredentialCache interface, which provides methods for CRUD operations and filtering of accounts and credentials in the cache. It includes methods for saving and retrieving individual accounts and credentials, as well as methods for retrieving filtered lists based on various criteria.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/tokencache.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Account & Credential cache interface.\n */\npublic interface IAccountCredentialCache {\n\n    /**\n     * Saves the supplied Account in the cache.\n     *\n     * @param account The Account to save.\n     */\n    void saveAccount(final AccountRecord account);\n\n    /**\n     * Saves the supplied Credential in the cache.\n     *\n     * @param credential The Credential to save.\n     */\n    void saveCredential(final Credential credential);\n\n    /**\n     * Gets the Account saved for the supplied cache key.\n     *\n     * @param cacheKey The cache key to use when consulting the cache.\n     * @return The saved Account or null if no cache entry exists.\n     */\n    AccountRecord getAccount(final String cacheKey);\n\n    /**\n     * Gets the Credential saved for the supplied cache key.\n     *\n     * @param cacheKey The cache key to use when consulting the cache.\n     * @return The saved Credential or null if no cache entry exists.\n     */\n    Credential getCredential(final String cacheKey);\n\n    /**\n     * Returns all of the Accounts saved in the cache.\n     *\n     * @return The saved Accounts.\n     */\n    List<AccountRecord> getAccounts();\n\n    /**\n     * Returns all of the Accounts matching the supplied criteria.\n     *\n     * @param homeAccountId The homeAccountId used to match Account cache keys.\n     * @param environment   The environment used to match Account cache keys.\n     * @param realm         The realm used to match Account cache keys.\n     * @return A mutable List of Accounts matching the supplied criteria.\n     */\n    List<AccountRecord> getAccountsFilteredBy(\n            final String homeAccountId,\n            final String environment,\n            final String realm\n    );\n\n    /**\n     * Returns all of the Credentials saved in the cache.\n     *\n     * @return A mutable List of saved Credentials.\n     */\n    List<Credential> getCredentials();\n\n    /**\n     * Returns all of the Credentials matching the supplied criteria.\n     *\n     * @param homeAccountId  The homeAccountId used to match Credential cache keys.\n     * @param environment    The environment used to match Credential cache keys.\n     * @param credentialType The sought CredentialType.\n     * @param clientId       The clientId used to match Credential cache keys.\n     * @param realm          The realm used to match Credential cache keys.\n     * @param target         The target used to match Credential cache keys.\n     * @return A mutable List of Credentials matching the supplied criteria.\n     */\n    List<Credential> getCredentialsFilteredBy(\n            final String homeAccountId,\n            final String environment,\n            final CredentialType credentialType,\n            final String clientId,\n            final String realm,\n            final String target,\n            final String authScheme\n    );\n\n    /**\n     * Returns all of the Credentials matching the supplied criteria from the supplied List.\n     * <p>\n     * This API added to cut around repeat calls to getCredentials(), which is expensive.\n     *\n     * @param homeAccountId  The homeAccountId used to match Credential cache keys.\n     * @param environment    The environment used to match Credential cache keys.\n     * @param credentialType The sought CredentialType.\n     * @param clientId       The clientId used to match Credential cache keys.\n     * @param realm          The realm used to match Credential cache keys.\n     * @param target         The target used to match Credential cache keys.\n     * @return A mutable List of Credentials matching the supplied criteria.\n     */\n    List<Credential> getCredentialsFilteredBy(\n            final String homeAccountId,\n            final String environment,\n            final CredentialType credentialType,\n            final String clientId,\n            final String realm,\n            final String target,\n            final String authScheme,\n            final List<Credential> inputCredentials\n    );\n\n    /**\n     * Returns all of the Credentials matching the supplied criteria.\n     *\n     * @param homeAccountId   The homeAccountId used to match Credential cache keys.\n     * @param environment     The environment used to match Credential cache keys.\n     * @param credentialType  The sought CredentialType.\n     * @param clientId        The clientId used to match Credential cache keys.\n     * @param realm           The realm used to match Credential cache keys.\n     * @param target          The target used to match Credential cache keys.\n     * @param requestedClaims The requested claims used to match Credential cache keys.\n     * @return A mutable List of Credentials matching the supplied criteria.\n     */\n    List<Credential> getCredentialsFilteredBy(\n            final String homeAccountId,\n            final String environment,\n            final CredentialType credentialType,\n            final String clientId,\n            final String realm,\n            final String target,\n            final String authScheme,\n            final String requestedClaims\n    );\n\n    /**\n     * Returns all of the Credentials matching the supplied criteria.\n     *\n     * @param homeAccountId   The homeAccountId used to match Credential cache keys.\n     * @param environment     The environment used to match Credential cache keys.\n     * @param credentialTypes The sought CredentialTypes.\n     * @param clientId        The clientId used to match Credential cache keys.\n     * @param realm           The realm used to match Credential cache keys.\n     * @param target          The target used to match Credential cache keys.\n     * @param requestedClaims The requested claims used to match Credential cache keys.\n     * @return A mutable List of Credentials matching the supplied criteria.\n     */\n    List<Credential> getCredentialsFilteredBy(\n            final String homeAccountId,\n            final String environment,\n            final Set<CredentialType> credentialTypes,\n            final String clientId,\n            final String realm,\n            final String target,\n            final String authScheme,\n            final String requestedClaims\n    );\n\n    /**\n     * Removes the supplied Account from the cache.\n     *\n     * @param accountToRemove The Account to delete.\n     * @return True if the Account was deleted. False otherwise.\n     */\n    boolean removeAccount(final AccountRecord accountToRemove);\n\n    /**\n     * Removes the supplied Credential from the cache.\n     *\n     * @param credentialToRemove The Credential to delete.\n     * @return True if the Credential was deleted. False otherwise.\n     */\n    boolean removeCredential(final Credential credentialToRemove);\n\n    /**\n     * Clear the contents of the cache.\n     */\n    void clearAll();\n\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth2TokenCache Save Method Definition\nDESCRIPTION: Abstract method definition for saving credentials and tokens returned by the service to the cache, including strategy, request, and response parameters.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/tokencache.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/**\n     * Saves the credentials and tokens returned by the service to the cache.\n     *\n     * @param oAuth2Strategy The strategy used to create the token request.\n     * @param request        The request used to acquire tokens and credentials.\n     * @param response       The response received from the IdP/STS.\n     * @return The {@link ICacheRecord} containing the Account + Credentials saved to the cache.\n     * @throws ClientException If tokens cannot be successfully saved.\n     */\n    public abstract ICacheRecord save(final T oAuth2Strategy,\n                                      final U request,\n                                      final V response) throws ClientException;\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated WebViewClient Error Handlers in Java\nDESCRIPTION: Shows how to implement both deprecated and new versions of onReceivedError callback in WebViewClient for cross-API compatibility. Demonstrates proper method overriding, annotation usage, and common error handling implementation for Android API levels 16-29.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/maintainer-best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyWebViewClient extends WebViewClient {\n\n    @Override\n    @SuppressWarnings(\"deprecation\") // Suppress warnings, if required by your build\n    public void onReceivedError(@NonNull final WebView view,\n                                final int errorCode,\n                                @NonNull final String description,\n                                @NonNull final String failingUrl) {\n        handleError();\n    }\n\n    @Override\n    @RequiresApi(api = Build.VERSION_CODES.M) // Annotate the API where available\n    public void onReceivedError(@NonNull final WebView view,\n                                @NonNull final WebResourceRequest request,\n                                @NonNull WebResourceError error) {\n        handleError();\n    }\n\n    private void handleError() {\n        // Perform whatever action, implementation is now common across API levels\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Token Response Properties Required by MSAL in Markdown\nDESCRIPTION: This snippet presents a markdown table listing the token response properties required by MSAL, including access_token, token_type, expires_in, scope, refresh_token, id_token, and client_info. It provides details on the expected format and description for each property.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/b2c_required_artifacts_and_claims.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Artifact          | Expected Format              | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n|-------------------|------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `access_token`    | String (JWT)                 | The requested access token. The app can use this token to authenticate to the secured resource, such as a web API.                                                                                                                                                                                                                                                                                                                                                                 |\n| `token_type`      | String                       | Indicates the token type such a 'Bearer'.                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `expires_in`      | Numeric                      | How long the access token is valid (in seconds).                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `scope`           | String                       | The scopes for which the access token is valid.                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| `refresh_token`   | String                       | An OAuth 2.0 refresh token. The app can use this token to acquire additional access tokens after the current access token expires.<br><br>Refresh tokens are long-lived and can be used to retain access to resources for extended periods of time. `offline_access` must be requested to obtain this token.<br><br>**Please Note:** Single Page Applications (SPAs) should not request `offline_access` as these apps will be issued a refresh token with a 24H validity period by default. |\n| `id_token`        | String (JWT)                 | The app can decode this token to discover information about the signed-in user. The app may cache this token and use its contents for display purposes.                                                                                                                                                                                                                                                                                                                            |\n| `client_info`     | String (base64 encoded JSON) | Automatically provided by B2C IdP. Metadata about the user and their tenant.                                                                                                                                                                                                                                                                                                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Displaying ID Token Claims Required by MSAL Libraries in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the ID token claims required by MSAL libraries. It includes claims for user identification (sub or oid) and username/email (preferred_username, email, emails, or upn), along with their expected formats and descriptions.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/b2c_required_artifacts_and_claims.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Claim                                                                                                     | Expected Format | Description                                                                                                |\n|-----------------------------------------------------------------------------------------------------------|-----------------|---------------------------------------------------------------------------------------------------------|\n| One or more of:<br>- `sub`<br>- `oid`                                                                     | String          | A locally unique identifier within the issuer for the end-user.                                            |\n| One or more of:<br>- `preferred_username`<br>- `email`<br>- `emails` (Applies to MSAL-JS only)<br>- `upn` | String          | If no value is returned, MSAL client libraries will use a default value: `MISSING_FROM_THE_TOKEN_RESPONSE` |\n```\n\n----------------------------------------\n\nTITLE: Cache Key Value Delegate Interface\nDESCRIPTION: Interface definition for generating cache keys and values for accounts and credentials, including methods for serialization and deserialization.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/tokencache.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface ICacheKeyValueDelegate {\n    /**\n     * Generate cache key for a specific account.\n     *\n     * @param account Account\n     * @return String\n     */\n    String generateCacheKey(final AccountRecord account);\n\n    /**\n     * Generate cache value for a specific account.\n     *\n     * @param account Account\n     * @return String\n     */\n    String generateCacheValue(final AccountRecord account);\n\n    /**\n     * Generate cache key from the credential.\n     *\n     * @param credential Credential\n     * @return String\n     */\n    String generateCacheKey(final Credential credential);\n\n    /**\n     * Generate cache value from the credential.\n     *\n     * @param credential Credential\n     * @return String\n     */\n    String generateCacheValue(final Credential credential);\n\n    /**\n     * Get the account credential from cache value.\n     *\n     * @param string String\n     * @param t      AccountCredentialBase\n     * @param <T>    Generic type\n     * @return AccountCredentialBase\n     */\n    <T extends AccountCredentialBase> T fromCacheValue(final String string, Class<? extends AccountCredentialBase> t);\n```\n\n----------------------------------------\n\nTITLE: Token Cache Class Hierarchy Diagram\nDESCRIPTION: Mermaid class diagram showing the inheritance hierarchy of OAuth2TokenCache implementations including MSAL, ADAL, and other specialized cache types.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/tokencache.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n        OAuth2TokenCache <|-- MsalOAuth2TokenCache\n        OAuth2TokenCache <|-- AdalOAuth2TokenCache\n        OAuth2TokenCache <|-- MicrosoftFamilyOAuth2TokenCache\n        OAuth2TokenCache <|-- MsalCPPOAuth2TokeCache\n        OAuth2TokenCache <|-- TestOAuth2TokenCache\n```\n\n----------------------------------------\n\nTITLE: Account and Credential Record Object Hierarchy\nDESCRIPTION: Mermaid class diagram showing the inheritance structure of account and credential record objects, all inheriting from AccountCredentialBase.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/tokencache.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n        AccountCredentialBase <|-- AccessTokenRecord\n        AccountCredentialBase <|-- AccountRecord\n        AccountCredentialBase <|-- Credential\n        AccountCredentialBase <|-- IdTokenRecord\n        AccountCredentialBase <|-- PrimaryRefreshTokenRecord\n        AccountCredentialBase <|-- RefreshTokenRecord\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodule for MSAL Android Common Module\nDESCRIPTION: A series of git commands to update the common submodule. The process involves changing to the common directory, checking out the dev branch (or another appropriate branch), pulling the latest changes, returning to the parent directory, and committing the changes.\nSOURCE: https://github.com/azuread/microsoft-authentication-library-for-android/blob/dev/docs/submodule-update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n cd common\n git checkout dev\n git pull\n cd ..\n git add common\n git commit\n```"
  }
]