[
  {
    "owner": "plantuml",
    "repo": "plantuml",
    "content": "TITLE: Main Project Documentation in Markdown\nDESCRIPTION: Core documentation file that outlines project details, licensing, implementation warnings, and integration guidelines for PlantUML.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PlantUML : a free UML diagram generator\n\n---\n\n(C) Copyright 2009-2019, Arnaud Roques\nProject Info: [http://plantuml.com](http://plantuml.com)\n\nThis file is part of PlantUML.\n\nPlantUML is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nPlantUML distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\nLicense for more details.\n\nYou should have received a copy of the GNU General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\nUSA.\n\nJava is a trademark or registered trademark of Sun Microsystems, Inc.\nin the United States and other countries.\n\nOriginal Author: Arnaud Roques\n\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Conventional Commit Message Format in PlantUML Project\nDESCRIPTION: This snippet shows the standard format for conventional commits, including the optional scope, description, URL list, body, and footers. The format helps create consistent and meaningful commit messages across the project.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/CONVENTIONAL_COMMIT.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<emoji>[optional scope]: <description>\n[optional URL list]\n[optional body]\n[optional footer(s)]\n```\n\n----------------------------------------\n\nTITLE: Creating Git Version Tag for PlantUML Release\nDESCRIPTION: Commands for creating and pushing a version tag to trigger a new PlantUML release. The tag must start with 'v' and be pushed directly to the repository, not through a pull request.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/docs/releasing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v1.2021.1 -m \"version 1.2021.1\"\ngit push origin v1.2021.1\n```\n\n----------------------------------------\n\nTITLE: Building PlantUML with Gradle\nDESCRIPTION: Gradle command to build the PlantUML project, creating necessary output files in the build directory.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/BUILDING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngradle build\n```\n\n----------------------------------------\n\nTITLE: PlantUML Class Diagram Definition with Graph Components\nDESCRIPTION: Defines a class structure for a graph system with positioning capabilities, clustering, and path handling. The diagram shows inheritance relationships, compositions, and associations between various components including Positionable, Clusterable, Cluster, Path, Label, and GraphvizSolver classes.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/posimo/data.txt#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\ninterface Positionable {\n\t+ Dimension2D getSize();\n\t+ Point2D getPosition();\n}\n\ninterface Clusterable {\n\t+Cluster getParent();\n}\n\nPositionable <|-- Clusterable\n\nclass Cluster\n\nCluster *-- Cluster : subclusters\nClusterable <|.. Cluster\nCluster *-- Block\nClusterable <|.. Block\n\nPath *-- \"2\" Cluster\nPath --> Label : has one\nPositionable <|-- Label\n\nSimpleDrawer --> Cluster\nSimpleDrawer *--> Path\n\nclass GraphvizSolver {\n + Dimension2D solve(Cluster root, Collection<Path> paths)\n}\nGraphvizSolver --> Cluster\nGraphvizSolver *--> Path\n\n'Clusterable --> Cluster : Parent\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Visualizing JsonValue Class Hierarchy with Mermaid\nDESCRIPTION: A Mermaid flowchart showing the inheritance hierarchy of JsonValue class and its derived classes in the PlantUML JSON package. The chart shows JsonValue as the parent class with six child classes: JSON_Number, JSON_String, JSON_Boolean, JSON_Null, JSON_Array, and JSON_Object.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/json/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nJ[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonValue.java'>JsonValue</a>]\nJ --> JI[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonNumber.java'>JSON_Number</a>]\nJ --> JS[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonString.java'>JSON_String</a>]\nJ --> JB[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/Json.java'>JSON_Boolean</a>]\nJ --> JN[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/Json.java'>JSON_Null</a>]\nJ --> JA[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonArray.java'>JSON_Array</a>]\nJ --> JO[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonObject.java'>JSON_Object</a>]\n```\n\n----------------------------------------\n\nTITLE: Enabling SVG Interactivity in PlantUML\nDESCRIPTION: This snippet demonstrates how to enable interactive SVG features in a PlantUML diagram using the svginteractive pragma option.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/resources/svg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n!pragma svginteractive true\n...\n```\n\n----------------------------------------\n\nTITLE: Logical and Mathematical Functions in PlantUML\nDESCRIPTION: Basic logical and mathematical operations including negation, random number generation, and current time retrieval.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_30\n\nLANGUAGE: plantuml\nCODE:\n```\n%not(2+2==4)\n%now()\n%random()\n%random(5)\n%random(7, 15)\n```\n\n----------------------------------------\n\nTITLE: Note for Java developers in V2017.08\nDESCRIPTION: Notice about method renaming in the SourceStringReader class where generateDiagramDescription methods were renamed to generateImage.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/CHANGES.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSourceStringReader.generateDiagramDescription() -> SourceStringReader.generateImage()\n```\n\n----------------------------------------\n\nTITLE: Running All PlantUML Tests with Gradle\nDESCRIPTION: Command to execute all test suites across all licenses in the PlantUML project using Gradle.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/docs/TESTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngradle test\n```\n\n----------------------------------------\n\nTITLE: Creating PlantUML JAR File with Gradle\nDESCRIPTION: Gradle command to generate a JAR file of the PlantUML project, which will be created in the build/libs directory.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/BUILDING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngradle jar\n```\n\n----------------------------------------\n\nTITLE: Utility Functions in PlantUML\nDESCRIPTION: Utility functions for version information, Unicode value retrieval, and type conversion.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_34\n\nLANGUAGE: plantuml\nCODE:\n```\n%version()\n%ord(\"A\")\n%string(1 + 2)\n%size(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Running PlantUML Cypher Preprocessing\nDESCRIPTION: Command to preprocess a PlantUML file using the -cypher option, which generates a .preproc output file from the input .puml file.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/syntax/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar plantuml.jar -cypher file.puml\n```\n\n----------------------------------------\n\nTITLE: Running PlantUML Tests with Gradle\nDESCRIPTION: Gradle command to execute the test suite included with the PlantUML project.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/BUILDING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngradle test\n```\n\n----------------------------------------\n\nTITLE: Configuring PlantUML Java Application Manifest\nDESCRIPTION: Manifest file that defines the Java application configuration for PlantUML. It specifies required JAR dependencies including ELK, Batik, Apache FOP, and other libraries. Sets the main class to net.sourceforge.plantuml.Run and defines the automatic module name.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/manifest.txt#2025-04-21_snippet_0\n\nLANGUAGE: java-manifest\nCODE:\n```\nManifest-Version: 1.0\nClass-Path: elk-full.jar avalon-framework-4.2.0.jar batik-all-1.7.jar commons-io-1.3.1.jar commons-logging-1.0.4.jar fop.jar xml-apis-ext-1.3.04.jar xmlgraphics-commons-1.4.jar jlatexmath-minimal-1.0.3.jar jlm_cyrillic.jar jlm_greek.jar vizjs.jar j2v8_win32_x86_64-3.1.6.jar j2v8_linux_x86_64-3.1.6.jar j2v8_macosx_x86_64-3.1.6.jar ditaa0_9.jar\nMain-Class: net.sourceforge.plantuml.Run\nAutomatic-Module-Name: net.sourceforge.plantuml\n```\n\n----------------------------------------\n\nTITLE: Color Manipulation Functions in PlantUML\nDESCRIPTION: Functions for color operations including lightening colors, reversing colors using RGB or HSLuv color spaces.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_32\n\nLANGUAGE: plantuml\nCODE:\n```\n%lighten(\"red\", 20)\n%reverse_color(\"#FF7700\")\n%reverse_hsluv_color(\"#FF7700\")\n```\n\n----------------------------------------\n\nTITLE: PlantUML URL Directory Structure\nDESCRIPTION: Markdown documentation outlining the URL package structure and its purpose within PlantUML, including links to official documentation.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/url/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Directory Documentation for `url`\n\n## Description\nThis package provides classes used to manage `URL`, `CMap`.\n\n## Link\n- [PlantUML Link (URL)](https://plantuml.com/link)\n\n## Reference\n\n## Credit\n\n## Misc.\n```\n\n----------------------------------------\n\nTITLE: PlantUML Release Version Headers\nDESCRIPTION: Version headers from the changelog showing release dates and version numbers for PlantUML updates\nSOURCE: https://github.com/plantuml/plantuml/blob/master/CHANGES.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## V1.2023.2 (February 26, 2023)\n## V1.2023.1 (January 29, 2023)\n## V1.2023.0 (January 9, 2023)\n## V1.2022.14 (December 6, 2022)\n## V1.2022.13 (November 19, 2022)\n```\n\n----------------------------------------\n\nTITLE: Running Specific PlantUML Test Class\nDESCRIPTION: Command to run a single test class in PlantUML after configuring license settings.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/docs/TESTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngradle test --tests aTestClass\n```\n\n----------------------------------------\n\nTITLE: Using get_all_stdlib Function in PlantUML\nDESCRIPTION: Retrieves a JSON Array of all PlantUML stdlib names or a JSON Object of all PlantUML stdlib information.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_15\n\nLANGUAGE: PlantUML\nCODE:\n```\n%get_all_stdlib()\n```\n\nLANGUAGE: PlantUML\nCODE:\n```\n%get_all_stdlib(detailed)\n```\n\n----------------------------------------\n\nTITLE: Navigating to PlantUML Project Directory\nDESCRIPTION: Command to change the current directory to the root of the cloned PlantUML project.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/BUILDING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd plantuml\n```\n\n----------------------------------------\n\nTITLE: Defining PlantUML License Header in Java\nDESCRIPTION: Multi-line comment block containing PlantUML's LGPL license terms, copyright notice, attribution requirements, and third-party acknowledgments. Includes details about image ownership, usage rights, and dependencies like GraphViz.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/plantuml-lgpl/lgpl-license.txt#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/* +=======================================================================\n * |\n * |      PlantUML : a free UML diagram generator\n * |\n * +=======================================================================\n *\n * (C) Copyright 2009-2024, Arnaud Roques\n *\n * Project Info:  https://plantuml.com\n *\n * If you like this project or if you find it useful, you can support us at:\n *\n * https://plantuml.com/patreon (only 1$ per month!)\n * https://plantuml.com/liberapay (only 1€ per month!)\n * https://plantuml.com/paypal\n *\n *\n * PlantUML is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * PlantUML distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this library.  If not, see <https://www.gnu.org/licenses/>.\n *\n * PlantUML can occasionally display sponsored or advertising messages. Those\n * messages are usually generated on welcome or error images and never on\n * functional diagrams.\n * See https://plantuml.com/professional if you want to remove them\n *\n * Images (whatever their format : PNG, SVG, EPS...) generated by running PlantUML\n * are owned by the author of their corresponding sources code (that is, their\n * textual description in PlantUML language). Those images are not covered by\n * this LGPL license.\n *\n * The generated images can then be used without any reference to the LGPL license.\n * It is not even necessary to stipulate that they have been generated with PlantUML,\n * although this will be appreciated by the PlantUML team.\n *\n * There is an exception : if the textual description in PlantUML language is also covered\n * by any license, then the generated images are logically covered\n * by the very same license.\n *\n * This is the IGY distribution (Install GraphViz by Yourself).\n * You have to install GraphViz and to setup the GRAPHVIZ_DOT environment variable\n * (see https://plantuml.com/graphviz-dot )\n *\n * Icons provided by OpenIconic :  https://useiconic.com/open\n * Archimate sprites provided by Archi :  http://www.archimatetool.com\n * Stdlib AWS provided by https://github.com/milo-minderbinder/AWS-PlantUML\n * Stdlib Icons provided https://github.com/tupadr3/plantuml-icon-font-sprites\n * ASCIIMathML (c) Peter Jipsen http://www.chapman.edu/~jipsen\n * ASCIIMathML (c) David Lippman http://www.pierce.ctc.edu/dlippman\n * CafeUndZopfli ported by Eugene Klyuchnikov https://github.com/eustas/CafeUndZopfli\n * Brotli (c) by the Brotli Authors https://github.com/google/brotli\n * Themes (c) by Brett Schwarz https://github.com/bschwarz/puml-themes\n * Twemoji (c) by Twitter at https://twemoji.twitter.com/\n *\n */\n```\n\n----------------------------------------\n\nTITLE: PlantUML License Header Comment\nDESCRIPTION: Project header comment containing EPL license details, usage terms, distribution information, and third-party attributions for the PlantUML project\nSOURCE: https://github.com/plantuml/plantuml/blob/master/plantuml-epl/epl-license.txt#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/* +=======================================================================\n * |\n * |      PlantUML : a free UML diagram generator\n * |\n * +=======================================================================\n *\n * (C) Copyright 2009-2024, Arnaud Roques\n *\n * Project Info:  https://plantuml.com\n *\n * If you like this project or if you find it useful, you can support us at:\n *\n * https://plantuml.com/patreon (only 1$ per month!)\n * https://plantuml.com/liberapay (only 1€ per month!)\n * https://plantuml.com/paypal\n *\n *\n * PlantUML is free software; you can redistribute it and/or modify it\n * under the terms of the Eclipse Public License.\n *\n * THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC\n * LICENSE (\"AGREEMENT\"). [Eclipse Public License - v 1.0]\n *\n * ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES\n * RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n *\n * You may obtain a copy of the License at\n *\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * PlantUML can occasionally display sponsored or advertising messages. Those\n * messages are usually generated on welcome or error images and never on\n * functional diagrams.\n * See https://plantuml.com/professional if you want to remove them\n *\n * Images (whatever their format : PNG, SVG, EPS...) generated by running PlantUML\n * are owned by the author of their corresponding sources code (that is, their\n * textual description in PlantUML language). Those images are not covered by\n * this EPL license.\n *\n * The generated images can then be used without any reference to the EPL license.\n * It is not even necessary to stipulate that they have been generated with PlantUML,\n * although this will be appreciated by the PlantUML team.\n *\n * There is an exception : if the textual description in PlantUML language is also covered\n * by any license, then the generated images are logically covered\n * by the very same license.\n *\n * This is the IGY distribution (Install GraphViz by Yourself).\n * You have to install GraphViz and to setup the GRAPHVIZ_DOT environment variable\n * (see https://plantuml.com/graphviz-dot )\n *\n * Icons provided by OpenIconic :  https://useiconic.com/open\n * Archimate sprites provided by Archi :  http://www.archimatetool.com\n * Stdlib AWS provided by https://github.com/milo-minderbinder/AWS-PlantUML\n * Stdlib Icons provided https://github.com/tupadr3/plantuml-icon-font-sprites\n * ASCIIMathML (c) Peter Jipsen http://www.chapman.edu/~jipsen\n * ASCIIMathML (c) David Lippman http://www.pierce.ctc.edu/dlippman\n * CafeUndZopfli ported by Eugene Klyuchnikov https://github.com/eustas/CafeUndZopfli\n * Brotli (c) by the Brotli Authors https://github.com/google/brotli\n * Themes (c) by Brett Schwarz https://github.com/bschwarz/puml-themes\n * Twemoji (c) by Twitter at https://twemoji.twitter.com/\n *\n */\n```\n\n----------------------------------------\n\nTITLE: TValue Class Hierarchy Diagram in Mermaid\nDESCRIPTION: A flowchart showing the inheritance hierarchy of the TValue class and its relationship with various JSON value types. Illustrates how TValue can represent Integer, String, and different JSON value types including numbers, strings, booleans, null values, arrays and objects.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nA[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/tim/expression/TValue.java'>TValue</a>]\nA --> I[Integer]\nA --> S[String]\nA ---> J[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonValue.java'>JsonValue</a>]\nJ --> JI[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonNumber.java'>JSON_Number</a>]\nJ --> JS[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonString.java'>JSON_String</a>]\nJ --> JB[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/Json.java'>JSON_Boolean</a>]\nJ --> JN[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/Json.java'>JSON_Null</a>]\nJ --> JA[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonArray.java'>JSON_Array</a>]\nJ --> JO[<a href='https://github.com/plantuml/plantuml/blob/master/src/net/sourceforge/plantuml/json/JsonObject.java'>JSON_Object</a>]\n```\n\n----------------------------------------\n\nTITLE: PlantUML License Header Comment Block\nDESCRIPTION: Comprehensive license header for PlantUML containing copyright notice, license terms, attribution requirements, and third-party acknowledgments. Includes important notes about image ownership and GraphViz dependency.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/plantuml-asl/asl-license.txt#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/* +=======================================================================\n * |\n * |      PlantUML : a free UML diagram generator\n * |\n * +=======================================================================\n *\n * (C) Copyright 2009-2024, Arnaud Roques\n *\n * Project Info:  https://plantuml.com\n *\n * If you like this project or if you find it useful, you can support us at:\n *\n * https://plantuml.com/patreon (only 1$ per month!)\n * https://plantuml.com/liberapay (only 1€ per month!)\n * https://plantuml.com/paypal\n *\n *\n * PlantUML is free software; you can redistribute it and/or modify it\n * under the terms of the Apache Software License.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * PlantUML can occasionally display sponsored or advertising messages. Those\n * messages are usually generated on welcome or error images and never on\n * functional diagrams.\n * See https://plantuml.com/professional if you want to remove them\n *\n * Images (whatever their format : PNG, SVG, EPS...) generated by running PlantUML\n * are owned by the author of their corresponding sources code (that is, their\n * textual description in PlantUML language). Those images are not covered by\n * this APACHE license.\n *\n * The generated images can then be used without any reference to the APACHE license.\n * It is not even necessary to stipulate that they have been generated with PlantUML,\n * although this will be appreciated by the PlantUML team.\n *\n * There is an exception : if the textual description in PlantUML language is also covered\n * by any license, then the generated images are logically covered\n * by the very same license.\n *\n * This is the IGY distribution (Install GraphViz by Yourself).\n * You have to install GraphViz and to setup the GRAPHVIZ_DOT environment variable\n * (see https://plantuml.com/graphviz-dot )\n *\n * Icons provided by OpenIconic :  https://useiconic.com/open\n * Archimate sprites provided by Archi :  http://www.archimatetool.com\n * Stdlib AWS provided by https://github.com/milo-minderbinder/AWS-PlantUML\n * Stdlib Icons provided https://github.com/tupadr3/plantuml-icon-font-sprites\n * ASCIIMathML (c) Peter Jipsen http://www.chapman.edu/~jipsen\n * ASCIIMathML (c) David Lippman http://www.pierce.ctc.edu/dlippman\n * CafeUndZopfli ported by Eugene Klyuchnikov https://github.com/eustas/CafeUndZopfli\n * Brotli (c) by the Brotli Authors https://github.com/google/brotli\n * Themes (c) by Brett Schwarz https://github.com/bschwarz/puml-themes\n * Twemoji (c) by Twitter at https://twemoji.twitter.com/\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Concatenated Text Block with ### Delimiter\nDESCRIPTION: Shows how the ### delimiter concatenates multiple lines into a single continuous string without line breaks.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_3\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : ###012\n   345\n   678### <<blue>>   \n```\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : 012345678 <<blue>>   \n```\n\n----------------------------------------\n\nTITLE: Embedding PlantUML in Java - Problem Example\nDESCRIPTION: Demonstrates the potential conflict when using triple quotes for both Java and PlantUML delimiters.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nString diagram = \"\"\"\nAlice -> Bob : \"\"\"\n   345\n   678\"\"\" <<blue>>   \n\"\"\";\n```\n\n----------------------------------------\n\nTITLE: Class Diagram for Positioning Calculation Module\nDESCRIPTION: A comprehensive mermaid class diagram showing the relationship between various components of the posimo package. It illustrates inheritance relationships between Positionable, Clusterable, Cluster, and Block classes, as well as composition relationships with Path and Label classes. The diagram also includes the GraphvizSolver class which is responsible for solving positioning calculations.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/posimo/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nclass Positionable {\n\t+ Dimension2D getSize();\n\t+ Point2D getPosition();\n}\n\nclass Clusterable {\n\t+Cluster getParent();\n}\n\nPositionable <|-- Clusterable\n\nclass Cluster\n\nCluster *-- Cluster : subclusters\nClusterable <|.. Cluster\nCluster *-- Block\nClusterable <|.. Block\n\nPath *-- \"2\" Cluster\nPath --> Label : has one\nPositionable <|-- Label\n\nSimpleDrawer --> Cluster\nSimpleDrawer *--> Path\n\nclass GraphvizSolver {\n + Dimension2D solve(Cluster root, Collection~Path~ paths)\n}\nGraphvizSolver --> Cluster\nGraphvizSolver *--> Path\n```\n\n----------------------------------------\n\nTITLE: Basic Multiline Text Block in PlantUML\nDESCRIPTION: Demonstrates basic multiline text block syntax using triple quotes, preserving line breaks and indentation in the output.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : \"\"\"012\n                  345\n                  678\"\"\" <<blue>>   \n```\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : 012%newline()345%newline()678 <<blue>>   \n```\n\n----------------------------------------\n\nTITLE: Space-Preserving Text Block with !!! Delimiter\nDESCRIPTION: Demonstrates how spaces are preserved at the beginning of lines using the !!! delimiter.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_2\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : !!!012\n    345\n   678!!! <<blue>>   \n```\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : 012%newline() 345%newline()678 <<blue>>   \n```\n\n----------------------------------------\n\nTITLE: Markdown Text Block Type Example\nDESCRIPTION: Shows how to use Markdown syntax within a text block for rich text formatting including tables.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_5\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : !!markdown!\n| **Column A** | *Column B* |\n|--------------|------------|\n| Value 1      | Value 2    |\n| Value 3      | *Value 4*  |\n   !!! <<blue>>   \n```\n\n----------------------------------------\n\nTITLE: Running PlantUML Language Command\nDESCRIPTION: Command to list PlantUML language elements including types, keywords, preprocessors, skin parameters, and colors using the -language option.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/syntax/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar plantuml.jar -language\n```\n\n----------------------------------------\n\nTITLE: Embedding PlantUML in Java - Solution Example\nDESCRIPTION: Shows how using distinct PlantUML delimiters (!!! instead of \"\"\") resolves delimiter conflicts in Java code.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nString diagram = \"\"\"\nAlice -> Bob : !!!012\n   345\n   678!!! <<blue>>   \n\"\"\";\n```\n\n----------------------------------------\n\nTITLE: Legacy Newline Function Example\nDESCRIPTION: Shows the existing %newline() function that remains supported for backward compatibility.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_6\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : 012%newline()345%newline()678 <<blue>>   \n```\n\n----------------------------------------\n\nTITLE: Variable Management Functions in PlantUML\nDESCRIPTION: Functions for managing global variables including setting values and checking variable existence.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_33\n\nLANGUAGE: plantuml\nCODE:\n```\n%set_variable_value(\"$my_variable\", \"some_value\")\n%variable_exists(\"$my_variable\")\n```\n\n----------------------------------------\n\nTITLE: Using call_user_func Function in PlantUML\nDESCRIPTION: Invokes a return function by its name with given arguments.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: PlantUML\nCODE:\n```\n%call_user_func(\"bold\", \"Hello\")\n```\n\n----------------------------------------\n\nTITLE: String Manipulation Functions in PlantUML\nDESCRIPTION: Functions for string operations including length calculation, case conversion, substring extraction, and string splitting.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_31\n\nLANGUAGE: plantuml\nCODE:\n```\n%strlen(\"foo\")\n%upper(\"Hello\")\n%substr(\"abcdef\", 3, 2)\n%splitstr(\"abc~def~ghi\", \"~\")\n%splitstr_regex(\"AbcDefGhi\", \"(?=[A-Z])\")\n%strpos(\"abcdef\", \"ef\")\n```\n\n----------------------------------------\n\nTITLE: Using invoke_procedure Function in PlantUML\nDESCRIPTION: Dynamically invokes a procedure by its name, passing optional arguments to the called procedure.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_21\n\nLANGUAGE: PlantUML\nCODE:\n```\n%invoke_procedure(\"$go\", \"hello from Bob...\")\n```\n\n----------------------------------------\n\nTITLE: Using date Function in PlantUML\nDESCRIPTION: Retrieves current date. Optional format and epoch time can be provided.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_6\n\nLANGUAGE: PlantUML\nCODE:\n```\n%date(\"yyyy.MM.dd' at 'HH:mm\")\n```\n\nLANGUAGE: PlantUML\nCODE:\n```\n%date(\"YYYY-MM-dd\", %now() + 1*24*3600)\n```\n\n----------------------------------------\n\nTITLE: Creating PlantUML JAR with PDF Support using Gradle\nDESCRIPTION: Gradle command to create a JAR file of PlantUML with PDF output support enabled.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/BUILDING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngradle pdfJar\n```\n\n----------------------------------------\n\nTITLE: Using boolval Function in PlantUML\nDESCRIPTION: Converts a value (String, Integer, JSON value) to a boolean value.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: PlantUML\nCODE:\n```\n%boolval(\"true\")\n```\n\n----------------------------------------\n\nTITLE: Using load_json Function in PlantUML\nDESCRIPTION: Loads JSON data from local file or external URL.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_25\n\nLANGUAGE: PlantUML\nCODE:\n```\n%load_json(\"http://localhost:7778/management/health\")\n```\n\n----------------------------------------\n\nTITLE: Using get_all_theme Function in PlantUML\nDESCRIPTION: Retrieves a JSON Array of all PlantUML themes.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_14\n\nLANGUAGE: PlantUML\nCODE:\n```\n%get_all_theme()\n```\n\n----------------------------------------\n\nTITLE: Using getenv Function in PlantUML\nDESCRIPTION: Retrieves environment variable value.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_17\n\nLANGUAGE: PlantUML\nCODE:\n```\n%getenv(\"OS\")\n```\n\n----------------------------------------\n\nTITLE: Using darken Function in PlantUML\nDESCRIPTION: Returns a darkened color of a given color with some ratio.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: PlantUML\nCODE:\n```\n%darken(\"red\", 20)\n```\n\n----------------------------------------\n\nTITLE: Using hsl_color Function in PlantUML\nDESCRIPTION: Returns the RGBa color from a HSL color.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_19\n\nLANGUAGE: PlantUML\nCODE:\n```\n%hsl_color(120, 100, 50)\n```\n\n----------------------------------------\n\nTITLE: Using intval Function in PlantUML\nDESCRIPTION: Converts a String to Int.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_20\n\nLANGUAGE: PlantUML\nCODE:\n```\n%intval(\"42\")\n```\n\n----------------------------------------\n\nTITLE: Test Directory Structure Visualization\nDESCRIPTION: Mermaid flowchart showing the PlantUML test directory organization including unit tests and non-regression tests.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/docs/TESTING.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{ init : { \"flowchart\" : { \"curve\" : \"stepBefore\" }}}%%\ngraph LR\nT[\"test/\"]\nT -->|\"Unit Test\\n(of src/com/plantuml/api/cheerpj)\"| W[\"com/plantuml/wasm\"]\nT -->|\"Unit Test\\n(of src/net/sourceforge/plantuml)\"| U[\"net/sourceforge/plantuml\"]\nT -->|\"Non-regression Test\"| N[nonreg]\n```\n\n----------------------------------------\n\nTITLE: Using dec2hex Function in PlantUML\nDESCRIPTION: Returns the hexadecimal string (String) of a decimal value (Int).\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_7\n\nLANGUAGE: PlantUML\nCODE:\n```\n%dec2hex(12)\n```\n\n----------------------------------------\n\nTITLE: Using is_dark Function in PlantUML\nDESCRIPTION: Checks if a color is a dark one.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_22\n\nLANGUAGE: PlantUML\nCODE:\n```\n%is_dark(\"#000000\")\n```\n\n----------------------------------------\n\nTITLE: Using is_light Function in PlantUML\nDESCRIPTION: Checks if a color is a light one.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_23\n\nLANGUAGE: PlantUML\nCODE:\n```\n%is_light(\"#000000\")\n```\n\n----------------------------------------\n\nTITLE: Using lighten Function in PlantUML\nDESCRIPTION: Returns a lightened color of a given color with some ratio.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_24\n\nLANGUAGE: PlantUML\nCODE:\n```\n%lighten(\"red\", 20)\n```\n\n----------------------------------------\n\nTITLE: Using mod Function in PlantUML\nDESCRIPTION: Returns the remainder of division of two integers (modulo division).\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_27\n\nLANGUAGE: PlantUML\nCODE:\n```\n%mod(10, 3)\n```\n\n----------------------------------------\n\nTITLE: Using lower Function in PlantUML\nDESCRIPTION: Returns a lowercase string.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_26\n\nLANGUAGE: PlantUML\nCODE:\n```\n%lower(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Using get_variable_value Function in PlantUML\nDESCRIPTION: Retrieves some variable value.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_16\n\nLANGUAGE: PlantUML\nCODE:\n```\n%get_variable_value(\"$my_variable\")\n```\n\n----------------------------------------\n\nTITLE: Using function_exists Function in PlantUML\nDESCRIPTION: Checks if a function exists.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_13\n\nLANGUAGE: PlantUML\nCODE:\n```\n%function_exists(\"$some_function\")\n```\n\n----------------------------------------\n\nTITLE: Using file_exists Function in PlantUML\nDESCRIPTION: Checks if a file exists on the local filesystem.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_11\n\nLANGUAGE: PlantUML\nCODE:\n```\n%file_exists(\"c:/foo/dummy.txt\")\n```\n\n----------------------------------------\n\nTITLE: Using feature Function in PlantUML\nDESCRIPTION: Checks if some feature is available in the current PlantUML running version.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_9\n\nLANGUAGE: PlantUML\nCODE:\n```\n%feature(\"theme\")\n```\n\n----------------------------------------\n\nTITLE: Using newline Function in PlantUML\nDESCRIPTION: Returns a newline in rendered text, similar to %n. More documentation is available on the newline page.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_29\n\nLANGUAGE: PlantUML\nCODE:\n```\n%newline()\n```\n\n----------------------------------------\n\nTITLE: Using chr Function in PlantUML\nDESCRIPTION: Returns a character from a given Unicode value.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: PlantUML\nCODE:\n```\n%chr(65)\n```\n\n----------------------------------------\n\nTITLE: Using n Function in PlantUML\nDESCRIPTION: Returns a newline in rendered text, similar to %newline. More documentation is available on the newline page.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_28\n\nLANGUAGE: PlantUML\nCODE:\n```\n%n()\n```\n\n----------------------------------------\n\nTITLE: Using false Function in PlantUML\nDESCRIPTION: Always returns false.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_10\n\nLANGUAGE: PlantUML\nCODE:\n```\n%false()\n```\n\n----------------------------------------\n\nTITLE: Raw Text Block Type Example\nDESCRIPTION: Demonstrates raw text block type that prevents markup parsing and displays characters exactly as written.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_4\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : ##raw#**|4|**### <<blue>>   \n```\n\n----------------------------------------\n\nTITLE: Using breakline Function in PlantUML\nDESCRIPTION: Returns a newline in the PlantUML source code. More documentation is available on the newline page.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: PlantUML\nCODE:\n```\n%breakline()\n```\n\n----------------------------------------\n\nTITLE: Cloning PlantUML Repository with Git\nDESCRIPTION: Command to clone the PlantUML repository from GitHub to the local system using Git.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/BUILDING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/plantuml/plantuml.git\n```\n\n----------------------------------------\n\nTITLE: Building PlantUML with Ant\nDESCRIPTION: Ant command to build the PlantUML project using the provided build.xml script, as an alternative to Gradle.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/BUILDING.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nant\n```\n\n----------------------------------------\n\nTITLE: Using dirpath Function in PlantUML\nDESCRIPTION: Retrieves current dirpath.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_8\n\nLANGUAGE: PlantUML\nCODE:\n```\n%dirpath()\n```\n\n----------------------------------------\n\nTITLE: Using filename Function in PlantUML\nDESCRIPTION: Retrieves current filename.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_12\n\nLANGUAGE: PlantUML\nCODE:\n```\n%filename()\n```\n\n----------------------------------------\n\nTITLE: Alternative Multiline Text Block with Less Indentation\nDESCRIPTION: Shows how the same multiline text block can be written with reduced indentation while maintaining the same output.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/PROPOSAL.md#2025-04-21_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\nAlice -> Bob : \"\"\"012\n   345\n   678\"\"\" <<blue>>   \n```\n\n----------------------------------------\n\nTITLE: Using hex2dec Function in PlantUML\nDESCRIPTION: Returns the decimal value (Int) of a hexadecimal string (String).\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_18\n\nLANGUAGE: PlantUML\nCODE:\n```\n%hex2dec(\"d\")\n```\n\nLANGUAGE: PlantUML\nCODE:\n```\n%hex2dec(d)\n```\n\n----------------------------------------\n\nTITLE: Markdown Directory Header\nDESCRIPTION: Markdown header identifying the builtin directory documentation section\nSOURCE: https://github.com/plantuml/plantuml/blob/master/src/main/java/net/sourceforge/plantuml/tim/builtin/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Directory Documentation for `builtin`\n```\n\n----------------------------------------\n\nTITLE: PlantUML License Header Block in Java\nDESCRIPTION: Java source file header block containing the MIT license terms, copyright information, and third-party attributions for the PlantUML project.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/plantuml-mit/mit-license.txt#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/* +=======================================================================\n * |\n * |      PlantUML : a free UML diagram generator\n * |\n * +=======================================================================\n *\n * (C) Copyright 2009-2024, Arnaud Roques\n *\n * Project Info:  https://plantuml.com\n *\n * If you like this project or if you find it useful, you can support us at:\n *\n * https://plantuml.com/patreon (only 1$ per month!)\n * https://plantuml.com/liberapay (only 1€ per month!)\n * https://plantuml.com/paypal\n *\n *\n * PlantUML is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License.\n *\n * See http://opensource.org/licenses/MIT\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\n * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * PlantUML can occasionally display sponsored or advertising messages. Those\n * messages are usually generated on welcome or error images and never on\n * functional diagrams.\n * See https://plantuml.com/professional if you want to remove them\n *\n * Images (whatever their format : PNG, SVG, EPS...) generated by running PlantUML\n * are owned by the author of their corresponding sources code (that is, their\n * textual description in PlantUML language). Those images are not covered by\n * this MIT license.\n *\n * The generated images can then be used without any reference to the MIT license.\n * It is not even necessary to stipulate that they have been generated with PlantUML,\n * although this will be appreciated by the PlantUML team.\n *\n * There is an exception : if the textual description in PlantUML language is also covered\n * by any license, then the generated images are logically covered\n * by the very same license.\n *\n * This is the IGY distribution (Install GraphViz by Yourself).\n * You have to install GraphViz and to setup the GRAPHVIZ_DOT environment variable\n * (see https://plantuml.com/graphviz-dot )\n *\n * Icons provided by OpenIconic :  https://useiconic.com/open\n * Archimate sprites provided by Archi :  http://www.archimatetool.com\n * Stdlib AWS provided by https://github.com/milo-minderbinder/AWS-PlantUML\n * Stdlib Icons provided https://github.com/tupadr3/plantuml-icon-font-sprites\n * ASCIIMathML (c) Peter Jipsen http://www.chapman.edu/~jipsen\n * ASCIIMathML (c) David Lippman http://www.pierce.ctc.edu/dlippman\n * CafeUndZopfli ported by Eugene Klyuchnikov https://github.com/eustas/CafeUndZopfli\n * Brotli (c) by the Brotli Authors https://github.com/google/brotli\n * Themes (c) by Brett Schwarz https://github.com/bschwarz/puml-themes\n * Twemoji (c) by Twitter at https://twemoji.twitter.com/\n *\n */\n```\n\n----------------------------------------\n\nTITLE: License and Attribution Header Comment Block\nDESCRIPTION: Comprehensive header comment block containing GPL v2 license information, usage terms, attribution credits, and important notes about PlantUML's licensing model and third-party components.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/plantuml-gplv2/gplv2-license.txt#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/* +=======================================================================\n * |\n * |      PlantUML : a free UML diagram generator\n * |\n * +=======================================================================\n *\n * (C) Copyright 2009-2024, Arnaud Roques\n *\n * Project Info:  https://plantuml.com\n *\n * If you like this project or if you find it useful, you can support us at:\n *\n * https://plantuml.com/patreon (only 1$ per month!)\n * https://plantuml.com/liberapay (only 1€ per month!)\n * https://plantuml.com/paypal\n *\n *\n * PlantUML is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License V2.\n *\n * THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC\n * LICENSE (\"AGREEMENT\"). [GNU General Public License V2]\n *\n * ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES\n * RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n *\n * You may obtain a copy of the License at\n *\n * https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * PlantUML can occasionally display sponsored or advertising messages. Those\n * messages are usually generated on welcome or error images and never on\n * functional diagrams.\n * See https://plantuml.com/professional if you want to remove them\n *\n * Images (whatever their format : PNG, SVG, EPS...) generated by running PlantUML\n * are owned by the author of their corresponding sources code (that is, their\n * textual description in PlantUML language). Those images are not covered by\n * this GPL v2 license.\n *\n * The generated images can then be used without any reference to the GPL v2 license.\n * It is not even necessary to stipulate that they have been generated with PlantUML,\n * although this will be appreciated by the PlantUML team.\n *\n * There is an exception : if the textual description in PlantUML language is also covered\n * by any license, then the generated images are logically covered\n * by the very same license.\n *\n * This is the IGY distribution (Install GraphViz by Yourself).\n * You have to install GraphViz and to setup the GRAPHVIZ_DOT environment variable\n * (see https://plantuml.com/graphviz-dot )\n *\n * Icons provided by OpenIconic :  https://useiconic.com/open\n * Archimate sprites provided by Archi :  http://www.archimatetool.com\n * Stdlib AWS provided by https://github.com/milo-minderbinder/AWS-PlantUML\n * Stdlib Icons provided https://github.com/tupadr3/plantuml-icon-font-sprites\n * ASCIIMathML (c) Peter Jipsen http://www.chapman.edu/~jipsen\n * ASCIIMathML (c) David Lippman http://www.pierce.ctc.edu/dlippman\n * CafeUndZopfli ported by Eugene Klyuchnikov https://github.com/eustas/CafeUndZopfli\n * Brotli (c) by the Brotli Authors https://github.com/google/brotli\n * Themes (c) by Brett Schwarz https://github.com/bschwarz/puml-themes\n * Twemoji (c) by Twitter at https://twemoji.twitter.com/\n *\n */\n```\n\n----------------------------------------\n\nTITLE: No code snippets found\nDESCRIPTION: This document contains only issue tracking and release notes without actual code snippets.\nSOURCE: https://github.com/plantuml/plantuml/blob/master/CHANGES.md#2025-04-21_snippet_2\n\n"
  }
]