[
  {
    "owner": "luau-lang",
    "repo": "luau",
    "content": "TITLE: Integrating Luau into C++ Applications\nDESCRIPTION: Example code showing how to integrate Luau into a C++ application by creating a new Lua state, compiling source code to bytecode, and loading it into the VM. This is the minimum required setup for embedding Luau in an application.\nSOURCE: https://github.com/luau-lang/luau/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// needs lua.h and luacode.h\nsize_t bytecodeSize = 0;\nchar* bytecode = luau_compile(source, strlen(source), NULL, &bytecodeSize);\nint result = luau_load(L, chunkname, bytecode, bytecodeSize, 0);\nfree(bytecode);\n\nif (result == 0)\n    return 1; /* return chunk main function */\n```\n\n----------------------------------------\n\nTITLE: Configuring Luau CMake Build System with Options\nDESCRIPTION: Sets up the main CMake configuration for Luau with build options for CLI, tests, web module, warning handling, static CRT linking, and extern C APIs. Establishes minimum required CMake version and handles conditional inclusion of platform-specific files.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This file is part of the Luau programming language and is licensed under MIT License; see LICENSE.txt for details\nif(EXT_PLATFORM_STRING)\n    include(EXTLuau.cmake)\n    return()\nendif()\n\ncmake_minimum_required(VERSION 3.10)\n\noption(LUAU_BUILD_CLI \"Build CLI\" ON)\noption(LUAU_BUILD_TESTS \"Build tests\" ON)\noption(LUAU_BUILD_WEB \"Build Web module\" OFF)\noption(LUAU_WERROR \"Warnings as errors\" OFF)\noption(LUAU_STATIC_CRT \"Link with the static CRT (/MT)\" OFF)\noption(LUAU_EXTERN_C \"Use extern C for all APIs\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Defining Luau Project Libraries and Components\nDESCRIPTION: Defines the Luau project with its component libraries including Common, CLI, AST, Compiler, Config, Analysis, EqSat, CodeGen, VM, Require, RequireNavigator, and isocline. Creates the foundation for the Luau build system.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nproject(Luau LANGUAGES CXX C)\nadd_library(Luau.Common INTERFACE)\nadd_library(Luau.CLI.lib STATIC)\nadd_library(Luau.Ast STATIC)\nadd_library(Luau.Compiler STATIC)\nadd_library(Luau.Config STATIC)\nadd_library(Luau.Analysis STATIC)\nadd_library(Luau.EqSat STATIC)\nadd_library(Luau.CodeGen STATIC)\nadd_library(Luau.VM STATIC)\nadd_library(Luau.Require STATIC)\nadd_library(Luau.RequireNavigator STATIC)\nadd_library(isocline STATIC)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ic_readline Function in C\nDESCRIPTION: Demonstrates the basic usage of the ic_readline function to get user input with rich editing abilities. The code shows a loop that continuously prompts for input until NULL is returned.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nchar* input;\nwhile( (input = ic_readline(\"prompt\")) != NULL ) { // ctrl+d/c or errors return NULL\n  printf(\"you typed:\\n%s\\n\", input); // use the input\n  free(input);  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking for Luau Language\nDESCRIPTION: This code snippet defines a function 'check' that performs type checking for various Luau language constructs. It handles different types of expressions and statements, applying type inference and checking rules.\nSOURCE: https://github.com/luau-lang/luau/blob/master/tools/faillist.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid ConstraintGenerator::check(const AstExprConstantString& expr)\n{\n    TypeId t = arena->addType(TypeVar(StringSingleton{std::string(expr.value.data, expr.value.size)}));\n    addConstraint(expr.location, SingletonOrTop{TruthyPredicate::Never, TypeId(builtinTypes->stringType)}, t);\n    resolve(expr, t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Luau CLI Tools in CMake\nDESCRIPTION: Sets up compiler options and dependencies for various Luau command-line interface tools when LUAU_BUILD_CLI is enabled. This includes the REPL, code reducer, analyzer, and compiler tools.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(LUAU_BUILD_CLI)\n    target_compile_options(Luau.Repl.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Reduce.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Analyze.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Ast.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Compile.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Bytecode.CLI PRIVATE ${LUAU_OPTIONS})\n\n    target_include_directories(Luau.Repl.CLI PRIVATE extern extern/isocline/include)\n\n    target_link_libraries(Luau.Repl.CLI PRIVATE Luau.Compiler Luau.Config Luau.CodeGen Luau.VM Luau.Require Luau.CLI.lib isocline)\n\n    target_link_libraries(Luau.Repl.CLI PRIVATE osthreads)\n    target_link_libraries(Luau.Analyze.CLI PRIVATE osthreads)\n\n    target_link_libraries(Luau.Analyze.CLI PRIVATE Luau.Analysis Luau.CLI.lib Luau.RequireNavigator)\n\n    target_link_libraries(Luau.Ast.CLI PRIVATE Luau.Ast Luau.Analysis Luau.CLI.lib)\n\n    target_compile_features(Luau.Reduce.CLI PRIVATE cxx_std_17)\n    target_include_directories(Luau.Reduce.CLI PUBLIC Reduce/include)\n    target_link_libraries(Luau.Reduce.CLI PRIVATE Luau.Common Luau.Ast Luau.Analysis Luau.CLI.lib)\n\n    target_link_libraries(Luau.Compile.CLI PRIVATE Luau.Compiler Luau.VM Luau.CodeGen Luau.CLI.lib)\n\n    target_link_libraries(Luau.Bytecode.CLI PRIVATE Luau.Compiler Luau.VM Luau.CodeGen Luau.CLI.lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Executables with Conditional Build\nDESCRIPTION: Conditionally adds CLI executables when LUAU_BUILD_CLI is enabled, including tools for REPL, Analysis, AST, Reduce, Compile, and Bytecode. Sets output names for the executables with proper platform-specific extensions.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(LUAU_BUILD_CLI)\n    add_executable(Luau.Repl.CLI)\n    add_executable(Luau.Analyze.CLI)\n    add_executable(Luau.Ast.CLI)\n    add_executable(Luau.Reduce.CLI)\n    add_executable(Luau.Compile.CLI)\n    add_executable(Luau.Bytecode.CLI)\n\n    # This also adds target `name` on Linux/macOS and `name.exe` on Windows\n    set_target_properties(Luau.Repl.CLI PROPERTIES OUTPUT_NAME luau)\n    set_target_properties(Luau.Analyze.CLI PROPERTIES OUTPUT_NAME luau-analyze)\n    set_target_properties(Luau.Ast.CLI PROPERTIES OUTPUT_NAME luau-ast)\n    set_target_properties(Luau.Reduce.CLI PROPERTIES OUTPUT_NAME luau-reduce)\n    set_target_properties(Luau.Compile.CLI PROPERTIES OUTPUT_NAME luau-compile)\n    set_target_properties(Luau.Bytecode.CLI PROPERTIES OUTPUT_NAME luau-bytecode)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Function Calls in Luau\nDESCRIPTION: This snippet shows the implementation of type inference for function calls in Luau. It handles different cases of function calls, including methods and regular functions, and applies type checking rules to arguments and return types.\nSOURCE: https://github.com/luau-lang/luau/blob/master/tools/faillist.txt#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nvoid ConstraintGenerator::check(const AstExprCall& expr)\n{\n    // inferredFunctionType or annotatedFunctionType\n    TypeId fn = checkLValue(expr.func);\n\n    if (auto method = matchMethodCall(expr))\n    {\n        TypeId argTy = checkLValue(*method->self);\n        checkMethodCall(expr, fn, argTy, method->selfType, method->func);\n    }\n    else\n    {\n        checkNonMethodCall(expr, fn);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies and Include Paths\nDESCRIPTION: Sets up include directories, compiler features requirements, and dependencies between the Luau components. Specifies C++ standard requirements and establishes the relationship between different modules.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(Sources.cmake)\n\ntarget_include_directories(Luau.Common INTERFACE Common/include)\n\ntarget_compile_features(Luau.CLI.lib PUBLIC cxx_std_17)\ntarget_include_directories(Luau.CLI.lib PUBLIC CLI/include)\ntarget_link_libraries(Luau.CLI.lib PRIVATE Luau.Common Luau.Config)\n\ntarget_compile_features(Luau.Ast PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Ast PUBLIC Ast/include)\ntarget_link_libraries(Luau.Ast PUBLIC Luau.Common)\n\ntarget_compile_features(Luau.Compiler PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Compiler PUBLIC Compiler/include)\ntarget_link_libraries(Luau.Compiler PUBLIC Luau.Ast)\n\ntarget_compile_features(Luau.Config PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Config PUBLIC Config/include)\ntarget_link_libraries(Luau.Config PUBLIC Luau.Ast)\n\ntarget_compile_features(Luau.Analysis PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Analysis PUBLIC Analysis/include)\ntarget_link_libraries(Luau.Analysis PUBLIC Luau.Ast Luau.EqSat Luau.Config)\ntarget_link_libraries(Luau.Analysis PRIVATE Luau.Compiler Luau.VM)\n\ntarget_compile_features(Luau.EqSat PUBLIC cxx_std_17)\ntarget_include_directories(Luau.EqSat PUBLIC EqSat/include)\ntarget_link_libraries(Luau.EqSat PUBLIC Luau.Common)\n\ntarget_compile_features(Luau.CodeGen PRIVATE cxx_std_17)\ntarget_include_directories(Luau.CodeGen PUBLIC CodeGen/include)\ntarget_link_libraries(Luau.CodeGen PRIVATE Luau.VM Luau.VM.Internals) # Code generation needs VM internals\ntarget_link_libraries(Luau.CodeGen PUBLIC Luau.Common)\n\ntarget_compile_features(Luau.VM PRIVATE cxx_std_11)\ntarget_include_directories(Luau.VM PUBLIC VM/include)\ntarget_link_libraries(Luau.VM PUBLIC Luau.Common)\n\ntarget_compile_features(Luau.Require PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Require PUBLIC Require/Runtime/include)\ntarget_link_libraries(Luau.Require PUBLIC Luau.VM)\ntarget_link_libraries(Luau.Require PRIVATE Luau.RequireNavigator)\n\ntarget_compile_features(Luau.RequireNavigator PUBLIC cxx_std_17)\ntarget_include_directories(Luau.RequireNavigator PUBLIC Require/Navigator/include)\ntarget_link_libraries(Luau.RequireNavigator PUBLIC Luau.Config)\n\ntarget_include_directories(isocline PUBLIC extern/isocline/include)\n\ntarget_include_directories(Luau.VM.Internals INTERFACE VM/src)\n```\n\n----------------------------------------\n\nTITLE: Configuring Luau Test Suite in CMake\nDESCRIPTION: Sets up unit tests and conformance tests for the Luau project when LUAU_BUILD_TESTS is enabled. Configures compiler options, dependencies, and platform-specific paths for test resources.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(LUAU_BUILD_TESTS)\n    target_compile_options(Luau.UnitTest PRIVATE ${LUAU_OPTIONS})\n    target_compile_definitions(Luau.UnitTest PRIVATE DOCTEST_CONFIG_DOUBLE_STRINGIFY)\n    target_include_directories(Luau.UnitTest PRIVATE extern)\n    target_link_libraries(Luau.UnitTest PRIVATE Luau.Analysis Luau.Compiler Luau.CodeGen)\n\n    target_compile_options(Luau.Conformance PRIVATE ${LUAU_OPTIONS})\n    target_compile_definitions(Luau.Conformance PRIVATE DOCTEST_CONFIG_DOUBLE_STRINGIFY)\n    target_include_directories(Luau.Conformance PRIVATE extern)\n    target_link_libraries(Luau.Conformance PRIVATE Luau.Analysis Luau.Compiler Luau.CodeGen Luau.VM)\n    if(CMAKE_SYSTEM_NAME MATCHES \"Android|iOS\")\n        set(LUAU_CONFORMANCE_SOURCE_DIR \"Client/Luau/tests/conformance\")\n    else ()\n        file(REAL_PATH \"tests/conformance\" LUAU_CONFORMANCE_SOURCE_DIR)\n    endif ()\n    target_compile_definitions(Luau.Conformance PRIVATE LUAU_CONFORMANCE_SOURCE_DIR=\"${LUAU_CONFORMANCE_SOURCE_DIR}\")\n\n    target_compile_options(Luau.CLI.Test PRIVATE ${LUAU_OPTIONS})\n    target_include_directories(Luau.CLI.Test PRIVATE extern CLI)\n    target_link_libraries(Luau.CLI.Test PRIVATE Luau.Compiler Luau.Config Luau.CodeGen Luau.VM Luau.Require Luau.CLI.lib isocline)\n    target_link_libraries(Luau.CLI.Test PRIVATE osthreads)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Type Relationships in Luau\nDESCRIPTION: This function 'traverse' is part of the type checking system, specifically dealing with type relationships. It recursively traverses type structures to establish constraints and relationships between different types.\nSOURCE: https://github.com/luau-lang/luau/blob/master/tools/faillist.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvoid ConstraintGenerator::traverse(TypeId ty, const TypePath& path, LValue lvalue)\n{\n    if (auto ref = getMutable<RefType>(ty))\n    {\n        path.push_back(\"ref\");\n        traverse(ref->type, path, lvalue);\n    }\n    else if (auto t = get<TableType>(ty))\n    {\n        for (const auto& [name, prop] : t->props)\n        {\n            path.push_back(name);\n            addConstraint(scope->location,\n                SubType{prop.type(), lvalue.getSubPath(name.c_str())},\n                SubPath{ty, path});\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extern C API Support\nDESCRIPTION: Enables extern C API for VM and Compiler when LUAU_EXTERN_C is enabled, making Luau more friendly to use from non-C++ languages. Also configures longjmp for error handling.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(LUAU_EXTERN_C)\n    # enable extern \"C\" for VM (lua.h, lualib.h) and Compiler (luacode.h) to make Luau friendlier to use from non-C++ languages\n    # note that we enable LUA_USE_LONGJMP=1 as well; otherwise functions like luaL_error will throw C++ exceptions, which can't be done from extern \"C\" functions\n    target_compile_definitions(Luau.VM PUBLIC LUA_USE_LONGJMP=1)\n    target_compile_definitions(Luau.VM PUBLIC LUA_API=extern\\\"C\\\")\n    target_compile_definitions(Luau.Compiler PUBLIC LUACODE_API=extern\\\"C\\\")\n    target_compile_definitions(Luau.CodeGen PUBLIC LUACODEGEN_API=extern\\\"C\\\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Luau Web Build in CMake\nDESCRIPTION: Sets up the web build target for Luau when LUAU_BUILD_WEB is enabled. Configures Emscripten-specific options for JavaScript/WebAssembly output, including exported functions and exception handling.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(LUAU_BUILD_WEB)\n    target_compile_options(Luau.Web PRIVATE ${LUAU_OPTIONS})\n    target_link_libraries(Luau.Web PRIVATE Luau.Compiler Luau.VM)\n\n    # declare exported functions to emscripten\n    target_link_options(Luau.Web PRIVATE -sEXPORTED_FUNCTIONS=['_executeScript'] -sEXPORTED_RUNTIME_METHODS=['ccall','cwrap'])\n\n    # add -fexceptions for emscripten to allow exceptions to be caught in C++\n    target_link_options(Luau.Web PRIVATE -fexceptions)\n\n    # the output is a single .js file with an embedded wasm blob\n    target_link_options(Luau.Web PRIVATE -sSINGLE_FILE=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options and Warnings\nDESCRIPTION: Configures compiler-specific options and warnings for different compilers (MSVC, GCC, etc). Sets up warning handling, multi-core compilation, and platform-specific optimizations.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(LUAU_OPTIONS)\n\nif(MSVC)\n    list(APPEND LUAU_OPTIONS /D_CRT_SECURE_NO_WARNINGS) # We need to use the portable CRT functions.\n    list(APPEND LUAU_OPTIONS \"/we4018\") # Signed/unsigned mismatch\n    list(APPEND LUAU_OPTIONS \"/we4388\") # Also signed/unsigned mismatch\nelse()\n    list(APPEND LUAU_OPTIONS -Wall) # All warnings\n    list(APPEND LUAU_OPTIONS -Wimplicit-fallthrough)\n    list(APPEND LUAU_OPTIONS -Wsign-compare) # This looks to be included in -Wall for GCC but not clang\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    list(APPEND LUAU_OPTIONS /MP) # Distribute single project compilation across multiple cores\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    # Some gcc versions treat var in `if (type var = val)` as unused\n    # Some gcc versions treat variables used in constexpr if blocks as unused\n    list(APPEND LUAU_OPTIONS -Wno-unused)\n    # some gcc versions warn maybe uninitialized on optional<string> members on structs\n    list(APPEND LUAU_OPTIONS -Wno-maybe-uninitialized)\nendif()\n\n# Enabled in CI; we should be warning free on our main compiler versions but don't guarantee being warning free everywhere\nif(LUAU_WERROR)\n    if(MSVC)\n        list(APPEND LUAU_OPTIONS /WX) # Warnings are errors\n    else()\n        list(APPEND LUAU_OPTIONS -Werror) # Warnings are errors\n    endif()\nendif()\n\nif(LUAU_BUILD_WEB)\n    # add -fexceptions for emscripten to allow exceptions to be caught in C++\n    list(APPEND LUAU_OPTIONS -fexceptions)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Isocline Header in C/C++\nDESCRIPTION: Shows how to include the Isocline header in a C or C++ source file. This is the first step to using the Isocline library in your project.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <include/isocline.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test and Web Executables\nDESCRIPTION: Conditionally adds test and web executables based on build options. Creates UnitTest, Conformance, and CLI Test targets when testing is enabled, and adds the Web executable when web building is enabled.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(LUAU_BUILD_TESTS)\n    add_executable(Luau.UnitTest)\n    add_executable(Luau.Conformance)\n    add_executable(Luau.CLI.Test)\nendif()\n\nif(LUAU_BUILD_WEB)\n    add_executable(Luau.Web)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Formatted Output Using ic_println in C\nDESCRIPTION: Demonstrates the use of ic_println function for rich terminal output. It shows how to use BBCode-style tags for text formatting.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nic_println( \"[b]bold [red]and red[/red][/b]\" );\n```\n\n----------------------------------------\n\nTITLE: Validating Luau Component Dependencies in CMake\nDESCRIPTION: Enforces architectural dependencies between Luau components to ensure proper separation. Validates that runtime components don't depend on offline components, offline components don't depend on runtime components, and compiler components don't depend on analysis components.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(fuzz)\n\n# validate dependencies for internal libraries\nforeach(LIB Luau.Ast Luau.Compiler Luau.Config Luau.Analysis Luau.EqSat Luau.CodeGen Luau.VM)\n    if(TARGET ${LIB})\n        get_target_property(DEPENDS ${LIB} LINK_LIBRARIES)\n        if(LIB MATCHES \"CodeGen|VM\" AND DEPENDS MATCHES \"Ast|Analysis|Config|Compiler\")\n            message(FATAL_ERROR ${LIB} \" is a runtime component but it depends on one of the offline components\")\n        endif()\n        if(LIB MATCHES \"Ast|EqSat|Compiler\" AND DEPENDS MATCHES \"CodeGen|VM\")\n            message(FATAL_ERROR ${LIB} \" is an offline component but it depends on one of the runtime components\")\n        endif()\n        if(LIB MATCHES \"Ast|Compiler\" AND DEPENDS MATCHES \"Analysis|Config\")\n            message(FATAL_ERROR ${LIB} \" is a compiler component but it depends on one of the analysis components\")\n        endif()\n    endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Thread Libraries in CMake\nDESCRIPTION: Creates an interface library for OS thread support that links to pthread on Linux/Mac/iOS platforms. This ensures cross-platform threading capability for the Luau project.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# On Windows and Android threads are provided, on Linux/Mac/iOS we use pthreads\nadd_library(osthreads INTERFACE)\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux|Darwin|iOS\")\n    target_link_libraries(osthreads INTERFACE \"-lpthread\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating VM Internals Interface Library for Private Headers\nDESCRIPTION: Adds a proxy target to make it possible to depend on private VM headers, creating an interface library without implementation.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Proxy target to make it possible to depend on private VM headers\nadd_library(Luau.VM.Internals INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running the Example in C\nDESCRIPTION: Shows the command line instructions to compile and run the example program using gcc. This demonstrates how to link the Isocline library with your program.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gcc -o example -Iinclude test/example.c src/isocline.c\n$ ./example\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe Async Stop Function in C\nDESCRIPTION: Declaration of the ic_async_stop function that can be used to unblock a current ic_readline call from another thread, making it behave as if the user pressed Ctrl-C.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nbool ic_async_stop(void)\n```\n\n----------------------------------------\n\nTITLE: Defining Luau.Fuzz.Proto Executable\nDESCRIPTION: Configures the Luau.Fuzz.Proto executable target, setting compilation options, include directories, source files, and linked libraries.\nSOURCE: https://github.com/luau-lang/luau/blob/master/fuzz/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(Luau.Fuzz.Proto)\ntarget_compile_options(Luau.Fuzz.Proto PRIVATE ${FUZZ_COMPILE_OPTIONS})\ntarget_link_options(Luau.Fuzz.Proto PRIVATE ${FUZZ_LINK_OPTIONS})\ntarget_compile_features(Luau.Fuzz.Proto PRIVATE cxx_std_17)\ntarget_include_directories(Luau.Fuzz.Proto PRIVATE ${LUAU_PB_DIR} ${protobufmutator_SOURCE_DIR})\ntarget_sources(Luau.Fuzz.Proto PRIVATE ${LUAU_PB_SOURCES} proto.cpp protoprint.cpp)\ntarget_link_libraries(Luau.Fuzz.Proto PRIVATE protobuf::libprotobuf protobuf-mutator-libfuzzer protobuf-mutator Luau.Analysis Luau.Compiler Luau.Ast Luau.Config Luau.VM Luau.CodeGen)\nset_target_properties(Luau.Fuzz.Proto PROPERTIES CXX_STANDARD_REQUIRED ON CXX_EXTENSIONS OFF OUTPUT_NAME fuzz-proto)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies and Static CRT Configuration\nDESCRIPTION: Configures CMake policies for string comparisons and runtime library selection. Sets static CRT linking when enabled, requiring a more recent CMake version.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0054 NEW)\ncmake_policy(SET CMP0091 NEW)\n\nif(LUAU_STATIC_CRT)\n    cmake_minimum_required(VERSION 3.15)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Styles for Formatted Output in C\nDESCRIPTION: Shows how to define custom styles using ic_style_def function. This allows creating themed output in your application.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nic_style_def(\"warning\", \"crimson u\");\n```\n\n----------------------------------------\n\nTITLE: Using Persistent Styles in C\nDESCRIPTION: Demonstrates how to use ic_style_open and ic_style_close functions to apply styles persistently across multiple print statements.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nic_style_open(\"warning\");\nic_println(\"[b]crimson underlined and bold[/]\");\nic_style_close();\n```\n\n----------------------------------------\n\nTITLE: Configuring ProtobufMutator Dependency for Luau Fuzzer\nDESCRIPTION: Declares and configures the ProtobufMutator dependency using FetchContent, including repository URL, tag, and a custom patch.\nSOURCE: https://github.com/luau-lang/luau/blob/master/fuzz/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(\n    ProtobufMutator\n    GIT_REPOSITORY https://github.com/google/libprotobuf-mutator\n    GIT_TAG 212a7be1eb08e7f9c79732d2aab9b2097085d936\n    PATCH_COMMAND\n    git apply\n    --reverse\n    --check\n    --ignore-space-change\n    --ignore-whitespace\n    \"${CMAKE_CURRENT_SOURCE_DIR}/libprotobuf-mutator-patch.patch\"\n    ||\n    git apply\n    --ignore-space-change\n    --ignore-whitespace\n    \"${CMAKE_CURRENT_SOURCE_DIR}/libprotobuf-mutator-patch.patch\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Luau.Fuzz.ProtoTest Executable\nDESCRIPTION: Configures the Luau.Fuzz.ProtoTest executable target, setting compilation options, include directories, source files, and linked libraries.\nSOURCE: https://github.com/luau-lang/luau/blob/master/fuzz/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(Luau.Fuzz.ProtoTest)\ntarget_compile_options(Luau.Fuzz.ProtoTest PRIVATE ${FUZZ_COMPILE_OPTIONS})\ntarget_link_options(Luau.Fuzz.ProtoTest PRIVATE ${FUZZ_LINK_OPTIONS})\ntarget_compile_features(Luau.Fuzz.ProtoTest PRIVATE cxx_std_17)\ntarget_include_directories(Luau.Fuzz.ProtoTest PRIVATE ${LUAU_PB_DIR} ${protobufmutator_SOURCE_DIR})\ntarget_sources(Luau.Fuzz.ProtoTest PRIVATE ${LUAU_PB_SOURCES} prototest.cpp protoprint.cpp)\ntarget_link_libraries(Luau.Fuzz.ProtoTest PRIVATE protobuf::libprotobuf protobuf-mutator-libfuzzer protobuf-mutator)\nset_target_properties(Luau.Fuzz.ProtoTest PROPERTIES CXX_STANDARD_REQUIRED ON CXX_EXTENSIONS OFF OUTPUT_NAME fuzz-prototest)\n```\n\n----------------------------------------\n\nTITLE: Applying Compiler Options to Luau Components\nDESCRIPTION: Applies the previously defined compiler options to all Luau components, ensuring consistent compilation settings across the codebase.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(Luau.Ast PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.Analysis PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.EqSat PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.CLI.lib PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.CodeGen PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.VM PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(isocline PRIVATE ${LUAU_OPTIONS} ${ISOCLINE_OPTIONS})\n```\n\n----------------------------------------\n\nTITLE: Configuring isocline Library Options\nDESCRIPTION: Sets up special compilation options for the isocline library, particularly disabling unused function warnings for non-MSVC compilers.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(ISOCLINE_OPTIONS)\n\nif (NOT CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    list(APPEND ISOCLINE_OPTIONS -Wno-unused-function)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation and Linking Options for Fuzzing\nDESCRIPTION: Defines compilation and linking options for fuzzing, including sanitizer flags and warning suppressions.\nSOURCE: https://github.com/luau-lang/luau/blob/master/fuzz/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FUZZ_COMPILE_OPTIONS ${LUAU_OPTIONS} -fsanitize=address,fuzzer -g2 -Wno-sign-compare)\nset(FUZZ_LINK_OPTIONS ${LUAU_OPTIONS} -fsanitize=address,fuzzer)\n```\n\n----------------------------------------\n\nTITLE: Embedding Natvis Debugging Visualizers for MSVC\nDESCRIPTION: Embeds .natvis visualization files inside library debug information for MSVC compiler, enabling better debugging experience in Visual Studio for Luau components.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# embed .natvis inside the library debug information\nif(MSVC)\n    target_link_options(Luau.Ast INTERFACE /NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/tools/natvis/Ast.natvis)\n    target_link_options(Luau.Analysis INTERFACE /NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/tools/natvis/Analysis.natvis)\n    target_link_options(Luau.CodeGen INTERFACE /NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/tools/natvis/CodeGen.natvis)\n    target_link_options(Luau.VM INTERFACE /NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/tools/natvis/VM.natvis)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Math Optimization for Non-MSVC Compilers\nDESCRIPTION: Disables support for math_errno on non-MSVC compilers, allowing them to optimize sqrt() into a single CPU instruction for better performance.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT MSVC)\n    # disable support for math_errno which allows compilers to lower sqrt() into a single CPU instruction\n    target_compile_options(Luau.VM PRIVATE -fno-math-errno)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Color Test Program in C\nDESCRIPTION: Example of compiling and running the test_colors.c program to test terminal color support under different COLORTERM settings.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gcc -o test_colors -Iinclude test/test_colors.c src/isocline.c\n$ ./test_colors\n$ COLORTERM=truecolor ./test_colors\n$ COLORTERM=16color ./test_colors\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf Dependency for Luau Fuzzer\nDESCRIPTION: Declares and configures the Protobuf dependency using FetchContent, specifying the repository URL and tag.\nSOURCE: https://github.com/luau-lang/luau/blob/master/fuzz/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(\n    Protobuf\n    GIT_REPOSITORY https://github.com/protocolbuffers/protobuf.git\n    GIT_TAG v22.3\n    GIT_SHALLOW ON\n    OVERRIDE_FIND_PACKAGE\n)\n```\n\n----------------------------------------\n\nTITLE: Making Natvis Files Visible in Visual Studio Solution\nDESCRIPTION: Adds .natvis files as sources to make them visible in the Visual Studio solution explorer when using the IDE, improving discoverability of debugging tools.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# make .natvis visible inside the solution\nif(MSVC_IDE)\n    target_sources(Luau.Ast PRIVATE tools/natvis/Ast.natvis)\n    target_sources(Luau.Analysis PRIVATE tools/natvis/Analysis.natvis)\n    target_sources(Luau.CodeGen PRIVATE tools/natvis/CodeGen.natvis)\n    target_sources(Luau.VM PRIVATE tools/natvis/VM.natvis)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running the Haskell Example\nDESCRIPTION: Provides the command line instructions to compile and run the Haskell example. This shows how to use Isocline with Haskell.\nSOURCE: https://github.com/luau-lang/luau/blob/master/extern/isocline/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ghc -ihaskell test/Example.hs src/isocline.c\n$ ./test/Example\n```\n\n----------------------------------------\n\nTITLE: Checking Compiler Requirements for Luau Fuzzer\nDESCRIPTION: Verifies that the C++ compiler is Clang, which is required for building the Luau fuzzer. Displays a warning and exits if the compiler is not Clang.\nSOURCE: https://github.com/luau-lang/luau/blob/master/fuzz/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    message(WARNING \"Building the Luau fuzzer requires Clang to be used. AppleClang is not sufficient.\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Size for MSVC Debug Builds\nDESCRIPTION: Increases stack size for debug builds when using MSVC compiler and building CLI tools, as debug builds have larger stack frames that require more space.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC AND LUAU_BUILD_CLI)\n    # the default stack size that MSVC linker uses is 1 MB; we need more stack space in Debug because stack frames are larger\n    set_target_properties(Luau.Analyze.CLI PROPERTIES LINK_FLAGS_DEBUG /STACK:2097152)\n    set_target_properties(Luau.Repl.CLI PROPERTIES LINK_FLAGS_DEBUG /STACK:2097152)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies for Luau Fuzzer Build\nDESCRIPTION: Sets various CMake policies to their new versions to ensure consistent behavior across different CMake versions.\nSOURCE: https://github.com/luau-lang/luau/blob/master/fuzz/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0054 NEW)\ncmake_policy(SET CMP0058 NEW)\ncmake_policy(SET CMP0074 NEW)\ncmake_policy(SET CMP0077 NEW)\ncmake_policy(SET CMP0091 NEW)\n```\n\n----------------------------------------\n\nTITLE: Checking CMake Version for Luau Fuzzer Build\nDESCRIPTION: Checks if the CMake version is at least 3.26, which is required for building the Luau fuzzer. If the version is lower, a warning is displayed and the script exits.\nSOURCE: https://github.com/luau-lang/luau/blob/master/fuzz/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CMAKE_VERSION} VERSION_LESS \"3.26\")\n    message(WARNING \"Building the Luau fuzzer requires CMake version 3.26 or higher.\")\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting VS2022-Specific Compiler Optimizations\nDESCRIPTION: Disables partial redundancy elimination for MSVC 2022+ which can cause performance regressions in interpreter codegen. This is a workaround for a specific Visual Studio issue.\nSOURCE: https://github.com/luau-lang/luau/blob/master/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" AND MSVC_VERSION GREATER_EQUAL 1924)\n    # disable partial redundancy elimination which regresses interpreter codegen substantially in VS2022:\n    # https://developercommunity.visualstudio.com/t/performance-regression-on-a-complex-interpreter-lo/1631863\n    set_source_files_properties(VM/src/lvmexecute.cpp PROPERTIES COMPILE_FLAGS /d2ssa-pre-)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Pinned Versions\nDESCRIPTION: Lists required Python packages with specific version constraints. Each line specifies a package name and its exact version requirement using the == operator.\nSOURCE: https://github.com/luau-lang/luau/blob/master/tools/fuzz/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nJinja2==3.1.5\nMarkupSafe==2.1.3\n```"
  }
]