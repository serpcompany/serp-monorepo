[
  {
    "owner": "letta-ai",
    "repo": "letta-python",
    "content": "TITLE: Creating Agent Message with Letta Client (Python)\nDESCRIPTION: This snippet illustrates how to create and send a message to an agent using the `letta_client` library. It initializes a `Letta` client, creates a `MessageCreate` object with a user role and `TextContent`, and then calls the `create` method on the `agents.messages` object. The `agent_id` and the `messages` sequence are required parameters.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_93\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, MessageCreate, TextContent\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.messages.create(\n    agent_id=\"agent_id\",\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=[\n                TextContent(\n                    text=\"text\",\n                )\n            ],\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Letta Python Client\nDESCRIPTION: Installs the letta-client package using pip. This is the first step to using the Letta Python library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install letta-client\n```\n\n----------------------------------------\n\nTITLE: Creating Streaming Group Message with Letta Python Client\nDESCRIPTION: This example demonstrates how to send a user message to a group and stream the responses using the Letta Python client. The client is initialized, and the `client.groups.messages.create_stream()` method is called with the `group_id` and `messages` parameters. The response is a generator that yields chunks of data, allowing for streaming processing of the group's responses.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, MessageCreate, TextContent\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nresponse = client.groups.messages.create_stream(\n    group_id=\"group_id\",\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=[\n                TextContent(\n                    text=\"text\",\n                )\n            ],\n        )\n    ],\n)\nfor chunk in response:\n    yield chunk\n```\n\n----------------------------------------\n\nTITLE: Creating Batches using Letta client - Python\nDESCRIPTION: Illustrates how to create a batch of agent messages for asynchronous processing using the Letta Python client. Requires a valid Letta API token.  Agent messages are processed in parallel. The example demonstrates a nested structure for defining messages within a batch request.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, LettaBatchRequest, MessageCreate, TextContent\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.batches.create(\n    requests=[\n        LettaBatchRequest(\n            messages=[\n                MessageCreate(\n                    role=\"user\",\n                    content=[\n                        TextContent(\n                            text=\"text\",\n                        )\n                    ],\n                )\n            ],\n            agent_id=\"agent_id\",\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: List All Tools - Letta Python\nDESCRIPTION: Retrieves a list of all tools available to agents associated with the user's organization using the `client.tools.list()` method. Requires a valid Letta API token. Supports pagination with `after` and `limit` parameters.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.list()\n```\n\n----------------------------------------\n\nTITLE: Searching Agents - Letta Client Python\nDESCRIPTION: This snippet demonstrates how to search for agents using the Letta client in Python.  It initializes the Letta client and then calls the `search` method on the `agents` attribute. Replace 'YOUR_TOKEN' with a valid Letta API token. The search method can be called without arguments to retrieve all agents or with search parameters.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.search()\n\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Group - Letta Client Python\nDESCRIPTION: This snippet demonstrates how to create a new multi-agent group using the Letta client in Python. It initializes the Letta client and calls the `create` method on the `groups` attribute, passing the required parameters such as agent IDs and description. Replace 'YOUR_TOKEN' with a valid Letta API token, 'agent_ids' with a list of agent IDs, and 'description' with a description for the group.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.create(\n    agent_ids=[\"agent_ids\"],\n    description=\"description\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Run Tool From Source - Letta Python\nDESCRIPTION: Builds a tool from source code and runs it with the provided arguments using the `client.tools.run_tool_from_source()` method. Requires a valid Letta API token and source code. Supports passing arguments and environment variables to the tool execution.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.run_tool_from_source(\n    source_code=\"source_code\",\n    args={\"key\": \"value\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying an Agent - Letta Client Python\nDESCRIPTION: This snippet shows how to modify an agent using the Letta client in Python. It initializes a Letta client and then calls the `modify` method on the `agents` attribute, passing the agent's ID. Replace 'YOUR_TOKEN' with a valid Letta API token and 'agent_id' with the ID of the agent to be modified. Note that additional parameters can be passed to the `modify` method to update other agent attributes.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.modify(\n    agent_id=\"agent_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Chat Completions with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to create voice chat completions using the Letta Python client. It initializes the client with a token, then calls the `create_voice_chat_completions` method with specified parameters such as agent ID, messages, and model. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import (\n    ChatCompletionDeveloperMessageParam,\n    CompletionCreateParamsNonStreaming,\n    Letta,\n)\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.voice.create_voice_chat_completions(\n    agent_id=\"agent_id\",\n    request=CompletionCreateParamsNonStreaming(\n        messages=[\n            ChatCompletionDeveloperMessageParam(\n                content=\"content\",\n            )\n        ],\n        model=\"model\",\n    ),\n)\n\n```\n\n----------------------------------------\n\nTITLE: Create Source Python\nDESCRIPTION: This snippet shows how to create a new data source using the `create` method of the `letta_client.sources` module. It requires the `letta_client` library, a Letta API token, and the `name` parameter for the source.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.create(\n    name=\"name\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Passage in Python\nDESCRIPTION: This code snippet demonstrates how to insert a memory into an agent's archival memory store using the Letta client. The `agent_id` parameter specifies the agent to insert the memory into, and the `text` parameter provides the content of the memory. The code uses the `letta_client` library and requires a valid API token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.passages.create(\n    agent_id=\"agent_id\",\n    text=\"text\",\n)\n```\n\n----------------------------------------\n\nTITLE: Resetting Agent Messages with Letta Client (Python)\nDESCRIPTION: This snippet illustrates how to reset the message history for an agent using the `letta_client` library. It initializes a `Letta` client with an API token and calls the `reset` method on the `agents.messages` object, passing the agent's ID as a parameter. The `agent_id` is a required parameter.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_97\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.messages.reset(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Identities using Letta Python Client\nDESCRIPTION: This snippet demonstrates how to retrieve a list of identities using the Letta Python client. It initializes the client with a token and then calls the `client.identities.list()` method. No parameters are required to list all identities.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.identities.list()\n```\n\n----------------------------------------\n\nTITLE: Upsert Tool - Letta Python\nDESCRIPTION: Creates a new tool or updates an existing one using the `client.tools.upsert()` method. Requires a valid Letta API token and the tool's source code. Accepts optional parameters like description, tags, source type, and JSON schema for configuration.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.upsert(\n    source_code=\"source_code\",\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Source Files with Letta Client (Python)\nDESCRIPTION: This code snippet demonstrates how to upload a file to a data source using the `client.sources.files.upload` method. It requires the `source_id` and the `file` to be uploaded. The file parameter should follow the structure defined in `core.File`. The client needs to be initialized with a valid token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.files.upload(\n    source_id=\"source_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Runs using Letta client - Python\nDESCRIPTION: Illustrates how to list all runs using the Letta Python client. It requires a valid Letta API token. A Letta client object is initialized with the token and then client.runs.list() is called.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.runs.list()\n```\n\n----------------------------------------\n\nTITLE: Initializing Letta Client\nDESCRIPTION: Initializes the Letta client with an API token and calls the `tools.create` method.  Requires the `letta_client` package to be installed.  The `token` parameter is essential for authentication.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.create(\n    source_code=\"source_code\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Run Status using Letta client - Python\nDESCRIPTION: Demonstrates how to retrieve the status of a specific run using the Letta Python client. It requires a valid Letta API token and a run_id.  The status is retrieved for a given run_id.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.runs.retrieve(\n    run_id=\"run_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Messages with Letta Client (Python)\nDESCRIPTION: This snippet demonstrates how to retrieve message history for an agent using the `letta_client` library. It initializes a `Letta` client with an API token and calls the `list` method on the `agents.messages` object, passing the agent's ID as a parameter.  The `agent_id` is a required parameter. Other optional parameters allow filtering messages by time, quantity, and group.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_92\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.messages.list(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Passages in Python\nDESCRIPTION: This snippet shows how to retrieve the memories in an agent's archival memory store (paginated query) using the Letta client in Python. The `agent_id` parameter identifies the agent whose memories are being retrieved.  It requires a valid API `token` and installation of the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.passages.list(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing passages for a data source - Python\nDESCRIPTION: This code snippet demonstrates how to list all passages associated with a specific data source using the Letta client library. It requires the `source_id` as an input parameter. The `token` parameter needs to be set when creating the `Letta` client.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.passages.list(\n    source_id=\"source_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Message Stream with Letta Client (Python)\nDESCRIPTION: This snippet demonstrates how to create a streaming response from an agent's message using the `letta_client` library. It initializes a `Letta` client, creates a `MessageCreate` object with a user role and `TextContent`, calls the `create_stream` method on the `agents.messages` object, and iterates through the response chunks. The `agent_id` and `messages` are required. The loop is needed to process all the chunks from the stream.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, MessageCreate, TextContent\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nresponse = client.agents.messages.create_stream(\n    agent_id=\"agent_id\",\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=[\n                TextContent(\n                    text=\"text\",\n                )\n            ],\n        )\n    ],\n)\nfor chunk in response:\n    yield chunk\n```\n\n----------------------------------------\n\nTITLE: Creating an agent from a template - Python\nDESCRIPTION: This code snippet demonstrates how to create an agent from a template using the Letta client library. It requires the `project` and `template_version` as input parameters.  The `token` parameter needs to be set when creating the `Letta` client.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_117\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.templates.agents.create(\n    project=\"project\",\n    template_version=\"template_version\",\n)\n```\n\n----------------------------------------\n\nTITLE: Upsert Base Tools - Letta Python\nDESCRIPTION: Upserts the base tools using the `client.tools.upsert_base_tools()` method. Requires a valid Letta API token. This method is likely used for setting up default or essential tools.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.upsert_base_tools()\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses with Letta Client\nDESCRIPTION: Demonstrates how to create a streaming response with the Letta client. Uses `client.agents.messages.create_stream` to get a generator and iterates over it, yielding each chunk. Requires the `letta_client` package and specific classes for message creation.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, MessageCreate, TextContent\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nresponse = client.agents.messages.create_stream(\n    agent_id=\"agent_id\",\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=[\n                TextContent(\n                    text=\"text\",\n                )\n            ],\n        )\n    ],\n)\nfor chunk in response:\n    yield chunk\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Batch using Letta client - Python\nDESCRIPTION: Demonstrates how to cancel a batch run using the Letta Python client. It requires a valid Letta API token and a batch_id. The cancel() method is used to cancel a batch run, identified by its batch_id.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.batches.cancel(\n    batch_id=\"batch_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Tool by ID - Letta Python\nDESCRIPTION: Retrieves a tool by its unique identifier using the `client.tools.retrieve()` method. Requires a valid Letta API token. Returns the tool's data if found, otherwise may raise an exception.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.retrieve(\n    tool_id=\"tool_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Agent Configuration - Python\nDESCRIPTION: This code snippet demonstrates how to import a serialized agent file and recreate the agent in the system using the Letta Python client. It initializes the client with an authentication token and calls the `agents.import_file()` method. Replace 'YOUR_TOKEN' with a valid authentication token. This example assumes the agent file is correctly configured.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.import_file()\n\n```\n\n----------------------------------------\n\nTITLE: Modify Existing Tool - Letta Python\nDESCRIPTION: Updates an existing tool's attributes using the `client.tools.modify()` method. Requires a valid Letta API token and the tool's ID. Accepts optional parameters like description, tags, source code, and JSON schema for modification.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.modify(\n    tool_id=\"tool_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Multi-Agent Group using Letta Python Client\nDESCRIPTION: This snippet demonstrates how to delete a multi-agent group using the Letta Python client. It initializes the client with a token and then calls the `client.groups.delete()` method with the group ID.  The `group_id` parameter specifies the ID of the group to be deleted.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.delete(\n    group_id=\"group_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting an Identity using Letta Python Client\nDESCRIPTION: This snippet shows how to upsert (update or insert) an identity using the Letta Python client. It initializes the client with a token and then calls the `client.identities.upsert()` method.  The `identifier_key`, `name`, and `identity_type` parameters are used to identify or create the identity.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.identities.upsert(\n    identifier_key=\"identifier_key\",\n    name=\"name\",\n    identity_type=\"org\",\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Agent Passage in Python\nDESCRIPTION: This snippet demonstrates how to modify a memory (passage) in the agent's archival memory store using the Letta client in Python.  It requires the `agent_id`, `memory_id`, and `id` parameters to specify the agent and passage to modify. The `letta_client` library and a valid API token are also required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.passages.modify(\n    agent_id=\"agent_id\",\n    memory_id=\"memory_id\",\n    id=\"id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agents with Letta API - Python\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of agents associated with a given user using the Letta Python client. It initializes the Letta client with an authentication token and calls the `agents.list()` method.  No specific parameters are passed, which retrieves all agents for the user. Replace 'YOUR_TOKEN' with a valid authentication token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.list()\n\n```\n\n----------------------------------------\n\nTITLE: Deleting an Agent - Letta Client Python\nDESCRIPTION: This snippet illustrates how to delete an agent using the Letta client in Python. It initializes the Letta client with a token and calls the `delete` method on the `agents` attribute, providing the agent's ID. Replace 'YOUR_TOKEN' with your Letta API token and 'agent_id' with the ID of the agent to be deleted.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.delete(\n    agent_id=\"agent_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Group Message with Letta Python Client\nDESCRIPTION: This snippet shows how to send a user message to a group and process it using the Letta Python client. The client is initialized, and the `client.groups.messages.create()` method is called with the `group_id` and `messages` parameters. The `group_id` specifies the target group, and the `messages` parameter contains a list of `MessageCreate` objects.  Each message has a role (e.g., \"user\") and content, which can include `TextContent` objects.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_105\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, MessageCreate, TextContent\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.messages.create(\n    group_id=\"group_id\",\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=[\n                TextContent(\n                    text=\"text\",\n                )\n            ],\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Context with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to retrieve the context window of a specific agent using the Letta Python client. It initializes the client with a token, then calls the `agents.context.retrieve` method with the `agent_id`. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.context.retrieve(\n    agent_id=\"agent_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: List Sources Python\nDESCRIPTION: This snippet shows how to list all data sources created by a user using the `list` method of the `letta_client.sources` module. It requires the `letta_client` library and a Letta API token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.list()\n\n```\n\n----------------------------------------\n\nTITLE: Listing Run Messages with Letta Client (Python)\nDESCRIPTION: This code snippet demonstrates how to list messages associated with a run using the `client.runs.messages.list` method. It requires the `run_id` parameter. Optional parameters include pagination cursors (`before`, `after`), `limit` for the maximum number of messages, `order` for sorting, and `role` for filtering by message role. The client must be initialized with a token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_110\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.runs.messages.list(\n    run_id=\"run_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Access Tokens - Python\nDESCRIPTION: This snippet demonstrates how to create client-side access tokens using the Letta Python client. It initializes the client with a token, then calls the `create` method with parameters like policy and hostname. It depends on the `letta_client` library and the `ClientSideAccessTokensCreateRequestPolicyItem` class.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\nfrom letta_client.client_side_access_tokens import (\n    ClientSideAccessTokensCreateRequestPolicyItem,\n)\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.client_side_access_tokens.create(\n    policy=[\n        ClientSideAccessTokensCreateRequestPolicyItem(\n            id=\"id\",\n            access=[\"read_messages\"],\n        )\n    ],\n    hostname=\"hostname\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Run Steps with Letta Client (Python)\nDESCRIPTION: This code snippet illustrates how to list the steps associated with a run using the `client.runs.steps.list` method. The `run_id` parameter is required. Optional parameters include pagination cursors (`before`, `after`), `limit` for the maximum number of steps, and `order` for sorting. The client must be initialized with a token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.runs.steps.list(\n    run_id=\"run_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Models using Letta Python Client\nDESCRIPTION: This snippet demonstrates how to list available models using the Letta Python client. It initializes the client with a token and then calls the `client.models.list()` method.  No additional parameters are needed to retrieve the list of models.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.models.list()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Run Usage with Letta Client (Python)\nDESCRIPTION: This code snippet shows how to retrieve usage statistics for a specific run using the `client.runs.usage.retrieve` method. The only required parameter is `run_id`. The Letta client needs to be initialized with your API token before calling this function.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_111\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.runs.usage.retrieve(\n    run_id=\"run_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Agent Configuration - Python\nDESCRIPTION: This code snippet demonstrates how to export the serialized JSON representation of an agent, formatted with indentation, using the Letta Python client. It initializes the client with an authentication token and calls the `agents.export_file()` method, passing the `agent_id` as a parameter.  Replace 'YOUR_TOKEN' with a valid authentication token and 'agent_id' with the desired agent's ID.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.export_file(\n    agent_id=\"agent_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Core Memory with Letta Client in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the core memory of a specific agent using the Letta client in Python. It initializes the Letta client with an API token and then calls the `client.agents.core_memory.retrieve()` method, passing the `agent_id` as a parameter.  The snippet requires the `letta_client` library and a valid Letta API token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.core_memory.retrieve(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing jobs using Letta client in Python\nDESCRIPTION: This snippet demonstrates how to list all jobs using the Letta client. It initializes the client with a token and then calls the `list` method on the `jobs` attribute. The `letta_client` library must be installed, and a valid API token is required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.jobs.list()\n\n```\n\n----------------------------------------\n\nTITLE: Migrating Agent Template with Letta Python Client\nDESCRIPTION: This code migrates an agent to a new versioned agent template using the Letta Python client.  It initializes the client with a token and then calls the `client.agents.templates.migrate()` method. The `agent_id` and `to_template` parameters are required, specifying the agent to migrate and the target template, respectively. `preserve_core_memories` is set to `True` to retain the core memories during migration. This endpoint is only available on Letta Cloud.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_100\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.templates.migrate(\n    agent_id=\"agent_id\",\n    to_template=\"to_template\",\n    preserve_core_memories=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Attaching Source to Agent with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to attach a source to an agent using the Letta Python client. It initializes the client with a token, then calls the `agents.sources.attach` method with the `agent_id` and `source_id`. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.sources.attach(\n    agent_id=\"agent_id\",\n    source_id=\"source_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent State - Letta Client Python\nDESCRIPTION: This snippet demonstrates how to retrieve the state of an agent using the Letta client in Python. It initializes a Letta client with a token and then calls the `retrieve` method on the `agents` attribute, passing the agent's ID. The 'YOUR_TOKEN' placeholder should be replaced with a valid Letta API token and 'agent_id' with the actual ID of the agent.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.retrieve(\n    agent_id=\"agent_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Source Files with Letta Client (Python)\nDESCRIPTION: This code snippet shows how to list files associated with a data source using the `client.sources.files.list` method. It requires the `source_id` of the data source. The client must be initialized with your API token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_114\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.files.list(\n    source_id=\"source_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Identity using Letta Python Client\nDESCRIPTION: This snippet demonstrates how to retrieve an identity using the Letta Python client. It initializes the client with a token and calls the `client.identities.retrieve()` method with the `identity_id` parameter. The `identity_id` parameter specifies the ID of the identity to be retrieved.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.identities.retrieve(\n    identity_id=\"identity_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Sources with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to list the sources associated with an agent using the Letta Python client. It initializes the client with a token, then calls the `agents.sources.list` method with the `agent_id`. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.sources.list(\n    agent_id=\"agent_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Projects with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to list projects using the Letta Python client. It initializes the client with a token and calls the `projects.list()` method. The method retrieves and lists all available projects. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.projects.list()\n\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Sources with Letta Client in Python\nDESCRIPTION: This code snippet demonstrates how to list the sources associated with a specific agent using the Letta client in Python. It initializes the Letta client with an API token and then calls the `client.agents.sources.list()` method, passing the `agent_id` as a parameter. The example assumes that the `letta_client` library is installed and a valid API token is available.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.sources.list(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Identity using Letta Python Client\nDESCRIPTION: This snippet demonstrates how to create a new identity using the Letta Python client. It initializes the client with a token and then calls the `client.identities.create()` method. The `identifier_key`, `name`, and `identity_type` parameters are mandatory to create a new identity.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.identities.create(\n    identifier_key=\"identifier_key\",\n    name=\"name\",\n    identity_type=\"org\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Tools with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to list tools associated with an agent using the Letta Python client. It initializes the client with a token, then calls the `agents.tools.list` method with the `agent_id`. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.tools.list(\n    agent_id=\"agent_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Template Version with Letta Python Client\nDESCRIPTION: This snippet creates a new version of the agent template using the Letta Python client. It initializes the client with a token and calls `client.agents.templates.create_version()`. The `agent_id` parameter is required, specifying the agent for which to create a template version. This endpoint is only available on Letta Cloud.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.templates.create_version(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agents for a Block with Letta Python Client\nDESCRIPTION: This code demonstrates how to retrieve all agents associated with a specific block using the Letta Python client. It initializes the client with a token and calls the `client.blocks.agents.list()` method, passing the `block_id` as a parameter. The `block_id` is required to specify the block for which to retrieve associated agents.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.blocks.agents.list(\n    block_id=\"block_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Attaching Core Memory Block to Agent in Python\nDESCRIPTION: This code snippet demonstrates attaching a core memory block to a specific agent using the Letta client in Python.  It initializes a Letta client instance and then calls the `client.agents.blocks.attach()` method, providing both `agent_id` and `block_id`. The code requires a valid Letta API token and that the `letta_client` is installed.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.blocks.attach(\n    agent_id=\"agent_id\",\n    block_id=\"block_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Active Runs using Letta client - Python\nDESCRIPTION: Shows how to list all active runs using the Letta Python client. A valid Letta API token is needed. The Letta client is initialized and the list_active() method is called to retrieve the active runs.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.runs.list_active()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Batch Status using Letta client - Python\nDESCRIPTION: Shows how to get the status of a specific batch run using the Letta Python client. A valid Letta API token and batch_id are required.  The batch status is retrieved for a given batch_id.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.batches.retrieve(\n    batch_id=\"batch_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Memory Variables with Letta Python Client\nDESCRIPTION: This snippet retrieves the memory variables associated with an agent using the Letta Python client. It initializes the client with a token and calls the `client.agents.memory_variables.list()` method, passing the `agent_id` as a parameter. The `agent_id` is required to specify the agent for which to retrieve memory variables. This endpoint is only available on Letta Cloud.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_102\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.memory_variables.list(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Groups - Letta Client Python\nDESCRIPTION: This snippet demonstrates how to list all agent groups using the Letta client in Python. It initializes the Letta client and calls the `list` method on the `groups` attribute. Replace 'YOUR_TOKEN' with your Letta API token. The method can be called without arguments to fetch all groups or with arguments to filter by different parameters.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.list()\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a job using Letta client in Python\nDESCRIPTION: This snippet demonstrates how to retrieve a specific job's status using the Letta client. It initializes the client with a token and calls the `retrieve` method on the `jobs` attribute, passing the `job_id` parameter. The `letta_client` library must be installed, and a valid API token and job ID are required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.jobs.retrieve(\n    job_id=\"job_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Listing active jobs using Letta client in Python\nDESCRIPTION: This snippet shows how to list all active jobs using the Letta client.  It initializes the client with a token and calls the `list_active` method on the `jobs` attribute. The `letta_client` library must be installed and a valid API token is required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.jobs.list_active()\n\n```\n\n----------------------------------------\n\nTITLE: List MCP Tools by Server Python\nDESCRIPTION: This snippet shows how to get a list of all tools associated with a specific MCP server using the `list_mcp_tools_by_server` method of the `letta_client.tools` module. It requires the `letta_client` library, a Letta API token, and the `mcp_server_name` parameter to identify the target MCP server.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.list_mcp_tools_by_server(\n    mcp_server_name=\"mcp_server_name\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Templates with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to list templates using the Letta Python client. It initializes the client with a token and then calls the `templates.list()` method. The method lists all available templates. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.templates.list()\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Step using Letta client - Python\nDESCRIPTION: Demonstrates how to retrieve a specific step by ID using the Letta Python client. Requires a valid Letta API token and step_id. The retrieve() method is invoked on the steps object with the step_id to get the specified step.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.steps.retrieve(\n    step_id=\"step_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: List Composio Actions by App - Letta Python\nDESCRIPTION: Retrieves a list of all Composio actions for a specific app using the `client.tools.list_composio_actions_by_app()` method. Requires a valid Letta API token and the Composio app name.  Returns a list of actions available for the specified application.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.list_composio_actions_by_app(\n    composio_app_name=\"composio_app_name\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing providers using Letta client in Python\nDESCRIPTION: This snippet demonstrates how to retrieve a list of custom providers using the Letta client. It initializes the client with a token and calls the `list` method on the `providers` attribute. The `letta_client` library must be installed and a valid API token is required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.providers.list()\n\n```\n\n----------------------------------------\n\nTITLE: List MCP Servers Python\nDESCRIPTION: This snippet shows how to retrieve a list of all configured MCP servers using the `list_mcp_servers` method of the `letta_client.tools` module. It requires the `letta_client` library and a Letta API token.  The function does not take any specific server as input, so it returns all servers.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.list_mcp_servers()\n\n```\n\n----------------------------------------\n\nTITLE: Listing Group Messages with Letta Python Client\nDESCRIPTION: This code retrieves the message history for a group using the Letta Python client. The client is initialized with a token, and the `client.groups.messages.list()` method is called with the `group_id` parameter. The `group_id` is required to specify the group for which to retrieve messages. Optional parameters like `after`, `before`, and `limit` can be used to filter and limit the messages retrieved.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.messages.list(\n    group_id=\"group_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Create New Tool - Letta Python\nDESCRIPTION: Creates a new tool using the `client.tools.create()` method. Requires a valid Letta API token and the tool's source code. Accepts optional parameters like description, tags, source type, and JSON schema for configuration.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.create(\n    source_code=\"source_code\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Blocks using Letta Python Client\nDESCRIPTION: This snippet demonstrates how to list blocks using the Letta Python client. It initializes the client with a token and then calls the `client.blocks.list()` method to retrieve the block list. No additional parameters are necessary for a simple listing.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.blocks.list()\n```\n\n----------------------------------------\n\nTITLE: Delete Source Python\nDESCRIPTION: This snippet shows how to delete a data source using the `delete` method of the `letta_client.sources` module. It requires the `letta_client` library, a Letta API token, and the `source_id` parameter to identify the data source to delete.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.delete(\n    source_id=\"source_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a block using Letta client in Python\nDESCRIPTION: This snippet demonstrates how to create a block using the Letta client.  It initializes the client with a token and calls the `create` method on the `blocks` attribute, passing the `value` and `label` parameters.  It requires the `letta_client` library to be installed and a valid API token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.blocks.create(\n    value=\"value\",\n    label=\"label\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors in Letta Client\nDESCRIPTION: Demonstrates how to catch and handle API errors using a try-except block.  Catches `ApiError` exceptions and prints the status code and body of the error response. Requires the `letta_client` package.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client.core.api_error import ApiError\n\ntry:\n    client.tools.create(...)\nexcept ApiError as e:\n    print(e.status_code)\n    print(e.body)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Core Memory Block in Python\nDESCRIPTION: This code shows how to retrieve a specific core memory block from an agent using the Letta client in Python.  The `agent_id` and `block_label` parameters are required to identify the agent and the specific memory block. It also requires the `letta_client` library to be installed and a valid `token`.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.blocks.retrieve(\n    agent_id=\"agent_id\",\n    block_label=\"block_label\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Groups with Letta Python Client\nDESCRIPTION: This code snippet demonstrates how to list agent groups using the Letta Python client. It initializes the client with a token and then calls the `client.agents.groups.list()` method, passing the `agent_id` as a parameter. The `agent_id` is required to specify the agent for which the groups should be listed. An optional `manager_type` parameter can also be provided to filter the groups by manager type.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.groups.list(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a block using Letta client in Python\nDESCRIPTION: This snippet demonstrates how to delete a block using the Letta client. The client is initialized with a token, and the `delete` method is called on the `blocks` attribute, passing the `block_id` parameter.  It requires the `letta_client` library to be installed and a valid API token and block ID.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.blocks.delete(\n    block_id=\"block_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Checking health using Letta client in Python\nDESCRIPTION: This snippet demonstrates how to check the health of the Letta service using the Letta client. It initializes the client with a token and calls the `check` method on the `health` attribute. The `letta_client` library must be installed, and a valid API token is required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.health.check()\n\n```\n\n----------------------------------------\n\nTITLE: Detaching Source from Agent with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to detach a source from an agent using the Letta Python client. It initializes the client with a token, then calls the `agents.sources.detach` method with the `agent_id` and `source_id`. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.sources.detach(\n    agent_id=\"agent_id\",\n    source_id=\"source_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts with Letta Client\nDESCRIPTION: Configures the timeout for the Letta client and overrides it for a specific method call using the `timeout` and `timeout_in_seconds` options, respectively. Requires the `letta_client` package.  Demonstrates setting a global timeout and a method-specific override.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    ...,\n    timeout=20.0,\n)\n\n\n# Override timeout for a specific method\nclient.tools.create(..., request_options={\n    \"timeout_in_seconds\": 1\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying a block using Letta client in Python\nDESCRIPTION: This snippet shows how to modify a block using the Letta client. It initializes the client with a token and calls the `modify` method on the `blocks` attribute, passing the `block_id` parameter. The `letta_client` library must be installed, and a valid API token and block ID are required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.blocks.modify(\n    block_id=\"block_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom HTTP Client with Letta\nDESCRIPTION: Demonstrates how to override the default `httpx` client with a custom client, allowing for configurations like proxies and transports. Requires the `letta_client` and `httpx` packages.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom letta_client import Letta\n\nclient = Letta(\n    ...,\n    httpx_client=httpx.Client(\n        proxies=\"http://my.test.proxy.example.com\",\n        transport=httpx.HTTPTransport(local_address=\"0.0.0.0\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a provider using Letta client in Python\nDESCRIPTION: This snippet demonstrates how to delete an existing custom provider using the Letta client. The client is initialized with a token, and the `delete` method is called on the `providers` attribute, passing the `provider_id` parameter. The `letta_client` library must be installed, and a valid API token and provider ID are required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.providers.delete(\n    provider_id=\"provider_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Agent Core Memory Block with Letta in Python\nDESCRIPTION: This code shows how to modify a core memory block of an agent using the Letta client in Python. The `agent_id` and `block_label` parameters identify the agent and block to modify. The code relies on the `letta_client` library and a valid `token` for the client.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.blocks.modify(\n    agent_id=\"agent_id\",\n    block_label=\"block_label\",\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying an Identity using Letta Python Client\nDESCRIPTION: This snippet showcases how to modify an identity using the Letta Python client. It initializes the client with a token and calls the `client.identities.modify()` method, passing the `identity_id` as a parameter. The `identity_id` parameter is required to identify the identity to be modified.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.identities.modify(\n    identity_id=\"identity_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Attaching Tool to Agent with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to attach a tool to an agent using the Letta Python client. It initializes the client with a token, then calls the `agents.tools.attach` method with the `agent_id` and `tool_id`. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.tools.attach(\n    agent_id=\"agent_id\",\n    tool_id=\"tool_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Provider using Letta client - Python\nDESCRIPTION: Demonstrates how to modify a provider using the Letta Python client. Requires a valid Letta API token.  The provider is modified by providing the provider_id and the api_key. A Letta client object needs to be initialized with a token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.providers.modify(\n    provider_id=\"provider_id\",\n    api_key=\"api_key\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a provider using Letta client in Python\nDESCRIPTION: This snippet demonstrates how to create a new custom provider using the Letta client.  It initializes the client with a token and then calls the `create` method on the `providers` attribute, passing the `name` and `api_key` parameters. The `letta_client` library must be installed, and a valid API token is required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.providers.create(\n    name=\"name\",\n    api_key=\"api_key\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Agent Message with Letta Client (Python)\nDESCRIPTION: This snippet shows how to update an existing message associated with an agent using the `letta_client` library. It initializes a `Letta` client and calls the `modify` method on the `agents.messages` object, passing the `agent_id`, `message_id`, and an `UpdateSystemMessage` object as parameters. `agent_id`, `message_id`, and `request` are all required parameters.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, UpdateSystemMessage\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.messages.modify(\n    agent_id=\"agent_id\",\n    message_id=\"message_id\",\n    request=UpdateSystemMessage(\n        content=\"content\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Identity Properties with Letta Client (Python)\nDESCRIPTION: This code snippet illustrates how to upsert (update or insert) identity properties using `client.identities.properties.upsert`. It takes the `identity_id` and a list of `IdentityProperty` objects as input. Each `IdentityProperty` object contains the key, value, and type of the property. The Letta client must be initialized with your token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import IdentityProperty, Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.identities.properties.upsert(\n    identity_id=\"identity_id\",\n    request=[\n        IdentityProperty(\n            key=\"key\",\n            value=\"value\",\n            type=\"string\",\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Group Messages with Letta Client (Python)\nDESCRIPTION: This code snippet demonstrates how to modify a message within a group using the Letta client's `client.groups.messages.modify` method. It requires the group ID and message ID to identify the specific message, as well as an `UpdateSystemMessage` object containing the updated content. The client needs to be initialized with a token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, UpdateSystemMessage\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.messages.modify(\n    group_id=\"group_id\",\n    message_id=\"message_id\",\n    request=UpdateSystemMessage(\n        content=\"content\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying a Multi-Agent Group using Letta Python Client\nDESCRIPTION: This snippet showcases how to modify a multi-agent group using the Letta Python client. It initializes the client with a token and then calls the `client.groups.modify()` method with the group ID. The `group_id` parameter identifies the group to be modified.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.modify(\n    group_id=\"group_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Message Asynchronously with Letta Client (Python)\nDESCRIPTION: This snippet shows how to asynchronously create a message for an agent and retrieve a run object using the `letta_client` library. The agent processing happens in the background. It initializes a `Letta` client, creates a `MessageCreate` object, and then calls the `create_async` method on the `agents.messages` object. The `agent_id` and `messages` are required parameters. The run ID returned by `create_async` can be used to check the status of the process.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, MessageCreate, TextContent\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.messages.create_async(\n    agent_id=\"agent_id\",\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=[\n                TextContent(\n                    text=\"text\",\n                )\n            ],\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Modify Source Python\nDESCRIPTION: This snippet shows how to modify a data source's name, description or other attributes using the `modify` method of the `letta_client.sources` module. It requires the `letta_client` library, a Letta API token, and the `source_id` parameter to identify the data source to modify.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.modify(\n    source_id=\"source_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Template from Agent with Letta Python Client\nDESCRIPTION: This example creates a template from an existing agent using the Letta Python client. The client is initialized with a token, and the `client.agents.templates.create()` method is called with the `agent_id` parameter. The `agent_id` specifies the agent to be used as the template. This endpoint is only available on Letta Cloud.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_101\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.templates.create(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Identity using Letta Python Client\nDESCRIPTION: This snippet shows how to delete an identity using the Letta Python client. It initializes the client with a token and calls the `client.identities.delete()` method, passing the `identity_id` as a parameter. The `identity_id` parameter specifies the ID of the identity to be deleted.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.identities.delete(\n    identity_id=\"identity_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Group - Letta Client Python\nDESCRIPTION: This snippet demonstrates how to retrieve an agent group by its ID using the Letta client in Python. It initializes the Letta client and calls the `retrieve` method on the `groups` attribute, passing the group ID. Replace 'YOUR_TOKEN' with a valid Letta API token and 'group_id' with the ID of the group to be retrieved.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.retrieve(\n    group_id=\"group_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Detaching Core Memory Block from Agent in Python\nDESCRIPTION: This code shows how to detach a core memory block from an agent using the Letta client in Python.  It requires an initialized `Letta` client with a valid API `token`. The `agent_id` and `block_id` are used to identify the agent and the block to be detached respectively.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.blocks.detach(\n    agent_id=\"agent_id\",\n    block_id=\"block_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a file from a data source - Python\nDESCRIPTION: This code snippet demonstrates how to delete a specific file from a data source using the Letta client library. It requires the `source_id` and `file_id` as input parameters.  The `token` parameter needs to be set when creating the `Letta` client.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.files.delete(\n    source_id=\"source_id\",\n    file_id=\"file_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a job using Letta client in Python\nDESCRIPTION: This snippet shows how to delete a job using the Letta client. The client is initialized with a token, and the `delete` method is called on the `jobs` attribute, passing the `job_id` parameter. The `letta_client` library must be installed, and a valid API token and job ID are required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.jobs.delete(\n    job_id=\"job_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Add MCP Server Python\nDESCRIPTION: This snippet demonstrates how to add a new MCP server to the Letta MCP server configuration using the `add_mcp_server` method of the `letta_client.tools` module. It requires the `letta_client` library, a Letta API token, and a `StdioServerConfig` object defining the server's configuration.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, StdioServerConfig\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.add_mcp_server(\n    request=StdioServerConfig(\n        server_name=\"server_name\",\n        command=\"command\",\n        args=[\"args\"],\n    ),\n)\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Run using Letta client - Python\nDESCRIPTION: Illustrates how to delete a run using the Letta Python client. A valid Letta API token and a run_id are required.  The delete() method is invoked on the runs object with the run_id to delete the specified run.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.runs.delete(\n    run_id=\"run_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Resetting Group Messages with Letta Client (Python)\nDESCRIPTION: This code snippet shows how to reset (delete) all group messages for all agents in a multi-agent group using `client.groups.messages.reset`. It requires the `group_id` parameter to specify the group. The Letta client needs to be initialized with your API token before this function can be called.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.groups.messages.reset(\n    group_id=\"group_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Source Python\nDESCRIPTION: This snippet shows how to retrieve a specific data source using the `retrieve` method of the `letta_client.sources` module. It requires the `letta_client` library, a Letta API token, and the `source_id` parameter to specify the source to retrieve.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.retrieve(\n    source_id=\"source_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Detaching Tool from Agent with Letta API - Python\nDESCRIPTION: This snippet demonstrates how to detach a tool from an agent using the Letta Python client. It initializes the client with a token, then calls the `agents.tools.detach` method with the `agent_id` and `tool_id`. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.tools.detach(\n    agent_id=\"agent_id\",\n    tool_id=\"tool_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Add Composio Tool Python\nDESCRIPTION: This snippet shows how to add a new Composio tool using the `add_composio_tool` method of the `letta_client.tools` module. It requires the `letta_client` library and a Letta API token. The `composio_action_name` parameter specifies the name of the Composio action to add.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.add_composio_tool(\n    composio_action_name=\"composio_action_name\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Agent Passage in Python\nDESCRIPTION: This code shows how to delete a specific memory (passage) from an agent's archival memory store using the Letta client in Python. The `agent_id` parameter identifies the agent, and the `memory_id` parameter specifies the memory to be deleted. The code uses the `letta_client` library and requires a valid API token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.passages.delete(\n    agent_id=\"agent_id\",\n    memory_id=\"memory_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with Letta API - Python\nDESCRIPTION: This code snippet demonstrates how to create a new agent using the Letta Python client. It initializes the client with an authentication token and calls the `agents.create()` method.  No specific parameters are provided in this minimal example. Replace 'YOUR_TOKEN' with a valid authentication token.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.create()\n\n```\n\n----------------------------------------\n\nTITLE: Delete Tool by ID - Letta Python\nDESCRIPTION: Deletes a tool using its unique identifier through the `client.tools.delete()` method. Requires a valid Letta API token. Successfully deleting the tool returns void or a success status, otherwise raises an exception.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.delete(\n    tool_id=\"tool_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Embeddings using Letta Python Client\nDESCRIPTION: This snippet shows how to list available embeddings using the Letta Python client.  It initializes the client with a token and calls the `client.embeddings.list()` method. No additional parameters are required.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.embeddings.list()\n```\n\n----------------------------------------\n\nTITLE: Delete MCP Server Python\nDESCRIPTION: This snippet shows how to delete an MCP server from the Letta MCP server configuration using the `delete_mcp_server` method of the `letta_client.tools` module. It requires the `letta_client` library, a Letta API token, and the `mcp_server_name` parameter to identify the server to delete.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.delete_mcp_server(\n    mcp_server_name=\"mcp_server_name\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Core Memory Blocks in Python\nDESCRIPTION: This code shows how to retrieve all core memory blocks of a specific agent using the Letta client in Python. The `agent_id` parameter identifies the agent. The code utilizes the `letta_client` library and a valid API `token`.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.agents.blocks.list(\n    agent_id=\"agent_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Source by Name Python\nDESCRIPTION: This snippet shows how to retrieve a data source by name using the `retrieve_by_name` method of the `letta_client.sources` module. It requires the `letta_client` library, a Letta API token, and the `source_name` parameter.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.sources.retrieve_by_name(\n    source_name=\"source_name\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: List Composio Apps - Letta Python\nDESCRIPTION: Retrieves a list of all Composio apps using the `client.tools.list_composio_apps()` method. Requires a valid Letta API token. Returns information about available Composio applications.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.list_composio_apps()\n```\n\n----------------------------------------\n\nTITLE: Listing Steps using Letta client - Python\nDESCRIPTION: Shows how to list steps using the Letta Python client. It requires a valid Letta API token. The list_steps() method is called to list the steps. Optional pagination and date filters are available.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.steps.list_steps()\n```\n\n----------------------------------------\n\nTITLE: Listing Steps (Short) using Letta client - Python\nDESCRIPTION: Illustrates a simplified version of listing steps using the Letta Python client. A valid Letta API token is necessary. The list() method is called directly on the steps object to list steps, likely with default parameters.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.steps.list()\n```\n\n----------------------------------------\n\nTITLE: Listing Tags using Letta client - Python\nDESCRIPTION: Shows how to list all tags in the database using the Letta Python client. Requires a valid Letta API token. The list() method is called to retrieve all the tags.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tags.list()\n```\n\n----------------------------------------\n\nTITLE: Listing Batches using Letta client - Python\nDESCRIPTION: Demonstrates how to list all batch runs using the Letta Python client. A valid Letta API token is needed.  The list() method is used to retrieve batch runs after the client object is initialized.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.batches.list()\n```\n\n----------------------------------------\n\nTITLE: Deleting Client-Side Access Tokens - Python\nDESCRIPTION: This snippet demonstrates how to delete client-side access tokens using the Letta Python client. It initializes the client with a token, then calls the `delete` method with the token to be deleted. It depends on the `letta_client` library.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.client_side_access_tokens.delete(\n    token=\"token\",\n    request={\"key\": \"value\"},\n)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a block using Letta client in Python\nDESCRIPTION: This snippet shows how to retrieve a block using the Letta client. It initializes the client with a token and then calls the `retrieve` method on the `blocks` attribute, passing the `block_id` parameter. It requires the `letta_client` library to be installed and a valid API token and block ID.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.blocks.retrieve(\n    block_id=\"block_id\",\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries with Letta Client\nDESCRIPTION: Configures the maximum number of retries for a request using the `request_options` parameter. The `max_retries` option is set to 1, overriding the default value. Requires the `letta_client` package.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.tools.create(..., request_options={\n    \"max_retries\": 1\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Async Letta Client\nDESCRIPTION: Initializes the asynchronous Letta client with an API token and calls the `tools.create` method within an asyncio event loop. Requires the `letta_client` package and the `asyncio` library. The token parameter is necessary for authentication. It demonstrates how to use the async client for non-blocking API calls.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom letta_client import AsyncLetta\n\nclient = AsyncLetta(\n    token=\"YOUR_TOKEN\",\n)\n\n\nasync def main() -> None:\n    await client.tools.create(\n        source_code=\"source_code\",\n    )\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Add MCP Tool Python\nDESCRIPTION: This snippet demonstrates how to register a new MCP tool as a Letta server using the `add_mcp_tool` method of the `letta_client.tools` module. It requires the `letta_client` library, a Letta API token, the `mcp_server_name`, and `mcp_tool_name` to specify the server and tool.\nSOURCE: https://github.com/letta-ai/letta-python/blob/main/reference.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta\n\nclient = Letta(\n    token=\"YOUR_TOKEN\",\n)\nclient.tools.add_mcp_tool(\n    mcp_server_name=\"mcp_server_name\",\n    mcp_tool_name=\"mcp_tool_name\",\n)\n\n```"
  }
]