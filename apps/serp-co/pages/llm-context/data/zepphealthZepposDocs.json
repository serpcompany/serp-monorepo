[
  {
    "owner": "zepp-health",
    "repo": "zeppos-docs",
    "content": "TITLE: Importing useBaseUrl in React for Zepp OS Documentation\nDESCRIPTION: This code snippet imports the useBaseUrl function from the Docusaurus library, which is used to handle base URLs for assets in the documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/watchface/guides/create.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl'\n```\n\n----------------------------------------\n\nTITLE: File Read Operation Example\nDESCRIPTION: Demonstrates how to read data from a file using hmFS.read(). Creates buffers, opens a file in read-write mode with creation if not exists, and reads file content into the buffer.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/read.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst test_buf = new Uint8Array(10)\nconst test_buf2 = new Uint8Array(test_buf.length)\n\nconst file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\nhmFS.read(file, test_buf2.buffer, 0, test_buf2.length)\n```\n\n----------------------------------------\n\nTITLE: Configuring App Information in app.json for Zepp Mini Programs\nDESCRIPTION: Example of the app object configuration in app.json that defines essential Mini Program metadata including its ID, name, type, version details, icon path, developer information, and description.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"app\": {\n    \"appId\": 1000089,\n    \"appName\": \"······\",\n    \"appType\": \"app\",\n    \"version\": {\n      \"code\": 5,\n      \"name\": \"0.0.5\"\n    },\n    \"icon\": \"logo.png\",\n    \"vender\": \"······\",\n    \"description\": \"······\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Persistence using localStorage in Zepp OS\nDESCRIPTION: Example showing how to use localStorage API to persist data in a Mini Program. The code demonstrates saving and retrieving state data during the page lifecycle using setItem and getItem methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/persistence-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { localStorage } from '@zos/storage'\n\nPage({\n  state: {\n    data: null\n  },\n  build() {\n    this.state.data = localStorage.getItem('state')\n    // ...\n  },\n  onDestroy() {\n    localStorage.setItem('state', this.state.data)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using px Utility Function for Screen Adaptation in Zepp OS v3\nDESCRIPTION: Demonstration of using the px utility function from @zos/utils to adapt widget dimensions and styles for different screen sizes in a Zepp OS v3 Mini Program. This example creates a text widget with adaptive sizing and positioning.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/screen-adaption.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst textStyle = {\n  x: px(96),\n  y: px(40),\n  w: px(288),\n  h: px(48),\n  color: 0xffffff,\n  text_size: px(36),\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.WRAP,\n  text: 'HELLO, Zepp OS'\n}\n\nconst text = createWidget(widget.TEXT, textStyle)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Single Heart Rate Measurement Change Event in TypeScript\nDESCRIPTION: Cancels the callback function for heart rate single measurement change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noffLastChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using HeartRate Sensor in JavaScript\nDESCRIPTION: Example of using the HeartRate sensor to get the last heart rate value and set up continuous heart rate monitoring with callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HeartRate } from '@zos/sensor'\n\nconst heartRate = new HeartRate()\nconst lastValue = heartRate.getLast()\n\nconst callback = () => {\n  console.log(heartRate.getCurrent())\n}\n\nheartRate.onCurrentChange(callback)\n\n// When not needed for use\nheartRate.offCurrentChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Implementing Promise Polyfill in JavaScript for Zepp OS\nDESCRIPTION: A complete Promise implementation that follows the Promises/A+ specification. It includes core Promise functionality along with utility methods such as all(), race(), allSettled(), catch(), then(), and finally(). The implementation handles proper resolution, rejection, and chaining of promises with appropriate error handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/guides/best-practice/polyfill/promise.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n;(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined'\n    ? factory()\n    : typeof define === 'function' && define.amd\n    ? define(factory)\n    : factory()\n})(globalThis, function () {\n  'use strict'\n\n  /**\n   * @this {Promise}\n   */\n  function finallyConstructor(callback) {\n    var constructor = this.constructor\n    return this.then(\n      function (value) {\n        // @ts-ignore\n        return constructor.resolve(callback()).then(function () {\n          return value\n        })\n      },\n      function (reason) {\n        // @ts-ignore\n        return constructor.resolve(callback()).then(function () {\n          // @ts-ignore\n          return constructor.reject(reason)\n        })\n      }\n    )\n  }\n\n  function allSettled(arr) {\n    var P = this\n    return new P(function (resolve, reject) {\n      if (!(arr && typeof arr.length !== 'undefined')) {\n        return reject(\n          new TypeError(\n            typeof arr +\n              ' ' +\n              arr +\n              ' is not iterable(cannot read property Symbol(Symbol.iterator))'\n          )\n        )\n      }\n      var args = Array.prototype.slice.call(arr)\n      if (args.length === 0) return resolve([])\n      var remaining = args.length\n\n      function res(i, val) {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function (val) {\n                res(i, val)\n              },\n              function (e) {\n                args[i] = { status: 'rejected', reason: e }\n                if (--remaining === 0) {\n                  resolve(args)\n                }\n              }\n            )\n            return\n          }\n        }\n        args[i] = { status: 'fulfilled', value: val }\n        if (--remaining === 0) {\n          resolve(args)\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i])\n      }\n    })\n  }\n\n  // Store setTimeout reference so promise-polyfill will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var setTimeoutFunc = setTimeout\n\n  function isArray(x) {\n    return Boolean(x && typeof x.length !== 'undefined')\n  }\n\n  function noop() {}\n\n  // Polyfill for Function.prototype.bind\n  function bind(fn, thisArg) {\n    return function () {\n      fn.apply(thisArg, arguments)\n    }\n  }\n\n  /**\n   * @constructor\n   * @param {Function} fn\n   */\n  function Promise(fn) {\n    if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new')\n    if (typeof fn !== 'function') throw new TypeError('not a function')\n    /** @type {!number} */\n    this._state = 0\n    /** @type {!boolean} */\n    this._handled = false\n    /** @type {Promise|undefined} */\n    this._value = undefined\n    /** @type {!Array<!Function>} */\n    this._deferreds = []\n\n    doResolve(fn, this)\n  }\n\n  function handle(self, deferred) {\n    while (self._state === 3) {\n      self = self._value\n    }\n    if (self._state === 0) {\n      self._deferreds.push(deferred)\n      return\n    }\n    self._handled = true\n    Promise._immediateFn(function () {\n      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected\n      if (cb === null) {\n        ;(self._state === 1 ? resolve : reject)(deferred.promise, self._value)\n        return\n      }\n      var ret\n      try {\n        ret = cb(self._value)\n      } catch (e) {\n        reject(deferred.promise, e)\n        return\n      }\n      resolve(deferred.promise, ret)\n    })\n  }\n\n  function resolve(self, newValue) {\n    try {\n      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.')\n      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n        var then = newValue.then\n        if (newValue instanceof Promise) {\n          self._state = 3\n          self._value = newValue\n          finale(self)\n          return\n        } else if (typeof then === 'function') {\n          doResolve(bind(then, newValue), self)\n          return\n        }\n      }\n      self._state = 1\n      self._value = newValue\n      finale(self)\n    } catch (e) {\n      reject(self, e)\n    }\n  }\n\n  function reject(self, newValue) {\n    self._state = 2\n    self._value = newValue\n    finale(self)\n  }\n\n  function finale(self) {\n    if (self._state === 2 && self._deferreds.length === 0) {\n      Promise._immediateFn(function () {\n        if (!self._handled) {\n          Promise._unhandledRejectionFn(self._value)\n        }\n      })\n    }\n\n    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n      handle(self, self._deferreds[i])\n    }\n    self._deferreds = null\n  }\n\n  /**\n   * @constructor\n   */\n  function Handler(onFulfilled, onRejected, promise) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null\n    this.promise = promise\n  }\n\n  /**\n   * Take a potentially misbehaving resolver function and make sure\n   * onFulfilled and onRejected are only called once.\n   *\n   * Makes no guarantees about asynchrony.\n   */\n  function doResolve(fn, self) {\n    var done = false\n    try {\n      fn(\n        function (value) {\n          if (done) return\n          done = true\n          resolve(self, value)\n        },\n        function (reason) {\n          if (done) return\n          done = true\n          reject(self, reason)\n        }\n      )\n    } catch (ex) {\n      if (done) return\n      done = true\n      reject(self, ex)\n    }\n  }\n\n  Promise.prototype['catch'] = function (onRejected) {\n    return this.then(null, onRejected)\n  }\n\n  Promise.prototype.then = function (onFulfilled, onRejected) {\n    // @ts-ignore\n    var prom = new this.constructor(noop)\n\n    handle(this, new Handler(onFulfilled, onRejected, prom))\n    return prom\n  }\n\n  Promise.prototype['finally'] = finallyConstructor\n\n  Promise.all = function (arr) {\n    return new Promise(function (resolve, reject) {\n      if (!isArray(arr)) {\n        return reject(new TypeError('Promise.all accepts an array'))\n      }\n\n      var args = Array.prototype.slice.call(arr)\n      if (args.length === 0) return resolve([])\n      var remaining = args.length\n\n      function res(i, val) {\n        try {\n          if (val && (typeof val === 'object' || typeof val === 'function')) {\n            var then = val.then\n            if (typeof then === 'function') {\n              then.call(\n                val,\n                function (val) {\n                  res(i, val)\n                },\n                reject\n              )\n              return\n            }\n          }\n          args[i] = val\n          if (--remaining === 0) {\n            resolve(args)\n          }\n        } catch (ex) {\n          reject(ex)\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i])\n      }\n    })\n  }\n\n  Promise.allSettled = allSettled\n\n  Promise.resolve = function (value) {\n    if (value && typeof value === 'object' && value.constructor === Promise) {\n      return value\n    }\n\n    return new Promise(function (resolve) {\n      resolve(value)\n    })\n  }\n\n  Promise.reject = function (value) {\n    return new Promise(function (resolve, reject) {\n      reject(value)\n    })\n  }\n\n  Promise.race = function (arr) {\n    return new Promise(function (resolve, reject) {\n      if (!isArray(arr)) {\n        return reject(new TypeError('Promise.race accepts an array'))\n      }\n\n      for (var i = 0, len = arr.length; i < len; i++) {\n        Promise.resolve(arr[i]).then(resolve, reject)\n      }\n    })\n  }\n\n  // Use polyfill for setImmediate for performance gains\n  Promise._immediateFn =\n    // @ts-ignore\n    (typeof setImmediate === 'function' &&\n      function (fn) {\n        // @ts-ignore\n        setImmediate(fn)\n      }) ||\n    function (fn) {\n      setTimeoutFunc(fn, 0)\n    }\n\n  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n    if (typeof console !== 'undefined' && console) {\n      console.log('[jsfwk.error  ] Possible Unhandled Promise Rejection:', err) // eslint-disable-line no-console\n    }\n  }\n\n  /** @suppress {undefinedVars} */\n  var globalNS = (function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') {\n      return self\n    }\n    if (typeof window !== 'undefined') {\n      return window\n    }\n    if (typeof global !== 'undefined') {\n      return global\n    }\n    if (typeof globalThis !== 'undefined') {\n      return globalThis\n    }\n\n    throw new Error('unable to locate global object')\n  })()\n\n  globalNS['Promise'] = Promise\n  // Expose the polyfill if Promise is undefined or set to a\n  // non-function value. The latter can be due to a named HTMLElement\n  // being exposed by browsers for legacy reasons.\n  // https://github.com/taylorhakes/promise-polyfill/issues/114\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing App in Zepp OS (JavaScript)\nDESCRIPTION: The App onCreate function initializes global data for the app. It receives params passed from the launchApp function. UI drawing is not allowed at this stage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/life-cycle.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(params: string) => void\n```\n\n----------------------------------------\n\nTITLE: Using getText API for i18n in Zepp OS\nDESCRIPTION: Example of using the getText method from @zos/i18n module to retrieve localized strings based on current system language.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/i18n.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// page.js\nimport { getText } from '@zos/i18n'\n\nconsole.log(getText('cake'))\n```\n\n----------------------------------------\n\nTITLE: Step Sensor Usage Example - JavaScript\nDESCRIPTION: Complete example showing how to initialize the Step sensor, get current steps and target, and handle step change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Step } from '@zos/sensor'\n\nconst step = new Step()\nconst current = step.getCurrent()\nconst target = step.getTarget()\nconst callback = () => {\n  console.log(step.getCurrent())\n}\n\nstep.onChange(callback)\n\n// When not needed for use\nstep.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Complete CYCLE_LIST Implementation Example in ZeppOS\nDESCRIPTION: Full example showing how to implement a CYCLE_LIST widget in a ZeppOS page, including image array configuration, positioning, and click handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  state: {\n    pageName: 'CYCLE_LIST'\n  },\n\n  build() {\n    const imgArray = ['number-img/0.png', 'number-img/1.png', 'number-img/2.png', 'number-img/3.png', 'number-img/4.png']\n    const cycleList = createWidget(widget.CYCLE_LIST, {\n      x: 230,\n      y: 120,\n      h: 300,\n      w: 30,\n      data_array: imgArray,\n      data_size: 5,\n      item_height: 100,\n      item_click_func: (list, index) => {\n        console.log(index)\n      },\n      item_bg_color: 0xffffff\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating BUTTON Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to create a BUTTON widget using the hmUI.createWidget method. It shows the basic structure and required parameters for initializing a button.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalStorage Utility Class for Data Persistence in ZeppOS\nDESCRIPTION: This code snippet defines a LocalStorage class that encapsulates file operations for reading and writing JSON objects to persistent storage. It uses the hmFS API to interact with the file system and includes helper functions for data conversion.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/persistence-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction str2ab(str) {\n  const buf = new ArrayBuffer(str.length * 2) // 2 bytes for each char\n  const bufView = new Uint16Array(buf)\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i)\n  }\n  return buf\n}\n\nexport default class LocalStorage {\n  constructor (fileName = '') {\n    this.fileName = fileName\n    this.contentObj = {}\n  }\n\n  set(obj) {\n    const file = hmFS.open(this.fileName, hmFS.O_RDWR | hmFS.O_TRUNC)\n    const contentBuffer = str2ab(JSON.stringify(obj))\n\n    hmFS.write(file, contentBuffer, 0, contentBuffer.byteLength)\n    hmFS.close(file)\n  }\n\n  get() {\n    const [fsStat, err] = hmFS.stat(this.fileName)\n    if (err === 0) {\n      const { size } = fsStat\n      const fileContentUnit = new Uint16Array(new ArrayBuffer(size))\n      const file = hmFS.open(this.fileName, hmFS.O_RDONLY | hmFS.O_CREAT)\n      hmFS.seek(file, 0, hmFS.SEEK_SET)\n      hmFS.read(file, fileContentUnit.buffer, 0, size)\n      hmFS.close(file)\n\n      try {\n        const val = String.fromCharCode.apply(null, fileContentUnit)\n        this.contentObj = val ? JSON.parse(val) : {}\n      } catch (error) {\n        this.contentObj = {}\n      }\n    }\n\n    return this.contentObj\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Multiple Components with Sections in JavaScript\nDESCRIPTION: This example illustrates how to structure multiple UI components within an AppSettingsPage using Section components. It includes a TextInput for a name field and a Button with an onClick handler.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/app-settings/ui-intro.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return Section({}, [\n      Section(\n        {},\n        TextInput({\n          label: 'Name',\n        })\n      ),\n      Section(\n        {},\n        Button({\n          label: 'Start',\n          onClick() {\n            // ...\n          }\n        })\n      )\n    ])\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Workout Extension Module in app.json\nDESCRIPTION: Example configuration for the Workout Extension module in app.json. Shows how to define widgets with path, name, icon and runtime abilities. The type field must be 1 for Workout Extensions and subType defines supported workout types.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/workout-extension/quick-start.mdx#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"module\": {\n  \"data-widget\":{\n    \"widgets\": [{\n      \"path\": \"pages/plugin1\",\n      \"name\": \"plugin2\",\n      \"icon\": \"icon2.png\",\n      \"runtime\": {\n        \"ability\": [{\n          \"type\": 1,\n          \"subType\": [1, 2, 3]\n        }]\n      }\n    }]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Stand Sensor Usage Example in ZeppOS\nDESCRIPTION: A comprehensive JavaScript example showing how to import and use the Stand sensor, including getting current and target values, and setting up event listeners for changes in standing behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stand } from '@zos/sensor'\n\nconst stand = new Stand()\nconst current = stand.getCurrent()\nconst target = stand.getTarget()\nconst callback = () => {\n  console.log(stand.getCurrent())\n}\n\nstand.onChange(callback)\n\n// When not needed for use\nstand.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Complete Step Sensor Implementation Example in JavaScript for ZeppOS\nDESCRIPTION: Comprehensive example showing how to import the Step sensor, create an instance, get current step count and goal, register a change event callback, and properly clean up by unregistering the callback when no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Step } from '@zos/sensor'\n\nconst step = new Step()\nconst current = step.getCurrent()\nconst target = step.getTarget()\nconst callback = () => {\n  console.log(step.getCurrent())\n}\n\nstep.onChange(callback)\n\n// When not needed for use\nstep.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Page Implementation Example - JavaScript\nDESCRIPTION: Example implementation of a page using the Page constructor, demonstrating state initialization and lifecycle methods including onInit and build.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/Page.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Complete TEXT Widget Implementation with Event Handling\nDESCRIPTION: Full example showing how to create a TEXT widget with specific properties and add a click event listener that changes the widget's position when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const text = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    text.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      text.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete TEXT Widget Implementation with Event Handling\nDESCRIPTION: Full example showing how to create a TEXT widget with specific properties and add a click event listener that changes the widget's position when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const text = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    text.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      text.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Global App Object Communication in Zepp OS\nDESCRIPTION: Shows how to use the global app object for cross-page communication by setting up globalData in app.js and accessing/modifying it from different pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    type: 'normal'\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    console.log(getApp()._options.globalData.type)\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { back } from '@zos/router'\n\n// ...\ngetApp()._options.globalData.type = 'classic'\n\nback()\n```\n\n----------------------------------------\n\nTITLE: Creating UI Widgets with hmUI TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the createWidget method that creates UI widget instances. The method takes a widget ID and optional configuration parameters and returns a widget object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/createWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(widgetId: WIDGET_ID, option?: Option) => widget: WIDGET\n```\n\n----------------------------------------\n\nTITLE: Audio Recorder Implementation in ZeppOS\nDESCRIPTION: Demonstrates how to create and use an audio recorder in ZeppOS. This example shows setting the recording format, starting and stopping recording with the appropriate codec configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/media.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Recorder\nimport { create, id, codec } from '@zos/media'\n\nconst recorder = create(id.RECORDER)\n\nrecorder.setFormat(codec.OPUS, {\n  target_file: 'data://record_file.opus'\n})\n\n// start\nrecorder.start()\n\n// stop\nrecorder.stop()\n```\n\n----------------------------------------\n\nTITLE: Full Example of STEP Sensor Usage in ZeppOS\nDESCRIPTION: This comprehensive example demonstrates creating a STEP sensor, rendering step information on the screen, registering a change event listener, and updating the display when steps change. It also includes a button to register the change listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const step = hmSensor.createSensor(hmSensor.id.STEP)\n\n    const currentText = new TextByLine({\n      text: `current:${step.current};target:${step.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${step.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = step.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const stepChangeListener = () => {\n      step.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: stepChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ARC Widget with Event Handling\nDESCRIPTION: Complete example showing how to create an ARC widget with specific properties and add click event handling. Demonstrates setting initial properties and updating them through events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/ARC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const arc = hmUI.createWidget(hmUI.widget.ARC, {\n      x: 100,\n      y: 100,\n      w: 250,\n      h: 250,\n      start_angle: -90,\n      end_angle: 90,\n      color: 0xfc6950,\n      line_width: 20\n    })\n\n    arc.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      arc.setProperty(hmUI.prop.MORE, {\n        y: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Sleep Sensor API - Complete Example\nDESCRIPTION: Example demonstrating how to use the Sleep sensor API to retrieve sleep information, stage constants, and iterate through sleep stages to identify awake periods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sleep } from '@zos/sensor'\n\nconst sleep = new Sleep()\nconst { score } = sleep.getInfo()\nconst sleepStageConstants = sleep.getStageConstantObj()\nconst stage = sleep.getStage()\n\nstage.forEach((i) => {\n  const { model } = i\n\n  if (model === sleepStageConstants.WAKE_STAGE) {\n    console.log('This stage is awake stage')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Settings App Implementation Example in JavaScript\nDESCRIPTION: Recommended structure for developing a Settings App, demonstrating state management, SettingsStorage usage, UI rendering with Button component, and event handling to update data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/app-settings/register.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  // 1. Define state\n  state: {\n    testKey: null\n  },\n  build(props) {\n    // 2. Get SettingsStorage\n    this.getStorage(props)\n\n    // 3. Logic\n    const toggleButtonMap = {\n      ['Hello Zepp OS']: 'Hello World',\n      ['Hello World']: 'Hello Zepp OS'\n    }\n\n    // 4. Return Render Function\n    return Button({\n      label: this.state.testKey,\n      style: {\n        fontSize: '12px',\n        borderRadius: '30px',\n        background: '#D85E33',\n        color: 'white'\n      },\n      onClick: () => {\n        // 5. Modify the data in settingsStorage in the callback function of the event\n        props.settingsStorage.setItem('testKey', toggleButtonMap[this.state.testKey])\n      }\n    })\n  },\n  getStorage(props) {\n    this.state.testKey = props.settingsStorage.getItem('testKey') || 'Hello World'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing System Notifications with Time Service in Zepp OS\nDESCRIPTION: A complete example showing how to implement system notifications in a Zepp OS Mini Program. The code creates a time service that sends periodic notifications with the current time and includes interactive buttons for navigation and service control. It demonstrates notification creation, time sensor usage, and app service lifecycle management.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/system-notification.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseQuery } from '../libs/utils'\nimport { log } from '@zos/utils'\nimport * as notificationMgr from '@zos/notification'\nimport * as appServiceMgr from '@zos/app-service'\nimport { Time } from '@zos/sensor'\n\nconst moduleName = \"Time Service\";\nconst timeSensor = new Time();\n\nconst logger = log.getLogger('time.service')\n\n// Send a notification\nfunction sendNotification() {\n  logger.log('send notification')\n  notificationMgr.notify({\n    title: \"Time Service\",\n    content: `Now the time is ${timeSensor.getHours()}:${timeSensor.getMinutes()}:${timeSensor.getSeconds()}`,\n    actions: [\n      {\n        text: \"Home Page\",\n        file: \"pages/index\",\n      },\n      {\n        text: \"Stop Service\",\n        file: \"app-service/time_service\",\n        param: \"action=exit\", //! processed in onEvent()\n      },\n    ],\n  });\n}\n\nAppService({\n  onEvent(e) {\n    logger.log(`service onEvent(${e})`);\n    let result = parseQuery(e);\n    if (result.action === \"exit\") {\n      appServiceMgr.exit();\n    }\n  },\n  onInit(e) {\n    logger.log(`service onInit(${e})`);\n\n    timeSensor.onPerMinute(() => {\n      logger.log(\n        `${moduleName} time report: ${timeSensor.getHours()}:${timeSensor.getMinutes()}:${timeSensor.getSeconds()}`\n      );\n      sendNotification();\n    });\n\n    timeSensor.onPerDay(() => {\n      logger.log(moduleName + \" === day change ===\");\n    });\n  },\n  onDestroy() {\n    logger.log(\"service on destroy invoke\");\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating IMG Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG widget using hmUI.createWidget(). It sets the x and y coordinates and the image source. It also adds a click event listener to change the y-coordinate when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img = hmUI.createWidget(hmUI.widget.IMG, {\n      x: 125,\n      y: 125,\n      src: 'zeppos.png'\n    })\n    img.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      img.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using BloodOxygen Sensor in JavaScript\nDESCRIPTION: This example demonstrates how to use the BloodOxygen sensor, including creating an instance, getting current and historical data, registering change events, and managing measurements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BloodOxygen } from '@zos/sensor'\n\nconst bloodOxygen = new BloodOxygen()\nconst { value } = bloodOxygen.getCurrent()\nconst lastDay = bloodOxygen.getLastDay()\nconst callback = () => {\n  console.log(bloodOxygen.getCurrent())\n}\n\nbloodOxygen.onChange(callback)\nbloodOxygen.stop()\nbloodOxygen.start()\n// When not needed for use\nbloodOxygen.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Complete Fat Burning Sensor Usage Example in JavaScript\nDESCRIPTION: Example showing how to initialize the FatBurning sensor, get current and target values, register a change event callback, and properly clean up when done.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FatBurning } from '@zos/sensor'\n\nconst fatBurning = new FatBurning()\nconst current = fatBurning.getCurrent()\nconst target = fatBurning.getTarget()\nconst callback = () => {\n  console.log(fatBurning.getCurrent())\n}\n\nfatBurning.onChange(callback)\n\n// When not needed for use\nfatBurning.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Event Listener in JavaScript\nDESCRIPTION: Example of registering a click event listener on an image widget, demonstrating how to handle the CLICK_DOWN event and access event information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/addEventListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst img_bkg = hmUI.createWidget(hmUI.widget.IMG)\n\nimg_bkg.addEventListener(hmUI.event.CLICK_DOWN, function (info) {\n  //Registering event listeners.\n  console.log(info.x)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Types in app.json for Zepp OS v3\nDESCRIPTION: Example of configuring supported screen types and resolutions in the app.json file for a Zepp OS v3 Mini Program. This configuration specifies adaptation for round, square, band screens, and a specific square screen resolution.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/screen-adaption.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platforms\": [\n    {\n      \"st\": \"r\"\n    },\n    {\n      \"st\": \"s\"\n    },\n    {\n      \"st\": \"b\"\n    },\n    {\n      \"st\": \"s\",\n      \"sr\": \"w320\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last 24 Hours Blood Oxygen Data in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript interface for the getLastDay() method, which returns an array of average blood oxygen samples for the past 24 hours.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastDay(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageBuilder in Side Service (JavaScript)\nDESCRIPTION: Sets up the MessageBuilder instance in the Side Service, establishing a connection and listening for messages. This code is typically placed in the app-side/index.js file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message-side'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    // establish connection\n    messageBuilder.listen(() => {})\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Mini Program Directory Structure for Device-Specific Assets\nDESCRIPTION: This snippet shows the directory structure for a Zepp OS Mini Program with device-specific assets. Resources for different device models are organized in separate folders under the assets directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app.js\n├── app.json\n├── assets\n│   ├── gtr-3-pro\n│   │   ├── icon.png\n│   │   └── image\n│   │       └── logo.png\n...\n```\n\n----------------------------------------\n\nTITLE: Page Navigation with Parameters in Zepp OS\nDESCRIPTION: Demonstrates how to pass parameters from pageA to pageB using the push API for page navigation. The source page passes parameters through the params object, which can be accessed in the destination page's onInit method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'path/to/pageB',\n  params: {\n    id: '0',\n    type: 'normal'\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  onInit(params) {\n    const paramsObj = JSON.parse(params)\n    const { id, type } = paramsObj\n    console.log(id === '0') // true\n    console.log(type === 'normal') // true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Sleep Stage Data in ZeppOS\nDESCRIPTION: Example code demonstrating how to access sleep stage data and iterate through the results. Each stage contains model (type of sleep), start and stop times in minutes from day start.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sleepStageArray = sleep.getSleepStageData()\n\nfor (int i = 0; i < sleepStageArray.length; i++) {\n  const data = sleepStageArray[i];\n  console.log(data.model)\n  console.log(data.start)\n  console.log(data.stop)\n}\n```\n\n----------------------------------------\n\nTITLE: Event-based Communication in Side Service\nDESCRIPTION: Implementation of bidirectional communication in the Side Service using MessageBuilder's event system. Shows how to send messages to Device App and handle incoming requests.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    messageBuilder.listen(() => {})\n\n    // send a message to Device App\n    messageBuilder.call({ text: 'Hello Zepp OS' })\n\n    // receive a message from Device App\n    messageBuilder.on('request', (ctx) => {\n      const payload = messageBuilder.buf2Json(ctx.request.payload)\n      const { method, params } = payload\n\n      if (method === 'GET') {\n        ctx.response({\n          data: { result : 0 }\n        })\n      }\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Complete FAT_BURRING Sensor Implementation Example\nDESCRIPTION: A full example showing how to create a FAT_BURRING sensor, display its values, and handle change events. Includes UI widgets to show fat burning data and a button to register event listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const fatburn = hmSensor.createSensor(hmSensor.id.FAT_BURRING)\n\n    const currentText = new TextByLine({\n      text: `current:${fatburn.current};target:${fatburn.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${fatburn.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = fatburn.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const fatburnChangeListener = () => {\n      fatburn.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: fatburnChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete HISTOGRAM Widget Example in Zepp OS\nDESCRIPTION: A comprehensive example demonstrating the creation and configuration of a HISTOGRAM widget with various properties including item styling, data, axes configuration, and text labels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align } from '@zos/ui'\n\nPage({\n  build() {\n    const fillRect = createWidget(widget.FILL_RECT, {\n      x: 100,\n      y: 120,\n      w: 300,\n      h: 300,\n      color: 0xffffff\n    })\n\n    const view = createWidget(widget.HISTOGRAM, {\n      x: 100,\n      y: 120,\n      h: 300,\n      w: 300,\n      item_width: 20,\n      item_space: 10,\n      item_radius: 10,\n      item_start_y: 50,\n      item_max_height: 230,\n      item_color: 0x304ffe,\n      data_array: [20, 30, 40, 50, 60, 100, 80, 90, 20, 30],\n      data_count: 10,\n      data_min_value: 10,\n      data_max_value: 100,\n      xline: {\n        pading: 20,\n        space: 20,\n        start: 0,\n        end: 300,\n        color: 0x00c853,\n        width: 1,\n        count: 15\n      },\n      yline: {\n        pading: 10,\n        space: 10,\n        start: 0,\n        end: 300,\n        color: 0xff6d00,\n        width: 1,\n        count: 30\n      },\n      xText: {\n        x: 12,\n        y: 270,\n        w: 20,\n        h: 50,\n        space: 10,\n        align: align.LEFT,\n        color: 0x000000,\n        count: 10,\n        data_array: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n      },\n      yText: {\n        x: 0,\n        y: 20,\n        w: 50,\n        h: 50,\n        space: 10,\n        align: align.LEFT,\n        color: 0x000000,\n        count: 6,\n        data_array: ['a', 'b', 'c', 'd', 'e', 'f']\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Capture in Zepp OS Mini Program Page Lifecycle\nDESCRIPTION: This code snippet demonstrates how to implement error capture in the build lifecycle of a Zepp OS Mini Program page. It shows both the original code that produces an error and the modified version with error handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/error-catch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const a = undefined\n    const b = () => {\n      a()\n    }\n    const c = () => {\n      b()\n    }\n    c()\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    try {\n      const a = undefined\n      const b = () => {\n        a()\n      }\n      const c = () => {\n        b()\n      }\n      c()\n    } catch (e) {\n      console.log('LifeCycle Error', e)\n      e && e.stack && e.stack.split(/\\n/).forEach((i) => console.log('error stack', i))\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering AppSideService with Lifecycle Callbacks in JavaScript\nDESCRIPTION: This code snippet demonstrates how to register an instance of AppSideService with lifecycle callback functions. It includes onInit, onRun, and onDestroy methods to handle different stages of the service lifecycle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/side-service/register.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAppSideService({\n  onInit() {\n    // ...\n  },\n  onRun() {\n    // ...\n  },\n  onDestroy() {\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Complete CHECKBOX_GROUP Implementation Example\nDESCRIPTION: Comprehensive example showing how to create a CHECKBOX_GROUP with three STATE_BUTTON options, initialize the widget, set default selections, and handle state changes through a callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const checkbox_group = createWidget(widget.CHECKBOX_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = checkbox_group.createWidget(widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = checkbox_group.createWidget(widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = checkbox_group.createWidget(widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    checkbox_group.setProperty(prop.INIT, button2)\n    checkbox_group.setProperty(prop.CHECKED, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete STEP Sensor Implementation Example\nDESCRIPTION: A comprehensive example showing how to implement step counting in a ZeppOS application. It creates a UI with text displays for current step count and change events, plus a button to register the change event listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const step = hmSensor.createSensor(hmSensor.id.STEP)\n\n    const currentText = new TextByLine({\n      text: `current:${step.current};target:${step.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${step.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = step.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const stepChangeListener = () => {\n      step.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: stepChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete HISTOGRAM Widget Example in Zepp OS\nDESCRIPTION: A comprehensive example demonstrating the creation and configuration of a HISTOGRAM widget with various properties including item styling, data, axes configuration, and text labels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align } from '@zos/ui'\n\nPage({\n  build() {\n    const fillRect = createWidget(widget.FILL_RECT, {\n      x: 100,\n      y: 120,\n      w: 300,\n      h: 300,\n      color: 0xffffff\n    })\n\n    const view = createWidget(widget.HISTOGRAM, {\n      x: 100,\n      y: 120,\n      h: 300,\n      w: 300,\n      item_width: 20,\n      item_space: 10,\n      item_radius: 10,\n      item_start_y: 50,\n      item_max_height: 230,\n      item_color: 0x304ffe,\n      data_array: [20, 30, 40, 50, 60, 100, 80, 90, 20, 30],\n      data_count: 10,\n      data_min_value: 10,\n      data_max_value: 100,\n      xline: {\n        pading: 20,\n        space: 20,\n        start: 0,\n        end: 300,\n        color: 0x00c853,\n        width: 1,\n        count: 15\n      },\n      yline: {\n        pading: 10,\n        space: 10,\n        start: 0,\n        end: 300,\n        color: 0xff6d00,\n        width: 1,\n        count: 30\n      },\n      xText: {\n        x: 12,\n        y: 270,\n        w: 20,\n        h: 50,\n        space: 10,\n        align: align.LEFT,\n        color: 0x000000,\n        count: 10,\n        data_array: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n      },\n      yText: {\n        x: 0,\n        y: 20,\n        w: 50,\n        h: 50,\n        space: 10,\n        align: align.LEFT,\n        color: 0x000000,\n        count: 6,\n        data_array: ['a', 'b', 'c', 'd', 'e', 'f']\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Drawing Circle on CANVAS in Zepp OS\nDESCRIPTION: Illustrates drawing a filled circle on the CANVAS widget using the drawCircle method, specifying center coordinates, radius, and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.drawCircle({\n  center_x: 80,\n  center_y: 140,\n  radius: 40,\n  color: 0xfff400\n})\n```\n\n----------------------------------------\n\nTITLE: Registering AppSideService with Lifecycle Callbacks in JavaScript\nDESCRIPTION: This code snippet demonstrates how to register an instance of AppSideService with lifecycle callback functions. It includes onInit, onRun, and onDestroy methods to handle different stages of the service lifecycle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/side-service/register.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAppSideService({\n  onInit() {\n    // ...\n  },\n  onRun() {\n    // ...\n  },\n  onDestroy() {\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Event-based Communication in Side Service (JavaScript)\nDESCRIPTION: Shows how to handle incoming messages and send responses in the Side Service using MessageBuilder. It demonstrates sending messages to the Device App and processing incoming requests.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message-side'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    messageBuilder.listen(() => {})\n\n    // send a message to Device App\n    messageBuilder.call({ text: 'Hello Zepp OS' })\n\n    // receive a message from Device App\n    messageBuilder.on('request', (ctx) => {\n      const payload = messageBuilder.buf2Json(ctx.request.payload)\n      const { method, params } = payload\n\n      if (method === 'GET') {\n        ctx.response({\n          data: { result : 0 }\n        })\n      }\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weather Forecast Data in JavaScript\nDESCRIPTION: Example of using the Weather API to retrieve forecast and tide data. It demonstrates how to create a Weather instance, call getForecast method, and iterate through the returned forecast and tide data arrays to log information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Weather.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Weather } from '@zos/sensor'\n\nconst weather = new Weather()\nconst { forecastData, tideData, cityName } = weather.getForecast()\n\nconsole.log(cityName)\n\nfor (let i = 0; i < forecastData.count; i++) {\n  const element = forecastData.data[i]\n  console.log('Index' + element.index)\n  console.log('Highest temperature' + element.high)\n  console.log('Lowest temperature' + element.low)\n}\n\nfor (let i = 0; i < tideData.count; i++) {\n  const element = tideData.data[i]\n  console.log('Sunrise' + element.sunrise.hour + element.sunrise.minute)\n  console.log('Sunset' + element.sunset.hour + element.sunset.minute)\n}\n```\n\n----------------------------------------\n\nTITLE: Page Navigation with Parameters in Zepp OS\nDESCRIPTION: Demonstrates how to pass parameters from pageA to pageB using the push API for page navigation. The source page passes parameters through the params object, which can be accessed in the destination page's onInit method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'path/to/pageB',\n  params: {\n    id: '0',\n    type: 'normal'\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  onInit(params) {\n    const paramsObj = JSON.parse(params)\n    const { id, type } = paramsObj\n    console.log(id === '0') // true\n    console.log(type === 'normal') // true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a Page and Accessing Page Instance in Zepp OS\nDESCRIPTION: This snippet demonstrates how to register a page using the Page constructor, define lifecycle callbacks, and access the page instance using getCurrentPage(). It shows the structure of a basic page with state and lifecycle methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/page.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS'\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  }\n})\n\nconst page = getCurrentPage()\nconsole.log(page._options.state.text)\n```\n\n----------------------------------------\n\nTITLE: Receiving Parameters in Target Page in ZeppOS\nDESCRIPTION: Shows how to receive and parse parameters in the target page (pageB.js) using the onInit lifecycle method. The parameters are parsed from JSON format.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  onInit(params) {\n    const paramsObj = JSON.parse(params)\n    const { id, type } = paramsObj\n    console.log(id === '0') // true\n    console.log(type === 'normal') // true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Real Network Request with Fetch API in ZeppOS Side Service\nDESCRIPTION: This commented code snippet shows how to implement a real network request using the fetch API in the Side Service of a ZeppOS Mini Program. Developers can uncomment and adjust this code to make actual web requests.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/samples/app/fetchAPI.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// fetch('https://api.example.com/data', {\n//   method: 'GET',\n//   headers: {\n//     'Content-Type': 'application/json'\n//   }\n// })\n// .then(response => response.json())\n// .then(data => {\n//   // Process the response data\n// })\n// .catch(error => {\n//   console.error('Error:', error);\n// });\n```\n\n----------------------------------------\n\nTITLE: Receiving Parameters in Target Page in ZeppOS\nDESCRIPTION: Shows how to receive and parse parameters in the target page (pageB.js) using the onInit lifecycle method. The parameters are parsed from JSON format.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  onInit(params) {\n    const paramsObj = JSON.parse(params)\n    const { id, type } = paramsObj\n    console.log(id === '0') // true\n    console.log(type === 'normal') // true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating ZeppOS Project with Zeus CLI\nDESCRIPTION: Command to create a new Mini Program project template named 'hello-world' using the Zeus CLI tool. This will generate a new directory with the basic project structure and necessary files.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/create.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzeus create hello-world\n```\n\n----------------------------------------\n\nTITLE: Complete CYCLE_LIST Implementation Example\nDESCRIPTION: A complete example showing how to create and configure a CYCLE_LIST widget with image items. It demonstrates setting up the list with image array data and handling item clicks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  state: {\n    pageName: 'CYCLE_LIST'\n  },\n\n  build() {\n    const imgArray = ['number-img/0.png', 'number-img/1.png', 'number-img/2.png', 'number-img/3.png', 'number-img/4.png']\n    const cycleList = createWidget(widget.CYCLE_LIST, {\n      x: 230,\n      y: 120,\n      h: 300,\n      w: 30,\n      data_array: imgArray,\n      data_size: 5,\n      item_height: 100,\n      item_click_func: (list, index) => {\n        console.log(index)\n      },\n      item_bg_color: 0xffffff\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating VIEW_CONTAINER Widget in Zepp OS\nDESCRIPTION: Demonstrates how to create a VIEW_CONTAINER widget and add child widgets to it. This snippet shows the basic setup for using the container in a Zepp OS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/VIEW_CONTAINER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst viewContainer = createWidget(widget.VIEW_CONTAINER, Param)\n\n// Creating UI sub-widgets\nviewContainer.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Text Animation in ZeppOS JavaScript\nDESCRIPTION: Example demonstrating how to create and control text widget animations in ZeppOS. Shows configuration of multiple animation steps, including position changes with linear transitions, and animation state management using pause and resume controls.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widgetAnimations.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, text_style, prop, anim_status } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: px(96),\n      y: px(120),\n      w: px(288),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(36),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    const anim_step1 = {\n      anim_rate: 'linear',\n      anim_duration: 2000,\n      anim_from: px(10),\n      anim_to: px(110),\n      anim_prop: prop.X\n    }\n\n    const anim_step2 = {\n      anim_rate: 'linear',\n      anim_duration: 2000,\n      anim_from: px(120),\n      anim_to: px(300),\n      anim_prop: prop.Y\n    }\n\n    const animId = textWidget.setProperty(prop.ANIM, {\n      anim_steps: [anim_step1, anim_step2],\n      anim_fps: 25\n    })\n\n    textWidget.setProperty(prop.ANIM_STATUS, {\n      anim_id: animId,\n      anim_status: anim_status.PAUSE\n    })\n\n    textWidget.setProperty(prop.ANIM_STATUS, {\n      anim_id: animId,\n      anim_status: anim_status.RESUME\n    })\n\n    const currentStatus = textWidget.getProperty(prop.ANIM_STATUS, animId)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing BLE Communication with hmBle Module in JavaScript\nDESCRIPTION: Example JavaScript code demonstrating the usage of hmBle module methods for creating a connection, sending/receiving data, checking connection status, and listening for status changes in a Zepp OS device application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// 创建连接\nhmBle.createConnect(function (index, data, size) {\n  // 收到消息回调，将收到的消息原路返回\n  hmBle.send(data, size)\n})\n\n// 断开连接\nhmBle.disConnect()\n\n// 打印蓝牙连接状态\nconsole.log(hmBle.connectStatus())\n\n// 注册连接状态监听\nhmBle.addListener(function (status) {\n  // 打印连接状态\n  console.log(status)\n})\n```\n\n----------------------------------------\n\nTITLE: Organizing Style Code by Screen Shape\nDESCRIPTION: Example of a style module that dynamically exports different style variables based on device screen shape, using device information API to determine the appropriate styles.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDeviceInfo, SCREEN_SHAPE_SQUARE, SCREEN_SHAPE_ROUND } from '@zos/device'\nimport { align, text_style } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst deviceInfo = getDeviceInfo()\nconst { width, height, screenShape } = deviceInfo\n\nconst processStyles = (styleObj = {}) => {\n  return styleObj[screenShape]\n}\n\nconst HOME_TITLE = {\n  [SCREEN_SHAPE_ROUND]: {\n    attrs: {\n      text: 'Hello World Round'\n    },\n    x: px(96),\n    y: px(40),\n    w: px(288),\n    h: px(46),\n    color: 0xffffff,\n    text_size: px(36),\n    align_h: align.CENTER_H,\n    align_v: align.CENTER_V,\n    text_style: text_style.WRAP\n  },\n  [SCREEN_SHAPE_SQUARE]: {\n    attrs: {\n      text: 'Hello World Square',\n      x: 32,\n      y: 11,\n      w: 232,\n      h: 42,\n      color: 0x666666,\n      text_size: 32,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE\n    }\n  }\n}\n\nexport default {\n  HOME_TITLE: processStyles(HOME_TITLE)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Sleep Status with getSleepingStatus Method\nDESCRIPTION: Method to get the current sleep state. Returns 0 for awake or 1 for sleeping. Available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetSleepingStatus(): number\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data with SessionStorage in ZeppOS\nDESCRIPTION: Shows how to retrieve data previously stored in sessionStorage from another page. This example shows pageB.js retrieving the value stored by pageA.js.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sessionStorage } from '@zos/storage'\n\nsessionStorage.getItem('test')\n```\n\n----------------------------------------\n\nTITLE: Complete Sleep Data Application - JavaScript\nDESCRIPTION: Full example showing how to create a UI that displays various sleep metrics including basic info, sleep stages, and heart rate data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const sleep = hmSensor.createSensor(hmSensor.id.SLEEP)\n\n    const { score, deepMin, startTime, endTime } = sleep.getBasicInfo()\n\n    new TextByLine({\n      text: `score:${score};deepMin:${deepMin};startTime:${startTime};endTime:${endTime}`,\n      line: 0\n    }).render()\n\n    const totalTime = sleep.getTotalTime()\n\n    new TextByLine({\n      text: `totalTime:${totalTime}`,\n      line: 1\n    }).render()\n\n    const modelData = sleep.getSleepStageModel()\n\n    const sleepStageArray = sleep.getSleepStageData();\n\n    for (let i = 0; i < sleepStageArray.length; i++) {\n      const element = sleepStageArray[i];\n      const { model, start, stop } = element\n\n      new TextByLine({\n        text: `model:${model};start:${start};stop:${stop}`,\n        line: i + 2\n      }).render()\n    }\n\n    const hrArr = sleep.getSleepHrData()\n\n    const hrArrWidgetList = hrArr.slice(0, 10)\n\n    for (let i = 0; i < hrArrWidgetList.length; i++) {\n      new TextByLine({\n        text: `hrValue:${hrArrWidgetList[i]}`,\n        line: i + sleepStageArray.length + 3\n      }).render()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Text Widgets in Zepp OS with JavaScript\nDESCRIPTION: This code demonstrates how to create text widgets in Zepp OS using the @zos/ui module. It shows creating a basic text widget with positioning and styling, adding a click event listener to change its position, and creating a second text widget with a custom font and internationalization support.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, align, prop, text_style, event } from '@zos/ui'\n\nPage({\n  build() {\n    const text = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO, Zepp OS'\n    })\n\n    text.addEventListener(event.CLICK_DOWN, (info) => {\n      text.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n\n    const textWithFont = createWidget(widget.TEXT, {\n      x: 96,\n      y: 300,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      font: 'fonts/custom.ttf',\n      text_i18n: {\n        'en-US': 'Hello Zepp OS',\n        'zh-CN': '你好 Zepp OS'\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_ANIM Widget in ZeppOS\nDESCRIPTION: Shows how to import and create an IMG_ANIM widget that displays frame-by-frame animations with specified parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst imgAnim = createWidget(widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Complete Dialog Implementation Example\nDESCRIPTION: Comprehensive example showing dialog creation with custom styling, text alignment, and button callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/DIALOG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\nPage({\n  build() {\n    const dialog = createWidget(widget.DIALOG, {\n      ok_text: 'OK',\n      cancel_text: 'CANCEL'\n    })\n    dialog.setProperty(prop.MORE, {\n      text: 'DIALOG',\n      content_text_size: 40,\n      content_bg_color: 0x000000,\n      content_text_color: 0xffffff,\n      dialog_align_h: align.CENTER_H,\n      content_text_align_h: align.CENTER_H,\n      content_text_align_v: align.CENTER_V,\n      ok_func: () => {\n        console.log('OK')\n      },\n      cancel_func: () => {\n        console.log('CANCEL')\n      }\n    })\n    dialog.setProperty(prop.SHOW, true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using WorldClock Sensor API\nDESCRIPTION: Complete example demonstrating how to use the WorldClock sensor. Shows initialization, retrieving world clock count, iterating through available world clocks to access their information, and proper cleanup by destroying the sensor when finished.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/WorldClock.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WorldClock } from '@zos/sensor'\n\nconst worldClock = new WorldClock()\nconst worldClockCount = worldClock.getCount()\n\nfor (let i = 0; i < worldClockCount; i++) {\n  const worldClockInfo = worldClock.getInfo(i)\n  console.log(worldClockInfo.city)\n  console.log(worldClockInfo.cityCode)\n  console.log(worldClockInfo.hour)\n  console.log(worldClockInfo.minute)\n  console.log(worldClockInfo.timeZoneHour)\n  console.log(worldClockInfo.timeZoneMinute)\n}\n\n// When not needed for use\nworldClock.destroy()\n```\n\n----------------------------------------\n\nTITLE: Implementing CHECKBOX_GROUP with Multiple STATE_BUTTONs in ZeppOS\nDESCRIPTION: Provides a complete example of creating a CHECKBOX_GROUP with multiple STATE_BUTTONs. It demonstrates setting up the group, creating individual buttons, initializing the default state, and handling state changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const checkbox_group = createWidget(widget.CHECKBOX_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = checkbox_group.createWidget(widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = checkbox_group.createWidget(widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = checkbox_group.createWidget(widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    checkbox_group.setProperty(prop.INIT, button2)\n    checkbox_group.setProperty(prop.CHECKED, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Dialog Implementation Example\nDESCRIPTION: Comprehensive example showing dialog creation with custom styling, text alignment, and button callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/DIALOG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\nPage({\n  build() {\n    const dialog = createWidget(widget.DIALOG, {\n      ok_text: 'OK',\n      cancel_text: 'CANCEL'\n    })\n    dialog.setProperty(prop.MORE, {\n      text: 'DIALOG',\n      content_text_size: 40,\n      content_bg_color: 0x000000,\n      content_text_color: 0xffffff,\n      dialog_align_h: align.CENTER_H,\n      content_text_align_h: align.CENTER_H,\n      content_text_align_v: align.CENTER_V,\n      ok_func: () => {\n        console.log('OK')\n      },\n      cancel_func: () => {\n        console.log('CANCEL')\n      }\n    })\n    dialog.setProperty(prop.SHOW, true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Data from a ZeppOS Page\nDESCRIPTION: Demonstrates how to access global data in a page using the getApp() method. This allows pages to read shared state information from anywhere in the application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    console.log(getApp()._options.globalData.type)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring ZeppOS Mini Program Page with Separated Concerns\nDESCRIPTION: Demonstrates how to organize a ZeppOS Mini Program page by separating UI structure, style, and behavior into different files. The main page file handles UI rendering and event dispatching, while styles and logic are imported from separate modules.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/code-organization.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TEXT_STYLE } from './page.styles.js'\nimport TextClass from './text.class.js'\n\nPage({\n  state: {\n    textInstance: null\n  },\n  build() {\n    this.state.textInstance = new TextClass()\n    this.buildUI()\n  },\n  buildUI() {\n    hmUI.createWidget(hmUI.widget.TEXT, {\n      attr: {\n        text: this.state.textInstance.getText()\n      },\n      styles: TEXT_STYLE\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete KEYBOARD Widget Implementation Example\nDESCRIPTION: Provides a full example of creating a KEYBOARD widget, setting up a callback function, configuring keys, and manipulating various properties of the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/KEYBOARD.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\nfunction callback(keyboard, id, value) {\n  console.log(`id:${id} char:${value}`)\n  keyboard.setProperty(prop.TEXT, `id:${id} char:${value}`)\n\n  ret = keyboard.getProperty(prop.KEY_PARA, id)\n  if (ret !== undefined) {\n    console.log(id)\n    console.log(ret.value)\n    console.log(ret.x)\n    console.log(ret.y)\n  }\n}\n\nconst keyboard = createWidget(widget.KEYBOARD, {\n  click_func: callback,\n  key_attr: [\n    {\n      id: 0,\n      x: 0,\n      y: 150,\n      text: 'H',\n      value: 1\n    },\n    {\n      id: 1,\n      x: 90,\n      y: 150,\n      text: 'E',\n      value: 2\n    },\n    {\n      id: 20,\n      x: 180,\n      y: 150,\n      text: 'L',\n      value: 3\n    },\n    {\n      id: 3,\n      x: 270,\n      y: 150,\n      text: 'L',\n      value: 4\n    },\n    {\n      id: 4,\n      x: 360,\n      y: 150,\n      text: 'O',\n      value: 5\n    },\n    {\n      id: 6,\n      x: 45,\n      y: 250,\n      text: 'R',\n      value: 6\n    },\n    {\n      id: 7,\n      x: 135,\n      y: 250,\n      text: 'O',\n      value: 7\n    },\n    {\n      id: 8,\n      x: 225,\n      y: 250,\n      text: 'S',\n      value: 8\n    },\n    {\n      id: 9,\n      x: 315,\n      y: 250,\n      text: 'E',\n      value: 9\n    },\n\n    {\n      id: 10,\n      x: 180,\n      y: 350,\n      image: 'images/common/widgetsbc/phoneCall/phone call_ic_answer_64px.png',\n      text: ' ',\n      value: 10\n    }\n  ]\n})\n\nkeyboard.setProperty(prop.TEXT_STYLE, {\n  x: 0,\n  w: 480,\n  align_h: align.CENTER,\n  alpha: 255,\n  color: 0xff0000,\n  show: 1\n})\n\nkeyboard.setProperty(prop.TEXT, 'hello rose !')\n\nkeyboard.setProperty(prop.X, 0)\nkeyboard.setProperty(prop.Y, 10)\n\nkeyboard.setProperty(prop.KEY_PARA, {\n  id: 1,\n  text: 'c',\n  value: 98\n})\n\nkeyboard.setProperty(prop.DEL_KEY, {\n  id: 20\n})\n\nkeyboard.setProperty(prop.ADD_KEY, {\n  id: 100,\n  x: 280,\n  y: 350,\n  text: '!',\n  value: 11\n})\n\nkeyboard.setProperty(prop.ADD_KEY, {\n  id: 99,\n  x: 80,\n  y: 350,\n  text: '!',\n  value: 11\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Zepp OS Mini Program with App Constructor in JavaScript\nDESCRIPTION: Example showing how to register a Mini Program instance using the App constructor, define global data, implement lifecycle callbacks, and access the app instance using getApp(). Demonstrates setting up onCreate and onDestroy lifecycle methods and managing global state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/app.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    text: 'Hello Zepp OS'\n  },\n  onCreate() {\n    console.log('onCreate')\n    console.log(this.globalData.text)\n  },\n  onDestroy() {\n    console.log('onDestroy')\n  }\n})\n\nconst app = getApp()\nconsole.log(app._options.globalData.text)\n```\n\n----------------------------------------\n\nTITLE: Removing an Event Listener from a Widget in ZeppOS\nDESCRIPTION: Example showing how to create a widget, add an event listener, and then remove it using removeEventListener in ZeppOS. The example demonstrates importing required modules, creating an image widget, defining a listener function, and properly removing it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/removeEventListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\nconst listenerFunc = (info) => {\n  console.log(info.x)\n}\n\nimg_bkg.addEventListener(event.CLICK_DOWN, listenerFunc)\nimg_bkg.removeEventListener(event.CLICK_DOWN, listenerFunc)\n```\n\n----------------------------------------\n\nTITLE: Creating ARC Widget - Basic Instantiation\nDESCRIPTION: Shows the basic syntax for creating an ARC widget using hmUI.createWidget(). The ARC widget is used to display circular arc progress indicators.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/ARC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = hmUI.createWidget(hmUI.widget.ARC, Param)\n```\n\n----------------------------------------\n\nTITLE: Time Sensor Usage Example\nDESCRIPTION: JavaScript example showing how to import and use the Time sensor\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Time } from '@zos/sensor'\n\nconst time = new Time()\nconst currentTime = time.getTime()\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_ANIM Widget with Animation Control in ZeppOS\nDESCRIPTION: This example shows a complete implementation of the IMG_ANIM widget. It creates an animated image, sets its properties, and adds event listeners for controlling the animation. The code demonstrates how to start, pause, and resume the animation based on user interactions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, anim_status } from '@zos/ui'\n\nPage({\n  build() {\n    const imgAnimation = createWidget(widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(prop.ANIM_STATUS, anim_status.START)\n    imgAnimation.addEventListener(event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(prop.ANIM_STATUS, anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating BUTTON Widget in ZeppOS\nDESCRIPTION: Demonstrates how to create a BUTTON widget using hmUI.createWidget. The function takes two parameters: the widget type (hmUI.widget.BUTTON) and an object containing the button's properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Functionality in ZeppOS Page\nDESCRIPTION: This code example demonstrates a complete implementation of keyboard functionality within a ZeppOS Page. It includes creating the keyboard, handling input completion and cancellation, and destroying the keyboard instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SMART_KEYBOARD.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createKeyboard, inputType, deleteKeyboard } from '@zos/ui'\n\nPage({\n  onInit() {\n    this.createKeyboard()\n  },\n\n  createKeyboard() {\n    createKeyboard({\n      inputType: inputType.NUM,\n      onComplete: (result) => {\n        console.log('输入内容:', result.data)\n        this.destroyKeyboard()\n      },\n      onCancel: (result) => {\n        console.log('取消输入')\n        this.destroyKeyboard()\n      },\n      text: '100' // 初始化文本\n    })\n  },\n\n  destroyKeyboard() {\n    deleteKeyboard()\n    // 执行返回页面等后续操作...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FILL_RECT Widget with Event Listener in Zepp OS\nDESCRIPTION: Demonstrates creating a filled rectangle widget, setting its initial properties, and adding a click event listener to modify its position. This example shows how to create and interact with the FILL_RECT widget in a Zepp OS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const fill_rect = hmUI.createWidget(hmUI.widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(hmUI.prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Folder Structure for Zepp OS Mini Program\nDESCRIPTION: This tree structure shows the recommended folder organization for a Zepp OS Mini Program, including directories for app-side services, settings, widgets, assets, pages, and utilities. It demonstrates the separation of logic and layout files, as well as the organization of multilingual resources.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/architecture/folder-structure.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n.\n├── app-side // Side Service Directory\n│   └── index.js // Side Service logic as an entry file (path can be configured in app.json)\n├── setting // Settings App Directory\n│   ├── i18n // Settings App i18n Directory\n│   │   └── en-US.po\n│   └── index.js // Settings App logic as an entry file (path can be configured in app.json)\n├── app-widget // Shortcut Card widget Directory\n│   └── index.js // Shortcut Card logic as an entry file (path can be configured in app.json)\n├── secondary-widget // SecondaryWidget Directory\n│   └── index.js // SecondaryWidget logic as an entry file (path can be configured in app.json)\n├── app.js // Mini Program logic\n├── app.json // Mini Program configuration\n├── assets // Resource file storage directory, differentiated by different screen types, subdirectory named after the key of the targets object in app.json\n│   ├── gt.r\n│   │   ├── icon.png\n│   │   ├── fonts\n│   │   │   └── custom.ttf\n│   │   └── image\n│   │       └── logo.png\n│   └── gt.s\n│       ├── icon.png\n│       ├── fonts\n│       │   └── custom.ttf\n│       └── image\n│           └── logo.png\n├── page // Device application page\n│   ├── home // device application home directory (one directory for one page is recommended)\n│   │   ├── index.page.js // page logic\n│   │   └── index.layout.js // page style\n│   └── i18n // Device application multilingual directory\n│       └── en-US.po\n└── utils // Tools and functions directory\n    ├── constants.js\n    ├── fs.js\n    └── index.js\n```\n\n----------------------------------------\n\nTITLE: Processing Basic Sleep Information in ZeppOS\nDESCRIPTION: Example code showing how to access basic sleep information and process sleep start/end times. Demonstrates handling time calculations for sleep data that spans midnight.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst basicInfo = sleep.getBasicInfo()\nconsole.log('basicInfo score=' + basicInfo.score) //睡眠得分\nconsole.log('basicInfo deepMin=' + basicInfo.deepMin) //深睡时间 单位分\nconsole.log('basicInfo startTime=' + basicInfo.startTime) // 睡眠起始时间, 基于当天0点的分钟数\nconsole.log('basicInfo endTime=' + basicInfo.endTime) // 睡眠结束时间, 和起始时间同基点的分钟数\n// 睡眠totalTime = endTime - startTime + 1;\n\nlet start = basicInfo.startTime\nif (start >= SLEEP_REFERENCE_ZERO) {\n  // SLEEP_REFERENCE_ZERO 是一天的分钟数, 即 24*60\n  start -= SLEEP_REFERENCE_ZERO\n}\n\nhour = start / 60\nminute = start % 60\n\nconst end = basicInfo.endTime + 1 // 和副屏中对齐的话,, 结束时间需要加1\nif (end >= SLEEP_REFERENCE_ZERO) {\n  end -= SLEEP_REFERENCE_ZERO\n}\nhour = end / 60\nminute = end % 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Shortcut Cards with i18n Support in app.json\nDESCRIPTION: JSON configuration for adding Shortcut cards to a ZeppOS Mini Program. This snippet demonstrates how to implement name internationalization for Shortcut cards using the root i18n field for multiple languages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/secondary-widget.md#2025-04-07_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i18n\": {\n    \"en-US\": {\n      \"appName\": \"Calories\"\n    },\n    \"zh-CN\": {\n      \"app-widget\": {\n        \"widgets\":[\n          {\n          \"name\": \"卡路里\"\n        }]\n      }\n    }\n  },\n  \"defaultLanguage\": \"en-US\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Click Events for Multiple Widgets with GROUP in ZeppOS\nDESCRIPTION: This snippet demonstrates how to use the GROUP widget to register a single click event for multiple widgets, expanding the clickable area. It creates a group widget, adds child widgets to it, and registers the event listener on the group.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/widget-group.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst callback = () => {\n  console.log('callback')\n}\n\nconst group_widget = createWidget(widget.GROUP , {\n  // ...\n})\n\nconst img_icon_widget = group_widget.createWidget(widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = group_widget.createWidget(widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = group_widget.createWidget(widget.TEXT, {\n  // ...\n})\n\ngroup_widget.addEventListener(event.CLICK_DOWN, callback)\n```\n\n----------------------------------------\n\nTITLE: Complete CHECKBOX_GROUP Implementation Example\nDESCRIPTION: Full example showing how to create a checkbox group with multiple state buttons, initialize default selection, and handle state changes\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const checkbox_group = hmUI.createWidget(hmUI.widget.CHECKBOX_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = checkbox_group.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = checkbox_group.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = checkbox_group.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    checkbox_group.setProperty(hmUI.prop.INIT, button2)\n    checkbox_group.setProperty(hmUI.prop.CHECKED, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using setItem and getItem Methods in JavaScript\nDESCRIPTION: Example showing how to store and retrieve data using the settingsStorage API methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsettings.settingsStorage.setItem('key', 'Hello World')\nconst result = settings.settingsStorage.getItem('key')\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple VIEW_CONTAINER Widgets with Scrolling in ZeppOS\nDESCRIPTION: Comprehensive example demonstrating how to create multiple VIEW_CONTAINER widgets with different z-index values, implementing scrollable content and button interactions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/VIEW_CONTAINER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst getRandomColor = () => {\n  const randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\n  function getRandomFromSection(low, high) {\n    const RANDOM = Math.random()\n    const RANGE = high - low + 1\n\n    return Math.floor(RANDOM * RANGE) + low\n  }\n\n  const colorStr = Array.from({ length: 6 }).reduce((prev, curr) => {\n    const random = getRandomFromSection(0, 15)\n    return prev + randomArr[random]\n  }, '0x')\n\n  return Number(colorStr)\n}\n\nPage({\n  build() {\n    createWidget(widget.TEXT, {\n      x: px(96),\n      y: px(40),\n      w: px(288),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(36),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'VIEW_CONTAINER'\n    })\n\n    const viewContainer = createWidget(widget.VIEW_CONTAINER, {\n      x: px(0),\n      y: px(86),\n      w: px(480),\n      h: px(400)\n    })\n\n    Array.from({ length: 5 }).forEach((_, index) => {\n      viewContainer.createWidget(widget.FILL_RECT, {\n        x: 0,\n        y: px(index * 400),\n        w: px(480),\n        h: px(400),\n        color: getRandomColor()\n      })\n\n      viewContainer.createWidget(widget.TEXT, {\n        x: px(96),\n        y: px(170) + px(index * 400),\n        w: px(288),\n        h: px(46),\n        text_size: px(36),\n        color: 0xffffff,\n        align_h: align.CENTER_H,\n        align_v: align.CENTER_V,\n        text: `INDEX: ${index}`\n      })\n    })\n\n    const viewContainerButton = createWidget(widget.VIEW_CONTAINER, {\n      x: px(0),\n      y: px(86),\n      w: px(480),\n      h: px(400),\n      z_index: 1,\n      scroll_enable: false\n    })\n\n    viewContainerButton.createWidget(widget.BUTTON, {\n      x: 0,\n      y: px(50),\n      w: px(200),\n      h: px(100),\n      text: 'Click',\n      radius: px(12),\n      normal_color: DEFAULT_COLOR,\n      press_color: DEFAULT_COLOR_TRANSPARENT,\n      click_func: () => {\n        console.log('click button')\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete CHECKBOX_GROUP Implementation Example\nDESCRIPTION: Full example showing how to create a checkbox group with multiple state buttons, initialize default selection, and handle state changes\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const checkbox_group = hmUI.createWidget(hmUI.widget.CHECKBOX_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = checkbox_group.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = checkbox_group.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = checkbox_group.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    checkbox_group.setProperty(hmUI.prop.INIT, button2)\n    checkbox_group.setProperty(hmUI.prop.CHECKED, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Stress Measurement in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getCurrent method to retrieve the current stress measurement. It returns an object with the stress value and the time of measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Creating a DATE_POINTER Widget for Week Display in ZeppOS\nDESCRIPTION: This code example demonstrates how to create a date pointer widget to display the day of week on a watch face. The widget uses a pointer image that rotates to indicate the current day of the week, with customizable background, position, angles and a decorative cover.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/DATE_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nlet week = hmUI.createWidget(hmUI.widget.DATE_POINTER, {\n  scale_x: 0,\n  scale_y: 0,\n  scale_sc: 'bg.png', //背景图 可选\n  scale_tc: 'bg.png',\n  scale_en: 'bg.png',\n  center_x: 100,\n  center_y: 100,\n  src: 'pointer.png', //指针图片\n  posX: 0,\n  posY: 0,\n  cover_x: 0, //指针上面的帽子\n  cover_y: 0,\n  cover_path: 'cover.png',\n  start_angle: 0, //0点为正 可以写负数\n  end_angle: 180,\n  type: hmUI.date.WEEK //参考上方表格\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Buzzer Controls in JavaScript\nDESCRIPTION: Complete example showing implementation of buzzer controls including UI elements and buzzer operations using the Buzzer API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align, text_style } from '@zos/ui'\nimport { Buzzer } from '@zos/sensor'\nimport { px } from '@zos/utils'\n\nconst sceneList = ['ALARM', 'REMIND_1', 'REMIND_2', 'OPERATE', 'SUCCESS', 'FAILURE']\n\nPage({\n  state: {\n    pageName: 'BUZZER',\n    currentIndex: 0,\n  },\n  build() {\n    const buzzer = new Buzzer()\n    const sceneText = createWidget(widget.TEXT, {\n      x: px(0),\n      y: px(120),\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: `${sceneList[this.state.currentIndex]}`,\n    })\n\n    const startBuzzer = () => {\n      const alarmType = buzzer.getSourceType()[sceneList[this.state.currentIndex]]\n\n      if (buzzer.isEnabled()) {\n        buzzer.start(alarmType)\n      }\n\n      this.state.currentIndex = (this.state.currentIndex + 1) % sceneList.length\n      sceneText.setProperty(prop.MORE, {\n        text: `BUZZER: ${sceneList[this.state.currentIndex]}`,\n      })\n    }\n\n    createWidget(widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'START BUZZER',\n      click_func: startBuzzer,\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Event-based Communication in Device App (JavaScript)\nDESCRIPTION: Demonstrates how to send and receive messages in the Device App using MessageBuilder. It shows handling incoming messages and sending requests to the Side Service.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { log } from '@zos/utils'\n\nconst { messageBuilder } = getApp()._options.globalData\nconst logger = log.getLogger('demo')\n\nPage({\n  build() {\n    // receive a message from the Side Service\n    messageBuilder.on('call', ({ payload: buf }) => {\n      // call the messageBuilder.buf2Json method to convert the buffer to a JS JSON object\n      const data = messageBuilder.buf2Json(buf)\n      logger.log('data', data)\n    })\n\n    // send a message to Side Service\n    messageBuilder.request({\n      method: 'GET',\n      params: {\n        index: 0\n      }\n    }).then(data => {\n      // process Side Service responses\n      const { result } = data\n      logger.log(result)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Properties in ZeppOS JavaScript\nDESCRIPTION: Demonstrates how to use setProperty to modify various widget properties, including visibility, position, size, text content, and custom dataset values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\nconst button = createWidget(widget.BUTTON, Param)\nbutton.setProperty(prop.VISIBLE, false)\n\nconst text = createWidget(widget.TEXT, Param)\ntext.setProperty(prop.MORE, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 200,\n  text: 'hello',\n  color: 0x34e073,\n  align_h: align.LEFT\n})\n\ntext.setProperty(prop.DATASET, {\n  name: 'text1'\n})\n\nconst dataset = text.getProperty(prop.DATASET)\n```\n\n----------------------------------------\n\nTITLE: CYCLE_LIST Complete Implementation Example\nDESCRIPTION: Full example showing how to implement a CYCLE_LIST widget with image array, positioning, dimensions, and click handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  state: {\n    pageName: 'CYCLE_LIST'\n  },\n\n  build() {\n    const imgArray = ['number-img/0.png', 'number-img/1.png', 'number-img/2.png', 'number-img/3.png', 'number-img/4.png']\n    const cycleList = createWidget(widget.CYCLE_LIST, {\n      x: 230,\n      y: 120,\n      h: 300,\n      w: 30,\n      data_array: imgArray,\n      data_size: 5,\n      item_height: 100,\n      item_click_func: (list, index) => {\n        console.log(index)\n      },\n      item_bg_color: 0xffffff\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing PAI Sensor Data in Zepp OS\nDESCRIPTION: Demonstrates how to access all PAI values including daily PAI, total PAI, and historical PAI data for the past six days. Each property returns a numerical value representing PAI measurements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/PAI.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pai = hmSensor.createSensor(hmSensor.id.PAI)\n\nconsole.log(\n  'The pai dailypai: ' +\n    pai.dailypai +\n    ' totalpai:' +\n    pai.totalpai +\n    ' prepai0:' +\n    pai.prepai0 +\n    ' prepai1:' +\n    pai.prepai1 +\n    ' prepai2:' +\n    pai.prepai2 +\n    ' prepai3:' +\n    pai.prepai3 +\n    ' prepai4:' +\n    pai.prepai4 +\n    ' prepai5:' +\n    pai.prepai5 +\n    ' prepai6:' +\n    pai.prepai6 +\n    '\\r\\n'\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Listener to Canvas in Zepp OS\nDESCRIPTION: Demonstrates how to add a click event listener to the canvas that logs the x and y coordinates of the click.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { event } from '@zos/ui'\n\ncanvas.addEventListener(event.CLICK_UP, function cb(info) {\n  console.log(info.x)\n  console.log(info.y)\n})\n```\n\n----------------------------------------\n\nTITLE: Zepp OS App Registration Example\nDESCRIPTION: Example of registering a Zepp OS mini program using App() function with globalData and lifecycle callbacks onCreate and onDestroy.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/global/App.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    text: 'Hello Zepp OS',\n  },\n  onCreate() {\n    console.log('onCreate')\n    console.log(this.globalData.text)\n  },\n  onDestroy() {\n    console.log('onDestroy')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Battery Sensor API in JavaScript\nDESCRIPTION: This example demonstrates how to use the Battery Sensor API in ZeppOS. It shows how to get the current battery percentage, register a change callback, and later unregister the callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Battery.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Battery } from '@zos/sensor'\n\nconst battery = new Battery()\nconst current = battery.getCurrent()\n\nconst callback = () => {\n  console.log(battery.getCurrent())\n}\n\nbattery.onChange(callback)\n\n// When not needed for use\nbattery.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Using Accelerometer API in JavaScript\nDESCRIPTION: Demonstrates how to use the Accelerometer API, including importing, creating an instance, setting up a callback, setting frequency mode, starting and stopping the sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Accelerometer, FREQ_MODE_NORMAL } from '@zos/sensor'\n\nconst accelerometer = new Accelerometer()\n\nconst callback = () => {\n  console.log(accelerometer.getCurrent())\n}\naccelerometer.onChange(callback)\naccelerometer.setFreqMode(FREQ_MODE_NORMAL)\naccelerometer.start()\n\n// When not needed for use\naccelerometer.offChange()\naccelerometer.stop()\n```\n\n----------------------------------------\n\nTITLE: Using showToast to Display a Message in JavaScript\nDESCRIPTION: Example of importing and using the showToast function from the @zos/interaction module to display a simple hello world message prompt to the user.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/showToast.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from '@zos/interaction'\n\nshowToast({\n  content: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a Page Instance in ZeppOS Mini Program\nDESCRIPTION: This snippet demonstrates how to use the Page constructor to register a page instance in a ZeppOS Mini Program. It shows the basic structure including state management, lifecycle callbacks (onInit, build, onDestroy), and how the page instance is created.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/page.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    title: 'hello world'\n  },\n  onInit() {},\n  build() {},\n  onDestroy() {}\n})\n```\n\n----------------------------------------\n\nTITLE: Full Example of BATTERY Sensor Usage in ZeppOS\nDESCRIPTION: Comprehensive example demonstrating creating a BATTERY sensor, rendering UI elements, and handling sensor events in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n\n    const currentText = new TextByLine({\n      text: `current:${battery.current}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${battery.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = battery.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const batteryChangeListener = () => {\n      battery.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: batteryChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current and Target Standing Hours in TypeScript\nDESCRIPTION: This snippet demonstrates how to get the current number of hours with standing behavior and the target number of hours for standing behavior using the Stand sensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: Complete VIBRATE Sensor Usage Example in ZeppOS\nDESCRIPTION: This comprehensive example showcases the creation of a VIBRATE sensor, setting a vibration scene, starting and stopping the vibration, and proper cleanup in the onDestroy lifecycle method. It demonstrates best practices for using the VIBRATE sensor in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n\nfunction click() {\n  vibrate.stop()\n  vibrate.scene = 25\n  vibrate.start()\n}\n\nclick()\n\nPage({\n  onDestroy() {\n    vibrate && vibrate.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Calorie Consumption\nDESCRIPTION: Gets the current calorie consumption in kcal. Available from API_LEVEL 2.0 and requires permission 'data:user.hd.calorie'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Calorie.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Weather Data Usage Example\nDESCRIPTION: Demonstrates how to retrieve and process weather forecast data including city information, forecast data, and tide information with sunrise/sunset times.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating Sensors\nconst weatherData = weather.getForecastWeather()\n\nconsole.log(weatherData.cityName)\n\nconst forecastData = weatherData.forecastData\nfor (let i = 0; i < forecastData.count; i++) {\n  const element = forecastData.data[i] // i:0 means the day\n  console.log(element.index)\n  console.log(element.high)\n  console.log(element.low)\n}\n\nconst tideData = weatherData.tideData\nfor (let i = 0; i < tideData.count; i++) {\n  const element = tideData.data[i] // i:0 means the day\n  console.log(element.sunrise.hour + element.sunrise.minute)\n  console.log(element.sunset.hour + element.sunset.minute)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Structure in ZeppOS Mini Program JavaScript\nDESCRIPTION: This snippet demonstrates the main page.js file that handles UI construction and imports styles and logic from separate files. It creates a text widget using a separate TextClass instance and applies styles defined in page.styles.js, following the separation of concerns principle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/code-organization.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\nimport { TEXT_STYLE } from './page.styles.js'\nimport TextClass from './text.class.js'\n\nPage({\n  state: {\n    textInstance: null\n  },\n  build() {\n    this.state.textInstance = new TextClass()\n    this.buildUI()\n  },\n  buildUI() {\n    createWidget(widget.TEXT, {\n      attr: {\n        text: this.state.textInstance.getText()\n      },\n      styles: TEXT_STYLE\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners from UI Widget in JavaScript\nDESCRIPTION: A JavaScript example showing how to add and remove an event listener for a UI widget. The example creates an image widget, adds a DOWN event listener, and then removes the same listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/removeEventListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst img_bkg = hmUI.createWidget(hmUI.widget.IMG)\nconst listenerFunc = (info) => {\n  console.log(info.x)\n}\n\nimg_bkg.addEventListener(hmUI.event.DOWN, listenerFunc)\nimg_bkg.removeEventListener(hmUI.event.DOWN, listenerFunc)\n```\n\n----------------------------------------\n\nTITLE: Creating FILL_RECT Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a Fill Rectangle widget using hmUI.createWidget(). It sets various properties such as position, size, radius, and color. The code also shows how to add a click event listener to modify the widget's properties dynamically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fill_rect = hmUI.createWidget(hmUI.widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(hmUI.prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Router Push in Zepp OS 2.0\nDESCRIPTION: Demonstrates how to import and use the push router function from @zos/router module to navigate between pages with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/new-api.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'page/index',\n  params: 'type=1'\n})\n```\n\n----------------------------------------\n\nTITLE: POST Request with Custom Parameters in Zepp OS\nDESCRIPTION: Shows how to make a POST request with custom headers and body data. Includes compatibility handling for response parsing since some models return the body as a JSON string.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/fetch.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = await fetch({\n  url: 'https://xxx.com/api/xxx',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    text: 'Hello Zepp OS'\n  })\n})\n\nconst data = typeof res.body === 'string' ?  JSON.parse(res.body) : res.body\n```\n\n----------------------------------------\n\nTITLE: Using the Assets Function in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the assets function from @zos/utils to create paths for resource files, including how to handle RTL adaptation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/assets.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { assets } from '@zos/utils'\n\nconst imagePath = 'zeppos-logo.png'\nconst assetsPathFunc = assets('img')\n\nconsole.log(assetsPathFunc(imagePath)) // img/zeppos-logo.png\nconsole.log(assetsPathFunc(imagePath, true)) // img/zeppos-logo@rtl.png\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_ANIM with Event Handling in ZeppOS\nDESCRIPTION: Complete example of creating and controlling an IMG_ANIM widget. This code creates an animation, sets its properties, and adds an event listener to restart the animation when clicked. It also implements a completion callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const imgAnimation = hmUI.createWidget(hmUI.widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n    imgAnimation.addEventListener(hmUI.event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(hmUI.prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Multiple Widgets Visibility without GROUP in ZeppOS\nDESCRIPTION: This snippet shows how to control the visibility of multiple widgets individually without using the GROUP widget. It creates three separate widgets and sets their visibility properties one by one.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/widget-group.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst img_icon_widget = createWidget(widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = createWidget(widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = createWidget(widget.TEXT, {\n  // ...\n})\n\nimg_icon_widget.setProperty(prop.VISIBLE, false)\nimg_arrow_widget.setProperty(prop.VISIBLE, false)\ntext_name_widget.setProperty(prop.VISIBLE, false)\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageBuilder in Device App (JavaScript)\nDESCRIPTION: Sets up the MessageBuilder instance in the Device App, establishing a Bluetooth connection and handling lifecycle events. It uses the app's global data to store the MessageBuilder instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './shared/device-polyfill'\nimport { MessageBuilder } from './shared/message'\nimport { getPackageInfo } from '@zos/app'\nimport * as ble from '@zos/ble'\n\nApp({\n  globalData: {\n    messageBuilder: null\n  },\n  onCreate(options) {\n    console.log('app on create invoke')\n    // establish connection\n    const { appId } = getPackageInfo()\n    const messageBuilder = new MessageBuilder({ appId, appDevicePort: 20, appSidePort: 0, ble })\n    this.globalData.messageBuilder = messageBuilder\n    messageBuilder.connect()\n  },\n  onDestroy(options) {\n    console.log('app on destroy invoke')\n    messageBuilder.disConnect()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Building Project for Preview on Device\nDESCRIPTION: Command to compile and generate QR code for device preview, including target selection prompts.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/cli/index.md#2025-04-07_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# compilation preview (real machine)\nzeus preview\n```\n\n----------------------------------------\n\nTITLE: Implementing FILL_RECT Widget with Event Listener in ZeppOS\nDESCRIPTION: This example shows how to create a FILL_RECT widget, set its properties, and add an event listener to change its position when clicked. It demonstrates the usage of createWidget, setProperty, and addEventListener functions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/FILL_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const fill_rect = createWidget(widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SLIDE_SWITCH in ZeppOS Page\nDESCRIPTION: This example demonstrates a complete implementation of the SLIDE_SWITCH component within a ZeppOS page. It shows how to create the switch, set its properties, and handle state changes. It also includes logging the initial checked state of the switch.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const slide_switch = createWidget(widget.SLIDE_SWITCH, {\n      x: 200,\n      y: 200,\n      w: 96,\n      h: 64,\n      select_bg: 'switch_on.png',\n      un_select_bg: 'switch_off.png',\n      slide_src: 'radio_select.png',\n      slide_select_x: 40,\n      slide_un_select_x: 8,\n      checked: true,\n      checked_change_func: (slideSwitch, checked) => {\n        console.log('checked', checked)\n      }\n    })\n\n    console.log('slide checked', slide_switch.getProperty(prop.CHECKED))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Router Push in Zepp OS 2.0\nDESCRIPTION: Demonstrates how to import and use the push router function from @zos/router module to navigate between pages with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/new-api.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'page/index',\n  params: 'type=1'\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Mini Program QR Code with Zeus CLI\nDESCRIPTION: This command generates a QR code for the Mini Program, which can be scanned to install the app on a Zepp OS watch. It should be executed from the root directory of the 'hello-world' applet.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/preview.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzeus preview\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Properties Example\nDESCRIPTION: Demonstrates how to get specific and multiple properties from an image widget, including getting the height and accessing multiple properties using the MORE property key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst img_bkg = hmUI.createWidget(hmUI.widget.IMG)\nconst prop = img_bkg.getProperty(hmUI.prop.MORE, {})\nconst { angle, w, h } = prop\n\nconst imgHeight = img_bkg.getProperty(hmUI.prop.H)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Step Count - TypeScript\nDESCRIPTION: Method to retrieve the current step count from the step sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Registering Zepp OS Mini Program Instance\nDESCRIPTION: Demonstrates how to register a Mini Program instance using the App constructor, define global data and lifecycle methods, and access the instance using getApp(). The example shows setting up global data with a text property and implementing onCreate and onDestroy lifecycle hooks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/app.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    text: 'Hello Zepp OS'\n  },\n  onCreate() {\n    console.log('onCreate')\n    console.log(this.globalData.text)\n  },\n  onDestroy() {\n    console.log('onDestroy')\n  }\n})\n\nconst app = getApp()\nconsole.log(app._options.globalData.text)\n```\n\n----------------------------------------\n\nTITLE: Using getScene Function in JavaScript\nDESCRIPTION: Example of using the getScene function to determine if the current scene is the Mini Program. It imports necessary functions and constants, calls getScene, and checks the result against SCENE_APP.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/getScene.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getScene, SCENE_APP } from '@zos/app'\n\nconst result = getScene()\n\nif (result === SCENE_APP) {\n  console.log('in Mini Program')\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on Canvas in Zepp OS\nDESCRIPTION: Demonstrates drawing text \"Hello Zepp OS\" at position (200,260) with font size 30 on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawText({\n  x: 200,\n  y: 260,\n  text_size: 30,\n  text: 'Hello Zepp OS'\n})\n```\n\n----------------------------------------\n\nTITLE: Using readdirSync in JavaScript\nDESCRIPTION: Example usage of readdirSync function to read contents of a directory named 'content'. The function returns an array of filenames if the directory exists, or undefined if it doesn't.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/readdirSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readdirSync } from '@zos/fs'\n\nconst result = readdirSync({\n  path: 'content',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Animation in ZeppOS\nDESCRIPTION: This code demonstrates how to create a text widget with animated movement. It configures two animation steps for horizontal and vertical movement, sets animation properties, and shows how to pause and resume the animation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widgetAnimations.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, text_style, prop, anim_status } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: px(96),\n      y: px(120),\n      w: px(288),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(36),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    const anim_step1 = {\n      anim_rate: 'linear',\n      anim_duration: 2000,\n      anim_from: px(10),\n      anim_to: px(110),\n      anim_prop: prop.X\n    }\n\n    const anim_step2 = {\n      anim_rate: 'linear',\n      anim_duration: 2000,\n      anim_from: px(120),\n      anim_to: px(300),\n      anim_prop: prop.Y\n    }\n\n    const animId = textWidget.setProperty(prop.ANIM, {\n      anim_steps: [anim_step1, anim_step2],\n      anim_fps: 25\n    })\n\n    textWidget.setProperty(prop.ANIM_STATUS, {\n      anim_id: animId,\n      anim_status: anim_status.PAUSE\n    })\n\n    textWidget.setProperty(prop.ANIM_STATUS, {\n      anim_id: animId,\n      anim_status: anim_status.RESUME\n    })\n\n    const currentStatus = textWidget.getProperty(prop.ANIM_STATUS, animId)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: File Close Operation Example\nDESCRIPTION: Example showing how to open a file and properly close it using hmFS.close(). Demonstrates the usage within a Page component context.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/close.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n\n    hmFS.close(fileId)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Starting and Monitoring Gyroscope in ZeppOS\nDESCRIPTION: Example of using the Gyroscope sensor API to monitor device rotation. The code demonstrates creating a gyroscope instance, setting up a change event listener, configuring the frequency mode to low power, and properly cleaning up resources when finished.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Gyroscope, FREQ_MODE_LOW } from '@zos/sensor'\n\nconst gyroscope = new Gyroscope()\n\nconst callback = () => {\n  console.log(gyroscope.getCurrent())\n}\ngyroscope.onChange(callback)\ngyroscope.setFreqMode(FREQ_MODE_LOW)\ngyroscope.start()\n\n// When not needed for use\ngyroscope.offChange()\ngyroscope.stop()\n```\n\n----------------------------------------\n\nTITLE: Starting Continuous Heart Rate Measurement in TypeScript\nDESCRIPTION: Starts measuring heart rate continuously and calls the callback function when there is a measurement result. Use 'getCurrent' method in the callback to get the heart rate value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: TEXT_IMG Widget Usage Example in ZeppOS\nDESCRIPTION: Demonstrates creating a TEXT_IMG widget to display battery level. It shows how to set up the font array, configure widget properties, and create the widget with specific parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontArray = [\n  fontRootPath + '00.png',\n  fontRootPath + '01.png',\n  fontRootPath + '02.png',\n  fontRootPath + '03.png',\n  fontRootPath + '04.png',\n  fontRootPath + '05.png',\n  fontRootPath + '06.png',\n  fontRootPath + '07.png',\n  fontRootPath + '08.png',\n  fontRootPath + '09.png'\n]\n\nconst dayText = hmUI.createWidget(hmUI.widget.TEXT_IMG, {\n  x: 207,\n  y: 340,\n  type: hmUI.data_type.BATTERY,\n  font_array: fontArray,\n  h_space: 1,\n  align_h: 16,\n  text: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Complete RADIO_GROUP Implementation Example\nDESCRIPTION: Full example showing how to create and configure a RADIO_GROUP with multiple STATE_BUTTON widgets, including initialization and callback handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const radioGroup = createWidget(widget.RADIO_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    radioGroup.setProperty(prop.INIT, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Calculating Text Layout Dimensions with Wrapped Text\nDESCRIPTION: This example demonstrates how to calculate the width and height of wrapped text using getTextLayout. It specifies a text size of 30 and limits the text width to 200 pixels, allowing the text to wrap to multiple lines.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTextLayout } from '@zos/ui'\n\nconst { width, height } = getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 200\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Register Change Event - TypeScript\nDESCRIPTION: Method to register a callback function that will be triggered when air pressure or altitude changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Items in localStorage - TypeScript\nDESCRIPTION: Demonstrates how to set and get items in localStorage using TypeScript. The setItem method stores a key-value pair, while getItem retrieves the value for a given key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: any): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetItem(key: string, defaultValue?: any): void\n```\n\n----------------------------------------\n\nTITLE: Starting and Reading Compass Data in ZeppOS\nDESCRIPTION: This example demonstrates how to initialize the Compass module, register a change event listener, start monitoring compass data, and then properly clean up resources when done. The callback function checks if the compass is calibrated before reading direction values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Compass } from '@zos/sensor'\n\nconst compass = new Compass()\n\nconst callback = () => {\n  if (compass.getStatus()) {\n    console.log(compass.getDirection())\n    console.log(compass.getDirectionAngle())\n  }\n}\ncompass.onChange(callback)\ncompass.start()\n\n// When not needed for use\ncompass.offChange()\ncompass.stop()\n```\n\n----------------------------------------\n\nTITLE: Module Configuration Example for Zepp OS Mini Programs\nDESCRIPTION: Comprehensive example of the module configuration object that includes page definitions, app-side services, settings, and various widget types for a Zepp OS Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": {\n    \"page\": {\n      \"pages\": [\"page/gtr-3-pro/loading\"]\n    },\n    \"app-side\": {\n      \"path\": \"app-side/index\"\n    },\n    \"setting\": {\n      \"path\": \"setting/index\"\n    },\n    \"app-widget\": {\n      \"widgets\": [\n        {\n          \"path\": \"app-widget/index\",\n          \"icon\": \"icon.png\",\n          \"name\": \"app-widget-demo\",\n          \"runtime\": {\n            \"type\": \"js\"\n          }\n        }\n      ]\n    },\n    \"secondary-widget\": {\n      \"widgets\": [\n        {\n          \"path\": \"secondary-widget/index\",\n          \"icon\": \"icon.png\",\n          \"name\": \"secondary-widget-demo\",\n          \"runtime\": {\n            \"type\": \"js\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Image Convert Function in AppSideService\nDESCRIPTION: Example showing how to use the image.convert function within a ZeppOS AppSideService. Demonstrates both automatic and custom target file path scenarios.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/image-convert.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nAppSideService({\n  onInit() {\n    image\n      .convert({\n        filePath: 'data://download/test.png'\n      })\n      .then((result) => {\n        console.log(reslut.targetFilePath) // data://download/test.png_converted\n      })\n\n    image\n      .convert({\n        filePath: 'data://download/test.png',\n        targetFilePath: 'data://download/converted_test.png'\n      })\n      .then((result) => {\n        console.log(reslut.targetFilePath) // data://download/converted_test.pang\n      })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Vibrator API in JavaScript\nDESCRIPTION: Example of importing and using the Vibrator module in a ZeppOS app. Shows how to create a vibrator instance, start default vibration, and set a specific vibration scene mode.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Vibrator, VIBRATOR_SCENE_DURATION } from '@zos/sensor'\n\nconst vibrator = new Vibrator()\nvibrator.start()\n\n// set scene\nvibrator.setMode(VIBRATOR_SCENE_DURATION)\nvibrator.start()\n```\n\n----------------------------------------\n\nTITLE: PAI Data Display Implementation\nDESCRIPTION: Complete implementation showing how to create a page that displays various PAI metrics using a custom TextByLine class for text rendering. Includes daily, total and historical PAI values display.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/PAI.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const pai = hmSensor.createSensor(hmSensor.id.PAI)\n\n    new TextByLine({\n      text: `dailypai:${pai.dailypai}`,\n      line: 0\n    }).render()\n\n    new TextByLine({\n      text: `totalpai:${pai.totalpai}`,\n      line: 1\n    }).render()\n\n    new TextByLine({\n      text: `prepai0:${pai.prepai0}`,\n      line: 2\n    }).render()\n\n    new TextByLine({\n      text: `prepai1:${pai.prepai1}`,\n      line: 3\n    }).render()\n\n    new TextByLine({\n      text: `prepai2:${pai.prepai2}`,\n      line: 4\n    }).render()\n\n    new TextByLine({\n      text: `prepai3:${pai.prepai3}`,\n      line: 5\n    }).render()\n\n    new TextByLine({\n      text: `prepai4:${pai.prepai4}`,\n      line: 6\n    }).render()\n\n    new TextByLine({\n      text: `prepai5:${pai.prepai5}`,\n      line: 7\n    }).render()\n\n    new TextByLine({\n      text: `prepai6:${pai.prepai6}`,\n      line: 8\n    }).render()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using SystemSounds API in JavaScript\nDESCRIPTION: Complete example demonstrating how to import the SystemSounds module, create an instance, check if sounds are enabled, and play an alarm sound.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SystemSounds } from '@zos/sensor'\n\nconst systemSounds = new SystemSounds()\nconst alarmType = systemSounds.getSourceType().ALARM\n\nif (systemSounds.getEnabled()) {\n  systemSounds.start(alarmType)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Stress Sensor Usage Example\nDESCRIPTION: Complete example showing how to import the Stress sensor, get current values, and handle change events in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stress } from '@zos/sensor'\n\nconst stress = new Stress()\nconst { value } = stress.getCurrent()\n\nconst callback = () => {\n  console.log(stress.getCurrent())\n}\n\nstress.onChange(callback)\n\n// When not needed for use\nstress.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Complete DIALOG Widget Implementation Example\nDESCRIPTION: A complete example showing how to create and configure a DIALOG widget in Zepp OS. The dialog requires two-step configuration: first setting the button texts, then configuring content text and alignment. The example also demonstrates how to handle button click callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/DIALOG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const dialog = hmUI.createWidget(hmUI.widget.DIALOG, {\n      ok_text: 'OK',\n      cancel_text: 'CANCEL'\n    })\n    dialog.setProperty(hmUI.prop.MORE, {\n      text: 'DIALOG',\n      content_text_size: 40,\n      content_bg_color: 0x000000,\n      content_text_color: 0xffffff,\n      dialog_align_h: hmUI.align.CENTER_H,\n      content_text_align_h: hmUI.align.CENTER_H,\n      content_text_align_v: hmUI.align.CENTER_V,\n      ok_func: () => {\n        console.log('OK')\n      },\n      cancel_func: () => {\n        console.log('CANCEL')\n      }\n    })\n    dialog.setProperty(hmUI.prop.SHOW, true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using LocalStorage in Zepp OS 2.0\nDESCRIPTION: Demonstrates how to use the new localStorage API in Zepp OS 2.0 for persistent key-value pair storage. This API provides a simpler alternative to file-based storage for many use cases.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/new-api.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { localStorage } from '@zos/storage'\n\nlocalStorage.setItem('test', 'test value')\nconst val = localStorage.getItem('test')\nconst defaultValue = localStorage.getItem('none_key', 'defaultValue')\n```\n\n----------------------------------------\n\nTITLE: DataWidget Implementation Example\nDESCRIPTION: Example showing how to create a DataWidget instance with state management and lifecycle methods including onInit and build callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/DataWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDataWidget({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using sessionStorage API in ZeppOS (JavaScript)\nDESCRIPTION: A complete example demonstrating how to use the sessionStorage API in ZeppOS. It includes setting an item, getting items with and without default values, removing an item, and clearing the storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sessionStorage } from '@zos/storage'\n\nsessionStorage.setItem('test', 'test value')\nconst val = sessionStorage.getItem('test')\nconst defaultValue = sessionStorage.getItem('none_key', 'defaultValue')\n\nsessionStorage.removeItem('test')\nsessionStorage.clear()\n```\n\n----------------------------------------\n\nTITLE: Calculating Text Layout Dimensions with Wrapped Text\nDESCRIPTION: This example demonstrates how to calculate the width and height of wrapped text using getTextLayout. It specifies a text size of 30 and limits the text width to 200 pixels, allowing the text to wrap to multiple lines.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTextLayout } from '@zos/ui'\n\nconst { width, height } = getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 200\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Blood Oxygen Sensor Usage Example\nDESCRIPTION: Complete JavaScript example showing how to use the BloodOxygen sensor API, including initialization, measurements, and event handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BloodOxygen } from '@zos/sensor'\n\nconst bloodOxygen = new BloodOxygen()\nconst { value } = bloodOxygen.getCurrent()\nconst lastDay = bloodOxygen.getLastDay()\nconst callback = () => {\n  console.log(bloodOxygen.getCurrent())\n}\n\nbloodOxygen.onChange(callback)\nbloodOxygen.stop()\nbloodOxygen.start()\n// When not needed for use\nbloodOxygen.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Persistence with localStorage in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the LocalStorage API to implement data persistence in a mini-program. It shows how to retrieve stored data when the page builds and save data when the page is destroyed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/persistence-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LocalStorage } from '@zos/storage'\n\nconst localStorage = new LocalStorage()\n\nPage({\n  state: {\n    data: null,\n    storage: localStorage\n  },\n  build() {\n    this.state.data = localStorage.getItem('state')\n    // ...\n  },\n  onDestroy() {\n    localStorage.setItem('state', this.state.data)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Global App Object for Cross-Page Communication in Zepp OS\nDESCRIPTION: Shows how to use the global 'app' object to share data between pages in Zepp OS mini programs. It includes setting up globalData in app.js and accessing it in different pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp({\n  globalData: {\n    type: 'normal'\n  }\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    console.log(getApp()._options.globalData.type)\n  }\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { back } from '@zos/router'\n\n// ...\ngetApp()._options.globalData.type = 'classic'\n\nback()\n```\n\n----------------------------------------\n\nTITLE: Implementing CIRCLE Widget in a ZeppOS Page\nDESCRIPTION: Complete example of how to create and configure a CIRCLE widget within a ZeppOS Page. This shows how to set properties like position, radius, color, and transparency.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const circle = createWidget(widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Gyroscope Data in ZeppOS\nDESCRIPTION: Method to retrieve the current gyroscope readings showing angular velocity along the x, y, and z axes in degrees per second (DPS). Returns an object with x, y, and z properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Creating a Logic Class in ZeppOS Mini Program JavaScript\nDESCRIPTION: This snippet shows a simple TextClass implementation that encapsulates text-related logic. The class maintains its own state and provides methods for accessing that state, demonstrating how business logic can be separated from UI rendering code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/code-organization.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class TextClass {\n  constructor() {\n    this.text = 'Hello World'\n  }\n  getText() {\n    return this.text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Location Change Callback - TypeScript\nDESCRIPTION: Method signature for canceling a previously registered location change callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Geolocation.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Dialog Implementation Example in Zepp OS\nDESCRIPTION: Complete example showing how to create and manage a dialog component with custom click listener and visibility control.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/createDialog.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const dialog = hmUI.createDialog({\n      title: 'HELLO ZEPP OS',\n      auto_hide: false,\n      click_linster: ({ type }) => {\n        dialog.show(false)\n        console.log('type', type)\n        console.log('click dialog')\n      }\n    })\n\n    dialog.show(true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PICK_DATE Widget with Event Handling\nDESCRIPTION: Demonstrates a complete implementation of the PICK_DATE widget including initialization, configuration, and event handling to retrieve selected date values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/PICK_DATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const pick_date_date = createWidget(widget.PICK_DATE)\n    pick_date_date.setProperty(prop.MORE, {\n      w: 480,\n      x: 20,\n      y: 120,\n      startYear: 2000,\n      endYear: 2030,\n      initYear: 2021,\n      initMonth: 2,\n      initDay: 3\n    })\n\n    const confirm = createWidget(widget.TEXT, {\n      x: 0,\n      y: 400,\n      w: 480,\n      h: 80,\n      text_size: 42,\n      color: 0xffffff,\n      text: 'confirm'\n    })\n\n    confirm.addEventListener(event.CLICK_UP, (info) => {\n      const dateObj = pick_date_date.getProperty(prop.MORE, {})\n      const { year, month, day } = dateObj\n\n      console.log('year', year)\n      console.log('month', month)\n      console.log('day', day)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Text Widget Implementation with Event Handling and I18n Support\nDESCRIPTION: Complete example showing text widget creation with various properties, event handling, and internationalization support. Includes positioning, styling, custom fonts, and click events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, prop, text_style, event } from '@zos/ui'\n\nPage({\n  build() {\n    const text = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO, Zepp OS',\n    })\n\n    text.addEventListener(event.CLICK_DOWN, (info) => {\n      text.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n\n    const textWithFont = createWidget(widget.TEXT, {\n      x: 96,\n      y: 300,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      font: 'fonts/custom.ttf',\n      text_i18n: {\n        'en-US': 'Hello Zepp OS'\n        'zh-CN': '你好 Zepp OS'\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Language in Zepp OS using JavaScript\nDESCRIPTION: Example of how to use the hmSetting.getLanguage() function to retrieve the current language serial number. The returned value corresponds to a country code and can be referenced in the Multilingual Mapping documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getLanguage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst language = hmSetting.getLanguage()\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_TIME Widget for Digital Time Display in ZeppOS JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an IMG_TIME widget in ZeppOS to display digital time using image arrays. It includes configuration for hours, minutes, seconds, and AM/PM indicators. The widget allows for customization of image spacing, alignment, and zero-padding options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeArray = []\nlet timeText = hmUI.createWidget(hmUI.widget.IMG_TIME, {\n  hour_zero: 1, // 是否补零\n  hour_startX: 205,\n  hour_startY: 184,\n  hour_array: timeArray,\n  hour_space: 8, //每个数组间的间隔\n  //单位\n  hour_unit_sc: rootPath + 'icon/colon.png',\n  hour_unit_tc: rootPath + 'icon/colon.png',\n  hour_unit_en: rootPath + 'icon/colon.png',\n  hour_align: hmUI.align.LEFT,\n  //minute second  替换hour\n  // ...\n  minute_follow: 1, // 是否跟随\n  second_follow: 1, // 是否跟随\n  am_x: 200,\n  am_y: 100,\n  am_sc_path: 'am.png',\n  am_en_path: 'am_en.png'\n  //pm 同上 前缀由 am 改为 pm\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing QRCODE Widget in Zepp OS Page\nDESCRIPTION: This example shows how to implement a QRCODE widget within a Zepp OS page. It creates a QR code with the content 'Hello Zepp OS' and sets its position, size, and background properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/QRCODE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const qrcode = hmUI.createWidget(hmUI.widget.QRCODE, {\n      content: 'Hello Zepp OS',\n      x: 140,\n      y: 140,\n      w: 200,\n      h: 200,\n      bg_x: 120,\n      bg_y: 120,\n      bg_w: 240,\n      bg_h: 240\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using LocalStorage API - JavaScript\nDESCRIPTION: Demonstrates how to use the LocalStorage API, including setting and getting items, handling default values, removing items, and clearing all data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LocalStorage } from '@zos/storage'\n\nconst localStorage = new LocalStorage()\nlocalStorage.setItem('test', 'test value')\nconst val = localStorage.getItem('test')\nconst defaultValue = localStorage.getItem('none_key', 'defaultValue')\n\nlocalStorage.removeItem('test')\nlocalStorage.clear()\n```\n\n----------------------------------------\n\nTITLE: Complete Music Player Implementation\nDESCRIPTION: Full example showing music player implementation with UI controls and event handling, including a TextByLine class for displaying song information and buttons for playback control.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const music = hmSensor.createSensor(hmSensor.id.MUSIC)\n\n    music.audInit()\n\n    const { title, artist, isPlaying } = music\n\n    const infoText = new TextByLine({\n      text: `title:${title};artist:${artist};isPlaying:${isPlaying}`,\n      line: 0\n    }).render()\n\n    music.addEventListener(hmSensor.event.CHANGE, function () {\n      const { title, artist, isPlaying } = music\n\n      infoText.setProperty(hmUI.prop.MORE, {\n        text: `title:${title};artist:${artist};isPlaying:${isPlaying}`,\n      })\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(240),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'PLAY',\n      click_func: () => {\n        music.audPlay()\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(320),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'PAUSE',\n      click_func: () => {\n        music.audPause()\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(400),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'PREV',\n      click_func: () => {\n        music.audPrev()\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(480),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'NEXT',\n      click_func: () => {\n        music.audNext()\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting UI Components with Sections in JavaScript\nDESCRIPTION: This example shows how to nest multiple UI components using Section components. It includes a TextInput for name input and a Button with onClick functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/guides/framework/app-settings/ui-intro.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return Section({}, [\n      Section(\n        {},\n        TextInput({\n          label: '姓名',\n        })\n      ),\n      Section(\n        {},\n        Button({\n          label: '开始',\n          onClick() {\n            // ...\n          }\n        })\n      )\n    ])\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using px Function for Screen Adaptation\nDESCRIPTION: Demonstrates how to use the px utility function from @zos/utils to scale UI elements proportionally across different screen sizes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { px } from '@zos/utils'\n\n// in GTR 3 PRO\nconsole.log(px(100)) // 100\n\n// in GTR 3\nconsole.log(px(100)) // 95\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Mini Program Global Data\nDESCRIPTION: Shows how to retrieve the app instance using getApp() method and access or modify its global data properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/app.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalData = getApp()._options.globalData\n\n// Modify data by assigning values\nglobalData.title = 'hello Zepp OS!'\n```\n\n----------------------------------------\n\nTITLE: Using writeFileSync to Write String with Encoding in JavaScript\nDESCRIPTION: Example of using writeFileSync to write a string to a file named 'content.txt' with UTF-8 encoding in the Mini Program's /data directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwriteFileSync({\n  path: 'content.txt',\n  data: 'some content...',\n  options: {\n    encoding: 'utf8',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getSportData to Retrieve Distance Data in JavaScript\nDESCRIPTION: Example of using the getSportData function to retrieve distance information from sports activities. The example shows importing the function, making the API call with a 'distance' type parameter, and handling the callback response.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-access/getSportData.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSportData } from '@zos/app-access'\n\nconst result = getSportData(\n  {\n    type: 'distance',\n  },\n  (callbackResult) => {\n    const { code, data } = callbackResult\n    if (code === 0) {\n      const [{ distance }] = JSON.parse(data)\n      console.log(distance)\n    }\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Using Workout Sensor in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the Workout sensor in a ZeppOS application. It creates a new Workout instance and calls the getStatus and getHistory methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Workout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Workout } from '@zos/sensor'\n\nconst workout = new Workout()\n\nconst status = workout.getStatus()\nconst history = workout.getHistory()\n```\n\n----------------------------------------\n\nTITLE: Using SessionStorage Methods Example\nDESCRIPTION: Complete example showing usage of SessionStorage methods including initialization, setting values, getting values with defaults, removing items and clearing storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SessionStorage } from '@zos/storage'\n\nconst sessionStorage = new SessionStorage()\nsessionStorage.setItem('test', 'test value')\nconst val = sessionStorage.getItem('test')\nconst defaultValue = sessionStorage.getItem('none_key', 'defaultValue')\n\nsessionStorage.removeItem('test')\nsessionStorage.clear()\n```\n\n----------------------------------------\n\nTITLE: Getting Item from LocalStorage - TypeScript\nDESCRIPTION: Retrieves a value from local storage based on the given key. If the key is not found, it returns the specified default value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetItem(key: string, defaultValue?: any): void\n```\n\n----------------------------------------\n\nTITLE: Creating PICK_DATE Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a PICK_DATE widget using the createWidget function from the @zos/ui module. It shows the basic syntax for initializing the widget with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/PICK_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst pickDate = createWidget(widget.PICK_DATE, Param)\n```\n\n----------------------------------------\n\nTITLE: Complete Usage Example of Stand Sensor in JavaScript\nDESCRIPTION: Complete example showing how to import the Stand sensor module, create an instance, get current and target values, and register/unregister change listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stand } from '@zos/sensor'\n\nconst stand = new Stand()\nconst current = stand.getCurrent()\nconst target = stand.getTarget()\nconst callback = () => {\n  console.log(stand.getCurrent())\n}\n\nstand.onChange(callback)\n\n// When not needed for use\nstand.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Data and Navigating Back in ZeppOS\nDESCRIPTION: Shows how to modify global data in a page and then navigate back using hmApp.goBack(). This pattern allows for returning information to previous pages, which isn't possible with direct parameter passing in goBack().\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\ngetApp()._options.globalData.type = 'classic'\n\nhmApp.goBack()\n```\n\n----------------------------------------\n\nTITLE: Implementing BUTTON Widgets with Images and Colors\nDESCRIPTION: This example shows how to create two different BUTTON widgets: one with image backgrounds for normal and pressed states, and another with color backgrounds. It also demonstrates how to use the click_func callback and modify button properties dynamically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_button = hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(hmUI.prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Weather API in JavaScript\nDESCRIPTION: This example shows how to use the Weather API to get forecast and tide data. It imports the Weather class, creates an instance, and then logs various pieces of information including city name, weather index, temperatures, and sunrise/sunset times.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Weather.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Weather } from '@zos/sensor'\n\nconst weather = new Weather()\nconst { forecastData, tideData, cityName } = weather.getForecast()\n\nconsole.log(cityName)\n\nfor (let i = 0; i < forecastData.count; i++) {\n  const element = forecastData.data[i]\n  console.log('Index' + element.index)\n  console.log('Highest temperature' + element.high)\n  console.log('Lowest temperature' + element.low)\n}\n\nfor (let i = 0; i < tideData.count; i++) {\n  const element = tideData.data[i]\n  console.log('Sunrise' + element.sunrise.hour + element.sunrise.minute)\n  console.log('Sunset' + element.sunset.hour + element.sunset.minute)\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on CANVAS in Zepp OS\nDESCRIPTION: Demonstrates drawing text on the CANVAS widget using the drawText method, specifying coordinates, text content, size, and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.drawText({\n  x: 200,\n  y: 260,\n  text_size: 30,\n  text: 'Hello Zepp OS'\n})\n```\n\n----------------------------------------\n\nTITLE: Example of Using the Weather Sensor API\nDESCRIPTION: JavaScript example demonstrating how to import and use the Weather sensor to retrieve forecast data, city name, and tide information, and then logging the retrieved data to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Weather.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Weather } from '@zos/sensor'\n\nconst weather = new Weather()\nconst { forecastData, tideData, cityName } = weather.getForecast()\n\nconsole.log(cityName)\n\nfor (let i = 0; i < forecastData.count; i++) {\n  const element = forecastData.data[i]\n  console.log('Index' + element.index)\n  console.log('Highest temperature' + element.high)\n  console.log('Lowest temperature' + element.low)\n}\n\nfor (let i = 0; i < tideData.count; i++) {\n  const element = tideData.data[i]\n  console.log('Sunrise' + element.sunrise.hour + element.sunrise.minute)\n  console.log('Sunset' + element.sunset.hour + element.sunset.minute)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Hour in TypeScript\nDESCRIPTION: Gets the number of hours in the current time using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetHours(): number\n```\n\n----------------------------------------\n\nTITLE: Complete ZeppOS app.json Configuration Example\nDESCRIPTION: A full example of app.json for a Calories application, demonstrating configuration for multiple device targets, multilingual support, and other required properties. This example configures the app for GTR 3 Pro, GTR 3, and GTS 3 devices.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"configVersion\": \"v2\",\n  \"app\": {\n    \"appId\": 1000000,\n    \"appName\": \"Calories\",\n    \"appType\": \"app\",\n    \"version\": {\n      \"code\": 1,\n      \"name\": \"1.0.0\"\n    },\n    \"icon\": \"icon.png\",\n    \"vender\": \"huami\",\n    \"description\": \"\"\n  },\n  \"permissions\": [],\n  \"runtime\": {\n    \"apiVersion\": {\n      \"compatible\": \"1.0.0\",\n      \"target\": \"1.0.1\",\n      \"minVersion\": \"1.0.0\"\n    }\n  },\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        \"page\": {\n          \"pages\": [\n            \"page/gtr-3/index\",\n            \"page/gtr-3/foodList\"\n          ]\n        }\n      },\n      \"platforms\": [{\n        \"name\": \"gtr3pro\",\n        \"deviceSource\": 229\n      }, {\n        \"name\": \"gtr3pro\",\n        \"deviceSource\": 230\n      }],\n      \"designWidth\": 480\n    },\n    \"gtr-3\": {\n      \"module\": {\n        \"page\": {\n          \"pages\": [\n            \"page/gtr-3/index\",\n            \"page/gtr-3/foodList\"\n          ]\n        }\n      },\n      \"platforms\": [{\n        \"name\": \"gtr3\",\n        \"deviceSource\": 226\n      }, {\n        \"name\": \"gtr3\",\n        \"deviceSource\": 227\n      }],\n      \"designWidth\": 480\n    },\n    \"gts-3\": {\n      \"module\": {\n        \"page\": {\n          \"pages\": [\n            \"page/gts-3/index\",\n            \"page/gts-3/foodList\"\n          ]\n        }\n      },\n      \"platforms\": [{\n        \"name\": \"gts3\",\n        \"deviceSource\": 224\n      }, {\n        \"name\": \"gts3\",\n        \"deviceSource\": 225\n      }],\n      \"designWidth\": 390\n    }\n  },\n  \"i18n\": {\n    \"zh-CN\": {\n      \"appName\": \"卡路里\"\n    },\n    \"ar-EG\": {\n      \"appName\": \"السعرات الحرارية\"\n    },\n    \"ca-ES\": {\n      \"appName\": \"Calories\"\n    },\n    \"cs\": {\n      \"appName\": \"Kalorie\"\n    },\n    \"da-DK\": {\n      \"appName\": \"Kalorier\"\n    },\n    \"de-DE\": {\n      \"appName\": \"Kalorien\"\n    },\n    \"el\": {\n      \"appName\": \"Θερμίδες\"\n    },\n    \"en-US\": {\n      \"appName\": \"Calories\"\n    },\n    \"es-ES\": {\n      \"appName\": \"Calorías\"\n    },\n    \"fi\": {\n      \"appName\": \"Kalorit\"\n    },\n    \"fr-FR\": {\n      \"appName\": \"Calories\"\n    },\n    \"he\": {\n      \"appName\": \"קלוריות\"\n    },\n    \"hi\": {\n      \"appName\": \"कैलोरी\"\n    },\n    \"hu-HU\": {\n      \"appName\": \"Kalória\"\n    },\n    \"id-ID\": {\n      \"appName\": \"Kalori\"\n    },\n    \"it-IT\": {\n      \"appName\": \"Calorie\"\n    },\n    \"ja-JP\": {\n      \"appName\": \"カロリー\"\n    },\n    \"ko-KR\": {\n      \"appName\": \"칼로리\"\n    },\n    \"mr\": {\n      \"appName\": \"कॅलरीज\"\n    },\n    \"nb-NO\": {\n      \"appName\": \"Kalorier\"\n    },\n    \"nl\": {\n      \"appName\": \"Calorieën\"\n    },\n    \"pl-PL\": {\n      \"appName\": \"Kalorie\"\n    },\n    \"pt\": {\n      \"appName\": \"Calorias\"\n    },\n    \"pt-BR\": {\n      \"appName\": \"Calorias\"\n    },\n    \"ro\": {\n      \"appName\": \"Calorii\"\n    },\n    \"ru-RU\": {\n      \"appName\": \"Калории\"\n    },\n    \"sk\": {\n      \"appName\": \"Kalórie\"\n    },\n    \"sr\": {\n      \"appName\": \"Калорије\"\n    },\n    \"sv-SE\": {\n      \"appName\": \"Kalorier\"\n    },\n    \"th-TH\": {\n      \"appName\": \"แคลอรี\"\n    },\n    \"tr-TR\": {\n      \"appName\": \"Kalori\"\n    },\n    \"uk\": {\n      \"appName\": \"Калорії\"\n    },\n    \"vi\": {\n      \"appName\": \"Calo\"\n    },\n    \"zh-TW\": {\n      \"appName\": \"卡路里\"\n    }\n  },\n  \"defaultLanguage\": \"en-US\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an App with hmApp.startApp in JavaScript\nDESCRIPTION: Example of how to use the hmApp.startApp method to launch an application with a specific appid, target URL, and additional parameters that will be passed to the App constructor's onCreate lifecycle method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/startApp.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Start the app with appid 1000001\nhmApp.startApp({ appid: 1000001, url: 'pages/index2', param: '...' })\n```\n\n----------------------------------------\n\nTITLE: Implementing RADIO_GROUP with STATE_BUTTONS in Zepp OS\nDESCRIPTION: This example shows a complete implementation of a RADIO_GROUP with three STATE_BUTTONS. It demonstrates how to create the group, add buttons, set initial state, and handle state changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/RADIO_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const radioGroup = hmUI.createWidget(hmUI.widget.RADIO_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = radioGroup.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = radioGroup.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = radioGroup.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    radioGroup.setProperty(hmUI.prop.INIT, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing LAST Heart Rate Event Listener in ZeppOS\nDESCRIPTION: Complete example of adding and removing an event listener for the LAST heart rate event. The example includes proper cleanup in the onDestroy lifecycle method to prevent memory leaks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst hrLastListener = function () {\n  console.log(heart.last)\n}\n\nheart.addEventListener(heart.event.LAST, hrLastListener)\n\n// ...\n// Destroy function\nonDestroy() {\n  heart.removeEventListener(heart.event.LAST, hrLastListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Using px Function in JavaScript\nDESCRIPTION: Example showing how to import and use the px function to scale pixel values in ZeppOS applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/px.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { px } from '@zos/utils'\n\npx(480)\n```\n\n----------------------------------------\n\nTITLE: Controlling Widget Visibility with GROUP\nDESCRIPTION: This snippet demonstrates how to use a GROUP widget to control the visibility of multiple widgets simultaneously. It creates a GROUP widget and then creates child widgets within it, allowing for unified visibility control.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/widget-group.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst group_widget = createWidget(widget.GROUP , {\n  // ...\n})\n\nconst img_icon_widget = group_widget.createWidget(widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = group_widget.createWidget(widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = group_widget.createWidget(widget.TEXT, {\n  // ...\n})\n\ngroup_widget.setProperty(prop.VISIBLE, false)\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Dialog Example\nDESCRIPTION: Complete example demonstrating how to create, configure, and manage a dialog component in Zepp OS, including click handling and visibility control.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/createDialog.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDialog } from '@zos/ui'\n\nPage({\n  build() {\n    const dialog = createDialog({\n      title: 'HELLO ZEPP OS',\n      auto_hide: false,\n      click_listener: ({ type }) => {\n        dialog.show(false)\n        console.log('type', type)\n        console.log('click dialog')\n      }\n    })\n\n    dialog.show(true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing STROKE_RECT Widget with Event Listener\nDESCRIPTION: This example shows how to create a STROKE_RECT widget with specific properties and add a click event listener. The widget's position is updated when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const strokeRect = createWidget(widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SCROLL_LIST Widget in ZeppOS\nDESCRIPTION: Basic example of importing and creating a SCROLL_LIST widget using the ZeppOS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst scrollList = createWidget(widget.SCROLL_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Complete Barometer Usage Example - JavaScript\nDESCRIPTION: Example demonstrating how to initialize the Barometer sensor, get readings, and handle change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Barometer } from '@zos/sensor'\n\nconst barometer = new Barometer()\nconst airPressure = barometer.getAirPressure()\nconst altitude = barometer.getAltitude()\n\nconst callback = () => {\n  console.log(barometer.getAltitude())\n}\n\nbarometer.onChange(callback)\n\n// When not needed for use\nbarometer.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Implementing STROKE_RECT Widget with Event Listener\nDESCRIPTION: This example shows how to create a STROKE_RECT widget with specific properties and add a click event listener. The widget's position is updated when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const strokeRect = createWidget(widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing CANVAS Area in Zepp OS\nDESCRIPTION: Illustrates how to clear a rectangular area on the CANVAS widget using the clear method, specifying coordinates and dimensions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.clear({\n  x: 400,\n  y: 0,\n  w: 64,\n  h: 64\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Barometer Usage Example - JavaScript\nDESCRIPTION: Example demonstrating how to initialize the Barometer sensor, get readings, and handle change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Barometer } from '@zos/sensor'\n\nconst barometer = new Barometer()\nconst airPressure = barometer.getAirPressure()\nconst altitude = barometer.getAltitude()\n\nconst callback = () => {\n  console.log(barometer.getAltitude())\n}\n\nbarometer.onChange(callback)\n\n// When not needed for use\nbarometer.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Using sessionStorage API for Cross-Page Communication in Zepp OS\nDESCRIPTION: Demonstrates the use of sessionStorage API for storing and retrieving data across different pages in Zepp OS mini programs.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { sessionStorage } from '@zos/storage'\n\nsessionStorage.setItem('test', 'test value')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { sessionStorage } from '@zos/storage'\n\nsessionStorage.getItem('test')\n```\n\n----------------------------------------\n\nTITLE: Checking Geolocation Sensor Availability in JavaScript\nDESCRIPTION: Example of how to check if the Geolocation sensor is available on a device and conditionally initialize it. The function returns true if the sensor is available and false otherwise.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/checkSensor.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { checkSensor, Geolocation } from '@zos/sensor'\n\nconst result = checkSensor(Geolocation)\nlet geolocation = null\n\nif (result) {\n  geolocation = new Geolocation()\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of File Transfer in ZeppOS\nDESCRIPTION: A comprehensive example demonstrating the use of the TransferFile module in a ZeppOS application, including file enqueueing, progress tracking, and status handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst outbox = transferFile.getOutBox()\n\nAppSideService({\n  onInit() {\n    const fileObject = outbox.enqueueFile('data://download/1.png', {type: \"image\", name: \"fdsa\"})\n\n    file.on('progress', (event) => {\n        console.log(\"progress total size\",  event.data.fileSize)\n        console.log(\"progress total size\",  event.data.loadedSize)\n    })\n\n    file.on('change', (event) => {\n        if (event.data.readyState === 'transferred') {\n          console.log('transfered file success')\n        } else (event.data.readyState === 'error') {\n          console.log('error')\n        }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog with Properties - ZeppOS JavaScript\nDESCRIPTION: Complete example showing how to create and configure a dialog widget with custom properties including text, colors, alignment, and button callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/DIALOG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\nPage({\n  build() {\n    const dialog = createWidget(widget.DIALOG, {\n      ok_text: 'OK',\n      cancel_text: 'CANCEL'\n    })\n    dialog.setProperty(prop.MORE, {\n      text: 'DIALOG',\n      content_text_size: 40,\n      content_bg_color: 0x000000,\n      content_text_color: 0xffffff,\n      dialog_align_h: align.CENTER_H,\n      content_text_align_h: align.CENTER_H,\n      content_text_align_v: align.CENTER_V,\n      ok_func: () => {\n        console.log('OK')\n      },\n      cancel_func: () => {\n        console.log('CANCEL')\n      }\n    })\n    dialog.setProperty(prop.SHOW, true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete ZeppOS Flex Layout Implementation\nDESCRIPTION: Full implementation of a 3x3 grid layout with interactive elements, event handling, and dynamic widget management.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createWidget,\n  widget,\n  align,\n  event,\n  updateLayout,\n  deleteWidget,\n  openInspector\n} from '@zos/ui'\n\nPage({\n  build() {\n    const rootContainer = createWidget(widget.VIRTUAL_CONTAINER, {\n      layout: {\n        display: 'flex',\n        x: '100px',\n        y: '100px',\n        width: '60vw',\n        height: '60vh',\n        'justify-content': 'space-between',\n        'align-items': 'center'\n      }\n    })\n\n    const createColumnContainer = () => {\n      return createWidget(widget.VIRTUAL_CONTAINER, {\n        parent: rootContainer,\n        layout: {\n          display: 'flex',\n          'flex-flow': 'column',\n          width: '33%',\n          height: '100%',\n          'justify-content': 'space-between'\n        }\n      })\n    }\n\n    const column1 = createColumnContainer()\n    const column2 = createColumnContainer()\n    const column3 = createColumnContainer()\n\n    const createElements = (parent, label) => {\n      let text = createWidget(widget.TEXT, {\n        parent: parent,\n        layout: {\n          width: '80%',\n          height: '20%'\n        },\n        text: label,\n        color: 0xffffff,\n        text_size: 36,\n        align_h: align.CENTER_H\n      })\n\n      const circle = createWidget(widget.CIRCLE, {\n        parent: parent,\n        layout: {\n          width: '80%',\n          height: '33%'\n        },\n        color: 0x0986d4\n      })\n\n      circle.addEventListener(event.CLICK_DOWN, function (info) {\n        console.log('Circle widget clicked')\n        if (circle.color === 0x0986d4) {\n          circle.color = 0xff0000\n          circle.updateLayoutStyle({\n            width: '30%'\n          })\n          updateLayout()\n        } else {\n          circle.color = 0x0986d4\n          circle.updateLayoutStyle({\n            width: '80%'\n          })\n          updateLayout()\n        }\n      })\n\n      const button = createWidget(widget.BUTTON, {\n        parent: parent,\n        layout: {\n          width: '90%',\n          height: '33%'\n        },\n        text: 'Button' + label,\n        color: 0x000000,\n        normal_color: 0x0986d4,\n        press_color: 0x055e8b,\n        click_func: () => {\n          console.log('Button' + label + 'clicked')\n          if (text) {\n            parent.removeLayoutChild(text)\n            deleteWidget(text)\n            text = null\n          } else {\n            text = createWidget(widget.TEXT, {\n              parent: parent,\n              layout: {\n                width: '80%',\n                height: '20%'\n              },\n              text: label,\n              color: 0xffffff,\n              text_size: 36,\n              align_h: align.CENTER_H\n            })\n            parent.addLayoutChild(text, 0)\n          }\n          updateLayout()\n        }\n      })\n    }\n\n    createElements(column1, 'A')\n    createElements(column2, 'B')\n    createElements(column3, 'C')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using readdirSync to List Directory Contents in Zepp OS\nDESCRIPTION: Example showing how to import and use the readdirSync function to read the contents of a directory named 'content' within a Zepp OS Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/readdirSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { readdirSync } from '@zos/fs'\n\nconst result = readdirSync({\n  path: 'content',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SCROLL_LIST Widget in ZeppOS\nDESCRIPTION: Basic example of importing and creating a SCROLL_LIST widget using the ZeppOS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst scrollList = createWidget(widget.SCROLL_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Using openSync to Open a File in ZeppOS\nDESCRIPTION: Example of using the openSync function to open a file in read-only mode. The function returns a file descriptor that can be used for subsequent file operations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/openSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n```\n\n----------------------------------------\n\nTITLE: Using statAssetsSync to Get File Size Information in JavaScript\nDESCRIPTION: Example demonstrating how to use the statAssetsSync function to check if a file exists in the assets directory and retrieve its size in bytes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/statAssetsSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { statAssetsSync } from '@zos/fs'\n\nconst result = statAssetsSync({\n  path: 'test.txt',\n})\n\nif (result) {\n  const { size } = result\n  console.log(size)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Time Pointer Widget in ZeppOS JavaScript\nDESCRIPTION: Creates a time pointer widget for displaying analog clock hands using hmUI. The widget allows configuration of pointer center coordinates, rotation points, image paths for pointers and optional cover overlays. Similar properties can be applied for minute and second hands by replacing 'hour' with 'minute' or 'second' in the property names.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/TIME_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet timePointer = hmUI.createWidget(hmUI.widget.TIME_POINTER, {\n  hour_centerX: 240, // Center of pointer rotation corresponds to centerX.\n  hour_centerY: 240, // Center of pointer rotation corresponds to centerY.\n  hour_posX: 19, // The pointer's own center of rotation, corresponds to the x in position.\n  hour_posY: 100, // Pointer's own center of rotation, corresponds to y in position.\n  hour_path: 'pointer.png', // Path of the pointer.\n  hour_cover_path: 'cover.png', // Pointer circle image.\n  hour_cover_y: 0,\n  hour_cover_x: 0\n  // Minute and seconds as same as above, just replace hour with minute/second.\n})\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Time in TypeScript\nDESCRIPTION: TypeScript method definition for retrieving UTC timestamp in milliseconds\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetTime(): number\n```\n\n----------------------------------------\n\nTITLE: Creating Rotated Image Widget with Advanced Properties\nDESCRIPTION: Shows how to create an image widget with advanced properties including positioning, dimensions, rotation angle, and center point configuration. This example demonstrates creating a rotating hour hand image.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_hour = hmUI.createWidget(hmUI.widget.IMG)\n    img_hour.setProperty(hmUI.prop.MORE, {\n      x: 0,\n      y: 0,\n      w: 454,\n      h: 454,\n      pos_x: 454 / 2 - 27,\n      pos_y: 50 + 50,\n      center_x: 454 / 2,\n      center_y: 454 / 2,\n      src: 'hour.png',\n      angle: 30\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CYCLE_LIST Widget in ZeppOS Page\nDESCRIPTION: This example demonstrates a complete implementation of the CYCLE_LIST widget within a ZeppOS Page. It creates a scrollable list of number images with a click handler that logs the selected index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    pageName: 'CYCLE_LIST'\n  },\n\n  build() {\n    const imgArray = ['number-img/0.png', 'number-img/1.png', 'number-img/2.png', 'number-img/3.png', 'number-img/4.png']\n    const cycleList = hmUI.createWidget(hmUI.widget.CYCLE_LIST, {\n      x: 230,\n      y: 120,\n      h: 300,\n      w: 30,\n      data_array: imgArray,\n      data_size: 5,\n      item_height: 100,\n      item_click_func: (list, index) => {\n        console.log(index)\n      },\n      item_bg_color: 0xffffff\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using console.log in JavaScript for Zepp OS\nDESCRIPTION: Demonstrates how to use the console.log method in Zepp OS to print a simple 'Hello Zepp OS' message to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/console.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Implementing an App Service with Time Sensor\nDESCRIPTION: Example code demonstrating how to register an App Service that uses the Time sensor to log the current time every minute. The service includes initialization and cleanup handlers.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/app-service.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Time } from '@zos/sensor'\n\nconst timeSensor = new Time()\n\nAppService({\n  onInit(e) {\n    logger.log(`service onInit(${e})`)\n\n    timeSensor.onPerMinute(() => {\n      logger.log(\n        `${moduleName} time report: ${timeSensor.getHours()}:${timeSensor.getMinutes()}:${timeSensor.getSeconds()}`\n      )\n    })\n  },\n  onDestroy() {\n    logger.log('service on destroy invoke')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Stand Sensor API in JavaScript\nDESCRIPTION: This code example demonstrates how to use the Stand sensor API in a ZeppOS application. It shows importing the Stand class, creating an instance, getting current and target values, and registering/unregistering a change event listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stand } from '@zos/sensor'\n\nconst stand = new Stand()\nconst current = stand.getCurrent()\nconst target = stand.getTarget()\nconst callback = () => {\n  console.log(stand.getCurrent())\n}\n\nstand.onChange(callback)\n\n// When not needed for use\nstand.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Complete POLYLINE Widget Usage Example in ZeppOS\nDESCRIPTION: This comprehensive example demonstrates creating a POLYLINE widget, setting its properties, clearing existing lines, and adding new lines with specified data points. It also shows how to use the px utility for responsive sizing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const lineDataList = [\n      { x: 0, y: px(120) },\n      { x: px(100), y: px(10) },\n      { x: px(200), y: px(50) },\n      { x: px(300), y: px(50) },\n      { x: px(400), y: px(150) }\n    ]\n    const polyline = createWidget(widget.GRADKIENT_POLYLINE, {\n      x: 0,\n      y: px(200),\n      w: px(480),\n      h: px(150),\n      line_color: 0x00ffff,\n      line_width: 4\n    })\n    polyline.clear()\n    polyline.addLine({\n      data: lineDataList,\n      count: lineDataList.length\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageBuilder and Establishing Connection in Side Service\nDESCRIPTION: This code demonstrates how to import MessageBuilder, instantiate it, and establish a connection in the Side Service's onInit lifecycle method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    // establish connection\n    messageBuilder.listen(() => {})\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using setScrollMode with Vertical Swiper Mode in JavaScript\nDESCRIPTION: Example showing how to import and use setScrollMode to implement a vertical swiper mode. The example configures the height of each page item and the total number of items in the swiper.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/setScrollMode.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScrollMode, SCROLL_MODE_SWIPER } from '@zos/page'\n\nsetScrollMode({\n  mode: SCROLL_MODE_SWIPER,\n  options: {\n    height: 480,\n    count: 10,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Vibration with Options in TypeScript\nDESCRIPTION: Method to start device vibration with optional vibration mode or action array parameter. Supports both single options and vibration scene arrays after API_LEVEL 3.6.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstart(option?: Option | Array<Action>): void\n```\n\n----------------------------------------\n\nTITLE: Complete SLIDE_SWITCH Widget Implementation Example\nDESCRIPTION: This example demonstrates a full implementation of the SLIDE_SWITCH widget, including creation, configuration, and handling state changes. It also shows how to get the current state of the switch.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const slide_switch = createWidget(widget.SLIDE_SWITCH, {\n      x: 200,\n      y: 200,\n      w: 96,\n      h: 64,\n      select_bg: 'switch_on.png',\n      un_select_bg: 'switch_off.png',\n      slide_src: 'radio_select.png',\n      slide_select_x: 40,\n      slide_un_select_x: 8,\n      checked: true,\n      checked_change_func: (slideSwitch, checked) => {\n        console.log('checked', checked)\n      }\n    })\n\n    console.log('slide checked', slide_switch.getProperty(prop.CHECKED))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Example of CYCLE_IMAGE_TEXT_LIST Usage\nDESCRIPTION: This comprehensive example shows how to create a CYCLE_IMAGE_TEXT_LIST widget, populate it with data, set its properties, and manipulate its display. It also demonstrates how to get and set the top index of the list.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataArray = [\n  { text: '0' },\n  { text: '1' },\n  { text: '2' },\n  { text: '3' },\n  { text: '4' },\n  { text: '5' },\n  { text: '6' },\n  { text: '7' },\n  { text: '8' },\n  { text: '9' }\n]\n\ncycleImageTextList = hmUI.createWidget(hmUI.widget.CYCLE_IMAGE_TEXT_LIST, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 300,\n  data_array: dataArray,\n  data_size: 10,\n  item_height: 50,\n  item_text_color: 0xffffff,\n  item_text_size: 18\n})\n\n// Get the index of the top item in the scroll list\nresult = cycleImageTextList.getProperty(hmUI.prop.MORE, {})\nconsole.log(result.index)\n\n// Set the index of the top item in the scroll list\ncycleImageTextList.setProperty(hmUI.prop.LIST_TOP, { index: 3 })\n```\n\n----------------------------------------\n\nTITLE: Complete Calorie Sensor Usage Example - JavaScript\nDESCRIPTION: Comprehensive example showing how to initialize the Calorie sensor, get current and target values, and handle change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Calorie.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Calorie } from '@zos/sensor'\n\nconst calorie = new Calorie()\nconst current = calorie.getCurrent()\nconst target = calorie.getTarget()\nconst callback = () => {\n  console.log(calorie.getCurrent())\n}\n\ncalorie.onChange(callback)\n\n// When not needed for use\ncalorie.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Dependencies in package.json for Zepp OS\nDESCRIPTION: Example package.json configuration showing required dependencies for a Zepp OS Mini Program, including @zeppos/device-types and @zeppos/zml packages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/npm/index.mdx#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n  \"@zeppos/device-types\": \"^3.0.0\"\n},\n\"dependencies\": {\n  \"@zeppos/zml\": \"^0.0.9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gradient Polyline Chart in ZeppOS\nDESCRIPTION: Demonstrates how to create a gradient polyline chart widget, clear the canvas, and add lines and points to it. The example includes setting up data points, initializing the widget with specific dimensions, and adding visualization elements. Supports special data types like HEART and SLEEP for firmware-rendered charts.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/GRADKIENT_POLYLINE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//Clear the canvas each time you set_more.\nconst lineDatas = [\n  { x: 0, y: 0 },\n  { x: 100, y: 10 },\n  { x: 200, y: 50 }\n]\nvar widget = hmUI.createWidget(hmUI.widget.GRADKIENT_POLYLINE, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 200,\n  type: hmUI.data_type.SLEEP //If you set the type, the function below can be used to let the firmware draw the data, currently only HEART and SLEEP are supported.\n})\n//JS draws the data.\nwidget.clear() //clear the canvas\nwidget.addLine({\n  //Add line.\n  data: lineDatas,\n  count: lineDatas.length\n})\nwidget.addPoint({\n  //Add point.\n  data: lineDatas,\n  count: lineDatas.length\n})\n```\n\n----------------------------------------\n\nTITLE: Drawing Line on CANVAS in Zepp OS\nDESCRIPTION: Demonstrates drawing a line on the CANVAS widget using the drawLine method, specifying start and end coordinates and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.drawLine({\n  x1: 100,\n  y1: 100,\n  x2: 200,\n  y2: 100,\n  color: 0xffffff\n})\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProGetInt Method in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the hmFS.SysProGetInt method in JavaScript. It first sets an integer value using hmFS.SysProSetInt and then retrieves and logs the value using hmFS.SysProGetInt.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: Complete hmBle Usage Example in JavaScript\nDESCRIPTION: Example demonstrating the usage of hmBle module including connection creation, message handling, status checking and event listening.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Create Connection\nhmBle.createConnect(function (index, data, size) {\n  // Receive message callback, return the received message as it is\n  hmBle.send(data, size)\n})\n\n// Disconnection\nhmBle.disConnect()\n\n// Print Bluetooth connection status\nconsole.log(hmBle.connectStatus())\n\n// Register to listen for connection status\nhmBle.addListener(function (status) {\n  // Print connection status\n  console.log(status)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PICK_DATE Widget with Event Handling in ZeppOS\nDESCRIPTION: This example shows a complete implementation of the PICK_DATE widget along with a confirmation button. It demonstrates how to set properties, handle events, and retrieve selected date values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/PICK_DATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const pick_date_date = createWidget(widget.PICK_DATE)\n    pick_date_date.setProperty(prop.MORE, {\n      w: 480,\n      x: 20,\n      y: 120,\n      startYear: 2000,\n      endYear: 2030,\n      initYear: 2021,\n      initMonth: 2,\n      initDay: 3\n    })\n\n    const confirm = createWidget(widget.TEXT, {\n      x: 0,\n      y: 400,\n      w: 480,\n      h: 80,\n      text_size: 42,\n      color: 0xffffff,\n      text: 'confirm'\n    })\n\n    confirm.addEventListener(event.CLICK_UP, (info) => {\n      const dateObj = pick_date_date.getProperty(prop.MORE, {})\n      const { year, month, day } = dateObj\n\n      console.log('year', year)\n      console.log('month', month)\n      console.log('day', day)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Registration in JavaScript\nDESCRIPTION: Example of how to use the Page() constructor to register a page in a Zepp OS mini-app, including state initialization and lifecycle methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/global/Page.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Properties in JavaScript\nDESCRIPTION: This example demonstrates how to create an image widget, retrieve all its properties using getProperty, and then extract specific properties like angle, width, and height. It also shows how to get a single property (height) directly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/getProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst img_bkg = hmUI.createWidget(hmUI.widget.IMG)\nconst prop = img_bkg.getProperty(hmUI.prop.MORE, {})\nconst { angle, w, h } = prop\n\nconst imgHeight = img_bkg.getProperty(hmUI.prop.H)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date Format Using hmSetting.getDateFormat() in JavaScript\nDESCRIPTION: Demonstrates how to use the hmSetting.getDateFormat() function to retrieve the current date format setting. The function returns a number representing the order of year, month, and day.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getDateFormat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dateFormat = hmSetting.getDateFormat()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete PICK_DATE Widget with Event Handling in ZeppOS\nDESCRIPTION: A complete example showing how to create a PICK_DATE widget, set its properties, create a confirmation button, and retrieve the selected date values when the user confirms their selection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/PICK_DATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const pick_date_date = hmUI.createWidget(hmUI.widget.PICK_DATE)\n    pick_date_date.setProperty(hmUI.prop.MORE, {\n      w: 480,\n      x: 20,\n      y: 120,\n      startYear: 2000,\n      endYear: 2030,\n      initYear: 2021,\n      initMonth: 2,\n      initDay: 3\n    })\n\n    const confirm = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 0,\n      y: 400,\n      w: 480,\n      h: 80,\n      text_size: 42,\n      color: 0xffffff,\n      text: 'confirm'\n    })\n\n    confirm.addEventListener(hmUI.event.CLICK_UP, (info) => {\n      const dateObj = pick_date_date.getProperty(hmUI.prop.MORE, {})\n      const { year, month, day } = dateObj\n\n      console.log('year', year)\n      console.log('month', month)\n      console.log('day', day)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Latitude - TypeScript\nDESCRIPTION: Method signature for retrieving the latitude coordinate, supporting both decimal (DD) and degrees-minutes-seconds (DMS) formats.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Geolocation.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetLatitude(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Creating BUTTON Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a BUTTON widget using hmUI.createWidget(). It sets various properties such as position, size, text, images, and click function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\n```\n\n----------------------------------------\n\nTITLE: Opening a File with Read/Write Access in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmFS.open function to open a file named 'test_file.txt' with read and write access. If the file doesn't exist, it will be created.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/open.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n```\n\n----------------------------------------\n\nTITLE: Using setAutoBrightness Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the setAutoBrightness function in JavaScript. It imports the function from the @zos/display module and calls it with an option object to enable auto-brightness.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setAutoBrightness } from '@zos/display'\n\nsetAutoBrightness({\n  autoBright: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using setAutoBrightness Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the setAutoBrightness function in JavaScript. It imports the function from the @zos/display module and calls it with an option object to enable auto-brightness.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setAutoBrightness } from '@zos/display'\n\nsetAutoBrightness({\n  autoBright: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Items in sessionStorage (TypeScript)\nDESCRIPTION: Demonstrates how to save and retrieve data using the setItem and getItem methods of sessionStorage. The getItem method can also specify a default value if the key is not found.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: any): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetItem(key: string, defaultValue?: any): void\n```\n\n----------------------------------------\n\nTITLE: Accessing TIME Sensor Properties in ZeppOS\nDESCRIPTION: Provides an example of creating a TIME sensor and accessing its various properties such as UTC timestamp, year, month, day, hour, minute, and second. This demonstrates how to retrieve current time information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating Sensors\nconst jstime = hmSensor.createSensor(hmSensor.id.TIME)\n\nconsole.log(\n  'The time utc: ' +\n    jstime.utc +\n    ' year: ' +\n    jstime.year +\n    ' month: ' +\n    jstime.month +\n    ' day: ' +\n    jstime.day +\n    ' hour: ' +\n    jstime.hour +\n    ' minute: ' +\n    jstime.minute +\n    ' second: ' +\n    jstime.second +\n    '\\r\\n'\n)\n```\n\n----------------------------------------\n\nTITLE: Complete IMG_ANIM Implementation Example in ZeppOS\nDESCRIPTION: A comprehensive example demonstrating how to create an IMG_ANIM widget, configure its properties, start the animation, and handle animation completion events. It also shows how to restart the animation on user interaction.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop, anim_status } from '@zos/ui'\n\nPage({\n  build() {\n    const imgAnimation = createWidget(widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(prop.ANIM_STATUS, anim_status.START)\n    imgAnimation.addEventListener(event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(prop.ANIM_STATUS, anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating CYCLE_IMAGE_TEXT_LIST Widget in Zepp OS\nDESCRIPTION: Demonstrates how to create a CYCLE_IMAGE_TEXT_LIST widget using the createWidget function from the @zos/ui module. The widget is configured with various properties including dimensions, data array, and item styling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst cycleImageTextList = createWidget(widget.CYCLE_IMAGE_TEXT_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Complete Distance Sensor Implementation\nDESCRIPTION: Full example showing distance sensor implementation with UI elements, event handling, and data display. Includes a TextByLine class for text rendering and button creation for event registration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const distance = hmSensor.createSensor(hmSensor.id.DISTANCE)\n\n    const currentText = new TextByLine({\n      text: `current:${distance.current};target:${distance.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${distance.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = distance.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const distanceChangeListener = () => {\n      distance.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: distanceChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Request with Promise in ZeppOS Side Service\nDESCRIPTION: This code snippet demonstrates how to simulate a network request using Promise in the Side Service of a ZeppOS Mini Program. It's a placeholder for actual fetch API usage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/samples/app/fetchAPI.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPromise.resolve('HELLO ZEPPOS')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Data in ZeppOS App.js\nDESCRIPTION: Shows how to initialize the global app object with shared data in app.js by setting up the globalData object in the App constructor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    type: 'normal'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring appId in app.json\nDESCRIPTION: This JSON snippet shows how to configure the registered application ID in the app.json file, which is required during application development to link your code with the registered app.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/distribute/index.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"appId\": appId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Data in ZeppOS App.js\nDESCRIPTION: Shows how to initialize the global app object with shared data in app.js by setting up the globalData object in the App constructor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    type: 'normal'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Event Listener in JavaScript\nDESCRIPTION: Example JavaScript implementation of the onKey function to listen for and handle the UP key click event. Returns true to prevent default behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onKey, KEY_UP, KEY_EVENT_CLICK } from '@zos/interaction'\n\nonKey({\n  callback: (key, keyEvent) => {\n    if (key === KEY_UP && keyEvent === KEY_EVENT_CLICK) {\n      console.log('up click')\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Event-Based Communication in Device App\nDESCRIPTION: Demonstrates handling incoming messages from the Side Service using the 'on' method and sending requests with the 'request' method in the Device App.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { log } from '@zos/utils'\n\nconst { messageBuilder } = getApp()._options.globalData\nconst logger = log.getLogger('demo')\n\nPage({\n  build() {\n    // receive a message from the Side Service\n    messageBuilder.on('call', ({ payload: buf }) => {\n      // call the messageBuilder.buf2Json method to convert the buffer to a JS JSON object\n      const data = messageBuilder.buf2Json(buf)\n      logger.log('data', data)\n    })\n\n    // send a message to Side Service\n    messageBuilder.request({\n      method: 'GET',\n      params: {\n        index: 0\n      }\n    }).then(data => {\n      // process Side Service responses\n      const { result } = data\n      logger.log(result)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using LocalStorage Methods in ZeppOS (JavaScript)\nDESCRIPTION: Provides a comprehensive example of using LocalStorage in ZeppOS, including importing the module, creating an instance, and using various methods like setItem, getItem, removeItem, and clear.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LocalStorage } from '@zos/storage'\n\nconst localStorage = new LocalStorage()\nlocalStorage.setItem('test', 'test value')\nconst val = localStorage.getItem('test')\nconst defaultValue = localStorage.getItem('none_key', 'defaultValue')\n\nlocalStorage.removeItem('test')\nlocalStorage.clear()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic SecondaryWidget in JavaScript\nDESCRIPTION: A JavaScript example demonstrating how to create a basic secondary screen application using the SecondaryWidget constructor. It shows initialization of state data and implementation of lifecycle callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/global/SecondaryWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSecondaryWidget({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Pointers for ZeppOS Watchfaces\nDESCRIPTION: This snippet demonstrates how to create editable clock pointers for a watchface in ZeppOS, including configuration for hour, minute, and second hands, and handling different screen types.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointerConfig = [\n  {\n    id: 1,\n    hour: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 12,\n      posY: 172,\n      path: pointPath + 'hand_4_h.png'\n    },\n    minute: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 18,\n      posY: 229,\n      path: pointPath + 'hand_4_m.png'\n    },\n    second: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 13,\n      posY: 245,\n      path: pointPath + 'hand_all_s.png'\n    },\n    preview: pointPath + 'preview1.png'\n  }\n  // ...\n]\n\nconst pointerEdit = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_POINTER, {\n  edit_id: 120,\n  x: 0,\n  y: 0,\n  config: pointerConfig,\n  count: pointerConfig.length,\n  default_id: 1,\n  fg: ROOTPATH + 'pointer/fg.png',\n  tips_x: 178,\n  tips_y: 428,\n  tips_bg: TIPS_ROOT + 'bg_tips.png'\n})\nconst screenType = hmSetting.getScreenType()\nconst aodModel = screenType == hmSetting.screen_type.AOD\nconst pointerProp = pointerEdit.getProperty(hmUI.prop.CURRENT_CONFIG, !aodModel)\npointer = hmUI.createWidget(hmUI.widget.TIME_POINTER, pointerProp)\n```\n\n----------------------------------------\n\nTITLE: Implementing PAGE_INDICATOR with Swiper Scroll Mode in ZeppOS\nDESCRIPTION: This example shows how to set up a page with Swiper scroll mode and create a PAGE_INDICATOR widget. It also demonstrates creating multiple text widgets for each page. The code uses various ZeppOS modules like @zos/ui, @zos/page, and @zos/utils.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/PAGE_INDICATOR.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align } from '@zos/ui'\nimport { setScrollMode, SCROLL_MODE_SWIPER_HORIZONTAL } from '@zos/page'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const itemCount = 10\n    const pageSize = px(480)\n\n    setScrollMode({\n      mode: SCROLL_MODE_SWIPER_HORIZONTAL,\n      options: {\n        height: pageSize,\n        count: itemCount\n      }\n    })\n\n    const pageIndicator = createWidget(widget.PAGE_INDICATOR, {\n      x: 0,\n      y: px(470),\n      w: px(480),\n      h: px(10),\n      align_h: align.CENTER_H,\n      h_space: 8,\n      select_src: 'images/test/select/select.png',\n      unselect_src: 'images/test/select/unselect.png'\n    })\n\n    for (let i = 0; i < itemCount; i++) {\n      let xPos = 0\n      let yPos = px(400) + pageSize * i\n      createWidget(widget.TEXT, {\n        x: xPos,\n        y: yPos,\n        w: px(480),\n        h: px(120),\n        text_size: 35,\n        color: 0xffffff,\n        align_h: align.CENTER_H,\n        text: `PAGE ${i}`\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using setItem and getItem Methods in JavaScript\nDESCRIPTION: Example of using the setItem method to store a key-value pair and the getItem method to retrieve the stored value in JavaScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsettings.settingsStorage.setItem('text', 'Hello Zepp OS')\nconst result = settings.settingsStorage.getItem('text')\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Event Listener in JavaScript\nDESCRIPTION: Example JavaScript implementation of the onKey function to listen for and handle the UP key click event. Returns true to prevent default behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onKey, KEY_UP, KEY_EVENT_CLICK } from '@zos/interaction'\n\nonKey({\n  callback: (key, keyEvent) => {\n    if (key === KEY_UP && keyEvent === KEY_EVENT_CLICK) {\n      console.log('up click')\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for ZeppOS Mini Program UI Elements\nDESCRIPTION: Illustrates how to define styles for UI elements in a separate file for a ZeppOS Mini Program. This separation allows for easier management and reuse of styles across the application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/code-organization.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const TEXT_STYLE = {\n  x: px(96),\n  y: px(40),\n  w: px(288),\n  h: px(46),\n  color: 0xffffff,\n  text_size: px(36),\n  align_h: h.ALIGN.CENTER_H,\n  align_v: h.ALIGN.CENTER_V,\n  text_style: hmUI.text_style.WRAP\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Container with Flex Layout\nDESCRIPTION: Demonstrates creation of a root container using VIRTUAL_CONTAINER with Flex layout properties for a responsive 3x3 grid.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootContainer = createWidget(widget.VIRTUAL_CONTAINER, {\n  layout: {\n    display: 'flex',\n    x: '100px',\n    y: '100px',\n    width: '60vw',\n    height: '60vh',\n    'justify-content': 'space-between',\n    'align-items': 'center'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-Based Communication in Device App\nDESCRIPTION: This snippet shows how to set up event listeners for receiving messages from Side Service and how to send requests to Side Service using MessageBuilder in the Device App.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { messageBuilder } = getApp()._options.globalData\nconst logger = DeviceRuntimeCore.HmLogger.getLogger('demo')\n\nPage({\n  build() {\n    // receive a message from the Side Service\n    messageBuilder.on('call', ({ payload: buf }) => {\n      // call the messageBuilder.buf2Json method to convert the buffer to a JS JSON object\n      const data = messageBuilder.buf2Json(buf)\n      logger.log('data', data)\n    })\n\n    // send a message to Side Service\n    messageBuilder.request({\n      method: 'GET',\n      params: {\n        index: 0\n      }\n    }).then(data => {\n      // process Side Service responses\n      const { result } = data\n      logger.log(result)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Disk Information in JavaScript\nDESCRIPTION: Demonstrates how to use the hmSetting.getDiskInfo() function to retrieve disk information and log various disk space measurements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getDiskInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst diskInfo = hmSetting.getDiskInfo()\nconsole.log(\n  'disk Info:',\n  diskInfo.total / 1024 / 1024,\n  diskInfo.free / 1024 / 1024,\n  diskInfo.app / 1024 / 1024,\n  diskInfo.watchface / 1024 / 1024,\n  diskInfo.music,\n  diskInfo.system / 1024 / 1024\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vibrate Sensor Instance - ZeppOS JavaScript\nDESCRIPTION: Creates a new VIBRATE sensor instance using hmSensor. Note that only one vibrate sensor instance can be created per page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n```\n\n----------------------------------------\n\nTITLE: Complete Distance Sensor Implementation\nDESCRIPTION: Full example showing distance sensor implementation with UI elements, event handling, and data display. Includes a TextByLine class for text rendering and button creation for event registration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const distance = hmSensor.createSensor(hmSensor.id.DISTANCE)\n\n    const currentText = new TextByLine({\n      text: `current:${distance.current};target:${distance.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${distance.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = distance.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const distanceChangeListener = () => {\n      distance.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: distanceChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: File Structure for IMG_ANIM Resource Files\nDESCRIPTION: Example of how animation resource files should be organized in the project directory. Animation frames are stored as sequential image files.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n// Resource Storage Directory\n.\n└── assets\n        └── gtr-3\n                └── anim // anim_path\n                        ├── animation_0.png\n                        ├── animation_1.png\n                        ├── animation_2.png\n                        ├── animation_3.png\n                        ├── animation_4.png\n                        └── animation_5.png\n```\n\n----------------------------------------\n\nTITLE: Implementing PAGE_INDICATOR with Swiper Scroll Mode in ZeppOS\nDESCRIPTION: This example shows how to set up a page with Swiper scroll mode and create a PAGE_INDICATOR widget. It also demonstrates creating multiple text widgets for each page. The code uses various ZeppOS modules like @zos/ui, @zos/page, and @zos/utils.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/PAGE_INDICATOR.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align } from '@zos/ui'\nimport { setScrollMode, SCROLL_MODE_SWIPER_HORIZONTAL } from '@zos/page'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const itemCount = 10\n    const pageSize = px(480)\n\n    setScrollMode({\n      mode: SCROLL_MODE_SWIPER_HORIZONTAL,\n      options: {\n        height: pageSize,\n        count: itemCount\n      }\n    })\n\n    const pageIndicator = createWidget(widget.PAGE_INDICATOR, {\n      x: 0,\n      y: px(470),\n      w: px(480),\n      h: px(10),\n      align_h: align.CENTER_H,\n      h_space: 8,\n      select_src: 'images/test/select/select.png',\n      unselect_src: 'images/test/select/unselect.png'\n    })\n\n    for (let i = 0; i < itemCount; i++) {\n      let xPos = 0\n      let yPos = px(400) + pageSize * i\n      createWidget(widget.TEXT, {\n        x: xPos,\n        y: yPos,\n        w: px(480),\n        h: px(120),\n        text_size: 35,\n        color: 0xffffff,\n        align_h: align.CENTER_H,\n        text: `PAGE ${i}`\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Shape-Adaptive Styles in ZeppOS\nDESCRIPTION: A comprehensive example showing how to organize styles for different screen shapes (round and square) in a separate style file, detecting device type at runtime and exporting appropriate style variables.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst deviceInfo = hmSetting.getDeviceInfo()\nconst { width, height, screenShape } = deviceInfo\n\n// 0 - square s\n// 1 - round r\nconst DEVICE_TYPE = DEVICE_SHAPE ? 'round' : 'square'\n\nconst processVal = (valObj = {}) => {\n  return valObj[DEVICE_TYPE] ? valObj[DEVICE_TYPE] : 0\n}\n\nconst HOME_TITLE = {\n  round: {\n    attrs: {\n      text: 'Hello World Round'\n    },\n    x: px(96),\n    y: px(40),\n    w: px(288),\n    h: px(46),\n    color: 0xffffff,\n    text_size: px(36),\n    align_h: h.ALIGN.CENTER_H,\n    align_v: h.ALIGN.CENTER_V,\n    text_style: hmUI.text_style.WRAP\n  },\n  square: {\n    attrs: {\n      text: 'Hello World Square',\n      x: 32,\n      y: 11,\n      w: 232,\n      h: 42,\n      color: 0x666666,\n      text_size: 32,\n      align_h: h.ALIGN.CENTER_H,\n      align_v: h.ALIGN.CENTER_V,\n      text_style: hmUI.text_style.NONE\n    }\n  }\n}\n\nexport default {\n  HOME_TITLE: processStyles(HOME_TITLE)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Mini Program Instance with App Constructor\nDESCRIPTION: Demonstrates how to register a Mini Program instance using the App constructor in app.js. Shows setting up global data and lifecycle callbacks onCreate and onDestroy.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/app.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    title: 'hello world!'\n  },\n  onCreate(options) {},\n  onDestroy(options) {},\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Wear Status in TypeScript\nDESCRIPTION: This snippet shows the TypeScript method signature for getting the current device wearing status. The status is returned as a number: 0 for not wearing, 1 for wearing, 2 for in motion, and 3 for not sure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus(): number\n```\n\n----------------------------------------\n\nTITLE: Complete HISTOGRAM Widget Implementation Example\nDESCRIPTION: Comprehensive example showing how to create and configure a histogram widget with full customization including axes, labels, and styling options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align } from '@zos/ui'\n\nPage({\n  build() {\n    const fillRect = createWidget(widget.FILL_RECT, {\n      x: 100,\n      y: 120,\n      w: 300,\n      h: 300,\n      color: 0xffffff\n    })\n\n    const view = createWidget(widget.HISTOGRAM, {\n      x: 100,\n      y: 120,\n      h: 300,\n      w: 300,\n      item_width: 20,\n      item_space: 10,\n      item_radius: 10,\n      item_start_y: 50,\n      item_max_height: 230,\n      item_color: 0x304ffe,\n      data_array: [20, 30, 40, 50, 60, 100, 80, 90, 20, 30],\n      data_count: 10,\n      data_min_value: 10,\n      data_max_value: 100,\n      xline: {\n        pading: 20,\n        space: 20,\n        start: 0,\n        end: 300,\n        color: 0x00c853,\n        width: 1,\n        count: 15\n      },\n      yline: {\n        pading: 10,\n        space: 10,\n        start: 0,\n        end: 300,\n        color: 0xff6d00,\n        width: 1,\n        count: 30\n      },\n      xText: {\n        x: 12,\n        y: 270,\n        w: 20,\n        h: 50,\n        space: 10,\n        align: align.LEFT,\n        color: 0x000000,\n        count: 10,\n        data_array: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n      },\n      yText: {\n        x: 0,\n        y: 20,\n        w: 50,\n        h: 50,\n        space: 10,\n        align: align.LEFT,\n        color: 0x000000,\n        count: 6,\n        data_array: ['a', 'b', 'c', 'd', 'e', 'f']\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Stopping a Timer in JavaScript\nDESCRIPTION: Example of creating a timer with an initial delay and repeating interval, then stopping it. The timer executes a callback function that logs messages and accesses parameters passed through the option object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/timer/createTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Create timer, delay 500ms to trigger, then execute every 1000ms.\nconst timer1 = timer.createTimer(\n  500,\n  1000,\n  function (option) {\n    //callback\n    console.log('timer callback')\n    console.log(option.hour)\n  },\n  { hour: 0, minute: 15, second: 30 }\n)\n\n//Stop timer1\ntimer.stopTimer(timer1)\n```\n\n----------------------------------------\n\nTITLE: Registering and Accessing a Page Instance in Zepp OS Mini Program (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to register a page instance using the Page constructor and access it using the getCurrentPage method. It includes lifecycle callbacks, state management, and logging functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/page.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS'\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  }\n})\n\nconst page = getCurrentPage()\nconsole.log(page._options.state.text)\n```\n\n----------------------------------------\n\nTITLE: Creating a TIME_POINTER Widget in ZeppOS\nDESCRIPTION: This code demonstrates how to create a time pointer widget for displaying analog clock hands in ZeppOS. It configures the hour pointer with specific positioning parameters, rotation center coordinates, and custom image paths. The same pattern can be applied for minute and second pointers.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/TIME_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet timePointer = hmUI.createWidget(hmUI.widget.TIME_POINTER, {\n  hour_centerX: 240, // Center of pointer rotation corresponds to centerX.\n  hour_centerY: 240, // Center of pointer rotation corresponds to centerY.\n  hour_posX: 19, // The pointer's own center of rotation, corresponds to the x in position.\n  hour_posY: 100, // Pointer's own center of rotation, corresponds to y in position.\n  hour_path: 'pointer.png', // Path of the pointer.\n  hour_cover_path: 'cover.png', // Pointer circle image.\n  hour_cover_y: 0,\n  hour_cover_x: 0\n  // Minute and seconds as same as above, just replace hour with minute/second.\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_ANIM Widget with Event Listener in ZeppOS\nDESCRIPTION: This code example shows a complete implementation of the IMG_ANIM widget within a Page object. It creates an image animation, sets its initial properties, and adds a click event listener to start the animation when clicked if it's not already running.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const imgAnimation = hmUI.createWidget(hmUI.widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n    imgAnimation.addEventListener(hmUI.event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(hmUI.prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Disk Information in JavaScript\nDESCRIPTION: Example of using hmSetting.getDiskInfo() to retrieve disk space information and logging it to the console with values converted to megabytes (MB).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getDiskInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst diskInfo = hmSetting.getDiskInfo()\nconsole.log(\n  'disk Info:',\n  diskInfo.total / 1024 / 1024,\n  diskInfo.free / 1024 / 1024,\n  diskInfo.app / 1024 / 1024,\n  diskInfo.watchface / 1024 / 1024,\n  diskInfo.music,\n  diskInfo.system / 1024 / 1024\n)\n```\n\n----------------------------------------\n\nTITLE: Creating DISTANCE Sensor in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a DISTANCE sensor instance and log its current value. The 'createSensor' method is used with the 'DISTANCE' sensor ID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst distance = hmSensor.createSensor(hmSensor.id.DISTANCE)\n\nconsole.log(distance.current)\n```\n\n----------------------------------------\n\nTITLE: Defining the Assets Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the assets function, which takes a base path and returns a function that constructs resource file paths with optional RTL support.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/assets.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assets(basePath: BasePath): AssetsPathFunc\n```\n\n----------------------------------------\n\nTITLE: Logging to Console in Zepp OS with JavaScript\nDESCRIPTION: Demonstrates how to use console.log() to print messages to the console in Zepp OS. This function accepts any number of parameters and is useful for debugging applications during development.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/global.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Displaying Weather Data on ZeppOS Device Screen\nDESCRIPTION: This code example demonstrates how to retrieve weather data using the WEATHER sensor and display it on the device screen using the hmUI API. It includes a custom TextByLine class for rendering text widgets.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const weather = hmSensor.createSensor(hmSensor.id.WEATHER)\n    const weatherData = weather.getForecastWeather()\n    const { forecastData, tideData } = weatherData\n\n    new TextByLine({\n      text: `cityName:${weatherData.cityName}`,\n      line: 0\n    }).render()\n\n    new TextByLine({\n      text: `forecastCount:${forecastData.count};tideCount:${tideData.count}`,\n      line: 1\n    }).render()\n\n    for (let i = 0; i < forecastData.count; i++) {\n      const { index, high, low } = forecastData.data[i]\n\n      new TextByLine({\n        text: `index:${index};high:${high};low:${low}`,\n        line: 2 + i\n      }).render()\n    }\n\n    for (let i = 0; i < tideData.count; i++) {\n      const {\n        sunrise: { hour: sunriseHour, minute: sunriseMinute },\n        sunset: { hour: sunsetHour, minute: sunsetMinute }\n      } = tideData.data[i]\n\n      new TextByLine({\n        text: `sunrise:${sunriseHour}:${sunriseMinute};sunset:${sunsetHour}:${sunsetMinute}`,\n        line: 2 + i + forecastData.count\n      }).render()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Event Listeners in TypeScript\nDESCRIPTION: Removes all listeners, or those of the specified event name if provided.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Creating a STROKE_RECT Widget in Zepp OS\nDESCRIPTION: Creates a stroked rectangle widget with specified position, dimensions, radius, line width, and color. The example also shows how to add a click event listener to update the widget's position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.stat_asset to Retrieve File Information in Zepp OS Mini Program\nDESCRIPTION: This JavaScript code demonstrates how to use the hmFS.stat_asset function to get information about a file in the /assets directory. It creates a text widget to display the file size and modification time if successful, or logs an error if unsuccessful.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/stat_asset.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const [fs_stat, err] = hmFS.stat_asset('raw/test_file.txt')\n\n    if (err === 0) {\n      const { size, mtime } = fs_stat\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(0),\n        y: px(120),\n        w: px(480),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(20),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `size: ${size}; mtime: ${mtime}`\n      })\n\n    } else {\n      console.log('err:', err)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Widget Visibility With GROUP\nDESCRIPTION: Improved approach using GROUP widget to manage visibility of multiple widgets together. All child widgets can be controlled through the parent GROUP widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/widget-group.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst group_widget = hmUI.createWidget(hmUI.widget.GROUP , {\n  // ...\n})\n\nconst img_icon_widget = group_widget.createWidget(hmUI.widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = group_widget.createWidget(hmUI.widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = group_widget.createWidget(hmUI.widget.TEXT, {\n  // ...\n})\n\ngroup_widget.setProperty(hmUI.prop.VISIBLE, false)\n```\n\n----------------------------------------\n\nTITLE: Modifying Zepp OS Application Page in JavaScript\nDESCRIPTION: This code snippet demonstrates how to modify the main page of a Zepp OS application. It includes logging statements and creates a text widget on the page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/development.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as hmUI from \"@zos/ui\";\nimport { log as Logger } from \"@zos/utils\";\nimport { TEXT_STYLE } from \"zosLoader:./index.page.[pf].layout.js\";\n\nconst logger = Logger.getLogger(\"helloworld\");\nPage({\n  onInit() {\n    // add log\n    logger.log(\"test\")\n    logger.debug(\"page onInit invoked\");\n  },\n  build() {\n    logger.debug(\"page build invoked\");\n    hmUI.createWidget(hmUI.widget.TEXT, TEXT_STYLE);\n  },\n  onDestroy() {\n    logger.debug(\"page onDestroy invoked\");\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Histogram Implementation Example\nDESCRIPTION: Full example showing histogram widget creation with all configuration options including fill rectangle background, data points, axis lines, and labels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/HISTOGRAM.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fillRect = hmUI.createWidget(hmUI.widget.FILL_RECT, {\n      x: 100,\n      y: 120,\n      w: 300,\n      h: 300,\n      color: 0xffffff\n    })\n\n    const view = hmUI.createWidget(hmUI.widget.HISTOGRAM, {\n      x: 100,\n      y: 120,\n      h: 300,\n      w: 300,\n      item_width: 20,\n      item_space: 10,\n      item_radius: 10,\n      item_start_y: 50,\n      item_max_height: 230,\n      item_color: 0x304ffe,\n      data_array: [20, 30, 40, 50, 60, 100, 80, 90, 20, 30],\n      data_count: 10,\n      data_min_value: 10,\n      data_max_value: 100,\n      xline: {\n        pading: 20,\n        space: 20,\n        start: 0,\n        end: 300,\n        color: 0x00c853,\n        width: 1,\n        count: 15\n      },\n      yline: {\n        pading: 10,\n        space: 10,\n        start: 0,\n        end: 300,\n        color: 0xff6d00,\n        width: 1,\n        count: 30\n      },\n      xText: {\n        x: 12,\n        y: 270,\n        w: 20,\n        h: 50,\n        space: 10,\n        align: hmUI.align.LEFT,\n        color: 0x000000,\n        count: 10,\n        data_array: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n      },\n      yText: {\n        x: 0,\n        y: 20,\n        w: 50,\n        h: 50,\n        space: 10,\n        align: hmUI.align.LEFT,\n        color: 0x000000,\n        count: 6,\n        data_array: ['a', 'b', 'c', 'd', 'e', 'f']\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Today's Hourly Stress Averages in TypeScript\nDESCRIPTION: This snippet demonstrates how to get the average stress value for each hour of the current day using the getTodayByHour method. It returns a fixed-length array of 24 numbers.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetTodayByHour(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Defining Item Click Function for ScrollList in TypeScript\nDESCRIPTION: Specifies the function signature for handling item click events in a ScrollList. It provides the list widget, clicked item index, and data key as parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n(list: ScrollList, index: number, data_key: string) => void\n```\n\n----------------------------------------\n\nTITLE: Complete Example of CYCLE_IMAGE_TEXT_LIST Usage\nDESCRIPTION: This comprehensive example shows how to create a CYCLE_IMAGE_TEXT_LIST widget, populate it with data, and retrieve properties. It includes setting up the data array and configuring various widget properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst data_array = [\n  { src: rootPath + 'step/step_num_0.png', text: '1' },\n  { src: rootPath + 'step/step_num_1.png', text: '2' },\n  { src: rootPath + 'step/step_num_2.png', text: '3' }\n]\ncycleList = createWidget(widget.CYCLE_IMAGE_TEXT_LIST, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 400,\n  data_array: data_array,\n  data_size: 3,\n  item_height: 100,\n  item_bg_color: 0xffffff,\n  item_text_color: 0x000000,\n  item_text_x: 10,\n  item_text_y: 10,\n  item_text_size: 18\n})\n\n//获取第一行的索引值\nret = cycleList.getProperty(prop.MORE, {})\nconsole.log(ret.index)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages via Bluetooth in Zepp OS\nDESCRIPTION: Example of sending binary data through the Bluetooth connection using messaging.peerSocket.send API. The code shows how to retrieve data from storage, convert it to a buffer, and send it through the connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/messaging.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (key === 'notes') {\n  const notes = settings.settingsStorage.getItem('notes')\n  const noteBuffer = Buffer.from(notes)\n  messaging.peerSocket.send(noteBuffer.buffer)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logs in Device App using Zepp OS Utilities\nDESCRIPTION: Code showing how to import and use the log function from @zos/utils module to add different log levels in the Device App component of a Zepp OS Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/debug.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { log } from '@zos/utils'\n\nconst pageLogger = log.getLogger('page')\n\npageLogger.log('page created')\npageLogger.error('page error')\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code Widget - Complete Example\nDESCRIPTION: Complete example of creating a QR code widget with background settings. Demonstrates setting content, position, dimensions, and background properties within a Page component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/QRCODE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const qrcode = createWidget(widget.QRCODE, {\n      content: 'Hello Zepp OS',\n      x: 140,\n      y: 140,\n      w: 200,\n      h: 200,\n      bg_x: 120,\n      bg_y: 120,\n      bg_w: 240,\n      bg_h: 240\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Modal Dialog in JavaScript\nDESCRIPTION: Example of creating a modal dialog using the createModal function, setting options, and handling button clicks. It demonstrates how to show the dialog and control its visibility programmatically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/createModal.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createModal, MODAL_CONFIRM } from '@zos/interaction'\n\nconst dialog = createModal({\n  content: 'hello world',\n  autoHide: false,\n  onClick: (keyObj) => {\n    const { type } = keyObj\n    if (type === MODAL_CONFIRM) {\n      console.log('confirm')\n    } else {\n      dialog.show(false)\n    }\n  },\n})\n\ndialog.show(true)\n```\n\n----------------------------------------\n\nTITLE: Implementing AppService in JavaScript\nDESCRIPTION: Example of how to use the AppService constructor in a Zepp OS Mini Program. It demonstrates setting up the initial state and defining the onInit lifecycle method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/AppService.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAppService({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Logging to Console in Zepp OS JavaScript\nDESCRIPTION: Demonstrates how to use the console.log() function to print a log message in Zepp OS. This function can accept any number of parameters to be logged.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/global.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Deletion in ZeppOS\nDESCRIPTION: Complete example showing how to create and delete a text widget in a ZeppOS application. Demonstrates importing necessary components, creating a text widget with specific properties, and then deleting it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/deleteWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, text_style, deleteWidget } from '@zos/ui'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    deleteWidget(textWidget)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Compass.getFreqMode Method Definition\nDESCRIPTION: Method to get the current frequency mode for compass updates. Available from API_LEVEL 4.0, this returns the current trigger frequency mode setting as a numeric constant.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetFreqMode(): number\n```\n\n----------------------------------------\n\nTITLE: Creating WEAR Sensor Instance\nDESCRIPTION: Demonstrates how to create a WEAR sensor instance and access its current value\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WEAR.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst wear = hmSensor.createSensor(hmSensor.id.WEAR)\n\nconsole.log(wear.current)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Usage Example of SysProGetDouble\nDESCRIPTION: Example showing how to store and retrieve a double precision value using the hmFS API. Demonstrates setting a value with SysProSetDouble and retrieving it with SysProGetDouble.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetDouble('js_test_double', 3.14)\nconsole.log(hmFS.SysProGetDouble('js_test_double'))\n```\n\n----------------------------------------\n\nTITLE: Handling Download Failures in JavaScript\nDESCRIPTION: Example showing how to handle download failures by implementing the onFail callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/download-file.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst downloadTask = network.downloader.downloadFile({\n  url: 'https://docs.zepp.com/zh-cn/img/logo.png',\n  headers: {},\n  timeout: 60000,\n  filePath: 'data://download/1.png'\n})\n\ndownloadTask.onFail = (event) => {\n  console.log(event.code)\n  console.log(event.message)\n}\n```\n\n----------------------------------------\n\nTITLE: Using writeFileSync to Write String with Encoding in JavaScript\nDESCRIPTION: This example shows how to use writeFileSync to write a string to a file named 'content.txt', specifying UTF-8 encoding.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwriteFileSync({\n  path: 'content.txt',\n  data: 'some content...',\n  options: {\n    encoding: 'utf8',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getApp Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the getApp function in a Zepp OS application. It shows the creation of an App object with globalData and lifecycle methods, and then uses getApp to access the globalData.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/getApp.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    text: 'Hello Zepp OS',\n  },\n  onCreate() {\n    console.log('onCreate')\n    console.log(this.globalData.text)\n  },\n  onDestroy() {\n    console.log('onDestroy')\n  },\n})\n\nconst app = getApp()\nconsole.log(app._options.globalData.text)\n```\n\n----------------------------------------\n\nTITLE: Creating GROUP Widget and Sub-widgets in ZeppOS\nDESCRIPTION: Shows how to create a GROUP widget instance and add sub-widgets to it. The GROUP widget allows unified management of multiple widgets including show/hide functionality and event registration. Sub-widgets must use relative positioning for layout.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst group = hmUI.createWidget(hmUI.widget.GROUP, Param)\n\n// Creating UI sub-widgets\ngroup.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_ANIM Widget with Event Listener in ZeppOS\nDESCRIPTION: This example demonstrates creating an IMG_ANIM widget with specific properties, starting the animation, and adding a click event listener to restart the animation when it's not running.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const imgAnimation = hmUI.createWidget(hmUI.widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n    imgAnimation.addEventListener(hmUI.event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(hmUI.prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Calorie Sensor Implementation Example\nDESCRIPTION: Demonstrates importing the Calorie sensor, creating an instance, retrieving current and target values, and properly setting up and cleaning up change event callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Calorie.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Calorie } from '@zos/sensor'\n\nconst calorie = new Calorie()\nconst current = calorie.getCurrent()\nconst target = calorie.getTarget()\nconst callback = () => {\n  console.log(calorie.getCurrent())\n}\n\ncalorie.onChange(callback)\n\n// When not needed for use\ncalorie.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Creating a SLIDE_SWITCH Component in ZeppOS\nDESCRIPTION: This code demonstrates how to import and create a slide switch UI component in ZeppOS. The component requires coordinates, dimensions, image paths for different states, and offers optional callback functions for state changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst slideSwitch = createWidget(widget.SLIDE_SWITCH, Param)\n```\n\n----------------------------------------\n\nTITLE: Extended app.json Configuration for Multiple Zepp OS Devices\nDESCRIPTION: This configuration extends the app.json to support both GTR-3-Pro and GTR-3 device models. Each target includes specific device sources and design width settings for proper rendering.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ···\n      },\n      \"platforms\": [\n        {\n          \"name\": \"gtr-3-pro\",\n          \"deviceSource\": 229\n        },\n        {\n          \"name\": \"gtr-3-prow\",\n          \"deviceSource\": 230\n        }\n      ],\n      \"designWidth\": 480\n    },\n    \"gtr-3\": {\n      \"module\": {\n        // ···\n      },\n      \"platforms\": [\n        {\n          \"name\": \"gtr-3\",\n          \"deviceSource\": 226\n        },\n        {\n          \"name\": \"gtr-3w\",\n          \"deviceSource\": 227\n        }\n      ],\n      \"designWidth\": 480\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Arc on Canvas in Zepp OS\nDESCRIPTION: Shows how to draw a filled arc (part of an ellipse) with center at (280,200), radii 60 and 80, from -150 to -30 degrees, with yellow color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawArc({\n  center_x: 280,\n  center_y: 200,\n  radius_x: 60,\n  radius_y: 80,\n  start_angle: -150,\n  end_angle: -30,\n  color: 0xfff400\n})\n```\n\n----------------------------------------\n\nTITLE: Organizing Style Code by Screen Shape in index.style.js\nDESCRIPTION: Demonstrates how to organize style code separately for round and square screens by detecting the device's screen shape at runtime and applying the appropriate styles.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDeviceInfo, SCREEN_SHAPE_SQUARE, SCREEN_SHAPE_ROUND } from '@zos/device'\nimport { align, text_style } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst deviceInfo = getDeviceInfo()\nconst { width, height, screenShape } = deviceInfo\n\nconst processStyles = (styleObj = {}) => {\n  return styleObj[screenShape]\n}\n\nconst HOME_TITLE = {\n  [SCREEN_SHAPE_ROUND]: {\n    attrs: {\n      text: 'Hello World Round'\n    },\n    x: px(96),\n    y: px(40),\n    w: px(288),\n    h: px(46),\n    color: 0xffffff,\n    text_size: px(36),\n    align_h: align.CENTER_H,\n    align_v: align.CENTER_V,\n    text_style: text_style.WRAP\n  },\n  [SCREEN_SHAPE_SQUARE]: {\n    attrs: {\n      text: 'Hello World Square',\n      x: 32,\n      y: 11,\n      w: 232,\n      h: 42,\n      color: 0x666666,\n      text_size: 32,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE\n    }\n  }\n}\n\nexport default {\n  HOME_TITLE: processStyles(HOME_TITLE)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Scrolling in Zepp OS\nDESCRIPTION: Complete example showing how to implement a scrollable page view with multiple colored rectangles and text elements, including click handling to demonstrate scrollToPage functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/scrollToPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\nfunction getRandomFromSection(low, high) {\n  const RANDOM = Math.random()\n  const RANGE = high - low + 1\n\n  return Math.floor(RANDOM * RANGE) + low\n}\n\nPage({\n  build() {\n    const isVertical = true\n    hmUI.setScrollView(true, px(480), 20, isVertical)\n\n    const numArr = Array.from({ length: 20 }).map((_, index) => index)\n\n    numArr.forEach((num) => {\n      const backgroundColor = Array.from({ length: 6 }).reduce((prev, curr) => {\n        const random = getRandomFromSection(0, 15)\n        return prev + randomArr[random]\n      }, '0x')\n\n      hmUI.createWidget(hmUI.widget.FILL_RECT, {\n        x: 0,\n        y: px(480) * num,\n        w: px(480),\n        h: px(480),\n        color: Number(backgroundColor)\n      })\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(96),\n        y: px(200) + px(480) * num,\n        w: px(320),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(36),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `HELLO ZEPPOS ${num}`\n      })\n\n      text.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n        const currentIndex = hmUI.getScrollCurrentPage()\n        console.log('currentIndex', currentIndex)\n\n        hmUI.scrollToPage(5, false)\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Event Handling with onKey in JavaScript\nDESCRIPTION: Example demonstrating how to register a key event listener using the onKey method. Shows handling of the UP key click event and preventing default behavior by returning true.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { onKey, KEY_UP, KEY_EVENT_CLICK } from '@zos/interaction'\n\nonKey({\n  callback: (key, keyEvent) => {\n    if (key === KEY_UP && keyEvent === KEY_EVENT_CLICK) {\n      console.log('up click')\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Page Implementation Example in JavaScript\nDESCRIPTION: Example of using the Page constructor to create a page in a Zepp OS Mini Program. It demonstrates setting up initial state, and implementing the onInit and build lifecycle methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/Page.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using setScrollLock to Lock Page Scrolling in ZeppOS\nDESCRIPTION: JavaScript example showing how to import and use the setScrollLock function from the @zos/page module to lock the current page's scroll position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/page/setScrollLock.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { setScrollLock } from '@zos/page'\n\nsetScrollLock({\n  lock: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProGetInt64 to Retrieve Stored Integer\nDESCRIPTION: Example showing how to store a 64-bit integer using SysProSetInt64 and then retrieve it using SysProGetInt64. This demonstrates the complete usage pattern of storing and retrieving temporary system values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetInt64.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nhmFS.SysProSetInt64('js_test_int64', 200)\nconsole.log(hmFS.SysProGetInt64('js_test_int64'))\n```\n\n----------------------------------------\n\nTITLE: Complete IMG_ANIM Implementation Example\nDESCRIPTION: Full example showing how to create and control an IMG_ANIM widget, including initialization, event handling, and animation control\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const imgAnimation = hmUI.createWidget(hmUI.widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n    imgAnimation.addEventListener(hmUI.event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(hmUI.prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_LEVEL Widget in ZeppOS Page\nDESCRIPTION: This example shows how to implement the IMG_LEVEL widget within a ZeppOS Page. It creates an array of image paths and sets up the widget with initial parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const imgArray = ['img_level_1.png', 'img_level_2.png', 'img_level_3.png', 'img_level_4.png']\n    const img_level = hmUI.createWidget(hmUI.widget.IMG_LEVEL, {\n      x: 0,\n      y: 0,\n      image_array: imgArray,\n      image_length: imgArray.length,\n      level: 1\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Mini Program Directory Structure\nDESCRIPTION: Example directory structure showing asset organization for different device targets, including resource files and images.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app.js\n├── app.json\n├── assets\n│   ├── gtr-3-pro\n│   │   ├── icon.png\n│   │   └── image\n│   │       └── logo.png\n...\n```\n\n----------------------------------------\n\nTITLE: Updating and Deleting ScrollList Items in JavaScript\nDESCRIPTION: Demonstrates how to update a specific item in the ScrollList and how to delete an item. These operations allow for dynamic modification of the list content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Update a specific data\nscrollList.setProperty(prop.UPDATE_ITEM, {\n  index: gScrollListSelectIndex,\n  item_data: dataList2[gScrollListSelectIndex]\n})\n// Delete a specific data\nlist.setProperty(prop.DELETE_ITEM, { index: delete_index })\n```\n\n----------------------------------------\n\nTITLE: Processing Basic Sleep Information in JavaScript\nDESCRIPTION: Demonstrates how to access and process basic sleep information, including sleep score, deep sleep time, start time, and end time.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst basicInfo = sleep.getBasicInfo()\nconsole.log('basicInfo score=' + basicInfo.score) //sleep score\nconsole.log('basicInfo deepMin=' + basicInfo.deepMin) //deep sleep time unit score\nconsole.log('basicInfo startTime=' + basicInfo.startTime) // sleep start time, based on the number of minutes at 0:00 of the day\nconsole.log('basicInfo endTime=' + basicInfo.endTime) // sleep end time, minutes from the same base as the start time\n// sleep totalTime = endTime - startTime + 1;\n\nlet start = basicInfo.startTime\nif (start >= SLEEP_REFERENCE_ZERO) {\n  // SLEEP_REFERENCE_ZERO is the number of minutes in a day, i.e. 24*60\n  start -= SLEEP_REFERENCE_ZERO\n}\n\nhour = start / 60\nminute = start % 60\n\nconst end = basicInfo.endTime + 1 // if it is aligned with the secondary screen, the end time should be added by 1\nif (end >= SLEEP_REFERENCE_ZERO) {\n  end -= SLEEP_REFERENCE_ZERO\n}\nhour = end / 60\nminute = end % 60\n```\n\n----------------------------------------\n\nTITLE: Creating Button Widget - Basic Structure\nDESCRIPTION: Basic code structure for creating a button widget using the @zos/ui library. Shows the basic import and creation syntax.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst button = createWidget(widget.BUTTON, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_ANIM Widget with Event Listener in ZeppOS\nDESCRIPTION: This example demonstrates creating an IMG_ANIM widget with specific properties, starting the animation, and adding a click event listener to restart the animation when it's not running.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const imgAnimation = hmUI.createWidget(hmUI.widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n    imgAnimation.addEventListener(hmUI.event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(hmUI.prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Fetch Request with Parameters\nDESCRIPTION: Shows how to make a POST request with custom headers and body data, including handling of the response with compatibility check for different model implementations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/fetch.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = await fetch({\n  url: 'https://xxx.com/api/xxx',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    text: 'Hello Zepp OS'\n  })\n})\n\nconst data = typeof res.body === 'string' ?  JSON.parse(res.body) : res.body\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Arc on Canvas in Zepp OS\nDESCRIPTION: Shows how to draw a filled arc (part of an ellipse) with center at (280,200), radii 60 and 80, from -150 to -30 degrees, with yellow color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawArc({\n  center_x: 280,\n  center_y: 200,\n  radius_x: 60,\n  radius_y: 80,\n  start_angle: -150,\n  end_angle: -30,\n  color: 0xfff400\n})\n```\n\n----------------------------------------\n\nTITLE: Using getAppIdByName to Retrieve App ID in JavaScript\nDESCRIPTION: JavaScript example showing how to import and use the getAppIdByName function from the @zos/router module to retrieve a Mini Program's ID by its name and log the result to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/getAppIdByName.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAppIdByName } from '@zos/router'\n\nconst appId = getAppIdByName('calculator')\nconsole.log(appId)\n```\n\n----------------------------------------\n\nTITLE: Creating a BUTTON Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a button widget using hmUI.createWidget. This initializes a button control that can be customized with various properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing an IMG_POINTER with Specific Rotation Angle\nDESCRIPTION: This example shows how to create an IMG_POINTER widget with a specific rotation angle. The code sets the image source, rotation center coordinates, pointer's own center coordinates, and a specific angle value of 245 degrees.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_POINTER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst imgPointer = hmUI.createWidget(hmUI.widget.IMG_POINTER, {\n  src: 'hour.png',\n  center_x: 227,\n  center_y: 227,\n  x: 22,\n  y: 121,\n  angle: 245\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Text Widget Example - JavaScript\nDESCRIPTION: Example demonstrating how to create a text widget with specific positioning, styling, and content properties using the createWidget API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/createWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, text_style } from '@zos/ui'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for statSync Function - TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature and parameter structure for the statSync API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/statSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction statSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Installing the Zeus CLI and Creating a Project\nDESCRIPTION: Command to create a new template project called 'hello-world' using the Zeus CLI. This is the first step in creating a Mini Program or Watchface project.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/quick-start.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzeus create hello-world\n```\n\n----------------------------------------\n\nTITLE: Defining setBrightness Function Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the function signature for the setBrightness method. It takes a number parameter for brightness and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(brightness: number) => result\n```\n\n----------------------------------------\n\nTITLE: Configuring SCROLL_LIST Items in ZeppOS\nDESCRIPTION: This code snippet shows a complete configuration for item_config in a SCROLL_LIST widget. It defines two types of items with different layouts, including text views and background properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst item_config = [\n  {\n    type_id: 1,\n    item_bg_color: 0xef5350,\n    item_bg_radius: 10,\n    text_view: [\n      {\n        x: 100,\n        y: 0,\n        w: 100,\n        h: 20,\n        key: 'name',\n        color: 0xffffff\n      },\n      {\n        x: 0,\n        y: 30,\n        w: 100,\n        h: 100,\n        key: 'age',\n        color: 0xffffff,\n        text_size: 20\n      }\n    ],\n    text_view_count: 2,\n    item_height: 130\n  },\n  {\n    type_id: 2,\n    item_bg_color: 0xef5350,\n    item_bg_radius: 10,\n    text_view: [{ x: 100, y: 0, w: 100, h: 20, key: 'like', color: 0x3d5afe }],\n    text_view_count: 1,\n    item_height: 100\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_WEEK Widget in ZeppOS\nDESCRIPTION: Demonstrates how to create a widget that displays the current week using image arrays for different language variants (English, Traditional Chinese, Simplified Chinese). The widget position is specified via x,y coordinates while width and height are determined by the actual dimensions of the images in weekArray.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_WEEK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhmUI.createWidget(hmUI.widget.IMG_WEEK, {\n  x: 175,\n  y: 113,\n  // w,h cannot be set, use the actual width and height of the image in the weekArray.\n  week_en: weekArray,\n  week_tc: weekArray,\n  week_sc: weekArray\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Button Component in JavaScript\nDESCRIPTION: This example shows how to create a Button component within an AppSettingsPage. It demonstrates setting a label, applying inline styles using CSS properties in camelCase, and defining an onClick event handler.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/app-settings/ui-intro.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return Button({\n      label: 'Delete',\n      style: {\n        fontSize: '12px',\n        borderRadius: '30px',\n        background: '#D85E33',\n        color: 'white'\n      },\n      onClick: () => {\n        // ...\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using setScreenOff Function in JavaScript\nDESCRIPTION: Example of importing and using the setScreenOff function from the @zos/display module. The function returns 0 to indicate success, which is verified in the code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScreenOff } from '@zos/display'\n\nconst result = setScreenOff()\n\nif (result === 0) {\n  console.log('setScreenOff success')\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Forecast Weather Data in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getForecastWeather method to retrieve weather forecast data. It returns an object containing city name, forecast data, and tide data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Weather.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetForecastWeather(): ForecastWeather\n```\n\n----------------------------------------\n\nTITLE: Configuring SCROLL_LIST Items in ZeppOS\nDESCRIPTION: This code snippet shows a complete configuration for item_config in a SCROLL_LIST widget. It defines two types of items with different layouts, including text views and background properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst item_config = [\n  {\n    type_id: 1,\n    item_bg_color: 0xef5350,\n    item_bg_radius: 10,\n    text_view: [\n      {\n        x: 100,\n        y: 0,\n        w: 100,\n        h: 20,\n        key: 'name',\n        color: 0xffffff\n      },\n      {\n        x: 0,\n        y: 30,\n        w: 100,\n        h: 100,\n        key: 'age',\n        color: 0xffffff,\n        text_size: 20\n      }\n    ],\n    text_view_count: 2,\n    item_height: 130\n  },\n  {\n    type_id: 2,\n    item_bg_color: 0xef5350,\n    item_bg_radius: 10,\n    text_view: [{ x: 100, y: 0, w: 100, h: 20, key: 'like', color: 0x3d5afe }],\n    text_view_count: 1,\n    item_height: 100\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Router Push Usage Example in JavaScript\nDESCRIPTION: Example showing how to use the push function to navigate to a new page with parameters. Demonstrates importing the push function and calling it with a URL and query parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/push.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'page/index',\n  params: 'type=1',\n})\n```\n\n----------------------------------------\n\nTITLE: Complete World Clock Implementation Example\nDESCRIPTION: Full example demonstrating world clock implementation including UI rendering and data handling. Creates a TextByLine class for displaying clock information and implements a Page with world clock functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const world_clock = hmSensor.createSensor(hmSensor.id.WORLD_CLOCK)\n    world_clock.init()\n\n    const count = world_clock.getWorldClockCount()\n\n    for (let index = 0; index < count; index++) {\n      const { city, cityCode, hour, minute, timeZoneHour, timeZoneMinute } = world_clock.getWorldClockInfo(index)\n\n      new TextByLine({\n        text: `city:${city};cityCode:${cityCode};hour:${hour};minute:${minute}`,\n        line: 0 + 2 * index\n      }).render()\n\n      new TextByLine({\n        text: `timeZoneHour:${timeZoneHour};timeZoneMinute:${timeZoneMinute}`,\n        line: 1 + 2 * index\n      }).render()\n    }\n\n    world_clock.uninit()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Visibility and Multiple Properties in JavaScript\nDESCRIPTION: Demonstrates how to use setProperty to hide/show a button widget and set multiple properties for a text widget, including position, size, text content, color, and alignment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 设置 widegt 隐藏/显示\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\nbutton.setProperty(hmUI.prop.VISIBLE, false)\n\nconst text = hmUI.createWidget(hmUI.widget.TEXT, Param)\ntext.setProperty(hmUI.prop.MORE, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 200,\n  text: 'hello',\n  color: 0x34e073,\n  align_h: hmUI.align.LEFT\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Sleep Information in ZeppOS\nDESCRIPTION: Shows the type definition for the updateInfo method, which actively updates sleep information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Animation in ZeppOS JavaScript\nDESCRIPTION: This example demonstrates how to create and control widget animations in ZeppOS. It creates a text widget and applies two simultaneous animations: horizontal movement (X property) and vertical movement (Y property). The code also shows how to pause, resume, and get the current status of an animation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widgetAnimations.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, align, text_style, prop, anim_status } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: px(96),\n      y: px(120),\n      w: px(288),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(36),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    const anim_step1 = {\n      anim_rate: 'linear',\n      anim_duration: 2000,\n      anim_from: px(10),\n      anim_to: px(110),\n      anim_prop: prop.X\n    }\n\n    const anim_step2 = {\n      anim_rate: 'linear',\n      anim_duration: 2000,\n      anim_from: px(120),\n      anim_to: px(300),\n      anim_prop: prop.Y\n    }\n\n    const animId = textWidget.setProperty(prop.ANIM, {\n      anim_steps: [anim_step1, anim_step2],\n      anim_fps: 25\n    })\n\n    textWidget.setProperty(prop.ANIM_STATUS, {\n      anim_id: animId,\n      anim_status: anim_status.PAUSE\n    })\n\n    textWidget.setProperty(prop.ANIM_STATUS, {\n      anim_id: animId,\n      anim_status: anim_status.RESUME\n    })\n\n    const currentStatus = textWidget.getProperty(prop.ANIM_STATUS, animId)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Current Heart Rate Change Callback\nDESCRIPTION: Method to start continuous heart rate measurement and register callback for measurement updates.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Getting Date in TypeScript\nDESCRIPTION: TypeScript method definition for getting current day of month (1-31)\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDate(): number\n```\n\n----------------------------------------\n\nTITLE: IMG_PROGRESS Widget Implementation Example\nDESCRIPTION: A complete example of implementing an IMG_PROGRESS widget with three images at different positions. The level is set to 2, which means the second image in the array will be displayed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xArray = [100, 200, 300]\nconst yArray = [100, 200, 300]\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, {\n  x: xArray,\n  y: yArray,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Notification in ZeppOS\nDESCRIPTION: Example code showing how to import and use the showToast function from the @zos/ui module to display a multi-line toast notification with line feeds.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/showToast.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from '@zos/ui'\n\nPage({\n  build() {\n    showToast({\n      text: 'Hello\\nZepp OS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_ANIM Widget in ZeppOS\nDESCRIPTION: Creates an IMG_ANIM widget instance which displays frame-by-frame animations by sequentially showing images. This snippet demonstrates the basic syntax for creating the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgAnim = hmUI.createWidget(hmUI.widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for getAppWidgetSize in ZeppOS\nDESCRIPTION: TypeScript type definition for the getAppWidgetSize function, which returns an object containing the default widget size properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/getAppWidgetSize.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Implementing PAGE_INDICATOR with Swiper Scroll Mode in ZeppOS\nDESCRIPTION: Complete example demonstrating how to set up a page with Swiper scroll mode and add a PAGE_INDICATOR widget to show the current page position among multiple pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/PAGE_INDICATOR.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align } from '@zos/ui'\nimport { setScrollMode, SCROLL_MODE_SWIPER_HORIZONTAL } from '@zos/page'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const itemCount = 10\n    const pageSize = px(480)\n\n    setScrollMode({\n      mode: SCROLL_MODE_SWIPER_HORIZONTAL,\n      options: {\n        height: pageSize,\n        count: itemCount\n      }\n    })\n\n    const pageIndicator = createWidget(widget.PAGE_INDICATOR, {\n      x: 0,\n      y: px(470),\n      w: px(480),\n      h: px(10),\n      align_h: align.CENTER_H,\n      h_space: 8,\n      select_src: 'images/test/select/select.png',\n      unselect_src: 'images/test/select/unselect.png'\n    })\n\n    for (let i = 0; i < itemCount; i++) {\n      let xPos = 0\n      let yPos = px(400) + pageSize * i\n      createWidget(widget.TEXT, {\n        x: xPos,\n        y: yPos,\n        w: px(480),\n        h: px(120),\n        text_size: 35,\n        color: 0xffffff,\n        align_h: align.CENTER_H,\n        text: `PAGE ${i}`\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getDateFormat Function in TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature for getDateFormat which returns a Result type number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getDateFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDateFormat(): Result\n```\n\n----------------------------------------\n\nTITLE: Launching Simulator with Sudo Privileges on macOS\nDESCRIPTION: Command to launch the simulator with sudo privileges on macOS. This is required because the simulator communication depends on the virtual network interface card tun/tap.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/simulator/setup.md#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd /Applications/simulator.app/Contents/MacOS && sudo -s ./simulator\n```\n\n----------------------------------------\n\nTITLE: Navigating to a New Page Using hmApp.gotoPage in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmApp.gotoPage method to navigate to a new page (index2.js) while passing a parameter. The 'url' property specifies the target page, and the 'param' property passes data to the onInit lifecycle of the Page constructor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/gotoPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmApp.gotoPage({ url: 'pages/index2', param: '...' })\n```\n\n----------------------------------------\n\nTITLE: App onCreate Function Signature\nDESCRIPTION: Function signature for app initialization event that receives parameters from launchApp. Used to initialize global app data before loading any pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/life-cycle.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(params: string) => void\n```\n\n----------------------------------------\n\nTITLE: Displaying a Toast Notification in Zepp OS JavaScript\nDESCRIPTION: This example demonstrates how to use the hmUI.showToast() function within a Zepp OS page. It shows a toast notification with a multi-line message using the '\\n' character for line breaks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/showToast.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    hmUI.showToast({\n      text: 'Hello\\nZepp OS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating STROKE_RECT Widget - Complete Example\nDESCRIPTION: Complete example showing how to create and configure a STROKE_RECT widget with radius, line width, color properties and click event handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const strokeRect = createWidget(widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating PAGE_INDICATOR Widget in ZeppOS\nDESCRIPTION: Code snippet showing how to import and create a PAGE_INDICATOR widget with basic parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/PAGE_INDICATOR.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst pageIndicator = createWidget(widget.PAGE_INDICATOR, Param)\n```\n\n----------------------------------------\n\nTITLE: STROKE_RECT Implementation Example - JavaScript\nDESCRIPTION: Complete example showing how to create a stroked rectangle with specific styling properties and add click event handling. Demonstrates setting position, dimensions, radius, line width, and color properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getProfile Function Type in TypeScript\nDESCRIPTION: Type definition for the getProfile function that returns user profile information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/user/getProfile.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getProfile(): Result\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Widget - Complete Example\nDESCRIPTION: Complete example demonstrating how to create a circle widget with specific properties including center coordinates, radius, color, and transparency. The example shows implementation within a Page component's build method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const circle = hmUI.createWidget(hmUI.widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Processing Weather Data in ZeppOS (JavaScript)\nDESCRIPTION: This code example shows how to retrieve forecast weather data, including city name, temperature, and tide information. It demonstrates iterating through forecast and tide data arrays to access specific information like temperature ranges and sunrise/sunset times.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating Sensors\nconst weatherData = weather.getForecastWeather()\n\nconsole.log(weatherData.cityName)\n\nconst forecastData = weatherData.forecastData\nfor (let i = 0; i < forecastData.count; i++) {\n  const element = forecastData.data[i] // i:0 means the day\n  console.log(element.index)\n  console.log(element.high)\n  console.log(element.low)\n}\n\nconst tideData = weatherData.tideData\nfor (let i = 0; i < tideData.count; i++) {\n  const element = tideData.data[i] // i:0 means the day\n  console.log(element.sunrise.hour + element.sunrise.minute)\n  console.log(element.sunset.hour + element.sunset.minute)\n}\n```\n\n----------------------------------------\n\nTITLE: GetLanguage Function Type Definition\nDESCRIPTION: TypeScript type definition for the getLanguage function that returns a numeric language code\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getLanguage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getLanguage(): Result\n```\n\n----------------------------------------\n\nTITLE: Managing Widget Visibility Without GROUP\nDESCRIPTION: Example showing individual visibility control of multiple widgets without using GROUP widget. This approach requires setting visibility property separately for each widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/widget-group.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst img_icon_widget = hmUI.createWidget(hmUI.widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = hmUI.createWidget(hmUI.widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = hmUI.createWidget(hmUI.widget.TEXT, {\n  // ...\n})\n\nimg_icon_widget.setProperty(hmUI.prop.VISIBLE, false)\nimg_arrow_widget.setProperty(hmUI.prop.VISIBLE, false)\ntext_name_widget.setProperty(hmUI.prop.VISIBLE, false)\n```\n\n----------------------------------------\n\nTITLE: Creating One-time and Periodic Timers in ZeppOS\nDESCRIPTION: JavaScript example demonstrating how to create both a one-time timer and a periodic timer using the createSysTimer function. The one-time timer executes after 5 seconds, while the periodic timer runs every 10 seconds.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/timer/createSysTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSysTimer } from '@zos/timer'\n\n// Create a non-periodic timer that executes after 5 seconds\nconst timerId = createSysTimer(\n  false,\n  5000,\n  (param) => {\n    console.log('timer callback with param:', param)\n  },\n  'customParam'\n)\n\n// Create a periodic timer that executes every 10 seconds\nconst intervalId = createSysTimer(true, 10000, () => {\n  console.log('interval timer callback')\n})\n```\n\n----------------------------------------\n\nTITLE: Complete FatBurning Sensor Usage Example\nDESCRIPTION: A comprehensive example showing how to initialize the FatBurning sensor, retrieve current and target values, and register/unregister event listeners. The example demonstrates the proper workflow for using the FatBurning sensor in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FatBurning } from '@zos/sensor'\n\nconst fatBurning = new FatBurning()\nconst current = fatBurning.getCurrent()\nconst target = fatBurning.getTarget()\nconst callback = () => {\n  console.log(fatBurning.getCurrent())\n}\n\nfatBurning.onChange(callback)\n\n// When not needed for use\nfatBurning.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a File using hmFS.write() in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmFS.write() function to write data to a file. It creates a buffer, opens a file, and writes the buffer contents to the file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/write.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const test_buf = new Uint8Array(10)\n    const test_buf2 = new Uint8Array(test_buf.length)\n\n    const file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n    hmFS.write(file, test_buf.buffer, 0, test_buf.length)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Reading File Data Example in JavaScript\nDESCRIPTION: Example showing how to read data from a file using hmFS.read(). Creates buffers and opens a file in read-write mode before reading its contents.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/read.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst test_buf = new Uint8Array(10)\nconst test_buf2 = new Uint8Array(test_buf.length)\n\nconst file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\nhmFS.read(file, test_buf2.buffer, 0, test_buf2.length)\n```\n\n----------------------------------------\n\nTITLE: Implementing an IMG_PROGRESS Widget with Image Arrays\nDESCRIPTION: Complete example of implementing an IMG_PROGRESS widget with arrays for x and y coordinates, image filenames, and setting the current display level to the second image.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xArray = [100, 200, 300]\nconst yArray = [100, 200, 300]\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, {\n  x: xArray,\n  y: yArray,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: Using openSync to Open a File in ZeppOS\nDESCRIPTION: Example showing how to import and use the openSync function along with the O_RDONLY constant to open a file in read-only mode. This code opens a file named 'test.txt' in the Mini Program's /data directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/openSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Rotated IMG Widget in ZeppOS\nDESCRIPTION: Demonstrates creating an IMG widget with advanced properties such as positioning, rotation, and center point for rotation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/IMG.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img_hour = createWidget(widget.IMG)\n    img_hour.setProperty(prop.MORE, {\n      x: 0,\n      y: 0,\n      w: 454,\n      h: 454,\n      pos_x: 454 / 2 - 27,\n      pos_y: 50 + 50,\n      center_x: 454 / 2,\n      center_y: 454 / 2,\n      src: 'hour.png',\n      angle: 30\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PICK_DATE Widget with Event Handling in ZeppOS\nDESCRIPTION: A complete example showing how to create a date picker, set its properties, and retrieve the selected date values when a confirm button is clicked. Demonstrates property configuration and event handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/PICK_DATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const pick_date_date = hmUI.createWidget(hmUI.widget.PICK_DATE)\n    pick_date_date.setProperty(hmUI.prop.MORE, {\n      w: 480,\n      x: 20,\n      y: 120,\n      startYear: 2000,\n      endYear: 2030,\n      initYear: 2021,\n      initMonth: 2,\n      initDay: 3\n    })\n\n    const confirm = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 0,\n      y: 400,\n      w: 480,\n      h: 80,\n      text_size: 42,\n      color: 0xffffff,\n      text: 'confirm'\n    })\n\n    confirm.addEventListener(hmUI.event.CLICK_UP, (info) => {\n      const dateObj = pick_date_date.getProperty(hmUI.prop.MORE, {})\n      const { year, month, day } = dateObj\n\n      console.log('year', year)\n      console.log('month', month)\n      console.log('day', day)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Reading File Data Example in JavaScript\nDESCRIPTION: Example showing how to read data from a file using hmFS.read(). Creates buffers and opens a file in read-write mode before reading its contents.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/read.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst test_buf = new Uint8Array(10)\nconst test_buf2 = new Uint8Array(test_buf.length)\n\nconst file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\nhmFS.read(file, test_buf2.buffer, 0, test_buf2.length)\n```\n\n----------------------------------------\n\nTITLE: Function Signature for openSync in ZeppOS\nDESCRIPTION: TypeScript type definition for the openSync function that opens files synchronously in the /data directory of a Mini Program. The function accepts an option object with path, flag, and optional parameters and returns a numeric file descriptor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/openSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction openSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetBool to Store a Boolean Value in JavaScript\nDESCRIPTION: Example of how to use the hmFS.SysProSetBool method to store a temporary boolean value with a specified key. The stored value will be cleared when the system reboots.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProSetBool.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nhmFS.SysProSetBool('test_key', true)\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Data and Navigating Back in ZeppOS\nDESCRIPTION: Shows how to modify the global data in pageB.js and then navigate back to the previous page using the back API, allowing the previous page to access the updated data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { back } from '@zos/router'\n\n// ...\ngetApp()._options.globalData.type = 'classic'\n\nback()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Screen Brightness - JavaScript\nDESCRIPTION: Example showing how to get the current screen brightness level, which returns a number between 0 and 100.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.getBrightness()\n```\n\n----------------------------------------\n\nTITLE: Creating CYCLE_LIST Widget in Zepp OS\nDESCRIPTION: Basic example of importing and creating a CYCLE_LIST widget from the UI module. Shows the minimal code needed to instantiate the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst cycleList = createWidget(widget.CYCLE_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Refreshing ScrollList Data in ZeppOS\nDESCRIPTION: Shows how to update an existing ScrollList widget with new data using setProperty. Demonstrates configuring data types, updating the data array, and maintaining scroll position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst scrollList = hmUI.createWidget(hmUI.widget.SCROLL_LIST, Param)\nscrollList.setProperty(hmUI.prop.UPDATE_DATA, {\n  //Reset configuration information\n  data_type_config: [\n    {\n      start: 0,\n      end: 2,\n      type_id: 2\n    }\n  ],\n  //Configuration the length of information\n  data_type_config_count: 1,\n  //New data\n  data_array: [\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'Name', age: '12', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex1', age: '13', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex2', age: '13', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex3', age: '12', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'name666', age: '13', like: 'type2' }\n  ],\n  //The length of the data\n  data_count: 5,\n  //Refresh the data and stay on the current page. If it is not set or set to 0, it will return to the top of the list.\n  on_page: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a FILL_RECT Widget with Event Handling in ZeppOS\nDESCRIPTION: Complete example showing how to create a filled rectangle widget with rounded corners and add click event handling to change its position. The example demonstrates both widget creation and property modification.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const fill_rect = hmUI.createWidget(hmUI.widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(hmUI.prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete SLIDE_SWITCH Implementation Example\nDESCRIPTION: Full example showing how to create and configure a SLIDE_SWITCH widget with properties like background images, position coordinates, and a state change callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const slide_switch = createWidget(widget.SLIDE_SWITCH, {\n      x: 200,\n      y: 200,\n      w: 96,\n      h: 64,\n      select_bg: 'switch_on.png',\n      un_select_bg: 'switch_off.png',\n      slide_src: 'radio_select.png',\n      slide_select_x: 40,\n      slide_un_select_x: 8,\n      checked: true,\n      checked_change_func: (slideSwitch, checked) => {\n        console.log('checked', checked)\n      }\n    })\n\n    console.log('slide checked', slide_switch.getProperty(prop.CHECKED))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Full IMG_PROGRESS Implementation Example\nDESCRIPTION: Complete example showing how to create an image progress widget with multiple images positioned at different coordinates. Demonstrates setting up coordinate arrays, image array, and progress level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xArray = [100, 200, 300]\nconst yArray = [100, 200, 300]\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, {\n  x: xArray,\n  y: yArray,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level为2 会依次绘制第一张图 第二张图\n})\n```\n\n----------------------------------------\n\nTITLE: Using openInspector for Layout Debugging in ZeppOS\nDESCRIPTION: Example of using the openInspector function to draw boundary rectangles for all widgets participating in layout. This code should be placed after the build() lifecycle in a ZeppOS Page component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/openInspector.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openInspector } from '@zos/ui'\n\nPage({\n  build() {\n    // Create layout...\n\n    // Draw boundary rectangles for all widgets participating in layout\n    setTimeout(() => {\n      openInspector().draw({\n        line_color: 0xff0000, // Red\n        line_width: 1, // Line width of 1\n        border_mode: 1 // Draw border inward\n      })\n    }, 100)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Refreshing ScrollList Data in ZeppOS\nDESCRIPTION: Shows how to update an existing ScrollList widget with new data using setProperty. Demonstrates configuring data types, updating the data array, and maintaining scroll position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst scrollList = hmUI.createWidget(hmUI.widget.SCROLL_LIST, Param)\nscrollList.setProperty(hmUI.prop.UPDATE_DATA, {\n  //Reset configuration information\n  data_type_config: [\n    {\n      start: 0,\n      end: 2,\n      type_id: 2\n    }\n  ],\n  //Configuration the length of information\n  data_type_config_count: 1,\n  //New data\n  data_array: [\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'Name', age: '12', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex1', age: '13', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex2', age: '13', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex3', age: '12', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'name666', age: '13', like: 'type2' }\n  ],\n  //The length of the data\n  data_count: 5,\n  //Refresh the data and stay on the current page. If it is not set or set to 0, it will return to the top of the list.\n  on_page: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Typescript Function Definition for getTimeFormat\nDESCRIPTION: Type definition for the getTimeFormat function that returns a number representing the system time format.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getTimeFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTimeFormat(): Result\n```\n\n----------------------------------------\n\nTITLE: Get Compass Direction - TypeScript\nDESCRIPTION: TypeScript method signature for getting the current compass direction as a string.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDirection(): string\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Language Type Definition in TypeScript\nDESCRIPTION: Type definition for the getLanguage function which returns the current system language setting as a numeric code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getLanguage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction getLanguage(): Result\n```\n\n----------------------------------------\n\nTITLE: Registering AppSettingsPage in JavaScript\nDESCRIPTION: Basic structure for registering a Settings App using the AppSettingsPage constructor. It demonstrates the build lifecycle and how to return a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/app-settings/register.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return RenderFunc\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Battery Sensor in ZeppOS JavaScript\nDESCRIPTION: Creates a battery sensor using hmSensor.createSensor() and displays the current battery level. This is the initial step for accessing battery information in ZeppOS applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n\nconsole.log('The current battery level is ' + battery.current + '\\r\\n')\n```\n\n----------------------------------------\n\nTITLE: Getting Last Heart Rate Measurement in TypeScript\nDESCRIPTION: This snippet shows how to retrieve the most recent heart rate measurement. The device's automatic heart rate monitoring updates this value, and it's also updated when continuous measurement is started by registering onCurrentChange.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetLast(): number\n```\n\n----------------------------------------\n\nTITLE: Registering Gyroscope Data Change Listener in ZeppOS\nDESCRIPTION: Method to register a callback function that will be triggered whenever gyroscope data changes. This allows for real-time monitoring and response to device rotation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a File Example in JavaScript\nDESCRIPTION: Example showing how to use the writeSync function to write an ArrayBuffer to a file. The example demonstrates opening a file with openSync, creating a buffer, and writing it to the file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/writeSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { openSync, writeSync, O_RDWR, O_CREAT } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDWR | O_CREAT,\n})\n\nconst buffer = new ArrayBuffer(4)\nconst result = writeSync({\n  fd,\n  buffer,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a STROKE_RECT Widget with Event Handling in ZeppOS\nDESCRIPTION: Complete example showing how to create a stroked rectangle, set properties like position, size, color, and rounded corners, and handle click events to update its position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Timer Creation and Management Example\nDESCRIPTION: JavaScript example showing how to create a timer with a 500ms initial delay and 1000ms repeat interval, including callback function implementation and timer cleanup.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/timer/createTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Create timer, delay 500ms to trigger, then execute every 1000ms.\nconst timer1 = timer.createTimer(\n  500,\n  1000,\n  function (option) {\n    //callback\n    console.log('timer callback')\n    console.log(option.hour)\n  },\n  { hour: 0, minute: 15, second: 30 }\n)\n\n//Stop timer1\ntimer.stopTimer(timer1)\n```\n\n----------------------------------------\n\nTITLE: Registering Gesture Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to register a gesture event listener using hmApp.registerGestureEvent(). The callback function handles different gesture events (UP, DOWN, LEFT, RIGHT) and logs the corresponding message. It returns false to not skip the default behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/gestureEvent/registerGestureEvent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nhmApp.registerGestureEvent(function (event) {\n  let msg = 'none'\n  switch (event) {\n    case hmApp.gesture.UP:\n      msg = 'up'\n      break\n    case hmApp.gesture.DOWN:\n      msg = 'down'\n      break\n    case hmApp.gesture.LEFT:\n      msg = 'left'\n      break\n    case hmApp.gesture.RIGHT:\n      msg = 'right'\n      break\n    default:\n      break\n  }\n  console.log(`receive gesture event ${msg}`)\n\n  //Not skipping default behavior\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Creating GROUP Widget with Sub-widgets in ZeppOS\nDESCRIPTION: Demonstrates how to create a GROUP widget instance and add sub-widgets to it. The group widget allows unified control of multiple widgets and requires x, y coordinates and dimensions. Sub-widgets must use relative positioning.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst group = createWidget(widget.GROUP, Param)\n\n// Creating UI sub-widgets\ngroup.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: Defining setScrollLock Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setScrollLock function that takes an Option parameter with a lock property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/setScrollLock.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setScrollLock(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Creating a Heart Rate Sensor in ZeppOS\nDESCRIPTION: Creates a heart rate sensor instance and accesses the last recorded heart rate measurement. This is the basic setup required to work with heart rate data in ZeppOS applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst heart = hmSensor.createSensor(hmSensor.id.HEART)\n\nconsole.log(heart.last)\n```\n\n----------------------------------------\n\nTITLE: Using clearInterval Function in JavaScript\nDESCRIPTION: Example demonstrating how to set an interval timer and then cancel it using clearInterval. Shows a typical usage pattern where a timer is created to log a message every second and then cleared.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/clearInterval.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst intervalID = setInterval(() => {\n  console.log('Hello Zepp OS')\n}, 1000)\n\nclearInterval(intervalID)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a File with writeSync in ZeppOS\nDESCRIPTION: Example of using the writeSync function to write an ArrayBuffer to a file. It demonstrates opening a file with the necessary flags and writing data to it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/writeSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { openSync, writeSync, O_RDWR, O_CREAT } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDWR | O_CREAT,\n})\n\nconst buffer = new ArrayBuffer(4)\nconst result = writeSync({\n  fd,\n  buffer,\n})\n```\n\n----------------------------------------\n\nTITLE: CYCLE_LIST Item Click Callback Type Definition\nDESCRIPTION: TypeScript type definition for the item click callback function. The function receives the cycleList instance and clicked item index as parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(cycleList: CycleList, index: number) => void\n```\n\n----------------------------------------\n\nTITLE: Opening a File with Read-Write Access in ZeppOS\nDESCRIPTION: Example of using hmFS.open to open a file with read-write access, creating it if it doesn't exist.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/open.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.write Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the hmFS.write function. It specifies the input parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/write.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, buffer: ArrayBuffer, position: number, length: number) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Current Screen Type Example\nDESCRIPTION: JavaScript example demonstrating how to retrieve the current screen type using hmSetting.getScreenType(). The method returns a number that corresponds to different screen contexts like APP, WATCHFACE, SETTINGS, or AOD.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getScreenType.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst screenType = hmSetting.getScreenType()\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_ANIM Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG_ANIM widget using the createWidget function from the @zos/ui module. It sets up the basic structure for creating an animated image widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst imgAnim = createWidget(widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Basic setTimeout Usage Example\nDESCRIPTION: Demonstrates how to use setTimeout to log a message after a 1-second delay. Shows the basic implementation pattern with a callback function and delay parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/setTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeout(() => {\n  console.log('Hello Zepp OS')\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Registering Click Event Listener in ZeppOS UI\nDESCRIPTION: This example demonstrates how to create a widget, register a click event listener, and log the x-coordinate of the click. It uses the @zos/ui module to create and manipulate UI elements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/addEventListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\n\nimg_bkg.addEventListener(event.CLICK_DOWN, function (info) {\n  //Registering event listeners.\n  console.log(info.x)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_PROGRESS Widget with Sample Data\nDESCRIPTION: This example shows how to create an IMG_PROGRESS widget with specific x and y coordinates, image array, and progress level. It demonstrates setting up the widget parameters and creating the widget instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xArray = [100, 200, 300]\nconst yArray = [100, 200, 300]\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, {\n  x: xArray,\n  y: yArray,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SCROLL_LIST Widget in ZeppOS\nDESCRIPTION: Demonstrates how to import and create a SCROLL_LIST widget using the createWidget function from the @zos/ui module. The widget is initialized with a Param object containing configuration options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst scrollList = createWidget(widget.SCROLL_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Registering Click Event Listener in ZeppOS UI\nDESCRIPTION: This example demonstrates how to create a widget, register a click event listener, and log the x-coordinate of the click. It uses the @zos/ui module to create and manipulate UI elements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/addEventListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\n\nimg_bkg.addEventListener(event.CLICK_DOWN, function (info) {\n  //Registering event listeners.\n  console.log(info.x)\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Lunar Festival in TypeScript\nDESCRIPTION: Demonstrates how to get the current Chinese lunar calendar festival. Returns 'INVALID' if there is no festival. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarFestival(): string\n```\n\n----------------------------------------\n\nTITLE: Configuring SecondaryWidget with i18n Support in app.json\nDESCRIPTION: JSON configuration for adding a SecondaryWidget to a ZeppOS Mini Program. This snippet shows how to define the widget path, runtime type, and implement name internationalization for multiple languages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/secondary-widget.md#2025-04-07_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"secondary-widget\": {\n  \"widgets\": [\n    {\n      \"path\": \"secondary-widget/index\",\n      \"runtime\": {\n        \"type\": \"js\"\n      },\n      \"name\": \"App Name\",\n      \"i18n\": {\n        \"en-US\": {\n          \"name\": \"App Name\"\n        },\n        \"zh-CN\": {\n          \"name\": \"应用名称\"\n        }\n      }\n    }\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Widget Properties in JavaScript\nDESCRIPTION: Example of manually maintaining a widget property (button Y position) in the page state when direct property retrieval is not supported. Demonstrates creating a button widget and displaying its Y position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  state: {\n    buttonY: 0\n  },\n  build() {\n    this.state.buttonY = 300\n\n    createWidget(widget.BUTTON, {\n      y: this.state.buttonY,\n      // ...\n    })\n\n    showToast({\n      text: this.state.buttonY\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Widget Properties in JavaScript\nDESCRIPTION: Example of manually maintaining a widget property (button Y position) in the page state when direct property retrieval is not supported. Demonstrates creating a button widget and displaying its Y position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  state: {\n    buttonY: 0\n  },\n  build() {\n    this.state.buttonY = 300\n\n    createWidget(widget.BUTTON, {\n      y: this.state.buttonY,\n      // ...\n    })\n\n    showToast({\n      text: this.state.buttonY\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using resetDropWristScreenOff Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the resetDropWristScreenOff function in conjunction with pauseDropWristScreenOff. It pauses the drop wrist screen-off behavior indefinitely, then restores it after 3 seconds.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/display/resetDropWristScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pauseDropWristScreenOff, resetDropWristScreenOff } from '@zos/display'\n\npauseDropWristScreenOff({\n  duration: 0,\n})\n\nsetTimeout(() => {\n  resetDropWristScreenOff()\n}, 3000)\n```\n\n----------------------------------------\n\nTITLE: Using SystemSounds API Example\nDESCRIPTION: Complete example showing how to import the SystemSounds class, create an instance, check if sounds are enabled, and play an alarm sound.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SystemSounds } from '@zos/sensor'\n\nconst systemSounds = new SystemSounds()\nconst alarmType = systemSounds.getSourceType().ALARM\n\nif (systemSounds.getEnabled()) {\n  systemSounds.start(alarmType)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining clearTimeout Function Type - TypeScript\nDESCRIPTION: TypeScript type definition for the clearTimeout function that cancels a timer. Takes a TimeoutID parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/clearTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clearTimeout(timeoutID: TimeoutID): void\n```\n\n----------------------------------------\n\nTITLE: Stopping Real-time Resting Heart Rate Measurement in TypeScript\nDESCRIPTION: Cancels continuous resting heart rate measurement and removes the callback function listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\noffRestingChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Complete Wear Sensor Usage Example in JavaScript\nDESCRIPTION: A comprehensive example showing how to import the Wear sensor, initialize it, get the current status, register a change event callback, and later remove the callback when no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Wear } from '@zos/sensor'\n\nconst wear = new Wear()\nconst status = wear.getStatus()\nconst callback = () => {\n  console.log(wear.getStatus())\n}\n\nwear.onChange(callback)\n\n// When not needed for use\nwear.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Creating SPO2 Sensor Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an SPO2 sensor instance and access its current value and timestamp.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spo2 = hmSensor.createSensor(hmSensor.id.SPO2)\n\nconsole.log(spo2.current)\nconsole.log(spo2.time)\n```\n\n----------------------------------------\n\nTITLE: Complete Fat Burning Sensor Implementation Example\nDESCRIPTION: Full example showing sensor creation, UI rendering, and event handling implementation with a TextByLine class for displaying sensor data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const fatburn = hmSensor.createSensor(hmSensor.id.FAT_BURRING)\n\n    const currentText = new TextByLine({\n      text: `current:${fatburn.current};target:${fatburn.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${fatburn.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = fatburn.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const fatburnChangeListener = () => {\n      fatburn.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: fatburnChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using getProfile API in Zepp OS JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the getProfile API to retrieve user age information. It requires the 'data:user.info' permission.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/framework/device/permission.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getProfile } from '@zos/user'\n\nPage({\n  build() {\n    const { age } = getProfile()\n    console.log(age)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Image Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Image component, showing it takes Props as an argument and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/image.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining writeSync Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the writeSync function. It specifies the input parameter type (Option) and the return type (Result).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/writeSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction writeSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining setWakeUpRelaunch Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for setWakeUpRelaunch, including the Option type parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setWakeUpRelaunch(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_ANIM Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating an IMG_ANIM widget instance using hmUI.createWidget()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgAnim = hmUI.createWidget(hmUI.widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Establishing Bluetooth Connection in Device App\nDESCRIPTION: Creates a MessageBuilder instance in the App's onCreate lifecycle method, establishes a connection, and properly disconnects in the onDestroy method to prevent memory leaks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport './shared/device-polyfill'\nimport { MessageBuilder } from './shared/message'\nimport { getPackageInfo } from '@zos/app'\nimport * as ble from '@zos/ble'\n\nApp({\n  globalData: {\n    messageBuilder: null\n  },\n  onCreate(options) {\n    console.log('app on create invoke')\n    // establish connection\n    const { appId } = getPackageInfo()\n    const messageBuilder = new MessageBuilder({ appId, appDevicePort: 20, appSidePort: 0, ble })\n    this.globalData.messageBuilder = messageBuilder\n    messageBuilder.connect()\n  },\n  onDestroy(options) {\n    console.log('app on destroy invoke')\n    messageBuilder.disConnect()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Sleep Sensor Usage Example\nDESCRIPTION: JavaScript example demonstrating how to use the Sleep sensor API to get sleep information, constants, and analyze sleep stages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sleep } from '@zos/sensor'\n\nconst sleep = new Sleep()\nconst { score } = sleep.getInfo()\nconst sleepStageConstants = sleep.getStageConstantObj()\nconst stage = sleep.getStage()\n\nstage.forEach((i) => {\n  const { model } = i\n\n  if (model === sleepStageConstants.WAKE_STAGE) {\n    console.log('This stage is awake stage')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: 创建 IMG_TIME 数字时间图片组件\nDESCRIPTION: 此代码展示了如何使用 hmUI.createWidget 方法创建一个 IMG_TIME 组件。它包括时、分、秒的显示配置，以及 AM/PM 指示器的设置。代码中详细说明了各种属性的用途，如补零、起始坐标、图片数组、间距和对齐方式等。\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/IMG_TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//数组字体 图片数量必须是10个 顺序为0-9\nconst timeArray = []\nlet timeText = hmUI.createWidget(hmUI.widget.IMG_TIME, {\n  hour_zero: 1, // 是否补零\n  hour_startX: 205,\n  hour_startY: 184,\n  hour_array: timeArray,\n  hour_space: 8, //每个数组间的间隔\n  //单位\n  hour_unit_sc: rootPath + 'icon/colon.png',\n  hour_unit_tc: rootPath + 'icon/colon.png',\n  hour_unit_en: rootPath + 'icon/colon.png',\n  hour_align: hmUI.align.LEFT,\n  //minute second  替换hour\n  // ...\n  minute_follow: 1, // 是否跟随\n  second_follow: 1, // 是否跟随\n  am_x: 200,\n  am_y: 100,\n  am_sc_path: 'am.png',\n  am_en_path: 'am_en.png'\n  //pm 同上 前缀由 am 改为 pm\n})\n```\n\n----------------------------------------\n\nTITLE: Using writeFileSync to Write ArrayBuffer in JavaScript\nDESCRIPTION: Example of using writeFileSync to write an ArrayBuffer to a file named 'test.txt' in the Mini Program's /data directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writeFileSync } from '@zos/fs'\n\nconst buffer = new ArrayBuffer(4)\nwriteFileSync({\n  path: 'test.txt',\n  data: buffer,\n})\n```\n\n----------------------------------------\n\nTITLE: Using showToast Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the showToast function in a ZeppOS application. It imports the function from the @zos/interaction module and calls it with a content parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/showToast.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from '@zos/interaction'\n\nshowToast({\n  content: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Festival in ZeppOS (Chinese Language Only)\nDESCRIPTION: Demonstrates how to retrieve the current festival or holiday using the getShowFestival method. This API only works when the watch language is set to Chinese and returns holidays based on priority.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst current_festival = time.getShowFestival()\n```\n\n----------------------------------------\n\nTITLE: Usage Example - Drop Wrist Screen Control\nDESCRIPTION: Example showing how to temporarily pause drop wrist screen off behavior and then reset it after a delay. Demonstrates the combined usage of pauseDropWristScreenOff and resetDropWristScreenOff functions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/resetDropWristScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pauseDropWristScreenOff, resetDropWristScreenOff } from '@zos/display'\n\npauseDropWristScreenOff({\n  duration: 0,\n})\n\nsetTimeout(() => {\n  resetDropWristScreenOff()\n}, 3000)\n```\n\n----------------------------------------\n\nTITLE: Defining writeSync Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the writeSync function. It specifies the input parameter type (Option) and the return type (Result).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/writeSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction writeSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Using getDeviceInfo Function in JavaScript\nDESCRIPTION: Example demonstrating how to import and use getDeviceInfo to retrieve device screen information and check screen shape.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/device/getDeviceInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDeviceInfo, SCREEN_SHAPE_SQUARE } from '@zos/device'\n\nconst { width, screenShape } = getDeviceInfo()\nconsole.log(width)\n\nif (screenShape === SCREEN_SHAPE_SQUARE) {\n  console.log('Square Screen')\n}\n```\n\n----------------------------------------\n\nTITLE: Complete FILL_RECT Widget Implementation with Event Handling\nDESCRIPTION: This example demonstrates creating a Fill Rectangle widget with rounded corners and handling click events to change its position. It shows how to set initial properties and modify them with setProperty method when the user interacts with the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/FILL_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const fill_rect = createWidget(widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ARC Widget with Event Listener in ZeppOS\nDESCRIPTION: This example demonstrates creating an ARC widget, setting its properties, and adding a click event listener. The event listener changes the y-coordinate of the widget when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/ARC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const arc = hmUI.createWidget(hmUI.widget.ARC, {\n      x: 100,\n      y: 100,\n      w: 250,\n      h: 250,\n      start_angle: -90,\n      end_angle: 90,\n      color: 0xfc6950,\n      line_width: 20\n    })\n\n    arc.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      arc.setProperty(hmUI.prop.MORE, {\n        y: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Auto-Brightness with hmSetting API in JavaScript\nDESCRIPTION: Example of using the hmSetting.setScreenAutoBright method to enable automatic brightness adjustment. The method returns a numeric result where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/setScreenAutoBright.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setScreenAutoBright(true)\n```\n\n----------------------------------------\n\nTITLE: Creating a PAGE_INDICATOR Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a PAGE_INDICATOR widget in ZeppOS. The PAGE_INDICATOR is used to show which page is currently active when using swiper scroll mode.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PAGE_INDICATOR.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst pageIndicator = createWidget(widget.PAGE_INDICATOR, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating an Image-based Time Display with hmUI.widget.IMG_TIME in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a time widget using image arrays in ZeppOS. It configures properties like zero-padding, positioning, spacing between digits, and AM/PM indicators. The widget displays time using image arrays where each digit (0-9) is represented by a separate image.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// The font of array. The number of images must be 10 in order 0-9.\nconst timeArray = []\nlet timeText = hmUI.createWidget(hmUI.widget.IMG_TIME, {\n  hour_zero: 1, // Whether to make up zero.\n  hour_startX: 205,\n  hour_startY: 184,\n  hour_array: timeArray,\n  hour_space: 8, // The interval between each array.\n  // Units\n  hour_unit_sc: rootPath + 'icon/colon.png',\n  hour_unit_tc: rootPath + 'icon/colon.png',\n  hour_unit_en: rootPath + 'icon/colon.png',\n  hour_align: hmUI.align.LEFT,\n  // minute second Replaces hour.\n  minute_follow: 1, // Whether to follow.\n  second_follow: 1, // Whether to follow.\n  // omitted as above\n  am_x: 200,\n  am_x: 200, am_y: 100,\n  am_sc_path: 'am.png',\n  am_en_path: 'am_en.png'\n  // pm as above. Prefix changed from am to pm.\n})\n```\n\n----------------------------------------\n\nTITLE: AppWidget Implementation Example in JavaScript\nDESCRIPTION: Example of implementing an AppWidget with state management and lifecycle methods in JavaScript. Shows how to initialize state and use lifecycle hooks like onInit and build.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/AppWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAppWidget({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating FILL_RECT Widget in ZeppOS JavaScript\nDESCRIPTION: This snippet demonstrates how to create a FILL_RECT widget using hmUI.createWidget(). It sets various properties like position, size, color, and radius. It also shows how to add a click event listener to modify the widget's properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fill_rect = hmUI.createWidget(hmUI.widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(hmUI.prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing VIEW_CONTAINER with Multiple Widgets in Zepp OS\nDESCRIPTION: A complete example showing how to create multiple VIEW_CONTAINER widgets, add child widgets, and implement scrolling functionality. It also demonstrates the use of z-index for layering and custom color generation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/VIEW_CONTAINER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst getRandomColor = () => {\n  const randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\n  function getRandomFromSection(low, high) {\n    const RANDOM = Math.random()\n    const RANGE = high - low + 1\n\n    return Math.floor(RANDOM * RANGE) + low\n  }\n\n  const colorStr = Array.from({ length: 6 }).reduce((prev, curr) => {\n    const random = getRandomFromSection(0, 15)\n    return prev + randomArr[random]\n  }, '0x')\n\n  return Number(colorStr)\n}\n\nPage({\n  build() {\n    createWidget(widget.TEXT, {\n      x: px(96),\n      y: px(40),\n      w: px(288),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(36),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'VIEW_CONTAINER'\n    })\n\n    const viewContainer = createWidget(widget.VIEW_CONTAINER, {\n      x: px(0),\n      y: px(86),\n      w: px(480),\n      h: px(400)\n    })\n\n    Array.from({ length: 5 }).forEach((_, index) => {\n      viewContainer.createWidget(widget.FILL_RECT, {\n        x: 0,\n        y: px(index * 400),\n        w: px(480),\n        h: px(400),\n        color: getRandomColor()\n      })\n\n      viewContainer.createWidget(widget.TEXT, {\n        x: px(96),\n        y: px(170) + px(index * 400),\n        w: px(288),\n        h: px(46),\n        text_size: px(36),\n        color: 0xffffff,\n        align_h: align.CENTER_H,\n        align_v: align.CENTER_V,\n        text: `INDEX: ${index}`\n      })\n    })\n\n    const viewContainerButton = createWidget(widget.VIEW_CONTAINER, {\n      x: px(0),\n      y: px(86),\n      w: px(480),\n      h: px(400),\n      z_index: 1,\n      scroll_enable: false\n    })\n\n    viewContainerButton.createWidget(widget.BUTTON, {\n      x: 0,\n      y: px(50),\n      w: px(200),\n      h: px(100),\n      text: 'Click',\n      radius: px(12),\n      normal_color: DEFAULT_COLOR,\n      press_color: DEFAULT_COLOR_TRANSPARENT,\n      click_func: () => {\n        console.log('click button')\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Date Picker Implementation in ZeppOS\nDESCRIPTION: Comprehensive example of creating a date picker with month, day, and year columns. Uses the Time sensor to initialize with current date values and includes a callback function for handling selection events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/PICKER.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Time } from '@zos/sensor'\nimport { widget, createWidget } from '@zos/ui'\n\nconst time = new Time()\n\nconst picker_widget = createWidget(widget.WIDGET_PICKER, {\n  title: 'Start Date',\n  subtitle: '',\n  nb_of_columns: 3,\n  single_wide: true,\n  init_col_index: 1,\n  data_config: [\n    {\n      data_array: new Array(12).fill(0).map((d, index) => index + 1),\n      init_val_index: time.getMonth() - 1,\n      unit: 'Month',\n      support_loop: true,\n      font_name: 'fonts/x.ttf',\n      font_size: 24,\n      select_font_size: 48,\n      connector_font_size: 18,\n      unit_font_size: 18,\n      col_width: 80\n    },\n    {\n      data_array: new Array(31).fill(0).map((d, index) => index + 1),\n      init_val_index: time.getDate() - 1,\n      unit: 'Day',\n      support_loop: true,\n      font_name: 'fonts/x.ttf',\n      font_size: 24,\n      select_font_size: 48,\n      connector_font_size: 36,\n      unit_font_size: 36,\n      col_width: 80\n    },\n    {\n      data_array: new Array(100).fill(0).map((d, index) => index + 1970),\n      init_val_index: time.getFullYear() - 1970,\n      unit: 'Year',\n      support_loop: true,\n      font_name: 'fonts/x.ttf',\n      font_size: 24,\n      select_font_size: 48,\n      connector_font_size: 36,\n      unit_font_size: 36,\n      col_width: 80\n    }\n  ],\n  picker_cb\n})\n\nfunction picker_cb(picker, event_type, column_index, select_index) {\n  console.log(\n    'timePickerCb: ' + event_type,\n    'column_index: ' + column_index,\n    'select_index: ' + select_index\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createConnect Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the createConnect function. It takes a callback function as its parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/createConnect.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createConnect(callback: Callback): void\n```\n\n----------------------------------------\n\nTITLE: Creating and Reading SPO2 Sensor in JavaScript\nDESCRIPTION: Creates an SPO2 sensor instance and accesses current blood oxygen value and measurement time. This demonstrates the basic initialization of the sensor and how to read its primary values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spo2 = hmSensor.createSensor(hmSensor.id.SPO2)\n\nconsole.log(spo2.current)\nconsole.log(spo2.time)\n```\n\n----------------------------------------\n\nTITLE: Using offDigitalCrown Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the offDigitalCrown function in JavaScript. It first imports necessary functions, sets up a callback for digital crown events, registers the callback with onDigitalCrown, and then cancels the registration using offDigitalCrown.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/offDigitalCrown.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onDigitalCrown, offDigitalCrown, KEY_HOME } from '@zos/interaction'\n\nconst callback = (key, degree) => {\n  if (key === KEY_HOME) {\n    console.log(degree)\n  }\n}\n\nonDigitalCrown({\n  callback,\n})\n\noffDigitalCrown()\n```\n\n----------------------------------------\n\nTITLE: Defining setItem Method in SessionStorage API for TypeScript\nDESCRIPTION: Method signature for storing key-value pairs in SessionStorage. This method allows saving any value under a specified string key, which will persist until the Mini Program exits.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: any): void\n```\n\n----------------------------------------\n\nTITLE: Installing Zeus CLI via npm\nDESCRIPTION: Commands to install Zeus CLI globally using npm or yarn package managers. Requires Node.js >= 14.0.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/cli/index.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @zeppos/zeus-cli -g\n\n// or\n\nyarn global add @zeppos/zeus-cli\n```\n\n----------------------------------------\n\nTITLE: Using SysProGetChars in JavaScript\nDESCRIPTION: Example showing how to store and retrieve a string value using SysProSetChars and SysProGetChars methods. The example stores 'hello' and then retrieves it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetChars('js_test_char', 'hello')\nconsole.log(hmFS.SysProGetChars('js_test_char'))\n```\n\n----------------------------------------\n\nTITLE: Implementing ARC Widget with Event Listener in Zepp OS\nDESCRIPTION: This example shows how to create an ARC widget, set its properties, and add a click event listener. The event listener changes the y-coordinate of the widget when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/ARC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const arc = hmUI.createWidget(hmUI.widget.ARC, {\n      x: 100,\n      y: 100,\n      w: 250,\n      h: 250,\n      start_angle: -90,\n      end_angle: 90,\n      color: 0xfc6950,\n      line_width: 20\n    })\n\n    arc.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      arc.setProperty(hmUI.prop.MORE, {\n        y: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for image.convert Function in TypeScript\nDESCRIPTION: TypeScript interface definition for the image.convert function, which takes an Options object and returns a Promise containing the conversion result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/image-convert.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(options: Options) => Promise<Result>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Heart Rate in TypeScript\nDESCRIPTION: This snippet demonstrates how to get the most recent continuous heart rate measurement. It should be used within the onCurrentChange callback function, which starts continuous heart rate measurement when registered.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Defining createConnect Callback Type in TypeScript\nDESCRIPTION: TypeScript type definition for the createConnect method callback function that handles Bluetooth data reception.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(callback: (index: number, data: object, size: number) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Using writeFileSync to Write Binary and Text Data in ZeppOS\nDESCRIPTION: Example demonstrating how to use the writeFileSync function to write both ArrayBuffer (binary) data and string content to files. It shows proper parameter usage including the optional encoding specification for string data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writeFileSync } from '@zos/fs'\n\nconst buffer = new ArrayBuffer(4)\nwriteFileSync({\n  path: 'test.txt',\n  data: buffer,\n})\n\nwriteFileSync({\n  path: 'content.txt',\n  data: 'some content...',\n  options: {\n    encoding: 'utf8',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing User Profile Data with getProfile API in Zepp OS\nDESCRIPTION: This code demonstrates how to import and use the getProfile API to access user information. Without proper permissions in app.json, this code will throw an authorization error.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/permission.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getProfile } from '@zos/user'\n\nPage({\n  build() {\n    const { age } = getProfile()\n    console.log(age)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing App Registration in JavaScript\nDESCRIPTION: Example of registering a Zepp OS mini-program with global data and lifecycle methods onCreate and onDestroy.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/global/App.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    text: 'Hello Zepp OS',\n  },\n  onCreate() {\n    console.log('onCreate')\n    console.log(this.globalData.text)\n  },\n  onDestroy() {\n    console.log('onDestroy')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: WORLD_CLOCK Sensor Usage Example in ZeppOS\nDESCRIPTION: Demonstrates the complete usage of the WORLD_CLOCK sensor, including initialization, data retrieval, and cleanup.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst world_clock = hmSensor.createSensor(hmSensor.id.WORLD_CLOCK)\nworld_clock.init()\nconst count = world_clock.getWorldClockCount()\nif (count > 0) {\n  const worldData = world_clock.getWorldClockInfo(0)\n  console.log('worldName=' + worldData.city)\n  console.log('worldHour=' + worldData.hour)\n  console.log('worldMinute=' + worldData.minute)\n}\nworld_clock.uninit()\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener for UI Widget in JavaScript\nDESCRIPTION: This example demonstrates how to import necessary modules, create a widget, and add an event listener for the CLICK_DOWN event. It logs the x-coordinate of the click when the event is triggered.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/addEventListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\n\nimg_bkg.addEventListener(event.CLICK_DOWN, function (info) {\n  //控件注册事件监听\n  console.log(info.x)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining closeSync Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the closeSync function. It takes an Option object as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction closeSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Importing mstGetProfileInstance from BLE module in JavaScript\nDESCRIPTION: Example showing how to import the mstGetProfileInstance function from the @zos/ble module in a Zepp OS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstGetProfileInstance.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { mstGetProfileInstance } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Opening an Asset File in Zepp OS Mini Program\nDESCRIPTION: This JavaScript code demonstrates how to open a file from the /assets directory in a Zepp OS Mini Program. It uses the hmFS.open_asset method within a Page's build lifecycle method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/fs.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fileId = hmFS.open_asset('raw/data.txt', hmFS.O_RDONLY)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the setInterval function type signature in TypeScript\nDESCRIPTION: TypeScript definition of the setInterval function that takes a callback function and a delay value in milliseconds, returning a timer identifier.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/setInterval.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setInterval(callback: Callback, delay: Delay): IntervalID\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Brightness Duration in JavaScript\nDESCRIPTION: Example of setting the screen brightness duration to 10 seconds using the hmSetting.setBrightScreen method. Returns 0 if successful.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/setBrightScreen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setBrightScreen(10)\n```\n\n----------------------------------------\n\nTITLE: Using getImageInfo to Get Image Dimensions in JavaScript\nDESCRIPTION: Example of importing the getImageInfo function from the @zos/ui module and using it to retrieve information about an image file named 'test.png'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getImageInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getImageInfo } from '@zos/ui'\n\ngetImageInfo('test.png')\n```\n\n----------------------------------------\n\nTITLE: Using addListener Method in JavaScript\nDESCRIPTION: Example showing how to listen for changes to data in settingsStorage, specifically for listening to token changes and performing a reLogin action.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsettings.settingsStorage.addListener('change', async ({ key, newValue, oldValue }) => {\n  if (key === 'token' && newValue) {\n    // ...\n    await reLogin()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTypeConfig for ScrollList Items in JavaScript\nDESCRIPTION: Example of setting up data_type_config to assign different item types to specific index ranges in a ScrollList. This allows different visual styles for different list items.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\ndata_type_config:[\n  //The data representing the index from 0 to 2 uses the style with type_id of 2.\n  {\n  start: 0,\n  end: 2,\n  type_id: 2,\n  },\n  {\n  start: 3,\n  end: 10,\n  type_id: 1,\n  },\n],\ndata_type_config_count:2\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Vibration Implementation Example\nDESCRIPTION: Complete example showing vibration control implementation including sensor creation, vibration pattern setting, start/stop control, and cleanup in page destruction\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n\nfunction click() {\n  vibrate.stop()\n  vibrate.scene = 25\n  vibrate.start()\n}\n\nclick()\n\nPage({\n  onDestroy() {\n    vibrate && vibrate.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog with Custom Configuration\nDESCRIPTION: Complete example showing how to create and configure a dialog with custom text, styling, and button callbacks. Note that properties must be set in two steps - first setting button text, then setting content and alignment properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/DIALOG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const dialog = hmUI.createWidget(hmUI.widget.DIALOG, {\n      ok_text: 'OK',\n      cancel_text: 'CANCEL'\n    })\n    dialog.setProperty(hmUI.prop.MORE, {\n      text: 'DIALOG',\n      content_text_size: 40,\n      content_bg_color: 0x000000,\n      content_text_color: 0xffffff,\n      dialog_align_h: hmUI.align.CENTER_H,\n      content_text_align_h: hmUI.align.CENTER_H,\n      content_text_align_v: hmUI.align.CENTER_V,\n      ok_func: () => {\n        console.log('OK')\n      },\n      cancel_func: () => {\n        console.log('CANCEL')\n      }\n    })\n    dialog.setProperty(hmUI.prop.SHOW, true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating STRESS Sensor Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a STRESS sensor instance and access its current value and timestamp.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stress = hmSensor.createSensor(hmSensor.id.STRESS)\n\nconsole.log(stress.current)\nconsole.log(stress.time)\n```\n\n----------------------------------------\n\nTITLE: Removing Items and Clearing localStorage - TypeScript\nDESCRIPTION: Shows how to remove a specific item from localStorage and clear all data using TypeScript. The removeItem method deletes data for a specified key, while clear removes all data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nremoveItem(key: string): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Getting Current Battery Percentage in TypeScript\nDESCRIPTION: Method to retrieve the current device battery level as a percentage in the range of 0-100.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Battery.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProSetInt64 and SysProGetInt64 in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmFS.SysProSetInt64 function to store a 64-bit integer and then retrieve it using hmFS.SysProGetInt64. The stored value is associated with the key 'js_test_int64'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt64('js_test_int64', 200)\nconsole.log(hmFS.SysProGetInt64('js_test_int64'))\n```\n\n----------------------------------------\n\nTITLE: Using offKey to Unregister Key Events\nDESCRIPTION: Example showing how to register a key event handler for the UP button click event and then unregister it using offKey. Demonstrates the complete workflow of key event handling in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/offKey.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onKey, offKey, KEY_UP, KEY_EVENT_CLICK } from '@zos/interaction'\n\nconst keyCallback = (key, keyEvent) => {\n  if (key === KEY_UP && keyEvent === KEY_EVENT_CLICK) {\n    console.log('up click')\n  }\n  return true\n}\n\nonKey({\n  callback: keyCallback,\n})\n\noffKey()\n```\n\n----------------------------------------\n\nTITLE: Using pauseDropWristScreenOff Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the pauseDropWristScreenOff function from the @zos/display module. It sets a duration of 60000 milliseconds (1 minute) to pause the drop wrist screen-off behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/display/pauseDropWristScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pauseDropWristScreenOff } from '@zos/display'\n\npauseDropWristScreenOff({\n  duration: 60000,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing WORLD_CLOCK Sensor in ZeppOS\nDESCRIPTION: Type definition for the init method of the WORLD_CLOCK sensor, which initializes the world clock data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining removeItem Method Type in TypeScript\nDESCRIPTION: Type definition for the removeItem method, which deletes a value stored by the key name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Cancel Function Type in TypeScript\nDESCRIPTION: TypeScript function signature for the cancel method that deletes notifications by ID. It accepts either a single notification ID or an array of IDs and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/notification/cancel.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction cancel(alarmId: number | Array<number>): void\n```\n\n----------------------------------------\n\nTITLE: GetLanguage Usage Example\nDESCRIPTION: JavaScript example demonstrating how to import and use the getLanguage function to retrieve the current system language code\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getLanguage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getLanguage } from '@zos/settings'\n\nconst languageCode = getLanguage()\nconsole.log(languageCode)\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom System Event in JavaScript\nDESCRIPTION: Example of using the emitCustomSystemEvent function to emit a custom system event named 'event:customize.test' with specific parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/emitCustomSystemEvent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emitCustomSystemEvent } from '@zos/app'\n\nemitCustomSystemEvent({\n  eventName: 'event:customize.test',\n  eventParam: 'eventName=event:customize.test&type=0',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating VIBRATE Sensor Instance\nDESCRIPTION: Demonstrates how to create a VIBRATE sensor instance using hmSensor.createSensor()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n```\n\n----------------------------------------\n\nTITLE: Using getProfile to Access User Information\nDESCRIPTION: Example demonstrating how to import and use the getProfile function to access user information and check gender using constants.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/user/getProfile.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getProfile, GENDER_MALE } from '@zos/user'\n\nconst { age, gender } = getProfile()\nconsole.log(age)\n\nif (gender === GENDER_MALE) {\n  console.log('male')\n}\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.seek in JavaScript\nDESCRIPTION: Example demonstrating how to open a file and seek to its start position using hmFS.seek. Shows file creation with read/write access and seeking to beginning of file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/seek.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Open/Create a file.\nconst fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n\n//Locate the file start location.\nhmFS.seek(file, 0, hmFS.SEEK_SET)\n```\n\n----------------------------------------\n\nTITLE: Making POST Request with Additional Parameters in Zepp OS\nDESCRIPTION: Shows how to make a POST request with additional parameters such as headers and body data. This implementation differs from standard Fetch API as all parameters are passed in a single object, supporting only url, method, headers, and body attributes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/fetch.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = await fetch({\n  url: 'https://xxx.com/api/xxx',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    text: 'Hello Zepp OS'\n  })\n})\n\nconst data = typeof res.body === 'string' ?  JSON.parse(res.body) : res.body\n```\n\n----------------------------------------\n\nTITLE: Using relayoutRtl Function in ZeppOS UI\nDESCRIPTION: Example of importing and using the relayoutRtl() function from the ZeppOS UI module to apply RTL layout adjustments and logging the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/relayoutRtl.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { relayoutRtl } from '@zos/ui'\n\nconst result = relayoutRtl()\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProSetChars and SysProGetChars in JavaScript\nDESCRIPTION: This example demonstrates how to use hmFS.SysProSetChars() to store a string and hmFS.SysProGetChars() to retrieve it. The stored string is temporary and will be cleared on system reboot.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetChars('js_test_char', 'hello')\nconsole.log(hmFS.SysProGetChars('js_test_char'))\n```\n\n----------------------------------------\n\nTITLE: Drawing an Image on Canvas in Zepp OS\nDESCRIPTION: Shows how to draw an image on the canvas at position (0,0) with dimensions 466x466 and full opacity.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawImage({\n  x: 0,\n  y: 0,\n  w: 466,\n  h: 466,\n  alpha: 255,\n  image: 'images/canvas/background.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Opacity Example\nDESCRIPTION: Example showing how to create a text widget and set its opacity using setAlpha(). Demonstrates importing necessary components, creating a text widget with specific properties, and setting its alpha value to 80.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/setAlpha.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\n\nconst text = createWidget(widget.TEXT, {\n  x: 96,\n  y: 120,\n  w: 288,\n  h: 46,\n  color: 0xffffff,\n  text_size: 36,\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.NONE,\n  text: 'HELLO ZEPPOS'\n})\n\ntext.setAlpha(80)\n```\n\n----------------------------------------\n\nTITLE: Creating VIBRATE Sensor Instance\nDESCRIPTION: Demonstrates how to create a VIBRATE sensor instance using hmSensor.createSensor()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n```\n\n----------------------------------------\n\nTITLE: Canceling Bright Screen Settings\nDESCRIPTION: Example showing how to set and then cancel the bright screen time setting. The setBrightScreenCancel method should be called in the app destroy function after using setBrightScreen.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/setBrightScreenCancel.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmSetting.setBrightScreen(10)\nhmSetting.setBrightScreenCancel()\n```\n\n----------------------------------------\n\nTITLE: Target Device Configuration in JavaScript\nDESCRIPTION: Example configuration for targeting different device models within app.json. This shows how to specify different configurations for different Zepp devices like GTR 3 Pro, GTR 3, and GTS 3.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ...\n      }\n    },\n    \"gtr-3\": {\n      \"module\": {\n        // ...\n      }\n    },\n    \"gts-3\": {\n      \"module\": {\n        // ...\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining statSync Function Type in ZeppOS File System API\nDESCRIPTION: TypeScript definition for the statSync function that synchronously retrieves file information. It takes an Option object with a path parameter and returns a Result that can be either an FSStat object or undefined.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/statSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction statSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_LEVEL Widget with Image Array in ZeppOS\nDESCRIPTION: Complete example showing how to create an IMG_LEVEL widget that displays different images based on a level value. The example creates a widget with an array of three images and displays the second image by setting level to 2.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 480,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: Using statSync to Get File Information in ZeppOS\nDESCRIPTION: JavaScript example demonstrating how to use the statSync function to retrieve information about a file. It imports the function from the '@zos/fs' module, calls it with a file path, and checks the result to access the file size.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/statSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { statSync } from '@zos/fs'\n\nconst result = statSync({\n  path: 'test.txt',\n})\n\nif (result) {\n  const { size } = result\n  console.log(size)\n}\n```\n\n----------------------------------------\n\nTITLE: Using clearTimeout Function - JavaScript\nDESCRIPTION: Example showing how to use clearTimeout to cancel a timer created with setTimeout. Creates a timer that would log a message after 1 second, then immediately cancels it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/clearTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeoutID = setTimeout(() => {\n  console.log('Hello Zepp OS')\n}, 1000)\n\nclearTimeout(timeoutID)\n```\n\n----------------------------------------\n\nTITLE: Using relayoutRtl Function in ZeppOS UI\nDESCRIPTION: Example of importing and using the relayoutRtl() function from the ZeppOS UI module to apply RTL layout adjustments and logging the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/relayoutRtl.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { relayoutRtl } from '@zos/ui'\n\nconst result = relayoutRtl()\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing BUTTON Widgets with Different Styles\nDESCRIPTION: This code example shows how to create two different BUTTON widgets: one with image backgrounds and another with color backgrounds. It also demonstrates how to use the click_func property and how to modify a button's properties after creation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_button = hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(hmUI.prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle on CANVAS in Zepp OS\nDESCRIPTION: Shows how to draw a filled rectangle on the CANVAS widget using the drawRect method, specifying coordinates and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.drawRect({\n  x1: 60,\n  y1: 20,\n  x2: 120,\n  y2: 60,\n  color: 0xff00ff\n})\n```\n\n----------------------------------------\n\nTITLE: Complete RADIO_GROUP Implementation Example in ZeppOS\nDESCRIPTION: A full example of creating and initializing a RADIO_GROUP with three STATE_BUTTON options. The code demonstrates setting up the radio group, creating buttons within it, and setting a default selected button with prop.INIT.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const radioGroup = createWidget(widget.RADIO_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    radioGroup.setProperty(prop.INIT, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: EventBus Usage Example - JavaScript\nDESCRIPTION: Complete example showing how to import, instantiate and use the EventBus class for event handling in Zepp OS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventBus } from '@zos/utils'\n\nconst eventBus = new EventBus()\n\neventBus.on('data', (data) => {\n  console.log(data)\n})\n\neventBus.emit('data', 'Hello Zepp OS!')\n```\n\n----------------------------------------\n\nTITLE: Complete Keyboard Management Example in Zepp OS\nDESCRIPTION: This code example demonstrates a complete workflow for creating, using, and destroying a keyboard widget within a Zepp OS page. It includes creating a numeric keyboard, handling input completion and cancellation, and cleaning up the keyboard afterwards.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SMART_KEYBOARD.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createKeyboard, inputType, deleteKeyboard } from '@zos/ui'\n\nPage({\n  onInit() {\n    this.createKeyboard()\n  },\n\n  createKeyboard() {\n    createKeyboard({\n      inputType: inputType.NUM,\n      onComplete: (result) => {\n        console.log('Input content:', result.data)\n        this.destroyKeyboard()\n      },\n      onCancel: (result) => {\n        console.log('Input cancelled')\n        this.destroyKeyboard()\n      },\n      text: '100' // Initial text\n    })\n  },\n\n  destroyKeyboard() {\n    deleteKeyboard()\n    // Execute subsequent operations like page navigation...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete RADIO_GROUP Implementation Example in ZeppOS\nDESCRIPTION: A full example of creating and initializing a RADIO_GROUP with three STATE_BUTTON options. The code demonstrates setting up the radio group, creating buttons within it, and setting a default selected button with prop.INIT.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const radioGroup = createWidget(widget.RADIO_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    radioGroup.setProperty(prop.INIT, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getPackageInfo Function Signature in TypeScript\nDESCRIPTION: Specifies the function signature for getPackageInfo, which takes no parameters and returns a Result object containing fields from app.json.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/app/getPackageInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getPackageInfo(): Result\n```\n\n----------------------------------------\n\nTITLE: Defining addHealthData Function Signature in TypeScript\nDESCRIPTION: This TypeScript code defines the function signature for addHealthData, including its parameters and return type. It specifies the Option object structure with weight and bmi properties, and indicates that the function returns a boolean Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/user/addHealthData.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addHealthData(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_STATUS Widget in ZeppOS JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an IMG_STATUS widget in ZeppOS. It sets the position, status type, and image source for the widget. The width and height are optional and default to the image dimensions if not specified.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_STATUS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst status = hmUI.createWidget(hmUI.widget.IMG_STATUS, {\n  x: 0,\n  y: 0,\n  // w,h are optional settings. Use image width and height by default.\n  type: hmUI.system_status.DISCONNECT, // Data types, refer to the table above.\n  src: 'status.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting KEYBOARD Widget Properties\nDESCRIPTION: Demonstrates how to set various properties of the KEYBOARD widget, including adding keys, deleting keys, modifying key parameters, and updating text styles.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/KEYBOARD.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.setProperty(prop.ADD_KEY, {\n  id: 100,\n  x: 280,\n  y: 350,\n  text: '!'\n})\n\nkeyboard.setProperty(prop.DEL_KEY, {\n  id: 20\n})\n\nkeyboard.setProperty(prop.KEY_PARA, {\n  id: 1,\n  x: 50,\n  y: 30,\n  image: 'images/common/widgetsbc/phoneCall/phone call_ic_answer_64px.png',\n  text: 'c',\n  value: 98\n})\n\nkeyboard.setProperty(prop.TEXT_STYLE, {\n  x: 0,\n  w: 480,\n  align_h: align.CENTER,\n  alpha: 255,\n  color: 0xff0000,\n  show: 1\n})\n\nkeyboard.setProperty(prop.TEXT, 'hello rose !')\n\nkeyboard.setProperty(prop.X, 0)\nkeyboard.setProperty(prop.Y, 10)\n```\n\n----------------------------------------\n\nTITLE: Reloading Page in Zepp OS Application using JavaScript\nDESCRIPTION: Example of using hmApp.reloadPage() to load a specific page (pages/index3.js) with optional parameters in a Zepp OS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/reloadPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Loading pages/index3.js \nhmApp.reloadPage({ url: 'pages/index3', param: '...' })\n```\n\n----------------------------------------\n\nTITLE: Defining createConnect Method for BLE Connection in TypeScript\nDESCRIPTION: TypeScript definition for the createConnect method, which establishes a BLE connection and sets up a callback for receiving data. The callback receives the packet index, data object, and data size.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(callback: (index: number, data: object, size: number) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Page Constructor Type Definition in TypeScript\nDESCRIPTION: Type definition for the Page constructor function, specifying its parameters and return type. It shows the function signature that takes an Option object and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/Page.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Page(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Target Example\nDESCRIPTION: JavaScript example showing how to get the user's sleep target value using hmSetting.getSleepTarget(). Returns the target sleep duration in minutes, with a default value of 0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getSleepTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = hmSetting.getSleepTarget()\n```\n\n----------------------------------------\n\nTITLE: Registering Location Change Callback - TypeScript\nDESCRIPTION: Method signature for registering a callback function to listen for location information changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Geolocation.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Page Constructor Type Definition in TypeScript\nDESCRIPTION: Type definition for the Page constructor function, specifying its parameters and return type. It shows the function signature that takes an Option object and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/Page.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Page(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Vibrator Usage Example\nDESCRIPTION: Example showing how to import and use the Vibrator module to control vibration with different modes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Vibrator, VIBRATOR_SCENE_DURATION } from '@zos/sensor'\n\nconst vibrator = new Vibrator()\nvibrator.start()\n\n// set scene\nvibrator.setMode(VIBRATOR_SCENE_DURATION)\nvibrator.start()\n```\n\n----------------------------------------\n\nTITLE: Using Router Exit Function in JavaScript\nDESCRIPTION: Example of importing and using the exit function from the ZeppOS router module to exit a Mini Program and return to the applist page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/exit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exit } from '@zos/router'\n\nexit()\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Items with sessionStorage in TypeScript\nDESCRIPTION: TypeScript method signatures for the sessionStorage API, including setItem for storing data, getItem for retrieving data with optional default values, removeItem for deleting specific keys, and clear for removing all data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: any): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Arc Progress Widget Properties\nDESCRIPTION: Demonstrates setting complete properties for an arc progress widget including center position, radius, angles, color, and progress level. Shows how to use setProperty method to configure the widget after creation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS)\narcProgress.setProperty(hmUI.prop.MORE, {\n  center_x: 100,\n  center_y: 100,\n  radius: 200,\n  start_angle: -90,\n  end_angle: 90,\n  color: 0x34e073,\n  line_width: 10,\n  level: 50\n})\n```\n\n----------------------------------------\n\nTITLE: Link Component Type Definition in TypeScript\nDESCRIPTION: Defines the function signature for a Link component that takes props and optional render functions as parameters. The function returns a RenderFunc type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/link.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining writeFileSync Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for writeFileSync, indicating it takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction writeFileSync(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Items with sessionStorage in TypeScript\nDESCRIPTION: TypeScript method signatures for the sessionStorage API, including setItem for storing data, getItem for retrieving data with optional default values, removeItem for deleting specific keys, and clear for removing all data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: any): void\n```\n\n----------------------------------------\n\nTITLE: Complete CYCLE_IMAGE_TEXT_LIST Widget Implementation Example\nDESCRIPTION: Provides a full example of creating and configuring a CYCLE_IMAGE_TEXT_LIST widget, including setting up the data array, specifying dimensions, and styling options. Also demonstrates how to retrieve the index of the first row.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst data_array = [\n  { src: rootPath + 'step/step_num_0.png', text: '1' },\n  { src: rootPath + 'step/step_num_1.png', text: '2' },\n  { src: rootPath + 'step/step_num_2.png', text: '3' }\n]\ncycleList = createWidget(widget.CYCLE_IMAGE_TEXT_LIST, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 400,\n  data_array: data_array,\n  data_size: 3,\n  item_height: 100,\n  item_bg_color: 0xffffff,\n  item_text_color: 0x000000,\n  item_text_x: 10,\n  item_text_y: 10,\n  item_text_size: 18\n})\n\n//Get the index value of the first row.\nret = cycleList.getProperty(prop.MORE, {})\nconsole.log(ret.index)\n```\n\n----------------------------------------\n\nTITLE: Using clearTimeout to Cancel a Timer in JavaScript\nDESCRIPTION: Example of setting a timer with setTimeout and then canceling it using clearTimeout in Zepp OS. This demonstrates how to prevent a scheduled function from executing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/clearTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeoutID = setTimeout(() => {\n  console.log('Hello Zepp OS')\n}, 1000)\n\nclearTimeout(timeoutID)\n```\n\n----------------------------------------\n\nTITLE: Defining createTimer Function Signature in TypeScript\nDESCRIPTION: TypeScript definition of the createTimer function, specifying its parameters and return type. It takes a delay, repeat interval, callback function, and an optional parameter, returning a timer ID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/timer/createTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(delay: number, repeat: number, callback: (option: any) => void, option: any) => timerId\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Layout Style in JavaScript\nDESCRIPTION: Demonstrates how to use the updateLayoutStyle() method to update the layout style of a container widget. It imports necessary functions, creates a virtual container, and applies flex layout properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/updateLayoutStyle.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst container = createWidget(widget.VIRTUAL_CONTAINER)\n\n// Update container layout style\ncontainer.updateLayoutStyle({\n  display: 'flex',\n  'flex-direction': 'row',\n  'justify-content': 'space-between',\n  'align-items': 'center',\n  width: '100%',\n  height: '200px'\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Layout Style in JavaScript\nDESCRIPTION: Demonstrates how to use the updateLayoutStyle() method to update the layout style of a container widget. It imports necessary functions, creates a virtual container, and applies flex layout properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/updateLayoutStyle.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst container = createWidget(widget.VIRTUAL_CONTAINER)\n\n// Update container layout style\ncontainer.updateLayoutStyle({\n  display: 'flex',\n  'flex-direction': 'row',\n  'justify-content': 'space-between',\n  'align-items': 'center',\n  width: '100%',\n  height: '200px'\n})\n```\n\n----------------------------------------\n\nTITLE: Using bufferToString Utility in JavaScript\nDESCRIPTION: Example showing how to import and use the bufferToString utility to convert an ArrayBuffer to a string in ZeppOS applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/bufferToString.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bufferToString } from '@zos/utils'\n\nconst str = bufferToString(buffer)\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageBuilder in Side Service\nDESCRIPTION: Setup of MessageBuilder in the Side Service (companion app) including initialization and connection listening.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    // establish connection\n    messageBuilder.listen(() => {})\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Complete PICKER Widget Implementation in ZeppOS\nDESCRIPTION: This comprehensive example demonstrates how to create and configure a PICKER widget with multiple columns for date selection. It includes importing necessary modules, setting up data configurations, and defining a callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PICKER.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Time } from '@zos/sensor'\nimport { widget, createWidget } from '@zos/ui'\n\nconst time = new Time()\n\nconst picker_widget = createWidget(widget.WIDGET_PICKER, {\n  title: 'Start Date',\n  subtitle: '',\n  nb_of_columns: 3,\n  single_wide: true,\n  init_col_index: 1,\n  data_config: [\n    {\n      data_array: new Array(12).fill(0).map((d, index) => index + 1),\n      init_val_index: time.getMonth() - 1,\n      unit: 'Month',\n      support_loop: true,\n      font_name: 'fonts/x.ttf',\n      font_size: 24,\n      select_font_size: 48,\n      connector_font_size: 18,\n      unit_font_size: 18,\n      col_width: 80\n    },\n    {\n      data_array: new Array(31).fill(0).map((d, index) => index + 1),\n      init_val_index: time.getDate() - 1,\n      unit: 'Day',\n      support_loop: true,\n      font_name: 'fonts/x.ttf',\n      font_size: 24,\n      select_font_size: 48,\n      connector_font_size: 36,\n      unit_font_size: 36,\n      col_width: 80\n    },\n    {\n      data_array: new Array(100).fill(0).map((d, index) => index + 1970),\n      init_val_index: time.getFullYear() - 1970,\n      unit: 'Year',\n      support_loop: true,\n      font_name: 'fonts/x.ttf',\n      font_size: 24,\n      select_font_size: 48,\n      connector_font_size: 36,\n      unit_font_size: 36,\n      col_width: 80\n    }\n  ],\n  picker_cb\n})\n\nfunction picker_cb(picker, event_type, column_index, select_index) {\n  console.log(\n    'timePickerCb: ' + event_type,\n    'column_index: ' + column_index,\n    'select_index: ' + select_index\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Buffer to File using hmFS.write in JavaScript\nDESCRIPTION: This code example demonstrates how to use the hmFS.write function to write a buffer to a file. It creates a new file, initializes a buffer, and writes the buffer content to the file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/write.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const test_buf = new Uint8Array(10)\n    const test_buf2 = new Uint8Array(test_buf.length)\n\n    const file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n    hmFS.write(file, test_buf.buffer, 0, test_buf.length)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete CYCLE_IMAGE_TEXT_LIST Widget Implementation Example\nDESCRIPTION: Provides a full example of creating and configuring a CYCLE_IMAGE_TEXT_LIST widget, including setting up the data array, specifying dimensions, and styling options. Also demonstrates how to retrieve the index of the first row.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst data_array = [\n  { src: rootPath + 'step/step_num_0.png', text: '1' },\n  { src: rootPath + 'step/step_num_1.png', text: '2' },\n  { src: rootPath + 'step/step_num_2.png', text: '3' }\n]\ncycleList = createWidget(widget.CYCLE_IMAGE_TEXT_LIST, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 400,\n  data_array: data_array,\n  data_size: 3,\n  item_height: 100,\n  item_bg_color: 0xffffff,\n  item_text_color: 0x000000,\n  item_text_x: 10,\n  item_text_y: 10,\n  item_text_size: 18\n})\n\n//Get the index value of the first row.\nret = cycleList.getProperty(prop.MORE, {})\nconsole.log(ret.index)\n```\n\n----------------------------------------\n\nTITLE: Defining addListener Type in TypeScript\nDESCRIPTION: TypeScript type definition for the addListener method that registers a connection status callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(callback: (status: boolean) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing BUTTON Widgets with Image and Color Backgrounds\nDESCRIPTION: This example shows how to create two different BUTTON widgets: one with image backgrounds for normal and pressed states, and another with color backgrounds. It also demonstrates how to use the setProperty method to modify the button's properties dynamically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img_button = createWidget(widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    createWidget(widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining addListener Type in TypeScript\nDESCRIPTION: TypeScript type definition for the addListener method that registers a connection status callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(callback: (status: boolean) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring ARC_PROGRESS Properties in ZeppOS\nDESCRIPTION: Demonstrates setting properties for an arc progress widget including center coordinates, radius, angles, color, line width and progress level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS)\narcProgress.setProperty(hmUI.prop.MORE, {\n  center_x: 100,\n  center_y: 100,\n  radius: 200,\n  start_angle: -90,\n  end_angle: 90,\n  color: 0x34e073,\n  line_width: 10,\n  level: 50\n})\n```\n\n----------------------------------------\n\nTITLE: Defining openInspector Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the openInspector function, which returns an Inspector object instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/openInspector.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction openInspector(): Inspector\n```\n\n----------------------------------------\n\nTITLE: Method Signature for SysProGetBool in TypeScript\nDESCRIPTION: The TypeScript function signature for the hmFS.SysProGetBool method, showing it takes a string key parameter and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_ANIM Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG_ANIM widget using the createWidget function from the @zos/ui module. It shows the basic structure and required parameters for initializing an image animation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst imgAnim = createWidget(widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Widget in ZeppOS\nDESCRIPTION: Example of creating a text widget using the createWidget function in ZeppOS. It demonstrates setting various properties like position, size, color, and text alignment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/createWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, text_style } from '@zos/ui'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Logs in Device App using HmLogger\nDESCRIPTION: Demonstrates how to implement logging in the Device App component using HmLogger from DeviceRuntimeCore. Shows different logging levels (log, error, warn) within a Page component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/debug.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = DeviceRuntimeCore.HmLogger.getLogger('helloworld')\n\nPage({\n  build() {\n    logger.log('page build invoked')\n  },\n  onInit() {\n    logger.error('page onInit invoked')\n  },\n\n  onDestroy() {\n    logger.warn('page onDestroy invoked')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining removeListener Method for Unregistering BLE Status Updates in TypeScript\nDESCRIPTION: TypeScript definition for the removeListener method, which unregisters the previously set connection status listener. This method takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating Page Indicator Widget - Complete Example\nDESCRIPTION: Demonstrates a complete implementation of a page indicator widget with horizontal alignment, spacing, and custom selection images. The example shows how to configure all major properties including positioning, dimensions, and visual assets.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/PAGE_INDICATOR.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align } from '@zos/ui'\n\nconst pageIndicator = createWidget(widget.PAGE_INDICATOR, {\n  x: 0,\n  y: 470,\n  w: 480,\n  h: 100,\n  align_h: align.CENTER_H,\n  h_space: 8,\n  select_src: 'images/test/select/select.png',\n  unselect_src: 'images/test/select/unselect.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Widget Properties in Zepp OS\nDESCRIPTION: Demonstrates how to read widget properties using both the old method with getProperty and the new getter method available since API_LEVEL 4.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/gettersetter.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\nconst textWidth = textWidget.getProperty(prop.W)\n\n// New way (API_LEVEL 4.0+)\nconst textWidth = textWidget.w\n```\n\n----------------------------------------\n\nTITLE: Defining getProperty Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the getProperty function, which takes any type of key as input and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: any) => result\n```\n\n----------------------------------------\n\nTITLE: Simplified setBrightness Function Type in TypeScript\nDESCRIPTION: Alternative simplified TypeScript function signature that accepts a brightness number directly instead of an Option object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setBrightness(brightness: number): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Properties in JavaScript\nDESCRIPTION: Demonstrates how to use the getProperty method to retrieve multiple properties of an image widget, including angle, width, and height. Also shows how to get a single property (height) directly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\nconst img_prop = img_bkg.getProperty(prop.MORE, {})\nconst { angle, w, h } = img_prop\n\nconst imgHeight = img_bkg.getProperty(prop.H)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Properties in JavaScript\nDESCRIPTION: Demonstrates how to use the getProperty method to retrieve multiple properties of an image widget, including angle, width, and height. Also shows how to get a single property (height) directly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\nconst img_prop = img_bkg.getProperty(prop.MORE, {})\nconst { angle, w, h } = img_prop\n\nconst imgHeight = img_bkg.getProperty(prop.H)\n```\n\n----------------------------------------\n\nTITLE: Using getAllAlarms Function in JavaScript\nDESCRIPTION: Example showing how to import and call the getAllAlarms function to retrieve all alarm IDs associated with the current Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/alarm/getAllAlarms.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllAlarms } from '@zos/alarm'\n\ngetAllAlarms()\n```\n\n----------------------------------------\n\nTITLE: Calculating Single-line Text Layout in ZeppOS UI (JavaScript)\nDESCRIPTION: This example shows how to use the getTextLayout function to calculate the width and height of a single-line text layout. It sets the text_width to 0 and wrapped to 0 to prevent line breaks, then logs the resulting dimensions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTextLayout } from '@zos/ui'\n\nconst { width, height } = getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 0,\n  wrapped: 0\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Gyroscope Sensor in ZeppOS\nDESCRIPTION: This snippet demonstrates how to initialize, configure, and use the Gyroscope sensor in ZeppOS. It shows how to import the module, create an instance, set a callback for data changes, configure the frequency mode, start monitoring, and properly clean up when finished.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Gyroscope, FREQ_MODE_LOW } from '@zos/sensor'\n\nconst gyroscope = new Gyroscope()\n\nconst callback = () => {\n  console.log(gyroscope.getCurrent())\n}\ngyroscope.onChange(callback)\ngyroscope.setFreqMode(FREQ_MODE_LOW)\ngyroscope.start()\n\n// When not needed for use\ngyroscope.offChange()\ngyroscope.stop()\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.rename() to Rename Files in ZeppOS\nDESCRIPTION: Example demonstrating how to use the hmFS.rename() method to rename a file from 'old_file.txt' to 'new_file.txt'. The method returns a numeric value where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/rename.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmFS.rename('path/to/old_file.txt', 'path/to/new_file.txt')\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Using the Replace Function in JavaScript\nDESCRIPTION: Example of using the replace function from @zos/router to navigate from the current page to 'page/index' with a query parameter 'type=1'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/replace.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { replace } from '@zos/router'\n\nreplace({\n  url: 'page/index',\n  params: 'type=1',\n})\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for mstOnServiceChangeBegin in TypeScript\nDESCRIPTION: Type declaration for the mstOnServiceChangeBegin function, showing its signature which accepts a callback parameter and returns a boolean result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnServiceChangeBegin.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstOnServiceChangeBegin(callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: Displaying Weather Data on ZeppOS Device\nDESCRIPTION: Demonstrates how to create a page that displays weather information including city name, forecast data, and tide data using the TextByLine class and weather sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const weather = hmSensor.createSensor(hmSensor.id.WEATHER)\n    const weatherData = weather.getForecastWeather()\n    const { forecastData, tideData } = weatherData\n\n    new TextByLine({\n      text: `cityName:${weatherData.cityName}`,\n      line: 0\n    }).render()\n\n    new TextByLine({\n      text: `forecastCount:${forecastData.count};tideCount:${tideData.count}`,\n      line: 1\n    }).render()\n\n    for (let i = 0; i < forecastData.count; i++) {\n      const { index, high, low } = forecastData.data[i]\n\n      new TextByLine({\n        text: `index:${index};high:${high};low:${low}`,\n        line: 2 + i\n      }).render()\n    }\n\n    for (let i = 0; i < tideData.count; i++) {\n      const {\n        sunrise: { hour: sunriseHour, minute: sunriseMinute },\n        sunset: { hour: sunsetHour, minute: sunsetMinute }\n      } = tideData.data[i]\n\n      new TextByLine({\n        text: `sunrise:${sunriseHour}:${sunriseMinute};sunset:${sunsetHour}:${sunsetMinute}`,\n        line: 2 + i + forecastData.count\n      }).render()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getDiskInfo Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getDiskInfo function that returns disk information including total, free, app, watchface, music and system space in bytes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/device/getDiskInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDiskInfo(): Result\n```\n\n----------------------------------------\n\nTITLE: Button Click Function Type Definition\nDESCRIPTION: Type definition for the button click callback function that receives the button instance as a parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(button: Button) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Sleep Time in JavaScript\nDESCRIPTION: Demonstrates how to get the total sleep time using the getTotalTime method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst totalTime = sleep.getTotalTime()\n```\n\n----------------------------------------\n\nTITLE: Weekly Timer Example\nDESCRIPTION: Example demonstrating how to set a timer that repeats on specific days of the week (Monday and Wednesday).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/alarm/set.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { set, REPEAT_WEEK, WEEK_MON, WEEK_WED } from '@zos/alarm'\n\nconst option = {\n  url: 'pages/index.js',\n  time: 12345678,\n  repeat_type: REPEAT_WEEK,\n  week_days: WEEK_MON | WEEK_WED,\n}\nconst id = set(option)\n```\n\n----------------------------------------\n\nTITLE: Using Wear Sensor API in JavaScript\nDESCRIPTION: Example code demonstrating how to use the Wear sensor API. It shows importing the Wear class, creating an instance, getting the current status, registering a change callback, and later unregistering the callback when no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Wear } from '@zos/sensor'\n\nconst wear = new Wear()\nconst status = wear.getStatus()\nconst callback = () => {\n  console.log(wear.getStatus())\n}\n\nwear.onChange(callback)\n\n// When not needed for use\nwear.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Migrating Zepp OS API Method Calls from 1.0 to 2.0\nDESCRIPTION: This snippet shows how to migrate various Zepp OS API method calls from version 1.0 to 2.0. The changes include updating import statements and modifying method names.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/migration-guide.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmApp.setLayerY(100)\nconst result = hmSetting.getUserData()\nhmApp.gotoHome()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollTo } from '@zos/page'\nimport { home } from '@zos/router'\nimport { getProfile } from '@zos/user'\n\nscrollTo({\n  y: 100\n})\nconst result = getProfile()\nhome()\n```\n\n----------------------------------------\n\nTITLE: Implementing User Profile Access in Zepp OS Mini Program\nDESCRIPTION: Example code showing how to import and use the getProfile API to access user information. This requires the 'data:user.info' permission to be properly configured.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/permission.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getProfile } from '@zos/user'\n\nPage({\n  build() {\n    const { age } = getProfile()\n    console.log(age)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Wear Sensor API in JavaScript\nDESCRIPTION: Example code demonstrating how to use the Wear sensor API. It shows importing the Wear class, creating an instance, getting the current status, registering a change callback, and later unregistering the callback when no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Wear } from '@zos/sensor'\n\nconst wear = new Wear()\nconst status = wear.getStatus()\nconst callback = () => {\n  console.log(wear.getStatus())\n}\n\nwear.onChange(callback)\n\n// When not needed for use\nwear.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a File in ZeppOS\nDESCRIPTION: Example of writing data to a file using hmFS.write. The code creates a buffer, opens a file with read-write and create permissions, then writes the buffer content to the file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/write.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst test_buf = new Uint8Array(10)\nconst test_buf2 = new Uint8Array(test_buf.length)\n\nconst file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\nhmFS.write(file, test_buf.buffer, 0, test_buf.length)\n```\n\n----------------------------------------\n\nTITLE: Getting Y-Coordinate Offset in ZeppOS with JavaScript\nDESCRIPTION: Example of retrieving the vertical scroll position of the current page using the hmApp.getLayerY() method in ZeppOS applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/getLayerY.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Get the Y-coordinate offset\nhmApp.getLayerY()\n```\n\n----------------------------------------\n\nTITLE: Implementing a SLIDE_SWITCH with State Management in ZeppOS\nDESCRIPTION: This example demonstrates a complete implementation of a slide switch component with event handling. It shows how to create the switch with proper styling, set an initial checked state, handle state changes via callback, and read the current state with getProperty.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const slide_switch = createWidget(widget.SLIDE_SWITCH, {\n      x: 200,\n      y: 200,\n      w: 96,\n      h: 64,\n      select_bg: 'switch_on.png',\n      un_select_bg: 'switch_off.png',\n      slide_src: 'radio_select.png',\n      slide_select_x: 40,\n      slide_un_select_x: 8,\n      checked: true,\n      checked_change_func: (slideSwitch, checked) => {\n        console.log('checked', checked)\n      }\n    })\n\n    console.log('slide checked', slide_switch.getProperty(prop.CHECKED))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a SLIDE_SWITCH with State Management in ZeppOS\nDESCRIPTION: This example demonstrates a complete implementation of a slide switch component with event handling. It shows how to create the switch with proper styling, set an initial checked state, handle state changes via callback, and read the current state with getProperty.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const slide_switch = createWidget(widget.SLIDE_SWITCH, {\n      x: 200,\n      y: 200,\n      w: 96,\n      h: 64,\n      select_bg: 'switch_on.png',\n      un_select_bg: 'switch_off.png',\n      slide_src: 'radio_select.png',\n      slide_select_x: 40,\n      slide_un_select_x: 8,\n      checked: true,\n      checked_change_func: (slideSwitch, checked) => {\n        console.log('checked', checked)\n      }\n    })\n\n    console.log('slide checked', slide_switch.getProperty(prop.CHECKED))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Get Widget ID Method Signature - TypeScript\nDESCRIPTION: Type definition for the getId() method that returns a unique numeric identifier for a widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getId.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Getting Screen Status in TypeScript\nDESCRIPTION: Method to retrieve the current screen status. Returns 1 if the screen is on, and 2 if the screen is off.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus(): number\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for openSync in ZeppOS\nDESCRIPTION: TypeScript type definition for the openSync function, showing its signature with option parameter and result type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/openSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction openSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_STATUS Widget in ZeppOS JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an IMG_STATUS widget using hmUI.createWidget(). It sets the position, status type, and image source for the widget. The width and height are optional and default to the image dimensions if not specified.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_STATUS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst status = hmUI.createWidget(hmUI.widget.IMG_STATUS, {\n  x: 0,\n  y: 0,\n  // w,h are optional settings. Use image width and height by default.\n  type: hmUI.system_status.DISCONNECT, // Data types, refer to the table above.\n  src: 'status.png'\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation Example of Swiper Controls\nDESCRIPTION: Example demonstrating how to set up swiper scroll mode, navigate to a specific index, and retrieve the current swiper position using getSwiperIndex.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/getSwiperIndex.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScrollMode, swipeToIndex, getSwiperIndex, SCROLL_MODE_SWIPER } from '@zos/page'\n\nsetScrollMode({\n  mode: SCROLL_MODE_SWIPER,\n  options: {\n    height: 480,\n    count: 10,\n  },\n})\n\nswipeToIndex({\n  index: 5,\n})\n\nconst currentIndex = getSwiperIndex()\nconsole.log(currentIndex)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for getProperty Method\nDESCRIPTION: Type definition showing the function signature for the getProperty method that retrieves widget properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: any) => result\n```\n\n----------------------------------------\n\nTITLE: Defining mstWriteCharacteristic Type in TypeScript\nDESCRIPTION: TypeScript type definition for the mstWriteCharacteristic function that writes characteristic information. The function takes profile pointer, UUID string, data buffer and length as parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstWriteCharacteristic.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstWriteCharacteristic(profile: Profile, uuid: UUID, data: Data, length: Length): void\n```\n\n----------------------------------------\n\nTITLE: Creating ARC Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to create an ARC widget using hmUI.createWidget. It sets various properties such as position, size, angles, color, and line width.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/ARC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = hmUI.createWidget(hmUI.widget.ARC, Param)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Ellipse on Canvas in Zepp OS\nDESCRIPTION: Demonstrates drawing a filled ellipse with center at (80,300), x-radius 60, y-radius 80, and red color on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawEllipse({\n  center_x: 80,\n  center_y: 300,\n  radius_x: 60,\n  radius_y: 80,\n  color: 0xff0000\n})\n```\n\n----------------------------------------\n\nTITLE: Using setInterval to create a recurring timer in ZeppOS\nDESCRIPTION: Example of using setInterval to log a message to the console every 1000 milliseconds (1 second). The function returns a timer ID that can be used to cancel the interval with clearInterval.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/setInterval.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetInterval(() => {\n  console.log('Hello Zepp OS')\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: CheckFunc Callback Function Structure for CHECKBOX_GROUP\nDESCRIPTION: Definition of the callback function structure used when a checkbox state changes. The function receives the checkbox group instance, the index of the changed option, and its new checked state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n(checkboxGroup: CheckboxGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Array for ScrollList in JavaScript\nDESCRIPTION: Example of creating a data array that provides values for TextView and ImageView elements in a ScrollList. Each object contains properties referenced by the 'key' configuration in the views.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataList = [\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '12' },\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '13' },\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '13' }\n]\n```\n\n----------------------------------------\n\nTITLE: Using pausePalmScreenOff Function in JavaScript\nDESCRIPTION: Example of importing and using the pausePalmScreenOff function from the @zos/display module. This suspends the palm screen off behavior for 60 seconds (60000 milliseconds).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/pausePalmScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pausePalmScreenOff } from '@zos/display'\n\npausePalmScreenOff({\n  duration: 60000,\n})\n```\n\n----------------------------------------\n\nTITLE: Complete FILL_RECT Widget Example with Event Handling\nDESCRIPTION: A complete example showing how to create a filled rectangle with rounded corners, and how to handle click events to update its properties. Note that when using setProperty with prop.MORE, x, y, w, and h must be included.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/FILL_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const fill_rect = createWidget(widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Function Type Signature for setLaunchAppTimeout in TypeScript\nDESCRIPTION: TypeScript declaration showing the function signature for setLaunchAppTimeout, which takes an Option object and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/setLaunchAppTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setLaunchAppTimeout(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining Item Focus Change Function for ScrollList in TypeScript\nDESCRIPTION: Specifies the function signature for handling focus change events on ScrollList items. It provides the list widget, item index, and focus state as parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n(list: ScrollList, index: number, focus: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Creating DISTANCE Sensor in JavaScript\nDESCRIPTION: Creates a DISTANCE sensor instance using hmSensor.createSensor and logs the current mileage value. This is the basic setup required to start tracking distance in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst distance = hmSensor.createSensor(hmSensor.id.DISTANCE)\n\nconsole.log(distance.current)\n```\n\n----------------------------------------\n\nTITLE: Creating a DATE_POINTER Widget in ZeppOS (JavaScript)\nDESCRIPTION: This code creates a DATE_POINTER widget that displays a pointer indicating the current week. The widget is configured with background images, pointer position, and rotation angles. It demonstrates how to implement a date pointer for a watch face in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/widget/DATE_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet week = hmUI.createWidget(hmUI.widget.DATE_POINTER, {\n  scale_x: 0,\n  scale_y: 0,\n  scale_sc: 'bg.png', //背景图 可选\n  scale_tc: 'bg.png',\n  scale_en: 'bg.png',\n  center_x: 100,\n  center_y: 100,\n  src: 'pointer.png', //指针图片\n  posX: 0,\n  posY: 0,\n  cover_x: 0, //指针上面的帽子\n  cover_y: 0,\n  cover_path: 'cover.png',\n  start_angle: 0, //0点为正 可以写负数\n  end_angle: 180,\n  type: hmUI.date.WEEK //参考上方表格\n})\n```\n\n----------------------------------------\n\nTITLE: Calculating Single-Line Text Dimensions\nDESCRIPTION: This example shows how to calculate the width and height of text as a single line without wrapping. It sets text_width to 0 and wrapped to 0, ensuring the text stays on a single line regardless of length.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTextLayout } from '@zos/ui'\n\nconst { width, height } = getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 0,\n  wrapped: 0\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Temporary Boolean Values in JavaScript\nDESCRIPTION: JavaScript example showing how to use hmFS.SysProGetBool to retrieve a boolean value from temporary system storage with a specified key and log the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmFS.SysProGetBool('test_key')\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Controlling Multiple Widgets Visibility with GROUP in ZeppOS\nDESCRIPTION: This snippet demonstrates how to use the GROUP widget to control the visibility of multiple widgets more efficiently. It creates a group widget and adds child widgets to it, allowing for unified visibility control.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/widget-group.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst group_widget = createWidget(widget.GROUP , {\n  // ...\n})\n\nconst img_icon_widget = group_widget.createWidget(widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = group_widget.createWidget(widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = group_widget.createWidget(widget.TEXT, {\n  // ...\n})\n\ngroup_widget.setProperty(prop.VISIBLE, false)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example of File Reading with readSync\nDESCRIPTION: Demonstrates how to use readSync to read content from a file into an ArrayBuffer. Shows opening a file in read-only mode and reading its contents.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/readSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, readSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n\nconst buffer = new ArrayBuffer(4)\nconst result = readSync({\n  fd,\n  buffer,\n})\n```\n\n----------------------------------------\n\nTITLE: Using hmBle Module in JavaScript\nDESCRIPTION: Example showing how to use the hmBle module for Bluetooth communication, including creating a connection, handling received data, disconnecting, checking connection status, and monitoring status changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// 创建连接\nhmBle.createConnect(function (index, data, size) {\n  // 收到消息回调，将收到的消息原路返回\n  hmBle.send(data, size)\n})\n\n// 断开连接\nhmBle.disConnect()\n\n// 打印蓝牙连接状态\nconsole.log(hmBle.connectStatus())\n\n// 注册连接状态监听\nhmBle.addListener(function (status) {\n  // 打印连接状态\n  console.log(status)\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Information with getInfo Method\nDESCRIPTION: Method to get sleep information including score, deep sleep time, sleep onset and end times, and total sleep time.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo(): SleepInfo\n```\n\n----------------------------------------\n\nTITLE: Type Definition for scrollToPage Method\nDESCRIPTION: TypeScript type definition showing the method signature for hmUI.scrollToPage, which takes a page index number and animation boolean parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/scrollToPage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(index: number, animation: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Event Handling with onKey in JavaScript\nDESCRIPTION: Example of using the onKey function to listen for a click on the UP button. The callback function returns true to prevent the default button behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onKey, KEY_UP, KEY_EVENT_CLICK } from '@zos/interaction'\n\nonKey({\n  callback: (key, keyEvent) => {\n    if (key === KEY_UP && keyEvent === KEY_EVENT_CLICK) {\n      console.log('up click')\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example of File Renaming in ZeppOS\nDESCRIPTION: Demonstrates how to use hmFS.rename() within a Page component to rename a file from old_file.txt to new_file.txt. Returns a numeric result where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/rename.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const result = hmFS.rename('path/to/old_file.txt', 'path/to/new_file.txt')\n    console.log(result)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using getAppWidgetSize Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the getAppWidgetSize function from the @zos/ui module to retrieve the width of the shortcut card.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getAppWidgetSize.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAppWidgetSize } from '@zos/ui'\n\nconst { w } = getAppWidgetSize()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Stage Model in ZeppOS\nDESCRIPTION: Shows the type definition for the getSleepStageModel method, which returns the sleep stage model data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => modelData\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_DATE Widget in ZeppOS\nDESCRIPTION: This code snippet demonstrates how to create an IMG_DATE widget in ZeppOS. It shows the configuration of year, month, and day display settings, including alignment, spacing, and image array setup. The widget allows customization of date display using images for different languages and formats.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/widget/IMG_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontArray = []\nconst status = hmUI.createWidget(hmUI.widget.IMG_DATE, {\n  year_startX: 0,\n  year_startY: 0,\n  year_unit_sc: 'unit.png', // 单位\n  year_unit_tc: 'unit.png',\n  year_unit_en: 'unit.png',\n  year_align: hmUI.align.LEFT,\n  year_space: 1, // 文字间隔\n  year_zero: 1, // 是否补零\n  year_follow: 1, // 是否跟随\n  year_en_array: fontArray,\n  year_sc_array: fontArray,\n  year_tc_array: fontArray,\n  year_is_character: true // 年份此字段无效 默认为false 为true时 传入的图片为月份12张 日31张\n  // 月、日同上 需要替换前缀为 month、day\n})\n```\n\n----------------------------------------\n\nTITLE: Using getAppWidgetSize Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the getAppWidgetSize function from the @zos/ui module to retrieve the width of the shortcut card.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getAppWidgetSize.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAppWidgetSize } from '@zos/ui'\n\nconst { w } = getAppWidgetSize()\n```\n\n----------------------------------------\n\nTITLE: Registering Click Events with GROUP\nDESCRIPTION: This snippet demonstrates how to use a GROUP widget to register a single click event for multiple widgets. It creates a GROUP widget, adds child widgets to it, and then registers a click event on the GROUP, effectively expanding the clickable area.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/widget-group.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst callback = () => {\n  console.log('callback')\n}\n\nconst group_widget = createWidget(widget.GROUP , {\n  // ...\n})\n\nconst img_icon_widget = group_widget.createWidget(widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = group_widget.createWidget(widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = group_widget.createWidget(widget.TEXT, {\n  // ...\n})\n\ngroup_widget.addEventListener(event.CLICK_DOWN, callback)\n```\n\n----------------------------------------\n\nTITLE: Simplified onDigitalCrown Function Signature in TypeScript\nDESCRIPTION: This snippet presents a simplified TypeScript function signature for onDigitalCrown, which directly takes a callback function as a parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/interaction/onDigitalCrown.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onDigitalCrown(callback: (key: Key, degree: Degree) => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT Widget in Zepp OS\nDESCRIPTION: Demonstrates how to create a basic TEXT widget using the createWidget function from @zos/ui. The example sets various properties such as position, size, color, and alignment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/TEXT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst text = createWidget(widget.TEXT, Param)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getSleepTarget Function\nDESCRIPTION: TypeScript type definition showing the function signature that returns a sleepTarget number value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getSleepTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => sleepTarget\n```\n\n----------------------------------------\n\nTITLE: MST Connect Function Type Definition - TypeScript\nDESCRIPTION: TypeScript type definition for the mstConnect function showing parameter types and return value structure. The function takes a device address and callback function as parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstConnect.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstConnect(deviceAddress: DeviceAddress, callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: Using readSync Function in JavaScript\nDESCRIPTION: Example of using the readSync function to read contents from a file in ZeppOS. It demonstrates opening a file, creating a buffer, and reading data into it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/readSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, readSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n\nconst buffer = new ArrayBuffer(4)\nconst result = readSync({\n  fd,\n  buffer,\n})\n\nif (result === 0) {\n  console.log('readSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distance Unit Type Definition in TypeScript\nDESCRIPTION: Type definition of the getDistanceUnit function that returns the current distance unit setting.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getDistanceUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDistanceUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Defining setPageBrightTime Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for setPageBrightTime, including the Option parameter type and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/display/setPageBrightTime.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setPageBrightTime(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining offDigitalCrown Function Type in TypeScript\nDESCRIPTION: This snippet defines the type of the offDigitalCrown function in TypeScript. The function takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/offDigitalCrown.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction offDigitalCrown(): void\n```\n\n----------------------------------------\n\nTITLE: Checking Distance Unit Settings in JavaScript\nDESCRIPTION: Example of how to import and use the getDistanceUnit function to check if the current distance unit is metric.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getDistanceUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDistanceUnit, DISTANCE_UNIT_METRIC } from '@zos/settings'\n\nconst distanceUnit = getDistanceUnit()\n\nif (distanceUnit === DISTANCE_UNIT_METRIC) {\n  console.log('metric')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Component Type in TypeScript\nDESCRIPTION: This snippet defines the type of the Slider component. It takes props as an object and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/slider.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Simple GET Request using Fetch API in Zepp OS\nDESCRIPTION: Demonstrates how to make a basic GET request using fetch. The example shows destructuring the response to access nested data with default values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/fetch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = 'https://xxx.com/api/xxx'\nconst { body: { data = {} } = {} } = await fetch(url)\n```\n\n----------------------------------------\n\nTITLE: Implementing TEXT Widget with Event Listener in ZeppOS\nDESCRIPTION: This example shows how to create a TEXT widget, set its properties, and add a click event listener. The listener changes the y-coordinate of the text when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const text = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    text.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      text.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing TEXT Widget with Event Listener in ZeppOS\nDESCRIPTION: This example shows how to create a TEXT widget, set its properties, and add a click event listener. The listener changes the y-coordinate of the text when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const text = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    text.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      text.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Type for SCROLL_LIST in ZeppOS\nDESCRIPTION: This code snippet illustrates how to configure data types for different sections of the SCROLL_LIST. It defines ranges of items that should use specific item configurations, allowing for mixed item types within the list.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\ndata_type_config:[\n  //The data representing the index from 0 to 2 uses the style with type_id of 2.\n  {\n  start: 0,\n  end: 2,\n  type_id: 2,\n  },\n  {\n  start: 3,\n  end: 10,\n  type_id: 1,\n  },\n],\ndata_type_config_count:2\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distance Unit Type Definition in TypeScript\nDESCRIPTION: Type definition of the getDistanceUnit function that returns the current distance unit setting.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getDistanceUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDistanceUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Using setInterval in Zepp OS JavaScript\nDESCRIPTION: Example of using setInterval in Zepp OS to log a message every 1000 milliseconds (1 second). The callback function will repeatedly execute at the specified interval.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/setInterval.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nsetInterval(() => {\n  console.log('Hello Zepp OS')\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Digital Crown Event Handler Implementation Example\nDESCRIPTION: JavaScript example showing how to implement digital crown rotation event handling with the KEY_HOME constant.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onDigitalCrown.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onDigitalCrown, KEY_HOME } from '@zos/interaction'\n\nonDigitalCrown({\n  callback: (key, degree) => {\n    if (key === KEY_HOME) {\n      console.log(degree)\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Type for SCROLL_LIST in ZeppOS\nDESCRIPTION: This code snippet illustrates how to configure data types for different sections of the SCROLL_LIST. It defines ranges of items that should use specific item configurations, allowing for mixed item types within the list.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\ndata_type_config:[\n  //The data representing the index from 0 to 2 uses the style with type_id of 2.\n  {\n  start: 0,\n  end: 2,\n  type_id: 2,\n  },\n  {\n  start: 3,\n  end: 10,\n  type_id: 1,\n  },\n],\ndata_type_config_count:2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining hmUI.showToast() Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the hmUI.showToast() function in TypeScript. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/showToast.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => void\n```\n\n----------------------------------------\n\nTITLE: Using SysProGetDouble in JavaScript\nDESCRIPTION: Example showing how to store and retrieve a double precision value using hmFS.SysProSetDouble() and hmFS.SysProGetDouble(). The example stores and retrieves Pi (3.14).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetDouble('js_test_double', 3.14)\nconsole.log(hmFS.SysProGetDouble('js_test_double'))\n```\n\n----------------------------------------\n\nTITLE: Complete ScrollList Implementation Example in JavaScript\nDESCRIPTION: Full example of creating and configuring a ScrollList widget with multiple item types, event handlers, and data binding. Includes item deletion functionality and dynamic configuration updates.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const dataList = [\n      { name: 'Amazfit T-Rex 2', size: 454, del_img: 'btn/delete.png' },\n      { name: 'Amazfit GTR 3 Pro', size: 480, del_img: 'btn/delete.png' },\n      { name: 'Amazfit GTR 3', size: 454, del_img: 'btn/delete.png' }\n    ]\n\n    const scrollList = createWidget(widget.SCROLL_LIST, {\n      x: 0,\n      y: 120,\n      h: 300,\n      w: 480,\n      item_space: 20,\n      snap_to_center: true,\n      item_enable_horizon_drag: true,\n      item_drag_max_distance: -120,\n      item_config: [\n        {\n          type_id: 1,\n          item_bg_color: 0xef5350,\n          item_bg_radius: 10,\n          text_view: [\n            { x: 0, y: 0, w: 480, h: 80, key: 'name', color: 0xffffff, text_size: 20 },\n            { x: 0, y: 80, w: 480, h: 40, key: 'size', color: 0xffffff }\n          ],\n          text_view_count: 2,\n          image_view: [{ x: 492, y: 28, w: 64, h: 64, key: 'del_img', action: true }],\n          image_view_count: 1,\n          item_height: 120\n        },\n        {\n          type_id: 2,\n          item_bg_color: 0xef5350,\n          item_bg_radius: 10,\n          text_view: [\n            { x: 0, y: 0, w: 480, h: 80, key: 'name', color: 0x000000, text_size: 20 },\n            { x: 0, y: 80, w: 480, h: 40, key: 'size', color: 0x000000 }\n          ],\n          text_view_count: 2,\n          image_view: [{ x: 492, y: 28, w: 64, h: 64, key: 'del_img', action: true }],\n          image_view_count: 1,\n          item_height: 120\n        }\n      ],\n      item_config_count: 2,\n      data_array: dataList,\n      data_count: dataList.length,\n      item_focus_change_func: (list, index, focus) => {\n        console.log('scrollListFocusChange index=' + index)\n        console.log('scrollListFocusChange focus=' + focus)\n      },\n      item_click_func: (item, index, data_key) => {\n        console.log(`scrollListItemClick index=${index}`)\n        if (data_key === 'del_img') {\n          scrollList.setProperty(prop.DELETE_ITEM, { index })\n          dataList.splice(index, 1)\n        } else {\n          updateConfig()\n        }\n      },\n      data_type_config: [\n        {\n          start: 0,\n          end: 1,\n          type_id: 1\n        },\n        {\n          start: 1,\n          end: 2,\n          type_id: 2\n        }\n      ],\n      data_type_config_count: 2,\n      snap_to_center: true,\n      item_enable_horizon_drag: true,\n      item_drag_max_distance: -112\n    })\n\n    function updateConfig() {\n      scrollList.setProperty(prop.UPDATE_DATA, {\n        data_type_config: [\n          {\n            start: 0,\n            end: dataList.length - 1,\n            type_id: 1\n          }\n        ],\n        data_type_config_count: 1,\n        data_array: dataList,\n        data_count: dataList.length,\n        on_page: 1\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining setPageBrightTime Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for setPageBrightTime, including the Option parameter type and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/display/setPageBrightTime.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setPageBrightTime(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distance Unit Type Definition in TypeScript\nDESCRIPTION: Type definition of the getDistanceUnit function that returns the current distance unit setting.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getDistanceUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDistanceUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Using SysProGetDouble and SysProSetDouble in JavaScript\nDESCRIPTION: This example demonstrates how to use hmFS.SysProSetDouble to store a double precision value and then retrieve it using hmFS.SysProGetDouble. The retrieved value is then logged to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetDouble('js_test_double', 3.14)\nconsole.log(hmFS.SysProGetDouble('js_test_double'))\n```\n\n----------------------------------------\n\nTITLE: Music Event Listener Registration\nDESCRIPTION: Example of registering an event listener for music changes to track updates to the current song.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(\"The current song's name: \" + music.title + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Storage Changes in ZeppOS\nDESCRIPTION: Shows how to implement a change listener for settingsStorage in Side Service, including handling specific key changes and executing callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsettings.settingsStorage.addListener('change', async ({ key, newValue, oldValue }) => {\n  if (key === 'token' && newValue) {\n    // ...\n    await reLogin()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dialog Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the createDialog function signature, showing the expected option parameter and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/createDialog.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Disk Information Example in JavaScript\nDESCRIPTION: Example showing how to call getDiskInfo() and log the disk space information converted to megabytes. Demonstrates accessing various properties of the diskInfo object including total, free, app, watchface, music and system space.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getDiskInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst diskInfo = hmSetting.getDiskInfo()\nconsole.log(\n  'disk Info:',\n  diskInfo.total / 1024 / 1024,\n  diskInfo.free / 1024 / 1024,\n  diskInfo.app / 1024 / 1024,\n  diskInfo.watchface / 1024 / 1024,\n  diskInfo.music,\n  diskInfo.system / 1024 / 1024\n)\n```\n\n----------------------------------------\n\nTITLE: Defining App Function Signature in TypeScript\nDESCRIPTION: TypeScript definition for the App function that registers a Mini Program. Shows the function signature with Option parameter and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/App.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction App(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a File in ZeppOS\nDESCRIPTION: Example demonstrating how to open a file with read/write and create permissions, then write buffer data to it. The example creates a new Uint8Array buffer and writes it to a file using hmFS.write.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/write.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst test_buf = new Uint8Array(10)\nconst test_buf2 = new Uint8Array(test_buf.length)\n\nconst file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\nhmFS.write(file, test_buf.buffer, 0, test_buf.length);\n```\n\n----------------------------------------\n\nTITLE: Creating a ScrollList with Multiple Item Types in ZeppOS\nDESCRIPTION: Demonstrates creating a ScrollList widget with multiple item types, custom layouts, and click handling. Includes configuration for different item templates and data type mapping.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataList = [\n  { name: 'a', age: 12, like: 2 },\n  { name: 'b', age: 13, like: 3 },\n  { name: 'c', age: 13, like: 4 }\n]\n\nfunction scrollListItemClick(list, index) {\n  console.log('scrollListItemClick index=' + index)\n}\n\nhmUI.createWidget(hmUI.widget.SCROLL_LIST, {\n  x: 10,\n  y: 10,\n  h: 454,\n  w: 200,\n  item_space: 10,\n  item_config: [\n    {\n      type_id: 1,\n      item_bg_color: 0xef5350,\n      item_bg_radius: 10,\n      text_view: [\n        { x: 0, y: 0, w: 100, h: 100, key: 'name', color: 0xffffff, text_size: 20 },\n        { x: 0, y: 100, w: 100, h: 30, key: 'age', color: 0xffffff }\n      ],\n      text_view_count: 2,\n      item_height: 130\n    },\n    {\n      type_id: 2,\n      item_bg_color: 0xef5350,\n      item_bg_radius: 10,\n      text_view: [\n        { x: 0, y: 0, w: 100, h: 100, key: 'name', color: 0xffffff, text_size: 20 },\n        { x: 100, y: 0, w: 100, h: 100, key: 'like', color: 0x3d5afe }\n      ],\n      text_view_count: 2,\n      item_height: 130\n    }\n  ],\n  item_config_count: 2,\n  data_array: dataList,\n  data_count: dataList.length,\n  item_click_func: scrollListItemClick,\n  data_type_config: [\n    {\n      start: 0,\n      end: 1,\n      type_id: 1\n    },\n    {\n      start: 1,\n      end: 2,\n      type_id: 2\n    }\n  ],\n  data_type_config_count: 2\n})\n```\n\n----------------------------------------\n\nTITLE: Defining hmUI.setLayerScrolling Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definition for the hmUI.setLayerScrolling function. It takes a boolean parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setLayerScrolling.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(enable: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Editable Background Implementation\nDESCRIPTION: Creates an editable background widget with multiple background options, preview images, and positioning configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst editBg = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_BG, {\n  edit_id: 103,\n  x: 0,\n  y: 0,\n  bg_config: [\n    { id: 1, preview: BGROOT + 'bg_edit_1.png', path: BGROOT + 'preview_1.png' },\n    { id: 2, preview: BGROOT + 'bg_edit_2.png', path: BGROOT + 'preview_2.png' },\n    { id: 3, preview: BGROOT + 'bg_edit_3.png', path: BGROOT + 'preview_3.png' },\n    { id: 4, preview: BGROOT + 'bg_edit_4.png', path: BGROOT + 'preview_4.png' },\n    { id: 5, preview: BGROOT + 'bg_edit_5.png', path: BGROOT + 'preview_5.png' }\n  ],\n  count: 5,\n  default_id: 1,\n  fg: BGROOT + 'fg.png',\n  tips_x: 178,\n  tips_y: 428,\n  tips_bg: TIPS_ROOT + 'bg_tips.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mstReadCharacteristic\nDESCRIPTION: JavaScript example showing how to import and use the mstReadCharacteristic function from the ZeppOS BLE module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstReadCharacteristic.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstReadCharacteristic } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Refreshing CYCLE_IMAGE_TEXT_LIST Item\nDESCRIPTION: Demonstrates how to refresh a specific item in the CYCLE_IMAGE_TEXT_LIST widget to revert it to its original state after modifying its properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setProperty(prop.ITEM_REFRESH, 0) // 0 is the index of item , starting from 0.\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Brightness in JavaScript\nDESCRIPTION: This JavaScript code example demonstrates how to use the hmSetting.setBrightness() function to set the screen brightness to 50%. The function returns a result indicating success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setBrightness(50)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Heart Rate Data in TypeScript\nDESCRIPTION: Defines the type for the getSleepHrData method, which retrieves sleep heart rate data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable Image Widget in ZeppOS JavaScript\nDESCRIPTION: Creates an interactive image widget that responds to click events. The widget is positioned using x,y coordinates with specified width and height, displays an image on click, and is associated with stress data type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_CLICK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet click = hmUI.createWidget(hmUI.widget.IMG_CLICK, {\n  x: 329,\n  y: 337,\n  w: 40,\n  h: 23,\n  src: rootPath + 'click.png', // Image to be displayed when clicked.\n  type: hmUI.data_type.STRESS\n  //Must write.The action to jump.\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Gradient Polyline Chart with ZeppOS hmUI\nDESCRIPTION: Demonstrates how to create a gradient polyline chart widget using hmUI.createWidget. Shows data plotting with lines and points, including canvas clearing and data type specification for sleep data visualization.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/GRADKIENT_POLYLINE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//Clear the canvas each time you set_more.\nconst lineDatas = [\n  { x: 0, y: 0 },\n  { x: 100, y: 10 },\n  { x: 200, y: 50 }\n]\nvar widget = hmUI.createWidget(hmUI.widget.GRADKIENT_POLYLINE, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 200,\n  type: hmUI.data_type.SLEEP //If you set the type, the function below can be used to let the firmware draw the data, currently only HEART and SLEEP are supported.\n})\n//JS draws the data.\nwidget.clear() //clear the canvas\nwidget.addLine({\n  //Add line.\n  data: lineDatas,\n  count: lineDatas.length\n})\nwidget.addPoint({\n  //Add point.\n  data: lineDatas,\n  count: lineDatas.length\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Layer Scrolling in ZeppOS with JavaScript\nDESCRIPTION: This example demonstrates how to use the hmUI.setLayerScrolling function to turn off scrolling for the default layer in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setLayerScrolling.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nhmUI.setLayerScrolling(false) //Turn off scrolling for the default layer.\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Container Example\nDESCRIPTION: Example showing how to create a container widget and text widget, then set the container as the parent of the text widget using setLayoutParent.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setLayoutParent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = hmUI.createWidget(hmUI.widget.VIRTUAL_CONTAINER, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 480\n})\n\nconst text = hmUI.createWidget(hmUI.widget.TEXT, {\n  text: 'Hello Zepp OS'\n})\n\n// Set text widget as child node of container\ntext.setLayoutParent(container)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for addListener Method in TypeScript\nDESCRIPTION: TypeScript type definition for the addListener method which registers a callback to be notified of connection status changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmBle.mdx#2025-04-07_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n(callback: (status: boolean) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Using writeSync Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the writeSync function to write data to a file. It first opens a file using openSync, then writes an ArrayBuffer to it using writeSync.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/writeSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, writeSync, O_RDWR, O_CREAT } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDWR | O_CREAT,\n})\n\nconst buffer = new ArrayBuffer(4)\nconst result = writeSync({\n  fd,\n  buffer,\n})\n\nif (result === 0) {\n  console.log('writeSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TEXT Widget with Event Listener in ZeppOS\nDESCRIPTION: This example shows how to create a TEXT widget with specific properties and add a click event listener to modify its position dynamically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const text = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    text.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      text.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example Implementation of onGesture\nDESCRIPTION: Example showing how to use the onGesture API to handle an upward gesture event in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onGesture, GESTURE_UP } from '@zos/interaction'\n\nonGesture({\n  callback: (event) => {\n    if (event === GESTURE_UP) {\n      console.log('up')\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TextView for SCROLL_LIST in ZeppOS\nDESCRIPTION: This snippet demonstrates how to configure text views within a SCROLL_LIST item. It defines an array of text view objects with properties such as position, size, color, and data binding key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst text_view = [\n  { x: 100, y: 0, w: 100, h: 20, key: 'name', color: 0xffffff },\n  { x: 0, y: 30, w: 100, h: 100, key: 'age', color: 0xffffff, text_size: 20 }\n]\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.stat to Get File Information in JavaScript\nDESCRIPTION: Example of using the hmFS.stat function to retrieve file information. It demonstrates how to check for errors and access the file size property from the returned stat object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/stat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst [fs_stat, err] = hmFS.stat('path/to/test_file.txt')\n\nif (err == 0) {\n  console.log('--->size:', fs_stat.size)\n} else {\n  console.log('err:', err)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Response Body Compatibility in Zepp OS\nDESCRIPTION: Demonstrates the recommended approach for handling response data compatibility across different Zepp OS device models. This pattern checks if the response body is a string and parses it accordingly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/fetch.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = typeof res.body === 'string' ?  JSON.parse(res.body) : res.body\n```\n\n----------------------------------------\n\nTITLE: Defining resetDropWristScreenOff Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the resetDropWristScreenOff function, which returns a Result type (number).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/resetDropWristScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction resetDropWristScreenOff(): Result\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Unit Conversion Reference\nDESCRIPTION: Comprehensive table showing metric and imperial unit conversions for various measurements like distance, speed, stride, swimming distance, calories, and temperature.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/designs/internationalization/languages.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Data**            | **Metric unit** | **Imperial unit** |\n| ------------------- | ------------------------- | --------------------------- |\n| Distance            | km                        | mi                          |\n| Speed               | km/h                      | mph                         |\n| Stride              | cm                        | in                          |\n| Swimming distance   | m                         | yd                          |\n| Calorie consumption | kcal                      | kcal                        |\n| Temperature         | ℃                         | ℉                           |\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProSetChars in JavaScript\nDESCRIPTION: Example of storing and retrieving a temporary string value using hmFS.SysProSetChars and hmFS.SysProGetChars. The example stores 'hello' with the key 'js_test_char' and then retrieves and logs the value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nhmFS.SysProSetChars('js_test_char', 'hello')\nconsole.log(hmFS.SysProGetChars('js_test_char'))\n```\n\n----------------------------------------\n\nTITLE: Using writeSync Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the writeSync function to write data to a file. It first opens a file using openSync, then writes an ArrayBuffer to it using writeSync.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/writeSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, writeSync, O_RDWR, O_CREAT } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDWR | O_CREAT,\n})\n\nconst buffer = new ArrayBuffer(4)\nconst result = writeSync({\n  fd,\n  buffer,\n})\n\nif (result === 0) {\n  console.log('writeSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Complete TEXT_IMG Widget Example in ZeppOS\nDESCRIPTION: This code example shows a full implementation of creating a TEXT_IMG widget. It includes setting up a font array and creating a widget to display battery information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontArray = [\n  fontRootPath + '00.png',\n  fontRootPath + '01.png',\n  fontRootPath + '02.png',\n  fontRootPath + '03.png',\n  fontRootPath + '04.png',\n  fontRootPath + '05.png',\n  fontRootPath + '06.png',\n  fontRootPath + '07.png',\n  fontRootPath + '08.png',\n  fontRootPath + '09.png'\n]\n\nconst dayText = hmUI.createWidget(hmUI.widget.TEXT_IMG, {\n  x: 207,\n  y: 340,\n  type: hmUI.data_type.BATTERY,\n  font_array: fontArray,\n  h_space: 1,\n  align_h: 16,\n  text: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Turning Off Screen in ZeppOS using JavaScript\nDESCRIPTION: This code example demonstrates how to use the hmSetting.setScreenOff() function to turn off the screen in a ZeppOS application. The function returns a result, where 0 indicates a successful operation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/setScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = hmSetting.setScreenOff()\n```\n\n----------------------------------------\n\nTITLE: CheckFunc Callback Function Signature for RADIO_GROUP\nDESCRIPTION: Defines the signature for the callback function used when a radio button state changes. The callback receives the radioGroup instance, the index of the changed option, and its checked status.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n(radioGroup: RadioGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Opening Asset File Example - JavaScript\nDESCRIPTION: Demonstrates how to open and read a file from the assets directory using the hmFS.open_asset API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/fs.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fileId = hmFS.open_asset('raw/data.txt', hmFS.O_RDONLY)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Permissions Declaration in Zepp OS Mini Programs\nDESCRIPTION: Example of the permissions array in a Mini Program configuration that lists required permissions for the application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"permissions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the createDialog function, specifying the option parameter and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/createDialog.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => result\n```\n\n----------------------------------------\n\nTITLE: BLE Send Function Usage Example - JavaScript\nDESCRIPTION: Example showing how to import and use the BLE send function from the @zos/ble module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/send.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { send } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Single Item Text Properties in CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: Shows how to set properties for a single item's text in the CYCLE_IMAGE_TEXT_LIST widget. This includes changing text color and size for a specific index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = ...\nwidget.setProperty(prop.ITEM_MORE,{\n  index:0,\n  item_text_color:0x2f4988,\n  item_text_size:50\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Bluetooth Communication Example\nDESCRIPTION: JavaScript example demonstrating the usage of hmBle module methods including connection creation, message handling, status checking and event listening.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Create Connection\nhmBle.createConnect(function (index, data, size) {\n  // Receive message callback, return the received message as it is\n  hmBle.send(data, size)\n})\n\n// Disconnection\nhmBle.disConnect()\n\n// Print Bluetooth connection status\nconsole.log(hmBle.connectStatus())\n\n// Register to listen for connection status\nhmBle.addListener(function (status) {\n  // Print connection status\n  console.log(status)\n})\n```\n\n----------------------------------------\n\nTITLE: Using setBrightness Function in JavaScript\nDESCRIPTION: Example of how to import and use the setBrightness function from @zos/display to set the screen brightness to 50% and check if the operation was successful.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setBrightness } from '@zos/display'\n\nconst result = setBrightness({\n  brightness: 50,\n})\n\nif (result === 0) {\n  console.log('setBrightness success')\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bright Screen Example in JavaScript\nDESCRIPTION: Example showing how to use setBrightScreen to set the screen brightness for 10 seconds, then cancel it with setBrightScreenCancel().\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/setBrightScreenCancel.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmSetting.setBrightScreen(10)\nhmSetting.setBrightScreenCancel()\n```\n\n----------------------------------------\n\nTITLE: Implementing CIRCLE Widget in ZeppOS Page\nDESCRIPTION: This example shows how to implement a CIRCLE widget within a ZeppOS Page. It creates a red circle with a radius of 120 pixels, centered at (240, 240), with an alpha transparency of 200.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const circle = hmUI.createWidget(hmUI.widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a UI Widget in ZeppOS JavaScript\nDESCRIPTION: This example demonstrates how to create an image widget using hmUI.createWidget and then delete it using hmUI.deleteWidget within a ZeppOS Page component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/deleteWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const img = hmUI.createWidget(hmUI.widget.IMG, {\n      x: 125,\n      y: 125,\n      src: 'zeppos.png'\n    })\n\n    hmUI.deleteWidget(img)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Change Event Listener to DISTANCE Sensor\nDESCRIPTION: Example of adding an event listener to the DISTANCE sensor that will trigger when the distance value changes. The callback logs the updated distance value to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndistance.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current distance is ' + distance.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining mstOnCharaNotification Function Type in TypeScript\nDESCRIPTION: TypeScript definition for the mstOnCharaNotification function, which registers a callback function that will be invoked when a Characteristic Notification arrives. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ble/mstOnCharaNotification.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction mstOnCharaNotification(callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: Defining Sport Type Codes in Markdown Table\nDESCRIPTION: This markdown table defines sport type codes from 188 to 203, associating each numeric code with a specific sport or physical activity. These codes can be used in ZeppOS applications for activity tracking and identification.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/workout-extension/quick-start.mdx#2025-04-07_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `188`           | Floor ball                           |\n| `189`           | Electronic Sports                    |\n| `190`           | ATV                                  |\n| `191`           | Football (without GPS)               |\n| `192`           | Playground Running                   |\n| `193`           | Fishing (Number of Fishes)           |\n| `194`           | Indoor Rock Climbing                 |\n| `195`           | Mountaineering and Skiing            |\n| `196`           | Outdoor Freediving                   |\n| `197`           | Indoor freediving                    |\n| `198`           | Fishing and Hunting                  |\n| `199`           | Simple Tennis                        |\n| `200`           | Wakewave Surfing                     |\n| `201`           | Surfing (identify number of trips)   |\n| `202`           | Kitesurfing (Identification Gliding) |\n| `203`           | Ultra Marathon                       |\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_ANIM Widget with Full Configuration\nDESCRIPTION: This example shows a complete implementation of the IMG_ANIM widget, including resource organization, widget creation with all available properties, and event handling for starting the animation on click.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, anim_status } from '@zos/ui'\n\nPage({\n  build() {\n    const imgAnimation = createWidget(widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(prop.ANIM_STATUS, anim_status.START)\n    imgAnimation.addEventListener(event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(prop.ANIM_STATUS, anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Rotated IMG Widget in Zepp OS\nDESCRIPTION: Creates an image widget with rotation. The example configures the hour hand image with specific position, size, center of rotation, and a 30-degree rotation angle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img_hour = createWidget(widget.IMG)\n    img_hour.setProperty(prop.MORE, {\n      x: 0,\n      y: 0,\n      w: 454,\n      h: 454,\n      pos_x: 454 / 2 - 27,\n      pos_y: 50 + 50,\n      center_x: 454 / 2,\n      center_y: 454 / 2,\n      src: 'hour.png',\n      angle: 30\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Simple GET Request with Fetch API\nDESCRIPTION: Demonstrates a basic GET request using fetch() with URL parameter and destructuring the response data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/fetch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = 'https://xxx.com/api/xxx'\nconst { body: { data = {} } = {} } = await fetch(url)\n```\n\n----------------------------------------\n\nTITLE: Using clearLaunchAppTimeout in JavaScript\nDESCRIPTION: This example demonstrates how to use the setLaunchAppTimeout and clearLaunchAppTimeout functions in a Zepp OS Mini Program. It sets a timeout to launch an app and then cancels it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setLaunchAppTimeout, clearLaunchAppTimeout } from '@zos/router'\n\nconst timeoutId = setLaunchAppTimeout({\n  url: 'pages/js_widget_sample',\n  appId: 1000001,\n  delay: 10000,\n})\n\nclearLaunchAppTimeout({\n  timeoutId,\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Music Playback and Accessing Song Info in ZeppOS\nDESCRIPTION: Demonstrates various music control methods including initialization, play, pause, previous, and next track. Also shows how to access the artist and title properties of the current song.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = hmSensor.createSensor(hmSensor.id.MUSIC)\n\nmusic.audInit()\nmusic.audPlay()\nmusic.audPause()\nmusic.audPrev()\nmusic.audNext()\n\nconsole.log('The artist of song: ' + music.artist)\nconsole.log('The name of song: ' + music.title)\n```\n\n----------------------------------------\n\nTITLE: Select Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Select component function that takes Props object and returns a RenderFunc. The component supports both single and multiple selection modes with configurable options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/select.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Using mkdirSync to Create a Directory in JavaScript\nDESCRIPTION: Demonstrates how to import and use the mkdirSync function to create a directory named 'content' in the Mini Program's storage, with error checking.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/mkdirSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mkdirSync } from '@zos/fs'\n\nconst result = mkdirSync({\n  path: 'content',\n})\n\nif (result === 0) {\n  console.log('mkdirSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Widget Getter/Setter in Zepp OS 4.0\nDESCRIPTION: This snippet shows how to use the new getter/setter feature for widget properties in Zepp OS 4.0. It creates a TEXT widget and demonstrates reading and writing properties directly, improving code readability and simplicity.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/new-features-40.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    // Create TEXT widget\n    const textWidget = createWidget(widget.TEXT, {\n      // ...\n    })\n\n    // Using getter to read properties\n    console.log('Text content:', textWidget.text)\n    console.log('Text color:', textWidget.color)\n    console.log('Text position:', textWidget.x, textWidget.y)\n\n    // Using setter to set properties\n    textWidget.text = 'Updated Text'\n    textWidget.color = 0xff0000\n    textWidget.x = 120\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Stop Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the stop function, showing its parameter structure and return type. This function is used to stop a device application service.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/app-service/stop.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stop(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nap Data with getNap Method\nDESCRIPTION: Method to get nap data as an array of NapInfo objects. Available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetNap(): Array<NapInfo>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of setBrightness\nDESCRIPTION: JavaScript example demonstrating how to use the setBrightness function to set screen brightness to 50% and handle the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setBrightness } from '@zos/display'\n\nconst result = setBrightness({\n  brightness: 50,\n})\n\nif (result === 0) {\n  console.log('setBrightness success')\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a File with Read-Write Access\nDESCRIPTION: Example showing how to open a file with read-write access, creating it if it doesn't exist. Uses the O_RDWR and O_CREAT flags combined with the bitwise OR operator.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/open.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n```\n\n----------------------------------------\n\nTITLE: Defining ClickFunc Callback for BUTTON Widget\nDESCRIPTION: This snippet shows the structure of the ClickFunc callback used for button click and long-press events. It receives the button instance as a parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(button: Button) => void\n```\n\n----------------------------------------\n\nTITLE: Using hmSetting.setScreenOff to Rest the Screen in JavaScript\nDESCRIPTION: Example of calling the hmSetting.setScreenOff() method to put the device screen into rest mode. The method returns a numeric value where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst result = hmSetting.setScreenOff()\n```\n\n----------------------------------------\n\nTITLE: Creating BATTERY Sensor in JavaScript\nDESCRIPTION: Demonstrates how to create a BATTERY sensor instance using the hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n```\n\n----------------------------------------\n\nTITLE: Using launchApp to Open a Mini Program in JavaScript\nDESCRIPTION: Example of how to import and use the launchApp function to open a Mini Program with a specific appId, URL path, and parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/launchApp.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { launchApp } from '@zos/router'\n\nlaunchApp({\n  appId: 1000001,\n  url: 'pages/js_widget_sample',\n  params: {\n    type: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Step Sensor Event Handling Example\nDESCRIPTION: Complete example showing how to register and handle step sensor change events, logging current and target step values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstep.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current step is ' + step.current + '\\r\\n')\n  console.log('The step target is ' + step.target + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Updating HISTOGRAM Data in Zepp OS\nDESCRIPTION: Shows how to update the data of an existing HISTOGRAM widget. This method allows for dynamic updates to the chart data without recreating the entire widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = ......;\nview.setProperty(prop.UPDATE_DATA, {\n  data_array: [100, 100, 0, 0, 0, 100],\n  data_count: 6\n})\n```\n\n----------------------------------------\n\nTITLE: Applying px Function to UI Element Creation\nDESCRIPTION: Shows how to apply the px function when creating UI widgets to ensure proper scaling across different device screens.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst textStyle = {\n  x: px(96),\n  y: px(40),\n  w: px(288),\n  h: px(46),\n  color: 0xffffff,\n  text_size: px(36),\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.WRAP\n}\n\nconst text = createWidget(widget.TEXT, textStyle)\n```\n\n----------------------------------------\n\nTITLE: Updating HISTOGRAM Data in Zepp OS\nDESCRIPTION: Shows how to update the data of an existing HISTOGRAM widget. This method allows for dynamic updates to the chart data without recreating the entire widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = ......;\nview.setProperty(prop.UPDATE_DATA, {\n  data_array: [100, 100, 0, 0, 0, 100],\n  data_count: 6\n})\n```\n\n----------------------------------------\n\nTITLE: Auth OAuth Component Type Definition in TypeScript\nDESCRIPTION: Type definition for the OAuth authentication component that takes Props as input and returns a RenderFunc. This defines the basic structure and return type of the component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/auth.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Creating Battery Sensor in ZeppOS\nDESCRIPTION: Demonstrates how to create a battery sensor instance and access the current battery level. This snippet initializes the battery sensor and logs the current battery percentage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n\nconsole.log('The current battery level is ' + battery.current + '\\r\\n')\n```\n\n----------------------------------------\n\nTITLE: Complete app.json Example for a ZeppOS Calories Application\nDESCRIPTION: A comprehensive example of app.json for the Calories sample application, demonstrating configuration for multiple target devices (GTR 3 Pro, GTR 3, and GTS 3), with multilingual support for numerous languages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"configVersion\": \"v2\",\n  \"app\": {\n    \"appId\": 1000000,\n    \"appName\": \"Calories\",\n    \"appType\": \"app\",\n    \"version\": {\n      \"code\": 1,\n      \"name\": \"1.0.0\"\n    },\n    \"icon\": \"icon.png\",\n    \"vender\": \"huami\",\n    \"description\": \"\"\n  },\n  \"permissions\": [],\n  \"runtime\": {\n    \"apiVersion\": {\n      \"compatible\": \"1.0.0\",\n      \"target\": \"1.0.1\",\n      \"minVersion\": \"1.0.0\"\n    }\n  },\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        \"page\": {\n          \"pages\": [\n            \"page/gtr-3/index\",\n            \"page/gtr-3/foodList\"\n          ]\n        }\n      },\n      \"platforms\": [{\n        \"name\": \"gtr3pro\",\n        \"deviceSource\": 229\n      }, {\n        \"name\": \"gtr3pro\",\n        \"deviceSource\": 230\n      }],\n      \"designWidth\": 480\n    },\n    \"gtr-3\": {\n      \"module\": {\n        \"page\": {\n          \"pages\": [\n            \"page/gtr-3/index\",\n            \"page/gtr-3/foodList\"\n          ]\n        }\n      },\n      \"platforms\": [{\n        \"name\": \"gtr3\",\n        \"deviceSource\": 226\n      }, {\n        \"name\": \"gtr3\",\n        \"deviceSource\": 227\n      }],\n      \"designWidth\": 480\n    },\n    \"gts-3\": {\n      \"module\": {\n        \"page\": {\n          \"pages\": [\n            \"page/gts-3/index\",\n            \"page/gts-3/foodList\"\n          ]\n        }\n      },\n      \"platforms\": [{\n        \"name\": \"gts3\",\n        \"deviceSource\": 224\n      }, {\n        \"name\": \"gts3\",\n        \"deviceSource\": 225\n      }],\n      \"designWidth\": 390\n    }\n  },\n  \"i18n\": {\n    \"zh-CN\": {\n      \"appName\": \"卡路里\"\n    },\n    \"ar-EG\": {\n      \"appName\": \"السعرات الحرارية\"\n    },\n    \"ca-ES\": {\n      \"appName\": \"Calories\"\n    },\n    \"cs\": {\n      \"appName\": \"Kalorie\"\n    },\n    \"da-DK\": {\n      \"appName\": \"Kalorier\"\n    },\n    \"de-DE\": {\n      \"appName\": \"Kalorien\"\n    },\n    \"el\": {\n      \"appName\": \"Θερμίδες\"\n    },\n    \"en-US\": {\n      \"appName\": \"Calories\"\n    },\n    \"es-ES\": {\n      \"appName\": \"Calorías\"\n    },\n    \"fi\": {\n      \"appName\": \"Kalorit\"\n    },\n    \"fr-FR\": {\n      \"appName\": \"Calories\"\n    },\n    \"he\": {\n      \"appName\": \"קלוריות\"\n    },\n    \"hi\": {\n      \"appName\": \"कैलोरी\"\n    },\n    \"hu-HU\": {\n      \"appName\": \"Kalória\"\n    },\n    \"id-ID\": {\n      \"appName\": \"Kalori\"\n    },\n    \"it-IT\": {\n      \"appName\": \"Calorie\"\n    },\n    \"ja-JP\": {\n      \"appName\": \"カロリー\"\n    },\n    \"ko-KR\": {\n      \"appName\": \"칼로리\"\n    },\n    \"mr\": {\n      \"appName\": \"कॅलरीज\"\n    },\n    \"nb-NO\": {\n      \"appName\": \"Kalorier\"\n    },\n    \"nl\": {\n      \"appName\": \"Calorieën\"\n    },\n    \"pl-PL\": {\n      \"appName\": \"Kalorie\"\n    },\n    \"pt\": {\n      \"appName\": \"Calorias\"\n    },\n    \"pt-BR\": {\n      \"appName\": \"Calorias\"\n    },\n    \"ro\": {\n      \"appName\": \"Calorii\"\n    },\n    \"ru-RU\": {\n      \"appName\": \"Калории\"\n    },\n    \"sk\": {\n      \"appName\": \"Kalórie\"\n    },\n    \"sr\": {\n      \"appName\": \"Калорије\"\n    },\n    \"sv-SE\": {\n      \"appName\": \"Kalorier\"\n    },\n    \"th-TH\": {\n      \"appName\": \"แคลอรี\"\n    },\n    \"tr-TR\": {\n      \"appName\": \"Kalori\"\n    },\n    \"uk\": {\n      \"appName\": \"Калорії\"\n    },\n    \"vi\": {\n      \"appName\": \"Calo\"\n    },\n    \"zh-TW\": {\n      \"appName\": \"卡路里\"\n    }\n  },\n  \"defaultLanguage\": \"en-US\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing connectStatus from BLE Module in JavaScript\nDESCRIPTION: Example of importing the connectStatus function from the ZeppOS BLE module in JavaScript. This function is used to check if the current device is connected to a client.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/connectStatus.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connectStatus } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Closing a File with hmFS.close in JavaScript\nDESCRIPTION: Example showing how to open a file for reading and writing, creating it if it doesn't exist, and then closing the file using hmFS.close().\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/close.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileId = hmFS.open(\"test_file.txt\", hmFS.O_RDWR | hmFS.O_CREAT)\n\n//Close file\nhmFS.close(fileId)\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Files Dynamically in Zepp OS v3\nDESCRIPTION: Example of using the zosLoader prefix to dynamically import layout files based on screen characteristics in a Zepp OS v3 Mini Program. This approach allows for automatic selection of the appropriate layout file during build time.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/screen-adaption.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport { layout } from 'zosLoader:./[name].[pf].layout.js'\n```\n\n----------------------------------------\n\nTITLE: Defining View Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the View component in TypeScript. It specifies the component's props and render function parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/view.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining View Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the View component in TypeScript. It specifies the component's props and render function parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/view.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Unregistering Standing Hours Change Listener in ZeppOS\nDESCRIPTION: TypeScript method signature for canceling a previously registered callback function for standing behavior changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: ReadFileSync Type Definition\nDESCRIPTION: TypeScript type definition for the readFileSync function showing the expected parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/readFileSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readFileSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Chinese Lunar Holidays in TypeScript\nDESCRIPTION: Retrieves Chinese lunar holidays using the Time sensor, or returns 'INVALID' if there is no holiday. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarFestival(): string\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition - resetDropWristScreenOff\nDESCRIPTION: TypeScript type definition for the resetDropWristScreenOff function that resumes wrist drop resting behavior. Returns a numeric Result where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/resetDropWristScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction resetDropWristScreenOff(): Result\n```\n\n----------------------------------------\n\nTITLE: Event Listener Registration - JavaScript\nDESCRIPTION: Register callback events for time sensor instance\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntime.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Download Progress in JavaScript\nDESCRIPTION: Example showing how to track download progress by setting an onProgress callback function on a download task.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/download-file.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst downloadTask = network.downloader.downloadFile({\n  url: 'https://docs.zepp.com/zh-cn/img/logo.png',\n  headers: { key: 121 },\n  timeout: 60000\n})\n\ndownloadTask.onProgress = (ev) => {\n  console.log(ev.progress)\n  console.log(ev.total)\n  console.log(ev.loaded)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating STEP Sensor in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a STEP sensor instance using the hmSensor API. The STEP sensor provides current step count and target step information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst step = hmSensor.createSensor(hmSensor.id.STEP)\n```\n\n----------------------------------------\n\nTITLE: Using closeSync Function in JavaScript\nDESCRIPTION: Example of using the closeSync function in a JavaScript ZeppOS application. It demonstrates opening a file, closing it, and checking the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, closeSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\nconst result = closeSync({\n  fd,\n})\n\nif (result === 0) {\n  console.log('file descriptor closed')\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logs in Device App using @zos/utils\nDESCRIPTION: Demonstrates how to implement logging in the Device App component using the log function from @zos/utils module. Shows different logging levels (log and error) using a logger instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/debug.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { log } from '@zos/utils'\n\nconst pageLogger = log.getLogger('page')\n\npageLogger.log('page created')\npageLogger.error('page error')\n```\n\n----------------------------------------\n\nTITLE: CheckFunc Callback Type Definition for CHECKBOX_GROUP\nDESCRIPTION: This code defines the callback function type that handles state changes in CHECKBOX_GROUP. It receives the checkbox group instance, the index of the changed item, and its checked state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n(checkboxGroup: CheckboxGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: ItemClickFunc Callback Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the item click function callback in ScrollList. The function is called when an item is clicked and provides the list reference, index, and data key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n(list: ScrollList, index: number, data_key: string) => void\n```\n\n----------------------------------------\n\nTITLE: Using closeSync Function in JavaScript\nDESCRIPTION: Example of using the closeSync function in a JavaScript ZeppOS application. It demonstrates opening a file, closing it, and checking the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, closeSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\nconst result = closeSync({\n  fd,\n})\n\nif (result === 0) {\n  console.log('file descriptor closed')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining addLayoutChild Method Type in TypeScript\nDESCRIPTION: Specifies the TypeScript type definition for the addLayoutChild method, including parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/addLayoutChild.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(child: UIWidget, index?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Converting File Operations from ZeppOS 1.0 to 2.0\nDESCRIPTION: Example of migrating file operations between ZeppOS versions. In 1.0, file operations used hmFS with flags like O_RDWR, while 2.0 requires importing from @zos/fs and using an object-based parameter structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/migration-guide.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fd = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, O_RDWR, O_CREAT } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDWR | O_CREAT\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Device Screen Brightness\nDESCRIPTION: Example showing how to retrieve the current screen brightness level using the hmSetting.getBrightness() method. Returns a number between 0 and 100.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.getBrightness()\n```\n\n----------------------------------------\n\nTITLE: Implementing SecondaryWidget in JavaScript\nDESCRIPTION: This example demonstrates how to use the SecondaryWidget function to create a secondary screen application. It includes state initialization, lifecycle callbacks, and basic UI rendering.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/global/SecondaryWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSecondaryWidget({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Calculating Multi-line Text Layout with getTextLayout in JavaScript\nDESCRIPTION: Example of using getTextLayout to calculate the width and height of multi-line text with specified size and width constraints.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTextLayout } from '@zos/ui'\n\nconst { width, height } = getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 200\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Implementing addLayoutChild Method in JavaScript\nDESCRIPTION: Example of using the addLayoutChild method to add child widgets to a container in ZeppOS. The example demonstrates adding a button to a virtual container both at the end and at a specific position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/addLayoutChild.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst container = createWidget(widget.VIRTUAL_CONTAINER)\nconst button = createWidget(widget.BUTTON)\n\n// 添加子节点到容器末尾\ncontainer.addLayoutChild(button)\n\n// 添加子节点到指定位置\ncontainer.addLayoutChild(button, 0)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with send in Messaging API\nDESCRIPTION: This snippet shows how to send data from the Side Service to the connected device. It retrieves notes from storage, converts them to a Buffer, and sends the buffer data through the messaging.peerSocket.send method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/messaging.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (key === 'notes') {\n  const notes = settings.settingsStorage.getItem('notes')\n  const noteBuffer = Buffer.from(notes)\n  messaging.peerSocket.send(noteBuffer.buffer)\n}\n```\n\n----------------------------------------\n\nTITLE: Extended app.json Configuration for Multiple Devices\nDESCRIPTION: Complete app.json configuration showing targets setup for both GTR-3 Pro and GTR-3 devices, including platform specifications and design settings for each.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ···\n      },\n      \"platforms\": [\n        {\n          \"name\": \"gtr-3-pro\",\n          \"deviceSource\": 229\n        },\n        {\n          \"name\": \"gtr-3-prow\",\n          \"deviceSource\": 230\n        }\n      ],\n      \"designWidth\": 480\n    },\n    \"gtr-3\": {\n      \"module\": {\n        // ···\n      },\n      \"platforms\": [\n        {\n          \"name\": \"gtr-3\",\n          \"deviceSource\": 226\n        },\n        {\n          \"name\": \"gtr-3w\",\n          \"deviceSource\": 227\n        }\n      ],\n      \"designWidth\": 480\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mkdirSync Function Signature in TypeScript\nDESCRIPTION: Declares the function signature for mkdirSync, including the Option type parameter and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/mkdirSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mkdirSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for px Function\nDESCRIPTION: Type definition for the px function that takes a PxValue parameter and returns a scaled Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/px.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction px(value: PxValue): Result\n```\n\n----------------------------------------\n\nTITLE: Creating a CYCLE_LIST Widget in ZeppOS\nDESCRIPTION: Code showing how to import and create a basic CYCLE_LIST widget using the ZeppOS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst cycleList = createWidget(widget.CYCLE_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Printing Warn Level Logs in TypeScript\nDESCRIPTION: Method to print warn level logs. It accepts multiple string arguments.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwarn(...args: string[]): void\n```\n\n----------------------------------------\n\nTITLE: Using getCurrentPage in Zepp OS Page Component\nDESCRIPTION: Example of defining a Page component and using getCurrentPage to access the page instance's state. This demonstrates how to structure a page and retrieve its data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/global/getCurrentPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n\nconst page = getCurrentPage()\nconsole.log(page._options.state.text)\n```\n\n----------------------------------------\n\nTITLE: Defining addHealthData Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the addHealthData function, showing its signature with Option parameter and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/user/addHealthData.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addHealthData(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Using getScrollTop Function in JavaScript\nDESCRIPTION: Example of how to import and use the getScrollTop function to retrieve the current vertical scroll position of a page in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/getScrollTop.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getScrollTop } from '@zos/page'\n\nconst top = getScrollTop()\nconsole.log(top)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic SecondaryWidget in Zepp OS\nDESCRIPTION: Code snippet showing the implementation of a simple SecondaryWidget that displays \"HELLO, Zepp OS\" text. This demonstrates the basic structure required for creating a Widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/secondary-widget.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport { createWidget, widget, align, text_style } from '@zos/ui'\n\nSecondaryWidget({\n  build() {\n    const text = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO, Zepp OS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getDiskInfo Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the getDiskInfo function that returns disk information including total, free, app, watchface, music, and system space in bytes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/device/getDiskInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDiskInfo(): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Sleep Stage Constants Type Definition\nDESCRIPTION: TypeScript interface for retrieving sleep stage constant values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStageConstantObj(): StageConstants\n```\n\n----------------------------------------\n\nTITLE: Using Assets Function for Path Construction\nDESCRIPTION: JavaScript example demonstrating how to use the assets function to construct resource paths. Shows both regular and RTL path construction for image resources.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/assets.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { assets } from '@zos/utils'\n\nconst imagePath = 'zeppos-logo.png'\nconst assetsPathFunc = assets('img')\n\nconsole.log(assetsPathFunc(imagePath)) // img/zeppos-logo.png\nconsole.log(assetsPathFunc(imagePath, true)) // img/zeppos-logo@rtl.png\n```\n\n----------------------------------------\n\nTITLE: Using Assets Function for Path Construction\nDESCRIPTION: JavaScript example demonstrating how to use the assets function to construct resource paths. Shows both regular and RTL path construction for image resources.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/assets.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { assets } from '@zos/utils'\n\nconst imagePath = 'zeppos-logo.png'\nconst assetsPathFunc = assets('img')\n\nconsole.log(assetsPathFunc(imagePath)) // img/zeppos-logo.png\nconsole.log(assetsPathFunc(imagePath, true)) // img/zeppos-logo@rtl.png\n```\n\n----------------------------------------\n\nTITLE: Setting Paint Properties for Canvas in Zepp OS\nDESCRIPTION: Shows how to set paint properties like color and line width for subsequent drawing operations on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.setPaint({\n  color: 0xff0000,\n  line_width: 10\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters During Page Navigation in Zepp OS\nDESCRIPTION: Demonstrates how to pass parameters from pageA.js to pageB.js using the push API for page navigation in Zepp OS mini programs.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'path/to/pageB',\n  params: {\n    id: '0',\n    type: 'normal'\n  }\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  onInit(params) {\n    const paramsObj = JSON.parse(params)\n    const { id, type } = paramsObj\n    console.log(id === '0') // true\n    console.log(type === 'normal') // true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in TypeScript\nDESCRIPTION: Demonstrates how to import the Time sensor and get the current UTC timestamp in milliseconds.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Time } from '@zos/sensor'\n\nconst time = new Time()\nconst currentTime = time.getTime()\n```\n\n----------------------------------------\n\nTITLE: Back Function Type Definition - TypeScript\nDESCRIPTION: TypeScript type definition for the back() function that returns void and takes no parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/back.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction back(): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrist Motion Monitoring in JavaScript\nDESCRIPTION: Example of using the onWristMotion function to monitor wrist lift events in ZeppOS. It imports necessary functions and constants, then sets up a callback to handle wrist motion events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onWristMotion.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onWristMotion, WRIST_MOTION_LIFT } from '@zos/interaction'\n\nonWristMotion({\n  callback: (result) => {\n    const { type, motion } = result\n\n    if (type === 3) {\n      console.log(motion === WRIST_MOTION_LIFT)\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Link Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Link component function in Zepp OS. The function accepts props and optional render functions, and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/link.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Simplified setAutoBrightness Function Signature in TypeScript\nDESCRIPTION: This snippet presents a simplified TypeScript function signature for setAutoBrightness, taking a boolean parameter directly instead of an Option object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setAutoBrightness(autoBright: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT_IMG Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a TEXT_IMG widget using hmUI.createWidget(). It requires passing an object with various parameters including coordinates, dimensions, and a font array.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst textImg = hmUI.createWidget(hmUI.widget.TEXT_IMG, Param)\n```\n\n----------------------------------------\n\nTITLE: Drawing Polygon on CANVAS in Zepp OS\nDESCRIPTION: Illustrates drawing a polygon outline on the CANVAS widget using the strokePoly method, specifying an array of coordinate points and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst coordinateArray = [\n  { x: 233, y: 30 },\n  { x: 130, y: 230 },\n  { x: 400, y: 200 },\n  { x: 233, y: 30 }\n]\n\ncanvas.strokePoly({\n  data_array: coordinateArray,\n  color: 0x00ffff,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getUserData Function Type in TypeScript\nDESCRIPTION: Specifies the type signature for the getUserData function, which takes no parameters and returns a userData object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getUserData.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => userData\n```\n\n----------------------------------------\n\nTITLE: Using getDistanceUnit Function in JavaScript\nDESCRIPTION: Demonstrates how to import and use the getDistanceUnit function to check if the current distance unit is metric. It also imports the DISTANCE_UNIT_METRIC constant for comparison.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getDistanceUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDistanceUnit, DISTANCE_UNIT_METRIC } from '@zos/settings'\n\nconst distanceUnit = getDistanceUnit()\n\nif (distanceUnit === DISTANCE_UNIT_METRIC) {\n  console.log('metric')\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Settings Storage Changes in JavaScript\nDESCRIPTION: Example of using the addListener method to listen for changes to data in settingsStorage. This is used in the Side Service to respond to changes made by the Settings App.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsettings.settingsStorage.addListener('change', async ({ key, newValue, oldValue }) => {\n  if (key === 'token' && newValue) {\n    // ...\n    await reLogin()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating a Gradient Polyline Widget in ZeppOS\nDESCRIPTION: This code demonstrates how to create a gradient polyline widget, clear the canvas, and add lines and points to it. The widget supports data types like SLEEP and HEART which allow firmware-level drawing of data. It shows setting up line data with x,y coordinates and adding them to the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/GRADKIENT_POLYLINE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n//Clear the canvas each time you set_more.\nconst lineDatas = [\n  { x: 0, y: 0 },\n  { x: 100, y: 10 },\n  { x: 200, y: 50 }\n]\nvar widget = hmUI.createWidget(hmUI.widget.GRADKIENT_POLYLINE, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 200,\n  type: hmUI.data_type.SLEEP //If you set the type, the function below can be used to let the firmware draw the data, currently only HEART and SLEEP are supported.\n})\n//JS draws the data.\nwidget.clear() //clear the canvas\nwidget.addLine({\n  //Add line.\n  data: lineDatas,\n  count: lineDatas.length\n})\nwidget.addPoint({\n  //Add point.\n  data: lineDatas,\n  count: lineDatas.length\n})\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProSetChars and SysProGetChars in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmFS.SysProSetChars function to store a temporary string and then retrieve it using hmFS.SysProGetChars. The stored string will be cleared when the system restarts.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nhmFS.SysProSetChars('js_test_char', 'hello')\nconsole.log(hmFS.SysProGetChars('js_test_char'))\n```\n\n----------------------------------------\n\nTITLE: Using the ScrollTo API in Zepp OS 2.0\nDESCRIPTION: Shows how to use the scrollTo function from the page module in Zepp OS 2.0. This example demonstrates both the standard object parameter method and the simplified call method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/new-api.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollTo } from '@zos/page'\n\nscrollTo({\n  y: 200\n})\n\n// Simplified call\nscrollTo(200)\n```\n\n----------------------------------------\n\nTITLE: Getting Mileage Unit in Zepp OS (JavaScript)\nDESCRIPTION: Example of using hmSetting.getMileageUnit() to retrieve the current distance unit setting. The function returns a number: 0 for metric, 1 for imperial.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getMileageUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mileageUnit = hmSetting.getMileageUnit()\n```\n\n----------------------------------------\n\nTITLE: API Version Configuration for Zepp OS Mini Programs\nDESCRIPTION: Example of the apiVersion object in a Mini Program configuration which specifies compatible, target, and minimum versions required for the app to function properly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"runtime\": {\n    \"apiVersion\": {\n      \"compatible\": \"1.0.0\",\n      \"target\": \"1.0.1\",\n      \"minVersion\": \"1.0.0\"\n    }，\n  \"type\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using clearLaunchAppTimeout to Cancel App Launch Timer in JavaScript\nDESCRIPTION: Example showing how to create a timer with setLaunchAppTimeout and then cancel it using clearLaunchAppTimeout. This demonstrates the full workflow for managing app launch timers in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { setLaunchAppTimeout, clearLaunchAppTimeout } from '@zos/router'\n\nconst timeoutId = setLaunchAppTimeout({\n  url: 'pages/js_widget_sample',\n  appId: 1000001,\n  delay: 10000,\n})\n\nclearLaunchAppTimeout({\n  timeoutId,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Buzzer Strength in TypeScript\nDESCRIPTION: This method gets the buzzer strength, where 0 is weak, 1 is medium, and 2 is high.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStrength(): number\n```\n\n----------------------------------------\n\nTITLE: ItemFocusChangeFunc Type Definition\nDESCRIPTION: TypeScript type definition for the item focus change callback function. Defines the signature for handling focus events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(cycleList: CycleList, index: number, isFocus: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Getting Hours in TypeScript\nDESCRIPTION: Shows how to get the current hour using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetHours(): number\n```\n\n----------------------------------------\n\nTITLE: ItemFocusChangeFunc Type Definition\nDESCRIPTION: TypeScript type definition for the item focus change callback function. Defines the signature for handling focus events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(cycleList: CycleList, index: number, isFocus: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmApp.unregisterKeyEvent() in TypeScript\nDESCRIPTION: Type definition for the unregisterKeyEvent method which returns void and takes no parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/keyEvent/unregisterKeyEvent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Using redraw() Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the redraw() function from the @zos/ui module in JavaScript. It's used to manually trigger a view update.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/redraw.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { redraw } from '@zos/ui'\n\nredraw()\n```\n\n----------------------------------------\n\nTITLE: Using setLaunchAppTimeout and clearLaunchAppTimeout in JavaScript\nDESCRIPTION: This example demonstrates how to use the setLaunchAppTimeout function to schedule a mini-program launch, and how to cancel it using clearLaunchAppTimeout. It includes importing the functions, setting a timeout, and clearing it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/router/setLaunchAppTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLaunchAppTimeout, clearLaunchAppTimeout } from '@zos/router'\n\nconst timeoutId = setLaunchAppTimeout({\n  url: 'pages/js_widget_sample',\n  appId: 1000001,\n  delay: 1000,\n})\n\nclearLaunchAppTimeout({\n  timeoutId,\n})\n```\n\n----------------------------------------\n\nTITLE: RADIO_GROUP CheckFunc Callback Type Definition\nDESCRIPTION: Type definition for the check_func callback function used in RADIO_GROUP widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(radioGroup: RadioGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Registering SPO2 Sensor Event Listener in JavaScript\nDESCRIPTION: This example shows how to register an event listener for the SPO2 sensor to handle changes in sensor data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nspo2.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(spo2.current)\n  console.log(spo2.time)\n  console.log(spo2.retcode)\n})\n```\n\n----------------------------------------\n\nTITLE: QRCODE Widget Implementation Example\nDESCRIPTION: A complete example showing how to create a QRCODE widget within a Page component. This example sets the QR code content, position, dimensions, and background properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/QRCODE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const qrcode = createWidget(widget.QRCODE, {\n      content: 'Hello Zepp OS',\n      x: 140,\n      y: 140,\n      w: 200,\n      h: 200,\n      bg_x: 120,\n      bg_y: 120,\n      bg_w: 240,\n      bg_h: 240\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Image Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Image component, showing it accepts Props as an input and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/image.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Storage setItem Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setItem method which stores key-value pairs persistently in the Zepp App.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, value: string) => void\n```\n\n----------------------------------------\n\nTITLE: Setting Paint Properties for CANVAS in Zepp OS\nDESCRIPTION: Shows how to set paint properties like color and line width for the CANVAS widget using the setPaint method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.setPaint({\n  color: 0xff0000,\n  line_width: 10\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Zeus CLI via npm\nDESCRIPTION: Commands to install Zeus CLI globally using npm or yarn package managers. Requires Node.js >= 14.0.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/cli/index.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @zeppos/zeus-cli -g\n\n// or\n\nyarn global @zeppos/zeus-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Types for ScrollList Items in JavaScript\nDESCRIPTION: Sets up the data type configuration for ScrollList items. This allows different styling and layouts to be applied to specific ranges of items in the list.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\ndata_type_config:[\n  // Represents that data entries from index 0 to 2 use the style configuration with type_id 2\n  {\n  start: 0,\n  end: 2,\n  type_id: 2,\n  },\n  {\n  start: 3,\n  end: 10,\n  type_id: 1,\n  },\n],\ndata_type_config_count:2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Storage setItem Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setItem method which stores key-value pairs persistently in the Zepp App.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, value: string) => void\n```\n\n----------------------------------------\n\nTITLE: RADIO_GROUP CheckFunc Callback Type Definition\nDESCRIPTION: Type definition for the check_func callback function used in RADIO_GROUP widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(radioGroup: RadioGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_CLICK Widget in ZeppOS (JavaScript)\nDESCRIPTION: Creates a clickable image widget using hmUI.createWidget with the IMG_CLICK type. This widget is positioned at specific coordinates, has defined dimensions, displays an image when clicked, and jumps to a specific data screen (STRESS) when activated.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_CLICK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet click = hmUI.createWidget(hmUI.widget.IMG_CLICK, {\n  x: 329,\n  y: 337,\n  w: 40,\n  h: 23,\n  src: rootPath + 'click.png', // Image to be displayed when clicked.\n  type: hmUI.data_type.STRESS\n  //Must write.The action to jump.\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Types for ScrollList Items in JavaScript\nDESCRIPTION: Sets up the data type configuration for ScrollList items. This allows different styling and layouts to be applied to specific ranges of items in the list.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\ndata_type_config:[\n  // Represents that data entries from index 0 to 2 use the style configuration with type_id 2\n  {\n  start: 0,\n  end: 2,\n  type_id: 2,\n  },\n  {\n  start: 3,\n  end: 10,\n  type_id: 1,\n  },\n],\ndata_type_config_count:2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining emitCustomSystemEvent Function Type in TypeScript\nDESCRIPTION: TypeScript definition for the emitCustomSystemEvent function, showing the function signature and expected parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/app/emitCustomSystemEvent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction emitCustomSystemEvent(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Timer Creation and Stopping in JavaScript\nDESCRIPTION: This example shows how to create a periodic timer using createSysTimer, and then stop it after a delay using stopTimer. It demonstrates the practical usage of both timer creation and stopping functions in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/timer/stopTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSysTimer, stopTimer } from '@zos/timer'\n\n// Create a periodic timer that executes every 10 seconds\nconst timerId = createSysTimer(true, 10000, () => {\n  console.log('Execute every 10 seconds')\n})\n\n// Stop the timer after 5 seconds\ncreateSysTimer(false, 5000, () => {\n  stopTimer(timerId)\n  console.log('Timer stopped')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Editable Watch Pointers\nDESCRIPTION: Sets up editable watch pointers with hour, minute, and second hand configurations, including positioning and preview images.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointerConfig = [\n  {\n    id: 1,\n    hour: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 12,\n      posY: 172,\n      path: pointPath + 'hand_4_h.png'\n    },\n    minute: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 18,\n      posY: 229,\n      path: pointPath + 'hand_4_m.png'\n    },\n    second: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 13,\n      posY: 245,\n      path: pointPath + 'hand_all_s.png'\n    },\n    preview: pointPath + 'preview1.png'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Complete CYCLE_IMAGE_TEXT_LIST Implementation - JavaScript\nDESCRIPTION: Full example showing widget creation, data array setup, and list manipulation including getting and setting the top index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataArray = [\n  { text: '0' },\n  { text: '1' },\n  { text: '2' },\n  { text: '3' },\n  { text: '4' },\n  { text: '5' },\n  { text: '6' },\n  { text: '7' },\n  { text: '8' },\n  { text: '9' }\n]\n\ncycleImageTextList = hmUI.createWidget(hmUI.widget.CYCLE_IMAGE_TEXT_LIST, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 300,\n  data_array: dataArray,\n  data_size: 10,\n  item_height: 50,\n  item_text_color: 0xffffff,\n  item_text_size: 18\n})\n\n// Get the index at the top of the scrolling list\nresult = cycleImageTextList.getProperty(hmUI.prop.MORE, {})\nconsole.log(result.index)\n\n// Set the index at the top of the scrolling list\ncycleImageTextList.setProperty(hmUI.prop.LIST_TOP, { index: 3 })\n```\n\n----------------------------------------\n\nTITLE: Defining offKey Function Type in TypeScript\nDESCRIPTION: Defines the type signature for the offKey function, which takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/interaction/offKey.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction offKey(): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Logic Class for ZeppOS Mini Program\nDESCRIPTION: Shows how to create a separate class file for handling logic in a ZeppOS Mini Program. This approach allows for better organization of code and improved testability.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/code-organization.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class TextClass {\n  constructor() {\n    this.text = 'Hello World'\n  }\n  getText() {\n    return this.text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SPO2 Measurement in JavaScript\nDESCRIPTION: Starts the blood oxygen measurement using the SPO2 sensor. It's recommended to call stop() before starting a new measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nspo2.start()\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Opacity using setAlpha in ZeppOS\nDESCRIPTION: This example demonstrates how to create a text widget and set its opacity using the setAlpha method. It imports necessary functions from @zos/ui, creates a TEXT widget with specific properties, and then sets its alpha value to 80.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/setAlpha.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\n\nconst text = createWidget(widget.TEXT, {\n  x: 96,\n  y: 120,\n  w: 288,\n  h: 46,\n  color: 0xffffff,\n  text_size: 36,\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.NONE,\n  text: 'HELLO ZEPPOS'\n})\n\ntext.setAlpha(80)\n```\n\n----------------------------------------\n\nTITLE: Data Array Configuration Example\nDESCRIPTION: Example data array showing how to bind data to SCROLL_LIST items with image and text content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataList = [\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '12' },\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '13' },\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '13' }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Target - JavaScript Example\nDESCRIPTION: Example showing how to import and use the getSleepTarget function to retrieve the user's sleep target setting.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getSleepTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSleepTarget } from '@zos/settings'\n\nconst sleepTarget = getSleepTarget()\nconsole.log(sleepTarget)\n```\n\n----------------------------------------\n\nTITLE: Setting up Ubuntu 24 environment for Zepp OS Simulator 2.0\nDESCRIPTION: This script installs necessary libraries and creates a symbolic link for libaio.so.1 on Ubuntu 24 to ensure proper functioning of the Zepp OS Simulator 2.0. It requires sudo privileges to run.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/simulator-faq.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nARCH=$(uname -m)\nLIB_DIR=\"/usr/lib/$ARCH-linux-gnu\"\n\nif [ -f \"/etc/lsb-release\" ] && [ \"$(lsb_release -sc)\" == \"noble\" ]; then\n  apt-get install -y libcapstone4 libsdl2-dev libaio-dev\n  if [ ! -e \"${LIB_DIR}/libaio.so.1\" ]; then\n    ln -s ${LIB_DIR}/libaio.so.1t64 ${LIB_DIR}/libaio.so.1\n  fi\nfi\n```\n\n----------------------------------------\n\nTITLE: Defining settingsStorage API Types in TypeScript\nDESCRIPTION: TypeScript type definitions for the setItem and getItem methods of the settingsStorage API. These methods are used for storing and retrieving key-value pairs.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(key: string, value: string) => void\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n(key: string) => result: string | undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Weather Sensor in ZeppOS (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a weather sensor using the hmSensor module in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst weather = hmSensor.createSensor(hmSensor.id.WEATHER)\n```\n\n----------------------------------------\n\nTITLE: Registering CHANGE Event Listener for STAND Sensor in JavaScript\nDESCRIPTION: This code shows how to register a callback function for the CHANGE event of the STAND sensor. The callback logs the current standing hours and the target.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstand.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('the current stand: ' + stand.current + ' target: ' + stand.target + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Period Reminder with ZeppOS\nDESCRIPTION: Example showing how to configure a custom repeating reminder that occurs every 21 days by using repeat_period and repeat_duration parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/alarm/set.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Reminder every 21 days\nimport { set, REPEAT_DAY } from '@zos/alarm'\n\nconst option = {\n  url: 'pages/index.js',\n  time: 12345678,\n  repeat_type: REPEAT_DAY,\n  repeat_period: 20,\n  repeat_duration: 1,\n}\nconst id = set(option)\n```\n\n----------------------------------------\n\nTITLE: Getting Altitude Method - TypeScript\nDESCRIPTION: Method to retrieve the current altitude value in meters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAltitude(): number\n```\n\n----------------------------------------\n\nTITLE: Defining statSync Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for the statSync function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/statSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction statSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Stopping Location Tracking - TypeScript\nDESCRIPTION: Method signature for stopping the location tracking service.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Geolocation.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Data in ZeppOS Pages\nDESCRIPTION: Demonstrates how to access the global data from any page in the Mini Program. This example shows pageA.js retrieving the type value from globalData.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    console.log(getApp()._options.globalData.type)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for hmFS.read Function\nDESCRIPTION: The type definition for the hmFS.read function, which reads file content into a buffer with specified position and length parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/read.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, buffer: ArrayBuffer, position: number, length: number) => result\n```\n\n----------------------------------------\n\nTITLE: Importing Brightness Settings Documentation Component\nDESCRIPTION: Imports a React/MDX content component containing documentation for the getBrightness device setting API from a relative path\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getBrightness.mdx'\n```\n\n----------------------------------------\n\nTITLE: Using Home Navigation Function in JavaScript\nDESCRIPTION: Example showing how to import and use the home() function from the @zos/router module to exit the Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/home.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { home } from '@zos/router'\n\nhome()\n```\n\n----------------------------------------\n\nTITLE: Creating RADIO_GROUP and STATE_BUTTON Widgets in ZeppOS\nDESCRIPTION: Code showing how to import and create a RADIO_GROUP widget and accompanying STATE_BUTTON widget. The RADIO_GROUP widget is used for single-option selection, while each STATE_BUTTON represents a selectable option.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst radioGroup = createWidget(widget.RADIO_GROUP, radioGroupParam)\nconst stateButton = createWidget(widget.STATE_BUTTON, stateButtonParam)\n```\n\n----------------------------------------\n\nTITLE: Using Replace Function in JavaScript\nDESCRIPTION: Example of how to use the replace function in JavaScript. It demonstrates importing the function from the @zos/router module and calling it with a URL and parameters to navigate to a new page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/replace.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { replace } from '@zos/router'\n\nreplace({\n  url: 'page/index',\n  params: 'type=1',\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Last Heart Rate Change Callback in TypeScript\nDESCRIPTION: This snippet shows how to register a callback function for changes in the last heart rate measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonLastChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Storage getItem Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getItem method which retrieves a stored value by its key name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result: string\n```\n\n----------------------------------------\n\nTITLE: Barometer Usage Example - JavaScript\nDESCRIPTION: Complete example showing how to initialize the Barometer sensor, get readings, and handle change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Barometer } from '@zos/sensor'\n\nconst barometer = new Barometer()\nconst airPressure = barometer.getAirPressure()\nconst altitude = barometer.getAltitude()\n\nconst callback = () => {\n  console.log(barometer.getAltitude())\n}\n\nbarometer.onChange(callback)\n\n// When not needed for use\nbarometer.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Defining setItem Method Type in TypeScript\nDESCRIPTION: Type definition for the setItem method, which stores key-value pairs persistently in the Zepp App.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, value: string) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_PROGRESS with Image Arrays\nDESCRIPTION: Complete example showing how to create an IMG_PROGRESS widget with coordinate arrays, image paths, and level configuration. The widget displays 3 images with specified positions and sets the progress level to 2.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xArray = [100, 200, 300]\nconst yArray = [100, 200, 300]\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, {\n  x: xArray,\n  y: yArray,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Air Pressure in TypeScript\nDESCRIPTION: Gets the current air pressure value in hectopascals (hPa).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetAirPressure(): number\n```\n\n----------------------------------------\n\nTITLE: Creating RADIO_GROUP and STATE_BUTTON Widgets in ZeppOS\nDESCRIPTION: Code showing how to import and create a RADIO_GROUP widget and accompanying STATE_BUTTON widget. The RADIO_GROUP widget is used for single-option selection, while each STATE_BUTTON represents a selectable option.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst radioGroup = createWidget(widget.RADIO_GROUP, radioGroupParam)\nconst stateButton = createWidget(widget.STATE_BUTTON, stateButtonParam)\n```\n\n----------------------------------------\n\nTITLE: Complete Barometer Usage Example in JavaScript\nDESCRIPTION: A complete example showing how to import the Barometer class, create an instance, get air pressure and altitude readings, and register/unregister change event listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Barometer } from '@zos/sensor'\n\nconst barometer = new Barometer()\nconst airPressure = barometer.getAirPressure()\nconst altitude = barometer.getAltitude()\n\nconst callback = () => {\n  console.log(barometer.getAltitude())\n}\n\nbarometer.onChange(callback)\n\n// When not needed for use\nbarometer.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Properties in JavaScript\nDESCRIPTION: This example demonstrates how to get all properties of a widget using hmUI.prop.MORE, and how to extract specific properties from the result. It also shows how to get a single property directly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/getProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst img_bkg = hmUI.createWidget(hmUI.widget.IMG)\nconst prop = img_bkg.getProperty(hmUI.prop.MORE, {})\nconst { angle, w, h } = prop\n\nconst imgHeight = img_bkg.getProperty(hmUI.prop.H)\n```\n\n----------------------------------------\n\nTITLE: Creating STROKE_RECT Widget - Complete Example\nDESCRIPTION: Complete example showing creation of a STROKE_RECT widget with rounded corners, custom stroke width, and click event handling. Demonstrates setting initial properties and updating them through event listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const strokeRect = createWidget(widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using emitCustomSystemEvent to Dispatch Custom System Events in JavaScript\nDESCRIPTION: Example of importing and using the emitCustomSystemEvent function to dispatch a custom system event with a specific name and parameters that will be passed to the AppService's onInit lifecycle function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/app/emitCustomSystemEvent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emitCustomSystemEvent } from '@zos/app'\n\nemitCustomSystemEvent({\n  eventName: 'event:customize.test',\n  eventParam: 'eventName=event:customize.test&type=0',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG Widget with Basic Parameters in ZeppOS\nDESCRIPTION: Basic syntax for creating an image widget in ZeppOS. Uses the createWidget function with widget.IMG type and requires a parameters object for configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/IMG.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst img = createWidget(widget.IMG, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing Screen Keep in JavaScript\nDESCRIPTION: Example showing how to enable screen keep functionality in a Mini Program to maintain program state after screen timeout.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/setScreenKeep.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Screen hold\nhmApp.setScreenKeep(true)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling App from Runtime Environment\nDESCRIPTION: Command to uninstall the current directory's application from the runtime environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuninstall\n```\n\n----------------------------------------\n\nTITLE: Registering CALORIE Sensor Event Listener in JavaScript\nDESCRIPTION: This code shows how to register an event listener for the CALORIE sensor's CHANGE event in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Defining onComplete Callback Types in TypeScript\nDESCRIPTION: TypeScript type definition for the onComplete callback function that is called when a download task finishes, regardless of success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/download-file.mdx#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating STAND Sensor in JavaScript\nDESCRIPTION: Creates a STAND sensor instance using hmSensor.createSensor() and logs the current value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stand = hmSensor.createSensor(hmSensor.id.STAND)\n\nconsole.log(stand.current)\n```\n\n----------------------------------------\n\nTITLE: Registering CALORIE Sensor Event Listener in JavaScript\nDESCRIPTION: This code shows how to register an event listener for the CALORIE sensor's CHANGE event in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Devices in app.json for ZeppOS\nDESCRIPTION: Example of configuring the 'targets' object in app.json with designWidth values for different device models used for scaling calculations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"designWidth\": 480\n    },\n    \"gtr-3\": {\n      \"designWidth\": 480\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using openAssetsSync to Open an Asset File in JavaScript\nDESCRIPTION: Example code demonstrating how to use the openAssetsSync function to open a file from the assets directory with read-only access.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/openAssetsSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openAssetsSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageView for SCROLL_LIST in ZeppOS\nDESCRIPTION: This code snippet shows how to configure image views within a SCROLL_LIST item. It defines an array with a single image view object, specifying its position, size, and data binding key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst image_view = [{ x: 0, y: 0, w: 20, h: 20, key: 'img_src' }]\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Specific Data Elements in Markdown Table\nDESCRIPTION: A markdown table specifying type-specific data elements for watchface design, including heart rate, calorie, weather, and other metrics. It provides naming conventions, custom progress options, and maximum digit specifications for each type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/specification.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|type|name|explain|custom progress|maximum digit|\n|:--|:--|:--|:--|:--|\n|heart rate|heart||Section 6|3 bits（000）|\n|calorie|calorie||Section 10|4 bits（0000）|\n|pai|pai||Section 10|3 bits（000）|\n|step|step||Section 10|5 bits（00000）|\n|distance|distance|||5 bits（00000）|\n|weather|Cloudy: 0<br/>Shower: 1<br/>Snow shower: 2<br/>Sunny: 3<br/>Overcast: 4<br/>Light rain: 5<br/>Light snow: 6<br/>Moderate rain: 7<br/>Moderate snow: 8<br/>Heavy snow: 9<br/>Heavy rain: 10<br/>Sandstorm: 11<br/>Sleet: 12<br/>Fog: 13<br/>Haze: 14<br/>Thundershower: 15<br/>Snowstorm: 16<br/>Dust: 17<br/>Extraordinary rainstorm: 18<br/>Rain with hail: 19<br/>Thundershowers with hail: 20<br/>Heavy rainstorm: 21<br/>Sand blowing: 22<br/>Strong sandstorm: 23<br/>Rainstorm: 24<br/>Unknown weather: 25<br/>Cloudy at night: 26<br/>Shower at night: 27<br/>Clear night: 28|The picture must correspond to the number.|||\n|temperature|temperature||Section 10|3 bits（000）|\n|humidity|humidity||Section 10|3 bits（000）|\n|ultraviolet ray|uvi||Section 10|2 bits（00）|\n|air quality|aqi||Section 10|3 bits（000）|\n|sunrise|sunrise||||\n|sunset|sunset||||\n|battery|power||Section 10|3 bits（000）|\n|Bluetooth|connect/disconnect||||\n|lock Screen|lock / unlock||||\n|alarm clock|clock / unclock||||\n|dnd|DNDoff / DNDopen||||\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Settings in ZeppOS app.json\nDESCRIPTION: Demonstrates how to set the runtime property in app.json, which specifies runtime configurations like API version compatibility and interpreter type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtime\": {\n    \"apiVersion\": {\n      \"compatible\": \"1.0.0\",\n      \"target\": \"1.0.1\",\n      \"minVersion\": \"1.0.0\"\n    },\n  \"type\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FILL_RECT Widget in ZeppOS\nDESCRIPTION: Shows how to create a Fill Rectangle widget using hmUI.createWidget. This widget draws a solid color rectangular area with specified coordinates, dimensions, and styling properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fillRect = hmUI.createWidget(hmUI.widget.FILL_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating GROUP Component in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a GROUP component and add child widgets to it. The GROUP component allows for grouping multiple UI widgets for easier management. Child widgets must use relative positioning within the group.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst group = createWidget(widget.GROUP, Param)\n\n// 创建子 UI 控件\ngroup.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: Creating STRESS Sensor in ZeppOS JavaScript\nDESCRIPTION: This snippet demonstrates how to create a STRESS sensor instance and access its current value and time properties. The STRESS sensor provides stress level measurements for the user.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stress = hmSensor.createSensor(hmSensor.id.STRESS)\n\nconsole.log(stress.current)\nconsole.log(stress.time)\n```\n\n----------------------------------------\n\nTITLE: Using Zepp OS 2.0 API Methods\nDESCRIPTION: Example of using Zepp OS 2.0 API methods equivalent to the 1.0 version. This snippet demonstrates how to import the necessary functions from their respective modules and use them with updated method names and parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollTo } from '@zos/page'\nimport { home } from '@zos/router'\nimport { getProfile } from '@zos/user'\n\nscrollTo({\n  y: 100\n})\nconst result = getProfile()\nhome()\n```\n\n----------------------------------------\n\nTITLE: Basic IMG Widget Creation in Zepp OS\nDESCRIPTION: Shows the basic syntax for creating an image widget using the createWidget function from the @zos/ui package. The Param object contains configuration properties for the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/IMG.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst img = createWidget(widget.IMG, Param)\n```\n\n----------------------------------------\n\nTITLE: Using launchApp to Open Mini Programs and System Apps in JavaScript\nDESCRIPTION: Example showing how to use the launchApp function to open both a Mini Program with parameters and a system Heart Rate app. Demonstrates importing the function and required constants from '@zos/router'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/launchApp.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { launchApp, SYSTEM_APP_HR } from '@zos/router'\n\n// Jump to Mini Program\nlaunchApp({\n  appId: 1000001,\n  url: 'pages/js_widget_sample',\n  params: {\n    type: 1,\n  },\n})\n\n// Jump to system App Heart Rate\nlaunchApp({\n  appId: SYSTEM_APP_HR,\n  native: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using exit Function in JavaScript for ZeppOS App Service\nDESCRIPTION: Example of importing and using the exit function in a ZeppOS app service. This function will exit the service without affecting the foreground page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-service/exit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exit } from '@zos/app-service'\n\nexit()\n```\n\n----------------------------------------\n\nTITLE: Initializing App in ZeppOS (JavaScript)\nDESCRIPTION: This function is called when the app is created. It's used to initialize global data for all pages. UI cannot be drawn at this stage as no page is loaded yet.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/life-cycle.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(param: string) => void\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_TIME Digital Time Display Widget in ZeppOS JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a digital time display using the IMG_TIME widget in ZeppOS. It shows how to configure the widget with custom image arrays for digits, spacing, alignment, and AM/PM indicators. The example includes options for hour, minute, and second displays with customizable properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/widget/IMG_TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//数组字体 图片数量必须是10个 顺序为0-9\nconst timeArray = []\nlet timeText = hmUI.createWidget(hmUI.widget.IMG_TIME, {\n  hour_zero: 1, // 是否补零\n  hour_startX: 205,\n  hour_startY: 184,\n  hour_array: timeArray,\n  hour_space: 8, //每个数组间的间隔\n  //单位\n  hour_unit_sc: rootPath + 'icon/colon.png',\n  hour_unit_tc: rootPath + 'icon/colon.png',\n  hour_unit_en: rootPath + 'icon/colon.png',\n  hour_align: hmUI.align.LEFT,\n  //minute second  替换hour\n  // ...\n  minute_follow: 1, // 是否跟随\n  second_follow: 1, // 是否跟随\n  am_x: 200,\n  am_y: 100,\n  am_sc_path: 'am.png',\n  am_en_path: 'am_en.png'\n  //pm 同上 前缀由 am 改为 pm\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for Image Convert Function\nDESCRIPTION: Type definition for the image.convert function, showing the expected parameter structure and return promise type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/image-convert.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(options: Options) => Promise<Result>\n```\n\n----------------------------------------\n\nTITLE: Controlling Horizontal Sliding of ScrollList Items in JavaScript\nDESCRIPTION: Shows how to set parameters for horizontal sliding of individual items in a ScrollList. This includes enabling/disabling sliding and setting the maximum drag distance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nscrollList.setProperty(prop.MOVE_ITEM, {\n  start: 0, // Start row\n  end: 0, // End row\n  item_enable_horizon_drag: false, // Whether horizontal sliding is enabled\n  item_drag_max_distance: -200 // Horizontal sliding distance, only takes effect when enabled\n})\n```\n\n----------------------------------------\n\nTITLE: Creating RADIO_GROUP and STATE_BUTTON Widgets in Zepp OS\nDESCRIPTION: This snippet demonstrates how to create a RADIO_GROUP widget and its associated STATE_BUTTON widgets. It includes the basic parameters required for initialization.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/RADIO_GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst radioGroup = hmUI.createWidget(hmUI.widget.RADIO_GROUP, radioGroupParam)\nconst stateButton = hmUI.createWidget(hmUI.widget.STATE_BUTTON, stateButtonParam)\n```\n\n----------------------------------------\n\nTITLE: Extended app.json Configuration for GTR3\nDESCRIPTION: Extended configuration showing how to add support for GTR3 models alongside GTR3 PRO, including platform specifications and design parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ···\n      },\n      \"platforms\": [\n        {\n          \"name\": \"gtr-3-pro\",\n          \"deviceSource\": 229\n        },\n        {\n          \"name\": \"gtr-3-prow\",\n          \"deviceSource\": 230\n        }\n      ],\n      \"designWidth\": 480\n    },\n    \"gtr-3\": {\n      \"module\": {\n        // ···\n      },\n      \"platforms\": [\n        {\n          \"name\": \"gtr-3\",\n          \"deviceSource\": 226\n        },\n        {\n          \"name\": \"gtr-3w\",\n          \"deviceSource\": 227\n        }\n      ],\n      \"designWidth\": 480\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CIRCLE Widget in ZeppOS\nDESCRIPTION: Creates a basic CIRCLE widget instance using the createWidget function. This snippet shows the import statement and basic widget creation pattern with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst circle = createWidget(widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: Widget Property Setting Examples\nDESCRIPTION: Demonstrates two common use cases for setProperty: setting visibility of a button widget and updating multiple properties of a text widget using the MORE property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\nbutton.setProperty(hmUI.prop.VISIBLE, false)\n\nconst text = hmUI.createWidget(hmUI.widget.TEXT, Param)\ntext.setProperty(hmUI.prop.MORE, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 200,\n  text: 'hello',\n  color: 0x34e073,\n  align_h: hmUI.align.LEFT\n})\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_ANIM Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG_ANIM widget using hmUI.createWidget(). It sets various properties such as animation path, frame rate, and callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgAnim = hmUI.createWidget(hmUI.widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating GROUP Component in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a GROUP component and add child widgets to it. The GROUP component allows for grouping multiple UI widgets for easier management. Child widgets must use relative positioning within the group.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst group = createWidget(widget.GROUP, Param)\n\n// 创建子 UI 控件\ngroup.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: Using Device Info API in JavaScript\nDESCRIPTION: Example demonstrating how to use the getDeviceInfo function to retrieve device information and check screen shape using the SCREEN_SHAPE_SQUARE constant.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/device/getDeviceInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDeviceInfo, SCREEN_SHAPE_SQUARE } from '@zos/device'\n\nconst { width, screenShape } = getDeviceInfo()\nconsole.log(width)\n\nif (screenShape === SCREEN_SHAPE_SQUARE) {\n  console.log('Square Screen')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CIRCLE Widget in ZeppOS\nDESCRIPTION: Creates a basic CIRCLE widget instance using the createWidget function. This snippet shows the import statement and basic widget creation pattern with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst circle = createWidget(widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: Using Zepp OS 2.0 API Methods\nDESCRIPTION: Example of using Zepp OS 2.0 API methods equivalent to the 1.0 version. This snippet demonstrates how to import the necessary functions from their respective modules and use them with updated method names and parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollTo } from '@zos/page'\nimport { home } from '@zos/router'\nimport { getProfile } from '@zos/user'\n\nscrollTo({\n  y: 100\n})\nconst result = getProfile()\nhome()\n```\n\n----------------------------------------\n\nTITLE: Module Configuration Example in JSON\nDESCRIPTION: Comprehensive example of module configuration including page definitions, app-side path, settings, and various widget configurations for a ZeppOS Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": {\n    \"page\": {\n      \"pages\": [\"page/gtr-3-pro/loading\"]\n    },\n    \"app-side\": {\n      \"path\": \"app-side/index\"\n    },\n    \"setting\": {\n      \"path\": \"setting/index\"\n    },\n    \"app-widget\": {\n      \"widgets\": [\n        {\n          \"path\": \"app-widget/index\",\n          \"icon\": \"icon.png\",\n          \"name\": \"app-widget-demo\",\n          \"runtime\": {\n            \"type\": \"js\"\n          }\n        }\n      ]\n    },\n    \"secondary-widget\": {\n      \"widgets\": [\n        {\n          \"path\": \"secondary-widget/index\",\n          \"icon\": \"icon.png\",\n          \"preview\": \"preview.png\",\n          \"name\": \"secondary-widget-demo\",\n          \"runtime\": {\n            \"type\": \"js\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_ANIM Widget in ZeppOS\nDESCRIPTION: Code snippet showing how to import and create an IMG_ANIM widget. The IMG_ANIM widget allows developers to create animations from sequences of images at a specified frame rate.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst imgAnim = createWidget(widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Installing Zeus CLI and Creating a Template Project\nDESCRIPTION: This snippet demonstrates how to use the Zeus CLI to create a new 'hello-world' template project for Zepp OS development. The Zeus CLI is a command-line tool for quickly creating and managing Zepp OS projects.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/quick-start.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzeus create hello-world\n```\n\n----------------------------------------\n\nTITLE: Defining Image Component Type in TypeScript\nDESCRIPTION: This snippet defines the type of the Image component in Zepp OS. It takes props as an argument and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/app-settings-api/ui/image.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Basic Data Elements and Naming Patterns - Markdown\nDESCRIPTION: Defines naming conventions for various watchface elements including time, numbers, separators, and progress indicators.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/specification.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|type|name|explain|\n|:--|:--|:--|\n|time|time_# ( \"#\" 序列 0~9)|When the digital font style of the time/minute/second is the same, it shall be named uniformly.|\n|   |hour_#，minute_#，second_#|When/min/sec digital font styles are different, they are named separately.|\n```\n\n----------------------------------------\n\nTITLE: Compass.offChange Method Definition\nDESCRIPTION: Method to unregister a previously registered callback function for compass direction changes. This should be called when direction change events are no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Registering Barometer Change Event Listener in TypeScript\nDESCRIPTION: Registers a callback function to monitor changes in air pressure and altitude.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Setting Up Linux Environment for Simulator\nDESCRIPTION: Command to run the setup script for the Linux environment. This script prepares the necessary configurations for running the simulator on Linux systems.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/simulator/setup.md#2025-04-07_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/simulator/resources/firmware/ && sudo ./setup_for_linux.sh\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last 24 Hours Blood Oxygen Data in TypeScript\nDESCRIPTION: This method returns an array of average blood oxygen data for the past 24 hours. The array length is 24.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastDay(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Creating PICKER Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a PICKER widget using the createWidget function from the @zos/ui module. It includes the basic structure and required parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PICKER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst picker_widget = createWidget(widget.WIDGET_PICKER, Param)\n```\n\n----------------------------------------\n\nTITLE: Getting Hour Format in TypeScript\nDESCRIPTION: TypeScript method definition for getting system time format (12/24 hour)\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetHourFormat(): number\n```\n\n----------------------------------------\n\nTITLE: Vibrator Stop Method Definition\nDESCRIPTION: TypeScript interface for the stop method which terminates ongoing vibration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Registering Step Change Callback - TypeScript\nDESCRIPTION: Method to register a callback function that will be called when step count changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Getting Hour Format in TypeScript\nDESCRIPTION: TypeScript method definition for getting system time format (12/24 hour)\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetHourFormat(): number\n```\n\n----------------------------------------\n\nTITLE: Launching the Simulator on macOS\nDESCRIPTION: Command to start the simulator with administrator privileges on macOS. The simulator requires sudo privileges to access the virtual network interface.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/simulator/setup.md#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd /Applications/simulator.app/Contents/MacOS && sudo -s ./simulator\n```\n\n----------------------------------------\n\nTITLE: Creating CALORIE Sensor in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a CALORIE sensor instance and access its current and target values. The sensor provides information about calorie consumption.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calorie = hmSensor.createSensor(hmSensor.id.CALORIE)\n\nconsole.log(calorie.current)\nconsole.log(calorie.target)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data with hmSetting.getUserData() in JavaScript\nDESCRIPTION: Demonstrates how to use the hmSetting.getUserData() function to retrieve various user data properties such as age, height, weight, gender, and nickname.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getUserData.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst age = hmSetting.getUserData().age\nconst height = hmSetting.getUserData().height\nconst weight = hmSetting.getUserData().weight\nconst gender = hmSetting.getUserData().gender\nconst nickName = hmSetting.getUserData().nickName\n```\n\n----------------------------------------\n\nTITLE: Defining AppService Type in TypeScript\nDESCRIPTION: TypeScript type definition for the AppService function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/AppService.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction AppService(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer in Zepp OS\nDESCRIPTION: Example demonstrating how to create a Buffer object from a string in Zepp OS. This functionality is similar to Node.js Buffer implementation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/Buffer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBuffer.from('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Starting Real-time Resting Heart Rate Measurement in TypeScript\nDESCRIPTION: Starts real-time resting heart rate measurement and registers a callback function. Use 'getResting' method in the callback to get the resting heart rate value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nonRestingChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Displaying System Special Symbols in Markdown Table\nDESCRIPTION: A markdown table showing special symbols used in the Zepp OS, including angle, minute, and second symbols.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/designs/internationalization/languages.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Name** | **Symbol** |\n| -------- | ---------- |\n| Angle    | °          |\n| Minute   | ′          |\n| sec      | ″          |\n```\n\n----------------------------------------\n\nTITLE: Page onInit Function Signature\nDESCRIPTION: Function signature for page initialization that receives parameters from push or replace navigation methods. Used for setting up individual pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/life-cycle.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(params: string) => void\n```\n\n----------------------------------------\n\nTITLE: Creating FILL_RECT Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a Fill Rectangle widget using hmUI.createWidget(). It sets various properties such as position, size, radius, and color. The example also includes an event listener to change the widget's position when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fill_rect = hmUI.createWidget(hmUI.widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(hmUI.prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Music Control Method Type Definitions\nDESCRIPTION: TypeScript type definitions for various music control methods including initialization, play, pause, previous, and next track controls.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Complete RADIO_GROUP Implementation - JavaScript\nDESCRIPTION: Full example showing radio group creation with multiple state buttons and initialization. Demonstrates parameter configuration, button creation, and property setting.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/RADIO_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const radioGroup = hmUI.createWidget(hmUI.widget.RADIO_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = radioGroup.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = radioGroup.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = radioGroup.createWidget(hmUI.widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    radioGroup.setProperty(hmUI.prop.INIT, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Unregistering Blood Oxygen Measurement Change Callback in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript interface for the offChange() method, which cancels a previously registered callback function for blood oxygen measurement change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Item Properties in CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: This code snippet shows how to set properties for a specific item in the CYCLE_IMAGE_TEXT_LIST widget. It demonstrates changing the text color and size for an individual item.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = ...\nwidget.setProperty(hmUI.prop.ITEM_MORE,{\n  index: 0,\n  item_text_color: 0x2f4988,\n  item_text_size: 50\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering hmUI.setProperty Documentation in React\nDESCRIPTION: This code imports a reference documentation file for the hmUI.setProperty method and renders it using React's component system. It uses MDX which allows Markdown and JSX to be used together.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmUI/setProperty.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a TEXT widget using hmUI.createWidget(). It sets various properties such as position, size, color, alignment, and text content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = hmUI.createWidget(hmUI.widget.TEXT, Param)\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast Message in Zepp OS JavaScript\nDESCRIPTION: Demonstrates how to import and use the showToast function in a Zepp OS page. The function is called with an object containing a text property, which supports line breaks using '\\n'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/showToast.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { showToast } from '@zos/ui'\n\nPage({\n  build() {\n    showToast({\n      text: 'Hello\\nZepp OS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CIRCLE Widget in ZeppOS Page\nDESCRIPTION: Shows a complete example of creating a CIRCLE widget within a ZeppOS Page component. The circle is defined with specific center coordinates, radius, color, and transparency values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const circle = createWidget(widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a DATE_POINTER Widget in ZeppOS\nDESCRIPTION: This code snippet demonstrates how to create a DATE_POINTER widget in ZeppOS. It shows the configuration of various properties including scale images, pointer image, center position, cover image, and angle range. The example creates a week pointer, but can be adapted for month or day pointers as well.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/DATE_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet week = hmUI.createWidget(hmUI.widget.DATE_POINTER, {\n  scale_x: 0,\n  scale_y: 0,\n  scale_sc: 'bg.png', //背景图 可选\n  scale_tc: 'bg.png',\n  scale_en: 'bg.png',\n  center_x: 100,\n  center_y: 100,\n  src: 'pointer.png', //指针图片\n  posX: 0,\n  posY: 0,\n  cover_x: 0, //指针上面的帽子\n  cover_y: 0,\n  cover_path: 'cover.png',\n  start_angle: 0, //0点为正 可以写负数\n  end_angle: 180,\n  type: hmUI.date.WEEK //参考上方表格\n})\n```\n\n----------------------------------------\n\nTITLE: Logging Output in Zepp OS Console\nDESCRIPTION: Demonstrates the basic usage of console.log() to print messages to the Zepp OS debug console. The function accepts any number of parameters for logging.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/global.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Creating PAGE_SCROLLBAR Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a PAGE_SCROLLBAR widget using the createWidget function from the @zos/ui module. The Param object can include a 'target' property to bind the scrollbar to a specific VIEW_CONTAINER widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PAGE_SCROLLBAR.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst scrollBar = createWidget(widget.PAGE_SCROLLBAR, Param)\n```\n\n----------------------------------------\n\nTITLE: Inserting Images in Zepp OS Docs Markdown\nDESCRIPTION: Examples of how to insert images in markdown files for the Zepp OS documentation, including basic syntax and advanced usage with attributes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/README.md#2025-04-07_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![histogram](/img/api/histogram_sample.jpg)\n\nimport useBaseUrl from '@docusaurus/useBaseUrl'\n\n<img src={useBaseUrl('/img/docs/quick-start/download_zepp.jpg')} width=\"300\" title=\"download_zepp\" />\n```\n\n----------------------------------------\n\nTITLE: User Feedback Template Format in Zepp App\nDESCRIPTION: Standard template format for submitting user feedback, including sections for problem description, reproduction steps, and expected behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/upload-log.md#2025-04-07_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# Problem description\n\n# Reproduction process\n\n# Expected performance\n```\n\n----------------------------------------\n\nTITLE: Defining setBrightness Function Type in TypeScript\nDESCRIPTION: This TypeScript code defines the type signature for the setBrightness function. It takes a number parameter for brightness and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(brightness: number) => result\n```\n\n----------------------------------------\n\nTITLE: Displaying Workout Extension Sample Image in Markdown\nDESCRIPTION: Uses the useBaseUrl function to display an image of the workout extension feature in the documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/version-info/new-features-35.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src={useBaseUrl('/img/docs/workout-extension/sample_both.jpeg')} width=\"80%\" title=\"download_zepp\" />\n```\n\n----------------------------------------\n\nTITLE: Get Altitude Method - TypeScript\nDESCRIPTION: Method to retrieve the current altitude value in meters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAltitude(): number\n```\n\n----------------------------------------\n\nTITLE: Get Direction Angle - TypeScript\nDESCRIPTION: TypeScript method signature for getting the current direction angle (0-360) or 'INVALID' if not calibrated.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetDirectionAngle(): number | 'INVALID'\n```\n\n----------------------------------------\n\nTITLE: Creating SCROLL_LIST Widget\nDESCRIPTION: Basic code to import and create a SCROLL_LIST widget using the Zepp OS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst scrollList = createWidget(widget.SCROLL_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Stopping Buzzer Operation in TypeScript\nDESCRIPTION: Method to stop the buzzer operation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: ImageView Configuration Example\nDESCRIPTION: Example configuration for image views within a SCROLL_LIST item with click action support.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst image_view = [{ x: 0, y: 0, w: 20, h: 20, key: 'img_src', action: true }]\n```\n\n----------------------------------------\n\nTITLE: Using rmSync Function in JavaScript\nDESCRIPTION: Example of using the rmSync function to delete a file named 'test.txt' and checking the result. This demonstrates importing the function and handling the return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/rmSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rmSync } from '@zos/fs'\n\nconst result = rmSync({\n  path: 'test.txt',\n})\n\nif (result === 0) {\n  console.log('rmSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Period Timer Example\nDESCRIPTION: Example showing how to set a timer that repeats every 21 days using repeat_period and repeat_duration parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/alarm/set.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { set, REPEAT_DAY } from '@zos/alarm'\n\nconst option = {\n  url: 'pages/index.js',\n  time: 12345678,\n  repeat_type: REPEAT_DAY,\n  repeat_period: 20,\n  repeat_duration: 1,\n}\nconst id = set(option)\n```\n\n----------------------------------------\n\nTITLE: Configuring ARC_PROGRESS Widget Properties in ZeppOS\nDESCRIPTION: This example shows how to set properties for an ARC_PROGRESS widget using the setProperty method. It configures various attributes like center coordinates, radius, start and end angles, color, line width, and progress level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS)\narcProgress.setProperty(hmUI.prop.MORE, {\n  center_x: 100,\n  center_y: 100,\n  radius: 200,\n  start_angle: -90,\n  end_angle: 90,\n  color: 0x34e073,\n  line_width: 10,\n  level: 50\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Tunnelblick via Homebrew on macOS\nDESCRIPTION: Command to install the Tunnelblick virtual network card using Homebrew package manager on macOS. This is required for setting up the virtual network environment for the simulator.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/simulator/setup.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask tunnelblick\n```\n\n----------------------------------------\n\nTITLE: Retrieving Boolean Value Example\nDESCRIPTION: JavaScript example demonstrating how to retrieve a boolean value using hmFS.SysProGetBool(). Shows basic usage with a test key and logging the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmFS.SysProGetBool('test_key')\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Using getWeightTarget Function in JavaScript\nDESCRIPTION: Example of importing and using the getWeightTarget function from the @zos/settings module to retrieve a user's weight target.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getWeightTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getWeightTarget } from '@zos/settings'\n\nconst weightTarget = getWeightTarget()\nconsole.log(weightTarget)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Page with Error-Prone Code in Zepp OS\nDESCRIPTION: A basic Page implementation with code that will cause a runtime error when undefined is called as a function. This example demonstrates how errors appear in logs with incomplete stack traces.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/error-catch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const a = undefined\n    const b = () => {\n      a()\n    }\n    const c = () => {\n      b()\n    }\n    c()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getTextLayout Function Signature in TypeScript\nDESCRIPTION: TypeScript definition of the getTextLayout function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(text: string, options: object) => result\n```\n\n----------------------------------------\n\nTITLE: Defining hmApp.exit() Function Type in TypeScript\nDESCRIPTION: Type definition for the hmApp.exit() function, which takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/exit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Blood Oxygen Measurement in TypeScript\nDESCRIPTION: This snippet demonstrates how to get the current blood oxygen measurement result. It returns an object with value, time, and return code properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Unregister Change Event - TypeScript\nDESCRIPTION: Method to remove a previously registered callback function for air pressure and altitude changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating ARC Widget in ZeppOS\nDESCRIPTION: This snippet shows how to create an ARC widget using hmUI.createWidget. It sets various properties such as position, size, angles, color, and line width.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/ARC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = hmUI.createWidget(hmUI.widget.ARC, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating and Showing Dialog in Zepp OS JavaScript\nDESCRIPTION: Example of creating a dialog box with a title, custom click listener, and manual show/hide control. The dialog is created and then immediately shown.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/createDialog.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const dialog = hmUI.createDialog({\n      title: 'HELLO ZEPP OS',\n      auto_hide: false,\n      click_linster: ({ type }) => {\n        dialog.show(false)\n        console.log('type', type)\n        console.log('click dialog')\n      }\n    })\n\n    dialog.show(true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using getText Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the getText function from the @zos/i18n module. It retrieves the internationalized string for the key 'name'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/i18n/getText.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getText } from '@zos/i18n'\n\ngetText('name')\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle UI Component in Zepp OS Page\nDESCRIPTION: This example shows how to create a circle widget within a Zepp OS page. It demonstrates setting all required properties including center coordinates, radius, and color, as well as the optional alpha (transparency) property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const circle = hmUI.createWidget(hmUI.widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ARC_PROGRESS Widget Properties in ZeppOS\nDESCRIPTION: This example shows how to set properties for an ARC_PROGRESS widget using the setProperty method. It configures various attributes like center coordinates, radius, start and end angles, color, line width, and progress level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS)\narcProgress.setProperty(hmUI.prop.MORE, {\n  center_x: 100,\n  center_y: 100,\n  radius: 200,\n  start_angle: -90,\n  end_angle: 90,\n  color: 0x34e073,\n  line_width: 10,\n  level: 50\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Section Component Type in TypeScript\nDESCRIPTION: Type definition for the Section component function. It accepts props and optional render functions, and returns a render function result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/section.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Step Change Event Callback Type\nDESCRIPTION: TypeScript type definition for the step sensor change event callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: SysProSetDouble Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition showing the method signature for SysProSetDouble. Takes a string key and number value as parameters and returns a result number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Renaming a File Using hmFS.rename() in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmFS.rename() function within a Zepp OS mini-program to rename a file from 'old_file.txt' to 'new_file.txt' and log the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/rename.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const result = hmFS.rename('path/to/old_file.txt', 'path/to/new_file.txt')\n    console.log(result)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Distance Change Callback in TypeScript\nDESCRIPTION: Method to register a callback function that will be called when the distance changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Distance.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyboard Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to create a system-level input keyboard using the createKeyboard function. It shows the required and optional parameters for keyboard initialization.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SMART_KEYBOARD.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createKeyboard, inputType } from '@zos/ui'\n\nconst keyboard = createKeyboard({\n  // Required parameters\n  inputType: inputType.NUM,\n  onComplete: (result) => {\n    /* Handle input completion */\n  },\n  onCancel: (result) => {\n    /* Handle input cancellation */\n  },\n\n  // Optional parameters\n  text: 'Initial text'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Resting Heart Rate in TypeScript\nDESCRIPTION: Gets the current resting heart rate value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetResting(): number\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date in TypeScript\nDESCRIPTION: Retrieves the day of the month for the current date, ranging from 1 to 31.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetDate(): number\n```\n\n----------------------------------------\n\nTITLE: Getting Outbox Object Example\nDESCRIPTION: Example showing how to get an Outbox object for file sending.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst outbox = transferFile.getOutbox()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsupported Dynamic Code Execution in Zepp OS Mini Programs\nDESCRIPTION: This code snippet illustrates the dynamic code execution methods that are not supported in Zepp OS Mini Programs for security reasons. The eval function and most uses of new Function constructor are prohibited.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/js-support.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Function('return this')\n```\n\n----------------------------------------\n\nTITLE: Using getSettings Function Example\nDESCRIPTION: JavaScript example demonstrating how to import and use the getSettings function from the @zos/display module to retrieve display settings.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/getSettings.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSettings } from '@zos/display'\n\nconsole.log(getSettings())\n```\n\n----------------------------------------\n\nTITLE: Getting Current Minutes in TypeScript\nDESCRIPTION: Retrieves the number of minutes in the current time using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetMinutes(): number\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for getTemperatureUnit\nDESCRIPTION: Type definition showing the function signature for getTemperatureUnit which returns a Result type representing the temperature unit.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getTemperatureUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTemperatureUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Defining the hmFS.open Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.open function that takes a path string and a flag parameter, and returns a fileId.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/open.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Per Minute Event Handler in TypeScript\nDESCRIPTION: TypeScript method definition for registering end-of-minute callback\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nonPerMinute(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Getting Solar Term in TypeScript\nDESCRIPTION: TypeScript method definition for getting Traditional Chinese Solar Terms\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngetSolarTerm(): string\n```\n\n----------------------------------------\n\nTITLE: Using getDistanceUnit Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the getDistanceUnit function to check if the current distance unit is metric. It imports the necessary functions and constants from the @zos/settings module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/settings/getDistanceUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDistanceUnit, DISTANCE_UNIT_METRIC } from '@zos/settings'\n\nconst distanceUnit = getDistanceUnit()\n\nif (distanceUnit === DISTANCE_UNIT_METRIC) {\n  console.log('metric')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bright Screen Time in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmSetting.setBrightScreen() function to set the bright screen time to 10 seconds. The function returns a result indicating success (0) or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/setBrightScreen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setBrightScreen(10)\n```\n\n----------------------------------------\n\nTITLE: Item Refresh Implementation - JavaScript\nDESCRIPTION: Shows how to refresh a specific item in the list to revert it to its original state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setProperty(hmUI.prop.ITEM_REFRESH, 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Height with setAppWidgetSize in JavaScript\nDESCRIPTION: Example code showing how to import and use the setAppWidgetSize function to adjust a widget card's height to 100 pixels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/setAppWidgetSize.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { setAppWidgetSize } from '@zos/ui'\n\nsetAppWidgetSize({ h: 100 })\n```\n\n----------------------------------------\n\nTITLE: Scrolling Example Using setLayerY in JavaScript\nDESCRIPTION: Example demonstrating how to use the hmApp.setLayerY method to set the vertical scroll position to 100 pixels from the top.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/setLayerY.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the y-coordinate offset\nhmApp.setLayerY(100)\n```\n\n----------------------------------------\n\nTITLE: Declaring the getText Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the getText function which takes an internationalization key and returns the corresponding localized string.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/i18n/getText.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction getText(key: Key): Result\n```\n\n----------------------------------------\n\nTITLE: Starting SPO2 Measurement in Zepp OS\nDESCRIPTION: Initiates a blood oxygen measurement. It's recommended to call stop() before starting a new measurement to ensure proper functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nspo2.start()\n```\n\n----------------------------------------\n\nTITLE: Defining Data Array for ScrollList Items in JavaScript\nDESCRIPTION: Creates a data array for populating ScrollList items. Each object in the array contains properties that correspond to the keys defined in TextView and ImageView configurations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataList = [\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '12' },\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '13' },\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '13' }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Buzzer Strength in TypeScript\nDESCRIPTION: Method to get the buzzer strength level (0=weak, 1=medium, 2=high).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStrength(): number\n```\n\n----------------------------------------\n\nTITLE: Creating ARC_PROGRESS Widget in ZeppOS\nDESCRIPTION: Creates a circular arc progress widget using hmUI.createWidget. This widget requires parameters like center position, radius, angles, line width, and color to properly display the arc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting a Text Widget in ZeppOS\nDESCRIPTION: Example code demonstrating how to create a text widget with specific styling and positioning parameters, and then immediately delete it using the deleteWidget function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/deleteWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, align, text_style, deleteWidget } from '@zos/ui'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    deleteWidget(textWidget)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.stat_asset to Get File Information in JavaScript\nDESCRIPTION: Example of using hmFS.stat_asset to retrieve information about a file in the assets directory. The example demonstrates how to access the size property and handle possible errors.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/stat_asset.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [fs_stat, err] = hmFS.stat_asset('test_file.txt')\n\nif (err == 0) {\n  console.log('--->size:', fs_stat.size)\n} else {\n  console.log('err:', err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CIRCLE Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a CIRCLE widget using the hmUI.createWidget method. It specifies the widget type and required parameters such as center coordinates, radius, color, and transparency.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst circle = hmUI.createWidget(hmUI.widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: Configuring System Events in app.json for Zepp OS v3\nDESCRIPTION: JSON configuration for specifying an App Service to respond to System Events in a Mini Program's app.json file. It includes the app-service and app-event module configurations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/system-event.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": {\n    \"app-service\": {\n      \"services\": [\"app-service/demo_service\"]\n    },\n    \"app-event\": {\n      \"path\": \"app-service/demo_service\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Next File from Inbox in JavaScript\nDESCRIPTION: Example of how to get the next file from the Inbox object using the getNextFile method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileObject = onbox.enqueueFile('data://download/test.png', { type: 'image', name: 'fdsa' })\n```\n\n----------------------------------------\n\nTITLE: Installing nvm on macOS/Linux using curl\nDESCRIPTION: Command to download and install nvm (Node Version Manager) on macOS or Linux systems using curl. This allows easy management of Node.js versions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/Basic-environment-construction.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Getting Buzzer Source Type in TypeScript\nDESCRIPTION: Method to retrieve the current buzzer mode type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetSourceType(): Type\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.open Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the hmFS.open function. It specifies the function parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/open.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Using hmUI Data Type Constants in ZeppOS\nDESCRIPTION: Reference table of all available hmUI.data_type constants used to access device data in ZeppOS applications. These constants provide access to health metrics, environmental data, and watch functions with their respective value ranges.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/data_type.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nhmUI.data_type.BATTERY             // Battery level [0, 100]\nhmUI.data_type.STEP                // Current step count [0, 99999]\nhmUI.data_type.STEP_TARGET         // Target step count [0, 99999]\nhmUI.data_type.CAL                 // Current calories [0, 9999]\nhmUI.data_type.CAL_TARGET          // Target calories [0, 9999]\nhmUI.data_type.HEART               // Current heart rate [min, 220-age]\nhmUI.data_type.PAI_DAILY           // PAI obtained today [0, 75]\nhmUI.data_type.PAI_WEEKLY          // Current accumulated PAI [0, 525]\nhmUI.data_type.DISTANCE            // Distance [0, 99]\nhmUI.data_type.STAND               // Current standing count [0, 12]\nhmUI.data_type.STAND_TARGET        // Target standing count 12\nhmUI.data_type.WEATHER_CURRENT     // Current temperature (up to 3 digits)\nhmUI.data_type.WEATHER_LOW         // Current low temperature (up to 3 digits)\nhmUI.data_type.WEATHER_HIGH        // Current high temperature (up to 3 digits)\nhmUI.data_type.UVI                 // Ultraviolet index [1, 5]\nhmUI.data_type.AQI                 // Air quality (0, 999]\nhmUI.data_type.HUMIDITY            // Humidity [0, 100]\nhmUI.data_type.FAT_BURNING         // Fat burning time (minutes) [0, 999]\nhmUI.data_type.FAT_BURNING_TARGET  // Fat burning target time (minutes) [0, 999]\nhmUI.data_type.SUN_CURRENT         // Time until sunrise/sunset HH:MM\nhmUI.data_type.SUN_RISE            // Sunrise time HH:MM\nhmUI.data_type.SUN_SET             // Sunset time HH:MM\nhmUI.data_type.WIND                // Wind force level [0, 12]\nhmUI.data_type.STRESS              // Physical stress level [0, 100]\nhmUI.data_type.SPO2                // Blood oxygen level (50, 100]\nhmUI.data_type.ALTIMETER           // Air pressure (0, 1200]\nhmUI.data_type.FLOOR               // Floor climbing (number of floors) [0, 999]\nhmUI.data_type.ALARM_CLOCK         // Alarm HH:MM\nhmUI.data_type.COUNT_DOWN          // Countdown, number of minutes or seconds (2 digits)\nhmUI.data_type.STOP_WATCH          // Stopwatch, number of minutes or seconds (2 digits)\nhmUI.data_type.SLEEP               // Sleep HH:MM\nhmUI.data_type.TRAINING_LOAD       // Training load (up to 3 digits)\nhmUI.data_type.VO2MAX              // Maximum oxygen uptake [15, 65]\nhmUI.data_type.RECOVERY_TIME       // Full recovery time [0, 97]\nhmUI.data_type.MONTH_RUN_TIMES     // Monthly outdoor run times [0, 100]\nhmUI.data_type.MONTH_RUN_DISTANCE  // Monthly outdoor run distance (up to 4 integer digits, 2 decimal places)\nhmUI.data_type.ALTITUDE            // Altitude (up to 5 digits)\nhmUI.data_type.READINESS           // Physical and mental readiness [0, 100]\nhmUI.data_type.MOON                // Moon phase, can only be used with IMG_CLICK\nhmUI.data_type.OUTDOOR_RUNNING     // Outdoor running, can only be used with IMG_CLICK\nhmUI.data_type.WALKING             // Walking, can only be used with IMG_CLICK\nhmUI.data_type.OUTDOOR_CYCLING     // Outdoor cycling, can only be used with IMG_CLICK\nhmUI.data_type.FREE_TRAINING       // Free training, can only be used with IMG_CLICK\nhmUI.data_type.POOL_SWIMMING       // Pool swimming, can only be used with IMG_CLICK\nhmUI.data_type.OPEN_WATER_SWIMMING // Open water swimming, can only be used with IMG_CLICK\nhmUI.data_type.PHN                 // Sports coach, can only be used with IMG_CLICK\nhmUI.data_type.BREATH_TRAIN        // Breath training, can only be used with IMG_CLICK\n```\n\n----------------------------------------\n\nTITLE: Defining readSync Function Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the readSync function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/readSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Buzzer Source Type in TypeScript\nDESCRIPTION: Method to retrieve the current buzzer mode type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetSourceType(): Type\n```\n\n----------------------------------------\n\nTITLE: Chinese Localization File Structure - Zepp OS\nDESCRIPTION: Example of a Chinese (zh-CN) localization file showing key-value pairs for text strings used in the Calories Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/i18n.mdx#2025-04-07_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n// zh-CN.po\n\nmsgid \"unit\"\nmsgstr \"KCAL\"\n\nmsgid \"cake\"\nmsgstr \"蛋糕\"\n\nmsgid \"coffee\"\nmsgstr \"咖啡\"\n\nmsgid \"calories\"\nmsgstr \"卡路里\"\n\nmsgid \"beer\"\nmsgstr \"啤酒\"\n\nmsgid \"iceCream\"\nmsgstr \"冰淇淋\"\n\nmsgid \"equivalent\"\nmsgstr \"相当于\"\n\nmsgid \"hamburger\"\nmsgstr \"汉堡包\"\n\nmsgid \"pizza\"\nmsgstr \"披萨\"\n\nmsgid \"chocolate\"\nmsgstr \"巧克力\"\n\nmsgid \"consumption\"\nmsgstr \"今日消耗\"\n\nmsgid \"sausage\"\nmsgstr \"香肠\"\n\nmsgid \"ham\"\nmsgstr \"火腿\"\n\nmsgid \"cookie\"\nmsgstr \"曲奇饼\"\n```\n\n----------------------------------------\n\nTITLE: Installing NVM on Unix Systems\nDESCRIPTION: Command to install Node Version Manager (nvm) on MacOS and Linux systems using curl or wget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/Basic-environment-construction.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh\n\n// or\n\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh\n```\n\n----------------------------------------\n\nTITLE: Creating CHECKBOX_GROUP and STATE_BUTTON Widgets\nDESCRIPTION: Basic example of creating checkbox group and state button widgets using hmUI.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkGroup = hmUI.createWidget(hmUI.widget.CHECKBOX_GROUP, checkboxGroupParam)\nconst stateButton = hmUI.createWidget(hmUI.widget.STATE_BUTTON, stateButtonParam)\n```\n\n----------------------------------------\n\nTITLE: Defining the onKey Function Signature in TypeScript\nDESCRIPTION: TypeScript definition for the onKey function that monitors key events on the device. The function accepts an option object with a callback property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onKey(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Creating TIME Sensor in ZeppOS\nDESCRIPTION: Demonstrates how to create an instance of the TIME sensor using the hmSensor.createSensor method with the TIME sensor ID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst time = hmSensor.createSensor(hmSensor.id.TIME)\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Screen Editable Widget Group in ZeppOS\nDESCRIPTION: This snippet shows how to create a full screen editable widget group with customized select list properties for a watchface in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neditGroup = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_GROUP, {\n  // ...\n  select_list: {\n    title_font_size :34 ,\n    title_align_h: hmUI.align.CENTER_H ,\n    list_item_vspace: 8,\n    list_tips_text_font_size: 32,\n    list_tips_text_align_h : hmUI.align.LEFT,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Item Properties in CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: This code shows how to set properties for a single item in the CYCLE_IMAGE_TEXT_LIST widget, such as text color and size. Note that these changes are not saved and cannot be retrieved using getProperty.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = ...\nwidget.setProperty(prop.ITEM_MORE,{\n  index:0,\n  item_text_color:0x2f4988,\n  item_text_size:50\n})\n```\n\n----------------------------------------\n\nTITLE: Importing WORLD_CLOCK Sensor Documentation in JSX\nDESCRIPTION: This code imports the WORLD_CLOCK sensor API documentation content from a reference file and renders it in the current page. This pattern is used to maintain a single source of truth for API documentation while allowing it to be displayed in multiple contexts.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Alpha Transparency in ZeppOS JavaScript\nDESCRIPTION: This example demonstrates how to create a text widget and set its alpha transparency using the setAlpha method. It imports necessary functions from ZeppOS UI module, creates a text widget, and sets its alpha value to 80.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/setAlpha.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\n\nconst text = createWidget(widget.TEXT, {\n  x: 96,\n  y: 120,\n  w: 288,\n  h: 46,\n  color: 0xffffff,\n  text_size: 36,\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.NONE,\n  text: 'HELLO ZEPPOS'\n})\n\ntext.setAlpha(80)\n```\n\n----------------------------------------\n\nTITLE: Defining console.log Method in TypeScript for Zepp OS\nDESCRIPTION: TypeScript definition for the console.log method that accepts any number of parameters to print logs. Each log has a limited length and will be truncated if exceeded.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/console.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlog(...data: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining Type Signature for getUserData Function in TypeScript\nDESCRIPTION: Specifies the type signature for the hmSetting.getUserData() function, which returns a userData object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getUserData.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => userData\n```\n\n----------------------------------------\n\nTITLE: Importing Utility Functions in ZeppOS 2.0\nDESCRIPTION: Demonstrates how to properly import previously global utility functions in ZeppOS 2.0. The px and assets functions now need to be explicitly imported from the @zos/utils module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/migration-guide.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npx(480)\n\nconst assetsPathFunc = assets('img')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { px, assets } from '@zos/utils'\n\npx(480)\n\nconst assetsPathFunc = assets('img')\n```\n\n----------------------------------------\n\nTITLE: Complete CYCLE_LIST Implementation Example\nDESCRIPTION: Full example showing how to create and configure a CYCLE_LIST widget with image items, including click handlers and styling options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  state: {\n    pageName: 'CYCLE_LIST'\n  },\n\n  build() {\n    const imgArray = ['number-img/0.png', 'number-img/1.png', 'number-img/2.png', 'number-img/3.png', 'number-img/4.png']\n    const cycleList = createWidget(widget.CYCLE_LIST, {\n      x: 230,\n      y: 120,\n      h: 300,\n      w: 30,\n      data_array: imgArray,\n      data_size: 5,\n      item_height: 100,\n      item_click_func: (list, index) => {\n        console.log(index)\n      },\n      item_bg_color: 0xffffff\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Stress Change Event Handler Type Definition\nDESCRIPTION: TypeScript type definition for onChange method to register a callback for stress measurement changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating FILL_RECT Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a FILL_RECT widget using hmUI.createWidget(). It sets the position, size, color, and radius of the rectangle. It also adds a click event listener to change the widget's position and size.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fill_rect = hmUI.createWidget(hmUI.widget.FILL_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      color: 0xfc6950\n    })\n\n    fill_rect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      fill_rect.setProperty(hmUI.prop.MORE, {\n        x: 125,\n        y: 200,\n        w: 230,\n        h: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PAGE_SCROLLBAR Widget in ZeppOS\nDESCRIPTION: This code example shows a simple implementation of creating a PAGE_SCROLLBAR widget without specifying a target, which defaults to the whole page scroll bar.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PAGE_SCROLLBAR.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst scrollBar = createWidget(widget.PAGE_SCROLLBAR)\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProSetChars to Store and Retrieve Temporary Strings in JavaScript\nDESCRIPTION: Example of how to use hmFS.SysProSetChars to store a temporary string value and retrieve it using hmFS.SysProGetChars. The stored value persists until system reboot.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nhmFS.SysProSetChars('js_test_char', 'hello')\nconsole.log(hmFS.SysProGetChars('js_test_char'))\n```\n\n----------------------------------------\n\nTITLE: Using hmApp.goBack() Function in JavaScript\nDESCRIPTION: Demonstrates how to use the hmApp.goBack() function to navigate back or exit the Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/goBack.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// go Back\nhmApp.goBack()\n```\n\n----------------------------------------\n\nTITLE: Complete BATTERY Sensor Usage Example in ZeppOS\nDESCRIPTION: This comprehensive example demonstrates creating a BATTERY sensor, rendering UI elements to display battery information, and handling sensor change events in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n\n    const currentText = new TextByLine({\n      text: `current:${battery.current}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${battery.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = battery.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const batteryChangeListener = () => {\n      battery.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: batteryChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Festival Information - JavaScript\nDESCRIPTION: Retrieve current festival information for Chinese language settings using getShowFestival()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst current_festival = time.getShowFestival()\n```\n\n----------------------------------------\n\nTITLE: Creating WORLD_CLOCK Sensor in ZeppOS\nDESCRIPTION: Demonstrates how to create a WORLD_CLOCK sensor instance using the hmSensor.createSensor method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst world_clock = hmSensor.createSensor(hmSensor.id.WORLD_CLOCK)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for hmFS.open()\nDESCRIPTION: Type definition showing the function parameters and return type for the hmFS.open() method. Takes a path string and flag parameter, returns a numeric file handle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/open.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Importing SysProGetInt64 Documentation in React/MDX\nDESCRIPTION: This code imports the documentation for the SysProGetInt64 API from the reference path and renders it as a React component in the current MDX file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProGetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProGetInt64.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Distance Sensor Event Handler Example\nDESCRIPTION: Example of registering a change event listener for the distance sensor. The callback logs the current distance value whenever it changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndistance.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current distance is ' + distance.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: World Clock Count Type Definition\nDESCRIPTION: Type definition for the method that returns the total number of configured world clocks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => number\n```\n\n----------------------------------------\n\nTITLE: Getting Outbox Object in JavaScript\nDESCRIPTION: Example of how to get the Outbox object using the transferFile.getOutbox() method in JavaScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst outbox = transferFile.getOutbox()\n```\n\n----------------------------------------\n\nTITLE: Importing SysProSetBool Documentation in JavaScript\nDESCRIPTION: This code snippet imports the content of the SysProSetBool function documentation from a specific path and renders it using JSX syntax. It utilizes the Content component to display the imported documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProSetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetBool.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using Tag Text Format in Watchface\nDESCRIPTION: Example of tag format used for displaying time in Watchface. Shows the hour in 24-hour format followed by a colon and minutes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/watchface/guides/text.md#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[HOUR_24_Z]:[MIN_Z]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Stage Data with getStage Method\nDESCRIPTION: Method to get detailed sleep staging data as an array of StageInfo objects, including the stage type and timing information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetStage(): Array<StageInfo>\n```\n\n----------------------------------------\n\nTITLE: Launching Simulator on Linux\nDESCRIPTION: Command to launch the simulator on Linux systems. This should be executed after the environment setup is complete.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/simulator/setup.md#2025-04-07_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/simulator/ && ./simulator\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getSystemMode in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the getSystemMode function from the @zos/settings module. The code retrieves the current system mode settings and logs them to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getSystemMode.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSystemMode } from '@zos/settings'\n\nconst mode = getSystemMode()\nconsole.log(mode)\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.rename Function Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript function signature for hmFS.rename, including parameter types and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/rename.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(oldPath: string, newPath: string) => result\n```\n\n----------------------------------------\n\nTITLE: Registering a CHANGE Event Listener for Distance Sensor\nDESCRIPTION: Demonstrates how to register a callback function for the CHANGE event on a calorie sensor. The callback will be executed whenever the sensor's data changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Creating CANVAS Widget in Zepp OS\nDESCRIPTION: Demonstrates how to create a CANVAS widget using the createWidget function from @zos/ui. The widget is initialized with x and y coordinates, width, and height.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst canvas = createWidget(widget.CANVAS, {\n  x: 0,\n  y: 0,\n  w: 100,\n  h: 100\n})\n```\n\n----------------------------------------\n\nTITLE: Complete STAND Sensor Implementation Example\nDESCRIPTION: Full example showing STAND sensor implementation with UI elements, event handling, and text display functionality\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const stand = hmSensor.createSensor(hmSensor.id.STAND)\n\n    new TextByLine({\n      text: `current:${stand.current};target:${stand.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${stand.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = stand.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const standChangeListener = () => {\n      stand.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: standChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering STRESS Sensor Event Listener in JavaScript\nDESCRIPTION: This snippet shows how to register an event listener for the STRESS sensor to receive updates when the stress level changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Customizing Editable Widget Types in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create custom editable widget types for a watchface in ZeppOS, including specifying titles in different languages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst optional_types = [\n  {\n    type: 100001,\n    preview: rootPath + 'preview/bat.png',\n    title_sc: '标题',\n    title_tc: '标题',\n    title_en: 'title'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Screen Change Event Listener in TypeScript\nDESCRIPTION: Registers a callback function to be called when the screen status changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: (status: number) => void): void\n```\n\n----------------------------------------\n\nTITLE: Importing setBrightness API Documentation in React\nDESCRIPTION: This code imports the setBrightness API documentation content from a reference path and renders it using a Content component. This pattern is commonly used in documentation sites to maintain content in separate files while providing a unified presentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/setBrightness.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Implementing an IMG_LEVEL Widget with Image Array in ZeppOS\nDESCRIPTION: Complete example showing how to create an IMG_LEVEL widget with an array of images. The level parameter (set to 2) determines which image to display from the array, with level 2 showing the second image in the array.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 480,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: Using updateLayout() to Re-render a Widget View in ZeppOS\nDESCRIPTION: Example showing how to use updateLayout() after modifying the widget tree by adding a button to a container. The function re-renders the view to reflect the changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/updateLayout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, updateLayout } from '@zos/ui'\n\nconst container = createWidget(widget.VIRTUAL_CONTAINER)\nconst button = createWidget(widget.BUTTON)\n\n// Add child node\ncontainer.addLayoutChild(button)\n\n// Update layout and re-render the view\nupdateLayout()\n```\n\n----------------------------------------\n\nTITLE: Logging Output in Zepp OS JavaScript\nDESCRIPTION: Demonstrates how to use console.log() to print logs in Zepp OS. The function accepts any number of parameters and outputs them to the console for debugging purposes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/global.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Defining resetPageBrightTime Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the resetPageBrightTime function. It takes no parameters and returns a Result type, which is a number indicating success (0) or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/resetPageBrightTime.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction resetPageBrightTime(): Result\n```\n\n----------------------------------------\n\nTITLE: Implementing an IMG_LEVEL Widget with Image Array in ZeppOS\nDESCRIPTION: Complete example showing how to create an IMG_LEVEL widget with an array of images. The level parameter (set to 2) determines which image to display from the array, with level 2 showing the second image in the array.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 480,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: Creating CIRCLE Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a CIRCLE widget using the createWidget function from the @zos/ui module. It sets the circle's center coordinates, radius, color, and transparency.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst circle = createWidget(widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing an IMG_LEVEL Widget with Image Array in ZeppOS\nDESCRIPTION: Complete example showing how to create an IMG_LEVEL widget with an array of images. The level parameter (set to 2) determines which image to display from the array, with level 2 showing the second image in the array.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 480,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: World Clock Initialization Method Type Definition\nDESCRIPTION: TypeScript type definition for the init method which initializes world clock data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_PROGRESS Widget in ZeppOS\nDESCRIPTION: This snippet shows how to create an IMG_PROGRESS widget. The widget requires arrays of x/y coordinates, an array of images, and the length of the array. The level parameter determines which image in the sequence to display.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Toast Component in TypeScript\nDESCRIPTION: Defines the function signature for the Toast component. It accepts props and optional render functions, and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/toast.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Using updateStatusBarTitle Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the updateStatusBarTitle function from the @zos/ui module. It sets the status bar title to 'Mini Program Title'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/updateStatusBarTitle.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { updateStatusBarTitle } from '@zos/ui'\n\nconst title = 'Mini Program Title'\n\nupdateStatusBarTitle(title)\n```\n\n----------------------------------------\n\nTITLE: Creating a MUSIC Sensor in ZeppOS\nDESCRIPTION: Creates a sensor instance to control music playback on the watch. Note that this will throw an error if the device doesn't have a speaker.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = hmSensor.createSensor(hmSensor.id.MUSIC)\n```\n\n----------------------------------------\n\nTITLE: Exiting Mini Program using hmApp.exit() in JavaScript\nDESCRIPTION: Example of how to use the hmApp.exit() function to exit the current Mini Program application in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/exit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// exit the application\nhmApp.exit()\n```\n\n----------------------------------------\n\nTITLE: Getting Last Week's Daily Stress Averages in TypeScript\nDESCRIPTION: This snippet shows how to retrieve the average stress value for each day of the past 7 days using the getLastWeek method. It returns a fixed-length array of 7 numbers.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastWeek(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.seek Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for hmFS.seek(). It takes three parameters: fileId (number), position (number), and whence (number), and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/seek.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, position: number, whence: number) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Today's Heart Rate Data in TypeScript\nDESCRIPTION: Gets the heart rate measurement data in minutes from 0:00 to the current moment of the day. The longest array is 60*24.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetToday(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Documentation Content in React\nDESCRIPTION: This code imports a specific API documentation page content and renders it using a custom React component. The content being imported is for the 'getBrightness' function from the 'hmSetting' module in the device app API reference.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getBrightness.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Stopping Sound Playback in TypeScript\nDESCRIPTION: Method to stop the currently playing system sound.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Today's Heart Rate Data in TypeScript\nDESCRIPTION: Gets the heart rate measurement data in minutes from 0:00 to the current moment of the day. The longest array is 60*24.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetToday(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Defining readdirSync Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the readdirSync function that reads directory contents synchronously. Takes an Option parameter with a required path property and returns an array of strings or undefined.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/readdirSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readdirSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Timer Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the stopTimer function, specifying it takes a numeric timer ID parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/timer/stopTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(timerId: number) => void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for getBrightness\nDESCRIPTION: Type definition for the getBrightness function that returns a numeric Result value representing screen brightness.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/getBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getBrightness(): Result\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Check Function Signature\nDESCRIPTION: Function signature for the checkbox group's check callback, triggered when button state changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(checkboxGroup: CheckboxGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Getting Today's Heart Rate Data\nDESCRIPTION: Method to get heart rate measurement data from midnight to current time in minutes, max array length 60*24.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetToday(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Creating ARC_PROGRESS Widget in ZeppOS\nDESCRIPTION: Creates a new arc progress widget using hmUI.createWidget method. The widget requires a parameter object for configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Calculating Multi-line Text Layout in JavaScript\nDESCRIPTION: Example of using getTextLayout to calculate dimensions for multi-line text with a fixed width. It demonstrates how to set text size and width options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getTextLayout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { width, height } = hmUI.getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 200\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Defining Screen Type Function Signature - TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature for getScreenType() which returns a screenType number value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getScreenType.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => screenType\n```\n\n----------------------------------------\n\nTITLE: Adding One-Time Event Listener in TypeScript\nDESCRIPTION: Adds a one-time listener function for the specified event name. The listener is automatically removed after it is called once.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonce(eventName: string, listener: (...args: any[]) => void): void\n```\n\n----------------------------------------\n\nTITLE: Registering Wear Status Change Callback in TypeScript\nDESCRIPTION: Method for registering a callback function that will be triggered when the device's wearing status changes. The callback receives no parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_PROGRESS with Sequential Images\nDESCRIPTION: Complete example showing how to create an image progress widget with coordinate arrays, image paths, and progress level configuration. The example demonstrates setting up 3 images with their respective x,y coordinates and a progress level of 2.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xArray = [100, 200, 300]\nconst yArray = [100, 200, 300]\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, {\n  x: xArray,\n  y: yArray,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level为2 会依次绘制第一张图 第二张图\n})\n```\n\n----------------------------------------\n\nTITLE: Defining View Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the View component. It takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/app-settings-api/ui/view.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: ItemClickFunc Callback Function Type Declaration\nDESCRIPTION: TypeScript type definition for the item click callback function in CYCLE_LIST. This function is triggered when a user clicks on an item in the list.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(cycleList: CycleList, index: number) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget Properties in JavaScript\nDESCRIPTION: This example demonstrates how to use the getProperty method to retrieve properties of an image widget, including multiple properties at once and a single property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG) // 创建图形控件\nconst img_prop = img_bkg.getProperty(prop.MORE, {})\nconst { angle, w, h } = img_prop\n\nconst imgHeight = img_bkg.getProperty(prop.H)\n```\n\n----------------------------------------\n\nTITLE: Adding One-Time Event Listener in TypeScript\nDESCRIPTION: Adds a one-time listener function for the specified event name. The listener is automatically removed after it is called once.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonce(eventName: string, listener: (...args: any[]) => void): void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for getTextLayout\nDESCRIPTION: The TypeScript type definition for the getTextLayout function, showing that it accepts a string text parameter and an options object, and returns a result object with the calculated dimensions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(text: string, options: object) => result\n```\n\n----------------------------------------\n\nTITLE: Configuring IMG_POINTER Widget with Parameters\nDESCRIPTION: This example shows how to create an IMG_POINTER widget with specific parameters including image source, rotation center, and angle. It demonstrates the practical application of the Param object properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_POINTER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgPointer = hmUI.createWidget(hmUI.widget.IMG_POINTER, {\n  src: rootPath + 'hour.png',\n  center_x: 227,\n  center_y: 227,\n  x: 22,\n  y: 121,\n  angle: 245\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a STROKE_RECT Widget with Event Handling\nDESCRIPTION: Complete example showing how to create a stroked rectangle with rounded corners, specified dimensions, and event handling. Demonstrates both widget creation and property updates through event listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing IMG_ANIM Animation with Resource Directory Structure\nDESCRIPTION: Demonstrates the resource directory structure required for IMG_ANIM animation and provides a complete example of creating and controlling an animation with event handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 资源存放目录\n.\n└── assets\n        └── gtr-3\n                └── anim\n                        ├── animation_0.png\n                        ├── animation_1.png\n                        ├── animation_2.png\n                        ├── animation_3.png\n                        ├── animation_4.png\n                        └── animation_5.png\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, anim_status } from '@zos/ui'\n\nPage({\n  build() {\n    const imgAnimation = createWidget(widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(prop.ANIM_STATUS, anim_status.START)\n    imgAnimation.addEventListener(event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(prop.ANIM_STATUS, anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to STAND Sensor\nDESCRIPTION: Shows the syntax for adding an event listener to the STAND sensor\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Language Serial Number in JavaScript\nDESCRIPTION: Demonstrates how to use the hmSetting.getLanguage() function to get the current language serial number in ZeppOS. The returned value corresponds to a country and can be referenced in the Multilingual Mapping.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getLanguage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst language = hmSetting.getLanguage()\n```\n\n----------------------------------------\n\nTITLE: Creating WEAR Sensor in JavaScript\nDESCRIPTION: Demonstrates how to create a WEAR sensor instance and log its current status. The wear status is represented by a numeric value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WEAR.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst wear = hmSensor.createSensor(hmSensor.id.WEAR)\n\nconsole.log(wear.current)\n```\n\n----------------------------------------\n\nTITLE: Calculating Single-line Text Layout in JavaScript\nDESCRIPTION: Example of using getTextLayout to calculate dimensions for single-line text. It shows how to set options for non-wrapped text with zero width.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getTextLayout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { width, height } = hmUI.getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 0,\n  wrapped: 0\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Registering Change Event Listener for Barometer in TypeScript\nDESCRIPTION: Method to register a callback function that will be called when air pressure or altitude changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: CHANGE Event Callback Signature for Distance Sensor\nDESCRIPTION: Defines the callback function type for the CHANGE event of a distance sensor. The callback takes no arguments and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Registering Click Events Individually\nDESCRIPTION: This snippet shows how to register click events for multiple widgets individually. It creates three widgets and adds a click event listener to each one separately.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/widget-group.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst callback = () => {\n  console.log('callback')\n}\n\nconst img_icon_widget = createWidget(widget.IMG, {\n  // ...\n})\n\nimg_icon_widget.addEventListener(event.CLICK_DOWN, callback)\n\nconst img_arrow_widget = createWidget(widget.IMG, {\n  // ...\n})\n\nimg_arrow_widget.addEventListener(event.CLICK_DOWN, callback)\n\nconst text_name_widget = createWidget(widget.TEXT, {\n  // ...\n})\n\ntext_name_widget.addEventListener(event.CLICK_DOWN, callback)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setProperty Method\nDESCRIPTION: TypeScript type definition showing the method signature for the setProperty function that takes a propertyId string and any value type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(propertyId: string, val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Click Event Reception with 'enable' Property in ZeppOS\nDESCRIPTION: Demonstrates how to control whether a widget can receive click events by setting the 'enable' property during widget creation. When set to false, the widget will not respond to touch events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhmUI.createWidget(hmUI.widget.IMG, {\nx: 158,\ny: 218,\nw: 112,\nh: 136,\nalpha: 100,\nsrc: \"a.png\",\nenable：false，//false不接收点击事件\n})\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Call Signature in TypeScript\nDESCRIPTION: Alternative simplified TypeScript function signature for setBrightness that directly accepts a brightness number parameter instead of an Option object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setBrightness(brightness: number): Result\n```\n\n----------------------------------------\n\nTITLE: World Clock Cleanup Method Type Definition\nDESCRIPTION: Type definition for the uninit method, which recycles world clock data and corresponds to the init method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Fat Burning Minutes in TypeScript\nDESCRIPTION: Method to get the current fat burning minutes recorded by the device sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Defining getDiskInfo Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition showing the return type signature for the getDiskInfo method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getDiskInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => diskInfo\n```\n\n----------------------------------------\n\nTITLE: Creating a QRCODE Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to import and create a QRCODE widget. The createWidget function takes the widget type and a parameter object defining the QR code content and dimensions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/QRCODE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst qrcode = createWidget(widget.QRCODE, Param)\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.stat_asset in JavaScript\nDESCRIPTION: Example demonstrating how to use hmFS.stat_asset() to get file information from the assets directory, including error handling and accessing the file stats.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/stat_asset.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [fs_stat, err] = hmFS.stat_asset('test_file.txt')\n\nif (err == 0) {\n  console.log('--->size:', fs_stat.size)\n} else {\n  console.log('err:', err)\n}\n```\n\n----------------------------------------\n\nTITLE: Set Frequency Mode - TypeScript\nDESCRIPTION: TypeScript method signature for setting the compass trigger frequency mode.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetFreqMode(mode: number): void\n```\n\n----------------------------------------\n\nTITLE: Implementing the onComplete Callback in JavaScript\nDESCRIPTION: Example showing how to implement the onComplete callback to execute code when a download task is finished, regardless of outcome.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/download-file.mdx#2025-04-07_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst downloadTask = network.downloader.downloadFile({\n  url: 'https://docs.zepp.com/zh-cn/img/logo.png',\n  headers: {},\n  timeout: 60000,\n  filePath: 'data://download/1.png'\n})\n\ndownloadTask.onComplete = () => {\n  console.log('do something when success or fail')\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Battery Change Callback in TypeScript\nDESCRIPTION: This method registers a callback function to be called when the battery power changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Battery.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Fat Burning Minutes\nDESCRIPTION: Method to get the current fat burning minutes tracked by the sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Complete SPO2 Sensor Implementation Example in Zepp OS\nDESCRIPTION: A full implementation example showing how to create an SPO2 sensor, display its data, handle change events, and provide UI controls for starting measurements and registering event listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const spo2 = hmSensor.createSensor(hmSensor.id.SPO2)\n\n    new TextByLine({\n      text: `current:${spo2.current};time:${spo2.time};retcode:${spo2.retcode}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${spo2.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = spo2.current\n      const time = spo2.time\n      const retcode = spo2.retcode\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current};${time};${retcode}`\n      })\n    }\n\n    const spo2ChangeListener = () => {\n      spo2.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: spo2ChangeListener\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(380),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'START',\n      click_func: () => {\n        spo2.stop()\n        spo2.start()\n      }\n    })\n\n    const hourAvgOfDay = spo2.hourAvgOfDay\n\n    for (let i = 0; i < hourAvgOfDay.length; i++) {\n      new TextByLine({\n        text: `index:${i};${hourAvgOfDay[i]}`,\n        line: 8 + i\n      }).render()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Fat Burning Change Event Listener in TypeScript\nDESCRIPTION: Method to register a callback function that will be triggered when the fat burning minutes value changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating CYCLE_LIST Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a CYCLE_LIST widget using hmUI.createWidget(). It requires parameters such as position, dimensions, data array, and optional click callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cycleList = hmUI.createWidget(hmUI.widget.CYCLE_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fat Burning Target Minutes in TypeScript\nDESCRIPTION: Method to get the target fat burning minutes set for the user.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: Importing File System Documentation Content in React/MDX\nDESCRIPTION: Imports content from a filesystem API documentation file and renders it using a React content component. Uses relative path importing to access documentation about the hmFS.remove() functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/remove.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/remove.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.SysProSetChars Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for hmFS.SysProSetChars(). It takes two string parameters (key and val) and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: string) => result\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Data with Settings Storage in JavaScript\nDESCRIPTION: Example of using setItem to store a value and getItem to retrieve it from settings storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsettings.settingsStorage.setItem('key', 'Hello World')\nconst result = settings.settingsStorage.getItem('key')\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener - TypeScript\nDESCRIPTION: Method signature for removing a specific listener from the event array for the given event name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noff(eventName: string, listener: (...args: any[]) => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining getApp Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature of the getApp function in TypeScript. It shows that the function takes no parameters and returns a Result object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/getApp.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getApp(): Result\n```\n\n----------------------------------------\n\nTITLE: Dialog Show Method Type Definition\nDESCRIPTION: TypeScript type definition for the dialog instance show method, which controls dialog visibility.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/createDialog.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(isShow: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Vibrator Mode\nDESCRIPTION: TypeScript interface definition for vibrator mode option parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstart(option?: Option): void\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Function Usage Example in JavaScript\nDESCRIPTION: Example showing how to import and use the scrollTo function to scroll a page to vertical position 200.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/scrollTo.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollTo } from '@zos/page'\n\nscrollTo({\n  y: 200,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Distance Sensor Instance in ZeppOS\nDESCRIPTION: Shows how to create a distance sensor instance and access its current value. The sensor provides mileage data through the 'current' property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst distance = hmSensor.createSensor(hmSensor.id.DISTANCE)\n\nconsole.log(distance.current)\n```\n\n----------------------------------------\n\nTITLE: Creating a QRCODE Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to import and create a QRCODE widget. The createWidget function takes the widget type and a parameter object defining the QR code content and dimensions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/QRCODE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst qrcode = createWidget(widget.QRCODE, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-Based Communication in Side Service\nDESCRIPTION: This code demonstrates how to set up event listeners for receiving messages from Device App and how to send messages to Device App using MessageBuilder in the Side Service.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    messageBuilder.listen(() => {})\n\n    // send a message to Device App\n    messageBuilder.call({ text: 'Hello Zepp OS' })\n\n    // receive a message from Device App\n    messageBuilder.on('request', (ctx) => {\n      const payload = messageBuilder.buf2Json(ctx.request.payload)\n      const { method, params } = payload\n\n      if (method === 'GET') {\n        ctx.response({\n          data: { result : 0 }\n        })\n      }\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for widget.setProperty in TypeScript\nDESCRIPTION: TypeScript function signature for the widget.setProperty method that sets UI control properties. It accepts a property ID string and any type of value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(propertyId: string, val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving WorldClock Information Method Signature\nDESCRIPTION: TypeScript method signature for getting the number of configured world clocks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/WorldClock.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCount(): number\n```\n\n----------------------------------------\n\nTITLE: Select Component Type Definition in TypeScript\nDESCRIPTION: Type definition for the Select component showing the basic function signature that takes Props and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/app-settings-api/ui/select.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining stringToBuffer Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the stringToBuffer function, which takes a string input and returns an ArrayBuffer.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/stringToBuffer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stringToBuffer(str: InputString): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time Format Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the hmSetting.getTimeFormat() method, which returns the current time format (12-hour or 24-hour) as a number value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getTimeFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Creating Battery Sensor in ZeppOS\nDESCRIPTION: Demonstrates how to create a battery sensor instance and read the current battery level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n\nconsole.log('The current battery level is ' + battery.current + '\\r\\n')\n```\n\n----------------------------------------\n\nTITLE: Clearing Event Listeners - TypeScript\nDESCRIPTION: Method signature for removing all event listeners from the EventBus instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Creating SCROLL_LIST Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a SCROLL_LIST widget using the hmUI.createWidget method. The SCROLL_LIST widget allows for creating a scrollable list of items with customizable content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst scrollList = hmUI.createWidget(hmUI.widget.SCROLL_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating SCROLL_LIST Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a SCROLL_LIST widget using the hmUI.createWidget method. The SCROLL_LIST widget allows for creating a scrollable list of items with customizable content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst scrollList = hmUI.createWidget(hmUI.widget.SCROLL_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Counting Event Listeners - TypeScript\nDESCRIPTION: Method signature for getting the count of registered event listeners for a specific event name or total number of event types if no event name is specified.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncount(eventName?: string): number\n```\n\n----------------------------------------\n\nTITLE: getTextLayout Type Definition\nDESCRIPTION: TypeScript definition for the getTextLayout function, showing its parameter and return types. The function accepts a text string and options object, and returns a result object with width and height properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(text_string: string, options: object) => result\n```\n\n----------------------------------------\n\nTITLE: Type Definition in TypeScript\nDESCRIPTION: TypeScript function signature showing the type definition for the setPageBrightTime function and its parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setPageBrightTime.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setPageBrightTime(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Querying Permissions in ZeppOS Mini Program\nDESCRIPTION: Example of how to use the queryPermission function to check permission status in a ZeppOS Mini Program. The function is imported from the @zos/app module and returns an array of status codes corresponding to the requested permissions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/queryPermission.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { queryPermission } from '@zos/app'\n\nconst result = queryPermission()\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Documentation Update Changelog\nDESCRIPTION: Structured changelog entries documenting updates, fixes, and improvements to the ZeppOS documentation across multiple releases.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/revision-history.mdx#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## February 24, 2022\n\n- Add `PICK_DATE` widget\n- `TIME` widget\n  - add traditional Chinese festival and Solar Terms\n- `FILL_RECT` widget\n  - add `line_width` property\n- `IMG` widget\n  - Example of additional image rotation and position-related images\n- `stopTimer`\n  - Fixing bugs in code examples\n- `WEATHER` sensor\n  - Rewrite this module documentation\n  - Add sunrise and sunset data\n- `hmFS.readdir`\n  - Fix the type of return value\n  - Add code example\n- `hmFS.stat`\n  - Refine the description of the `mtime` property\n- `hmFS.stat_asset`\n  - Refine the description of the `mtime` property\n- `hmApp.exit`\n  - Refine the description\n- `hmApp.gotoHome`\n  - Refine the description\n\n## January 17, 2022\n\n- `hmUI.createDialog`\n  - Fix the `show` parameter type to `boolean`\n- `widget.setProperty`\n  - Add code example for setting multiple properties at the same time\n- `widget.getProperty`\n  - Add code example for getting multiple properties at the same time\n\n## December 28, 2021\n\n- `hmSetting.getDeviceInfo`\n  - Return value added `deviceSource` field\n- `hmFS.write`\n  - Fix the wrong order of document parameter passing\n- `hmFS.read`\n  - Fix the wrong order of document parameter passing\n- `hmSetting.getMileageUnit`\n  - Fix document method name labeling error\n- `FAT_BURRING` sensor\n  - Fix error in code example\n- `BATTERY` sensor\n  - Fix error in code example\n- `PAI` sensor\n  - Fix document property description error\n- `hmSetting.getUserData()`\n  - Fix the `age` property type to `number`\n- `hmSetting.getWeightTarget()`\n  - Fix document errors\n- `Select`\n  - Supplementary `options` type\n```\n\n----------------------------------------\n\nTITLE: Function Signature for readdirSync in TypeScript\nDESCRIPTION: TypeScript type definition for the readdirSync function, showing its parameters and return type structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/readdirSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction readdirSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Clearing All Items from sessionStorage in TypeScript\nDESCRIPTION: TypeScript method signature for removing all stored data from sessionStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Getting Current Blood Oxygen Result Type Definition\nDESCRIPTION: TypeScript type definition for the getCurrent() method return value, specifying the blood oxygen measurement result structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Defining UI Styles in ZeppOS Mini Program JavaScript\nDESCRIPTION: This snippet demonstrates how to separate styling information into a dedicated file. It defines a TEXT_STYLE constant that configures the appearance and positioning of a text widget, importing necessary style constants from the ZeppOS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/code-organization.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { align, text_style } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nexport const TEXT_STYLE = {\n  x: px(96),\n  y: px(40),\n  w: px(288),\n  h: px(46),\n  color: 0xffffff,\n  text_size: px(36),\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.WRAP\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Blood Oxygen Result Type Definition\nDESCRIPTION: TypeScript type definition for the getCurrent() method return value, specifying the blood oxygen measurement result structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Defining clearInterval Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the clearInterval function that cancels a timer. Takes an IntervalID parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/clearInterval.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clearInterval(intervalID: IntervalID): void\n```\n\n----------------------------------------\n\nTITLE: Using POLYLINE Widget in Zepp OS Page\nDESCRIPTION: This example shows how to create and use a POLYLINE widget within a Zepp OS page. It demonstrates importing necessary modules, creating the widget, setting its properties, and adding line data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const lineDataList = [\n      { x: 0, y: px(120) },\n      { x: px(100), y: px(10) },\n      { x: px(200), y: px(50) },\n      { x: px(300), y: px(50) },\n      { x: px(400), y: px(150) }\n    ]\n    const polyline = createWidget(widget.GRADKIENT_POLYLINE, {\n      x: 0,\n      y: px(200),\n      w: px(480),\n      h: px(150),\n      line_color: 0x00ffff,\n      line_width: 4\n    })\n    polyline.clear()\n    polyline.addLine({\n      data: lineDataList,\n      count: lineDataList.length\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Editable Watchface Group with Widget\nDESCRIPTION: Demonstrates how to create an editable watchface group with customizable widgets. Includes configuration for position, size, images, and data types with mask layers for UI.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst groupX = 153\nconst groupY = 246\n\neditGroup = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_GROUP, {\n  edit_id: 101,\n  x: groupX,\n  y: groupY,\n  w: 148,\n  h: 148,\n  select_image: rootPath + 'mask/select.png',\n  un_select_image: rootPath + 'mask/select.png',\n  default_type: hmUI.edit_type.HEART,\n  optional_types: [{ type: hmUI.edit_type.HEART, preview: rootPath + 'preview/bat.png' }],\n  count: 1,\n  tips_BG: rootPath + 'mask/text_tag.png',\n  tips_x: 172 - groupX,\n  tips_y: 210 - groupY,\n  tips_width: 110,\n  tips_margin: 10\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Permissions in ZeppOS Mini Program\nDESCRIPTION: Example of how to use the queryPermission function to check permission status in a ZeppOS Mini Program. The function is imported from the @zos/app module and returns an array of status codes corresponding to the requested permissions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/queryPermission.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { queryPermission } from '@zos/app'\n\nconst result = queryPermission()\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Brightness in JavaScript\nDESCRIPTION: This JavaScript code example demonstrates how to use the hmSetting.setBrightness() function to set the screen brightness to 50%. The function returns a result indicating success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/setBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setBrightness(50)\n```\n\n----------------------------------------\n\nTITLE: Creating SPO2 Sensor in Zepp OS\nDESCRIPTION: Creates an SPO2 sensor instance using the hmSensor API. This is the first step to access blood oxygen measurements in a Zepp OS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spo2 = hmSensor.createSensor(hmSensor.id.SPO2)\n```\n\n----------------------------------------\n\nTITLE: Stopping a Timer Example in JavaScript\nDESCRIPTION: Example showing how to create a timer with a callback function and subsequently stop it using stopTimer. The timer is set with a 500ms delay and 1000ms interval, with custom hour, minute, and second parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/timer/stopTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timer1 = timer.createTimer(\n  500,\n  1000,\n  function (option) {\n    console.log('timer callback')\n    console.log(option.hour)\n  },\n  { hour: 0, minute: 15, second: 30 }\n)\n\ntimer.stopTimer(timer1)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setLayerY Method in TypeScript\nDESCRIPTION: TypeScript type definition showing the method signature for the setLayerY function that takes a number parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/setLayerY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(offset: number) => void\n```\n\n----------------------------------------\n\nTITLE: Development Assets Directory Structure - Tree View\nDESCRIPTION: Shows the hierarchical structure of the /assets directory during development, including device-specific folders and raw data directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/fs.md#2025-04-07_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n.\nassets\n├── gtr-3\n│   ├── icon.png\n│   └── image\n│       └── logo.png\n├── gtr-3-pro\n│   ├── icon.png\n│   └── image\n│       └── logo.png\n└── gts-3\n│   ├── icon.png\n│   └── image\n│       └── logo.png\n└── raw\n    └── data.txt\n```\n\n----------------------------------------\n\nTITLE: Emitting Event in TypeScript\nDESCRIPTION: Triggers the listener functions for the specified event name. Any additional arguments are passed to the listener functions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nemit(eventName: string, ...args: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Emitting Event in TypeScript\nDESCRIPTION: Triggers the listener functions for the specified event name. Any additional arguments are passed to the listener functions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nemit(eventName: string, ...args: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Starting SPO2 Measurement in JavaScript\nDESCRIPTION: This snippet demonstrates how to initiate a single point measurement using the SPO2 sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nspo2.start()\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT_IMG Widget - JavaScript\nDESCRIPTION: Basic initialization of a TEXT_IMG widget using hmUI.createWidget() method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst textImg = hmUI.createWidget(hmUI.widget.TEXT_IMG, Param)\n```\n\n----------------------------------------\n\nTITLE: Importing Music Sensor Documentation MDX Content\nDESCRIPTION: Imports a content component containing music sensor documentation from a relative reference path using MDX syntax. The content is imported from the device app API reference section.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/MUSIC.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_PROGRESS Widget in ZeppOS\nDESCRIPTION: Creates an IMG_PROGRESS widget using hmUI.createWidget method with the appropriate parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Installing zeus-cli using Chinese NPM mirror\nDESCRIPTION: Commands to configure NPM to use Chinese mirrors for sharp binaries and install zeus-cli package globally using the npmmirror registry. This workaround helps overcome network access restrictions in mainland China.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/env-setup.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm config set sharp_binary_host \"https://npmmirror.com/mirrors/sharp\"\nnpm config set sharp_libvips_binary_host \"https://npmmirror.com/mirrors/sharp-libvips\"\nnpm i @zeppos/zeus-cli -g --registry \"https://registry.npmmirror.com\"\n```\n\n----------------------------------------\n\nTITLE: World Clock Count Retrieval Method Type Definition\nDESCRIPTION: Type definition for the getWorldClockCount method, which returns the total number of configured world clocks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => number\n```\n\n----------------------------------------\n\nTITLE: Defining clearInterval Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the clearInterval function that takes an IntervalID parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/clearInterval.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clearInterval(intervalID: IntervalID): void\n```\n\n----------------------------------------\n\nTITLE: Getting Year in TypeScript\nDESCRIPTION: TypeScript method definition for getting current year\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetFullYear(): number\n```\n\n----------------------------------------\n\nTITLE: Stopping Vibration in ZeppOS\nDESCRIPTION: This snippet demonstrates how to stop an ongoing vibration using the VIBRATE sensor instance. Calling stop is necessary to end the current vibration and allow for new vibrations to be initiated.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.stop()\n```\n\n----------------------------------------\n\nTITLE: File Reading in Zepp OS 1.0 vs 2.0\nDESCRIPTION: Compares file reading implementation between Zepp OS 1.0 and 2.0 APIs. The 2.0 version uses the new readFileSync function, which is more concise and easier to use.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/new-api.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 1.0 API\nconst fileName = 'TEST.txt'\n\nconst [fsStat, err] = hmFS.stat(fileName)\nif (err === 0) {\n  const fileContentUnit = new Uint8Array(fsStat.size)\n  const file = hmFS.open(fileName, hmFS.O_RDWR)\n  hmFS.seek(file, 0, hmFS.SEEK_SET)\n  hmFS.read(file, fileContentUnit.buffer, 0, fileContentUnit.length)\n  hmFS.close(file)\n\n  const content = JSON.parse(String.fromCharCode.apply(null, fileContentUnit))\n}\n\n// 2.0 API\nconst fileName = 'TEST.txt'\nconst result = readFileSync({\n  path: fileName,\n  options: {\n    encoding: 'utf8'\n  }\n})\n\nif (result) {\n  const content = JSON.parse(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js on MacOS/Linux\nDESCRIPTION: Commands to install and use the LTS version of Node.js on MacOS or Linux.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/environment.mdx#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnvm install --lts\nnvm use --lts\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Auto-Brightness in ZeppOS\nDESCRIPTION: This method enables or disables automatic screen brightness adjustment based on light sensor readings. When enabled, manual brightness settings via setBrightness will have no effect as the system will handle brightness adjustment automatically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setScreenAutoBright.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(isAutoBright: boolean) => result\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrist Motion Event Listener in JavaScript\nDESCRIPTION: This code example demonstrates how to use the onWristMotion function to listen for wrist motion events. It imports the necessary functions and constants, then sets up a callback to handle the events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/onWristMotion.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onWristMotion, WRIST_MOTION_LIFT } from '@zos/interaction'\n\nonWristMotion({\n  callback: (result) => {\n    const { type, motion } = result\n\n    if (type === 3) {\n      console.log(motion === WRIST_MOTION_LIFT)\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using setWakeUpRelaunch in JavaScript\nDESCRIPTION: Example of how to use the setWakeUpRelaunch function in a ZeppOS Mini Program to enable relaunching on wake-up.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setWakeUpRelaunch } from '@zos/display'\n\nsetWakeUpRelaunch({\n  relaunch: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Example Usage of swipeToIndex Function in JavaScript\nDESCRIPTION: Example demonstrating how to use the swipeToIndex function to navigate to a specific index in a page with SCROLL_MODE_SWIPER. First sets the scroll mode with setScrollMode, then navigates to index 5.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/swipeToIndex.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScrollMode, swipeToIndex, SCROLL_MODE_SWIPER } from '@zos/page'\n\nsetScrollMode({\n  mode: SCROLL_MODE_SWIPER,\n  options: {\n    height: 480,\n    count: 10,\n  },\n})\n\nswipeToIndex({\n  index: 5,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Router Push Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the push function, showing the function signature that takes an Option object parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/push.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction push(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Using scrollTo Function in JavaScript\nDESCRIPTION: Demonstrates how to import and use the scrollTo function in JavaScript, scrolling the page 200 pixels downward.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/page/scrollTo.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollTo } from '@zos/page'\n\nscrollTo({\n  y: -200,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Air Pressure with Barometer API in TypeScript\nDESCRIPTION: Method to retrieve the current air pressure value in hectopascals (hPa).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetAirPressure(): number\n```\n\n----------------------------------------\n\nTITLE: Using offGesture to Cancel Gesture Event Listeners in JavaScript\nDESCRIPTION: Example demonstrating how to register a gesture event listener with onGesture and then cancel it using offGesture. The example shows monitoring for an upward gesture event before deregistering the listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/offGesture.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onGesture, offGesture, GESTURE_UP } from '@zos/interaction'\n\nconst gestureCallback = (event) => {\n  if (event === GESTURE_UP) {\n    console.log('up')\n  }\n\n  return true\n}\n\nonGesture({\n  callback: gestureCallback,\n})\n\noffGesture()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Forecast Weather Data in ZeppOS\nDESCRIPTION: This snippet shows the type definition for the getForecastWeather() method, which returns forecast weather data including city name, forecast data, and tide data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => ForecastWeather\n```\n\n----------------------------------------\n\nTITLE: Example Usage of rmSync\nDESCRIPTION: JavaScript example demonstrating how to use rmSync to delete a file and check the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/rmSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rmSync } from '@zos/fs'\n\nconst result = rmSync({\n  path: 'test.txt',\n})\n\nif (result === 0) {\n  console.log('rmSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Event Response Type Definition\nDESCRIPTION: Type definition for the setEnable method that controls widget gesture event response. Takes a boolean parameter to enable or disable event handling for the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setEnable.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(response: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: SLIDE_SWITCH CheckedChangeFunc Callback Function\nDESCRIPTION: This code defines the structure of the CheckedChangeFunc callback function used in the SLIDE_SWITCH widget. It is called when the switch state changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(slideSwitch: SlideSwitch, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Establishing Bluetooth Connection in Side Service\nDESCRIPTION: Creates a MessageBuilder instance in the Side Service and listens for incoming messages from the device app during initialization.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message-side'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    // establish connection\n    messageBuilder.listen(() => {})\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Auto-Brightness in ZeppOS\nDESCRIPTION: This method enables or disables automatic screen brightness adjustment based on light sensor readings. When enabled, manual brightness settings via setBrightness will have no effect as the system will handle brightness adjustment automatically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setScreenAutoBright.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(isAutoBright: boolean) => result\n```\n\n----------------------------------------\n\nTITLE: Creating SPO2 Sensor in JavaScript\nDESCRIPTION: Creates an instance of the SPO2 sensor using the hmSensor.createSensor method. This sensor is used to measure blood oxygen levels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spo2 = hmSensor.createSensor(hmSensor.id.SPO2)\n```\n\n----------------------------------------\n\nTITLE: Starting System Sound Playback\nDESCRIPTION: Method to start playing a system sound. It accepts a sourceType parameter to specify the ringtone type and an optional repeatCount parameter (default 0) to control repetition.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstart(sourceType: number, repeatCount: 0): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Timer API Documentation for stopTimer Function\nDESCRIPTION: This snippet shows how the documentation for the stopTimer function is imported and rendered. It uses the MDX format to import content from a specific path and then renders it within the current page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/timer/stopTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/timer/stopTimer.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing Sleep Sensor Documentation Component in JSX\nDESCRIPTION: Imports a content component containing sleep sensor documentation from a relative path and renders it using JSX syntax.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/SLEEP.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Unregistering Standing Hours Change Listener in TypeScript\nDESCRIPTION: TypeScript method signature for canceling a previously registered callback function for standing hours changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: STAND Sensor Event Callback Type Definition\nDESCRIPTION: TypeScript type definition for the STAND sensor event callback function\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining the setScrollMode Function in TypeScript\nDESCRIPTION: TypeScript function signature for setScrollMode, showing the expected parameters and return type. This function is used to set the scroll mode of a page in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/setScrollMode.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setScrollMode(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: STAND Sensor Event Callback Type Definition\nDESCRIPTION: TypeScript type definition for the STAND sensor event callback function\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for SysProSetBool in TypeScript\nDESCRIPTION: TypeScript type definition showing the method signature for SysProSetBool. Takes a string key and boolean value as parameters, returns a numeric result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: boolean) => result\n```\n\n----------------------------------------\n\nTITLE: Importing DeleteWidget Component Documentation in React/MDX\nDESCRIPTION: Imports the DeleteWidget component documentation content from the reference path and renders it using the Content component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/deleteWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmUI/deleteWidget.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Toggle Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Toggle component in ZeppOS. The component takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/app-settings-api/ui/toggle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Type Definition for connectStatus Method\nDESCRIPTION: TypeScript type definition for the connectStatus method that returns the current connection state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n() => Result\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Data Elements in Markdown Table\nDESCRIPTION: A markdown table listing basic data elements used in watchface design, including time, numbers, separators, and progress indicators. It specifies naming conventions and examples for each element type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/specification.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|type|name|explain|\n|:--|:--|:--|\n|time|time_# ( \"#\" 序列 0~9)|When the digital font style of the time/minute/second is the same, it shall be named uniformly.|\n|   |hour_#，minute_#，second_#|When/min/sec digital font styles are different, they are named separately.|\n|pointer|hour，minute，second|When the time/minute/second is the pointer style, it is named separately.|\n|number|font_#_(0~9)|E.g \"font_power_1\"，|\n|empty data \" - - \"|#_invalid|E.g \"heart_invalid\" |\n|separator \" / \"|slash|Commonly used for date and temperature division, E.g \"12/04\"|\n|separator \" - \"|negative|Commonly used for date division, temperature, E.g \"12-04\"|\n|separator \" : \"|colon|Commonly used in time division,E.g \"10:09\"|\n|separator \" . \"|dot|Commonly used in time record segmentation, fE.g \"30.27\"|\n|separator \" % \"|percent|Commonly used percentage of electricity consumption, E.g \"00%\"|\n|morning|am_#||\n|afternoon|pm_#||\n|month|month_#_（jan~dec）||\n|year|year_#||\n|background|bg||\n|linear progress|#_line||\n|circular progress|#_circle||\n|custom progress|#_stage_(0~10)||\n|application preview picture|preview_#|\"#\" language classification, Simplified (sc), Traditional (tc), English (en)|\n|watch preview|preview_#|\"#\" language classification, Simplified (sc), Traditional (tc), English (en)|\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.seek in Zepp OS Page\nDESCRIPTION: Example showing how to use hmFS.seek to move the file pointer within a Zepp OS page component. Demonstrates opening a file and setting the pointer to the beginning of the file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/seek.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n\n    hmFS.seek(file, 0, hmFS.SEEK_SET)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Animation in ZeppOS JavaScript\nDESCRIPTION: Demonstrates creating a text widget with multiple animation steps. The example shows how to animate x and y positions using linear transitions, set animation properties, and control animation playback using status commands.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widgetAnimations.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, text_style, prop, anim_status } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: px(96),\n      y: px(120),\n      w: px(288),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(36),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n\n    const anim_step1 = {\n      anim_rate: 'linear',\n      anim_duration: 2000,\n      anim_from: px(10),\n      anim_to: px(110),\n      anim_prop: prop.X\n    }\n\n    const anim_step2 = {\n      anim_rate: 'linear',\n      anim_duration: 2000,\n      anim_from: px(120),\n      anim_to: px(300),\n      anim_prop: prop.Y\n    }\n\n    const animId = textWidget.setProperty(prop.ANIM, {\n      anim_steps: [anim_step1, anim_step2],\n      anim_fps: 25\n    })\n\n    textWidget.setProperty(prop.ANIM_STATUS, {\n      anim_id: animId,\n      anim_status: anim_status.PAUSE\n    })\n\n    textWidget.setProperty(prop.ANIM_STATUS, {\n      anim_id: animId,\n      anim_status: anim_status.RESUME\n    })\n\n    const currentStatus = textWidget.getProperty(prop.ANIM_STATUS, animId)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Sunrise Callback in TypeScript\nDESCRIPTION: Demonstrates how to register a callback function for sunrise events. Only works when the device has weather information. Available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nonSunrise(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Manual Property Tracking Example\nDESCRIPTION: Example demonstrating how to manually track widget properties when getProperty is not supported, using page state management.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  state: {\n    buttonY: 0\n  },\n  build() {\n    this.state.buttonY = 300\n\n    createWidget(widget.BUTTON, {\n      y: this.state.buttonY,\n      // ...\n    })\n\n    showToast({\n      text: this.state.buttonY\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Altitude with Barometer API in TypeScript\nDESCRIPTION: Method to retrieve the current altitude value in meters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAltitude(): number\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Brightness Duration in ZeppOS\nDESCRIPTION: This code snippet demonstrates how to use the hmSetting.setBrightScreen method to set the screen to stay bright for 10 seconds. The method returns a result code where 0 indicates successful execution.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setBrightScreen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setBrightScreen(10)\n```\n\n----------------------------------------\n\nTITLE: Using SysProGetInt64 in JavaScript\nDESCRIPTION: Example showing how to store and retrieve a 64-bit integer value using the system property functions. Demonstrates setting a value and then retrieving it using the same key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetInt64.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt64('js_test_int64', 200)\nconsole.log(hmFS.SysProGetInt64('js_test_int64'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Body Temperature Data in ZeppOS\nDESCRIPTION: This code example shows how to access the current temperature and time interval data from the thermometer object. It logs this information to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  'the current temp: ' + thermometer.current + ' interval:' + thermometer.timeinterval + '\\r\\n'\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown FAQ Index Links\nDESCRIPTION: A structured list of markdown links to various FAQ documents for ZeppOS development topics.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/index.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FAQ\n\n- [WatchFace Maker](./watchface-maker.md)\n- [FAQ about app icon](./icon-faq.md)\n- [Simulator click exception on 4K screen](./simulator-4-4k.md)\n- [Developer Bridge Mode](./developer-bridge-mode.md)\n- [Simulator FAQ](./simulator-faq.md)\n- [Unable to preview Mini Program in Simulator or real machine](./preview-error.md)\n- [Submit user feedback (submit log)](./upload-log.md)\n- [Environment Installation FAQ](./env-setup.md)\n- [Solution for inability to enter the system](./re-install-system.md)\n- [Get test simulator](./join-test-group.md)\n- [How to log in to the Simulator with a third-party authorized login account?](./third-party-login.md)\n- [Submit a paid Mini Program or Watchface](./paid-app.md)\n- [Watch recorded opus audio file format conversion](./opus-to-mp3.md)\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_LEVEL Widget in ZeppOS\nDESCRIPTION: Creates an IMG_LEVEL widget using hmUI.createWidget method. This widget displays images from an array based on the specified level property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, Param)\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener for FAT_BURRING Sensor\nDESCRIPTION: Shows the TypeScript function signature for adding an event listener to the fat burning sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Registering CALORIE Sensor Event Listener in JavaScript\nDESCRIPTION: Shows how to register an event listener for the CALORIE sensor's CHANGE event. The callback function logs the current calorie consumption and target values when the event is triggered.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current calorie is ' + calorie.current + '\\r\\n')\n  console.log('The calorie target is ' + calorie.target + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT_IMG Widget in ZeppOS\nDESCRIPTION: Creates a TEXT_IMG widget using hmUI.createWidget. This widget displays text as images using a custom font array. It requires parameters such as position, size, and font array.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst textImg = hmUI.createWidget(hmUI.widget.TEXT_IMG, Param)\n```\n\n----------------------------------------\n\nTITLE: Updating TEXT_IMG Widget Text in ZeppOS\nDESCRIPTION: This snippet shows how to update the text of an existing TEXT_IMG widget using the setProperty method. It allows changing the displayed text dynamically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = hmUI.createWidget(hmUI.widget.TEXT_IMG, Param)\nconst text = '12' //If you want to not display the data write \"\" directly.\nwidget.setProperty(hmUI.prop.TEXT, text)\n```\n\n----------------------------------------\n\nTITLE: Sample project structure after creation\nDESCRIPTION: The directory structure of a newly created Zepp OS project, showing the app-side component, main app files, assets for different watch models, pages, and settings.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/cli/index.md#2025-04-07_snippet_2\n\nLANGUAGE: tree\nCODE:\n```\n└── hello-world\n    ├── app-side\n    │   ├── i18n\n    │   │   └── en-US.po\n    │   └── index.js\n    ├── app.js\n    ├── app.json\n    ├── assets\n    │   ├── 436x436-gtr-3\n    │   └── 480x480-gtr-3-pro\n    ├── pages\n    │   ├── example\n    │   │   └── index.js\n    │   ├── i18n\n    │   │   └── en-US.po\n    │   └── index.js\n    └── setting\n        ├── i18n\n        │   └── en-US.po\n        └── index.js\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setScreenKeep in TypeScript\nDESCRIPTION: TypeScript type definition showing the method signature for setScreenKeep function that takes a boolean parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/setScreenKeep.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Refreshing a List Item to Original State\nDESCRIPTION: Example of refreshing a list item to revert any property changes back to its original state using the ITEM_REFRESH property with the item index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nwidget.setProperty(prop.ITEM_REFRESH, 0) // 0 is the index of item , starting from 0.\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setScreenOff Method\nDESCRIPTION: TypeScript type definition showing the method signature and return type for the setScreenOff function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/setScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Rotated Image Widget with Advanced Positioning\nDESCRIPTION: Advanced example demonstrating image rotation and precise positioning using center points and offset parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_hour = hmUI.createWidget(hmUI.widget.IMG)\n    img_hour.setProperty(hmUI.prop.MORE, {\n      x: 0,\n      y: 0,\n      w: 454,\n      h: 454,\n      pos_x: 454 / 2 - 27,\n      pos_y: 50 + 50,\n      center_x: 454 / 2,\n      center_y: 454 / 2,\n      src: 'hour.png',\n      angle: 30\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Off Example\nDESCRIPTION: JavaScript example showing how to call the setScreenOff method. The method returns a number where 0 indicates successful execution.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/setScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setScreenOff()\n```\n\n----------------------------------------\n\nTITLE: Creating Vibrate Sensor Instance in ZeppOS\nDESCRIPTION: Creates a new VIBRATE sensor instance using hmSensor API. Only one instance can be created per page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n```\n\n----------------------------------------\n\nTITLE: Creating Vibrate Sensor Instance in ZeppOS\nDESCRIPTION: Creates a new VIBRATE sensor instance using hmSensor API. Only one instance can be created per page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n```\n\n----------------------------------------\n\nTITLE: ItemFocusChangeFunc Callback Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the item focus change function callback in ScrollList. The function is called when focus changes on an item and provides the list reference, index, and focus state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n(list: ScrollList, index: number, focus: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Target in JavaScript\nDESCRIPTION: Demonstrates how to use the hmSetting.getSleepTarget() function to retrieve the user's sleep target. The returned value is in minutes, with a default of 0 if not set.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getSleepTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = hmSetting.getSleepTarget()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date Format\nDESCRIPTION: JavaScript example showing how to retrieve the current date format setting. Returns 0 for year-month-day, 1 for day-month-year, or 2 for month-day-year.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getDateFormat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dateFormat = hmSetting.getDateFormat()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weather Forecast Data Method Signature\nDESCRIPTION: TypeScript method signature for retrieving weather forecast data from the Weather sensor, which returns a ForecastWeather object containing city name, forecast data, and tide information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Weather.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetForecastWeather(): ForecastWeather\n```\n\n----------------------------------------\n\nTITLE: Checking Screen Auto-Brightness Type Definition\nDESCRIPTION: TypeScript type definition showing the function signature for getting the auto-brightness state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getScreenAutoBright.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Creating Sports Data Widget in Zepp OS\nDESCRIPTION: This code snippet demonstrates how to create a sports data widget using the Zepp OS UI framework. It imports necessary functions from the @zos/ui module and configures the widget with specific parameters such as position, size, and data type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SPORT_DATA.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\ncreateWidget(widget.SPORT_DATA, {\n  edit_id: 1,\n  category: edit_widget_group_type.SPORTS,\n  default_type: sport_data.CONSUME,\n  x: 50,\n  y: 200,\n  w: 380,\n  h: 80\n})\n```\n\n----------------------------------------\n\nTITLE: Distance Sensor Usage Example - JavaScript\nDESCRIPTION: Complete example showing how to initialize the Distance sensor, get current values, and handle change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Distance.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Distance } from '@zos/sensor'\n\nconst distance = new Distance()\nconst current = distance.getCurrent()\nconst callback = () => {\n  console.log(distance.getCurrent())\n}\n\ndistance.onChange(callback)\n\n// When not needed for use\ndistance.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Signature for mkdirSync in TypeScript\nDESCRIPTION: Defines the simplified TypeScript function signature for mkdirSync with a direct string parameter instead of an options object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/mkdirSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction mkdirSync(path: string): Result\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_LEVEL Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating an IMG_LEVEL widget using hmUI.createWidget(). This widget displays images based on a level value from an image array.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, Param)\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Brightness Example in ZeppOS\nDESCRIPTION: A code example demonstrating how to enable automatic screen brightness adjustment. The method returns a numeric result where 0 indicates the setting was successfully applied.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setScreenAutoBright.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setScreenAutoBright(true)\n```\n\n----------------------------------------\n\nTITLE: Importing ZeppOS FS Documentation Component\nDESCRIPTION: React/MDX import statement that loads the documentation for the SysProGetBool filesystem API function from the ZeppOS device application documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProGetBool.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing ZeppOS FS Documentation Component\nDESCRIPTION: React/MDX import statement that loads the documentation for the SysProGetBool filesystem API function from the ZeppOS device application documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProGetBool.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Heart Rate\nDESCRIPTION: Method to get the latest heart rate measurement value, must be used within onCurrentChange callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Type Definition for offKey Function\nDESCRIPTION: TypeScript type definition showing the offKey function signature that takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/offKey.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction offKey(): void\n```\n\n----------------------------------------\n\nTITLE: Accessing Sleep Stage Model Constants\nDESCRIPTION: Example code showing how to retrieve sleep stage model constants and access the different sleep stage types available in the API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst modelData = sleep.getSleepStageModel()\nconsole.log(modelData.WAKE_STAGE)\nconsole.log(modelData.REM_STAGE)\nconsole.log(modelData.LIGHT_STAGE)\nconsole.log(modelData.DEEP_STAGE)\n```\n\n----------------------------------------\n\nTITLE: Registering Per-Day Callback in TypeScript\nDESCRIPTION: Demonstrates how to register a callback function that runs at the end of every day. Available from API_LEVEL 2.1.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nonPerDay(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining addEventListener Function Signature in TypeScript for Zepp OS Sensors\nDESCRIPTION: TypeScript type definition for the addEventListener function that registers sensor callback events. It takes an eventId parameter to identify the sensor and a callback function that receives an Event object. The function doesn't return any value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/addEventListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(eventId: EventId, callback: (event: Event) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Creating a PICK_DATE Time Selection Widget in ZeppOS\nDESCRIPTION: Creates a time selection widget using hmUI.createWidget with the PICK_DATE widget type. This allows users to select date values in the application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/PICK_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pickDate = hmUI.createWidget(hmUI.widget.PICK_DATE, Param)\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for hmSetting.setScreenOff in TypeScript\nDESCRIPTION: Type signature for the hmSetting.setScreenOff() method, which takes no parameters and returns a numeric result indicating success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Using PAI Sensor API in ZeppOS Applications\nDESCRIPTION: Example of how to import and use the PAI sensor in a ZeppOS application. This code creates a new PAI sensor instance and retrieves total, today's, and weekly PAI values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Pai.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pai } from '@zos/sensor'\n\nconst pai = new Pai()\nconst total = pai.getTotal()\nconst today = pai.getToday()\nconst lastWeek = pai.getLastWeek()\n```\n\n----------------------------------------\n\nTITLE: Registering STEP Sensor Event Listener in JavaScript\nDESCRIPTION: This code shows how to register a callback function for the CHANGE event of the STEP sensor. The callback will be triggered when the step count changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstep.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Creating ARC_PROGRESS Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an ARC_PROGRESS widget using the hmUI.createWidget method. The widget is used to draw arc progress with customizable properties such as start angle, line width, end angle, color, and progress scale.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Week's PAI in TypeScript\nDESCRIPTION: Gets the PAI data for the past 7 days using the getLastWeek method. Returns an array of length 7, where index 0 is today's PAI value, index 1 is yesterday's, and so on.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Pai.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastWeek(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_PROGRESS Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG_PROGRESS widget using hmUI.createWidget(). The widget displays images sequentially according to a given order.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining pausePalmScreenOff Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for pausePalmScreenOff. It specifies the function parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/display/pausePalmScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pausePalmScreenOff(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnServiceChangeEnd in JavaScript\nDESCRIPTION: This example demonstrates how to import the mstOnServiceChangeEnd function from the @zos/ble module. The actual usage of the function is not shown in the provided code snippet.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnServiceChangeEnd.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOnServiceChangeEnd } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Uninitializing WORLD_CLOCK Sensor in ZeppOS\nDESCRIPTION: Type definition for the uninit method, which recycles world clock data, corresponding to the init method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining getSleepTarget Function Type - TypeScript\nDESCRIPTION: TypeScript type definition for the getSleepTarget function that returns a numeric result representing sleep target in minutes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getSleepTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSleepTarget(): Result\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyboard Control in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a system-level input keyboard using the createKeyboard function from the @zos/ui module. It shows the required and optional parameters for initializing the keyboard.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SMART_KEYBOARD.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createKeyboard, inputType } from '@zos/ui'\n\nconst keyboard = createKeyboard({\n  // 必要参数\n  inputType: inputType.NUM,\n  onComplete: (result) => {\n    /* 输入完成处理 */\n  },\n  onCancel: (result) => {\n    /* 取消输入处理 */\n  },\n\n  // 可选参数\n  text: '初始文本'\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Histogram Data in ZeppOS\nDESCRIPTION: Method to update the data points in an existing histogram widget. Updates both the data array and count of data points.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/HISTOGRAM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = ......;\n  view.setProperty(hmUI.prop.UPDATE_DATA, {\n  data_array: [100, 100, 0, 0, 0, 100],\n  data_count: 6\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for readSync\nDESCRIPTION: Type definition for the readSync function showing the expected parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/readSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining pausePalmScreenOff Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the pausePalmScreenOff function that takes an Option parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/pausePalmScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pausePalmScreenOff(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Configuring API Permissions in Zepp OS app.json\nDESCRIPTION: Configuration snippet showing how to declare required API permissions in the app.json file. This example adds the data:user.info permission to allow access to user profile data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/permission.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"data:user.info\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Version in app.json for Zepp Mini Programs\nDESCRIPTION: Example of the configVersion property in app.json that specifies the version of the configuration format. This value determines how the system parses the configuration file, with v2 being the current standard.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"configVersion\": \"v2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetInt and SysProGetInt Functions in JavaScript\nDESCRIPTION: This example demonstrates how to use the SysProSetInt function to store an integer value and then retrieve it using SysProGetInt. It stores the value 100 with the key 'js_test_int' and then logs the retrieved value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: Creating Basic IMG Widget in ZeppOS\nDESCRIPTION: Basic example of creating an IMG widget with minimal parameters and handling click events to update its position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img = hmUI.createWidget(hmUI.widget.IMG, {\n      x: 125,\n      y: 125,\n      src: 'zeppos.png'\n    })\n    img.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      img.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Saving Data with setItem in LocalStorage (TypeScript)\nDESCRIPTION: Demonstrates how to save data to LocalStorage using the setItem method. The method takes a key of type string and a value of any type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: any): void\n```\n\n----------------------------------------\n\nTITLE: Creating Heart Rate Sensor\nDESCRIPTION: Demonstrates how to create a heart rate sensor instance and access the last measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst heart = hmSensor.createSensor(hmSensor.id.HEART)\n\nconsole.log(heart.last)\n```\n\n----------------------------------------\n\nTITLE: TransferFile Type Definition\nDESCRIPTION: Type definition for the getOnbox method return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => Onbox\n```\n\n----------------------------------------\n\nTITLE: Getting Step Goal with TypeScript in ZeppOS\nDESCRIPTION: TypeScript method signature for retrieving the user's step goal. Returns the target number of steps as a numeric value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for readSync\nDESCRIPTION: Type definition for the readSync function showing the expected parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/readSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving World Clock Info in ZeppOS\nDESCRIPTION: Type definition for the getWorldClockCountInfo method, which retrieves world clock data for a specific index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(index: number) => wordInfo\n```\n\n----------------------------------------\n\nTITLE: Complete Time Sensor Implementation - JavaScript\nDESCRIPTION: Full example showing TextByLine class implementation and time sensor usage with various properties and methods\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const time = hmSensor.createSensor(hmSensor.id.TIME)\n\n    new TextByLine({\n      text: `utc:${time.utc};year:${time.year};month:${time.month};day:${time.day}`,\n      line: 0\n    }).render()\n\n    new TextByLine({\n      text: `hour:${time.hour};minute:${time.minute};second:${time.second};week:${time.week}`,\n      line: 1\n    }).render()\n\n    new TextByLine({\n      text: `format_hour:${time.format_hour};is24Hour:${time.is24Hour}`,\n      line: 2\n    }).render()\n\n    new TextByLine({\n      text: `lunar_year:${time.lunar_year};lunar_month:${time.lunar_month};`,\n      line: 3\n    }).render()\n\n    new TextByLine({\n      text: `lunar_year:${time.lunar_year};lunar_month:${time.lunar_month};lunar_day:${time.lunar_day}`,\n      line: 4\n    }).render()\n\n    new TextByLine({\n      text: `lunar_festival:${time.lunar_festival};lunar_solar_term:${time.lunar_solar_term};solar_festival:${time.solar_festival}`,\n      line: 5\n    }).render()\n\n    new TextByLine({\n      text: `getShowFestival:${time.getShowFestival()}`,\n      line: 6\n    }).render()\n\n    const lunar_month_cal = time.getLunarMonthCalendar()\n\n    for (let i = 0; i < lunar_month_cal.day_count; i++) {\n      new TextByLine({\n        text: `index:${i};lunar_day:${lunar_month_cal.lunar_days_array[i]}`,\n        line: 7 + i\n      }).render()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring API Permissions in Zepp OS app.json\nDESCRIPTION: Configuration snippet showing how to declare required API permissions in the app.json file. This example adds the data:user.info permission to allow access to user profile data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/permission.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"data:user.info\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Battery Change Callback in TypeScript\nDESCRIPTION: This method cancels a previously registered battery change event callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Battery.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining getWeightTarget Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getWeightTarget function that returns a user's weight target as a number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getWeightTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getWeightTarget(): Result\n```\n\n----------------------------------------\n\nTITLE: Complete VIBRATE Sensor Usage Example in ZeppOS\nDESCRIPTION: A complete example showing how to create the sensor, configure a vibration scene, start vibration on click, and properly clean up when the page is destroyed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n\nfunction click() {\n  vibrate.stop()\n  vibrate.scene = 25\n  vibrate.start()\n}\n\nclick()\n\nPage({\n  onDestroy() {\n    vibrate && vibrate.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating ARC_PROGRESS Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an ARC_PROGRESS widget using hmUI.createWidget(). The widget is used to draw arc progress with customizable properties such as start angle, line width, end angle, color, and progress scale.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating DATE_POINTER Widget in ZeppOS JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a DATE_POINTER widget in ZeppOS. It shows the configuration of various properties such as scale images, pointer position, angles, and date type. The widget is used to display date information (in this case, day of the week) using a graphical pointer.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/DATE_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet week = hmUI.createWidget(hmUI.widget.DATE_POINTER, {\n  scale_x: 0,\n  scale_x: 0, scale_y: 0,\n  scale_sc: 'bg.png', // Background image, optional.\n  scale_tc: 'bg.png',\n  scale_en: 'bg.png',\n  center_x: 100,\n  center_y: 100,\n  src: 'pointer.png', // Image.\n  posX: 0,\n  posY: 0,\n  cover_x: 0, //Pointer above the hat.\n  cover_y: 0,\n  cover_path: 'cover.png',\n  start_angle: 0, //Point 0 is positive. You can write negative numbers.\n  end_angle: 180,\n  type: hmUI.date.WEEK //Refer to the table above.\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for removeEventListener Method in TypeScript\nDESCRIPTION: The TypeScript type definition for the removeEventListener method, which takes an event ID and a callback function as parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/removeEventListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(eventId: EventId, callback) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Widget - Basic Initialization\nDESCRIPTION: Shows the basic syntax for creating a circle widget using hmUI.createWidget. The widget requires a type specification of hmUI.widget.CIRCLE and a parameter object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst circle = hmUI.createWidget(hmUI.widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: Get World Clock Info Method Type Definition\nDESCRIPTION: TypeScript type definition for the getWorldClockCountInfo method which retrieves detailed information for a specific world clock by index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(index: number) => wordInfo\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Content in JavaScript\nDESCRIPTION: This code snippet imports a content component from a specific path and renders it within the current file. It's commonly used in documentation frameworks to modularize and reuse content across different pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmUI/getProperty.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining the getSystemInfo Function Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the getSystemInfo function, which returns system information. The function doesn't accept any parameters and returns a Result object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getSystemInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSystemInfo(): Result\n```\n\n----------------------------------------\n\nTITLE: Type Definition for stopTimer Function in TypeScript\nDESCRIPTION: Type definition for the stopTimer function, which accepts a timer ID number and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/timer/stopTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(timerId: number) => void\n```\n\n----------------------------------------\n\nTITLE: Using requestPermission Function in JavaScript\nDESCRIPTION: Example of how to use the requestPermission function to request the 'device:os.bg_service' permission. It demonstrates importing the function, calling it with the required parameters, and logging the results.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/requestPermission.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { requestPermission } from '@zos/app'\n\nconst result = requestPermission({\n  permissions: ['device:os.bg_service'],\n  callback: (result) => {\n    console.log(result)\n  },\n})\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Importing Stop Function from Zepp OS App Service Module\nDESCRIPTION: Example of importing the stop function from the @zos/app-service module. This is the basic usage pattern for accessing the function in a Zepp OS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/app-service/stop.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stop } from '@zos/app-service'\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProGetInt Function in JavaScript\nDESCRIPTION: Example of setting and retrieving a temporary integer value using hmFS.SysProSetInt and hmFS.SysProGetInt functions in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Page with Page Number Detection in Zepp OS\nDESCRIPTION: Demonstrates how to create a scrollable page with multiple colored sections, each containing text. It uses hmUI.setScrollView to enable scrolling and hmUI.getScrollCurrentPage to detect the current page number when text is clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getScrollCurrentPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\nfunction getRandomFromSection(low, high) {\n  const RANDOM = Math.random()\n  const RANGE = high - low + 1\n\n  return Math.floor(RANDOM * RANGE) + low\n}\n\nPage({\n  build() {\n    const isVertical = true\n    hmUI.setScrollView(true, px(480), 20, isVertical)\n\n    const numArr = Array.from({ length: 20 }).map((_, index) => index)\n\n    numArr.forEach((num) => {\n      const backgroundColor = Array.from({ length: 6 }).reduce((prev, curr) => {\n        const random = getRandomFromSection(0, 15)\n        return prev + randomArr[random]\n      }, '0x')\n\n      hmUI.createWidget(hmUI.widget.FILL_RECT, {\n        x: 0,\n        y: px(480) * num,\n        w: px(480),\n        h: px(480),\n        color: Number(backgroundColor)\n      })\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(96),\n        y: px(200) + px(480) * num,\n        w: px(320),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(36),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `HELLO ZEPPOS ${num}`\n      })\n\n      text.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n        const currentIndex = hmUI.getScrollCurrentPage()\n        console.log('currentIndex', currentIndex)\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Page with Page Number Detection in Zepp OS\nDESCRIPTION: Demonstrates how to create a scrollable page with multiple colored sections, each containing text. It uses hmUI.setScrollView to enable scrolling and hmUI.getScrollCurrentPage to detect the current page number when text is clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getScrollCurrentPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\nfunction getRandomFromSection(low, high) {\n  const RANDOM = Math.random()\n  const RANGE = high - low + 1\n\n  return Math.floor(RANDOM * RANGE) + low\n}\n\nPage({\n  build() {\n    const isVertical = true\n    hmUI.setScrollView(true, px(480), 20, isVertical)\n\n    const numArr = Array.from({ length: 20 }).map((_, index) => index)\n\n    numArr.forEach((num) => {\n      const backgroundColor = Array.from({ length: 6 }).reduce((prev, curr) => {\n        const random = getRandomFromSection(0, 15)\n        return prev + randomArr[random]\n      }, '0x')\n\n      hmUI.createWidget(hmUI.widget.FILL_RECT, {\n        x: 0,\n        y: px(480) * num,\n        w: px(480),\n        h: px(480),\n        color: Number(backgroundColor)\n      })\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(96),\n        y: px(200) + px(480) * num,\n        w: px(320),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(36),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `HELLO ZEPPOS ${num}`\n      })\n\n      text.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n        const currentIndex = hmUI.getScrollCurrentPage()\n        console.log('currentIndex', currentIndex)\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workout History in TypeScript\nDESCRIPTION: This snippet shows how to retrieve workout history using the getHistory method. It returns an array of History objects, each containing startTime and duration properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Workout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetHistory(): Array<History>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Seconds in TypeScript\nDESCRIPTION: Gets the number of seconds in the current time using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetSeconds(): number\n```\n\n----------------------------------------\n\nTITLE: Creating Weather Sensor in ZeppOS\nDESCRIPTION: Initializes a new weather sensor instance using the hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst weather = hmSensor.createSensor(hmSensor.id.WEATHER)\n```\n\n----------------------------------------\n\nTITLE: Starting Blood Oxygen Measurement in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the start() method, which begins a new blood oxygen measurement. It's recommended to call stop() before starting a new measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Getting Display Festival in TypeScript\nDESCRIPTION: Demonstrates how to get the festival string to display for the current day. Priority is Gregorian festival, lunar festival, then solar term. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ngetShowFestival(): string\n```\n\n----------------------------------------\n\nTITLE: Item Click Callback Function Type for CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: TypeScript type definition for the item click callback function used with CYCLE_IMAGE_TEXT_LIST. This function receives the cycleList instance and the clicked item index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n(cycleList: CycleList, index: number) => void\n```\n\n----------------------------------------\n\nTITLE: Function Signature for writeSync in ZeppOS\nDESCRIPTION: The TypeScript definition for the writeSync function that synchronously writes to files. It defines the function signature with its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/writeSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction writeSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Current Distance in TypeScript\nDESCRIPTION: Method to retrieve the current distance measurement from the sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Distance.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Lifecycle Callbacks in ZeppOS JavaScript\nDESCRIPTION: This example demonstrates how to create a widget delegate to handle UI lifecycle events in ZeppOS. It implements resume_call and pause_call callbacks for managing UI state changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst widgetDelegate = hmUI.createWidget(hmUI.widget.WIDGET_DELEGATE, {\nresume_call: (function () {\n    console.log('ui resume');\n}),\npause_call: (function () {\n    console.log('ui pause');\n}),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining updateStatusBarTitle Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for updateStatusBarTitle. It takes a string parameter 'title' and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/updateStatusBarTitle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(title: string) => void\n```\n\n----------------------------------------\n\nTITLE: Creating TIME Sensor in ZeppOS\nDESCRIPTION: Demonstrates how to create a TIME sensor instance using the hmSensor.createSensor method. This sensor provides access to various time-related properties and functions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst time = hmSensor.createSensor(hmSensor.id.TIME)\n```\n\n----------------------------------------\n\nTITLE: Battery Change Event Handler Example\nDESCRIPTION: Shows how to register and handle battery level change events using addEventListener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbattery.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current battery level is ' + battery.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Seconds in TypeScript\nDESCRIPTION: Gets the number of seconds in the current time using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetSeconds(): number\n```\n\n----------------------------------------\n\nTITLE: Getting Widget Properties Example\nDESCRIPTION: Example showing how to get multiple properties from an image widget using getProperty with prop.MORE and how to get a single height property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\nconst img_prop = img_bkg.getProperty(prop.MORE, {})\nconst { angle, w, h } = img_prop\n\nconst imgHeight = img_bkg.getProperty(prop.H)\n```\n\n----------------------------------------\n\nTITLE: Configuring IMG_POINTER Widget in ZeppOS\nDESCRIPTION: This example shows how to configure an IMG_POINTER widget with specific parameters. It sets the image source, rotation center coordinates, image center coordinates, and initial rotation angle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/IMG_POINTER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgPointer = hmUI.createWidget(hmUI.widget.IMG_POINTER, {\n  src: 'hour.png',\n  center_x: 227,\n  center_y: 227,\n  x: 22,\n  y: 121,\n  angle: 245\n})\n```\n\n----------------------------------------\n\nTITLE: Creating ARC Widget - Basic Initialization\nDESCRIPTION: Demonstrates how to import and create a basic ARC widget using the ZeppOS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/ARC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst arc = createWidget(widget.ARC, Param)\n```\n\n----------------------------------------\n\nTITLE: Stopping System Sound Playback\nDESCRIPTION: Method to stop the currently playing system sound.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Defining deleteWidget Type in TypeScript\nDESCRIPTION: TypeScript type definition for the deleteWidget function that takes a widget object and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/deleteWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(widget: WIDGET) => void\n```\n\n----------------------------------------\n\nTITLE: Getting Hours in TypeScript\nDESCRIPTION: TypeScript method definition for getting current hours\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetHours(): number\n```\n\n----------------------------------------\n\nTITLE: Creating Music Sensor Instance\nDESCRIPTION: Initializes a new music sensor instance using the hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = hmSensor.createSensor(hmSensor.id.MUSIC)\n```\n\n----------------------------------------\n\nTITLE: Defining showToast Function Type in TypeScript\nDESCRIPTION: Defines the type signature for the showToast function, which takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/showToast.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => void\n```\n\n----------------------------------------\n\nTITLE: Defining SysProSetDouble Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.SysProSetDouble function. It takes a string key and a number value as parameters, and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProSetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Defining setAppWidgetSize Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the setAppWidgetSize function. It takes an Option object as a parameter and returns undefined.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/setAppWidgetSize.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(option: Option) => undefined\n```\n\n----------------------------------------\n\nTITLE: Defining Assets Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the assets utility function that constructs resource file paths. Shows the function signature with BasePath parameter and return type AssetsPathFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/assets.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assets(basePath: BasePath): AssetsPathFunc\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmUI.setScrollView in TypeScript\nDESCRIPTION: TypeScript type definition for the setScrollView function that specifies the parameter types and return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setScrollView.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(enable: boolean, pageHeight: number, pageCount: number, isVertical: boolean) => result\n```\n\n----------------------------------------\n\nTITLE: Manual Property Tracking Pattern\nDESCRIPTION: Shows a pattern for manually tracking widget properties when property retrieval is not supported, using page state to maintain property values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getProperty.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    buttonY: 0\n  },\n  build() {\n    this.state.buttonY = 300\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      y: this.state.buttonY,\n      // ...\n    })\n\n    hmUI.showToast({\n      text: this.state.buttonY\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Heart Rate Measurement in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript method signature for getting the most recent heart rate measurement, excluding continuous measurements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetLast(): number\n```\n\n----------------------------------------\n\nTITLE: Creating a PICK_DATE Widget in ZeppOS\nDESCRIPTION: Basic example showing how to import and create a PICK_DATE widget in ZeppOS. This snippet demonstrates the core function calls needed to initialize the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PICK_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst pickDate = createWidget(widget.PICK_DATE, Param)\n```\n\n----------------------------------------\n\nTITLE: Registering Fat Burning Change Event Listener\nDESCRIPTION: Method to register a callback function that will be invoked when the fat burning minutes value changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating RADIO_GROUP Widget - JavaScript\nDESCRIPTION: Basic widget creation example showing how to create a radio group and state button widget using hmUI.createWidget()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/RADIO_GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst radioGroup = hmUI.createWidget(hmUI.widget.RADIO_GROUP, radioGroupParam)\nconst stateButton = hmUI.createWidget(hmUI.widget.STATE_BUTTON, stateButtonParam)\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Progress Widget in ZeppOS\nDESCRIPTION: Basic initialization of an ARC_PROGRESS widget using hmUI.createWidget(). This creates a new arc progress widget instance that can be customized with various parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for SysProGetBool Method\nDESCRIPTION: TypeScript type definition showing the method signature for SysProGetBool. Takes a string key parameter and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Registering Gyroscope Change Event in ZeppOS\nDESCRIPTION: Method for registering a callback function that will be executed whenever gyroscope data changes. This allows for reactive handling of rotation data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Implementing an ARC Widget with Event Handling in ZeppOS\nDESCRIPTION: Complete example showing how to create an ARC widget with specific styling properties and add a click event listener that modifies the vertical position when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/ARC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const arc = hmUI.createWidget(hmUI.widget.ARC, {\n      x: 100,\n      y: 100,\n      w: 250,\n      h: 250,\n      start_angle: -90,\n      end_angle: 90,\n      color: 0xfc6950,\n      line_width: 20\n    })\n\n    arc.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      arc.setProperty(hmUI.prop.MORE, {\n        y: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating TEXT_IMG Widget Text - JavaScript\nDESCRIPTION: Example of updating the text content of a TEXT_IMG widget using setProperty method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = hmUI.createWidget(hmUI.widget.TEXT_IMG, Param)\nconst text = '12' //If you want to not display the data write \"\" directly.\nwidget.setProperty(hmUI.prop.TEXT, text)\n```\n\n----------------------------------------\n\nTITLE: Creating ARC Widget - Basic Initialization\nDESCRIPTION: Basic code snippet showing how to import and create an ARC widget using the ZeppOS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/ARC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst arc = createWidget(widget.ARC, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating Time Display with IMG_TIME Widget in ZeppOS JavaScript\nDESCRIPTION: Creates a time widget using image arrays to display digital time. Supports hour, minute, and second display with customizable zero padding, spacing, alignment, and AM/PM indicators. Requires an array of 10 images representing digits 0-9.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// The font of array. The number of images must be 10 in order 0-9.\nconst timeArray = []\nlet timeText = hmUI.createWidget(hmUI.widget.IMG_TIME, {\n  hour_zero: 1, // Whether to make up zero.\n  hour_startX: 205,\n  hour_startY: 184,\n  hour_array: timeArray,\n  hour_space: 8, // The interval between each array.\n  // Units\n  hour_unit_sc: rootPath + 'icon/colon.png',\n  hour_unit_tc: rootPath + 'icon/colon.png',\n  hour_unit_en: rootPath + 'icon/colon.png',\n  hour_align: hmUI.align.LEFT,\n  // minute second Replaces hour.\n  minute_follow: 1, // Whether to follow.\n  second_follow: 1, // Whether to follow.\n  // omitted as above\n  am_x: 200,\n  am_x: 200, am_y: 100,\n  am_sc_path: 'am.png',\n  am_en_path: 'am_en.png'\n  // pm as above. Prefix changed from am to pm.\n})\n```\n\n----------------------------------------\n\nTITLE: Widget.removeEventListener Type Definition in TypeScript\nDESCRIPTION: Type definition for the removeEventListener method in TypeScript. It accepts an EventId parameter and a callback function, returning void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/removeEventListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(eventId: EventId, callback) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Text Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the Text component. It takes Props as an argument and optionally accepts a RenderFunc or an array of RenderFunc, returning a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/text.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Widget.removeEventListener Type Definition in TypeScript\nDESCRIPTION: Type definition for the removeEventListener method in TypeScript. It accepts an EventId parameter and a callback function, returning void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/removeEventListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(eventId: EventId, callback) => void\n```\n\n----------------------------------------\n\nTITLE: Creating ARC_PROGRESS Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an ARC_PROGRESS widget using the hmUI.createWidget method. The widget is used to display circular progress indicators with customizable properties such as center position, radius, start and end angles, color, and progress level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Unregister Compass Change Event - TypeScript\nDESCRIPTION: TypeScript method signature for canceling a compass direction change event listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating UI Widget in Zepp OS Mini Programs using JavaScript\nDESCRIPTION: This snippet demonstrates how to create a UI widget using the hmUI.createWidget API in Zepp OS Mini Programs. The hmUI control module is used for implementing UI interactions and includes an event system for handling view interaction logic.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/intro.md#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nhmUI.createWidget()\n```\n\n----------------------------------------\n\nTITLE: Type Definition - pauseDropWristScreenOff Function\nDESCRIPTION: TypeScript type definition for the pauseDropWristScreenOff function that suspends wrist rest behavior. Takes an Option parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/pauseDropWristScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pauseDropWristScreenOff(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Event Listener Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the addEventListener method, showing the expected parameter types and return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/addEventListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(eventId: EventId, callback: (event: Event) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_STATUS Widget in ZeppOS JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an IMG_STATUS widget using hmUI.createWidget(). It sets the position, status type, and image source for the widget. The width and height are optional and default to the image dimensions if not specified.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_STATUS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst status = hmUI.createWidget(hmUI.widget.IMG_STATUS, {\n  x: 0,\n  y: 0,\n  // w,h are optional settings. Use image width and height by default.\n  type: hmUI.system_status.DISCONNECT, // Data types, refer to the table above.\n  src: 'status.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Battery Event Listener Type Definition\nDESCRIPTION: TypeScript type definition for battery event callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining pauseDropWristScreenOff Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the pauseDropWristScreenOff function that takes an Option parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/pauseDropWristScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pauseDropWristScreenOff(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Week and Month Abbreviation Table\nDESCRIPTION: Markdown table showing standardized abbreviations for weeks and months in different formats including full case, capitals, abbreviated forms with periods, and short forms.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/specification.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|type|Case|All capitals|The first letter is capitalized and ends with a dot (.)|Abbreviation 1|Abbreviation 2|\n|:--|:--|:--|:--|:--|:--|\n|week|1. Monday <br/> 2. Tuesday<br/> 3. Wednesday<br/>4. Thursday<br/>5. Friday<br/>6. Saturday<br/>7. Sunday|1. MONDAY<br/>2. TUESDAY<br/>3. WEDNESDAY<br/>4. THURSDAY<br/>5. FRIDAY<br/>6. SATURDAY<br/>7. SUNDAY|1. Mon.<br/>2. Tue./Tues.<br/>3. Wed.<br/>4. Thu./Thur./Thurs.<br/>5. Fri.<br/>6. Sat.<br/>7. Sun.|1. MON<br/>2. TUE/TUES<br/>3. WED<br/>4. THU/THUR/THURS<br/>5. FRI<br/>6. SAT<br/>7. SUN|1. Mo.<br/>2. Tu.<br/>3. We.<br/>4. Th.<br/>5. Fr.<br/>6. Sa.<br/>7. Su.|\n|month|1. January<br/>2. February<br/>3. March<br/>4. April<br/>5. May<br/>6. June<br/>7. July<br/>8. August<br/>9. September<br/>10. October<br/>11. November<br/>12. December|1. JANUARY<br/>2. FEBRUARY<br/>3. MARCH<br/>4. APRIL<br/>5. MAY<br/>6. JUNE<br/>7. JULY<br/>8. AUGUST<br/>9. SEPTEMBER<br/>10. OCTOBER<br/>11. NOVEMBER<br/>12. DECEMBER|1. Jan.<br/>2. Feb.<br/>3. Mar.<br/>4. Apr.<br/>5. May<br/>6. Jun.<br/>7. Jul.<br/>8. Aug.<br/>9. Sep./Sept.<br/>10. Oct.<br/>11. Nov.<br/>12. Dec.|1. JAN<br/>2. FEB<br/>3. MAR<br/>4. APR<br/>5. MAY<br/>6. JUN<br/>7. JUL<br/>8. AUG<br/>9. SEP/SEPT<br/>10. OCT<br/>11. NOV<br/>12. DEC|无|\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.SysProGetInt Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.SysProGetInt function, which takes a string key and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Standing Target Hours with TypeScript in ZeppOS\nDESCRIPTION: TypeScript method signature for retrieving the target number of hours with standing behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Sleep Information in ZeppOS\nDESCRIPTION: Demonstrates how to access basic sleep information including sleep score, deep sleep time, and sleep start/end times.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst basicInfo = sleep.getBasicInfo()\nconsole.log('basicInfo score=' + basicInfo.score) //sleep score\nconsole.log('basicInfo deepMin=' + basicInfo.deepMin) //deep sleep time unit score\nconsole.log('basicInfo startTime=' + basicInfo.startTime) // sleep start time, based on the number of minutes at 0:00 of the day\nconsole.log('basicInfo endTime=' + basicInfo.endTime) // sleep end time, minutes from the same base as the start time\n// sleep totalTime = endTime - startTime + 1;\n\nlet start = basicInfo.startTime\nif (start >= SLEEP_REFERENCE_ZERO) {\n  // SLEEP_REFERENCE_ZERO is the number of minutes in a day, i.e. 24*60\n  start -= SLEEP_REFERENCE_ZERO\n}\n\nhour = start / 60\nminute = start % 60\n\nconst end = basicInfo.endTime + 1 // if it is aligned with the secondary screen, the end time should be added by 1\nif (end >= SLEEP_REFERENCE_ZERO) {\n  end -= SLEEP_REFERENCE_ZERO\n}\nhour = end / 60\nminute = end % 60\n```\n\n----------------------------------------\n\nTITLE: Creating ARC Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to import the necessary modules and create an ARC widget. It uses the createWidget function from the @zos/ui module to instantiate the widget with specified parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/ARC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst arc = createWidget(widget.ARC, Param)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Atrial Fibrillation Data in TypeScript\nDESCRIPTION: Gets an array of Atrial Fibrillation data, including test results, values, and timestamps.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetAFibRecord(): Result\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing Buttons in ZeppOS\nDESCRIPTION: This example demonstrates creating two types of buttons in ZeppOS: one with image backgrounds and another with color backgrounds. It shows how to set up click handlers and dynamically update button properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_button = hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(hmUI.prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100,\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Lunar Year in TypeScript\nDESCRIPTION: Shows how to get the current Chinese lunar calendar year. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarYear(): number\n```\n\n----------------------------------------\n\nTITLE: Getting Current Stress Value Type Definition\nDESCRIPTION: TypeScript type definition for the getCurrent() method that retrieves current stress measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Defining launchApp Function Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the launchApp function that opens Mini Programs or System Apps. It takes an Option object parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/launchApp.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction launchApp(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for SysProSetInt64 Method\nDESCRIPTION: TypeScript type definition showing the method signature for SysProSetInt64, which takes a string key and number value as parameters and returns a result number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Unregistering Fat Burning Change Event Listener\nDESCRIPTION: Method to cancel a previously registered callback function for fat burning minutes change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_ANIM Widget - Basic Initialization\nDESCRIPTION: Basic syntax for creating an IMG_ANIM widget instance using hmUI.createWidget()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgAnim = hmUI.createWidget(hmUI.widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining launchApp Function Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the launchApp function that opens Mini Programs or System Apps. It takes an Option object parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/launchApp.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction launchApp(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: English Localization File Structure - Zepp OS\nDESCRIPTION: Example of an English (en-US) localization file showing key-value pairs for text strings used in the Calories Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/i18n.mdx#2025-04-07_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n// en-US.po\n\nmsgid \"unit\"\nmsgstr \"KCAL\"\n\nmsgid \"cake\"\nmsgstr \"Cake\"\n\nmsgid \"coffee\"\nmsgstr \"Coffee\"\n\nmsgid \"calories\"\nmsgstr \"Calories\"\n\nmsgid \"beer\"\nmsgstr \"Beer\"\n\nmsgid \"iceCream\"\nmsgstr \"Ice cream\"\n\nmsgid \"equivalent\"\nmsgstr \"Equivalent to\"\n\nmsgid \"hamburger\"\nmsgstr \"Hamburger\"\n\nmsgid \"pizza\"\nmsgstr \"Pizza\"\n\nmsgid \"chocolate\"\nmsgstr \"Chocolate\"\n\nmsgid \"consumption\"\nmsgstr \"Consumption Today\"\n\nmsgid \"sausage\"\nmsgstr \"Sausage\"\n\nmsgid \"ham\"\nmsgstr \"Ham\"\n\nmsgid \"cookie\"\nmsgstr \"Cookie\"\n```\n\n----------------------------------------\n\nTITLE: Defining pauseDropWristScreenOff Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the pauseDropWristScreenOff function that takes an Option parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/pauseDropWristScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pauseDropWristScreenOff(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Registering Distance Change Callback - TypeScript\nDESCRIPTION: Method signature for registering a callback function that executes when distance changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Distance.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating a DIALOG Widget in ZeppOS\nDESCRIPTION: Demonstrates how to create a DIALOG widget using the createWidget function from ZeppOS UI library. This requires the widget to be imported from @zos/ui.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/DIALOG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst dialog = createWidget(widget.DIALOG, Param)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of hmFS.SysProSetBool in JavaScript\nDESCRIPTION: A simple JavaScript example showing how to use the hmFS.SysProSetBool function to store a boolean value (true) with a specific key ('test_key').\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetBool.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nhmFS.SysProSetBool('test_key', true)\n```\n\n----------------------------------------\n\nTITLE: Creating ARC Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to import the necessary modules and create an ARC widget. It uses the createWidget function from the @zos/ui module to instantiate the widget with specified parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/ARC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst arc = createWidget(widget.ARC, Param)\n```\n\n----------------------------------------\n\nTITLE: TextView Configuration Example\nDESCRIPTION: Example configuration for text views within a SCROLL_LIST item showing name and age fields with different styling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst text_view = [\n  { x: 100, y: 0, w: 100, h: 20, key: 'name', color: 0xffffff, action: true },\n  { x: 0, y: 30, w: 100, h: 100, key: 'age', color: 0xffffff, text_size: 20 }\n]\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setProperty Method in ZeppOS\nDESCRIPTION: TypeScript type definition for the setProperty function showing parameter types and return value. This method takes a propertyId string and a value of any type, returning void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(propertyId: string, val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Content from getProperty.mdx Documentation in React\nDESCRIPTION: This snippet imports a React component from a documentation MDX file and renders it directly. It demonstrates how documentation content is modularized and reused across the Zepp OS documentation site.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmUI/getProperty.mdx'\n\n<Content/>\n    \n```\n\n----------------------------------------\n\nTITLE: Registering BATTERY Sensor Event Listener in JavaScript\nDESCRIPTION: Shows how to register an event listener for the BATTERY sensor's CHANGE event.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbattery.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Defining setBrightness Function Type in TypeScript\nDESCRIPTION: TypeScript function signature for the setBrightness API that allows setting screen brightness with an Option object parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setBrightness(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving PAI Total Value in TypeScript\nDESCRIPTION: Method signature for getting the current cumulative PAI value. This method returns a number representing the total PAI value accumulated by the user.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Pai.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetTotal(): number\n```\n\n----------------------------------------\n\nTITLE: Defining setBrightness Function Type in TypeScript\nDESCRIPTION: TypeScript function signature for the setBrightness API that allows setting screen brightness with an Option object parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setBrightness(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Sound Enabled Status in TypeScript\nDESCRIPTION: Method to check whether system ringtone functionality is enabled. Sound playback is only possible when this is enabled.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetEnabled(): boolean\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setBrightScreen Function in TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature for setBrightScreen method. Takes a number parameter and returns a result value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/setBrightScreen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(brightTime: number) => result\n```\n\n----------------------------------------\n\nTITLE: Defining setBrightness Function Type in TypeScript\nDESCRIPTION: TypeScript function signature for the setBrightness API that allows setting screen brightness with an Option object parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setBrightness(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Installing Tunnelblick via Homebrew on MacOS\nDESCRIPTION: Command to install Tunnelblick virtual network card software using Homebrew package manager on MacOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/simulator/setup.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask tunnelblick\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Information in JavaScript\nDESCRIPTION: Example showing how to call the getDeviceInfo() method to retrieve device information including screen dimensions, shape, name, key count, and device code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getDeviceInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst deviceInfo = hmSetting.getDeviceInfo()\n```\n\n----------------------------------------\n\nTITLE: Accessing Sleep Stage Model Data in JavaScript\nDESCRIPTION: Demonstrates how to access different sleep stage model data using the getSleepStageModel method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst modelData = sleep.getSleepStageModel()\nconsole.log(modelData.WAKE_STAGE)\nconsole.log(modelData.REM_STAGE)\nconsole.log(modelData.LIGHT_STAGE)\nconsole.log(modelData.DEEP_STAGE)\n```\n\n----------------------------------------\n\nTITLE: Defining getCurrentPage Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getCurrentPage function, which returns a Result object containing the page instance properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/global/getCurrentPage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getCurrentPage(): Result\n```\n\n----------------------------------------\n\nTITLE: Removing Child Nodes in Zepp OS Widget Layout\nDESCRIPTION: Shows how to remove a child widget from its parent container using removeLayoutChild.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove child widget from parent container\ncontainer.removeLayoutChild(button)\n```\n\n----------------------------------------\n\nTITLE: Controlling Widget Visibility Individually\nDESCRIPTION: This snippet shows how to control the visibility of multiple widgets individually without using a GROUP widget. It creates three widgets and sets their visibility properties separately.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/widget-group.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst img_icon_widget = createWidget(widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = createWidget(widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = createWidget(widget.TEXT, {\n  // ...\n})\n\nimg_icon_widget.setProperty(prop.VISIBLE, false)\nimg_arrow_widget.setProperty(prop.VISIBLE, false)\ntext_name_widget.setProperty(prop.VISIBLE, false)\n```\n\n----------------------------------------\n\nTITLE: Creating VIBRATE Sensor in ZeppOS\nDESCRIPTION: Creates a new instance of the VIBRATE sensor using hmSensor.createSensor with the appropriate sensor ID. Only one instance can be created per page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for getSystemInfo\nDESCRIPTION: TypeScript type definition for the getSystemInfo function that returns system information including OS version, firmware version, and minimum API level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getSystemInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSystemInfo(): Result\n```\n\n----------------------------------------\n\nTITLE: Stopping Blood Oxygen Measurement Type Definition\nDESCRIPTION: TypeScript type definition for stop() method to cancel blood oxygen measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Registering End-of-Hour Event Listener in TypeScript\nDESCRIPTION: Registers a callback function for the end-of-hour event using the Time sensor. Available from API_LEVEL 3.6.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nonPerHourEnd(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Converting Settings Storage to Object in JavaScript\nDESCRIPTION: Example of using the toObject method to convert the settingsStorage content to a JavaScript object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst storageObj = settings.settingsStorage.toObject()\n\nconsole.log(storageObj)\n```\n\n----------------------------------------\n\nTITLE: Defining getCurrentPage Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getCurrentPage function, which returns a Result object containing the page instance properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/global/getCurrentPage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getCurrentPage(): Result\n```\n\n----------------------------------------\n\nTITLE: Unregistering Wear Status Change Callback in TypeScript\nDESCRIPTION: Method to unregister a previously registered callback function for wear status changes. The callback function to be removed should be passed as an argument.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Simplified Calling Method for scrollTo in TypeScript\nDESCRIPTION: Alternative simplified TypeScript function signature for scrollTo that accepts just a y-coordinate parameter for quicker implementation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/scrollTo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollTo(y: number): void\n```\n\n----------------------------------------\n\nTITLE: Crown Rotation Event Handler Implementation\nDESCRIPTION: JavaScript example showing how to register a crown rotation event handler that logs the rotation key and degree. The handler receives the rotation direction and magnitude through the degree parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/spinEvent/registerSpinEvent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmApp.registerSpinEvent(function (key, degree) {\n  console.log('receive key:' + key + ' degree:' + degree) //The key here can only be HOME at the moment, and can be used without judgment.\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Double Precision Value from System Properties in JavaScript\nDESCRIPTION: Example usage of hmFS.SysProGetDouble() function in JavaScript. It demonstrates setting a double precision value using SysProSetDouble and then retrieving it with SysProGetDouble.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetDouble('js_test_double', 3.14)\nconsole.log(hmFS.SysProGetDouble('js_test_double'))\n```\n\n----------------------------------------\n\nTITLE: Creating a STROKE_RECT Widget in ZeppOS\nDESCRIPTION: Creates a stroked rectangle widget using hmUI.createWidget with the hmUI.widget.STROKE_RECT type and required parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing PICKER Callback Function\nDESCRIPTION: Example callback function for the PICKER widget. It demonstrates handling selection events, updating widget properties, and changing the displayed data dynamically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/PICKER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction picker_cb(picker, event_type, column_index, select_index) {\n  if (event_type == 2) {\n    picker.setProperty(prop.TITLE, 'End Date')\n    picker.setProperty(prop.SUBTITLE, '3 days in totals')\n\n    picker.setProperty(prop.UPDATE_DATA, {\n      col_index: 0,\n      val_index: 5,\n      data_array: new Array(10).fill(0).map((d, index) => index + 1)\n    })\n\n    picker.setProperty(prop.CUR_COLUMN, 1)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified cancel Function Signature in TypeScript\nDESCRIPTION: This snippet shows a simplified TypeScript function signature for the cancel function. It takes a number id as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/alarm/cancel.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cancel(id: number): Result\n```\n\n----------------------------------------\n\nTITLE: Battery Event Listener Callback Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the callback function used in the battery sensor's event listener. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining disConnect Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the disConnect method which disconnects the Bluetooth connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Page Constructor Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the Page constructor function, specifying the function signature that takes an Option parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/global/Page.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Page(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for setScrollMode\nDESCRIPTION: Type definition showing the function signature for setScrollMode, which takes an Option parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/setScrollMode.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setScrollMode(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Printing Debug Level Logs in TypeScript\nDESCRIPTION: Method to print debug level logs. It accepts multiple string arguments.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndebug(...args: string[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining View Component Type in TypeScript\nDESCRIPTION: Type definition for the View component in Zepp OS. It takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/view.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Stop Function Type Definition - TypeScript\nDESCRIPTION: TypeScript type definition for the stop function that shuts down a specified backend service. Takes an Option object with file path and callback function parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-service/stop.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stop(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Resource Directory Structure for Animation\nDESCRIPTION: Shows the expected directory structure for organizing animation frame images in the assets folder.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n.\n└── assets\n        └── gtr-3\n                └── anim\n                        ├── animation_0.png\n                        ├── animation_1.png\n                        ├── animation_2.png\n                        ├── animation_3.png\n                        ├── animation_4.png\n                        └── animation_5.png\n```\n\n----------------------------------------\n\nTITLE: Creating a QRCODE Widget in Zepp OS\nDESCRIPTION: Shows how to import and create a QR code widget using the Zepp OS UI framework. The createWidget function takes the widget type (QRCODE) and a parameter object containing the QR code configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/QRCODE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst qrcode = createWidget(widget.QRCODE, Param)\n```\n\n----------------------------------------\n\nTITLE: Function Type Signature for hmFS.SysProGetInt64\nDESCRIPTION: Type signature showing the function accepts a string key parameter and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Creating WEAR Sensor Instance in JavaScript\nDESCRIPTION: Creates a WEAR sensor instance using hmSensor.createSensor() and logs the current wear status. The sensor provides wear status information as a numeric value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/WEAR.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst wear = hmSensor.createSensor(hmSensor.id.WEAR)\n\nconsole.log(wear.current)\n```\n\n----------------------------------------\n\nTITLE: Creating POLYLINE Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to import and create a POLYLINE widget using the ZeppOS UI framework. It specifies the widget type and parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst polyline = createWidget(widget.GRADKIENT_POLYLINE, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating a FILL_RECT Widget in ZeppOS\nDESCRIPTION: This snippet shows how to create a Fill Rectangle widget using the createWidget function from the ZeppOS UI module. The widget requires basic parameters like position, dimensions, and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/FILL_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst fillRect = createWidget(widget.FILL_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Reading BODY_TEMP Sensor Data in ZeppOS\nDESCRIPTION: Demonstrates how to read current temperature and time interval values from the thermometer sensor. The current property returns the temperature reading while timeinterval shows elapsed time since the last measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  'the current temp: ' + thermometer.current + ' interval:' + thermometer.timeinterval + '\\r\\n'\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Stage Model in TypeScript\nDESCRIPTION: Shows the type definition for the getSleepStageModel method, which returns sleep stage model data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => modelData\n```\n\n----------------------------------------\n\nTITLE: Music Event Handling Example\nDESCRIPTION: Example showing how to handle music change events and log the current song title.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(\"The current song's name: \" + music.title + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Solar Term in TypeScript\nDESCRIPTION: Shows how to get the current Chinese solar term. Returns 'INVALID' if there is no solar term. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ngetSolarTerm(): string\n```\n\n----------------------------------------\n\nTITLE: Auth OAUTH Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Auth OAUTH component, showing that it accepts Props and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/auth.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Stopping Blood Oxygen Measurement in TypeScript\nDESCRIPTION: This method stops the blood oxygen measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Creating a FILL_RECT Widget in ZeppOS\nDESCRIPTION: This snippet shows how to create a Fill Rectangle widget using the createWidget function from the ZeppOS UI module. The widget requires basic parameters like position, dimensions, and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/FILL_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst fillRect = createWidget(widget.FILL_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Tutorial Video using MDX\nDESCRIPTION: MDX code block for embedding a Zepp OS tutorial video using react-lite-youtube-embed component with responsive container styling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start.mdx#2025-04-07_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport LiteYouTubeEmbed from 'react-lite-youtube-embed';\n\n<div className=\"video-container\">\n  <LiteYouTubeEmbed\n    id=\"RPyTge0kjWQ\"\n    title=\"Zepp OS Program Environment Setup and Development Beginner's Guide\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for onDigitalCrown, showing the Option parameter type requirement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onDigitalCrown.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onDigitalCrown(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining getAllNotifications Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the getAllNotifications function in TypeScript. The function takes no parameters and returns an array of numbers representing notification IDs.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/notification/getAllNotifications.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAllNotifications(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Heart Rate Current Event Listener\nDESCRIPTION: Shows how to register an event listener for continuous heart rate measurements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst hrCurrentListener = function () {\n  console.log(heart.current)\n}\n\nheart.addEventListener(heart.event.CURRENT, hrCurrentListener)\n```\n\n----------------------------------------\n\nTITLE: Defining setAutoBrightness Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for setAutoBrightness. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setAutoBrightness(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Accessing Snap Mode Enum for ScrollList in JavaScript\nDESCRIPTION: Demonstrates how to access the snap mode enumeration values for the ScrollList widget. These values determine how items snap into position when scrolling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SCROLL_LIST } from '@zos/ui'\n\nconsole.log(SCROLL_LIST.snap_type.SNAPCENTER_ALL)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SysProGetInt in JavaScript\nDESCRIPTION: Demonstrates how to set and retrieve a temporary integer value using SysProSetInt and SysProGetInt methods. The value is stored with a key 'js_test_int' and can be retrieved until system reboot.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: STROKE_RECT Widget Example with Event Handling in Zepp OS\nDESCRIPTION: Complete example demonstrating how to create a stroked rectangle widget within a page and handle click events to modify its properties. The example creates a rectangle with rounded corners and applies a custom color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nPage({\n  build() {\n    const strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating CYCLE_IMAGE_TEXT_LIST Widget - JavaScript\nDESCRIPTION: Basic widget creation with hmUI.createWidget method. Sets up a widget instance with specified parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cycleImageTextList = hmUI.createWidget(hmUI.widget.CYCLE_IMAGE_TEXT_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating Page Indicator Widget - Basic Import and Initialization\nDESCRIPTION: Shows how to import necessary modules and create a basic page indicator widget. The widget requires x, y coordinates and dimensions as basic parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/PAGE_INDICATOR.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst scrollBar = createWidget(widget.PAGE_INDICATOR, Param)\n```\n\n----------------------------------------\n\nTITLE: Page Constructor Type Definition - TypeScript\nDESCRIPTION: TypeScript type definition for the Page constructor function that specifies the function signature and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/Page.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Page(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Base URL in JSX Documentation\nDESCRIPTION: This JSX code renders an image using the useBaseUrl utility to generate the correct path to the image. The code includes width specification and a title attribute for the image that shows the system recovery screen.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/faq/re-install-system.md#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={useBaseUrl('/img/docs/guides/faq/reinstall.jpeg')} width=\"300\" title=\"arc\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for setAlpha Method in ZeppOS\nDESCRIPTION: This snippet defines the TypeScript interface for the setAlpha method. It takes a single parameter of any type and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/setAlpha.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for bufferToString Function in TypeScript\nDESCRIPTION: TypeScript function signature for the bufferToString utility that converts ArrayBuffer data to string format. Available from API_LEVEL 4.0 and above.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/bufferToString.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bufferToString(buffer: InputBuffer): Result\n```\n\n----------------------------------------\n\nTITLE: Defining createDialog Method Type in TypeScript\nDESCRIPTION: Type definition for the hmUI.createDialog() method, specifying the input parameter and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/createDialog.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => dialog\n```\n\n----------------------------------------\n\nTITLE: Implementing ARC Widget with Event Handling\nDESCRIPTION: Complete example demonstrating ARC widget creation with properties configuration and click event handling. Shows how to set position, dimensions, angles, color, and line width.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/ARC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const arc = createWidget(widget.ARC, {\n      x: 100,\n      y: 100,\n      w: 250,\n      h: 250,\n      start_angle: -90,\n      end_angle: 90,\n      color: 0xfc6950,\n      line_width: 20\n    })\n\n    arc.addEventListener(event.CLICK_DOWN, (info) => {\n      arc.setProperty(prop.MORE, {\n        y: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing File System Asset Documentation in React/MDX\nDESCRIPTION: Imports documentation content about the hmFS.open_asset API from a reference location and renders it using a Content component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/open_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/open_asset.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Registering Phone Time Setting Callback in TypeScript\nDESCRIPTION: Demonstrates how to register a callback function for when the phone's time settings are changed. Available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nonPhoneTimeSetting(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Getting Target Calorie Value - TypeScript\nDESCRIPTION: Method to retrieve the target calorie consumption in kcal.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Calorie.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weight Unit Setting Type Definition\nDESCRIPTION: TypeScript type definition showing the function signature for getting the weight unit setting. Returns a number representing different weight units (0=Kilogram, 1=Jin, 2=Pound, 3=Stone).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getWeightUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => weightUnit\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.stat_asset Function Type in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript type for the hmFS.stat_asset function, which takes a string path and returns an array containing stat information and an error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/stat_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(path: string) => [stat, err]\n```\n\n----------------------------------------\n\nTITLE: Unregistering Gyroscope Data Change Listener in ZeppOS\nDESCRIPTION: Method to cancel a previously registered callback function for gyroscope data changes. This helps prevent memory leaks when the callback is no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Content for hmSetting.getDateFormat Documentation in JavaScript\nDESCRIPTION: Imports content from an external MDX file that documents the hmSetting.getDateFormat API in Zepp OS. The imported content is then rendered directly in the current file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getDateFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getDateFormat.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing File System Asset Documentation in React/MDX\nDESCRIPTION: Imports documentation content about the hmFS.open_asset API from a reference location and renders it using a Content component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/open_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/open_asset.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using offDigitalCrown to Cancel Digital Crown Event Listeners in JavaScript\nDESCRIPTION: Example demonstrating how to register and then unregister a digital crown rotation event listener. The example imports necessary functions, creates a callback that logs rotation degree when the home key is rotated, and then cancels the listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/offDigitalCrown.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onDigitalCrown, offDigitalCrown, KEY_HOME } from '@zos/interaction'\n\nconst callback = (key, degree) => {\n  if (key === KEY_HOME) {\n    console.log(degree)\n  }\n}\n\nonDigitalCrown({\n  callback,\n})\n\noffDigitalCrown()\n```\n\n----------------------------------------\n\nTITLE: Defining redraw() Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature of the redraw() function in TypeScript. The function takes no parameters and returns undefined.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/redraw.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => undefined\n```\n\n----------------------------------------\n\nTITLE: Getting Sleep Stage Constants with getStageConstantObj Method\nDESCRIPTION: Method to get constant values for sleep stages, which are used to determine the sleep stage in the getStage return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStageConstantObj(): StageConstants\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the createDialog function signature, showing the option parameter and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/createDialog.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Current Step Count with TypeScript in ZeppOS\nDESCRIPTION: TypeScript method signature for retrieving the current step count. Returns the current number of steps as a numeric value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Converting settingsStorage to a JavaScript Object\nDESCRIPTION: Shows how to convert the entire settingsStorage contents to a JavaScript object for easier manipulation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst storageObj = settings.settingsStorage.toObject()\n\nconsole.log(storageObj)\n```\n\n----------------------------------------\n\nTITLE: Creating FILL_RECT Widget with Basic Parameters\nDESCRIPTION: This snippet shows the basic syntax for creating a FILL_RECT widget using hmUI.createWidget(). It demonstrates the use of the Param object, which includes essential properties like x, y, w, h, and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fillRect = hmUI.createWidget(hmUI.widget.FILL_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating a CALORIE Sensor in ZeppOS\nDESCRIPTION: Demonstrates how to create a CALORIE sensor instance using the hmSensor API. This snippet shows the basic initialization to access calorie consumption data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calorie = hmSensor.createSensor(hmSensor.id.CALORIE)\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Scroll Lock in JavaScript\nDESCRIPTION: Example usage of setScrollLock function to lock page scrolling position using the @zos/page module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/setScrollLock.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScrollLock } from '@zos/page'\n\nsetScrollLock({\n  lock: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Widget with Custom Display Level in ZeppOS JavaScript\nDESCRIPTION: This snippet demonstrates how to create a widget with a custom display level in ZeppOS. It sets the widget to be visible only in normal watchface and rest screen modes, but not in editable mode.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = hmUI.createWidget(hmUI.widget.IMG, {\n  x: 158,\n  y: 218,\n  w: 112,\n  h: 136,\n  alpha: 100,\n  src: \"a.png\",\n  //It means that it will only be displayed under the normal Watchface and rest screen, and will not be created under editable.\n  show_level: hmUI.show_level.ONLY_NORMAL | hmUI.show_level.ONAL_AOD,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Scroll Lock in JavaScript\nDESCRIPTION: Example usage of setScrollLock function to lock page scrolling position using the @zos/page module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/setScrollLock.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScrollLock } from '@zos/page'\n\nsetScrollLock({\n  lock: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Scroll Lock in JavaScript\nDESCRIPTION: Example usage of setScrollLock function to lock page scrolling position using the @zos/page module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/setScrollLock.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScrollLock } from '@zos/page'\n\nsetScrollLock({\n  lock: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Screen Off Documentation Content in JavaScript\nDESCRIPTION: Imports documentation content from a relative path '../../../reference/device-app-api/hmSetting/setScreenOff.mdx' and exports it as the default component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/setScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/setScreenOff.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Simplified mkdirSync Function Signature in TypeScript\nDESCRIPTION: Provides a simplified function signature for mkdirSync, allowing direct string input for the path parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/mkdirSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mkdirSync(path: string): Result\n```\n\n----------------------------------------\n\nTITLE: Toast Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Toast component. It takes a Props object and optional render functions, and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/toast.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Cancelling Wear Status Change Callback in TypeScript\nDESCRIPTION: This snippet shows how to cancel a previously registered callback function for the device wear status change event in TypeScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Information using hmSetting.getDeviceInfo()\nDESCRIPTION: JavaScript example demonstrating how to call the hmSetting.getDeviceInfo() function to retrieve device information. The function returns an object with properties such as screen dimensions, shape, device name, and more.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getDeviceInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst deviceInfo = hmSetting.getDeviceInfo()\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Weight Unit Setting in Zepp OS\nDESCRIPTION: This code demonstrates how to get the weight unit setting configured by the user in Zepp OS. The method returns a numeric value that corresponds to a specific weight unit (0 for Kilogram, 1 for Jin, 2 for Pound, 3 for Stone).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getWeightUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => weightUnit\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst unit = hmSetting.getWeightUnit()\n```\n\n----------------------------------------\n\nTITLE: Accessing Lunar Month Calendar - JavaScript\nDESCRIPTION: Retrieve and iterate through lunar month calendar information using getLunarMonthCalendar()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lunar_month_cal = time.getLunarMonthCalendar()\n\nfor (let i = 0; i < lunar_month_cal.day_count; i++) {\n  console.log('lunar_day : ' + lunar_month_cal.lunar_days_array[i])\n}\n```\n\n----------------------------------------\n\nTITLE: Timer Function Type Definition in TypeScript\nDESCRIPTION: Type definition for the createTimer function showing parameter types and return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/timer/createTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(delay: number, repeat: number, callback: (option: any) => void, option: any) => timerId\n```\n\n----------------------------------------\n\nTITLE: Using POLYLINE Widget Methods in ZeppOS\nDESCRIPTION: This snippet shows the usage of POLYLINE widget methods, including clear() to clear drawn lines and addLine() to add new lines with specified options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => void\n```\n\n----------------------------------------\n\nTITLE: Registering STRESS Sensor Event Listener in ZeppOS JavaScript\nDESCRIPTION: Example of registering a callback event for the STRESS sensor that triggers when the stress value changes. The callback logs the current stress value and time when triggered.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstress.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(stress.current)\n\n  console.log('the stress time: ' + stress.time + ' stress: ' + stress.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Sunset Callback in TypeScript\nDESCRIPTION: Shows how to register a callback function for sunset events. Only works when the device has weather information. Available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nonSunset(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener for FAT_BURRING Sensor\nDESCRIPTION: Adds an event listener to the fat burning sensor to detect changes in values. The callback function will be executed when the sensor data changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfatburn.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Stress Measurement - TypeScript Definition\nDESCRIPTION: TypeScript interface definition for getting current stress measurement values. Returns an object containing the stress value and measurement timestamp.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items with Optional Default Values in TypeScript\nDESCRIPTION: TypeScript method signature for retrieving items from sessionStorage with support for default values when the specified key doesn't exist.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetItem(key: string, defaultValue?: any): void\n```\n\n----------------------------------------\n\nTITLE: Defining getImageInfo Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getImageInfo function, specifying its parameter and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/getImageInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(img_path: string) => result\n```\n\n----------------------------------------\n\nTITLE: Stopping Compass Sensor - TypeScript\nDESCRIPTION: TypeScript method signature for stopping the compass sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Using resetPalmScreenOff Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the resetPalmScreenOff function in conjunction with pausePalmScreenOff. It pauses the palm screen off behavior and then resets it after a 3-second delay.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/resetPalmScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pausePalmScreenOff, resetPalmScreenOff } from '@zos/display'\n\npausePalmScreenOff({\n  duration: 0,\n})\n\nsetTimeout(() => {\n  resetPalmScreenOff()\n}, 3000)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Content in JavaScript\nDESCRIPTION: This code snippet imports a content component from a specific path and renders it. It's likely part of a documentation system using React or a similar framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/rename.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/rename.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Simplified TypeScript Function Definition for onGesture\nDESCRIPTION: Alternative simplified TypeScript type definition for the onGesture function using direct callback parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onGesture(callback: (event: GestureEvent) => PreventDefault): void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.SysProSetDouble Method in TypeScript\nDESCRIPTION: TypeScript function signature for the hmFS.SysProSetDouble method which takes a key string and a double precision floating point number value, and returns a numeric result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Accessing Sleep Stage Data in ZeppOS\nDESCRIPTION: Demonstrates how to iterate through the sleep stage data array and access individual stage information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sleepStageArray = sleep.getSleepStageData()\n\nfor (int i = 0; i < sleepStageArray.length; i++) {\n  const data = sleepStageArray[i];\n  console.log(data.model)\n  console.log(data.start)\n  console.log(data.stop)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Screen Type - JavaScript\nDESCRIPTION: Example showing how to get the current screen type using hmSetting.getScreenType(). Returns a number indicating if the code is running in an app, watchface, settings, or AOD context.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getScreenType.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst screenType = hmSetting.getScreenType()\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_LEVEL Widget in ZeppOS JavaScript\nDESCRIPTION: This snippet demonstrates how to create an IMG_LEVEL widget using hmUI.createWidget(). The widget displays pictures from an array based on a specified level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating a Rotated IMG Widget in ZeppOS\nDESCRIPTION: Demonstrates how to create an image with rotation applied. This example shows an hour hand with a 30-degree rotation and proper positioning relative to the center of rotation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const img_hour = hmUI.createWidget(hmUI.widget.IMG)\n    img_hour.setProperty(hmUI.prop.MORE, {\n      x: 0,\n      y: 0,\n      w: 454,\n      h: 454,\n      pos_x: 454 / 2 - 27,\n      pos_y: 50 + 50,\n      center_x: 454 / 2,\n      center_y: 454 / 2,\n      src: 'hour.png',\n      angle: 30\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_LEVEL Widget in ZeppOS JavaScript\nDESCRIPTION: This snippet demonstrates how to create an IMG_LEVEL widget using hmUI.createWidget(). The widget displays pictures from an array based on a specified level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining Toggle Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the Toggle component. It takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/toggle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Persistent Timer API in TypeScript\nDESCRIPTION: TypeScript function signature definition for the set method in the alarm module, showing the expected parameter type and return value type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/alarm/set.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction set(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: SecondaryWidget Implementation Example\nDESCRIPTION: Example implementation of a SecondaryWidget showing state initialization and lifecycle method usage. Demonstrates how to define state and handle onInit and build lifecycle events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/SecondaryWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSecondaryWidget({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Registering CHANGE Event Listener for DISTANCE Sensor in JavaScript\nDESCRIPTION: This code shows how to register a callback function for the CHANGE event of the DISTANCE sensor. The callback logs the current distance value whenever it changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndistance.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current distance is ' + distance.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Converting PCM to WAV using ffmpeg\nDESCRIPTION: This shell command uses ffmpeg to convert a raw PCM file to WAV format. It specifies the input format as signed 16-bit little endian (s16le), with a sampling rate of 16000Hz and 1 channel to match the watch recording parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/opus-to-mp3.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# ffmpeg -f <format> -ar <sampling rate> -ac <channels> -i <input> <output>\nffmpeg -f s16le -ar 16000 -ac 1 -i userContent.pcm userContent.wav\n```\n\n----------------------------------------\n\nTITLE: Defining Replace Function Signature in TypeScript\nDESCRIPTION: TypeScript definition for the replace function, specifying its parameters and return type. The function takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/replace.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction replace(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining Toast Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type of the Toast component. It takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/toast.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining Replace Function Signature in TypeScript\nDESCRIPTION: TypeScript definition for the replace function, specifying its parameters and return type. The function takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/replace.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction replace(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Configuring TextView Array in SCROLL_LIST\nDESCRIPTION: Example showing how to configure text views within a scroll list item, including positioning, dimensions, and data binding properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Each structure in the array is a textView.\nconst text_view = [\n  { x: 100, y: 0, w: 100, h: 20, key: 'name', color: 0xffffff },\n  { x: 0, y: 30, w: 100, h: 100, key: 'age', color: 0xffffff, text_size: 20 }\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Sunset Event Listener in TypeScript\nDESCRIPTION: Registers a callback function for the Sunset event using the Time sensor. Only takes effect when the device has weather information. Available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nonSunset(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: UI Component Type Definition in TypeScript\nDESCRIPTION: Defines the TypeScript type structure for UI components in Zepp OS. Components are functions that accept props and optional child render functions, returning a RenderFunc result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/app-settings/ui-intro.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Compass.getStatus Method Definition\nDESCRIPTION: Method to retrieve the calibration status of the compass. Returns a boolean value where true indicates the compass is calibrated and ready for accurate readings.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus(): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining mstOnCharaWriteComplete Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for mstOnCharaWriteComplete. It takes a callback function as a parameter and returns a boolean result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnCharaWriteComplete.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction mstOnCharaWriteComplete(callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: ItemClickFunc Callback Type Definition for CYCLE_LIST\nDESCRIPTION: Type definition for the item click callback function used in CYCLE_LIST widget. The function receives the cycleList instance and the index of the clicked item.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(cycleList: CycleList, index: number) => void\n```\n\n----------------------------------------\n\nTITLE: Importing SysProSetBool Documentation in JavaScript\nDESCRIPTION: This code snippet imports the content of the SysProSetBool.mdx file from the Zepp OS documentation and renders it using a Content component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/SysProSetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetBool.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining the offGesture Function Type in TypeScript\nDESCRIPTION: Type definition for the offGesture function which takes no parameters and returns void. Available from API level 2.0 and later.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/offGesture.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction offGesture(): void\n```\n\n----------------------------------------\n\nTITLE: Defining mstDestroyProfileInstance Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript function signature for mstDestroyProfileInstance. It takes a Profile parameter and returns void. The function is available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstDestroyProfileInstance.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstDestroyProfileInstance(profile: Profile): void\n```\n\n----------------------------------------\n\nTITLE: Getting Light Intensity in TypeScript\nDESCRIPTION: Method to retrieve the current light intensity in lux. Available from API_LEVEL 3.6 and above.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetLight(): number\n```\n\n----------------------------------------\n\nTITLE: Using getTimeFormat Function in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the getTimeFormat function to check if the system is using 24-hour time format.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getTimeFormat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTimeFormat, TIME_FORMAT_24 } from '@zos/settings'\n\nconst timeFormat = getTimeFormat()\n\nif (timeFormat === TIME_FORMAT_24) {\n  console.log('time format is 24-hour format')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Text Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to import necessary modules and create a text widget using the createWidget function. The widget is of type TEXT and accepts a Param object for configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/TEXT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst text = createWidget(widget.TEXT, Param)\n```\n\n----------------------------------------\n\nTITLE: ItemClickFunc Callback Type Definition for CYCLE_LIST\nDESCRIPTION: Type definition for the item click callback function used in CYCLE_LIST widget. The function receives the cycleList instance and the index of the clicked item.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(cycleList: CycleList, index: number) => void\n```\n\n----------------------------------------\n\nTITLE: Initializing FILL_RECT Widget in ZeppOS\nDESCRIPTION: This code snippet shows the basic syntax for creating a Fill Rectangle widget using hmUI.createWidget(). It takes a Param object as an argument, which defines the properties of the widget such as position, size, and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fillRect = hmUI.createWidget(hmUI.widget.FILL_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Building Page UI in ZeppOS (JavaScript)\nDESCRIPTION: This function is responsible for drawing the UI of a page. It takes no parameters and returns nothing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/life-cycle.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: App onDestroy Function Signature\nDESCRIPTION: Function signature for app cleanup method that handles final resource disposal when the entire app is being destroyed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/life-cycle.md#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining mstOffAllCb Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the mstOffAllCb function that unregisters all Bluetooth callbacks. The function takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOffAllCb.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstOffAllCb(): void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for rmSync Function\nDESCRIPTION: TypeScript type definition showing the function signature for rmSync with full option parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/rmSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rmSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Brightness Example in ZeppOS JavaScript\nDESCRIPTION: Example showing how to set the screen brightness to 50% using the hmSetting.setBrightness function. The result will be 0 if the operation succeeds.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSetting/setBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst result = hmSetting.setBrightness(50)\n```\n\n----------------------------------------\n\nTITLE: Function Signature for statSync in ZeppOS\nDESCRIPTION: TypeScript definition for the statSync function that retrieves file information synchronously.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/statSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction statSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining addLayoutChild Method Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the addLayoutChild method, which takes a UIWidget child parameter and an optional numeric index parameter, and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/addLayoutChild.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(child: UIWidget, index?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Defining statAssetsSync Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the statAssetsSync function that synchronously retrieves file information from the Mini Program assets directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/statAssetsSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction statAssetsSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Sleep Stage Constants in TypeScript\nDESCRIPTION: Defines the getStageConstantObj method signature that returns constants used to identify different sleep stages (wake, REM, light, deep) in the sleep data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStageConstantObj(): StageConstants\n```\n\n----------------------------------------\n\nTITLE: Retrieving User's Weight Unit Preference in ZeppOS\nDESCRIPTION: This snippet demonstrates how to retrieve the weight unit set by the user in ZeppOS. The function returns a numeric value corresponding to the weight unit (0 for Kilogram, 1 for Jin, 2 for Pound, 3 for Stone).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getWeightUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => weightUnit\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst unit = hmSetting.getWeightUnit()\n```\n\n----------------------------------------\n\nTITLE: Destroying App in ZeppOS (JavaScript)\nDESCRIPTION: This function is called when the app is being destroyed. It takes no parameters and returns nothing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/life-cycle.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Setting UI Widget Properties in ZeppOS JavaScript\nDESCRIPTION: Demonstrates how to use the widget.setProperty method to set various properties of UI widgets in ZeppOS, including visibility, position, size, and custom dataset properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/setProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\nconst button = createWidget(widget.BUTTON, Param)\nbutton.setProperty(prop.VISIBLE, false)\n\nconst text = createWidget(widget.TEXT, Param)\ntext.setProperty(prop.MORE, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 200,\n  text: 'hello',\n  color: 0x34e073,\n  align_h: align.LEFT\n})\n\ntext.setProperty(prop.DATASET, {\n  name: 'text1'\n})\n\nconst dataset = text.getProperty(prop.DATASET)\n```\n\n----------------------------------------\n\nTITLE: Battery Change Event Listener Example in ZeppOS JavaScript\nDESCRIPTION: Complete example of adding an event listener for battery changes. When the battery level changes, the callback function logs the updated battery level to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbattery.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current battery level is ' + battery.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Printing Log Level Logs in TypeScript\nDESCRIPTION: Method to print log level logs. It accepts multiple string arguments.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlog(...args: string[]): void\n```\n\n----------------------------------------\n\nTITLE: STRESS Sensor Change Event Callback Type Definition in TypeScript\nDESCRIPTION: This snippet defines the type of the callback function for the STRESS sensor change event.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Getting Current Accelerometer Data in TypeScript\nDESCRIPTION: Retrieves the current accelerometer data. Returns an object with x, y, and z properties representing acceleration in cm/s^2.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Accelerometer Monitoring in TypeScript\nDESCRIPTION: Methods to start and stop monitoring accelerometer sensor data. The start() method begins listening for data, while stop() ends the monitoring.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering getDeviceInfo API Documentation in React\nDESCRIPTION: This code imports the content of the getDeviceInfo API documentation from an MDX file and renders it using a React component. It's likely part of a larger documentation system for Zepp OS device applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getDeviceInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getDeviceInfo.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Deleting a File Using hmFS.remove in JavaScript\nDESCRIPTION: Demonstrates how to use the hmFS.remove function to delete a file in ZeppOS. It takes a file path as an argument and returns a result code, where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/remove.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmFS.remove('path/to/test_file.txt')\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Starting Buzzer Operation in TypeScript\nDESCRIPTION: Method to start the buzzer with specified type and repeat count.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstart(type: number, repeatCount: 0): void\n```\n\n----------------------------------------\n\nTITLE: Defining statAssetsSync Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the statAssetsSync function that synchronously retrieves file information from the Mini Program assets directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/statAssetsSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction statAssetsSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Updating Sleep Data with updateInfo Method\nDESCRIPTION: Method to actively trigger the update of sleep data. By default, the system updates sleep data every 30 minutes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateInfo(): void\n```\n\n----------------------------------------\n\nTITLE: Printing Log Level Logs in TypeScript\nDESCRIPTION: Method to print log level logs. It accepts multiple string arguments.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlog(...args: string[]): void\n```\n\n----------------------------------------\n\nTITLE: Toggle Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Toggle component function. It accepts props and optional render functions, returning a render function as the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/toggle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Target Standing Hours in TypeScript\nDESCRIPTION: TypeScript method signature for getting the target number of hours with standing behavior from the Stand sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: Setting User Health Data with addHealthData\nDESCRIPTION: Example of using the addHealthData function to set a user's weight and BMI. The weight is specified in grams and BMI is set as 100 times the actual value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/user/addHealthData.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addHealthData } from '@zos/user'\n\naddHealthData({\n  weight: 65,\n  bmi: 1900,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating BUTTON Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a BUTTON widget using the createWidget function from the @zos/ui module. It shows the basic structure and required parameters for initializing a button.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst button = createWidget(widget.BUTTON, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining Click Function for KEYBOARD Widget\nDESCRIPTION: Shows the structure of the click function callback for the KEYBOARD widget. This function is called when a key is clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/KEYBOARD.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclick_func(keyboard: WIDGET, id: number, value: number): void\n```\n\n----------------------------------------\n\nTITLE: Updating Sleep Data with updateInfo Method\nDESCRIPTION: Method to actively trigger the update of sleep data. By default, the system updates sleep data every 30 minutes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateInfo(): void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.SysProGetInt64 in TypeScript\nDESCRIPTION: TypeScript type definition for the SysProGetInt64 method that retrieves a 64-bit integer from temporary system storage using a string key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProGetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Using SysProGetChars to Retrieve Stored String\nDESCRIPTION: Example demonstrating how to store and retrieve a string value using SysProSetChars and SysProGetChars methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetChars('js_test_char', 'hello')\nconsole.log(hmFS.SysProGetChars('js_test_char'))\n```\n\n----------------------------------------\n\nTITLE: CHANGE Event Callback Type Definition\nDESCRIPTION: TypeScript type definition for the callback function used with the CHANGE event. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Executing Zeus Bridge Command in CLI\nDESCRIPTION: Terminal command to enter Developer Bridge mode using Zepp CLI from a project's root directory. Note that users must first log in using the zeus login command with the same Zepp account used in the runtime environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nzeus bridge\n```\n\n----------------------------------------\n\nTITLE: Defining Toggle Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type of the Toggle component. It takes Props as an argument and optionally accepts a RenderFunc or an array of RenderFunc. The component returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/app-settings-api/ui/toggle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining hmApp.gotoPage Method Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript signature for the hmApp.gotoPage method. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/gotoPage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => void\n```\n\n----------------------------------------\n\nTITLE: Creating SLEEP Sensor in ZeppOS\nDESCRIPTION: Demonstrates how to create a SLEEP sensor instance using the hmSensor API in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sleep = hmSensor.createSensor(hmSensor.id.SLEEP)\n```\n\n----------------------------------------\n\nTITLE: Defining stopTimer Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the stopTimer function, which takes a timer ID as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/timer/stopTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(timerId: number) => void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for setScrollLock Function in ZeppOS\nDESCRIPTION: TypeScript function signature for the setScrollLock API that defines its parameters and return type. This function takes an Option object with a lock property and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/page/setScrollLock.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction setScrollLock(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Setting Accelerometer Frequency Mode in TypeScript\nDESCRIPTION: Sets the trigger frequency mode for the accelerometer. The mode parameter should be one of the frequency mode constants.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetFreqMode(mode: number): void\n```\n\n----------------------------------------\n\nTITLE: Getting Accelerometer Frequency Mode in TypeScript\nDESCRIPTION: Retrieves the current trigger frequency mode of the accelerometer. Returns a number corresponding to one of the frequency mode constants.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetFreqMode(): number\n```\n\n----------------------------------------\n\nTITLE: Implementing PICKER Callback Function in ZeppOS\nDESCRIPTION: This code snippet shows an example of a callback function for the PICKER widget. It demonstrates how to handle events, update properties, and modify data based on user interactions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PICKER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction picker_cb(picker, event_type, column_index, select_index) {\n  if (event_type == 2) {\n    picker.setProperty(prop.TITLE, 'End Date')\n    picker.setProperty(prop.SUBTITLE, '3 days in totals')\n\n    picker.setProperty(prop.UPDATE_DATA, {\n      col_index: 0,\n      val_index: 5,\n      data_array: new Array(10).fill(0).map((d, index) => index + 1)\n    })\n\n    picker.setProperty(prop.CUR_COLUMN, 1)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.read Method\nDESCRIPTION: TypeScript type definition showing the function signature for the hmFS.read method, which accepts file handle, buffer, position and length parameters and returns a tuple of file list and error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/read.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, buffer: ArrayBuffer, position: number, length: number) => [fileList, err]\n```\n\n----------------------------------------\n\nTITLE: Cancelling Continuous Heart Rate Measurement in TypeScript\nDESCRIPTION: This snippet shows how to cancel continuous heart rate measurement and remove the callback listener in TypeScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noffCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using setWakeUpRelaunch Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the setWakeUpRelaunch function in JavaScript. It imports the function from '@zos/display' and calls it with an object parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setWakeUpRelaunch } from '@zos/display'\n\nsetWakeUpRelaunch({\n  relaunch: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining onFail Callback Types in TypeScript\nDESCRIPTION: TypeScript type definition for the onFail callback function that is called when a download fails.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/download-file.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n(event: FailEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadTask.cancel Method Types in TypeScript\nDESCRIPTION: TypeScript type definition for the cancel method that allows stopping an active download task.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/download-file.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Registering Standing Hours Change Listener in ZeppOS\nDESCRIPTION: TypeScript method signature for registering a callback function to listen for changes in the standing behavior hours.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining stopTimer Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the stopTimer function, which takes a timer ID as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/timer/stopTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(timerId: number) => void\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProGetInt to Retrieve Stored Integer in JavaScript\nDESCRIPTION: Demonstrates how to use hmFS.SysProGetInt to retrieve a previously stored integer value. It first sets a value using SysProSetInt, then retrieves and logs it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dialog Widget - ZeppOS JavaScript\nDESCRIPTION: Demonstrates how to import and create a basic dialog widget using the ZeppOS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/DIALOG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst dialog = createWidget(widget.DIALOG, Param)\n```\n\n----------------------------------------\n\nTITLE: Item Focus Change Callback Function Type for CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: TypeScript type definition for the focus change callback function. It receives the cycleList instance, the index of the focused item, and a boolean indicating whether the item gained focus.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n(cycleList: CycleList, index: number, isFocus: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Compiling and Previewing Project\nDESCRIPTION: Commands to enter project directory and start development preview mode using Zeus CLI.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/cli/index.md#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Enter the project root directory\ncd hello-world\n\n# Start compilation preview\nzeus dev\n```\n\n----------------------------------------\n\nTITLE: React Image Element Example\nDESCRIPTION: Example of rendering an image using useBaseUrl with specified width and title attributes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/new-features-35.md#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={useBaseUrl('/img/docs/workout-extension/sample_both.jpeg')} width=\"80%\" title=\"download_zepp\" />\n```\n\n----------------------------------------\n\nTITLE: Importing hmFS Seek Documentation Content\nDESCRIPTION: MDX import statement to load filesystem seek API documentation from the reference directory path\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/seek.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/seek.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Simplified closeSync Function Signature in TypeScript\nDESCRIPTION: A simplified TypeScript function signature for closeSync, which takes a file descriptor number directly as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction closeSync(fd: number): Result\n```\n\n----------------------------------------\n\nTITLE: Updating Sleep Information in TypeScript\nDESCRIPTION: Shows the type definition for the updateInfo method, which actively updates sleep information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining mstStopScan Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the mstStopScan function that stops device scanning. The function returns a boolean result indicating success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstStopScan.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction mstStopScan(): Result\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnDescValueArrived Function in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the mstOnDescValueArrived function from the @zos/ble module. It serves as a starting point for using the function in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnDescValueArrived.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOnDescValueArrived } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing CURRENT Heart Rate Event Listener in ZeppOS\nDESCRIPTION: Complete example of adding and removing an event listener for the CURRENT heart rate event. The example includes proper cleanup in the onDestroy lifecycle method to prevent memory leaks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst hrCurrListener = function () {\n  console.log(heart.current)\n}\n\nheart.addEventListener(heart.event.CURRENT, hrCurrListener)\n\n// ...\n// Destroy function\nonDestroy() {\n  heart.removeEventListener(heart.event.CURRENT, hrCurrListener)\n}\n```\n\n----------------------------------------\n\nTITLE: RADIO_GROUP CheckFunc Definition - JavaScript\nDESCRIPTION: Function signature for the radio group check callback that handles state changes\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/RADIO_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(radioGroup: RadioGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener from UI Widget in ZeppOS\nDESCRIPTION: This example demonstrates how to use the removeEventListener method to remove a previously added event listener from a UI widget. It creates an image widget, adds a click event listener, and then removes it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/removeEventListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\nconst listenerFunc = (info) => {\n  console.log(info.x)\n}\n\nimg_bkg.addEventListener(event.CLICK_DOWN, listenerFunc)\nimg_bkg.removeEventListener(event.CLICK_DOWN, listenerFunc)\n```\n\n----------------------------------------\n\nTITLE: Heart Rate Current Event Callback Function Type in ZeppOS\nDESCRIPTION: TypeScript type definition for the callback function used with heart rate CURRENT events. The callback takes no parameters and returns nothing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Getting Festival in TypeScript\nDESCRIPTION: TypeScript method definition for getting Gregorian holidays\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetFestival(): string\n```\n\n----------------------------------------\n\nTITLE: Getting Current Gyroscope Data in ZeppOS\nDESCRIPTION: Method for retrieving the current gyroscope sensor readings. Returns rotation speeds in degrees per second for all three axes (x, y, z).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Using renameSync Function in JavaScript\nDESCRIPTION: Example of how to use the renameSync function to rename a file from 'test.txt' to 'new_test.txt' in a ZeppOS Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/renameSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renameSync } from '@zos/fs'\n\nconst result = renameSync({\n  oldPath: 'test.txt',\n  newPath: 'new_test.txt',\n})\n\nif (result === 0) {\n  console.log('renameSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text Component Type Signature in TypeScript\nDESCRIPTION: This snippet defines the type signature for the Text component in ZeppOS. It takes props and optional render functions as arguments and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/app-settings-api/ui/text.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Sleep Information in TypeScript\nDESCRIPTION: Defines the type for the getBasicInfo method, which returns a BasicInfo object containing sleep score, deep sleep time, start time, and end time.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n() => BasicInfo\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnDescWriteComplete in JavaScript\nDESCRIPTION: This example demonstrates how to import the mstOnDescWriteComplete function from the @zos/ble module. It's a basic usage template for the function in a JavaScript environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnDescWriteComplete.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOnDescWriteComplete } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using CNPM to Install ZeppOS CLI\nDESCRIPTION: Command to install the ZeppOS Zeus CLI tool using CNPM as an alternative to NPM when experiencing network issues. This should be executed after installing CNPM with the Taobao registry.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/Installation-time-list.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncnmp install\n```\n\n----------------------------------------\n\nTITLE: Getting Light Intensity in TypeScript\nDESCRIPTION: Retrieves the current light intensity in lux. Requires API_LEVEL 3.6 or higher.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetLight(): number\n```\n\n----------------------------------------\n\nTITLE: Creating BODY_TEMP Sensor in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a body temperature sensor using the hmSensor.createSensor method. The BODY_TEMP sensor is identified by hmSensor.id.BODY_TEMP.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst thermometer = hmSensor.createSensor(hmSensor.id.BODY_TEMP)\n```\n\n----------------------------------------\n\nTITLE: Importing Base URL Handler in React/Docusaurus\nDESCRIPTION: Imports the useBaseUrl hook from Docusaurus to handle base URL paths for static assets in documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/re-install-system.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl'\n```\n\n----------------------------------------\n\nTITLE: Event Callback Type Definition\nDESCRIPTION: TypeScript type definition for the event callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating BODY_TEMP Sensor in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a body temperature sensor using the hmSensor.createSensor method. The BODY_TEMP sensor is identified by hmSensor.id.BODY_TEMP.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst thermometer = hmSensor.createSensor(hmSensor.id.BODY_TEMP)\n```\n\n----------------------------------------\n\nTITLE: Creating a VIEW_CONTAINER Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a VIEW_CONTAINER widget using the createWidget method and adding child widgets to it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/VIEW_CONTAINER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst viewContainer = createWidget(widget.VIEW_CONTAINER, Param)\n\n// Creating UI sub-widgets\nviewContainer.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: Opening an Asset File in Zepp OS Mini Program\nDESCRIPTION: This example demonstrates how to use the hmFS.open_asset function within a Zepp OS Mini Program page. It opens a file named 'test_file.txt' in read-only mode from the /assets directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/open_asset.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const fileId = hmFS.open_asset('test_file.txt', hmFS.O_RDONLY)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a VIEW_CONTAINER Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a VIEW_CONTAINER widget using the createWidget method and adding child widgets to it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/VIEW_CONTAINER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst viewContainer = createWidget(widget.VIEW_CONTAINER, Param)\n\n// Creating UI sub-widgets\nviewContainer.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: Getting Widget Type in ZeppOS UI Framework using TypeScript\nDESCRIPTION: Function signature for widget.getType() method that returns the numeric type identifier of a UI widget. The returned value corresponds to WIDGET_ID constants used when creating widgets with hmUI.createWidget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getType.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Defining Target Platforms in ZeppOS app.json\nDESCRIPTION: Configures the target platform selection for ZeppOS applications. The platforms object includes device name and deviceSource number which identifies specific device models.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"platforms\": [{\n    \"name\": \"gts-3\",\n    \"deviceSource\": 229\n  }, {\n    \"name\": \"gts-3\",\n    \"deviceSource\": 230\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Traditional Chinese Solar Terms in TypeScript\nDESCRIPTION: Retrieves Traditional Chinese Solar Terms using the Time sensor, or returns 'INVALID' if there is no Solar Term. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ngetSolarTerm(): string\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.read Function - TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature for hmFS.read. The function takes file ID, buffer, position and length as parameters and returns a tuple containing file list and error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/read.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, buffer: ArrayBuffer, position: number, length: number) => [fileList, err]\n```\n\n----------------------------------------\n\nTITLE: Importing Body Temperature Sensor Documentation\nDESCRIPTION: Imports content from the body temperature sensor documentation MDX file using a relative path reference\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/BODY_TEMP.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing Body Temperature Sensor Documentation\nDESCRIPTION: Imports content from the body temperature sensor documentation MDX file using a relative path reference\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/BODY_TEMP.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Application from Runtime Environment in Zepp CLI Bridge Mode\nDESCRIPTION: Command to uninstall the application from the current directory in the connected runtime environment when in Developer Bridge mode. This can be used after successfully connecting to a device or simulator.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuninstall\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.write() Function Signature in TypeScript\nDESCRIPTION: This snippet shows the type signature of the hmFS.write() function. It takes a file ID, a buffer, a position, and a length as parameters, and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/write.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(fileId: number, buffer: ArrayBuffer, position: number, length: number) => result\n```\n\n----------------------------------------\n\nTITLE: Using getBrightness Function in JavaScript\nDESCRIPTION: Demonstrates how to import and use the getBrightness function to retrieve the current screen brightness and log it to the console. The brightness value ranges from 0 to 100.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/getBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getBrightness } from '@zos/display'\n\nconst result = getBrightness()\nconsole.log(`current brightness ${result}`)\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createWidget in TypeScript\nDESCRIPTION: TypeScript declaration showing the signature of the createWidget function, which takes a widgetId and optional configuration object and returns a widget instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/createWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(widgetId: WIDGET_ID, option?: Option) => widget: WIDGET\n```\n\n----------------------------------------\n\nTITLE: Compass.setFreqMode Method Definition\nDESCRIPTION: Method to set the frequency mode for compass updates. Available from API_LEVEL 4.0, this allows setting the trigger frequency mode to balance power consumption and refresh rate.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetFreqMode(mode: number): void\n```\n\n----------------------------------------\n\nTITLE: Stopping Continuous Heart Rate Measurement in TypeScript\nDESCRIPTION: Cancels continuous heart rate measurement and removes the callback function listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noffCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining getProperty Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the getProperty method, specifying its parameter and return types.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(key: any) => result\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.close\nDESCRIPTION: TypeScript type definition showing the function signature for the file close operation. Takes a file handle number and returns a result code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/close.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number) => result\n```\n\n----------------------------------------\n\nTITLE: Defining SPO2 Sensor Event Callback in TypeScript\nDESCRIPTION: This TypeScript snippet defines the callback function signature for SPO2 sensor events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Using getBrightness Function in JavaScript\nDESCRIPTION: Demonstrates how to import and use the getBrightness function to retrieve the current screen brightness and log it to the console. The brightness value ranges from 0 to 100.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/getBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getBrightness } from '@zos/display'\n\nconst result = getBrightness()\nconsole.log(`current brightness ${result}`)\n```\n\n----------------------------------------\n\nTITLE: Using statAssetsSync Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the statAssetsSync function to retrieve information about a file named 'test.txt' in the assets directory. It imports the function, calls it with the file path, and logs the file size if the file exists.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/statAssetsSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { statAssetsSync } from '@zos/fs'\n\nconst result = statAssetsSync({\n  path: 'test.txt',\n})\n\nif (result) {\n  const { size } = result\n  console.log(size)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Zeus Project\nDESCRIPTION: Command to create a new Zepp OS project named 'hello-world'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/cli/index.md#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzeus create hello-world\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lunar Month Calendar in ZeppOS\nDESCRIPTION: Shows how to access Chinese Lunar Calendar information using the getLunarMonthCalendar method, including iterating through lunar days in the current month.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lunar_month_cal = time.getLunarMonthCalendar()\n\nfor (let i = 0; i < lunar_month_cal.day_count; i++) {\n  console.log('lunar_day : ' + lunar_month_cal.lunar_days_array[i])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mstOnCharaReadComplete Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for mstOnCharaReadComplete. It takes a callback function as an argument and returns a boolean Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnCharaReadComplete.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstOnCharaReadComplete(callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: Using closeSync Function in JavaScript\nDESCRIPTION: This code example demonstrates how to use the closeSync function in conjunction with openSync to open and close a file. It imports necessary functions from the @zos/fs module, opens a file in read-only mode, and then closes the file descriptor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, closeSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\nconst result = closeSync({\n  fd,\n})\n\nif (result === 0) {\n  console.log('file descriptor closed')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CYCLE_LIST Widget in Zepp OS\nDESCRIPTION: Code snippet showing how to import and create a CYCLE_LIST widget in Zepp OS. This is the basic initialization code required to use this UI component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst cycleList = createWidget(widget.CYCLE_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Stopping Continuous Heart Rate Measurement in TypeScript\nDESCRIPTION: Cancels continuous heart rate measurement and removes the callback function listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noffCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Refreshing an Item in CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: This snippet demonstrates how to refresh a specific item in the CYCLE_IMAGE_TEXT_LIST widget, reverting it to its original state after modifying its properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setProperty(hmUI.prop.ITEM_REFRESH, 0) // 0 is the item index, starting from 0\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.stat\nDESCRIPTION: TypeScript type definition showing the function signature that takes a path string and returns a tuple containing stat object and error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/stat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string) => [stat, err]\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.stat\nDESCRIPTION: TypeScript type definition showing the function signature that takes a path string and returns a tuple containing stat object and error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/stat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string) => [stat, err]\n```\n\n----------------------------------------\n\nTITLE: Importing File System Asset Documentation\nDESCRIPTION: Imports content from a documentation file related to the hmFS.open_asset API reference.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/open_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/open_asset.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for send Method\nDESCRIPTION: TypeScript type definition for the send method that transmits data over Bluetooth connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(data: object, size: number) => void\n```\n\n----------------------------------------\n\nTITLE: Function Signature for hmFS.SysProSetChars in TypeScript\nDESCRIPTION: TypeScript function signature showing the parameters and return type for the hmFS.SysProSetChars API. This function takes a key and value string and returns a numeric result where 0 means success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string, val: string) => result\n```\n\n----------------------------------------\n\nTITLE: Complete Vibration Control Example\nDESCRIPTION: A complete example showing vibration control including initialization, scene setting, starting vibration, and cleanup in page destruction\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n\nfunction click() {\n  vibrate.stop()\n  vibrate.scene = 25\n  vibrate.start()\n}\n\nclick()\n\nPage({\n  onDestroy() {\n    vibrate && vibrate.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Rectangle on Canvas in Zepp OS\nDESCRIPTION: Shows how to draw a filled rectangle from (60,20) to (120,60) with magenta color on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawRect({\n  x1: 60,\n  y1: 20,\n  x2: 120,\n  y2: 60,\n  color: 0xff00ff\n})\n```\n\n----------------------------------------\n\nTITLE: Creating CYCLE_IMAGE_TEXT_LIST Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to import and create a CYCLE_IMAGE_TEXT_LIST widget using the ZeppOS UI framework. It specifies the widget type and configuration parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst cycleImageTextList = createWidget(widget.CYCLE_IMAGE_TEXT_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Function Signature for setStatusBarVisible in ZeppOS\nDESCRIPTION: TypeScript definition for the setStatusBarVisible function that shows or hides the status bar. It accepts a single boolean parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setStatusBarVisible.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(visible: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Heart Rate Sensor\nDESCRIPTION: Demonstrates how to create a heart rate sensor instance and access the last measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst heart = hmSensor.createSensor(hmSensor.id.HEART)\n\nconsole.log(heart.last)\n```\n\n----------------------------------------\n\nTITLE: Stopping Vibration in TypeScript\nDESCRIPTION: Method to stop the currently running vibration on the device.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Getting Formatted Hour in TypeScript\nDESCRIPTION: Gets the number of hours in the current time format (12-hour or 24-hour) using the Time sensor. Available from API_LEVEL 2.1.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetFormatHour(): number\n```\n\n----------------------------------------\n\nTITLE: Function Signature for hmFS.SysProSetChars in TypeScript\nDESCRIPTION: TypeScript function signature showing the parameters and return type for the hmFS.SysProSetChars API. This function takes a key and value string and returns a numeric result where 0 means success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string, val: string) => result\n```\n\n----------------------------------------\n\nTITLE: Function Signature for setStatusBarVisible in ZeppOS\nDESCRIPTION: TypeScript definition for the setStatusBarVisible function that shows or hides the status bar. It accepts a single boolean parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setStatusBarVisible.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(visible: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: FAT_BURRING Sensor Event Callback Type Definition in TypeScript\nDESCRIPTION: This snippet provides the TypeScript type definition for the callback function used in the addEventListener method of the FAT_BURRING sensor. It defines the callback as a function that takes no arguments and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Updating TEXT_IMG Widget Text in ZeppOS\nDESCRIPTION: Updates the text displayed by a TEXT_IMG widget using the setProperty method. This allows dynamic changes to the displayed text after widget creation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = hmUI.createWidget(hmUI.widget.TEXT_IMG, Param)\nconst text = '12' //If you want to not display the data write \"\" directly.\nwidget.setProperty(hmUI.prop.TEXT, text)\n```\n\n----------------------------------------\n\nTITLE: SessionStorage getItem Method Signature\nDESCRIPTION: TypeScript definition for getItem method with optional default value parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetItem(key: string, defaultValue?: any): void\n```\n\n----------------------------------------\n\nTITLE: Getting Current Year in TypeScript\nDESCRIPTION: Retrieves the year of the current date using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetFullYear(): number\n```\n\n----------------------------------------\n\nTITLE: Creating CYCLE_IMAGE_TEXT_LIST Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to import and create a CYCLE_IMAGE_TEXT_LIST widget using the ZeppOS UI framework. It specifies the widget type and configuration parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst cycleImageTextList = createWidget(widget.CYCLE_IMAGE_TEXT_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Unregistering Heart Rate Change Callback in TypeScript\nDESCRIPTION: This snippet demonstrates how to cancel continuous heart rate measurement and unregister the callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noffCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Registering Screen Change Callback in TypeScript\nDESCRIPTION: Method to register a callback function that will be triggered when the screen display status changes. The callback receives the current screen status as a parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: (status: number) => void): void\n```\n\n----------------------------------------\n\nTITLE: Verifying Virtual Network Card Installation on MacOS\nDESCRIPTION: Command to verify the successful installation of virtual network card by checking device list on MacOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/simulator/setup.md#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nls /dev\n```\n\n----------------------------------------\n\nTITLE: Defining toObject Method for Settings Storage in TypeScript\nDESCRIPTION: Defines the type signature for the toObject method, which converts the contents of the settings storage into an object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n() => Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Environment\nDESCRIPTION: Command to setup the simulator environment on Linux systems.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/simulator/setup.md#2025-04-07_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/simulator/resources/firmware/ && sudo ./setup_for_linux.sh\n```\n\n----------------------------------------\n\nTITLE: Importing SysProSetInt API Reference Documentation in ZeppOS Docs\nDESCRIPTION: This code imports and displays the SysProSetInt API reference content from the ZeppOS documentation. SysProSetInt is a function in the hmFS module used to set system integer properties in ZeppOS device applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetInt.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Downloads in JavaScript\nDESCRIPTION: Examples showing how to handle successful downloads with and without a specified file path using the onSuccess callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/download-file.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst downloadTask = network.downloader.downloadFile({\n  url: 'https://docs.zepp.com/zh-cn/img/logo.png',\n  headers: {},\n  timeout: 60000,\n  filePath: 'data://download/1.png'\n})\n\ndownloadTask.onSuccess = (event) => {\n  console.log(event.filePath) // data://download/1.png\n  console.log(event.tempFilePath) // undefined\n  console.log(event.statusCode) // 200\n}\n\nconst downloadTask2 = network.downloader.downloadFile({\n  url: 'https://docs.zepp.com/zh-cn/img/logo.png',\n  headers: { key: 121 },\n  timeout: 60000\n})\n\ndownloadTask2.onSuccess = (event) => {\n  console.log(event.filePath) // undefined\n  console.log(event.tempFilePath) // data://download/logo.png\n  console.log(event.statusCode) // 200\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and using mstStartScan in JavaScript\nDESCRIPTION: Example showing how to import the mstStartScan function from the @zos/ble module in a Zepp OS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ble/mstStartScan.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { mstStartScan } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Today's PAI Value in TypeScript\nDESCRIPTION: Method signature for getting the PAI value obtained today. This returns a number representing the PAI points earned during the current day.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Pai.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetToday(): number\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_DATE Widget in ZeppOS\nDESCRIPTION: Creates a date widget that displays date components using image-based text. Supports customization of position, alignment, spacing, and image assets for year, month and day display. Includes options for zero-padding and text following behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontArray = []\nconst status = hmUI.createWidget(hmUI.widget.IMG_DATE, {\n  year_startX: 0,\n  year_startY: 0,\n  year_unit_sc: 'unit.png', // Unit\n  year_unit_tc: 'unit.png',\n  year_unit_en: 'unit.png',\n  year_align: hmUI.align.LEFT,\n  year_space: 1, // Spacing of text.\n  year_zero: 1, // Whether to make up zeroes.\n  year_follow: 1, // Whether to follow.\n  year_en_array: fontArray,\n  year_sc_array: fontArray,\n  year_tc_array: fontArray,\n  year_is_character: true // This field is invalid for the year and defaults to false. When true, the incoming images are 12 for the month and 31 for the day.\n  // Month and day as above, need to replace the prefix with month/day.\n})\n```\n\n----------------------------------------\n\nTITLE: Compass.start Method Definition\nDESCRIPTION: Method to begin monitoring compass data. When called, the device starts collecting data from the compass sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Using getPerformance Function in JavaScript\nDESCRIPTION: Example of how to use the getPerformance function to retrieve memory and performance information for a Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/getPerformance.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getPerformance } from '@zos/app'\n\n// Get memory info only\nconst memoryProfile = getPerformance('memory')\n\n// Get both memory and performance info\nconst fullProfile = getPerformance('memory', 'perf')\n```\n\n----------------------------------------\n\nTITLE: Type Definition for removeListener Method in TypeScript\nDESCRIPTION: TypeScript type definition for the removeListener method which takes no parameters and returns nothing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmBle.mdx#2025-04-07_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Removing Items and Clearing sessionStorage (TypeScript)\nDESCRIPTION: Shows how to remove a specific item by key using removeItem and how to clear all data from sessionStorage using the clear method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nremoveItem(key: string): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Getting Seconds in TypeScript\nDESCRIPTION: Shows how to get the current seconds using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetSeconds(): number\n```\n\n----------------------------------------\n\nTITLE: Creating STAND Sensor in JavaScript\nDESCRIPTION: Demonstrates how to create a STAND sensor instance and access its current value using hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stand = hmSensor.createSensor(hmSensor.id.STAND)\n\nconsole.log(stand.current)\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_DATE Widget in ZeppOS\nDESCRIPTION: Creates a date widget that displays date components using image-based text. Supports customization of position, alignment, spacing, and image assets for year, month and day display. Includes options for zero-padding and text following behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontArray = []\nconst status = hmUI.createWidget(hmUI.widget.IMG_DATE, {\n  year_startX: 0,\n  year_startY: 0,\n  year_unit_sc: 'unit.png', // Unit\n  year_unit_tc: 'unit.png',\n  year_unit_en: 'unit.png',\n  year_align: hmUI.align.LEFT,\n  year_space: 1, // Spacing of text.\n  year_zero: 1, // Whether to make up zeroes.\n  year_follow: 1, // Whether to follow.\n  year_en_array: fontArray,\n  year_sc_array: fontArray,\n  year_tc_array: fontArray,\n  year_is_character: true // This field is invalid for the year and defaults to false. When true, the incoming images are 12 for the month and 31 for the day.\n  // Month and day as above, need to replace the prefix with month/day.\n})\n```\n\n----------------------------------------\n\nTITLE: Unregistering Current Heart Rate Change Callback\nDESCRIPTION: Method to stop continuous heart rate measurement and unregister callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noffCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating VIBRATE Sensor Instance\nDESCRIPTION: Demonstrates how to create a vibration sensor instance using hmSensor.createSensor method\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n```\n\n----------------------------------------\n\nTITLE: Sleep getSleepStageModel Method Type Definition\nDESCRIPTION: Type definition for the method that retrieves sleep stage model constants. These constants define different sleep stages like wake, REM, light sleep, and deep sleep.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => modelData\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying API Documentation Content in React/JSX\nDESCRIPTION: This code imports the hmSetting.getLanguage API documentation from a specific path and renders it using a Content component. This pattern allows for modular documentation structure in the Zepp OS documentation project.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getLanguage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getLanguage.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Signature\nDESCRIPTION: Shows the method signature for registering event listeners on the sensor instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Complete TEXT_IMG Widget Example in ZeppOS\nDESCRIPTION: This example demonstrates creating a TEXT_IMG widget with a custom font array, setting its position, type, and other properties. It shows how to set up the font array and create the widget with specific parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontArray = [\n  fontRootPath + '00.png',\n  fontRootPath + '01.png',\n  fontRootPath + '02.png',\n  fontRootPath + '03.png',\n  fontRootPath + '04.png',\n  fontRootPath + '05.png',\n  fontRootPath + '06.png',\n  fontRootPath + '07.png',\n  fontRootPath + '08.png',\n  fontRootPath + '09.png'\n]\n\nconst dayText = hmUI.createWidget(hmUI.widget.TEXT_IMG, {\n  x: 207,\n  y: 340,\n  type: hmUI.data_type.BATTERY,\n  font_array: fontArray,\n  h_space: 1,\n  align_h: 16,\n  text: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Drawing a Filled Circle on Canvas in Zepp OS\nDESCRIPTION: Illustrates drawing a filled circle with center at (80,140), radius 40, and yellow color on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawCircle({\n  center_x: 80,\n  center_y: 140,\n  radius: 40,\n  color: 0xfff400\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Storage clear Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the clear method which deletes all key-value pairs in the storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Starting Vibration with TypeScript Interface\nDESCRIPTION: TypeScript interface for the start method which initiates vibration with optional configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstart(option?: Option): void\n```\n\n----------------------------------------\n\nTITLE: Getting Current Standing Hours with TypeScript in ZeppOS\nDESCRIPTION: TypeScript method signature for retrieving the current number of hours with standing behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Function Signature for getWeightTarget in TypeScript\nDESCRIPTION: TypeScript definition for the getWeightTarget function that returns the user's weight target.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getWeightTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getWeightTarget(): Result\n```\n\n----------------------------------------\n\nTITLE: JavaScript Security Restrictions in ZeppOS Mini Programs\nDESCRIPTION: This snippet demonstrates the dynamic JavaScript execution functions that are restricted in ZeppOS Mini Programs for security reasons. The code shows two prohibited methods, with the exception of a specific 'return this' construction.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/app-settings/js-support.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neval(\"code\")\nnew Function(\"code\")\nnew Function('return this')\n```\n\n----------------------------------------\n\nTITLE: Declaring setBrightScreenCancel Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition showing the method signature and return type for the setBrightScreenCancel function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setBrightScreenCancel.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Project Template Selection Dialog\nDESCRIPTION: Interactive command line interface showing options for project creation including template type, components, and target platforms.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/cli/index.md#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n? Which kind of template application need to created? Empty\n? What type of application should be created? APP\n? Should this application contain a app-side component? Yes\n? Should this application contain a settings component? Yes\n? Which platforms should this application be built for? GTR3 Pro, GTR3\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Storage clear Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the clear method which deletes all key-value pairs in the storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Getting Festival in TypeScript\nDESCRIPTION: Demonstrates how to get the current Gregorian calendar festival. Returns 'INVALID' if there is no festival.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ngetFestival(): string\n```\n\n----------------------------------------\n\nTITLE: Example API_LEVEL Version String\nDESCRIPTION: Demonstrates the format of API_LEVEL version numbers, which use the pattern 'primary.secondary' as a string value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/compatibility.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"2.0\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data with getItem from LocalStorage (TypeScript)\nDESCRIPTION: Shows how to retrieve data from LocalStorage using the getItem method. It accepts a key and an optional default value, returning the stored value or the default if the key doesn't exist.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetItem(key: string, defaultValue?: any): void\n```\n\n----------------------------------------\n\nTITLE: Using Hour and Minute Tags for Time Display in ZeppOS Watchface Text Component\nDESCRIPTION: This example shows the format of time display tags in ZeppOS Watchface Designer. The tags [HOUR_24_Z] and [MIN_Z] are used to create a time display in the format 'HH:MM', with zero-padded hour and minute values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/watchface/guides/text.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[HOUR_24_Z]:[MIN_Z]\n```\n\n----------------------------------------\n\nTITLE: Unregistering Step Change Callback - TypeScript\nDESCRIPTION: Method to unregister a previously registered step change callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining clear Method for Settings Storage in TypeScript\nDESCRIPTION: Defines the type signature for the clear method, which removes all key-value pairs from the settings storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Getting Distance Unit Setting - JavaScript\nDESCRIPTION: Example showing how to get the current distance unit setting. Returns 0 for metric, 1 for imperial units, with other values being invalid.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getMileageUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mileageUnit = hmSetting.getMileageUnit()\n```\n\n----------------------------------------\n\nTITLE: Installing Tunnelblick on macOS via Homebrew\nDESCRIPTION: Command to install Tunnelblick VPN client using Homebrew package manager on macOS. Tunnelblick is needed to provide the virtual network card required for simulator communication.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/simulator/setup.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install --cask tunnelblick\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ZeppOS API Documentation in React\nDESCRIPTION: This code imports a content component for the hmFS.read function documentation from a specific path and renders it within the current component. It demonstrates how modular documentation is integrated into a React-based documentation system.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/read.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/read.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Updating Logging Methods from DeviceRuntimeCore in ZeppOS\nDESCRIPTION: Shows how to migrate logging functionality. In 2.0, logging is handled through the @zos/utils module rather than DeviceRuntimeCore.HmLogger, though the usage pattern remains similar.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/migration-guide.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = DeviceRuntimeCore.HmLogger.getLogger('app.js')\n\nlogger.log('app.js onCreate')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { log } from '@zos/utils'\n\nconst logger = log.getLogger('app.js')\nlogger.log('app.js onCreate')\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnCharaValueArrived Function in JavaScript\nDESCRIPTION: This example demonstrates how to import the mstOnCharaValueArrived function from the @zos/ble module. The actual usage of the function is not shown in the provided snippet.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnCharaValueArrived.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOnCharaValueArrived } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Simplified setWakeUpRelaunch Function Signature in TypeScript\nDESCRIPTION: This snippet shows a simplified TypeScript function signature for setWakeUpRelaunch, taking a boolean parameter directly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setWakeUpRelaunch(relaunch: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Defining getAutoBrightness Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for the getAutoBrightness function. It shows that the function takes no parameters and returns a Result type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/getAutoBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getAutoBrightness(): Result\n```\n\n----------------------------------------\n\nTITLE: Uninstalling App from Runtime Environment using Zepp CLI\nDESCRIPTION: Command for removing the application from the current directory in the connected runtime environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuninstall\n```\n\n----------------------------------------\n\nTITLE: Importing Settings Storage API Content in MDX\nDESCRIPTION: MDX file that imports and displays settings storage API documentation content from another file using a Content component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/settings-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Content from '../side-service-api/settings-storage.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Per Day Event Handler in TypeScript\nDESCRIPTION: TypeScript method definition for registering end-of-day callback\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nonPerDay(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Function Signature for mkdirSync in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for mkdirSync which creates a directory synchronously in the /data directory of the Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/mkdirSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction mkdirSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Checking Buzzer Enabled Status in TypeScript\nDESCRIPTION: This method checks if the 'Other' option in the system buzzer scene settings is enabled.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisEnabled(): boolean\n```\n\n----------------------------------------\n\nTITLE: Unregister Change Event Callback - TypeScript\nDESCRIPTION: Method to cancel a previously registered callback function for air pressure and altitude changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetInt and SysProGetInt in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmFS.SysProSetInt() function to store a temporary integer value and then retrieve it using hmFS.SysProGetInt(). The stored value will be cleared when the system restarts.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: Displaying Watchface Example Image with Docusaurus useBaseUrl\nDESCRIPTION: Renders an example image of the watchface using the useBaseUrl hook to construct the correct image path, with width set to 30% of the container.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/watchface/guides/create.md#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={useBaseUrl('/img/zh-cn/docs/watchface/example.png')} width=\"30%\" />\n```\n\n----------------------------------------\n\nTITLE: Page build Function Signature\nDESCRIPTION: Function signature for UI rendering method that handles drawing the page interface. Called after page initialization.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/life-cycle.md#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Example of Using clearLaunchAppTimeout with setLaunchAppTimeout in JavaScript\nDESCRIPTION: JavaScript code example demonstrating how to create a timer with setLaunchAppTimeout and cancel it with clearLaunchAppTimeout.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { setLaunchAppTimeout, clearLaunchAppTimeout } from '@zos/router'\n\nconst timeoutId = setLaunchAppTimeout({\n  url: 'pages/js_widget_sample',\n  appId: 1000001,\n  delay: 10000,\n})\n\nclearLaunchAppTimeout({\n  timeoutId,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Item Text Properties in CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: This code shows how to set properties for a specific item in the CYCLE_IMAGE_TEXT_LIST. It allows customization of text color and size for individual items.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = ...\nwidget.setProperty(prop.ITEM_MORE,{\n  index:0,\n  item_text_color:0x2f4988,\n  item_text_size:50\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering User Data Content Module in JavaScript/JSX\nDESCRIPTION: This snippet imports a content module for the getUserData function from the Zepp OS device app API documentation. It then renders the imported content using a JSX component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getUserData.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getUserData.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Heart Rate Measurement in TypeScript\nDESCRIPTION: Gets the most recent heart rate measurement (single measurement or heart rate monitoring measurement, continuous heart rate measurement 'onCurrentChange' results are not counted).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetLast(): number\n```\n\n----------------------------------------\n\nTITLE: Importing Screen Off Settings Documentation Component\nDESCRIPTION: Imports the setScreenOff MDX documentation component from the device app API reference section for HM settings.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/setScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/setScreenOff.mdx'\n```\n\n----------------------------------------\n\nTITLE: Registering Stress Change Callback in TypeScript\nDESCRIPTION: This snippet shows how to register a callback function to listen for stress measurement change events using the onChange method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining getBrightness Function Type in TypeScript\nDESCRIPTION: Defines the type signature for the getBrightness function, which takes no parameters and returns a Result type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/getBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getBrightness(): Result\n```\n\n----------------------------------------\n\nTITLE: Hiding Status Bar Example - JavaScript\nDESCRIPTION: Example showing how to import and use the setStatusBarVisible function to hide the status bar on square screen devices.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/setStatusBarVisible.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setStatusBarVisible } from '@zos/ui'\n\nsetStatusBarVisible(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Permissions on Linux\nDESCRIPTION: Command to grant full permissions to the simulator directory on Linux systems.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/simulator/setup.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod -R 777 /dir\n```\n\n----------------------------------------\n\nTITLE: Defining Router Exit Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the exit function that exits a Mini Program and returns to the applist page. The function takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/exit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction exit(): void\n```\n\n----------------------------------------\n\nTITLE: Getting Lunar Year in TypeScript\nDESCRIPTION: TypeScript method definition for getting Chinese lunar year\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarYear(): number\n```\n\n----------------------------------------\n\nTITLE: Using hmSetting.getTimeFormat() to Retrieve Time Format in JavaScript\nDESCRIPTION: Example showing how to call the hmSetting.getTimeFormat() function to get the current system time format (returns 0 for 12-hour format or 1 for 24-hour format).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getTimeFormat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst timeFormat = hmSetting.getTimeFormat()\n```\n\n----------------------------------------\n\nTITLE: Unregistering Fat Burning Change Event Listener in TypeScript\nDESCRIPTION: Method to cancel a previously registered callback function that was listening to fat burning minutes changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Getting Vibration Scene Type in TypeScript\nDESCRIPTION: Method to get the supported vibration scene types. Available from API_LEVEL 3.6 onwards.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetType(): Type\n```\n\n----------------------------------------\n\nTITLE: Setting Design Width for Screen Adaptation in ZeppOS\nDESCRIPTION: Configures the designWidth property which serves as the base for size calculations in the global px function, used for screen adaptation across different device models.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"designWidth\": 390\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getScreenAutoBright Function\nDESCRIPTION: Type signature for the hmSetting.getScreenAutoBright() function which takes no parameters and returns a boolean result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getScreenAutoBright.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Importing Base URL Utility in JSX for Documentation\nDESCRIPTION: This code snippet imports the useBaseUrl utility from Docusaurus, which is used to reference local image paths in documentation. The utility helps maintain correct image paths regardless of the base URL configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/faq/re-install-system.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl'\n```\n\n----------------------------------------\n\nTITLE: Installing Zeus CLI via npm or yarn\nDESCRIPTION: Command to globally install the Zeus CLI package via npm or yarn. This is required before using any Zeus CLI commands.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/cli/index.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @zeppos/zeus-cli -g\n\n// or\n\nyarn global @zeppos/zeus-cli\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image with useBaseUrl in React for Zepp OS Documentation\nDESCRIPTION: This code snippet demonstrates how to use the useBaseUrl function to display an image in the documentation. It sets the image source and width using JSX.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/watchface/guides/create.md#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={useBaseUrl('/img/zh-cn/docs/watchface/example.png')} width=\"30%\" />\n```\n\n----------------------------------------\n\nTITLE: Usage example of clearLaunchAppTimeout in JavaScript\nDESCRIPTION: A JavaScript example demonstrating how to import and use the setLaunchAppTimeout and clearLaunchAppTimeout functions from the @zos/router module. Shows setting a timer and then canceling it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLaunchAppTimeout, clearLaunchAppTimeout } from '@zos/router'\n\nconst timeoutId = setLaunchAppTimeout({\n  url: 'pages/js_widget_sample',\n  appId: 1000001,\n  delay: 10000,\n})\n\nclearLaunchAppTimeout({\n  timeoutId,\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Today's PAI in TypeScript\nDESCRIPTION: Gets the PAI values obtained today using the getToday method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Pai.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetToday(): number\n```\n\n----------------------------------------\n\nTITLE: Using mstBuildProfile Function Example\nDESCRIPTION: JavaScript example showing how to import and use the Bluetooth connection functionality. This snippet demonstrates the basic setup for BLE connections.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstBuildProfile.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstGetConnIdByRemoteAddr } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Getting Today's Stress Measurements in TypeScript\nDESCRIPTION: This snippet shows how to retrieve stress measurements for the entire day, recorded every minute, using the getToday method. It returns an array of numbers with a maximum length of 1440 (24 * 60).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetToday(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Defining getAppWidgetSize Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the getAppWidgetSize function, which returns an object containing size information for app widgets.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/getAppWidgetSize.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Connecting to Runtime Environment in CLI Bridge Mode\nDESCRIPTION: Command to establish a connection with the runtime environment device after entering Bridge mode. A success message will display in the terminal when the connection is successful.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconnect\n```\n\n----------------------------------------\n\nTITLE: Defining Exit Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the exit function that takes no parameters and returns void. Available since API_LEVEL 2.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/exit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction exit(): void\n```\n\n----------------------------------------\n\nTITLE: Registering End-of-Day Event Listener in TypeScript\nDESCRIPTION: Registers a callback function for the end-of-day event using the Time sensor. Available from API_LEVEL 2.1.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nonPerDay(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Importing Battery Sensor Documentation Component\nDESCRIPTION: Imports a battery sensor documentation component from a reference path and renders it using MDX syntax.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/BATTERY.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Target Calorie Consumption\nDESCRIPTION: Gets the target calorie consumption in kcal. Available from API_LEVEL 2.0 and requires permission 'data:user.hd.calorie'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Calorie.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: Unregistering Stress Change Event Handler Type Definition\nDESCRIPTION: TypeScript type definition for offChange method to unregister a stress measurement change callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Unregistering Crown Rotation Event Listener in JavaScript\nDESCRIPTION: Example showing how to cancel a previously registered crown rotation event listener using hmApp.unregisterSpinEvent()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/spinEvent/unregisterSpinEvent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Unregister keystroke listener.\nhmApp.unregisterSpinEvent()\n```\n\n----------------------------------------\n\nTITLE: Configuring nvm environment variables\nDESCRIPTION: Commands to add to the ~/.bashrc file to set up the necessary environment variables for nvm to function properly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/Basic-environment-construction.mdx#2025-04-07_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n----------------------------------------\n\nTITLE: Setting Design Width in ZeppOS app.json\nDESCRIPTION: This snippet shows how to set the 'designWidth' property in the app.json file. The design width is used as the base for size calculations in the global 'px' function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"designWidth\": 390\n}\n```\n\n----------------------------------------\n\nTITLE: Get Historical Blood Oxygen Data Type Definition\nDESCRIPTION: TypeScript type definition for getLastFewHour() method to retrieve historical blood oxygen measurements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastFewHour(hour: number): Array<Data>\n```\n\n----------------------------------------\n\nTITLE: Opening a File in Zepp OS Mini Program\nDESCRIPTION: Demonstrates how to use the hmFS.open() function to open a file named 'test_file.txt' in read-write mode, creating it if it doesn't exist.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/open.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing a Rectangle Area on Canvas in Zepp OS\nDESCRIPTION: Illustrates clearing a rectangular area of 64x64 pixels at position (400,0) on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.clear({\n  x: 400,\n  y: 0,\n  w: 64,\n  h: 64\n})\n```\n\n----------------------------------------\n\nTITLE: Get Historical Blood Oxygen Data Type Definition\nDESCRIPTION: TypeScript type definition for getLastFewHour() method to retrieve historical blood oxygen measurements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastFewHour(hour: number): Array<Data>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for offKey\nDESCRIPTION: Type definition showing the offKey function signature that takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/offKey.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction offKey(): void\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering Stand Behavior Change Listeners in TypeScript\nDESCRIPTION: This snippet shows how to register and unregister callback functions for monitoring changes in standing behavior hours using the Stand sensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getAutoBrightness Function\nDESCRIPTION: TypeScript type definition showing the function signature returning a Result type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/getAutoBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAutoBrightness(): Result\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Visibility in ZeppOS JavaScript\nDESCRIPTION: This snippet shows how to set the visibility of a widget in ZeppOS. It uses the setProperty method to hide or show the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setProperty(hmUI.prop.VISIBLE,false); //false: hide; true: show.\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Visibility in ZeppOS JavaScript\nDESCRIPTION: This snippet shows how to set the visibility of a widget in ZeppOS. It uses the setProperty method to hide or show the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setProperty(hmUI.prop.VISIBLE,false); //false: hide; true: show.\n```\n\n----------------------------------------\n\nTITLE: Adding Step Sensor Event Listener\nDESCRIPTION: Demonstrates how to register a callback for step sensor change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstep.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language in ZeppOS app.json\nDESCRIPTION: Specifies the default language to use when the user's language is not available in the i18n configuration or when a specific fallback is needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"defaultLanguage\": \"zh-cn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Home Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the home() function that exits the Mini Program and returns to the watchface page. Available from API_LEVEL 2.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/home.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction home(): void\n```\n\n----------------------------------------\n\nTITLE: Registering Phone Time Setting Event Listener in TypeScript\nDESCRIPTION: Registers a callback function for the phone modify time event using the Time sensor. Available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nonPhoneTimeSetting(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Registering Calorie Change Event - TypeScript\nDESCRIPTION: Method to register a callback function that will be called when calorie values change.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Calorie.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Widget Style in Zepp OS Layout File\nDESCRIPTION: This code snippet defines the style for a text widget in a Zepp OS application. It sets properties such as text content, position, size, and alignment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/development.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as hmUI from \"@zos/ui\";\nimport { getText } from \"@zos/i18n\";\nimport { getDeviceInfo } from \"@zos/device\";\nimport { px } from \"@zos/utils\";\n\nexport const { width: DEVICE_WIDTH, height: DEVICE_HEIGHT } = getDeviceInfo();\n\nexport const TEXT_STYLE = {\n  // modify value\n  text: \"Hello Zepp OS\",\n  x: px(42),\n  y: px(200),\n  w: DEVICE_WIDTH - px(42) * 2,\n  h: px(100),\n  color: 0xffffff,\n  text_size: px(36),\n  align_h: hmUI.align.CENTER_H,\n  align_v: hmUI.align.CENTER_V,\n  text_style: hmUI.text_style.WRAP,\n};\n```\n\n----------------------------------------\n\nTITLE: Canceling Gesture Event Listening in JavaScript\nDESCRIPTION: This code example demonstrates how to use the hmApp.unregisterGestureEvent() function to cancel gesture event listening in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/gestureEvent/unregisterGestureEvent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Cancel gesture event listening.\nhmApp.unregisterGestureEvent()\n```\n\n----------------------------------------\n\nTITLE: Defining UI Styles for Zepp OS Text Widget\nDESCRIPTION: Styles configuration file for text widget UI elements, showing separation of styling concerns from main component logic.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/code-organization.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { align, text_style } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nexport const TEXT_STYLE = {\n  x: px(96),\n  y: px(40),\n  w: px(288),\n  h: px(46),\n  color: 0xffffff,\n  text_size: px(36),\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.WRAP\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_LEVEL Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating an IMG_LEVEL widget that displays images based on progress level. The widget requires x/y coordinates and an array of images to display.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, Param)\n```\n\n----------------------------------------\n\nTITLE: Function signature for clearLaunchAppTimeout in TypeScript\nDESCRIPTION: The TypeScript function signature for clearLaunchAppTimeout, which takes an Option object containing the timeoutId to cancel.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clearLaunchAppTimeout(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining getTemperatureUnit Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature of the getTemperatureUnit function. It takes no parameters and returns a Result type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/settings/getTemperatureUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTemperatureUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Defining ItemClickFunc Callback for CYCLE_LIST in ZeppOS\nDESCRIPTION: TypeScript definition of the ItemClickFunc callback function which handles item click events in the CYCLE_LIST widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n(cycleList: CycleList, index: number) => void\n```\n\n----------------------------------------\n\nTITLE: Module Configuration in JSON\nDESCRIPTION: Example showing a complete module configuration in app.json. This includes settings for pages, app-side services, settings app, and app widgets with their respective paths and properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": {\n    \"page\": {\n      \"pages\": [\"page/gtr-3-pro/loading\"]\n    },\n    \"app-side\": {\n      \"path\": \"app-side/index\"\n    },\n    \"setting\": {\n      \"path\": \"setting/index\"\n    },\n    \"app-widget\": {\n      \"widgets\": [\n        {\n          \"path\": \"app-widget/index\",\n          \"icon\": \"icon.png\",\n          \"name\": \"app-widget-demo\",\n          \"runtime\": {\n            \"type\": \"js\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function signature for clearLaunchAppTimeout in TypeScript\nDESCRIPTION: The TypeScript function signature for clearLaunchAppTimeout, which takes an Option object containing the timeoutId to cancel.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clearLaunchAppTimeout(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Step Sensor Event Listener Type Definition\nDESCRIPTION: TypeScript type definition for the step sensor event callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Starting Accelerometer Data Listening in TypeScript\nDESCRIPTION: Starts listening to accelerometer data. This method doesn't take any parameters and doesn't return any value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Compatibility in app.json\nDESCRIPTION: JSON configuration from the 'calories - 2.0' sample that defines which device models are supported by the Mini Program. The deviceSource numbers (7995648 and 7995649) correspond to Amazfit GTS 4 devices according to the Device Basic Information document.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/preview-error.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"platforms\": [\n  {\n    \"name\": \"gts4\",\n    \"deviceSource\": 7995648\n  },\n  {\n    \"name\": \"gts4-w\",\n    \"deviceSource\": 7995649\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Defining TextImageRow Type in TypeScript\nDESCRIPTION: Defines the type signature for the TextImageRow component. It takes a Props object as an argument and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/textimagerow.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_WEEK Widget in ZeppOS\nDESCRIPTION: This code demonstrates how to create an IMG_WEEK widget using hmUI.createWidget(). The widget displays weekday information using images. Note that width and height cannot be directly set and will use the actual dimensions of the images provided in the weekArray.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_WEEK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhmUI.createWidget(hmUI.widget.IMG_WEEK, {\n  x: 175,\n  y: 113,\n  // w,h cannot be set, use the actual width and height of the image in the weekArray.\n  week_en: weekArray,\n  week_tc: weekArray,\n  week_sc: weekArray\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mini Program Name Using hmApp.packageInfo() in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmApp.packageInfo() function to retrieve the name property from the Mini Program Configuration and log it to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/packageInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { name } = hmApp.packageInfo()\n\nconsole.log(name)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of setWakeUpRelaunch in JavaScript\nDESCRIPTION: JavaScript example demonstrating how to use the setWakeUpRelaunch function by importing it from the @zos/display module and enabling app relaunch on wake up.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setWakeUpRelaunch } from '@zos/display'\n\nsetWakeUpRelaunch({\n  relaunch: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Page in Zepp OS (JavaScript)\nDESCRIPTION: The Page onInit function initializes a page. It receives params passed from the push or replace functions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/life-cycle.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(params: string) => void\n```\n\n----------------------------------------\n\nTITLE: Getting Last Day Blood Oxygen Data Type Definition\nDESCRIPTION: TypeScript type definition for getLastDay() method that returns 24-hour blood oxygen data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastDay(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: WEAR Sensor Event Listener Type Definition\nDESCRIPTION: TypeScript type definition for the WEAR sensor event callback function\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WEAR.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setLayoutParent Method\nDESCRIPTION: TypeScript type definition showing the method signature for setLayoutParent, which takes a UIWidget parent parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setLayoutParent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(parent: UIWidget) => void\n```\n\n----------------------------------------\n\nTITLE: Button Click Function Type Definition\nDESCRIPTION: Type definition for button click callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(button: Button) => void\n```\n\n----------------------------------------\n\nTITLE: Zepp OS Docs Project Directory Structure\nDESCRIPTION: A tree representation of the project's directory structure, showing the organization of documentation files, versioning, and translations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/README.md#2025-04-07_snippet_3\n\nLANGUAGE: tree\nCODE:\n```\n├── docusaurus.config.js\n├── sidebars.js        # sidebar for the current docs version\n├── versions.json        # file to indicate what versions are available\n├── docs                 # docs directory for the current docs version\n│   ├── reference\n│   │   └── app-json.mdx       # https://docs.zepp.com/docs/reference/app-json/\n│   └── intro.mdx         # https://docs.zepp.com/docs/intro/\n├── versioned_docs\n│   ├── version-1.0\n│   │   ├── reference\n│   │   │   └── app-json.mdx    # https://docs.zepp.com/docs/1.0/reference/app-json/\n│   │   └── intro.md      # https://docs.zepp.com/docs/1.0/intro/\n│   └── version-v2\n│       ├── reference\n│       │   └── app-json.mdx    # https://docs.zepp.com/docs/v2/reference/app-json/\n│       └── intro.md    # https://docs.zepp.com/docs/v2/intro/\n├── i18n\n│   └── zh-cn\n│       └── docusaurus-plugin-content-docs\n│           ├── current\n│           │     ├── reference\n│           │     │    └── app-json.mdx     # https://docs.zepp.com/zh-cn/docs/reference/app-json/\n│           │     └── intro.md    # https://docs.zepp.com/zh-cn/docs/intro/\n│           ├── version-v2 \n│           │     ├── reference\n│           │     │    └── app-json.mdx     # https://docs.zepp.com/zh-cn/docs/v2/reference/app-json/\n│           │     └── intro.md    # https://docs.zepp.com/zh-cn/docs/v2/intro/\n│           └── version-1.0\n│                 ├── reference\n│                 │    └── app-json.mdx     # https://docs.zepp.com/zh-cn/docs/1.0/reference/app-json/\n│                 └── intro.md    # https://docs.zepp.com/zh-cn/docs/1.0/intro/\n├── versioned_sidebars\n│   ├── version-1.0-sidebars.json\n│   └── version-v2-sidebars.json\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Defining exit Function Type in TypeScript for ZeppOS\nDESCRIPTION: TypeScript type definition for the exit function in ZeppOS app service. The function takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-service/exit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction exit(): void\n```\n\n----------------------------------------\n\nTITLE: CHANGE Event Callback Type Definition in TypeScript\nDESCRIPTION: This TypeScript code defines the type of the callback function for the CHANGE event of the DISTANCE sensor. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Frequency Mode for Accelerometer in TypeScript\nDESCRIPTION: Methods to set and get the trigger frequency mode for the accelerometer. setFreqMode sets the mode, while getFreqMode retrieves the current mode.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetFreqMode(mode: number): void\n\ngetFreqMode(): number\n```\n\n----------------------------------------\n\nTITLE: Device Targets Configuration for Zepp OS Mini Programs\nDESCRIPTION: Example of the targets object that specifies device-specific configurations for different watch models in the Zepp OS ecosystem.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ...\n      }\n    },\n    \"gtr-3\": {\n      \"module\": {\n        // ...\n      }\n    },\n    \"gts-3\": {\n      \"module\": {\n        // ...\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextInput Component Type in TypeScript\nDESCRIPTION: This snippet defines the type of the TextInput component as a function that takes props and returns a RenderFunc. It specifies the component's signature and expected usage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/textinput.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Creating Editable Background Configuration\nDESCRIPTION: Demonstrates setting up editable backgrounds with multiple background options, preview images, and positioning configurations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst editBg = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_BG, {\n  edit_id: 103,\n  x: 0,\n  y: 0,\n  bg_config: [\n    { id: 1, preview: BGROOT + 'bg_edit_1.png', path: BGROOT + 'preview_1.png' },\n    { id: 2, preview: BGROOT + 'bg_edit_2.png', path: BGROOT + 'preview_2.png' },\n    { id: 3, preview: BGROOT + 'bg_edit_3.png', path: BGROOT + 'preview_3.png' },\n    { id: 4, preview: BGROOT + 'bg_edit_4.png', path: BGROOT + 'preview_4.png' },\n    { id: 5, preview: BGROOT + 'bg_edit_5.png', path: BGROOT + 'preview_5.png' }\n  ],\n  count: 5,\n  default_id: 1,\n  fg: BGROOT + 'fg.png',\n  tips_x: 178,\n  tips_y: 428,\n  tips_bg: TIPS_ROOT + 'bg_tips.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type for registerGestureEvent in TypeScript\nDESCRIPTION: Specifies the TypeScript type definition for the hmApp.registerGestureEvent() function. It takes a callback function as an argument, which receives an Event parameter and returns a boolean.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/gestureEvent/registerGestureEvent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(callback: (event: Event) => boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Select Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Select component, which takes a Props object and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/select.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Example of STRESS Sensor Event Listener Usage in JavaScript\nDESCRIPTION: This snippet provides a complete example of how to use the STRESS sensor event listener to log changes in stress levels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstress.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(stress.current)\n\n  console.log('the stress time: ' + stress.time + ' stress: ' + stress.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Example of STRESS Sensor Event Listener Usage in JavaScript\nDESCRIPTION: This snippet provides a complete example of how to use the STRESS sensor event listener to log changes in stress levels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstress.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(stress.current)\n\n  console.log('the stress time: ' + stress.time + ' stress: ' + stress.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Stage Data in ZeppOS\nDESCRIPTION: Defines the type and structure of the getSleepStageData method, which returns an array of SleepInfo objects containing sleep stage information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => Array<SleepInfo>\n```\n\n----------------------------------------\n\nTITLE: Defining mstPair Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for mstPair. It takes a ConnectId parameter and returns a Result. The function is used for pairing with devices using a connection ID obtained from the mstConnect API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstPair.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstPair(connectId: ConnectId): Result\n```\n\n----------------------------------------\n\nTITLE: Declaring console.log Method in TypeScript for Zepp OS\nDESCRIPTION: Defines the log method of the console object. It accepts any number of parameters and returns void. The method prints log level logs, with each log limited in length and truncated if exceeded.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/console.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlog(...data: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Displaying Mini Program Runtime Asset Directory Structure\nDESCRIPTION: This code snippet illustrates the simplified directory structure of the /assets folder in a Mini Program's runtime environment after compilation and building.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/fs.md#2025-04-07_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n.\nassets\n├── icon.png\n└── image\n│   └── logo.png\n└── raw\n    └── data.txt\n```\n\n----------------------------------------\n\nTITLE: Available Routing API Methods in ZeppOS\nDESCRIPTION: Lists the routing API methods available in ZeppOS for page navigation, including going to a specific page, navigating back, reloading the current page, and returning to the home screen.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/router.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhmApp.gotoPage\nhmApp.goBack\nhmApp.reloadPage\nhmApp.gotoHome\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Stage Data in TypeScript\nDESCRIPTION: Defines the type for the getSleepStageData method, which returns an array of SleepInfo objects containing sleep stage information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => Array<SleepInfo>\n```\n\n----------------------------------------\n\nTITLE: Using getAppWidgetSize to Retrieve Widget Dimensions in ZeppOS\nDESCRIPTION: Example showing how to import and use the getAppWidgetSize function from the @zos/ui module to retrieve the width of a shortcut card.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/getAppWidgetSize.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { getAppWidgetSize } from '@zos/ui'\n\nconst { w } = getAppWidgetSize()\n```\n\n----------------------------------------\n\nTITLE: Configuring App Metadata in app.json for Zepp OS Mini Program\nDESCRIPTION: Defines the app configuration information including app ID, name, type, version, icon, vendor details, and description. This snippet shows a complete example of the 'app' object configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"appId\": 1000089,\n    \"appName\": \"······\",\n    \"appType\": \"app\",\n    \"version\": {\n      \"code\": 5,\n      \"name\": \"0.0.5\"\n    },\n    \"icon\": \"logo.png\",\n    \"vender\": \"······\",\n    \"description\": \"······\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Select Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Select component, which takes a Props object and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/select.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Using getPackageInfoById Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the getPackageInfoById function to retrieve package information for a Mini Program with ID 1001. It imports the function from the @zos/app module, calls it with the appId, and logs the name field of the returned package info.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/getPackageInfoById.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getPackageInfoById } from '@zos/app'\n\nconst packageInfo = getPackageInfoById({ appId: 1001 })\nconsole.log(packageInfo.name)\n```\n\n----------------------------------------\n\nTITLE: Defining the offGesture Function Type in TypeScript\nDESCRIPTION: Type definition for the offGesture function which cancels gesture event listeners. The function takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/offGesture.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction offGesture(): void\n```\n\n----------------------------------------\n\nTITLE: Using SysProGetDouble and SysProSetDouble in JavaScript\nDESCRIPTION: Demonstrates how to use hmFS.SysProSetDouble() to store a double value and hmFS.SysProGetDouble() to retrieve it. The example stores the value 3.14 and then logs the retrieved value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetDouble('js_test_double', 3.14)\nconsole.log(hmFS.SysProGetDouble('js_test_double'))\n```\n\n----------------------------------------\n\nTITLE: Using swipeToIndex with SCROLL_MODE_SWIPER in JavaScript\nDESCRIPTION: Example of how to use the swipeToIndex function to navigate to a specific Swiper item. The example first sets the scroll mode to SCROLL_MODE_SWIPER with configuration options, then uses swipeToIndex to navigate to the 5th item.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/swipeToIndex.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { setScrollMode, swipeToIndex, SCROLL_MODE_SWIPER } from '@zos/page'\n\nsetScrollMode({\n  mode: SCROLL_MODE_SWIPER,\n  options: {\n    height: 480,\n    count: 10,\n  },\n})\n\nswipeToIndex({\n  index: 5,\n})\n```\n\n----------------------------------------\n\nTITLE: Get Frequency Mode - TypeScript\nDESCRIPTION: TypeScript method signature for getting the current compass trigger frequency mode.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetFreqMode(): number\n```\n\n----------------------------------------\n\nTITLE: CALORIE Sensor Event Callback Type Definition in TypeScript\nDESCRIPTION: This TypeScript definition specifies the type of the callback function used in the addEventListener method for the CALORIE sensor. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Event Response TypeScript Function Signature\nDESCRIPTION: TypeScript function signature for setEnable() method that controls whether a widget responds to gesture interaction events. Takes a boolean parameter to enable or disable event response.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/setEnable.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(response: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Defining getDeviceInfo Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the hmSetting.getDeviceInfo() function, which returns a deviceInfo object containing various properties about the device.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getDeviceInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => deviceInfo\n```\n\n----------------------------------------\n\nTITLE: Refreshing Items in CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: This snippet demonstrates how to refresh a specific item in the CYCLE_IMAGE_TEXT_LIST, resetting it to its original state after modifying its properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setProperty(prop.ITEM_REFRESH, 0) // 0 is the item index, starting from 0\n```\n\n----------------------------------------\n\nTITLE: Accessing File in Assets Directory (JavaScript)\nDESCRIPTION: Opens a file named 'data.txt' located in the 'raw' folder of the assets directory for read-only access.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/fs.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const fileId = hmFS.open_asset('raw/data.txt', hmFS.O_RDONLY)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Page onDestroy Function Signature\nDESCRIPTION: Function signature for page cleanup method that handles resource disposal when a page is being destroyed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/life-cycle.md#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Stopping Vibration\nDESCRIPTION: Demonstrates how to stop an active vibration scene\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.stop()\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProSetDouble to Store and Retrieve Floating Point Numbers in JavaScript\nDESCRIPTION: Example showing how to store a double precision floating point number using hmFS.SysProSetDouble and then retrieve it using hmFS.SysProGetDouble. The stored value will be cleared when the system reboots.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetDouble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetDouble('js_test_double', 3.14)\nconsole.log(hmFS.SysProGetDouble('js_test_double'))\n```\n\n----------------------------------------\n\nTITLE: Declaring API Permissions in app.json for Zepp OS\nDESCRIPTION: This JSON configuration in app.json declares the required permissions for a Zepp OS mini-program. In this example, it requests the 'data:user.info' permission needed for accessing user profile information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/guides/framework/device/permission.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"data:user.info\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getDeviceInfo Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the hmSetting.getDeviceInfo() function, which returns a deviceInfo object containing various properties about the device.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getDeviceInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => deviceInfo\n```\n\n----------------------------------------\n\nTITLE: Using setItem and getItem Methods in JavaScript\nDESCRIPTION: Demonstrates how to use the setItem method to store a value and the getItem method to retrieve it from the settings storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsettings.settingsStorage.setItem('text', 'Hello Zepp OS')\nconst result = settings.settingsStorage.getItem('text')\n```\n\n----------------------------------------\n\nTITLE: Using setItem and getItem Methods in JavaScript\nDESCRIPTION: Demonstrates how to use the setItem method to store a value and the getItem method to retrieve it from the settings storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsettings.settingsStorage.setItem('text', 'Hello Zepp OS')\nconst result = settings.settingsStorage.getItem('text')\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getTemperatureUnit\nDESCRIPTION: JavaScript example demonstrating how to import and use the getTemperatureUnit function to check if the temperature unit is set to Celsius.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getTemperatureUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTemperatureUnit, TEMPERATURE_UNIT_CENTIGRADE } from '@zos/settings'\n\nconst temperatureUnit = getTemperatureUnit()\n\nif (temperatureUnit === TEMPERATURE_UNIT_CENTIGRADE) {\n  console.log('centigrade')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.write() Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definition for the hmFS.write() function. It specifies the function parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/write.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, buff: ArrayBuffer, pos: number, len: number) => result\n```\n\n----------------------------------------\n\nTITLE: Cancelling Accelerometer Change Event Listener in TypeScript\nDESCRIPTION: Cancels a previously registered accelerometer data change event listener callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Registering Standing Hours Change Listener in TypeScript\nDESCRIPTION: TypeScript method signature for registering a callback function that will be triggered when the standing hours value changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Registering Stress Change Callback - TypeScript Definition\nDESCRIPTION: TypeScript interface definition for registering a callback function that listens to stress measurement changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Simplified clearLaunchAppTimeout Function Signature in TypeScript\nDESCRIPTION: This snippet shows a simplified calling method for the clearLaunchAppTimeout function, where it directly takes a timeoutId number as a parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction clearLaunchAppTimeout(timeoutId: number): void\n```\n\n----------------------------------------\n\nTITLE: Cancelling Accelerometer Change Event Listener in TypeScript\nDESCRIPTION: Cancels a previously registered accelerometer data change event listener callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using getProfile API in Zepp OS JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the getProfile API to access user information in a Zepp OS mini-program. It requires the 'data:user.info' permission to be declared in app.json.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/guides/framework/device/permission.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getProfile } from '@zos/user'\n\nPage({\n  build() {\n    const { age } = getProfile()\n    console.log(age)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getApp Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getApp function that returns a Result object containing app instance properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/getApp.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getApp(): Result\n```\n\n----------------------------------------\n\nTITLE: Stopping Vibration in ZeppOS\nDESCRIPTION: Stops the current vibration scene. This must be called after starting a vibration to enable future vibrations to work properly.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.stop()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getTemperatureUnit\nDESCRIPTION: JavaScript example demonstrating how to import and use the getTemperatureUnit function to check if the temperature unit is set to Celsius.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getTemperatureUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTemperatureUnit, TEMPERATURE_UNIT_CENTIGRADE } from '@zos/settings'\n\nconst temperatureUnit = getTemperatureUnit()\n\nif (temperatureUnit === TEMPERATURE_UNIT_CENTIGRADE) {\n  console.log('centigrade')\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Unit Localization in Markdown Table\nDESCRIPTION: A comprehensive markdown table displaying metric and imperial units for various data types in both English and Chinese, used for localization in Zepp OS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/designs/internationalization/languages.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Data**            | **Metric unit (English)** | **Metric unit (Chinese)** | **Imperial unit (English)**|**Imperial unit (Chinese)** |\n| ------------------- | ------------------------- | --------------------------- |------------------------- | --------------------------- |\n| Distance            | km                        | km                          | mi                        | Mile          |\n| Speed               | km/h                      | km/h                        | mph                        | mph                  |\n| Stride              | cm                        | cm                          | in                         | Inch              |\n| Swimming distance   | m                         | meter(s)                    | yd                        | yard           |\n| Calorie consumption | kcal                      | kcal                        |kcal                        | kcal             |\n| Temperature         | ℃                         | Celsius                    | ℉                        | Fahrenheit           |\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Device Info Method in TypeScript\nDESCRIPTION: TypeScript type definition showing the method signature that returns device information object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getDeviceInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => deviceInfo\n```\n\n----------------------------------------\n\nTITLE: Checking AOD Mode in TypeScript\nDESCRIPTION: Method to check if the Always-On Display (AOD) rest screen display function is enabled. Returns a boolean value indicating the AOD mode status.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAodMode(): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining CheckFunc Callback for RADIO_GROUP in ZeppOS\nDESCRIPTION: Function signature for the check_func callback used in RADIO_GROUP components. This callback is triggered when a radio button state changes and provides information about which button was affected.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n(radioGroup: RadioGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Using offKey to Unregister Key Event Listener in JavaScript\nDESCRIPTION: Demonstrates how to use the offKey function to unregister a previously set key event listener. It also shows the usage of onKey, KEY_UP, and KEY_EVENT_CLICK from the @zos/interaction module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/interaction/offKey.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onKey, offKey, KEY_UP, KEY_EVENT_CLICK } from '@zos/interaction'\n\nconst keyCallback = (key, keyEvent) => {\n  if (key === KEY_UP && keyEvent === KEY_EVENT_CLICK) {\n    console.log('up click')\n  }\n  return true\n}\n\nonKey({\n  callback: keyCallback,\n})\n\noffKey()\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetDouble in JavaScript\nDESCRIPTION: Example showing how to store and retrieve a double precision number using SysProSetDouble and SysProGetDouble methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProSetDouble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetDouble('js_test_double', 3.14)\nconsole.log(hmFS.SysProGetDouble('js_test_double'))\n```\n\n----------------------------------------\n\nTITLE: Starting Location Tracking - TypeScript\nDESCRIPTION: Method signature for starting the location tracking service.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Geolocation.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting localStorage Data in ZeppOS with TypeScript\nDESCRIPTION: TypeScript method signatures for localStorage operations including setItem to save data, getItem to retrieve data with optional default value, removeItem to delete specific key data, and clear to remove all localStorage data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nsetItem(key: string, value: any): void\n```\n\nLANGUAGE: ts\nCODE:\n```\ngetItem(key: string, defaultValue?: any): void\n```\n\nLANGUAGE: ts\nCODE:\n```\nremoveItem(key: string): void\n```\n\nLANGUAGE: ts\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Using openAssetsSync Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the openAssetsSync function to open a file named 'test.txt' in read-only mode. It imports the necessary functions and constants from the @zos/fs module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/openAssetsSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openAssetsSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Status Bar Title Example in JavaScript\nDESCRIPTION: Example showing how to import and use the updateStatusBarTitle function to set status bar text content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/updateStatusBarTitle.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { updateStatusBarTitle } from '@zos/ui'\n\nconst title = 'Mini Program Title'\n\nupdateStatusBarTitle(title)\n```\n\n----------------------------------------\n\nTITLE: getCurrentPage Function Type Definition in TypeScript\nDESCRIPTION: TypeScript definition showing the getCurrentPage function signature. This function returns a Result object containing page instance properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/getCurrentPage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction getCurrentPage(): Result\n```\n\n----------------------------------------\n\nTITLE: Importing Stand Sensor Documentation MDX Component\nDESCRIPTION: Imports the stand sensor documentation content component from the reference documentation path. Uses the MDX format for documentation content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/STAND.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Getting Lunar Month in TypeScript\nDESCRIPTION: Demonstrates how to get the current Chinese lunar calendar month. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarMonth(): number\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos in Zepp OS Docs\nDESCRIPTION: Example of how to embed YouTube videos in the Zepp OS documentation using the react-lite-youtube-embed library.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/README.md#2025-04-07_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```mdx-code-block\nimport LiteYouTubeEmbed from 'react-lite-youtube-embed';\n\n<div className=\"video-container\">\n  <LiteYouTubeEmbed\n    id=\"RPyTge0kjWQ\"\n    title=\"Zepp OS Program Environment Setup and Development Beginner's Guide\"\n  />\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getScreenType Function\nDESCRIPTION: TypeScript type definition showing the function signature that returns a screenType number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getScreenType.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => screenType\n```\n\n----------------------------------------\n\nTITLE: Sleep getSleepHrData Method Type Definition\nDESCRIPTION: Type definition for the method that retrieves sleep heart rate data. This method doesn't return any data according to the type definition.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Configuring TextView for SCROLL_LIST in ZeppOS\nDESCRIPTION: Shows an example of configuring the text_view property for a SCROLL_LIST item. This array defines multiple text views with various properties such as position, size, color, and data binding.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst text_view = [\n  { x: 100, y: 0, w: 100, h: 20, key: 'name', color: 0xffffff, action: true },\n  { x: 0, y: 30, w: 100, h: 100, key: 'age', color: 0xffffff, text_size: 20 }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining mstDisconnect Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the mstDisconnect function that handles BLE device disconnection. The function takes a ConnectId parameter and returns a boolean Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstDisconnect.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstDisconnect(connectId: ConnectId): Result\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.SysProSetInt64 Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the hmFS.SysProSetInt64 function. It takes a string key and a number value as parameters, and returns a result number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Type Definition for SysProGetChars in TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature for SysProGetChars method that takes a string key and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Defining CheckFunc Callback for CHECKBOX_GROUP in ZeppOS\nDESCRIPTION: Shows the structure of the CheckFunc callback function used in the CHECKBOX_GROUP widget. This function is called when the button state changes, providing information about the checkbox group, index, and checked state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(checkboxGroup: CheckboxGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Calculating Single-line Text Layout with getTextLayout in JavaScript\nDESCRIPTION: Example of using getTextLayout to calculate the width and height of single-line text without wrapping.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTextLayout } from '@zos/ui'\n\nconst { width, height } = getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 0,\n  wrapped: 0\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: SecondaryWidget Type Definition in TypeScript\nDESCRIPTION: The TypeScript type definition for the SecondaryWidget function, showing its signature and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/global/SecondaryWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SecondaryWidget(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Importing STRESS Sensor Documentation Component in JSX\nDESCRIPTION: This code imports the STRESS sensor documentation from a Markdown file and renders it directly in the current page. It uses a relative import path to access the documentation file and then renders it as a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/STRESS.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating a STEP Sensor in ZeppOS\nDESCRIPTION: This snippet shows how to create a STEP sensor instance using the hmSensor module. The STEP sensor provides access to step count data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst step = hmSensor.createSensor(hmSensor.id.STEP)\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Simulator Environment\nDESCRIPTION: Command to set up the required environment for the simulator on Linux by running the setup script in the firmware directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/simulator/setup.md#2025-04-07_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/simulator/resources/firmware/ && sudo ./setup_for_linux.sh\n```\n\n----------------------------------------\n\nTITLE: Importing Screen Type Settings Documentation\nDESCRIPTION: Imports the documentation content for getScreenType functionality from the hmSetting API reference within the ZeppOS device application documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getScreenType.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getScreenType.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Registering App Function in Zepp OS Mini Program (JavaScript)\nDESCRIPTION: The App() function is used to register the Mini Program. It accepts an object parameter specifying lifecycle callbacks and must be called once in app.js.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/global.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp({\n  onCreate: (param) => {\n    // Initialize app global data\n  },\n  onDestroy: () => {\n    // Cleanup when app is destroyed\n  },\n  // Other custom functions or data\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Sound Playback in TypeScript\nDESCRIPTION: Method to start playing a system sound. Takes parameters for the sound type and repeat count (defaults to 0 for no repetition).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstart(sourceType: number, repeatCount: 0): void\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Temporary Integer in ZeppOS JavaScript\nDESCRIPTION: Demonstrates how to use hmFS.SysProSetInt() to store a temporary integer value and hmFS.SysProGetInt() to retrieve it. The stored value is cleared on system reboot.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: Unregistering Step Change Callback with TypeScript in ZeppOS\nDESCRIPTION: TypeScript method signature for canceling a previously registered step change callback function. Requires passing the same callback reference that was used with onChange.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining mstGetConnIdByRemoteAddr Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for mstGetConnIdByRemoteAddr which takes a DeviceAddress parameter (ArrayBuffer) and returns either a connection ID number or undefined.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstGetConnIdByRemoteAddr.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction mstGetConnIdByRemoteAddr(deviceAddress: DeviceAddress): Result\n```\n\n----------------------------------------\n\nTITLE: Defining SysProSetInt64 Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the SysProSetInt64 function. It takes a string key and a number value as parameters, and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Defining getAllAlarms Function Type in TypeScript\nDESCRIPTION: Type definition for the getAllAlarms function that returns an array of alarm IDs (numbers) for the current Mini Program, including persistent timers.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/alarm/getAllAlarms.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAllAlarms(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Initializing AppSideService with Lifecycle Callbacks in JavaScript\nDESCRIPTION: Example showing how to register a companion service instance using AppSideService constructor with onInit, onRun and onDestroy lifecycle methods. These callbacks handle the service's initialization, execution and cleanup phases.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/side-service/register.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAppSideService({\n  onInit() {\n    // ...\n  },\n  onRun() {\n    // ...\n  },\n  onDestroy() {\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Widget Properties in JavaScript\nDESCRIPTION: This code snippet shows a workaround for widgets that don't support property retrieval, by manually maintaining a state variable to track property changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  state: {\n    buttonY: 0\n  },\n  build() {\n    this.state.buttonY = 300\n\n    createWidget(widget.BUTTON, {\n      y: this.state.buttonY,\n      // ...\n    })\n\n    showToast({\n      text: this.state.buttonY\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Function Signature of resetPalmScreenOff in TypeScript\nDESCRIPTION: TypeScript function signature for the resetPalmScreenOff function which returns a Result type. The function restores the default palm resting screen-off behavior with no required parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/resetPalmScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction resetPalmScreenOff(): Result\n```\n\n----------------------------------------\n\nTITLE: Using GetWeightUnit Function in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the getWeightUnit function to check if the current weight unit is set to kilograms.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getWeightUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getWeightUnit, WEIGHT_UNIT_KILOGRAM } from '@zos/settings'\n\nconst weightUnit = getWeightUnit()\n\nif (weightUnit === WEIGHT_UNIT_KILOGRAM) {\n  console.log('Kilogram')\n}\n```\n\n----------------------------------------\n\nTITLE: Launching the Simulator on Linux\nDESCRIPTION: Command to start the simulator on Linux platforms after the environment has been properly configured.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/simulator/setup.md#2025-04-07_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/simulator/ && ./simulator\n```\n\n----------------------------------------\n\nTITLE: Defining getBrightness Function Type in TypeScript\nDESCRIPTION: Type definition for the getBrightness function that returns the screen brightness value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Auto-Brightness in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmSetting.setScreenAutoBright() function to enable auto-brightness. It takes a boolean parameter and returns a result indicating success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/setScreenAutoBright.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.setScreenAutoBright(true)\n```\n\n----------------------------------------\n\nTITLE: Compass.getDirectionAngle Method Definition\nDESCRIPTION: Method to get the current direction angle in degrees, measured clockwise from north. Returns a number from 0-360 if calibrated, or the string 'INVALID' if compass is not calibrated.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetDirectionAngle(): number | 'INVALID'\n```\n\n----------------------------------------\n\nTITLE: Defining hmSetting.getDiskInfo() Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the hmSetting.getDiskInfo() function that returns disk information including total space, free space, and space used by various components.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getDiskInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => diskInfo\n```\n\n----------------------------------------\n\nTITLE: Defining setBrightScreenCancel Method Type\nDESCRIPTION: TypeScript type definition showing the method signature that returns a result value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/setBrightScreenCancel.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Defining send Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the send method which sends data over the Bluetooth connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(data: object, size: number) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Warn Method Type\nDESCRIPTION: TypeScript type definition for the warn method that prints warning level messages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwarn(...args: string[]): void\n```\n\n----------------------------------------\n\nTITLE: Setting Shortcut Card Height in ZeppOS\nDESCRIPTION: This function sets the height of a Shortcut card in a ZeppOS application. It takes an object with an 'h' property representing the desired height in pixels. The function is available from API_LEVEL 2.0 and above.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/setAppWidgetSize.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(option: Option) => undefined\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setAppWidgetSize } from '@zos/ui'\n\nsetAppWidgetSize({ h: 100 })\n```\n\n----------------------------------------\n\nTITLE: Getting User Weight Unit Setting Example\nDESCRIPTION: JavaScript example showing how to retrieve the currently configured weight unit using the hmSetting API. Returns a numeric value corresponding to the user's preferred weight unit.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getWeightUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst unit = hmSetting.getWeightUnit()\n```\n\n----------------------------------------\n\nTITLE: Starting Buzzer in TypeScript\nDESCRIPTION: This method starts the buzzer with a specified type and repeat count. The repeat count defaults to 0 (no repeat).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstart(type: number, repeatCount: 0): void\n```\n\n----------------------------------------\n\nTITLE: Music Control Method Type Definitions\nDESCRIPTION: TypeScript type definitions for various music control methods including initialization, play, pause, previous, and next operations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Getting Screen Brightness in JavaScript\nDESCRIPTION: Example showing how to retrieve the current screen brightness value using hmSetting.getBrightness(). Returns a number between 0 and 100 representing brightness level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmSetting.getBrightness()\n```\n\n----------------------------------------\n\nTITLE: Setting Simulator Permissions on MacOS\nDESCRIPTION: Command to add executable permissions to the simulator startup script on MacOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/simulator/setup.md#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd /Applications/simulator.app/Contents/Resources/firmware && chmod +x ./start_qemu.sh\n```\n\n----------------------------------------\n\nTITLE: SPO2 Sensor Change Event Callback Type in Zepp OS\nDESCRIPTION: TypeScript type definition for the callback function that handles SPO2 sensor change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Cancelling Single Heart Rate Measurement Change Event in TypeScript\nDESCRIPTION: This snippet shows how to cancel the callback function for single heart rate measurement change events in TypeScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noffLastChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating CIRCLE Widget in ZeppOS JavaScript\nDESCRIPTION: This snippet demonstrates how to create a CIRCLE widget using hmUI.createWidget. It sets the circle's center coordinates, radius, color, and alpha transparency.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst circle = hmUI.createWidget(hmUI.widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: Using resetPalmScreenOff with pausePalmScreenOff in JavaScript\nDESCRIPTION: Example showing how to temporarily disable palm screen-off behavior using pausePalmScreenOff and then restore it after a delay using resetPalmScreenOff. The timeout waits 3 seconds before restoring the default behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/resetPalmScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { pausePalmScreenOff, resetPalmScreenOff } from '@zos/display'\n\npausePalmScreenOff({\n  duration: 0,\n})\n\nsetTimeout(() => {\n  resetPalmScreenOff()\n}, 3000)\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Storage Values in ZeppOS\nDESCRIPTION: Example showing how to store and retrieve values using settingsStorage API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsettings.settingsStorage.setItem('key', 'Hello World')\nconst result = settings.settingsStorage.getItem('key')\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Opacity Example in ZeppOS\nDESCRIPTION: Example showing how to create a text widget and set its opacity using setAlpha method. The example demonstrates importing necessary components, creating a text widget with specific properties, and setting its opacity to 80.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setAlpha.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\n\nconst text = createWidget(widget.TEXT, {\n  x: 96,\n  y: 120,\n  w: 288,\n  h: 46,\n  color: 0xffffff,\n  text_size: 36,\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.NONE,\n  text: 'HELLO ZEPPOS'\n})\n\ntext.setAlpha(80)\n```\n\n----------------------------------------\n\nTITLE: Defining send Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the send method that transmits data over Bluetooth connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(data: object, size: number) => void\n```\n\n----------------------------------------\n\nTITLE: Creating STROKE_RECT Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a STROKE_RECT widget using the createWidget function from the @zos/ui module. It specifies the widget type and parameters for customization.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/STROKE_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst strokeRect = createWidget(widget.STROKE_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining hmSetting.getDateFormat() Function Type in TypeScript\nDESCRIPTION: Defines the TypeScript type signature for the hmSetting.getDateFormat() function, which takes no parameters and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getDateFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmSetting.getWeightTarget in TypeScript\nDESCRIPTION: TypeScript type definition for the hmSetting.getWeightTarget() function. It shows the function signature with no parameters and returns a weightTarget value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getWeightTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n() => weightTarget\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmSetting.getWeightTarget in TypeScript\nDESCRIPTION: TypeScript type definition for the hmSetting.getWeightTarget() function. It shows the function signature with no parameters and returns a weightTarget value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getWeightTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n() => weightTarget\n```\n\n----------------------------------------\n\nTITLE: Creating World Clock Sensor\nDESCRIPTION: Initializes a new World Clock sensor instance using the hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst world_clock = hmSensor.createSensor(hmSensor.id.WORLD_CLOCK)\n```\n\n----------------------------------------\n\nTITLE: SPO2 Sensor Change Event Callback Type in Zepp OS\nDESCRIPTION: TypeScript type definition for the callback function that handles SPO2 sensor change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining onKey Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the onKey function, which takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onKey(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Configuring nvm environment variables\nDESCRIPTION: Environment variable configuration to be added to the .bashrc file. This ensures nvm is properly loaded and available in the shell environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/Basic-environment-construction.mdx#2025-04-07_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n----------------------------------------\n\nTITLE: Building application installation package\nDESCRIPTION: Command to build the final application installation package (zab file). The output will be placed in the project's dist/ directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/cli/index.md#2025-04-07_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nzeus build\n```\n\n----------------------------------------\n\nTITLE: Defining the Type Signature for hmApp.alarmCancel() in TypeScript\nDESCRIPTION: TypeScript type definition for the hmApp.alarmCancel() function, which takes an alarm ID number as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/alarm/alarmCancel.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(alarmId: number) => void\n```\n\n----------------------------------------\n\nTITLE: Function Signature for hmFS.open_asset in TypeScript\nDESCRIPTION: Defines the type signature for the hmFS.open_asset function. It takes a path string and a FLAG enum as parameters, and returns a file handle as a number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/open_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Defining Home Function Type in TypeScript for ZeppOS\nDESCRIPTION: Type definition for the home() function in TypeScript. This function takes no parameters and returns void, indicating it exits the Mini Program and returns to the watchface page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/home.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction home(): void\n```\n\n----------------------------------------\n\nTITLE: Creating a DIALOG Widget in Zepp OS\nDESCRIPTION: Basic syntax for creating a DIALOG widget in Zepp OS. This code initializes a dialog component that can be configured with various parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/DIALOG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dialog = hmUI.createWidget(hmUI.widget.DIALOG, Param)\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Event Response Type Definition in TypeScript\nDESCRIPTION: Type definition for the setEnable method that controls widget gesture event response. Takes a boolean parameter to enable or disable event response.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setEnable.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(response: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Sleep Sensor in JavaScript\nDESCRIPTION: Demonstrates how to create a SLEEP sensor instance using the hmSensor.createSensor method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sleep = hmSensor.createSensor(hmSensor.id.SLEEP)\n```\n\n----------------------------------------\n\nTITLE: CheckedChangeFunc Callback Function Signature\nDESCRIPTION: Defines the callback function structure for handling state changes in a SLIDE_SWITCH widget. It receives the slideSwitch instance and checked state as parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n(slideSwitch: SlideSwitch, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Importing World Clock Sensor Documentation in React\nDESCRIPTION: Imports the documentation content for the WORLD_CLOCK sensor from a Markdown/MDX file and renders it using a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Simplified onKey Function Call in TypeScript\nDESCRIPTION: This snippet shows a simplified way to call the onKey function, where the callback function is passed directly as an argument.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onKey(callback: (key: Key, event: KeyEvent) => PreventDefault): void\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Listener to CANVAS in Zepp OS\nDESCRIPTION: Demonstrates how to add a click event listener to the CANVAS widget using addEventListener, logging the clicked coordinates.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { event } from '@zos/ui'\n\ncanvas.addEventListener(event.CLICK_UP, function cb(info) {\n  console.log(info.x)\n  console.log(info.y)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing React Component for Image URLs in Docusaurus\nDESCRIPTION: Uses the useBaseUrl hook from Docusaurus to properly reference image URLs in the documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/watchface/guides/create.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl'\n```\n\n----------------------------------------\n\nTITLE: Stopping Vibration - ZeppOS JavaScript\nDESCRIPTION: Stops the current vibration. Should be called in the page's onDestroy method to ensure proper cleanup.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.stop()\n```\n\n----------------------------------------\n\nTITLE: Defining UI Component Structure in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript structure of UI components in ZeppOS. It shows that components are functions that take props and optional render functions as arguments, returning a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/app-settings/ui-intro.md#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining the scrollTo Function Type in TypeScript\nDESCRIPTION: TypeScript function signature for the scrollTo method that accepts an Option object with configuration parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/scrollTo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollTo(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining the scrollTo Function Type in TypeScript\nDESCRIPTION: TypeScript function signature for the scrollTo method that accepts an Option object with configuration parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/scrollTo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollTo(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date Format Type Signature\nDESCRIPTION: TypeScript type definition showing the function signature for getDateFormat method that returns a numeric result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getDateFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Callback Type Definition for STEP Sensor Events\nDESCRIPTION: TypeScript type definition for the callback function that handles STEP sensor change events. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Starting Gyroscope Monitoring in ZeppOS\nDESCRIPTION: Method for starting the gyroscope sensor data monitoring. This initiates the collection of rotation data along the x, y, and z axes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Creating PICK_DATE Widget in ZeppOS\nDESCRIPTION: Shows how to import and create a basic PICK_DATE widget instance. The widget allows users to select date/time values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/PICK_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst pickDate = createWidget(widget.PICK_DATE, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementation Example of scrollTo in JavaScript\nDESCRIPTION: Practical example showing how to import and use the scrollTo function from the @zos/page module to scroll a page to a vertical position of -200 units.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/scrollTo.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollTo } from '@zos/page'\n\nscrollTo({\n  y: -200,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining setBrightness Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the setBrightness method. It takes a number parameter for brightness and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(brightness: number) => result\n```\n\n----------------------------------------\n\nTITLE: Heart Rate Last Event Callback Function Type in ZeppOS\nDESCRIPTION: TypeScript type definition for the callback function used with heart rate LAST events. The callback takes no parameters and returns nothing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmSetting.getTimeFormat() in TypeScript\nDESCRIPTION: Type signature for the hmSetting.getTimeFormat() function, which takes no parameters and returns a numeric result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getTimeFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Stopping SPO2 Measurement in Zepp OS\nDESCRIPTION: Cancels an ongoing blood oxygen measurement. Should be called before starting a new measurement or when measurements are no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nspo2.stop()\n```\n\n----------------------------------------\n\nTITLE: Defining hmApp.goBack() Function Type in TypeScript\nDESCRIPTION: Defines the type signature for the hmApp.goBack() function, which takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/goBack.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Stopping SPO2 Measurement in Zepp OS\nDESCRIPTION: Cancels an ongoing blood oxygen measurement. Should be called before starting a new measurement or when measurements are no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nspo2.stop()\n```\n\n----------------------------------------\n\nTITLE: Defining onGesture Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the onGesture function. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onGesture(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining SysProSetInt Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript function signature for the hmFS.SysProSetInt() function. It specifies the input parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: LaunchApp Function Type Definition in TypeScript\nDESCRIPTION: TypeScript function signature for the launchApp method, showing it accepts an Option object and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/router/launchApp.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction launchApp(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Deleting a File Using hmFS.remove() in JavaScript\nDESCRIPTION: Demonstrates how to delete a file using the hmFS.remove() method. The method returns a result code where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/remove.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmFS.remove('path/to/test_file.txt')\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Creation in ZeppOS\nDESCRIPTION: Example showing how to create and display a dialog using the createDialog API, including event handling and visibility control. Demonstrates the use of auto_hide and click_listener properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/createDialog.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDialog } from '@zos/ui'\n\nPage({\n  build() {\n    const dialog = createDialog({\n      title: 'HELLO ZEPP OS',\n      auto_hide: false,\n      click_listener: ({ type }) => {\n        dialog.show(false)\n        console.log('type', type)\n        console.log('click dialog')\n      }\n    })\n\n    dialog.show(true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Blood Oxygen Change Event Handler Type Definition\nDESCRIPTION: TypeScript type definition for onChange() method to register callback for measurement changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code Widget - Basic Initialization\nDESCRIPTION: Basic initialization of a QR code widget using the createWidget function from @zos/ui. Shows how to import required dependencies.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/QRCODE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst qrcode = createWidget(widget.QRCODE, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating a DISTANCE Sensor in ZeppOS\nDESCRIPTION: Shows how to create a distance sensor instance using the hmSensor API. This sensor provides access to distance/mileage data for the device.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst distance = hmSensor.createSensor(hmSensor.id.DISTANCE)\n```\n\n----------------------------------------\n\nTITLE: Defining SysProSetInt Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript function signature for the hmFS.SysProSetInt() function. It specifies the input parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Method Type\nDESCRIPTION: TypeScript type definition for the debug method that prints debug level messages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndebug(...args: string[]): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Creation in ZeppOS\nDESCRIPTION: Example showing how to create and display a dialog using the createDialog API, including event handling and visibility control. Demonstrates the use of auto_hide and click_listener properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/createDialog.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDialog } from '@zos/ui'\n\nPage({\n  build() {\n    const dialog = createDialog({\n      title: 'HELLO ZEPP OS',\n      auto_hide: false,\n      click_listener: ({ type }) => {\n        dialog.show(false)\n        console.log('type', type)\n        console.log('click dialog')\n      }\n    })\n\n    dialog.show(true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining onGesture Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the onGesture function. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onGesture(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Visibility and Multiple Properties in JavaScript\nDESCRIPTION: Demonstrates how to use setProperty to hide/show a button widget and set multiple properties for a text widget, including position, size, text content, color, and alignment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 设置 widegt 隐藏/显示\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\nbutton.setProperty(hmUI.prop.VISIBLE, false)\n\nconst text = hmUI.createWidget(hmUI.widget.TEXT, Param)\ntext.setProperty(hmUI.prop.MORE, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 200,\n  text: 'hello',\n  color: 0x34e073,\n  align_h: hmUI.align.LEFT\n})\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.stat_asset Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the hmFS.stat_asset function. It takes a string path as input and returns an array containing the file stat object and an error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/stat_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(path: string) => [stat, err]\n```\n\n----------------------------------------\n\nTITLE: Importing Sleep Target API Documentation Component\nDESCRIPTION: Imports the Sleep Target API documentation content from a relative MDX file path and renders it using a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getSleepTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getSleepTarget.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Simplified setBrightness Function Signature\nDESCRIPTION: Alternative simplified TypeScript type definition allowing direct brightness value parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setBrightness(brightness: number): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Body Temperature Type Definition\nDESCRIPTION: TypeScript interface definition for the getCurrent() method that returns the latest body surface temperature measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BodyTemperature.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_POINTER Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to create an IMG_POINTER widget using hmUI.createWidget(). It sets up a pointer image with rotation properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgPointer = hmUI.createWidget(hmUI.widget.IMG_POINTER, Param)\n```\n\n----------------------------------------\n\nTITLE: Unregistering Distance Change Callback - TypeScript\nDESCRIPTION: Method signature for removing a previously registered distance change callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Distance.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using getDateFormat Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the getDateFormat function to retrieve the current system date format and compare it with a predefined constant. It imports the necessary functions and constants from the @zos/settings module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getDateFormat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDateFormat, DATE_FORMAT_YMD } from '@zos/settings'\n\nconst currentDateFormat = getDateFormat()\n\nif (currentDateFormat === DATE_FORMAT_YMD) {\n  console.log('date format is YYYY-MM-DD')\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified setBrightness Function Signature\nDESCRIPTION: Alternative simplified TypeScript type definition allowing direct brightness value parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setBrightness(brightness: number): Result\n```\n\n----------------------------------------\n\nTITLE: Defining connectStatus Method for BLE Connection Status in TypeScript\nDESCRIPTION: TypeScript definition for the connectStatus method, which queries the current BLE connection status. It returns a boolean indicating whether the device is connected.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n() => Result\n```\n\n----------------------------------------\n\nTITLE: Defining setPageBrightTime Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setPageBrightTime function that sets page screen brightness duration. The function accepts an Option object and returns a Result number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setPageBrightTime.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setPageBrightTime(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Icon Size Comparison Table for App Icons\nDESCRIPTION: A table showing the size requirements for app icons and store icons across different device resolutions. All icons need to contain a blank and transparent safe area of 2px on all sides.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/designs/visual/icons.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n    <tr>\n        <th>Device resolution</th>\n        <th>480×480px</th>\n        <th>466×466px</th>\n        <th>454×454px</th>\n        <th>390×450px</th>\n    </tr>\n    <tr>\n        <td>App icons</td>\n        <td colspan=\"4\" align=\"center\">124×124px</td>\n    </tr>\n    <tr>\n        <td>Store icons</td>\n        <td colspan=\"4\" align=\"center\">240×240px</td>\n    </tr>\n    <tr>\n        <td colspan=\"5\">Note: The icon needs to contain a blank and transparent safe area (2px on the top, bottom, left, and right).</td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: SettingsStorage API Type Definitions\nDESCRIPTION: TypeScript type definitions for various settingsStorage API methods including setItem, getItem, and toObject.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, value: string) => void\n```\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\n() => Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Keyboard Widget in Zepp OS\nDESCRIPTION: This snippet shows how to exit and destroy the current keyboard input interface using the deleteKeyboard function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SMART_KEYBOARD.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { deleteKeyboard } from '@zos/ui'\n\ndeleteKeyboard()\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Time Sensor Module Documentation\nDESCRIPTION: Imports content from the TIME sensor module documentation file and renders it using the Content component. This pattern is common in documentation websites to modularize content while maintaining a consistent structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/TIME.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for SysProSetDouble in TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature with parameter and return types.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProSetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fat Burning Target Minutes\nDESCRIPTION: Method to get the target fat burning minutes set for the user.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/FatBurning.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_POINTER Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG_POINTER widget using the hmUI.createWidget method. It sets up a pointer widget with a specified image, rotation center, and initial angle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/IMG_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgPointer = hmUI.createWidget(hmUI.widget.IMG_POINTER, Param)\n```\n\n----------------------------------------\n\nTITLE: SettingsStorage API Type Definitions\nDESCRIPTION: TypeScript type definitions for various settingsStorage API methods including setItem, getItem, and toObject.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, value: string) => void\n```\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\n() => Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Getting Longitude - TypeScript\nDESCRIPTION: Method signature for retrieving the longitude coordinate, supporting both decimal (DD) and degrees-minutes-seconds (DMS) formats.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Geolocation.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetLongitude(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: SettingsStorage API Type Definitions\nDESCRIPTION: TypeScript type definitions for various settingsStorage API methods including setItem, getItem, and toObject.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, value: string) => void\n```\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\n() => Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Defining disConnect Method for BLE Disconnection in TypeScript\nDESCRIPTION: TypeScript definition for the disConnect method, which terminates the BLE connection. This method takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining pausePalmScreenOff Function Type in TypeScript\nDESCRIPTION: TypeScript function signature for the pausePalmScreenOff function, which takes an Option object parameter and returns a numeric Result indicating success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/pausePalmScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pausePalmScreenOff(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Simplified setWakeUpRelaunch Function Signature in TypeScript\nDESCRIPTION: This snippet shows a simplified TypeScript function signature for setWakeUpRelaunch. It takes a boolean parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setWakeUpRelaunch(relaunch: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Stopping Vibration\nDESCRIPTION: Demonstrates how to stop the vibration using the vibrate.stop() method\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.stop()\n```\n\n----------------------------------------\n\nTITLE: Configuring app.json for Multiple Device Targets\nDESCRIPTION: Example configuration in app.json showing how to specify build targets for different devices like GTR 3 PRO. Demonstrates setting up device sources and design width parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ···\n      },\n      \"platforms\": [\n        {\n          \"name\": \"gtr-3-pro\",\n          \"deviceSource\": 229\n        },\n        {\n          \"name\": \"gtr-3-prow\",\n          \"deviceSource\": 230\n        }\n      ],\n      \"designWidth\": 480\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining removeItem Method in SessionStorage API for TypeScript\nDESCRIPTION: Method signature for deleting data associated with a specific key from SessionStorage. This removes a single key-value pair from temporary storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nremoveItem(key: string): void\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT_IMG Widget in ZeppOS\nDESCRIPTION: This snippet shows how to create a TEXT_IMG widget using hmUI.createWidget(). It requires a Param object with various properties to configure the widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst textImg = hmUI.createWidget(hmUI.widget.TEXT_IMG, Param)\n```\n\n----------------------------------------\n\nTITLE: Importing Sensor Documentation Content in React/MDX\nDESCRIPTION: Imports a documentation content component from the ZeppOS API reference for the hmSensor createSensor module and renders it using MDX.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/createSensor.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSensor/createSensor.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Registering Page Function in Zepp OS Mini Program (JavaScript)\nDESCRIPTION: The Page() function is used to register a page in the Mini Program. It accepts an object parameter specifying page lifecycle callbacks and other custom functions or data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/global.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  onInit: (param) => {\n    // Initialize page data\n  },\n  build: () => {\n    // Draw UI elements\n  },\n  onDestroy: () => {\n    // Cleanup when page is destroyed\n  },\n  // Other custom functions or data\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Step Change Callback with TypeScript in ZeppOS\nDESCRIPTION: TypeScript method signature for registering a callback function that will be triggered when step count changes. The callback function receives no parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Step.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating a Rotated Image Widget in ZeppOS\nDESCRIPTION: This example shows how to create an image widget with advanced properties such as positioning, rotation, and center point. It's particularly useful for creating clock hands or other rotated elements in a watch face.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_hour = hmUI.createWidget(hmUI.widget.IMG)\n    img_hour.setProperty(hmUI.prop.MORE, {\n      x: 0,\n      y: 0,\n      w: 454,\n      h: 454,\n      pos_x: 454 / 2 - 27,\n      pos_y: 50 + 50,\n      center_x: 454 / 2,\n      center_y: 454 / 2,\n      src: 'hour.png',\n      angle: 30\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Location Status - TypeScript\nDESCRIPTION: Method signature for retrieving the positioning status. Returns 'A' for active positioning or 'V' for invalid positioning.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Geolocation.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatus(): string\n```\n\n----------------------------------------\n\nTITLE: Defining removeItem Method in SessionStorage API for TypeScript\nDESCRIPTION: Method signature for deleting data associated with a specific key from SessionStorage. This removes a single key-value pair from temporary storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nremoveItem(key: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining SysProSetInt Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript function signature for the SysProSetInt function. It takes a string key and a number value as parameters, and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Component Type in TypeScript\nDESCRIPTION: Type definition for the Slider component that takes Props object and returns a RenderFunc. This defines the basic structure and type signature of the Slider component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/slider.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining resetDropWristScreenOff Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for resetDropWristScreenOff. It returns a Result type, which is a number indicating success (0) or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/display/resetDropWristScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction resetDropWristScreenOff(): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Standing Hours in TypeScript\nDESCRIPTION: TypeScript method signature for getting the current number of hours with standing behavior from the Stand sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for setAlpha Method\nDESCRIPTION: Type declaration for the setAlpha method that sets widget opacity.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setAlpha.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Importing Date Format Settings Documentation\nDESCRIPTION: Imports a documentation component for date format settings from the Zepp OS device app API reference and renders it inline.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getDateFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getDateFormat.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing Heart Rate Sensor Documentation Module\nDESCRIPTION: Imports the content component containing heart rate sensor documentation from the reference path. Uses relative path navigation to access the HEART.mdx documentation file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/HEART.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.SysProSetChars Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the hmFS.SysProSetChars function. It takes two string parameters (key and val) and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(key: string, val: string) => result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_CLICK Widget in ZeppOS JavaScript\nDESCRIPTION: Creates a clickable image widget using hmUI.createWidget. The widget is positioned at specific coordinates with defined width and height, displays an image when clicked, and handles stress data type interactions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_CLICK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet click = hmUI.createWidget(hmUI.widget.IMG_CLICK, {\n  x: 329,\n  y: 337,\n  w: 40,\n  h: 23,\n  src: rootPath + 'click.png', // Image to be displayed when clicked.\n  type: hmUI.data_type.STRESS\n  //Must write.The action to jump.\n})\n```\n\n----------------------------------------\n\nTITLE: Get Air Pressure Method - TypeScript\nDESCRIPTION: Method to retrieve the current air pressure value in hectopascals (hPa).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetAirPressure(): number\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for setAlpha Method\nDESCRIPTION: Type declaration for the setAlpha method that sets widget opacity.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setAlpha.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Music Event Listener Registration\nDESCRIPTION: Demonstrates how to register an event listener for music state changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: setTimeout Function Type Definition in TypeScript\nDESCRIPTION: Type definition for the setTimeout function that takes a callback function and optional delay as parameters and returns a TimeoutID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/setTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction setTimeout(callback: Callback, delay?: Delay): TimeoutID\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Signature for setWakeUpRelaunch\nDESCRIPTION: Alternative TypeScript function signature for setWakeUpRelaunch that accepts a boolean parameter directly instead of an Options object for simpler usage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setWakeUpRelaunch(relaunch: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Querying RTL Layout in Zepp OS using TypeScript\nDESCRIPTION: Type definition for the getRtlLayout() function. It takes no parameters and returns a boolean result indicating whether the current system language is RTL.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getRtlLayout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Starting Vibration\nDESCRIPTION: Shows how to start the vibration using the vibrate.start() method. Must be followed by stop() after completion\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.start()\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.stat Function in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.stat function, showing that it takes a string path parameter and returns an array containing the stat object and an error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/stat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(path: string) => [stat, err]\n```\n\n----------------------------------------\n\nTITLE: Using widget.setProperty for UI Control Manipulation in JavaScript\nDESCRIPTION: Example demonstrating how to use widget.setProperty to manipulate UI controls including hiding/showing buttons, setting multiple properties at once with prop.MORE, setting custom data with prop.DATASET, and retrieving the custom data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/setProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\n// 设置 widegt 隐藏/显示\nconst button = createWidget(widget.BUTTON, Param)\nbutton.setProperty(prop.VISIBLE, false)\n\nconst text = createWidget(widget.TEXT, Param)\ntext.setProperty(prop.MORE, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 200,\n  text: 'hello',\n  color: 0x34e073,\n  align_h: align.LEFT\n})\n\ntext.setProperty(prop.DATASET, {\n  name: 'text1'\n})\n\nconst dataset = text.getProperty(prop.DATASET)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.stat Function in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.stat function, showing that it takes a string path parameter and returns an array containing the stat object and an error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/stat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(path: string) => [stat, err]\n```\n\n----------------------------------------\n\nTITLE: Importing SysProSetInt64 Documentation Content\nDESCRIPTION: React/MDX import statement to include documentation content for the SysProSetInt64 API from a relative path within the ZeppOS documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetInt64.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Version in ZeppOS app.json\nDESCRIPTION: Demonstrates how to set the configVersion property in the app.json file for a ZeppOS mini-program. This property specifies the configuration file version used for parsing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configVersion\": \"v2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining queryPermission Function Type in TypeScript\nDESCRIPTION: Type definition for the queryPermission function that checks Mini Program permission status. The function accepts an Option parameter containing an array of permission strings and returns an array of numeric status codes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/queryPermission.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction queryPermission(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Lunar Festival in TypeScript\nDESCRIPTION: TypeScript method definition for getting Chinese lunar holidays\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarFestival(): string\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.stat to Get File Information\nDESCRIPTION: JavaScript example demonstrating how to use hmFS.stat() to retrieve file information. Shows error handling and accessing the file stats like size.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/stat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [fs_stat, err] = hmFS.stat('path/to/test_file.txt')\n\nif (err == 0) {\n  console.log('--->size:', fs_stat.size)\n} else {\n  console.log('err:', err)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Heart Rate in TypeScript\nDESCRIPTION: This snippet shows the TypeScript method signature for getting the current heart rate measurement. It should be used within the onCurrentChange callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Type Definition for updateLayoutStyle() Method in TypeScript\nDESCRIPTION: Defines the type signature for the updateLayoutStyle() method, which takes a LayoutStyle object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/updateLayoutStyle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(style: LayoutStyle) => void\n```\n\n----------------------------------------\n\nTITLE: Defining widget.setAlpha Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the widget.setAlpha method. It takes a single parameter of any type and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/setAlpha.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Defining queryPermission Function Type in TypeScript\nDESCRIPTION: Type definition for the queryPermission function that checks Mini Program permission status. The function accepts an Option parameter containing an array of permission strings and returns an array of numeric status codes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/queryPermission.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction queryPermission(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.seek in TypeScript\nDESCRIPTION: TypeScript type definition showing the method signature for hmFS.seek which takes fileId, position, and whence parameters\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/seek.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, position: number, whence: number) => void\n```\n\n----------------------------------------\n\nTITLE: Creating BODY_TEMP Sensor in ZeppOS\nDESCRIPTION: Creates a new thermometer sensor instance using the hmSensor API with BODY_TEMP sensor ID. This sensor provides body temperature measurements.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst thermometer = hmSensor.createSensor(hmSensor.id.BODY_TEMP)\n```\n\n----------------------------------------\n\nTITLE: Starting Vibration in ZeppOS\nDESCRIPTION: Starts the vibration with the configured scene. After calling start(), you must call stop() when finished to enable future vibrations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.start()\n```\n\n----------------------------------------\n\nTITLE: Type Definition for music.audPrev() Method\nDESCRIPTION: Type signature for the audPrev method that switches to the previous song.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating Sleep Sensor Instance - JavaScript\nDESCRIPTION: Initializes a new Sleep sensor instance using the hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sleep = hmSensor.createSensor(hmSensor.id.SLEEP)\n```\n\n----------------------------------------\n\nTITLE: Starting Gyroscope Data Collection in ZeppOS\nDESCRIPTION: Method to start listening to gyroscope data from the device sensor. This enables the continuous monitoring of angular velocity changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Starting Gyroscope Data Collection in ZeppOS\nDESCRIPTION: Method to start listening to gyroscope data from the device sensor. This enables the continuous monitoring of angular velocity changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Defining getProperty Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition for the getProperty method, which takes a key of any type and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: any) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Last Heart Rate\nDESCRIPTION: Method to get the most recent heart rate measurement value from automatic monitoring.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetLast(): number\n```\n\n----------------------------------------\n\nTITLE: Defining getAppWidgetSize Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the getAppWidgetSize function, which takes no parameters and returns a result object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getAppWidgetSize.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Slide Switch Callback Function Type Definition\nDESCRIPTION: Type definition for the checked change callback function that handles state changes of the slide switch\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(slideSwitch: SlideSwitch, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Defining mstBuildProfile Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the mstBuildProfile function that creates a Profile connection. The function takes a ProfileObj parameter and returns a boolean Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstBuildProfile.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstBuildProfile(profile: ProfileObj): Result\n```\n\n----------------------------------------\n\nTITLE: Importing hmFS Write Documentation Content\nDESCRIPTION: Imports the write operation documentation content from the hmFS module reference section using a relative path import. The content is then re-exported as the default component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/write.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/write.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining setProperty Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setProperty method, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(propertyId: string, val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Sleep Sensor in ZeppOS\nDESCRIPTION: Creates a sleep sensor instance using hmSensor API. This is the first step to access sleep data in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sleep = hmSensor.createSensor(hmSensor.id.SLEEP)\n```\n\n----------------------------------------\n\nTITLE: Defining setAutoBrightness Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function type for setAutoBrightness. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setAutoBrightness(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Moving File Pointer with hmFS.seek in Zepp OS JavaScript\nDESCRIPTION: This code example demonstrates how to open a file with read-write access, creating it if it doesn't exist, and then position the file pointer at the beginning of the file using hmFS.seek with SEEK_SET parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/seek.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(fileId: number, position: number, whence: number) => void\n```\n\nLANGUAGE: js\nCODE:\n```\n// Open/Create a file.\nconst fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n\n//Locate the file start location.\nhmFS.seek(file, 0, hmFS.SEEK_SET)\n```\n\n----------------------------------------\n\nTITLE: Creating CHECKBOX_GROUP Widget\nDESCRIPTION: Basic syntax for creating a checkbox group and state button widget using hmUI.createWidget()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkGroup = hmUI.createWidget(hmUI.widget.CHECKBOX_GROUP, checkboxGroupParam)\nconst stateButton = hmUI.createWidget(hmUI.widget.STATE_BUTTON, stateButtonParam)\n```\n\n----------------------------------------\n\nTITLE: Defining Image Component Type in TypeScript\nDESCRIPTION: This snippet defines the type of the Image component. It takes props as an argument and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/image.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Importing STRESS Sensor Documentation in JavaScript\nDESCRIPTION: This code snippet imports the content of the STRESS sensor documentation from a specific path and renders it using JSX syntax. It utilizes a relative import statement to fetch the documentation content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/STRESS.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Weather Forecast Type Definition\nDESCRIPTION: TypeScript type definition for the getForecastWeather function return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => ForecastWeather\n```\n\n----------------------------------------\n\nTITLE: Defining unregisterGestureEvent Function Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the unregisterGestureEvent function. It takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/gestureEvent/unregisterGestureEvent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Information Type Definition\nDESCRIPTION: TypeScript interface showing the getInfo method that returns sleep information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo(): SleepInfo\n```\n\n----------------------------------------\n\nTITLE: Simplified onGesture Function Signature in TypeScript\nDESCRIPTION: This snippet presents a simplified TypeScript function signature for onGesture, which directly takes a callback function as its parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onGesture(callback: (event: GestureEvent) => PreventDefault): void\n```\n\n----------------------------------------\n\nTITLE: Defining getAllAppServices Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for getAllAppServices. It returns a Result type, which is an array of strings representing the list of running device application services.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/app-service/getAllAppServices.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAllAppServices(): Result\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SysProGetDouble API Documentation in React\nDESCRIPTION: This code snippet imports the content for the SysProGetDouble API documentation from a specific path and renders it using a custom React component. It's typically used in documentation websites to modularize and reuse content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProGetDouble.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining setAutoBrightness Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function type for setAutoBrightness. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setAutoBrightness(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining hmUI.createWidget Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript function signature for hmUI.createWidget(). It takes a widgetId of type WIDGET_ID and an optional option parameter, returning a widget of type WIDGET.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(widgetId: WIDGET_ID, option?: Option) => widget: WIDGET\n```\n\n----------------------------------------\n\nTITLE: Defining requestPermission Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the requestPermission function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/requestPermission.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction requestPermission(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization in ZeppOS app.json\nDESCRIPTION: This example demonstrates how to configure internationalization (i18n) in the app.json file. It includes translations for the app name in different languages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"i18n\": {\n    \"en-US\": {\n      \"appName\": \"······\"\n    },\n    \"en-ES\": {\n      \"appName\": \"······\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SPO2 Measurement in JavaScript\nDESCRIPTION: Initiates a single point blood oxygen measurement using the SPO2 sensor. This triggers the sensor to begin collecting blood oxygen data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nspo2.start()\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Keystroke Event Listener in JavaScript\nDESCRIPTION: Example showing how to cancel a previously registered keystroke event listener using the hmApp.unregisterKeyEvent() method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/keyEvent/unregisterKeyEvent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Unregister keystroke listener.\nhmApp.unregisterKeyEvent();\n```\n\n----------------------------------------\n\nTITLE: Declaring Sleep Information Type Interface\nDESCRIPTION: TypeScript interface definition for the updateInfo method that triggers sleep data updates.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateInfo(): void\n```\n\n----------------------------------------\n\nTITLE: Defining onDigitalCrown Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the onDigitalCrown function, which takes an Option object as a parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/interaction/onDigitalCrown.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onDigitalCrown(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining widget.setEnable() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the widget.setEnable() method. It takes a boolean parameter and returns void, indicating whether the widget should respond to gesture events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/setEnable.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(response: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Defining TextImageRow Component Type in TypeScript\nDESCRIPTION: This snippet defines the type of the TextImageRow component. It's a function that takes props as an argument and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/textimagerow.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_DATE Widget in ZeppOS JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an IMG_DATE widget in ZeppOS. It shows how to set various properties such as positioning, alignment, spacing, and image arrays for different languages. The widget allows customization of year, month, and day displays using images.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fontArray = []\nconst status = hmUI.createWidget(hmUI.widget.IMG_DATE, {\n  year_startX: 0,\n  year_startY: 0,\n  year_unit_sc: 'unit.png', // 单位\n  year_unit_tc: 'unit.png',\n  year_unit_en: 'unit.png',\n  year_align: hmUI.align.LEFT,\n  year_space: 1, // 文字间隔\n  year_zero: 1, // 是否补零\n  year_follow: 1, // 是否跟随\n  year_en_array: fontArray,\n  year_sc_array: fontArray,\n  year_tc_array: fontArray,\n  year_is_character: true // 年份此字段无效 默认为false 为true时 传入的图片为月份12张 日31张\n  // 月、日同上 需要替换前缀为 month、day\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering WEAR Sensor Documentation in React\nDESCRIPTION: This code imports documentation content for the WEAR sensor from a Markdown file and renders it using JSX syntax. It utilizes a relative import path to access the documentation file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/WEAR.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/WEAR.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.remove Function Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript type definition for the hmFS.remove function, which takes a string path parameter and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/remove.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string) => result\n```\n\n----------------------------------------\n\nTITLE: EnqueueFile Type Definition\nDESCRIPTION: Type definition for the enqueFile method of Onbox object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(fileName: string, params: object) => FileObject\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnCharaReadComplete in JavaScript\nDESCRIPTION: This example demonstrates how to import the mstOnCharaReadComplete function from the @zos/ble module. The actual usage of the function is not shown in the provided snippet.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnCharaReadComplete.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOnCharaReadComplete } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: API Version Configuration Example in JavaScript\nDESCRIPTION: Example of apiVersion configuration object that specifies compatible, target, and minimum versions for a ZeppOS Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"runtime\": {\n    \"apiVersion\": {\n      \"compatible\": \"1.0.0\",\n      \"target\": \"1.0.1\",\n      \"minVersion\": \"1.0.0\"\n    }，\n  \"type\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Sleep Time in ZeppOS\nDESCRIPTION: Shows how to retrieve the total sleep time using the getTotalTime method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst totalTime = sleep.getTotalTime()\n```\n\n----------------------------------------\n\nTITLE: Simplified Calling Method for onKey Function\nDESCRIPTION: Alternative simplified TypeScript function signature for the onKey function, allowing direct callback assignment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onKey(callback: (key: Key, event: KeyEvent) => PreventDefault): void\n```\n\n----------------------------------------\n\nTITLE: Remove Blood Oxygen Change Event Handler Type Definition\nDESCRIPTION: TypeScript type definition for offChange() method to unregister callback for measurement changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining createModal Function Type in TypeScript\nDESCRIPTION: Type definition for the createModal function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/createModal.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createModal(option: Option): Modal\n```\n\n----------------------------------------\n\nTITLE: Defining onWristMotion Function Type in TypeScript\nDESCRIPTION: TypeScript definition of the onWristMotion function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onWristMotion.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onWristMotion(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnServiceChangeBegin from Zepp OS BLE Module\nDESCRIPTION: Example showing how to import the mstOnServiceChangeBegin function from the Zepp OS BLE module to register a service change callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnServiceChangeBegin.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOnServiceChangeBegin } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for getSleepTarget in ZeppOS\nDESCRIPTION: Type definition for the getSleepTarget function which returns the user's sleep target in minutes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getSleepTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSleepTarget(): Result\n```\n\n----------------------------------------\n\nTITLE: Declaring getTimeFormat Method Type Signature in TypeScript\nDESCRIPTION: The TypeScript type declaration for hmSetting.getTimeFormat() method, which takes no parameters and returns a numeric result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getTimeFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.open() Function Type in TypeScript\nDESCRIPTION: Specifies the type signature for the hmFS.open() function, including its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/open.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.open() Function Type in TypeScript\nDESCRIPTION: Specifies the type signature for the hmFS.open() function, including its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/open.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Creating Sensors with createSensor Function in TypeScript\nDESCRIPTION: Function signature for creating sensor instances in ZeppOS. It takes a sensor ID constant as input and returns a reference to the specific sensor instance. Various sensor types include time, battery, and others defined in the sensor directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/createSensor.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(sensor_id: SENSOR_ID) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Vibrator Configuration Method\nDESCRIPTION: TypeScript interface for getConfig which returns the current vibration configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Vibrator.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetConfig(): Option\n```\n\n----------------------------------------\n\nTITLE: Creating Sensors with createSensor Function in TypeScript\nDESCRIPTION: Function signature for creating sensor instances in ZeppOS. It takes a sensor ID constant as input and returns a reference to the specific sensor instance. Various sensor types include time, battery, and others defined in the sensor directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/createSensor.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(sensor_id: SENSOR_ID) => result\n```\n\n----------------------------------------\n\nTITLE: Starting Blood Oxygen Measurement Type Definition\nDESCRIPTION: TypeScript type definition for start() method to initiate blood oxygen measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Importing Weather Sensor Documentation in MDX\nDESCRIPTION: Imports weather sensor documentation content from a reference path and renders it using MDX syntax. The import statement references a specific documentation file for weather sensor functionality within the ZeppOS API documentation structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/WEATHER.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing Weather Sensor Documentation in MDX\nDESCRIPTION: Imports weather sensor documentation content from a reference path and renders it using MDX syntax. The import statement references a specific documentation file for weather sensor functionality within the ZeppOS API documentation structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/WEATHER.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using getAllAppServices to List Running Services\nDESCRIPTION: Example showing how to import and use the getAllAppServices function to retrieve a list of currently running App services and log them to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-service/getAllAppServices.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllAppServices } from '@zos/app-service'\n\nconst serviceList = getAllAppServices()\nconsole.log(serviceList)\n```\n\n----------------------------------------\n\nTITLE: Starting Blood Oxygen Measurement Type Definition\nDESCRIPTION: TypeScript type definition for start() method to initiate blood oxygen measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Defining showToast Function Type in TypeScript\nDESCRIPTION: This code snippet defines the type of the showToast function in TypeScript. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/showToast.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction showToast(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.open() Function Type in TypeScript\nDESCRIPTION: Specifies the type signature for the hmFS.open() function, including its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/open.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Importing App Service Start Function\nDESCRIPTION: Example showing how to import the start function from the ZeppOS app service module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-service/start.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { start } from '@zos/app-service'\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getTemperatureUnit Function\nDESCRIPTION: TypeScript type definition showing the function signature that returns a numeric Result type representing temperature unit.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getTemperatureUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTemperatureUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Language Serial Number in Zepp OS using TypeScript\nDESCRIPTION: Type signature for the hmSetting.getLanguage() function. It takes no parameters and returns a result of type number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getLanguage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Defining getItem Method for Settings Storage in TypeScript\nDESCRIPTION: Defines the type signature for the getItem method, which retrieves a value from the settings storage by its key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result: string | undefined\n```\n\n----------------------------------------\n\nTITLE: Registering SPO2 Sensor Event Listener in JavaScript\nDESCRIPTION: Adds an event listener to the SPO2 sensor for handling changes in measurements. The event type is specified by hmSensor.event.CHANGE.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: File Opening Function Type Definition in TypeScript\nDESCRIPTION: Type definition for hmFS.open_asset function that opens files in the application assets directory. Takes a file path and access flag as parameters and returns a numeric file handle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/open_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Registering SPO2 Sensor Event Callback in Zepp OS\nDESCRIPTION: Registers a callback function for sensor events. This example shows the syntax for adding an event listener to a sensor instance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Simplified ScrollTo Function Type in TypeScript\nDESCRIPTION: Alternative TypeScript type definition for scrollTo function that directly accepts a y-coordinate number parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/scrollTo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollTo(y: number): void\n```\n\n----------------------------------------\n\nTITLE: Defining setWakeUpRelaunch Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for setWakeUpRelaunch. It takes an Option parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setWakeUpRelaunch(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n for Workout Extension\nDESCRIPTION: Example showing how to configure internationalization (i18n) for Workout Extension widgets. Demonstrates localization configuration for multiple languages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/workout-extension/quick-start.mdx#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"i18n\": {\n  \"ar-EG\": {\n    \"data-widget\": {\n      \"widgets\": [\n        {\n          \"name\": \"Running Pace Master\"\n        }\n      ]\n    }\n  },\n  \"ca-ES\": {\n    \"data-widget\": {\n      \"widgets\": [\n        {\n          \"name\": \"Running Pace Master\"\n        }\n      ]\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing setBrightScreen Documentation in React\nDESCRIPTION: This code snippet imports the content for the setBrightScreen function documentation from a specific path and renders it using a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/setBrightScreen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/setBrightScreen.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating STAND Sensor Instance\nDESCRIPTION: Demonstrates how to create a STAND sensor instance and access its current value\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst stand = hmSensor.createSensor(hmSensor.id.STAND)\n\nconsole.log(stand.current)\n```\n\n----------------------------------------\n\nTITLE: STRESS Sensor Callback Event Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the callback function used with STRESS sensor events. The callback function takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining setWakeUpRelaunch Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for setWakeUpRelaunch. It takes an Option parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setWakeUpRelaunch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setWakeUpRelaunch(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Using checkSystemApp Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the checkSystemApp function in JavaScript. It imports the necessary functions and constants from the @zos/router module and calls checkSystemApp with the SYSTEM_APP_STATUS constant.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/checkSystemApp.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { checkSystemApp, SYSTEM_APP_STATUS } from '@zos/router'\n\ncheckSystemApp({\n  appId: SYSTEM_APP_STATUS,\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for App Service Start Function\nDESCRIPTION: TypeScript type definition showing the function signature for starting an app service.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-service/start.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction start(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Forecast Weather Data in ZeppOS\nDESCRIPTION: Shows the type definition for the getForecastWeather method, which returns forecast weather data including city name, forecast data, and tide data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => ForecastWeather\n```\n\n----------------------------------------\n\nTITLE: STAND Sensor Event Handling Example\nDESCRIPTION: Complete example showing how to implement event handling for the STAND sensor, including logging current and target values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstand.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('the current stand: ' + stand.current + ' target: ' + stand.target + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Log Instance Type\nDESCRIPTION: TypeScript type definition for the getLogger method that returns a new log instance with a specified name tag.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetLogger(name: string): log\n```\n\n----------------------------------------\n\nTITLE: CHANGE Event Callback Type Definition\nDESCRIPTION: TypeScript type definition for the callback function used with the CALORIE sensor's CHANGE event. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Importing hmSetting.getWeightUnit Documentation in React\nDESCRIPTION: This code imports the documentation content for the hmSetting.getWeightUnit API from a specific path and renders it using a React component pattern.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getWeightUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getWeightUnit.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Registering Stand Sensor Event Callback\nDESCRIPTION: Shows how to register an event listener for the Stand sensor\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: CHANGE Event Callback Type Definition\nDESCRIPTION: TypeScript type definition for the callback function used with the CALORIE sensor's CHANGE event. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Using setLaunchAppTimeout in JavaScript\nDESCRIPTION: Example demonstrating how to use setLaunchAppTimeout to schedule a Mini Program launch and clear the timeout. Shows importing the necessary functions, setting a timeout with delay parameter, and cleaning up the timeout.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/setLaunchAppTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLaunchAppTimeout, clearLaunchAppTimeout } from '@zos/router'\n\nconst timeoutId = setLaunchAppTimeout({\n  url: 'pages/js_widget_sample',\n  appId: 1000001,\n  delay: 1000,\n})\n\nclearLaunchAppTimeout({\n  timeoutId,\n})\n```\n\n----------------------------------------\n\nTITLE: Simplified calling method for clearLaunchAppTimeout in TypeScript\nDESCRIPTION: A simplified TypeScript function signature that allows calling clearLaunchAppTimeout directly with a timeoutId number parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clearLaunchAppTimeout(timeoutId: number): void\n```\n\n----------------------------------------\n\nTITLE: Defining the 'replace' Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for the 'replace' function. It specifies that the function takes an 'Option' object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/router/replace.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction replace(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining Weather Forecast Data Types in TypeScript\nDESCRIPTION: TypeScript interface definitions for the ForecastWeather, ForecastData, ForecastDataItem, and related types returned by the getForecastWeather method. These types describe the structure of weather forecast data including temperature, weather conditions, and tide information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Weather.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetForecastWeather(): ForecastWeather\n```\n\n----------------------------------------\n\nTITLE: Defining getDiskInfo Function Type in TypeScript\nDESCRIPTION: Specifies the TypeScript type definition for the getDiskInfo function, which returns a diskInfo object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getDiskInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => diskInfo\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Signature in TypeScript\nDESCRIPTION: An alternative simplified TypeScript function signature for checkSystemApp that accepts just the appId parameter instead of an options object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/router/checkSystemApp.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction checkSystemApp(appId: number): void\n```\n\n----------------------------------------\n\nTITLE: Defining addListener Method for BLE Connection Status Updates in TypeScript\nDESCRIPTION: TypeScript definition for the addListener method, which registers a callback to receive BLE connection status updates. The callback receives a boolean parameter indicating the connection status.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmBle.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(callback: (status: boolean) => void) => void\n```\n\n----------------------------------------\n\nTITLE: World Clock Initialization Method Type Definition\nDESCRIPTION: Type definition for the init method of the world_clock instance, which initializes world clock data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Language Code Reference Mapping\nDESCRIPTION: A reference table mapping numeric values (0-33) to language codes and their full language/country descriptions. Used in conjunction with @zos/settings getLanguage API and the i18n field in app.json configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/related-resources/language-list.mdx#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Value | Code Abbreviation | Language / Country                  |\n| ----- | ----------------- | ----------------------------------- |\n| 0     | zh-CN             | Simplified Chinese                  |\n| 1     | zh-TW             | Traditional Chinese (Taiwan, China) |\n| 2     | en-US             | English (USA)                       |\n| 3     | es-ES             | Spanish (Spain)                     |\n| 4     | ru-RU             | Russian (Russia)                    |\n| 5     | ko-KR             | Korean (Korea)                      |\n| 6     | fr-FR             | French (France)                     |\n| 7     | de-DE             | German (Germany)                    |\n| 8     | id-ID             | Indonesian                          |\n| 9     | pl-PL             | Polish (Poland)                     |\n| 10    | it-IT             | Italian (Italy)                     |\n| 11    | ja-JP             | Japanese (Japan)                    |\n| 12    | th-TH             | Thai                                |\n| 13    | ar-EG             | Arabic (Egypt)                      |\n| 14    | vi-VN             | Vietnamese                          |\n| 15    | pt-PT             | Portuguese (Portugal)               |\n| 16    | nl-NL             | Dutch                               |\n| 17    | tr-TR             | Turkish (Turkey)                    |\n| 18    | uk-UA             | Ukrainian                           |\n| 19    | iw-IL             | Hebrew (Israel)                     |\n| 20    | pt-BR             | Portuguese (Brazil)                 |\n| 21    | ro-RO             | Romanian                            |\n| 22    | cs-CZ             | Czech                               |\n| 23    | el-GR             | Greek                               |\n| 24    | sr-RS             | Serbian (Latin)                     |\n| 25    | ca-ES             | Catalan                            |\n| 26    | fi-FI             | Finnish                            |\n| 27    | nb-NO             | Norwegian                           |\n| 28    | da-DK             | Danish                             |\n| 29    | sv-SE             | Swedish                            |\n| 30    | hu-HU             | Hungarian                           |\n| 31    | ms-MY             | Malay                              |\n| 32    | sk-SK             | Slovakian                          |\n| 33    | hi-IN             | Hindi                              |\n```\n\n----------------------------------------\n\nTITLE: Creating a New Zepp OS Project\nDESCRIPTION: Command to create a new project named 'hello-world' using the Zeus CLI create command.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/cli/index.md#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzeus create hello-world\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Click Event Reception with setEnable Method in ZeppOS\nDESCRIPTION: Shows how to dynamically enable or disable a widget's ability to receive click events using the setEnable method. This allows toggling interaction capability at runtime.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setEnable(true);//设置控件可点击\n```\n\n----------------------------------------\n\nTITLE: Creating CALORIE Sensor in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a CALORIE sensor instance using the hmSensor API in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calorie = hmSensor.createSensor(hmSensor.id.CALORIE)\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Fat Burning Sensor\nDESCRIPTION: Demonstrates how to register a callback function for sensor change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfatburn.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Defining clearLaunchAppTimeout Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature of the clearLaunchAppTimeout function. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction clearLaunchAppTimeout(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for updateLayout() Function in TypeScript\nDESCRIPTION: The type definition for the updateLayout() function, showing it takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/updateLayout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Body Temperature in TypeScript\nDESCRIPTION: This snippet demonstrates the type definition for the getCurrent() method of the BodyTemperature class. It returns a Result object containing the current temperature measurement and the time interval since the last measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/BodyTemperature.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Custom Edit Type Configuration\nDESCRIPTION: Demonstrates how to configure custom edit types with multilingual titles and preview images. Useful when firmware doesn't support required edit types.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst optional_types = [\n  {\n    type: 100001,\n    preview: rootPath + 'preview/bat.png',\n    title_sc: '标题',\n    title_tc: '标题',\n    title_en: 'title'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining getProperty Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getProperty method, specifying the function signature with a single 'any' type parameter and a result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(key: any) => result\n```\n\n----------------------------------------\n\nTITLE: Defining getProperty Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getProperty method, specifying the function signature with a single 'any' type parameter and a result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(key: any) => result\n```\n\n----------------------------------------\n\nTITLE: Migrating i18n Module from ZeppOS 1.0 to 2.0\nDESCRIPTION: Example of migrating internationalization functions from ZeppOS 1.0 to 2.0. The 'gettext' function is replaced with 'getText' from the '@zos/i18n' module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { gettext } from 'i18n'\n\ngettext('i18n_key')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getText } from '@zos/i18n'\n\ngetText('i18n_key')\n```\n\n----------------------------------------\n\nTITLE: Multi-Device Asset Directory Structure in Zepp OS\nDESCRIPTION: This snippet demonstrates the expanded directory structure when supporting multiple device models in a Zepp OS Mini Program. Each device has its own asset folder with device-specific resources.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app.js\n├── app.json\n├── assets\n│   ├── gtr-3\n│   │   ├── icon.png\n│   │   └── image\n│   │       └── logo.png\n│   └── gtr-3-pro\n│       ├── icon.png\n│       └── image\n│           └── logo.png\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distance Unit Setting in Zepp OS (TypeScript)\nDESCRIPTION: Function signature for hmSetting.getMileageUnit(). Returns a number indicating the current distance unit setting: 0 for metric, 1 for imperial, and other values are invalid.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getMileageUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Registering CALORIE Sensor Event Listener in JavaScript\nDESCRIPTION: This code shows how to register an event listener for the CALORIE sensor. It listens for the CHANGE event and logs the current calorie consumption and target when a change occurs.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current calorie is ' + calorie.current + '\\r\\n')\n  console.log('The calorie target is ' + calorie.target + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Event Callback Type Definition\nDESCRIPTION: TypeScript type definition for the sensor event callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining openAssetsSync Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for openAssetsSync, including its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/openAssetsSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction openAssetsSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Widget Tree Manipulation in ZeppOS\nDESCRIPTION: Methods for dynamically managing widget hierarchy in ZeppOS applications through addLayoutChild and removeLayoutChild functions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\naddLayoutChild(widget)\nremoveLayoutChild(widget)\n```\n\n----------------------------------------\n\nTITLE: Defining offDigitalCrown Function Type in TypeScript\nDESCRIPTION: Type definition for the offDigitalCrown function, which takes no parameters and returns void. This function is used to unregister the digital crown rotation event listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/offDigitalCrown.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction offDigitalCrown(): void\n```\n\n----------------------------------------\n\nTITLE: Event Callback Type Definition\nDESCRIPTION: TypeScript type definition for the sensor event callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: TextInput Component Type Definition in TypeScript\nDESCRIPTION: Defines the function signature for the TextInput component, which takes Props as parameter and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/textinput.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Using getCurrentPage in a Zepp OS Page\nDESCRIPTION: Example of how to use getCurrentPage to access the current page instance and its state in Zepp OS. It demonstrates defining a Page with state and lifecycle methods, and then accessing the page's state using getCurrentPage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/global/getCurrentPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n\nconst page = getCurrentPage()\nconsole.log(page._options.state.text)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering BLE API Documentation in React\nDESCRIPTION: This code imports the content of the hmBle.mdx file and renders it using a React component. It's likely part of a documentation system that modularizes API reference content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmBle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../reference/device-app-api/hmBle.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering BLE API Documentation in React\nDESCRIPTION: This code imports the content of the hmBle.mdx file and renders it using a React component. It's likely part of a documentation system that modularizes API reference content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmBle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../reference/device-app-api/hmBle.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Heart Rate LAST Event Example\nDESCRIPTION: Shows how to register and unregister a listener for the LAST heart rate event, including cleanup in the onDestroy lifecycle method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst hrLastListener = function () {\n  console.log(heart.last)\n}\n\nheart.addEventListener(heart.event.LAST, hrLastListener)\n\n// ...\n// Destroy function\nonDestroy() {\n  heart.removeEventListener(heart.event.LAST, hrLastListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language in ZeppOS app.json\nDESCRIPTION: This snippet shows how to set the default language for a ZeppOS application in the app.json file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"defaultLanguage\": \"zh-cn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified onKey Function Signature in TypeScript\nDESCRIPTION: Alternative simplified TypeScript function signature for the onKey method that directly accepts a callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction onKey(callback: (key: Key, event: KeyEvent) => PreventDefault): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering setBrightScreen API Documentation in React\nDESCRIPTION: This code imports the content for the setBrightScreen API documentation from a specific path and renders it using a React component. It's likely part of a larger documentation system for Zepp OS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/setBrightScreen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/setBrightScreen.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating FAT_BURRING Sensor in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a FAT_BURRING sensor and access its current and target values. It uses the hmSensor.createSensor method with the FAT_BURRING sensor ID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fatburn = hmSensor.createSensor(hmSensor.id.FAT_BURRING)\n\nconsole.log(fatburn.current)\nconsole.log(fatburn.target)\n```\n\n----------------------------------------\n\nTITLE: Callback Function Type Definition for SPO2 Sensor Events\nDESCRIPTION: TypeScript type definition for the callback function used with SPO2 sensor events. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for requestPermission API in TypeScript\nDESCRIPTION: TypeScript function signature for the requestPermission API, showing the function takes an Option parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/app/requestPermission.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction requestPermission(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining Text Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the Text component. It takes props and optional render functions as arguments and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/text.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining setScrollLock Function Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the setScrollLock function in TypeScript. It specifies that the function takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/page/setScrollLock.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setScrollLock(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Callback Function Type Definition for Heart Rate Sensor Events in TypeScript\nDESCRIPTION: This snippet defines the type of the callback function used in heart rate sensor event listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Example API_LEVEL Comparison\nDESCRIPTION: Shows the ordering of API_LEVEL versions from highest to lowest, demonstrating the version comparison rules.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/compatibility.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"3.1\" > \"3.0\" > \"2.98\" > \"2.1\" > \"2.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n in ZeppOS app.json\nDESCRIPTION: Example of i18n configuration for multilingual support. This allows specifying translations for different language codes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"i18n\": {\n    \"en-US\": {\n      \"appName\": \"······\"\n    },\n    \"en-ES\": {\n      \"appName\": \"······\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching the Zepp OS Simulator on macOS\nDESCRIPTION: Command to launch the Zepp OS simulator on macOS with sudo privileges. The simulator requires sudo access to use the virtual network interface.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/quick-start.mdx#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd /Applications/simulator.app/Contents/MacOS && sudo -s ./simulator\n```\n\n----------------------------------------\n\nTITLE: AppSettingsPage Constructor TypeScript Interface\nDESCRIPTION: TypeScript interface defining the structure of the AppSettingsPage constructor, including Props and Option interfaces. It shows the expected types for the build function and settingsStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/app-settings/register.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  settingsStorage: SettingsStorage\n}\n\ninterface Option {\n  build: (props: Props) => RenderFunc\n}\n\ninterface AppSettingsPage {\n  (option: Option): void\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering HmSetting.getLanguage() Documentation in React\nDESCRIPTION: This code snippet imports the content of the getLanguage.mdx file from the hmSetting module documentation and renders it using a React component. This approach is commonly used in documentation websites to modularize and reuse content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getLanguage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getLanguage.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Registering Callback Event for FAT_BURRING Sensor in JavaScript\nDESCRIPTION: This snippet shows how to register a callback event for the FAT_BURRING sensor. It uses the addEventListener method to listen for the CHANGE event and logs the current and target values when the event is triggered.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfatburn.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('the current fatburn: ' + fatburn.current + ' target: ' + fatburn.target + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getProfile Function\nDESCRIPTION: TypeScript type definition for the getProfile function that returns user profile information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/user/getProfile.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getProfile(): Result\n```\n\n----------------------------------------\n\nTITLE: AppSettingsPage Constructor TypeScript Interface\nDESCRIPTION: TypeScript interface defining the structure of the AppSettingsPage constructor, including Props and Option interfaces. It shows the expected types for the build function and settingsStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/app-settings/register.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  settingsStorage: SettingsStorage\n}\n\ninterface Option {\n  build: (props: Props) => RenderFunc\n}\n\ninterface AppSettingsPage {\n  (option: Option): void\n}\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetInt64 to Store and Retrieve Values\nDESCRIPTION: JavaScript example demonstrating how to store a 64-bit integer using SysProSetInt64 and retrieve it using SysProGetInt64.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt64('js_test_int64', 200)\nconsole.log(hmFS.SysProGetInt64('js_test_int64'))\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getProfile Function\nDESCRIPTION: TypeScript type definition for the getProfile function that returns user profile information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/user/getProfile.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getProfile(): Result\n```\n\n----------------------------------------\n\nTITLE: Sleep getTotalTime Method Type Definition\nDESCRIPTION: Type definition for the method that retrieves total sleep time. Returns the total sleep time as a number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n() => number\n```\n\n----------------------------------------\n\nTITLE: View Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the View container component. It takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/view.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Creating an Editable Widget Group in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an editable widget group for a watchface. It includes setting up the group, handling different data types, and adding masks for the edit mode.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst groupX = 153\nconst groupY = 246\n\neditGroup = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_GROUP, {\n  edit_id: 101,\n  x: groupX,\n  y: groupY,\n  w: 148,\n  h: 148,\n  select_image: rootPath + 'mask/select.png',\n  un_select_image: rootPath + 'mask/select.png',\n  default_type: hmUI.edit_type.HEART,\n  optional_types: [{ type: hmUI.edit_type.HEART, preview: rootPath + 'preview/bat.png' }],\n  count: 1,\n  tips_BG: rootPath + 'mask/text_tag.png',\n  tips_x: 172 - groupX,\n  tips_y: 210 - groupY,\n  tips_width: 110,\n  tips_margin: 10 // optional, default value: 0\n})\nconst editType = editGroup.getProperty(hmUI.prop.CURRENT_TYPE)\nswitch (editType) {\n  case hmUI.data_type.HEART:\n    this.drawHeartWidget(groupX, groupY)\n    break\n  case hmUI.data_type.BATTERY:\n    break\n}\n//100%mask\nmaskCover = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_MASK, {\n  x: 0,\n  y: 0,\n  w: 454,\n  h: 454,\n  src: rootPath + 'mask/mask100.png',\n  show_level: hmUI.show_level.ONLY_EDIT\n})\n//70%msk\nmask = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_FG_MASK, {\n  x: 0,\n  y: 0,\n  w: 454,\n  h: 454,\n  src: rootPath + 'mask/mask70.png',\n  show_level: hmUI.show_level.ONLY_EDIT\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.seek Method\nDESCRIPTION: TypeScript type definition showing the method signature for the hmFS.seek function which takes file ID, position offset, and whence parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/seek.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, position: number, whence: number) => void\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering hmFS.remove API Documentation in React\nDESCRIPTION: This code imports a content component for the hmFS.remove API documentation and renders it within the current component. It uses ES6 import syntax and JSX for rendering.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/remove.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/remove.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating Music Sensor\nDESCRIPTION: Initialize the music sensor instance to control playback functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = hmSensor.createSensor(hmSensor.id.MUSIC)\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js via NVM\nDESCRIPTION: Commands to install Node Version Manager (NVM), install Node.js v20, and verify the installation of Node.js and NPM.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/environment.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# installs nvm (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n\n# download and install Node.js (you may need to restart the terminal)\nnvm install 20\n\n# verifies the right Node.js version is in the environment\nnode -v # should print `v20.15.0`\n\n# verifies the right NPM version is in the environment\nnpm -v # should print `10.7.0`\n```\n\n----------------------------------------\n\nTITLE: Launching Simulator on MacOS\nDESCRIPTION: Command to start the simulator with sudo privileges on MacOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/simulator/setup.md#2025-04-07_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd /Applications/simulator.app/Contents/MacOS && sudo -s ./simulator\n```\n\n----------------------------------------\n\nTITLE: Type Definition for createConnect Method in TypeScript\nDESCRIPTION: TypeScript type definition for the createConnect method which accepts a callback function to handle incoming data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmBle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(callback: (index: number, data: object, size: number) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Music Sensor\nDESCRIPTION: Initialize the music sensor instance to control playback functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = hmSensor.createSensor(hmSensor.id.MUSIC)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.seek Method\nDESCRIPTION: TypeScript type definition showing the method signature for the hmFS.seek function which takes file ID, position offset, and whence parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/seek.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, position: number, whence: number) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring appId in app.json for Zepp OS Application\nDESCRIPTION: This JSON snippet shows how to configure the appId of a registered application in the app.json file during application development. The appId is a unique identifier assigned during app registration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/workout-extension/distribute.mdx#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"appId\": appId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IMG_WEEK Widget in ZeppOS with hmUI\nDESCRIPTION: This code creates an IMG_WEEK widget that displays the current day of the week as an image. The widget is positioned at coordinates (175, 113) and uses the provided weekArray for displaying week days in different languages (English, Traditional Chinese, and Simplified Chinese).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_WEEK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhmUI.createWidget(hmUI.widget.IMG_WEEK, {\n  x: 175,\n  y: 113,\n  // w,h cannot be set, use the actual width and height of the image in the weekArray.\n  week_en: weekArray,\n  week_tc: weekArray,\n  week_sc: weekArray\n})\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.stat_asset Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for hmFS.stat_asset, showing that it takes a string path parameter and returns an array containing stat information and an error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/stat_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string) => [stat, err]\n```\n\n----------------------------------------\n\nTITLE: Accessing Sleep Stage Model in ZeppOS\nDESCRIPTION: Demonstrates how to access different sleep stages from the sleep stage model.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst modelData = sleep.getSleepStageModel()\nconsole.log(modelData.WAKE_STAGE)\nconsole.log(modelData.REM_STAGE)\nconsole.log(modelData.LIGHT_STAGE)\nconsole.log(modelData.DEEP_STAGE)\n```\n\n----------------------------------------\n\nTITLE: Defining SysProSetInt Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript function signature for the SysProSetInt method. It takes a string key and a number value as parameters, and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Simplified rmSync Function Signature in TypeScript\nDESCRIPTION: Provides a simplified TypeScript function signature for rmSync, which takes a string path as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/rmSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rmSync(path: string): Result\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation\nDESCRIPTION: Command to verify successful Node.js installation by checking the version.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/environment.mdx#2025-04-07_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Using Zeus Bridge Command in CLI for Zepp OS Development\nDESCRIPTION: Command to enter Developer Bridge Mode in Zepp CLI. This command should be executed in the project root directory to establish a connection with runtime environments like the Zepp OS Simulator or Zepp APP.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzeus bridge\n```\n\n----------------------------------------\n\nTITLE: Using Zeus Bridge Command in CLI for Zepp OS Development\nDESCRIPTION: Command to enter Developer Bridge Mode in Zepp CLI. This command should be executed in the project root directory to establish a connection with runtime environments like the Zepp OS Simulator or Zepp APP.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzeus bridge\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetDouble in JavaScript\nDESCRIPTION: Example showing how to store and retrieve a double-precision floating point number using SysProSetDouble and SysProGetDouble methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetDouble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetDouble('js_test_double', 3.14)\nconsole.log(hmFS.SysProGetDouble('js_test_double'))\n```\n\n----------------------------------------\n\nTITLE: Creating World Clock Sensor in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a WORLD_CLOCK sensor instance using the hmSensor.createSensor method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst world_clock = hmSensor.createSensor(hmSensor.id.WORLD_CLOCK)\n```\n\n----------------------------------------\n\nTITLE: Defining rmSync Function Signature in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for rmSync, which takes an Option object as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/rmSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rmSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Adding System Event Permissions in app.json for Zepp OS v3\nDESCRIPTION: JSON configuration demonstrating how to add permissions for listening to specific System Events, such as the sunset event, in the app.json file of a Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/system-event.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"event:os.weather.sun_rise\"],\n  \"module\": {\n    \"app-service\": {\n      \"services\": [\"app-service/demo_service\"]\n    },\n    \"app-event\": {\n      \"path\": \"app-service/demo_service\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT Widget in ZeppOS\nDESCRIPTION: Basic initialization of a TEXT widget using hmUI.createWidget(). Shows how to create a text component with basic properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = hmUI.createWidget(hmUI.widget.TEXT, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signature for SysProGetDouble in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.SysProGetDouble function. It takes a string key as input and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Minutes in TypeScript\nDESCRIPTION: TypeScript method definition for getting current minutes\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetMinutes(): number\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering PAI Sensor Documentation in JavaScript/JSX\nDESCRIPTION: This snippet imports the content for the PAI sensor documentation from a specific file path and renders it using JSX syntax. It demonstrates how modular documentation is structured and displayed in the Zepp OS documentation project.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/PAI.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/PAI.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Updating TEXT_IMG Widget Text in ZeppOS\nDESCRIPTION: This snippet demonstrates how to update the text of a TEXT_IMG widget after creation using the setProperty method. It allows dynamic text changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/TEXT_IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = hmUI.createWidget(hmUI.widget.TEXT_IMG, Param)\nconst text = '12' //If you want to not display the data write \"\" directly.\nwidget.setProperty(hmUI.prop.TEXT, text)\n```\n\n----------------------------------------\n\nTITLE: BATTERY Sensor Event Callback Type Definition in TypeScript\nDESCRIPTION: Defines the type for the callback function used in BATTERY sensor event listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Counting Event Listeners in TypeScript\nDESCRIPTION: Gets the number of registered event listeners for a specific event name, or the number of registered event name types if no event name is provided.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncount(eventName?: string): number\n```\n\n----------------------------------------\n\nTITLE: Defining SysProGetBool Method Signature in TypeScript\nDESCRIPTION: TypeScript definition of the hmFS.SysProGetBool method that retrieves a boolean value from temporary system storage using a key string parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageBuilder and Establishing Connection in Side Service\nDESCRIPTION: This code demonstrates how to import MessageBuilder, create an instance, and establish a connection in the Side Service. It sets up a listener for incoming messages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message-side'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    // establish connection\n    messageBuilder.listen(() => {})\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Logging BODY_TEMP Sensor Data in ZeppOS\nDESCRIPTION: This code example shows how to log the current temperature and time interval from the BODY_TEMP sensor. It accesses the 'current' and 'timeinterval' properties of the thermometer object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  'the current temp: ' + thermometer.current + ' interval:' + thermometer.timeinterval + '\\r\\n'\n)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for writeFileSync Function\nDESCRIPTION: Type definition for the writeFileSync function, showing its signature and parameter structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction writeFileSync(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Key Type Naming Convention in JavaScript\nDESCRIPTION: This snippet demonstrates the format for defining watch keyType values. The format includes information about button mode, number of buttons, and whether the watch has a crown (1 for yes, 0 for no).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/designs/interaction/definition.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{按键模式}_{按键数量} // {是否有表冠，1代表有，0没有}\n```\n\n----------------------------------------\n\nTITLE: Page Scrolling Implementation in Zepp OS 2.0\nDESCRIPTION: Shows how to use the scrollTo function from @zos/page module with both object parameter and simplified call syntax.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/new-api.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollTo } from '@zos/page'\n\nscrollTo({\n  y: 200\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for SysProGetInt in TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature for SysProGetInt, which takes a string key and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Lunar Calendar in TypeScript\nDESCRIPTION: TypeScript method definition for getting Chinese lunar calendar information\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarMonthCalendar(): LunarMonthCalendar\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnCharaWriteComplete in JavaScript\nDESCRIPTION: This example demonstrates how to import the mstOnCharaWriteComplete function from the @zos/ble module. It's a basic usage example without implementation details.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnCharaWriteComplete.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { mstOnCharaWriteComplete } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Structure for GTR-3 Pro\nDESCRIPTION: Shows the folder structure for a Mini Program including app files and assets organization for GTR-3 Pro device.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app.js\n├── app.json\n├── assets\n│   ├── gtr-3-pro\n│   │   ├── icon.png\n│   │   └── image\n│   │       └── logo.png\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Project to Runtime Environment in Zepp CLI Bridge Mode\nDESCRIPTION: Command to build the current project and install it to the connected runtime environment when in Developer Bridge mode. This can be used after successfully connecting to a device or simulator.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninstall\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener - TypeScript\nDESCRIPTION: Method signature for registering an event listener. The listener function is added to the end of the listeners array for the specified event name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\non(eventName: string, listener: (...args: any[]) => void): void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for music.audPause() Method\nDESCRIPTION: Type signature for the audPause method that pauses music playback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: ItemClickFunc Type Definition\nDESCRIPTION: TypeScript type definition for the item click callback function. Shows the expected parameters and their types.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(cycleList: CycleList, index: number) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Page Types and Priorities in Markdown Table\nDESCRIPTION: This markdown table defines different page types in Zepp OS, their priority levels, and provides typical examples for each type. It includes permanent pages, various floating layer types, and basic pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/designs/structure/page-types.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Page type**                                                | **Priority** | **Typical page example**                                     |\n| ------------------------------------------------------------ | ------------ | ------------------------------------------------------------ |\n| Permanent                                                    | P0           | Watch face synchronization                                   |\n| Floating layer - important reminders<br/>Floating layer - normal pop-up windows<br/>Floating layer - message reminders<br/>Floating layer - short reminders | P1           | Floating layer - important reminders: Alarm clock reminders <br/>Floating layer - normal pop-up windows: Battery life warnings<br/>Floating layer - message reminders: Goal reached reminders and notifications<br/>Floating layer - short reminders: WeChat, Alipay successfully enabled, Watchface synchronized successfully |\n| Basic<br/>Watch faces<br/>Basic - In Progress status                 | P2           | Basic: Weather<br/>Watchface: Watch face, quick access apps<br/>Basic - In Progress status: Timer in use |\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization in ZeppOS app.json\nDESCRIPTION: Sets up multilingual support through the i18n object, with language codes as keys and translations as values. This allows the application to be displayed in different languages based on user settings.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"i18n\": {\n    \"en-US\": {\n      \"appName\": \"······\"\n    },\n    \"en-ES\": {\n      \"appName\": \"······\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying SysProGetDouble API Documentation in React\nDESCRIPTION: This JSX snippet imports documentation content from a specific path and renders it in the current component. It uses a standard React import statement to fetch the content from a markdown file and then renders it using a self-closing Content component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProGetDouble.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Getting Chinese Lunar Month in TypeScript\nDESCRIPTION: Retrieves the Chinese lunar month using the Time sensor. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarMonth(): number\n```\n\n----------------------------------------\n\nTITLE: Defining rmSync Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the rmSync function, showing the Option parameter type and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/rmSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rmSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Creating Music Sensor Instance\nDESCRIPTION: Initializes a new music sensor instance using hmSensor.createSensor() method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = hmSensor.createSensor(hmSensor.id.MUSIC)\n```\n\n----------------------------------------\n\nTITLE: Importing Device Polyfill in App.js\nDESCRIPTION: Imports the device-polyfill module to provide required methods that aren't available in the host environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './shared/device-polyfill'\n```\n\n----------------------------------------\n\nTITLE: Using Zeus Bridge Command in CLI\nDESCRIPTION: Command for entering Developer Bridge Mode in Zepp CLI from the project root directory. You must be logged in with the same account as the runtime environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzeus bridge\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering User Data Component in React\nDESCRIPTION: This snippet imports a Content component from a specific path in the project structure and renders it directly. The component likely contains documentation about the getUserData function from the hmSetting module in the Zepp OS device app API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getUserData.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getUserData.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Mapping Table\nDESCRIPTION: Markdown table showing the mapping between watch physical keys and keyboard keys for simulator control\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/simulator/index.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWatch key name|Keyboard keys|Description\n---|---|---\n`HOME`|`Home`, use the `fn` + `←` key combination on a Mac|Go to app list/back to Watchface\n`SHORTCUT`|`End`, use the `fn` + `→` key combination on a Mac|-\n`SELECT`|`enter`|-\n`BACK`|`delete`|-\n`UP`|`↑`|-\n`DOWN`|`↓`|-\n```\n\n----------------------------------------\n\nTITLE: Displaying Mini Program Development Asset Directory Structure\nDESCRIPTION: This code snippet shows the directory structure of the /assets folder in a Mini Program development environment. It includes device-specific folders and a raw folder for shared assets.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/fs.md#2025-04-07_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n.\nassets\n├── gtr-3\n│   ├── icon.png\n│   └── image\n│       └── logo.png\n├── gtr-3-pro\n│   ├── icon.png\n│   └── image\n│       └── logo.png\n└── gts-3\n│   ├── icon.png\n│   └── image\n│       └── logo.png\n└── raw\n    └── data.txt\n```\n\n----------------------------------------\n\nTITLE: Simplified closeSync Function Signature in TypeScript\nDESCRIPTION: This snippet shows a simplified TypeScript function signature for closeSync, which directly takes a file descriptor number as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction closeSync(fd: number): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Chinese Lunar Day in TypeScript\nDESCRIPTION: Retrieves the Chinese lunar day using the Time sensor. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarDay(): number\n```\n\n----------------------------------------\n\nTITLE: World Clock Uninit Type Definition\nDESCRIPTION: Type definition for the uninit method that recycles world clock data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Handling System Events in App Service for Zepp OS v3\nDESCRIPTION: JavaScript code snippet showing the structure of an App Service that responds to System Events. The onInit function is called when a System Event is triggered, with event-related parameters passed in the options object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/system-event.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAppService({\n  onInit(options) {\n    // evoke\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering CHANGE Event Listener for MUSIC Sensor in ZeppOS\nDESCRIPTION: Adds an event listener to the music sensor that triggers when the current song changes. The callback function logs the new song's title.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(\"The current song's name: \" + music.title + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Time Sensor Instance - JavaScript\nDESCRIPTION: Initialize a new time sensor instance using hmSensor.createSensor()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst time = hmSensor.createSensor(hmSensor.id.TIME)\n```\n\n----------------------------------------\n\nTITLE: Creating Time Sensor Instance - JavaScript\nDESCRIPTION: Initialize a new time sensor instance using hmSensor.createSensor()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst time = hmSensor.createSensor(hmSensor.id.TIME)\n```\n\n----------------------------------------\n\nTITLE: Size Comparison Table for Button Icons\nDESCRIPTION: A table showing the size specifications for button icons in four sizes (regular, medium, small, ultra-small) across different device resolutions. All icons need to contain a blank and transparent safe area of 2px on all sides.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/designs/visual/icons.md#2025-04-07_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n    <tr>\n        <th>Device resolution</th>\n        <th>480×480px</th>\n        <th>466×466px</th>\n        <th>454×454px</th>\n        <th>390×450px</th>\n    </tr>\n    <tr>\n        <td>Regular size</td>\n        <td>64×64px</td>\n        <td>63×63px</td>\n        <td>61×61px</td>\n        <td>64×64px</td>\n    </tr>\n    <tr>\n        <td>Medium size</td>\n        <td>52×52px</td>\n        <td>51×51px</td>\n        <td>50×50px</td>\n        <td>52×52px</td>\n    </tr>\n     <tr>\n        <td>Small size</td>\n        <td>40×40px</td>\n        <td>39×39px</td>\n        <td>38×38px</td>\n        <td>40×40px</td>\n    </tr>\n    <tr>\n        <td>Ultra-small size</td>\n        <td>32×32px</td>\n        <td>32×32px</td>\n        <td>31×31px</td>\n        <td>32×32px</td>\n    </tr>\n    <tr>\n        <td colspan=\"5\">Note: The icon needs to contain a blank and transparent safe area (2px on the top, bottom, left, and right).</td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Importing SysProGetBool Documentation in React\nDESCRIPTION: This code snippet imports the content for the SysProGetBool function documentation from a specific path and renders it using a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProGetBool.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating Time Sensor Instance - JavaScript\nDESCRIPTION: Initialize a new time sensor instance using hmSensor.createSensor()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst time = hmSensor.createSensor(hmSensor.id.TIME)\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript interface for hmUI.getScrollCurrentPage()\nDESCRIPTION: TypeScript interface definition for the hmUI.getScrollCurrentPage() function, specifying the return type as either undefined or a number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/getScrollCurrentPage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Configuring App Service in app.json\nDESCRIPTION: Configuration example for setting up App Service in the app.json file, specifying the service module path within the Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/app-service.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": {\n    \"app-service\": {\n      \"services\": [\"app-service/demo_service\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Displayed Holiday Strings in TypeScript\nDESCRIPTION: Retrieves the holiday strings displayed on the current day, with priority given to Gregorian holidays, Chinese lunar holidays, and Chinese lunar festivals. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ngetShowFestival(): string\n```\n\n----------------------------------------\n\nTITLE: Creating Text Widget with hmUI in Zepp OS 1.0\nDESCRIPTION: Example of creating a text widget using the hmUI module in Zepp OS 1.0. This snippet demonstrates the usage of the global hmUI object to create a TEXT widget with specific properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const text = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Logger Instance in TypeScript\nDESCRIPTION: Returns a new log instance with a specified name tag for easier log differentiation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetLogger(name: string): log\n```\n\n----------------------------------------\n\nTITLE: Importing hmFS Stat API Documentation in JSX\nDESCRIPTION: This code imports the content from a reference documentation file for the hmFS.stat API and renders it directly in the current page. The import uses a relative path to locate the MDX documentation file within the ZeppOS documentation structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/stat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/stat.mdx'\n\n<Content/>\n    \n```\n\n----------------------------------------\n\nTITLE: Notification Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the notify function showing the expected parameters and return type. The function takes an Option object and returns a Result number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/notification/notify.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction notify(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining stopTimer Function Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the stopTimer function. It takes a TimerId parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/timer/stopTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stopTimer(timerId: TimerId): void\n```\n\n----------------------------------------\n\nTITLE: Destroying App in Zepp OS (JavaScript)\nDESCRIPTION: The App onDestroy function is called when the app is being destroyed. It takes no parameters and returns no value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/life-cycle.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating Text Widget with hmUI in Zepp OS 1.0\nDESCRIPTION: Example of creating a text widget using the hmUI module in Zepp OS 1.0. This snippet demonstrates the usage of the global hmUI object to create a TEXT widget with specific properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const text = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Design Requirements Markdown Table\nDESCRIPTION: A structured markdown table containing design requirements across different dimensions including structure, visual elements, templates, UI components, internationalization, and accessibility standards.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/designs/self-checklist.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Dimension**        | **Item**                       | **Requirement**                                              | **Measurements** |\n| -------------------- | ------------------------------ | ------------------------------------------------------------ | ---------------- |\n| Structure            | Right swipe return             | Avoid interactions that conflict with the right swipe return. If this constrains your design, you can negotiate to modify the interaction or change the hot zone. | Required         |\n| Visual               | Color                          | Whether the colors of key content and information, warnings, controls, basic graphics, and so on refer to component library presets. | Required         |\n|                      | Font                           | Whether the font size refers to the component library.       | Required         |\n|                      | Icon                           | Reserve a 2px blank and transparent safe area around the icon.<br/>The icon output resource must be in PNG format, and the blank area must be transparent. | Required         |\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Documentation Component\nDESCRIPTION: Imports a pre-defined documentation component containing API reference for hmUI.setProperty from a relative path and renders it using JSX syntax.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmUI/setProperty.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zepp OS Dev Tools Extension in VS Code Settings\nDESCRIPTION: JSON configuration for setting the run mode and status bar shortcuts in the Zepp OS Dev Tools VS Code extension. The run mode can be set to 'terminal' or 'GUI', and status bar shortcuts can be customized.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/vscode-extension/index.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mode\": \"GUI\",\n  \"statusbar\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining stopTimer Function Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the stopTimer function. It takes a TimerId parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/timer/stopTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stopTimer(timerId: TimerId): void\n```\n\n----------------------------------------\n\nTITLE: App Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the App() function signature showing the Option parameter type and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/global/App.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining mstOnCharaValueArrived Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the mstOnCharaValueArrived function. It specifies that the function takes a callback as an argument and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnCharaValueArrived.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstOnCharaValueArrived(callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Weight Target in TypeScript\nDESCRIPTION: Type signature for the hmSetting.getWeightTarget() function. It takes no parameters and returns a weightTarget of type number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getWeightTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => weightTarget\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation Example of setScrollMode\nDESCRIPTION: Example showing how to use setScrollMode to configure a vertical swiper scroll mode with specific height and count parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/setScrollMode.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScrollMode, SCROLL_MODE_SWIPER } from '@zos/page'\n\nsetScrollMode({\n  mode: SCROLL_MODE_SWIPER,\n  options: {\n    height: 480,\n    count: 10,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating PAI Sensor Instance\nDESCRIPTION: Initializes a PAI sensor instance using the hmSensor API to access PAI-related data\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/PAI.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pai = hmSensor.createSensor(hmSensor.id.PAI)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstStartScan Function in JavaScript\nDESCRIPTION: This example demonstrates how to import the mstStartScan function from the @zos/ble module in a JavaScript environment. It serves as a starting point for using the function in a Zepp OS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstStartScan.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstStartScan } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Tree view showing the directory structure of a newly created hello-world project including app-side, assets, pages, and setting directories.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/cli/index.md#2025-04-07_snippet_3\n\nLANGUAGE: tree\nCODE:\n```\n└── hello-world\n    ├── app-side\n    │   ├── i18n\n    │   │   └── en-US.po\n    │   └── index.js\n    ├── app.js\n    ├── app.json\n    ├── assets\n    │   ├── 436x436-gtr-3\n    │   └── 480x480-gtr-3-pro\n    ├── pages\n    │   ├── example\n    │   │   └── index.js\n    │   ├── i18n\n    │   │   └── en-US.po\n    │   └── index.js\n    └── setting\n        ├── i18n\n        │   └── en-US.po\n        └── index.js\n```\n\n----------------------------------------\n\nTITLE: Type Definition for createTimer Function\nDESCRIPTION: TypeScript type definition showing the function signature for createTimer, which takes delay, repeat interval, callback function, and options parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/timer/createTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(delay: number, repeat: number, callback: (option: any) => void, option: any) => timerId\n```\n\n----------------------------------------\n\nTITLE: Defining the Type Signature for hmApp.startApp Method in TypeScript\nDESCRIPTION: TypeScript type definition for the hmApp.startApp method, which takes an Option object parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/startApp.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => void\n```\n\n----------------------------------------\n\nTITLE: Importing Device Polyfill for MessageBuilder in Device App\nDESCRIPTION: This snippet shows how to import the necessary device polyfill in the Device App's main file to support MessageBuilder functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './shared/device-polyfill'\n```\n\n----------------------------------------\n\nTITLE: Getting Weight Target in JavaScript\nDESCRIPTION: Example of how to use the hmSetting.getWeightTarget() function to retrieve the user's weight target. The target is returned as a number representing kilograms.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getWeightTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = hmSetting.getWeightTarget()\n```\n\n----------------------------------------\n\nTITLE: Using getAllNotifications Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the getAllNotifications function in a JavaScript environment within ZeppOS. The function is called without any arguments to retrieve all notification IDs.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/notification/getAllNotifications.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllNotifications } from '@zos/notification'\n\ngetAllNotifications()\n```\n\n----------------------------------------\n\nTITLE: Converting opus to PCM using opus_demo tool\nDESCRIPTION: This shell command uses the opus_demo tool to convert an opus file to raw PCM format. It specifies the sampling rate of 16000Hz and 1 channel as required by the watch recorded opus files.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/opus-to-mp3.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# opus_demo -d <sampling rate (Hz)> <channels (1/2)> <input> <output>\n./opus_demo -d 16000 1 userContent.opus userContent.pcm\n```\n\n----------------------------------------\n\nTITLE: Defining closeSync Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the closeSync function, which takes an Option object as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction closeSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Complete Polyline Implementation Example\nDESCRIPTION: Full example showing how to create a polyline widget, define coordinate data, and draw a line with styling properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nPage({\n  build() {\n    const lineDataList = [\n      { x: 0, y: px(120) },\n      { x: px(100), y: px(10) },\n      { x: px(200), y: px(50) },\n      { x: px(300), y: px(50) },\n      { x: px(400), y: px(150) }\n    ]\n    const polyline = createWidget(widget.GRADKIENT_POLYLINE, {\n      x: 0,\n      y: px(200),\n      w: px(480),\n      h: px(150),\n      line_color: 0x00ffff,\n      line_width: 4\n    })\n    polyline.clear()\n    polyline.addLine({\n      data: lineDataList,\n      count: lineDataList.length\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Granting Full Permissions to Simulator Directory on Linux\nDESCRIPTION: Command to grant full permissions (read, write, execute) to all users for the simulator directory on Linux. This ensures the simulator can be run without permission issues.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/simulator/setup.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod -R 777 /dir\n```\n\n----------------------------------------\n\nTITLE: Getting WorldClock Information by Index Method Signature\nDESCRIPTION: TypeScript method signature for retrieving details about a specific world clock by its index. Returns a WorldClockInfo object containing city details and time information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/WorldClock.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo(index: number): WorldClockInfo\n```\n\n----------------------------------------\n\nTITLE: Displaying Zepp OS Mini Program Folder Structure using Tree Command\nDESCRIPTION: This code snippet shows the directory structure of a Zepp OS Mini Program using the tree command output. It includes folders for app-side services, settings, widgets, assets, pages, and utilities.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/architecture/folder-structure.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n.\n├── app-side // Side Service Directory\n│   └── index.js // Side Service logic as an entry file (path can be configured in app.json)\n├── setting // Settings App Directory\n│   ├── i18n // Settings App i18n Directory\n│   │   └── en-US.po\n│   └── index.js // Settings App logic as an entry file (path can be configured in app.json)\n├── app-widget // Shortcut Card widget Directory\n│   └── index.js // Shortcut Card logic as an entry file (path can be configured in app.json)\n├── secondary-widget // SecondaryWidget Directory\n│   └── index.js // SecondaryWidget logic as an entry file (path can be configured in app.json)\n├── app.js // Mini Program logic\n├── app.json // Mini Program configuration\n├── assets // The directory where the resource files for different devices are stored is named after the key of the targets object in app.json\n│   ├── gtr-3\n│   │   ├── icon.png\n│   │   ├── fonts\n│   │   │   └── custom.ttf\n│   │   └── image\n│   │       └── logo.png\n│   ├── gtr-3-pro\n│   │   ├── icon.png\n│   │   ├── fonts\n│   │   │   └── custom.ttf\n│   │   └── image\n│   │       └── logo.png\n│   └── gts-3\n│       ├── icon.png\n│       ├── fonts\n│       │   └── custom.ttf\n│       └── image\n│           └── logo.png\n├── page // Device application page\n│   ├── home // device application home directory (one directory for one page is recommended)\n│   │   ├── index.page.js // page logic\n│   │   └── index.style.js // page style\n│   └── i18n // Device application multilingual directory\n│       └── en-US.po\n└── utils // Tools and functions directory\n    ├── constants.js\n    ├── fs.js\n    └── index.js\n```\n\n----------------------------------------\n\nTITLE: Creating a Weekly Repeating Alarm on Specific Days\nDESCRIPTION: Example demonstrating how to set up a weekly repeating timer that triggers on specified days of the week (Monday and Wednesday) using bitwise operators with week constants.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/alarm/set.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Every Monday and Wednesday\nimport { set, REPEAT_WEEK, WEEK_MON, WEEK_WED } from '@zos/alarm'\n\nconst option = {\n  url: 'pages/index.js',\n  time: 12345678,\n  repeat_type: REPEAT_WEEK,\n  week_days: WEEK_MON | WEEK_WED,\n}\nconst id = set(option)\n```\n\n----------------------------------------\n\nTITLE: Specifying Preview Picture Sizes in Markdown Table\nDESCRIPTION: A markdown table defining the required thumbnail sizes for watchface preview pictures based on different device resolutions. This ensures proper display across various Zepp OS devices.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/specification.md#2025-04-07_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Device resolution|Thumbnail size|\n|:--|:--|\n|480\\*480|324\\*324|\n|454\\*454|306\\*306|\n|416\\*416|280\\*280|\n|390\\*450|266\\*306|\n|402\\*476|273\\*316|\n|302\\*320|202\\*214|\n|306\\*354|210\\*242|\n```\n\n----------------------------------------\n\nTITLE: CALORIE Sensor Event Listener Callback Type Definition in TypeScript\nDESCRIPTION: Defines the type for the callback function used in the CALORIE sensor's event listener. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining Button Configuration Format\nDESCRIPTION: Demonstrates the naming convention format for button configurations. The format follows {button mode}_{number of buttons}{crown existence}, where button mode can be normal/sport, number of buttons can be 1/2/4, and crown existence is represented as 0/1.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/designs/interaction/definition.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\nbutton mode}_{number of buttons} // {whether crown exists,  1 means yes, 0 means no}\n```\n\n----------------------------------------\n\nTITLE: Installing App to Runtime Environment with Zepp CLI\nDESCRIPTION: Command for building the current project and installing it to the connected runtime environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninstall\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering getTimeFormat API Documentation in React\nDESCRIPTION: This code imports the documentation content for the getTimeFormat function from the hmSetting API and renders it using a React component. It's part of a modular documentation system for Zepp OS device app development.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getTimeFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getTimeFormat.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating a POLYLINE Widget in ZeppOS\nDESCRIPTION: Code snippet demonstrating how to import and create a POLYLINE widget instance with required parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst polyline = createWidget(widget.GRADKIENT_POLYLINE, Param)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for clear Method\nDESCRIPTION: TypeScript definition for the clear method, which removes all key-value pairs from the settingsStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating CYCLE_IMAGE_TEXT_LIST Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a CYCLE_IMAGE_TEXT_LIST widget using the createWidget function from the ZeppOS UI module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst cycleImageTextList = createWidget(widget.CYCLE_IMAGE_TEXT_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Printing Error Level Logs in TypeScript\nDESCRIPTION: Method to print error level logs. It accepts multiple string arguments.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nerror(...args: string[]): void\n```\n\n----------------------------------------\n\nTITLE: Using readFileSync in ZeppOS Mini Program\nDESCRIPTION: Example demonstrating how to use readFileSync to read file contents both as a buffer and as a string with UTF-8 encoding.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/readFileSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from '@zos/fs'\n\nconst contentBuffer = readFileSync({\n  path: 'test.txt',\n})\n\nconst contentString = readFileSync({\n  path: 'test.txt',\n  options: {\n    encoding: 'utf8',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using readFileSync in ZeppOS Mini Program\nDESCRIPTION: Example demonstrating how to use readFileSync to read file contents both as a buffer and as a string with UTF-8 encoding.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/readFileSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from '@zos/fs'\n\nconst contentBuffer = readFileSync({\n  path: 'test.txt',\n})\n\nconst contentString = readFileSync({\n  path: 'test.txt',\n  options: {\n    encoding: 'utf8',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Runtime Environment using Zepp CLI\nDESCRIPTION: Command for establishing a connection between Zepp CLI and the runtime environment device through Developer Bridge.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconnect\n```\n\n----------------------------------------\n\nTITLE: Clearing Polyline Content Method\nDESCRIPTION: Method to clear all drawn lines from the polyline widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Zepp OS Docs Project\nDESCRIPTION: Commands to install project dependencies using npm or yarn package managers.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n\n// or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Function Signature for hmApp.alarmNew in TypeScript\nDESCRIPTION: TypeScript type definition for the hmApp.alarmNew function that creates timed wake-up alarms in Zepp OS. The function takes an Option object as a parameter and returns an alarmID number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/alarm/alarmNew.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => alarmID\n```\n\n----------------------------------------\n\nTITLE: Permissions Configuration Example in JavaScript\nDESCRIPTION: Example of the permissions array that lists the permissions requested by a Mini Program. Applications for permissions not in this list are considered invalid.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"permissions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Air Pressure Method - TypeScript\nDESCRIPTION: Method to retrieve the current air pressure value in hectopascals (hPa).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetAirPressure(): number\n```\n\n----------------------------------------\n\nTITLE: Installing npm Packages for Zepp OS\nDESCRIPTION: Shell commands for installing npm dependencies in a Zepp OS project directory containing package.json.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/npm/index.mdx#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n\n// alias\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Close Function Documentation in React\nDESCRIPTION: This code snippet imports the content for the close() function documentation from a specific path and renders it using a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/close.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/close.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining showToast Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the showToast function, specifying it takes an Option object parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/showToast.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => void\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SysProSetInt Documentation in React\nDESCRIPTION: A React component that imports documentation content from the specified path and renders it. This pattern is used throughout the documentation site to modularize content while maintaining a consistent structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetInt.mdx'\n\n<Content/>\n\n```\n\n----------------------------------------\n\nTITLE: AppSettingsPage Constructor TypeScript Interface Definition\nDESCRIPTION: TypeScript interface definition for the AppSettingsPage constructor, including Props, Option and AppSettingsPage interfaces.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/app-settings/register.md#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  settingsStorage: SettingsStorage\n}\n\ninterface Option {\n  build: (props: Props) => RenderFunc\n}\n\ninterface AppSettingsPage {\n  (option: Option): void\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project to Connected Device in CLI Bridge Mode\nDESCRIPTION: Terminal command to build the current directory's project and install it to the connected runtime environment after establishing a connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\ninstall\n```\n\n----------------------------------------\n\nTITLE: Removing Items from sessionStorage in TypeScript\nDESCRIPTION: TypeScript method signature for removing a specific item by key from sessionStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nremoveItem(key: string): void\n```\n\n----------------------------------------\n\nTITLE: Removing Items from sessionStorage in TypeScript\nDESCRIPTION: TypeScript method signature for removing a specific item by key from sessionStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nremoveItem(key: string): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Revision History Content in MDX\nDESCRIPTION: This code imports a Content component from a reference file path and renders it within the document. The implementation uses MDX, which allows JSX components to be used within markdown content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/revision-history.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../reference/revision-history.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Stopping Gyroscope Data Collection in ZeppOS\nDESCRIPTION: Method to stop listening to gyroscope data from the device sensor. This disables monitoring and helps conserve battery when gyroscope data is no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Defining getSettings Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getSettings function that returns a Result object containing screen, wrist, and standby settings.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/getSettings.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSettings(): Result\n```\n\n----------------------------------------\n\nTITLE: Sleep Stage Data Type Definition - TypeScript\nDESCRIPTION: Type definition for the getSleepStageData method return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => Array<SleepInfo>\n```\n\n----------------------------------------\n\nTITLE: Type Data Specifications - Markdown\nDESCRIPTION: Specifies data types, naming conventions, and format requirements for different watchface elements like heart rate, calorie, weather, etc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/specification.md#2025-04-07_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|type|name|explain|custom progress|maximum digit|\n|:--|:--|:--|:--|:--|\n|heart rate|heart||Section 6|3 bits（000）|\n|calorie|calorie||Section 10|4 bits（0000）|\n```\n\n----------------------------------------\n\nTITLE: World Clock Uninitialization Method Type Definition\nDESCRIPTION: JavaScript type definition for the uninit method which releases resources used by the world clock sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining mstStartScan Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for mstStartScan, including its parameters and return type. It shows that the function takes a callback and an optional filter, and returns a boolean result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstStartScan.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstStartScan(callback: Callback, filter?: Filter): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Current Battery Percentage in TypeScript\nDESCRIPTION: This method returns the current device power percentage as a number between 0 and 100.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Battery.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Defining mstStartScan Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for mstStartScan, including its parameters and return type. It shows that the function takes a callback and an optional filter, and returns a boolean result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstStartScan.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstStartScan(callback: Callback, filter?: Filter): Result\n```\n\n----------------------------------------\n\nTITLE: Importing DISTANCE Sensor Documentation in ZeppOS\nDESCRIPTION: This code imports the DISTANCE sensor documentation from the reference path and renders it using a Content component. This pattern is commonly used in documentation sites to modularize and reuse content across different sections.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Distance Sensor Event Listener Type Definition\nDESCRIPTION: TypeScript type definition for the distance sensor event callback function. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining clear Method in SessionStorage API for TypeScript\nDESCRIPTION: Method signature for clearing all data stored in SessionStorage. This removes all key-value pairs from the temporary storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Defining showToast Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the showToast function which displays a message prompt box. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/showToast.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction showToast(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Registering BLE Service Change End Callback in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definition for the mstOnServiceChangeEnd function. It takes a callback function as a parameter and returns a boolean result indicating success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnServiceChangeEnd.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstOnServiceChangeEnd(callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Fat Burning Sensor Documentation in React\nDESCRIPTION: This code imports a documentation component for the Fat Burning sensor from a specific path and renders it. It's likely part of a React-based documentation system for Zepp OS device app API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing Weight Unit Settings Module\nDESCRIPTION: Imports the weight unit settings documentation content from a relative MDX file path. Uses ES6 import syntax for React component integration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getWeightUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getWeightUnit.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining onKey Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the onKey method that accepts an option object containing a callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction onKey(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Function Signature for mstOnPrepare in TypeScript\nDESCRIPTION: Type definition for the mstOnPrepare function showing its signature with callback parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnPrepare.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstOnPrepare(callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering STAND Sensor Documentation in React\nDESCRIPTION: This code imports the STAND sensor documentation content from a specific path and renders it using JSX. It's using a standard React pattern of importing a component and rendering it inline without props.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/STAND.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing BATTERY Sensor Documentation in React/MDX\nDESCRIPTION: This code imports a content component that contains documentation for the BATTERY sensor ID from the hmSensor module. The component is then rendered directly in the current MDX file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/BATTERY.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining connectStatus Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the connectStatus function which returns a boolean indicating connection status.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/connectStatus.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction connectStatus(): boolean\n```\n\n----------------------------------------\n\nTITLE: Importing SPO2 Sensor Documentation Module\nDESCRIPTION: Imports SPO2 sensor documentation content from the reference path using MDX format and renders it using the Content component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/SPO2.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/SPO2.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a TEXT widget using hmUI.createWidget() method. This requires a parameter object to configure the widget's properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = hmUI.createWidget(hmUI.widget.TEXT, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating TEXT Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a TEXT widget using hmUI.createWidget() method. This requires a parameter object to configure the widget's properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/TEXT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = hmUI.createWidget(hmUI.widget.TEXT, Param)\n```\n\n----------------------------------------\n\nTITLE: Using getText Function to Retrieve Internationalized Strings in JavaScript\nDESCRIPTION: Example showing how to import and use the getText function from the @zos/i18n module to retrieve a localized string using the 'name' key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/i18n/getText.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { getText } from '@zos/i18n'\n\ngetText('name')\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnCharaNotification in JavaScript\nDESCRIPTION: This example demonstrates how to import the mstOnCharaNotification function from the @zos/ble module. It's likely used in conjunction with mstWriteDescriptor, although the full usage example is not provided.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstWriteDescriptor.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOnCharaNotification } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Status Bar Visibility in JavaScript\nDESCRIPTION: Example showing how to hide the status bar using the hmUI.setStatusBarVisible method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setStatusBarVisible.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmUI.setStatusBarVisible(false)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Content Module in React\nDESCRIPTION: This snippet imports a content module for the getScreenAutoBright function documentation and renders it using JSX syntax. It's typically used in documentation frameworks to modularize and reuse content across different pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getScreenAutoBright.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getScreenAutoBright.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using getCurrentPage Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the getCurrentPage function within a Zepp OS page. It shows the page definition and how to access the page instance's state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/getCurrentPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n\nconst page = getCurrentPage()\nconsole.log(page._options.state.text)\n```\n\n----------------------------------------\n\nTITLE: Using mstWriteCharacteristic in JavaScript\nDESCRIPTION: Example showing how to import and use the mstWriteCharacteristic function from the @zos/ble package.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstWriteCharacteristic.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstWriteCharacteristic } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Status Bar Visibility Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setStatusBarVisible function that takes a boolean parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setStatusBarVisible.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(visible: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Status Bar Visibility Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setStatusBarVisible function that takes a boolean parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setStatusBarVisible.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(visible: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Image Widget in ZeppOS\nDESCRIPTION: Example of creating an image widget and setting a click event listener that changes the image's vertical position when clicked. Uses the createWidget function with the IMG widget type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img = createWidget(widget.IMG, {\n      x: 125,\n      y: 125,\n      src: 'zeppos.png'\n    })\n    img.addEventListener(event.CLICK_DOWN, (info) => {\n      img.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Image Widget in ZeppOS\nDESCRIPTION: Example of creating an image widget and setting a click event listener that changes the image's vertical position when clicked. Uses the createWidget function with the IMG widget type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img = createWidget(widget.IMG, {\n      x: 125,\n      y: 125,\n      src: 'zeppos.png'\n    })\n    img.addEventListener(event.CLICK_DOWN, (info) => {\n      img.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer in Zepp OS\nDESCRIPTION: Demonstrates how to create a Buffer instance from a string in Zepp OS. This functionality is similar to Node.js Buffer implementation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/Buffer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBuffer.from('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Defining mstReadDescriptor Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for mstReadDescriptor. It specifies the function parameters and their types, including Profile, UUID, and DescUUID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstReadDescriptor.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstReadDescriptor(profile: Profile, uuid: UUID, descUUID: DescUUID): void\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Image Widget in ZeppOS\nDESCRIPTION: Example of creating an image widget and setting a click event listener that changes the image's vertical position when clicked. Uses the createWidget function with the IMG widget type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img = createWidget(widget.IMG, {\n      x: 125,\n      y: 125,\n      src: 'zeppos.png'\n    })\n    img.addEventListener(event.CLICK_DOWN, (info) => {\n      img.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for mstReadCharacteristic Function\nDESCRIPTION: TypeScript function signature showing the required parameters and return type for the mstReadCharacteristic function. Takes a Profile pointer number and UUID string as parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstReadCharacteristic.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstReadCharacteristic(profile: Profile, uuid: UUID): void\n```\n\n----------------------------------------\n\nTITLE: Drawing Pixel on CANVAS in Zepp OS\nDESCRIPTION: Illustrates drawing a single pixel on the CANVAS widget using the drawPixel method, specifying x and y coordinates and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.drawPixel({\n  x: 0,\n  y: 0,\n  color: 0xffffff\n})\n```\n\n----------------------------------------\n\nTITLE: Using mstOnPrepare BLE Function in JavaScript\nDESCRIPTION: Example showing how to import and use the mstOnPrepare function from the BLE module in Zepp OS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnPrepare.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOnPrepare } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstPair Function in JavaScript\nDESCRIPTION: This example shows how to import the mstPair function from the @zos/ble module in JavaScript. It demonstrates the basic setup for using the function in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstPair.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstPair } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Importing and Using disConnect Function in JavaScript\nDESCRIPTION: An example showing how to import the disConnect function from the Zepp OS BLE module. The function can be used to terminate a Bluetooth connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/disConnect.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { disConnect } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for updateStatusBarTitle\nDESCRIPTION: Type definition for the updateStatusBarTitle function that accepts a string parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/updateStatusBarTitle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(title: string) => void\n```\n\n----------------------------------------\n\nTITLE: Using mstOffAllCb Function in JavaScript\nDESCRIPTION: Example showing how to import and use the mstOffAllCb function to unregister all Bluetooth callbacks in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOffAllCb.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstOffAllCb } from '@zos/ble'\n\nmstOffAllCb()\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getAllAppServices Function\nDESCRIPTION: TypeScript type definition showing the function signature that returns a Result type containing an array of strings representing running services.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-service/getAllAppServices.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAllAppServices(): Result\n```\n\n----------------------------------------\n\nTITLE: Importing createConnect Function in JavaScript\nDESCRIPTION: This example shows how to import the createConnect function from the @zos/ble module in a JavaScript file. It demonstrates the basic setup for using the function in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/createConnect.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createConnect } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining getPackageInfo Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getPackageInfo function, which returns a Result object containing fields from the app.json configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/getPackageInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getPackageInfo(): Result\n```\n\n----------------------------------------\n\nTITLE: Adding Lines to Polyline Method\nDESCRIPTION: Method signature for adding line data to the polyline widget with options for coordinates and styling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n(option: Option) => void\n```\n\n----------------------------------------\n\nTITLE: Section Component Type Definition in TypeScript\nDESCRIPTION: Defines the function signature for the Section component. It accepts props and optional render functions, and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/section.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Creating a PICK_DATE Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a PICK_DATE widget with the hmUI.createWidget method. This widget provides a time/date picker interface for users.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/PICK_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pickDate = hmUI.createWidget(hmUI.widget.PICK_DATE, Param)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Permissions to Simulator Startup Script on macOS\nDESCRIPTION: Command to add executable permissions to the simulator startup script on macOS. This step is necessary after installation to ensure the simulator can be launched.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/tools/simulator/setup.md#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd /Applications/simulator.app/Contents/Resources/firmware && chmod +x ./start_qemu.sh\n```\n\n----------------------------------------\n\nTITLE: Type Definition for relayoutRtl Function in ZeppOS\nDESCRIPTION: TypeScript type definition for the relayoutRtl() function that returns a boolean result indicating success or failure of the RTL layout application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/relayoutRtl.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Defining CheckFunc Callback for RADIO_GROUP in Zepp OS\nDESCRIPTION: This code defines the structure of the CheckFunc callback used in the RADIO_GROUP widget. It is called when the button state changes, providing the radioGroup instance, index, and checked status.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/RADIO_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(radioGroup: RadioGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Defining CheckFunc Callback for RADIO_GROUP in Zepp OS\nDESCRIPTION: This code defines the structure of the CheckFunc callback used in the RADIO_GROUP widget. It is called when the button state changes, providing the radioGroup instance, index, and checked status.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/RADIO_GROUP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(radioGroup: RadioGroup, index: number, checked: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageView for SCROLL_LIST in ZeppOS\nDESCRIPTION: This code snippet shows how to configure the image_view parameter for the SCROLL_LIST widget. It defines an array of ImageView objects with their respective properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst image_view = [{ x: 0, y: 0, w: 20, h: 20, key: 'img_src' }]\n```\n\n----------------------------------------\n\nTITLE: Setting permissions for Zepp OS Simulator on Ubuntu\nDESCRIPTION: This command sets the necessary permissions for the chrome-sandbox file in the Simulator directory. It should be run before starting the Simulator on Ubuntu systems.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/simulator-faq.md#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo chmod 4755 /opt/simulator/chrome-sandbox\n```\n\n----------------------------------------\n\nTITLE: Using stopTimer Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the stopTimer function in conjunction with createSysTimer. It creates a periodic timer that runs every 10 seconds and then stops it after 5 seconds using stopTimer.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/timer/stopTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSysTimer, stopTimer } from '@zos/timer'\n\n// Create a periodic timer that executes every 10 seconds\nconst timerId = createSysTimer(true, 10000, () => {\n  console.log('Execute every 10 seconds')\n})\n\n// Stop the timer after 5 seconds\ncreateSysTimer(false, 5000, () => {\n  stopTimer(timerId)\n  console.log('Timer stopped')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing STROKE_RECT with Event Handling\nDESCRIPTION: Complete example showing how to create a stroked rectangle with custom properties and click event handling. Demonstrates setting position, size, radius, line width, and color properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: ZeppOS Layout Debugging Configuration\nDESCRIPTION: Debug utility configuration for visualizing widget layout boundaries using the openInspector tool.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeout(() => {\n  openInspector().draw({\n    line_color: 0xff0000,\n    line_width: 1,\n    border_mode: 1,\n  });\n}, 200);\n```\n\n----------------------------------------\n\nTITLE: Stopping Accelerometer Data Listening in TypeScript\nDESCRIPTION: Stops listening to accelerometer data. This method doesn't take any parameters and doesn't return any value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Creating STROKE_RECT Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a stroked rectangle widget using hmUI.createWidget()\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining setLaunchAppTimeout Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature and parameter types for the setLaunchAppTimeout API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/setLaunchAppTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setLaunchAppTimeout(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_POINTER Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG_POINTER widget using hmUI.createWidget. It sets up a pointer image with specific rotation properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgPointer = hmUI.createWidget(hmUI.widget.IMG_POINTER, Param)\n```\n\n----------------------------------------\n\nTITLE: Back Navigation Usage Example - JavaScript\nDESCRIPTION: Example showing how to import and use the back() function from the ZeppOS router module to navigate to the previous page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/back.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { back } from '@zos/router'\n\nback()\n```\n\n----------------------------------------\n\nTITLE: Creating an ARC Widget in ZeppOS\nDESCRIPTION: Shows how to create an ARC widget using hmUI.createWidget(). This function initializes an arc component with specified parameters such as position, dimensions, angles, color, and line width.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/ARC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = hmUI.createWidget(hmUI.widget.ARC, Param)\n```\n\n----------------------------------------\n\nTITLE: Text Component Type Definition in TypeScript\nDESCRIPTION: Defines the function signature for the Text component in Zepp OS. It accepts props and optional render functions, returning a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/app-settings-api/ui/text.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Using cancel Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the cancel function from the @zos/alarm module in a JavaScript ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/alarm/cancel.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cancel } from '@zos/alarm'\n\ncancel(id)\n```\n\n----------------------------------------\n\nTITLE: Select Component Type Definition in TypeScript\nDESCRIPTION: Type definition for the Select component showing the main component function signature that takes Props and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/app-settings-api/ui/select.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Configuring Platforms Object in ZeppOS app.json\nDESCRIPTION: This snippet demonstrates how to configure the 'platforms' object in the app.json file for ZeppOS applications. It specifies target platforms with device names and sources.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"platforms\": [{\n    \"name\": \"gts-3\",\n    \"deviceSource\": 229\n  }, {\n    \"name\": \"gts-3\",\n    \"deviceSource\": 230\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Link Component Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the Link component. It takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/link.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Language Setting in ZeppOS\nDESCRIPTION: Gets the current language serial number which corresponds to a country code. The return value can be referenced in the Multilingual Mapping documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getLanguage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst language = hmSetting.getLanguage()\n```\n\n----------------------------------------\n\nTITLE: API Version Configuration Example in JavaScript\nDESCRIPTION: Example configuration of apiVersion field in app.json. This includes compatible, target, and minVersion properties to specify runtime requirements for a Mini Program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"runtime\": {\n    \"apiVersion\": {\n      \"compatible\": \"1.0.0\",\n      \"target\": \"1.0.1\",\n      \"minVersion\": \"1.0.0\"\n    }，\n  \"type\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.SysProSetChars in TypeScript\nDESCRIPTION: TypeScript type signature for the hmFS.SysProSetChars function, which accepts a key string and value string, and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string, val: string) => result\n```\n\n----------------------------------------\n\nTITLE: Generating QR code for device preview\nDESCRIPTION: Command to generate a QR code that can be scanned with the Zepp App to install the app on a physical device for testing.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/cli/index.md#2025-04-07_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# compilation preview (real machine)\nzeus preview\n```\n\n----------------------------------------\n\nTITLE: Function Signature for hmFS.SysProSetBool in TypeScript\nDESCRIPTION: The TypeScript type definition for the hmFS.SysProSetBool function, which takes a string key and boolean value as parameters and returns a numeric result code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string, val: boolean) => result\n```\n\n----------------------------------------\n\nTITLE: Installing nvm on macOS/Linux using wget\nDESCRIPTION: Alternative command to download and install nvm (Node Version Manager) on macOS or Linux systems using wget. This provides another option for systems without curl.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/Basic-environment-construction.mdx#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwget -4 -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Function Signature for hmFS.close in TypeScript\nDESCRIPTION: The TypeScript type definition for the hmFS.close function that takes a file handle (fileId) as a parameter and returns a numeric result code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/close.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number) => result\n```\n\n----------------------------------------\n\nTITLE: Compiling and Previewing a Project with Zeus CLI\nDESCRIPTION: Command to compile the project and launch it in the simulator for preview. This is executed at the root of the template project directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/quick-start.mdx#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nzeus dev\n```\n\n----------------------------------------\n\nTITLE: Type Definition for SysProGetChars Method\nDESCRIPTION: TypeScript type definition showing the method signature that takes a string key parameter and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Creating and Stopping a Timer in JavaScript\nDESCRIPTION: Example of creating a timer with createTimer and then stopping it using stopTimer. The timer is set to trigger every 1000ms after an initial delay of 500ms, with a callback function that logs the time.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/timer/stopTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timer1 = timer.createTimer(\n  500,\n  1000,\n  function (option) {\n    console.log('timer callback')\n    console.log(option.hour)\n  },\n  { hour: 0, minute: 15, second: 30 }\n)\n\ntimer.stopTimer(timer1)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getScreenAutoBright Method\nDESCRIPTION: TypeScript type definition showing the function signature that returns a boolean result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getScreenAutoBright.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.read Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.read function that specifies the parameter types and return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/read.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(fileId: number, buffer: ArrayBuffer, position: number, length: number) => result\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Revision History Content in MDX\nDESCRIPTION: This code snippet imports a Content component from a specific path and renders it within the current MDX file. This approach allows for modular content management and easier updates to the revision history.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/revision-history.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../reference/revision-history.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using pauseDropWristScreenOff - JavaScript Example\nDESCRIPTION: Example showing how to import and use the pauseDropWristScreenOff function to suspend wrist rest behavior for 60 seconds.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/pauseDropWristScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pauseDropWristScreenOff } from '@zos/display'\n\npauseDropWristScreenOff({\n  duration: 60000,\n})\n```\n\n----------------------------------------\n\nTITLE: Language Code Reference Table\nDESCRIPTION: Comprehensive mapping table showing the relationship between numeric values returned by hmSetting.getLanguage(), ISO language codes used in app.json i18n field, and the corresponding language/country descriptions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/related-resources/language-list.mdx#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Value | Code Abbreviation | Language / Country                  |\n| ----- | ----------------- | ----------------------------------- |\n| 0     | zh-CN             | Simplified Chinese                  |\n| 1     | zh-TW             | Traditional Chinese (Taiwan, China) |\n| 2     | en-US             | English (USA)                       |\n| 3     | es-ES             | Spanish (Spain)                     |\n| 4     | ru-RU             | Russian (Russia)                    |\n| 5     | ko-KR             | Korean (Korea)                      |\n| 6     | fr-FR             | French (France)                     |\n| 7     | de-DE             | German (Germany)                    |\n| 8     | id-ID             | Indonesian                          |\n| 9     | pl-PL             | Polish (Poland)                     |\n| 10    | it-IT             | Italian (Italy)                     |\n| 11    | ja-JP             | Japanese (Japan)                    |\n| 12    | th-TH             | Thai                                |\n| 13    | ar-EG             | Arabic (Egypt)                      |\n| 14    | vi-VN             | Vietnamese                          |\n| 15    | pt-PT             | Portuguese (Portugal)               |\n| 16    | nl-NL             | Dutch                               |\n| 17    | tr-TR             | Turkish (Turkey)                    |\n| 18    | uk-UA             | Ukrainian                           |\n| 19    | iw-IL             | Hebrew (Israel)                     |\n| 20    | pt-BR             | Portuguese (Brazil)                 |\n| 21    | ro-RO             | Romanian                            |\n| 22    | cs-CZ             | Czech                               |\n| 23    | el-GR             | Greek                               |\n| 24    | sr-RS             | Serbian (Latin)                     |\n| 25    | ca-ES             | Catalan                            |\n| 26    | fi-FI             | Finnish                            |\n| 27    | nb-NO             | Norwegian                           |\n| 28    | da-DK             | Danish                             |\n| 29    | sv-SE             | Swedish                            |\n| 30    | hu-HU             | Hungarian                           |\n| 31    | ms-MY             | Malay                              |\n| 32    | sk-SK             | Slovakian                          |\n| 33    | hi-IN             | Hindi                              |\n```\n\n----------------------------------------\n\nTITLE: Restricted JavaScript Function Creation in Zepp OS\nDESCRIPTION: Shows the only permitted use of 'new Function()' in Zepp OS Mini Programs. For security reasons, dynamic function creation is restricted except for this specific case.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/app-settings/js-support.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Function('return this')\n```\n\n----------------------------------------\n\nTITLE: Size Comparison Table for General Feature Icons\nDESCRIPTION: A table showing the size specifications for general feature icons in three sizes (regular, medium, ultra-small) across different device resolutions. All icons need to contain a blank and transparent safe area of 2px on all sides.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/designs/visual/icons.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n    <tr>\n        <th>Device resolution</th>\n        <th>480×480px</th>\n        <th>466×466px</th>\n        <th>454×454px</th>\n        <th>390×450px</th>\n    </tr>\n    <tr>\n        <td>Regular size</td>\n        <td>64×64px</td>\n        <td>63×63px</td>\n        <td>61×61px</td>\n        <td>64×64px</td>\n    </tr>\n    <tr>\n        <td>Medium size</td>\n        <td>52×52px</td>\n        <td>51×51px</td>\n        <td>50×50px</td>\n        <td>52×52px</td>\n    </tr>\n    <tr>\n        <td>Ultra-small size</td>\n        <td>32×32px</td>\n        <td>32×32px</td>\n        <td>31×31px</td>\n        <td>32×32px</td>\n    </tr>\n    <tr>\n        <td colspan=\"5\">Note: The icon needs to contain a blank and transparent safe area (2px on the top, bottom, left, and right).</td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Installing Project to Connected Runtime Environment\nDESCRIPTION: Command to build the current directory project and install it to the connected runtime environment after establishing a connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninstall\n```\n\n----------------------------------------\n\nTITLE: Importing Base URL Utility in React\nDESCRIPTION: Import statement for the useBaseUrl utility from Docusaurus, used for handling base URLs in documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/workout-extension/intro.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl'\n```\n\n----------------------------------------\n\nTITLE: Getting Inbox Object Example\nDESCRIPTION: Example showing how to get an Inbox object for file receiving.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst inbox = transferFile.getInbox()\n```\n\n----------------------------------------\n\nTITLE: Importing Step Sensor Documentation Component\nDESCRIPTION: Imports a documentation component for ZeppOS step sensor from a reference path and renders it using MDX syntax\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/STEP.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating Step Sensor Instance\nDESCRIPTION: Shows how to create a step sensor instance and access the current step count using hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst step = hmSensor.createSensor(hmSensor.id.STEP)\n\nconsole.log(step.current)\n```\n\n----------------------------------------\n\nTITLE: Using console.log() in Zepp OS\nDESCRIPTION: Demonstrates how to use the console.log() function to print a message to the console in Zepp OS. This method accepts any number of parameters and is useful for debugging and logging information during development.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/global.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Configuring appId in app.json for Zepp App\nDESCRIPTION: Shows how to configure the registered application's appId in the app.json file. This is a required step during application development to associate your code with the registered application in the Zepp Store.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/distribute/index.md#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"appId\": appId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mstGetProfileInstance Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for mstGetProfileInstance. It takes a ProfileName (string) and ConnectId (number) as parameters and returns a Result (number or undefined).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ble/mstGetProfileInstance.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstGetProfileInstance(profileName: ProfileName, connectId: ConnectId): Result\n```\n\n----------------------------------------\n\nTITLE: Implementing CALORIE Sensor UI in ZeppOS JavaScript\nDESCRIPTION: This comprehensive example demonstrates creating a UI for displaying and updating calorie information using the CALORIE sensor in ZeppOS. It includes custom UI components and event handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const calorie = hmSensor.createSensor(hmSensor.id.CALORIE)\n\n    const currentText = new TextByLine({\n      text: `current:${calorie.current};target:${calorie.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${calorie.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = calorie.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const calorieChangeListener = () => {\n      calorie.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: calorieChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Weight Target Documentation in JSX\nDESCRIPTION: This code imports content from a referenced MDX file that contains the documentation for the hmSetting.getWeightTarget API function, and then renders that content directly in the current file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getWeightTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getWeightTarget.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Music Event Listener Example\nDESCRIPTION: Example of registering a callback for music change events to log the current song name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(\"The current song's name: \" + music.title + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Using onGesture Function in JavaScript\nDESCRIPTION: Demonstrates how to use the onGesture function in a ZeppOS application. It imports the necessary functions and constants, then registers a gesture event listener for the up gesture.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onGesture, GESTURE_UP } from '@zos/interaction'\n\nonGesture({\n  callback: (event) => {\n    if (event === GESTURE_UP) {\n      console.log('up')\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating HISTOGRAM Widget in Zepp OS\nDESCRIPTION: Demonstrates how to import and create a HISTOGRAM widget using the @zos/ui library. This snippet shows the basic structure for initializing the widget with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst histoGram = createWidget(widget.HISTOGRAM, Param)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Heart Rate Summary in TypeScript\nDESCRIPTION: Gets daily heart rate statistics including maximum heart rate information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetDailySummary(): Result\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Widget - ZeppOS JavaScript\nDESCRIPTION: Basic example of creating a DIALOG widget instance using the ZeppOS UI framework. Shows how to import required components and create a basic dialog widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/DIALOG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst dialog = createWidget(widget.DIALOG, Param)\n```\n\n----------------------------------------\n\nTITLE: Simplified Calling Method in TypeScript\nDESCRIPTION: Shows a simplified alternative function signature for onDigitalCrown that directly accepts a callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onDigitalCrown.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onDigitalCrown(callback: (key: Key, degree: Degree) => void): void\n```\n\n----------------------------------------\n\nTITLE: Using pauseDropWristScreenOff Function in JavaScript\nDESCRIPTION: Example showing how to use the pauseDropWristScreenOff function to suspend wrist rest behavior for 60 seconds using the ZeppOS display API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/pauseDropWristScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pauseDropWristScreenOff } from '@zos/display'\n\npauseDropWristScreenOff({\n  duration: 60000,\n})\n```\n\n----------------------------------------\n\nTITLE: Using getDiskInfo Function in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the getDiskInfo function to retrieve disk information, specifically showing how to access the total disk space.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/device/getDiskInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDiskInfo } from '@zos/device'\n\nconst { total } = getDiskInfo()\nconsole.log(total)\n```\n\n----------------------------------------\n\nTITLE: Implementing PICK_DATE Widget with Event Handling in ZeppOS\nDESCRIPTION: Comprehensive example showing how to create a PICK_DATE widget with specific properties, add a confirmation button, and retrieve the selected date values when the user confirms. Demonstrates practical application of the widget in a page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PICK_DATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const pick_date_date = createWidget(widget.PICK_DATE)\n    pick_date_date.setProperty(prop.MORE, {\n      w: 480,\n      x: 20,\n      y: 120,\n      startYear: 2000,\n      endYear: 2030,\n      initYear: 2021,\n      initMonth: 2,\n      initDay: 3\n    })\n\n    const confirm = createWidget(widget.TEXT, {\n      x: 0,\n      y: 400,\n      w: 480,\n      h: 80,\n      text_size: 42,\n      color: 0xffffff,\n      text: 'confirm'\n    })\n\n    confirm.addEventListener(event.CLICK_UP, (info) => {\n      const dateObj = pick_date_date.getProperty(prop.MORE, {})\n      const { year, month, day } = dateObj\n\n      console.log('year', year)\n      console.log('month', month)\n      console.log('day', day)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Page Brightness Duration Example in JavaScript\nDESCRIPTION: Example usage of setPageBrightTime function to set the screen brightness duration to 60000 milliseconds. The function returns 0 on success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setPageBrightTime.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setPageBrightTime } from '@zos/display'\n\nconst result = setPageBrightTime({\n  brightTime: 60000,\n})\n\nif (result === 0) {\n  console.log('setPageBrightTime success')\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified setAutoBrightness Function Type in TypeScript\nDESCRIPTION: This snippet shows a simplified TypeScript function type for setAutoBrightness. It takes a boolean parameter directly instead of an Option object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setAutoBrightness(autoBright: boolean): void\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example Usage of getTemperatureUnit\nDESCRIPTION: Example showing how to import and use the getTemperatureUnit function to check if the configured temperature unit is Celsius.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getTemperatureUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTemperatureUnit, TEMPERATURE_UNIT_CENTIGRADE } from '@zos/settings'\n\nconst temperatureUnit = getTemperatureUnit()\n\nif (temperatureUnit === TEMPERATURE_UNIT_CENTIGRADE) {\n  console.log('centigrade')\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Single Heart Rate Measurement Change Event in TypeScript\nDESCRIPTION: Registers the callback function for heart rate single measurement change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonLastChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating Fat Burning Sensor Instance\nDESCRIPTION: Initializes a new Fat Burning sensor instance using the hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fatburn = hmSensor.createSensor(hmSensor.id.FAT_BURRING)\n```\n\n----------------------------------------\n\nTITLE: Defining getScrollTop Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getScrollTop function, which returns a Result type representing the vertical scroll position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/getScrollTop.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getScrollTop(): Result\n```\n\n----------------------------------------\n\nTITLE: SecondaryWidget Type Definition\nDESCRIPTION: TypeScript type definition for the SecondaryWidget constructor function, showing the function signature and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/SecondaryWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SecondaryWidget(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Listener in Zepp OS\nDESCRIPTION: Example of implementing a message listener using the messaging.peerSocket.addListener API. The code demonstrates how to receive binary data, convert it to UTF-8 string, parse JSON, and handle different message commands.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/messaging.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmessaging.peerSocket.addListener('message', (payload) => {\n  // The Buffer here is polyfill.\n  const message = JSON.parse(Buffer.from(payload).toString('utf-8'))\n\n  if (message.type === 'command') {\n    switch (message.name) {\n      case GET_NOTE_LIST:\n        const notes = settings.settingsStorage.getItem('notes')\n        const noteBuffer = Buffer.from(notes)\n        messaging.peerSocket.send(noteBuffer.buffer)\n        break\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using BodyTemperature Sensor Example\nDESCRIPTION: Example showing how to import and initialize the BodyTemperature sensor and get current temperature reading.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BodyTemperature.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BodyTemperature } from '@zos/sensor'\n\nconst bodyTemperature = new BodyTemperature()\n\nbodyTemperature.getCurrent()\n```\n\n----------------------------------------\n\nTITLE: Defining SysProGetDouble Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for SysProGetDouble. It takes a string key as input and returns a result, which is implicitly typed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Device Info Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the getDeviceInfo function that returns device information like screen dimensions, shape, and other device characteristics.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/device/getDeviceInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDeviceInfo(): Result\n```\n\n----------------------------------------\n\nTITLE: Destroying Page in Zepp OS (JavaScript)\nDESCRIPTION: The Page onDestroy function is called when a page is being destroyed. It takes no parameters and returns no value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/life-cycle.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Mini Program Registration Example in JavaScript\nDESCRIPTION: Example of registering a Zepp OS Mini Program with global data and lifecycle callbacks. Demonstrates how to define globalData, onCreate, and onDestroy handlers in the app.js file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/App.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nApp({\n  globalData: {\n    text: 'Hello Zepp OS',\n  },\n  onCreate() {\n    console.log('onCreate')\n    console.log(this.globalData.text)\n  },\n  onDestroy() {\n    console.log('onDestroy')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Type Definition - TypeScript\nDESCRIPTION: Type definition for the createWidget function showing its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/createWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(widgetId: WIDGET_ID, option?: Option) => widget: WIDGET\n```\n\n----------------------------------------\n\nTITLE: Implementing BUTTON Widgets with Various Styles\nDESCRIPTION: This example demonstrates creating two different BUTTON widgets: one with image backgrounds and another with color backgrounds. It also shows how to set click handlers and modify button properties dynamically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img_button = createWidget(widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    createWidget(widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Router Replace Usage Example in JavaScript\nDESCRIPTION: Example showing how to use the replace function to navigate to a new page with parameters. Demonstrates importing the function and calling it with a URL and query parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/router/replace.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { replace } from '@zos/router'\n\nreplace({\n  url: 'page/index',\n  params: 'type=1',\n})\n```\n\n----------------------------------------\n\nTITLE: Example Usage of setLaunchAppTimeout and clearLaunchAppTimeout in JavaScript\nDESCRIPTION: Example showing how to import and use setLaunchAppTimeout to schedule a Mini Program launch in 1 second, and how to cancel it using clearLaunchAppTimeout. The example demonstrates using the Time sensor to get the current time for scheduling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/setLaunchAppTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLaunchAppTimeout, clearLaunchAppTimeout } from '@zos/router'\nimport { Time } from '@zos/sensor'\n\nconst time = new Time()\nconst timeoutId = setLaunchAppTimeout({\n  url: 'pages/js_widget_sample',\n  appId: 1000001,\n  utc: time.getTime() + 1000,\n})\n\nclearLaunchAppTimeout({\n  timeoutId,\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Vibration Control Example in ZeppOS\nDESCRIPTION: Demonstrates the full implementation of vibration control including initialization, configuration, start/stop functions, and proper cleanup in the page lifecycle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n\nfunction click() {\n  vibrate.stop()\n  vibrate.scene = 25\n  vibrate.start()\n}\n\nclick()\n\nPage({\n  onDestroy() {\n    vibrate && vibrate.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getItem Method Type in TypeScript\nDESCRIPTION: Type definition for the getItem method, which retrieves a stored value by its key name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result: string\n```\n\n----------------------------------------\n\nTITLE: Starting Vibration\nDESCRIPTION: Shows how to start a vibration scene. Must be followed by a stop() call when vibration is finished.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Fat Burning Sensor Instance\nDESCRIPTION: Initializes a new Fat Burning sensor instance using the hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fatburn = hmSensor.createSensor(hmSensor.id.FAT_BURRING)\n```\n\n----------------------------------------\n\nTITLE: Setting Page Brightness Duration Example in JavaScript\nDESCRIPTION: Example usage of setPageBrightTime function to set the screen brightness duration to 60000 milliseconds. The function returns 0 on success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setPageBrightTime.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setPageBrightTime } from '@zos/display'\n\nconst result = setPageBrightTime({\n  brightTime: 60000,\n})\n\nif (result === 0) {\n  console.log('setPageBrightTime success')\n}\n```\n\n----------------------------------------\n\nTITLE: GetWeightUnit Function Type Definition in TypeScript\nDESCRIPTION: Type definition for the getWeightUnit function that returns a numeric result representing the weight unit setting.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getWeightUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getWeightUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Implementing TEXT Widget with Event Handling and Custom Font\nDESCRIPTION: Shows a more complex example of creating TEXT widgets with event handling, custom fonts, and internationalization. It includes two text widgets: one with click event handling and another with a custom font and multi-language support.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, prop, text_style, event } from '@zos/ui'\n\nPage({\n  build() {\n    const text = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO, Zepp OS',\n    })\n\n    text.addEventListener(event.CLICK_DOWN, (info) => {\n      text.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n\n    const textWithFont = createWidget(widget.TEXT, {\n      x: 96,\n      y: 300,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      font: 'fonts/custom.ttf',\n      text_i18n: {\n        'en-US': 'Hello Zepp OS'\n        'zh-CN': '你好 Zepp OS'\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Continuous Heart Rate Measurement Callback in TypeScript\nDESCRIPTION: This snippet demonstrates how to start continuous heart rate measurement and register a callback function for measurement results in TypeScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Information in TypeScript\nDESCRIPTION: Defines the updateInfo method signature used to manually trigger sleep data updates. The system updates sleep data every 30 minutes by default.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateInfo(): void\n```\n\n----------------------------------------\n\nTITLE: Defining mstPrepare Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the mstPrepare function. It takes a Profile parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstPrepare.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstPrepare(profile: Profile): void\n```\n\n----------------------------------------\n\nTITLE: Using getApp Function in Zepp OS Application\nDESCRIPTION: Example showing how to initialize an app with global data and access it using getApp(). Demonstrates the usage of app lifecycle methods and global data access.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/getApp.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    text: 'Hello Zepp OS',\n  },\n  onCreate() {\n    console.log('onCreate')\n    console.log(this.globalData.text)\n  },\n  onDestroy() {\n    console.log('onDestroy')\n  },\n})\n\nconst app = getApp()\nconsole.log(app._options.globalData.text)\n```\n\n----------------------------------------\n\nTITLE: DataWidget Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the DataWidget constructor function, showing the function signature and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/DataWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction DataWidget(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Complete IMG_ANIM Implementation Example in ZeppOS\nDESCRIPTION: A full implementation example showing how to create an IMG_ANIM widget, specify animation properties, start the animation, and handle click events to restart the animation when it's not running.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const imgAnimation = hmUI.createWidget(hmUI.widget.IMG_ANIM, {\n      anim_path: 'anim',\n      anim_prefix: 'animation',\n      anim_ext: 'png',\n      anim_fps: 60,\n      anim_size: 36,\n      repeat_count: 1,\n      anim_status: 3,\n      x: 208,\n      y: 230,\n      anim_complete_call: () => {\n        console.log('animation complete')\n      }\n    })\n\n    imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n    imgAnimation.addEventListener(hmUI.event.CLICK_DOWN, () => {\n      const isRunning = imgAnimation.getProperty(hmUI.prop.ANIM_IS_RUNINNG)\n\n      if (!isRunning) {\n        imgAnimation.setProperty(hmUI.prop.ANIM_STATUS, hmUI.anim_status.START)\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters During Page Navigation in ZeppOS\nDESCRIPTION: Demonstrates how to pass parameters from one page to another using the push API. The example shows pageA.js passing id and type parameters to pageB.js during navigation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'path/to/pageB',\n  params: {\n    id: '0',\n    type: 'normal'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Drawing a Polygon Outline on Canvas in Zepp OS\nDESCRIPTION: Illustrates drawing a polygon outline using an array of coordinates with cyan color on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst coordinateArray = [\n  { x: 233, y: 30 },\n  { x: 130, y: 230 },\n  { x: 400, y: 200 },\n  { x: 233, y: 30 }\n]\n\ncanvas.strokePoly({\n  data_array: coordinateArray,\n  color: 0x00ffff\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Accelerometer Change Event Listener in TypeScript\nDESCRIPTION: Registers a callback function to be called when accelerometer data changes. The callback function doesn't receive any parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Refreshing Individual Items in CYCLE_IMAGE_TEXT_LIST\nDESCRIPTION: This snippet demonstrates how to refresh a specific item in the CYCLE_IMAGE_TEXT_LIST widget, restoring it to its original state after modifying its properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setProperty(prop.ITEM_REFRESH, 0) // 0 is the item index, starting from 0\n```\n\n----------------------------------------\n\nTITLE: Using setProperty to Modify UI Widget Properties in ZeppOS\nDESCRIPTION: Example of using setProperty to change properties of UI widgets. Demonstrates hiding a button and modifying multiple properties of a text widget using the MORE property to update position, content, and appearance.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\nbutton.setProperty(hmUI.prop.VISIBLE, false)\n\nconst text = hmUI.createWidget(hmUI.widget.TEXT, Param)\ntext.setProperty(hmUI.prop.MORE, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 200,\n  text: 'hello',\n  color: 0x34e073,\n  align_h: hmUI.align.LEFT\n})\n```\n\n----------------------------------------\n\nTITLE: Using offGesture to Cancel Gesture Event Listeners in JavaScript\nDESCRIPTION: Example demonstrating how to register a gesture event listener with onGesture and then cancel it using offGesture. The example shows the complete flow of importing, setting up a callback, registering, and then unregistering the gesture listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/offGesture.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onGesture, offGesture, GESTURE_UP } from '@zos/interaction'\n\nconst gestureCallback = (event) => {\n  if (event === GESTURE_UP) {\n    console.log('up')\n  }\n\n  return true\n}\n\nonGesture({\n  callback: gestureCallback,\n})\n\noffGesture()\n```\n\n----------------------------------------\n\nTITLE: Configuring Widget in app.json for Zepp OS\nDESCRIPTION: JSON configuration snippet for adding a SecondaryWidget to the app.json file in a Zepp OS project.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/secondary-widget.md#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"targets\": {\n    \"466x466-gtr-4\": {\n      \"module\": {\n        \"page\": {\n          \"pages\": [\n            \"page/index\"\n          ]\n        },\n        \"app-side\": {\n          \"path\": \"app-side/index\"\n        },\n        \"setting\": {\n          \"path\": \"setting/index\"\n        },\n        \"secondary-widget\": {\n          \"widgets\": [\n            {\n              \"path\": \"secondary-widget/index\",\n              \"icon\": \"icon.png\",\n              \"name\": \"widget-demo\",\n              \"runtime\": {\n                \"type\": \"js\"\n              }\n            }\n          ]\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Displaying Heart Rate Position Image Using Docusaurus useBaseUrl\nDESCRIPTION: Renders an image showing the heart rate position on the watchface using the useBaseUrl hook, with width set to 300 pixels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/watchface/guides/create.md#2025-04-07_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={useBaseUrl('/img/docs/guides/tools/watchface/hr_pos.png')} width=\"300\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Images with useBaseUrl in React for Zepp OS Documentation\nDESCRIPTION: These code snippets show how to use the useBaseUrl function to display multiple images in the documentation. Each snippet sets the image source and width using JSX.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/watchface/guides/create.md#2025-04-07_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={useBaseUrl('/img/docs/guides/tools/watchface/hr_pos.png')} width=\"300\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  <img src={useBaseUrl('/img/zh-cn/docs/watchface/lesson/pointer_pos_info.png')} width=\"300\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Storage removeItem Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the removeItem method which deletes a value stored by the key name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => void\n```\n\n----------------------------------------\n\nTITLE: Accessing Weather and Tide Data in JavaScript\nDESCRIPTION: This example shows how to create a Weather instance, retrieve forecast data, and iterate through the forecast and tide information. It demonstrates accessing various properties of the returned data structures.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Weather.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Weather } from '@zos/sensor'\n\nconst weather = new Weather()\nconst { forecastData, tideData, cityName } = weather.getForecast()\n\nconsole.log(cityName)\n\nfor (let i = 0; i < forecastData.count; i++) {\n  const element = forecastData.data[i]\n  console.log('Index' + element.index)\n  console.log('Highest temperature' + element.high)\n  console.log('Lowest temperature' + element.low)\n}\n\nfor (let i = 0; i < tideData.count; i++) {\n  const element = tideData.data[i]\n  console.log('Sunrise' + element.sunrise.hour + element.sunrise.minute)\n  console.log('Sunset' + element.sunset.hour + element.sunset.minute)\n}\n```\n\n----------------------------------------\n\nTITLE: Using BodyTemperature Sensor Example\nDESCRIPTION: Example showing how to import and initialize the BodyTemperature sensor and get current temperature reading.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BodyTemperature.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BodyTemperature } from '@zos/sensor'\n\nconst bodyTemperature = new BodyTemperature()\n\nbodyTemperature.getCurrent()\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Functions in JavaScript for Zepp OS\nDESCRIPTION: This code snippet checks for the availability of a native timer API and implements setTimeout, setInterval, clearTimeout, clearInterval, setImmediate, and clearImmediate functions if they're not already defined. It uses a global object detection mechanism to ensure compatibility across different JavaScript environments.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/polyfill/setTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isHmTimerDefined() {\n  return typeof timer !== 'undefined'\n}\n\nfunction getGlobal() {\n  if (typeof self !== 'undefined') {\n    return self\n  }\n  if (typeof window !== 'undefined') {\n    return window\n  }\n  if (typeof global !== 'undefined') {\n    return global\n  }\n  if (typeof globalThis !== 'undefined') {\n    return globalThis\n  }\n\n  throw new Error('unable to locate global object')\n}\n\nconst globalNS = getGlobal()\n\nif (typeof setTimeout === 'undefined' && isHmTimerDefined()) {\n  globalNS.clearTimeout = function clearTimeout(timerRef) {\n    timerRef && timer.stopTimer(timerRef)\n  }\n\n  globalNS.setTimeout = function setTimeout(func, ns) {\n    const timer1 = timer.createTimer(\n      ns || 1,\n      Number.MAX_SAFE_INTEGER,\n      function () {\n        globalNS.clearTimeout(timer1)\n        func && func()\n      },\n      {}\n    )\n\n    return timer1\n  }\n\n  globalNS.clearImmediate = function clearImmediate(timerRef) {\n    timerRef && timer.stopTimer(timerRef)\n  }\n\n  globalNS.setImmediate = function setImmediate(func) {\n    const timer1 = timer.createTimer(\n      1,\n      Number.MAX_SAFE_INTEGER,\n      function () {\n        globalNS.clearImmediate(timer1)\n        func && func()\n      },\n      {}\n    )\n\n    return timer1\n  }\n\n  globalNS.clearInterval = function clearInterval(timerRef) {\n    timerRef && timer.stopTimer(timerRef)\n  }\n\n  globalNS.setInterval = function setInterval(func, ms) {\n    const timer1 = timer.createTimer(\n      1,\n      ms,\n      function () {\n        func && func()\n      },\n      {}\n    )\n\n    return timer1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Heart Rate in TypeScript\nDESCRIPTION: Gets the current heart rate measurement. This method needs to be used in the 'onCurrentChange' callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Using onGesture Function in JavaScript\nDESCRIPTION: Demonstrates how to use the onGesture function in a ZeppOS application. It imports the necessary functions and constants, then registers a gesture event listener for the up gesture.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onGesture, GESTURE_UP } from '@zos/interaction'\n\nonGesture({\n  callback: (event) => {\n    if (event === GESTURE_UP) {\n      console.log('up')\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NVM Environment Variables\nDESCRIPTION: Environment variable configuration required for NVM to function properly in Unix-based systems. These lines should be added to the ~/.bashrc file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/Basic-environment-construction.mdx#2025-04-07_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n----------------------------------------\n\nTITLE: Type Definition for offDigitalCrown Function in TypeScript\nDESCRIPTION: The TypeScript function signature for offDigitalCrown which takes no parameters and returns void. This function is available from API_LEVEL 2.0 and is used to cancel digital crown rotation event listeners.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/offDigitalCrown.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction offDigitalCrown(): void\n```\n\n----------------------------------------\n\nTITLE: Registering Per-Hour Callback in TypeScript\nDESCRIPTION: Shows how to register a callback function that runs at the end of every hour. Available from API_LEVEL 3.6.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nonPerHourEnd(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Digital Crown Event Handler Type Definition\nDESCRIPTION: TypeScript type definition for the digital crown event handler function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onDigitalCrown.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onDigitalCrown(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Defining checkSystemApp Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the checkSystemApp function. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/checkSystemApp.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction checkSystemApp(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Creating Text Widget with hmUI in Zepp OS 2.0\nDESCRIPTION: Example of creating a text widget using the hmUI module in Zepp OS 2.0. This snippet shows how to import the hmUI module using ESM syntax and create a TEXT widget with the same properties as in the 1.0 version.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as hmUI from '@zos/ui'\n\nPage({\n  build() {\n    const text = hmUI.createWidget(hmUI.widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: WEAR Sensor Event Callback Type Definition in TypeScript\nDESCRIPTION: Defines the type for the WEAR sensor event callback function, which takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WEAR.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Opening a Mini-Application with Parameters in JavaScript\nDESCRIPTION: Example of using the launchApp function to open a mini-application with ID 1000001, specifying the page path and passing parameters. The params object will be automatically converted to a string.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/router/launchApp.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { launchApp } from '@zos/router'\n\nlaunchApp({\n  appId: 1000001,\n  url: 'pages/js_widget_sample',\n  params: {\n    type: 1,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Hour Format in TypeScript\nDESCRIPTION: Shows how to get the current system time format (12-hour or 24-hour) using the Time sensor. Available from API_LEVEL 2.1.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetHourFormat(): number\n```\n\n----------------------------------------\n\nTITLE: Creating a Zepp OS Widget Project with Zeus CLI\nDESCRIPTION: Command to create a new Widget project template using the Zeus CLI tool.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/secondary-widget.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nzeus create widget-demo\n```\n\n----------------------------------------\n\nTITLE: Type Definition for gotoHome Function\nDESCRIPTION: TypeScript type definition showing the gotoHome function signature that takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/gotoHome.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Converting String to ArrayBuffer in JavaScript\nDESCRIPTION: Example of using the stringToBuffer function to convert a string to an ArrayBuffer in Zepp OS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/stringToBuffer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stringToBuffer } from '@zos/utils'\n\nconst buffer = stringToBuffer('Hello Zepp OS')\n```\n\n----------------------------------------\n\nTITLE: Using writeFileSync with ArrayBuffer and String Data in ZeppOS\nDESCRIPTION: Example demonstrates how to use writeFileSync to write both binary (ArrayBuffer) data and text content to files. The example shows setting the path, data to write, and encoding options for string data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { writeFileSync } from '@zos/fs'\n\nconst buffer = new ArrayBuffer(4)\nwriteFileSync({\n  path: 'test.txt',\n  data: buffer,\n})\n\nwriteFileSync({\n  path: 'content.txt',\n  data: 'some content...',\n  options: {\n    encoding: 'utf8',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CALORIE Sensor UI in ZeppOS JavaScript\nDESCRIPTION: This comprehensive example demonstrates creating a UI for displaying and updating calorie information using the CALORIE sensor in ZeppOS. It includes custom UI components and event handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const calorie = hmSensor.createSensor(hmSensor.id.CALORIE)\n\n    const currentText = new TextByLine({\n      text: `current:${calorie.current};target:${calorie.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${calorie.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = calorie.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const calorieChangeListener = () => {\n      calorie.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: calorieChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating CheckboxGroup Widget with StateButton in Zepp OS\nDESCRIPTION: Basic example of creating a CHECKBOX_GROUP widget with its required parameters, then adding STATE_BUTTON children as selectable options. The code demonstrates initialization and setting checked states for specific buttons.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CHECKBOX_GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst checkGroup = createWidget(widget.CHECKBOX_GROUP, checkboxGroupParam)\nconst stateButton = createWidget(widget.STATE_BUTTON, stateButtonParam)\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageBuilder and Establishing Connection in Device App\nDESCRIPTION: This snippet shows how to import necessary polyfills, instantiate MessageBuilder, and establish a Bluetooth connection in the Device App's lifecycle methods. It also demonstrates proper connection destruction to prevent memory leaks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './shared/device-polyfill'\nimport { MessageBuilder } from './shared/message'\n\n// need to pass in the appId\nconst appId = 27280\nconst messageBuilder = new MessageBuilder({ appId })\n\nApp({\n  globalData: {\n    messageBuilder: messageBuilder,\n  },\n  onCreate(options) {\n    console.log('app on create invoke')\n    // establish connection\n    messageBuilder.connect()\n  },\n\n  onDestroy(options) {\n    console.log('app on destroy invoke')\n    messageBuilder.disConnect()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating STROKE_RECT Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a STROKE_RECT widget using the createWidget function from the @zos/ui module. It specifies the widget type and parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/STROKE_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst strokeRect = createWidget(widget.STROKE_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distance Unit Setting Type Definition - TypeScript\nDESCRIPTION: Type definition showing the function signature for getMileageUnit() which returns a number indicating the distance unit preference\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getMileageUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Function Signature for setScreenOff in TypeScript\nDESCRIPTION: TypeScript function signature for the setScreenOff function that sets the device screen to rest mode. The function returns a Result type, which is a number indicating success (0) or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setScreenOff(): Result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Heart Rate Summary in TypeScript\nDESCRIPTION: Gets daily heart rate statistics including maximum heart rate information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetDailySummary(): Result\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Download Task in JavaScript\nDESCRIPTION: Example showing how to create and cancel a download task using the network.downloader module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/download-file.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst downloadTask = network.downloader.downloadFile({\n  url: 'https://docs.zepp.com/zh-cn/img/logo.png',\n  headers: { key: 121 },\n  timeout: 60000\n})\n\ndownloadTask.cancel()\n```\n\n----------------------------------------\n\nTITLE: Importing getScreenType API Documentation Content\nDESCRIPTION: Imports documentation content from a MDX file containing reference material for the hmSetting.getScreenType() API. Uses a relative import path to access content from the reference directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getScreenType.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getScreenType.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for renameSync in ZeppOS File System API\nDESCRIPTION: Type signature of the renameSync function, showing it accepts an Option object and returns a Result value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/renameSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction renameSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Function Signature for hmFS.SysProGetInt in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for hmFS.SysProGetInt, specifying the input parameter and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Defining the Replace Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the replace function, which takes an Option object parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/replace.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction replace(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Stage Constants in TypeScript\nDESCRIPTION: This snippet shows how to get the sleep stage constant values using the getStageConstantObj() method. These constants are used to interpret the sleep stage data returned by getStage().\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetStageConstantObj(): StageConstants\n```\n\n----------------------------------------\n\nTITLE: Compass.getDirection Method Definition\nDESCRIPTION: Method to get the current direction of the watch's 12 o'clock position. Returns one of eight cardinal directions as a string (N, NE, E, SE, S, SW, W, NW).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetDirection(): string\n```\n\n----------------------------------------\n\nTITLE: Using readSync to Read File Data in JavaScript\nDESCRIPTION: Example of using the readSync function to read data from a file into an ArrayBuffer. The example demonstrates opening a file in read-only mode and reading its contents.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/readSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, readSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n\nconst buffer = new ArrayBuffer(4)\nconst result = readSync({\n  fd,\n  buffer,\n})\n\nif (result === 0) {\n  console.log('readSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Page with Parameters in ZeppOS\nDESCRIPTION: Example of using the push function from the ZeppOS router module to navigate to another page in a Mini Program. The example demonstrates passing both a URL and parameters to the destination page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/push.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'page/index',\n  params: 'type=1',\n})\n```\n\n----------------------------------------\n\nTITLE: Example Usage of setLaunchAppTimeout and clearLaunchAppTimeout in JavaScript\nDESCRIPTION: Example showing how to import and use setLaunchAppTimeout to schedule a Mini Program launch in 1 second, and how to cancel it using clearLaunchAppTimeout. The example demonstrates using the Time sensor to get the current time for scheduling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/setLaunchAppTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLaunchAppTimeout, clearLaunchAppTimeout } from '@zos/router'\nimport { Time } from '@zos/sensor'\n\nconst time = new Time()\nconst timeoutId = setLaunchAppTimeout({\n  url: 'pages/js_widget_sample',\n  appId: 1000001,\n  utc: time.getTime() + 1000,\n})\n\nclearLaunchAppTimeout({\n  timeoutId,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining mstGetProfileInstance Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for mstGetProfileInstance. It takes a ProfileName (string) and ConnectId (number) as parameters and returns a Result (number or undefined).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ble/mstGetProfileInstance.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstGetProfileInstance(profileName: ProfileName, connectId: ConnectId): Result\n```\n\n----------------------------------------\n\nTITLE: Register Compass Change Event - TypeScript\nDESCRIPTION: TypeScript method signature for registering a compass direction change event listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Registering Battery Change Event Callback in TypeScript\nDESCRIPTION: Method to register a callback function that will be triggered when the device's battery level changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Battery.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Select Component Type Definition in TypeScript\nDESCRIPTION: Defines the basic type signature for the Select component in Zepp OS, showing that it accepts Props and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/app-settings-api/ui/select.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Simplified checkSystemApp Function Signature in TypeScript\nDESCRIPTION: This snippet shows a simplified TypeScript function signature for the checkSystemApp function. It takes an appId number as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/checkSystemApp.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction checkSystemApp(appId: number): void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for setScrollLock in ZeppOS\nDESCRIPTION: The TypeScript type definition for the setScrollLock function, which accepts an Option object parameter and returns void. This function is available from API_LEVEL 2.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/setScrollLock.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setScrollLock(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_PROGRESS Widget\nDESCRIPTION: Basic widget creation code showing the constructor syntax and required parameter object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollTo Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the scrollTo function that accepts an Option object parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/scrollTo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollTo(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Using localStorage in ZeppOS JavaScript\nDESCRIPTION: Example of using localStorage in ZeppOS to store, retrieve, and manage data. This demonstrates importing the localStorage module, setting a value, retrieving values with and without default fallbacks, removing specific items, and clearing all storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { localStorage } from '@zos/storage'\n\nlocalStorage.setItem('test', 'test value')\nconst val = localStorage.getItem('test')\nconst defaultValue = localStorage.getItem('none_key', 'defaultValue')\n\nlocalStorage.removeItem('test')\nlocalStorage.clear()\n```\n\n----------------------------------------\n\nTITLE: Complete Music Control Example\nDESCRIPTION: Comprehensive example demonstrating music sensor creation, control methods usage, and property access.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst music = hmSensor.createSensor(hmSensor.id.MUSIC)\n\nmusic.audInit()\nmusic.audPlay()\nmusic.audPause()\nmusic.audPrev()\nmusic.audNext()\n\nconsole.log('The artist of song: ' + music.artist)\nconsole.log('The name of song: ' + music.title)\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.SysProGetInt Function Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.SysProGetInt function, which takes a string key and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener for STEP Sensor in ZeppOS\nDESCRIPTION: This code demonstrates how to add an event listener to the STEP sensor to detect changes in step count. The callback function will be executed when the step count changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstep.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Defining SysProSetInt64 Function Type in TypeScript\nDESCRIPTION: This TypeScript code defines the function signature for the SysProSetInt64 function. It takes a string key and a number value as parameters, and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: CIRCLE Widget Usage Example in ZeppOS\nDESCRIPTION: This example shows how to create and configure a CIRCLE widget within a ZeppOS page. It sets the circle's center to (240, 240), radius to 120, color to orange (0xfc6950), and alpha to 200.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const circle = createWidget(widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for music.audInit() Method\nDESCRIPTION: Type signature for the audInit method that initializes music control functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Destroying Page in Zepp OS (JavaScript)\nDESCRIPTION: The Page onDestroy function is called when a page is being destroyed. It takes no parameters and returns no value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/life-cycle.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating WEATHER Sensor in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a WEATHER sensor instance using the hmSensor API in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WEATHER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst weather = hmSensor.createSensor(hmSensor.id.WEATHER)\n```\n\n----------------------------------------\n\nTITLE: Building Page UI in Zepp OS (JavaScript)\nDESCRIPTION: The Page build function is responsible for drawing the UI of a page. It takes no parameters and returns no value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/device/life-cycle.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Setting App Widget Size in JavaScript\nDESCRIPTION: This example demonstrates how to use the setAppWidgetSize function to set the height of an app widget to 100 pixels. It imports the function from the @zos/ui module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/setAppWidgetSize.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setAppWidgetSize } from '@zos/ui'\n\nsetAppWidgetSize({ h: 100 })\n```\n\n----------------------------------------\n\nTITLE: Registering Continuous Heart Rate Measurement Callback in TypeScript\nDESCRIPTION: This snippet demonstrates how to start continuous heart rate measurement and register a callback function for measurement results in TypeScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonCurrentChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Displaying Pointer Position Information with Docusaurus useBaseUrl\nDESCRIPTION: Renders an image explaining pointer position information inside a paragraph tag, using useBaseUrl to reference the image with width set to 300 pixels.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/watchface/guides/create.md#2025-04-07_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  <img src={useBaseUrl('/img/zh-cn/docs/watchface/lesson/pointer_pos_info.png')} width=\"300\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Installing nvm on MacOS/Linux using curl\nDESCRIPTION: Command to download and install nvm (Node Version Manager) using curl on MacOS or Linux systems.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/Basic-environment-construction.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh\n```\n\n----------------------------------------\n\nTITLE: Type Definition for connectStatus Method in TypeScript\nDESCRIPTION: TypeScript type definition for the connectStatus method which returns a boolean indicating connection status.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmBle.mdx#2025-04-07_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n() => Result\n```\n\n----------------------------------------\n\nTITLE: Using pauseDropWristScreenOff Function in JavaScript\nDESCRIPTION: Example showing how to use the pauseDropWristScreenOff function to suspend wrist rest behavior for 60 seconds using the ZeppOS display API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/pauseDropWristScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pauseDropWristScreenOff } from '@zos/display'\n\npauseDropWristScreenOff({\n  duration: 60000,\n})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Battery Change Event Callback in TypeScript\nDESCRIPTION: Method to unregister a previously registered callback function for battery change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Battery.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Heart Rate Implementation Example\nDESCRIPTION: Example showing how to initialize heart rate sensor, get last value, and setup continuous monitoring with callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HeartRate } from '@zos/sensor'\n\nconst heartRate = new HeartRate()\nconst lastValue = heartRate.getLast()\n\nconst callback = () => {\n  console.log(heartRate.getCurrent())\n}\n\nheartRate.onCurrentChange(callback)\n\n// When not needed for use\nheartRate.offCurrentChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Simplified onGesture Function Signature in TypeScript\nDESCRIPTION: Provides a simplified TypeScript function signature for onGesture, taking a callback function as a direct parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onGesture(callback: (event: GestureEvent) => PreventDefault): void\n```\n\n----------------------------------------\n\nTITLE: Getting Current Distance - TypeScript\nDESCRIPTION: Method signature for retrieving the current distance value from the sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Distance.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\n----------------------------------------\n\nTITLE: Calculating Unwrapped Text Layout in ZeppOS\nDESCRIPTION: This example demonstrates how to calculate the width and height of single-line text that doesn't wrap. It uses the getTextLayout function with wrapped set to 0 and text_width set to 0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTextLayout } from '@zos/ui'\n\nconst { width, height } = getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 0,\n  wrapped: 0\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Defining connectStatus Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the connectStatus method which returns the current connection status.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n() => Result\n```\n\n----------------------------------------\n\nTITLE: Starting Compass Sensor - TypeScript\nDESCRIPTION: TypeScript method signature for starting the compass sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Implementing VIEW_CONTAINER with Multiple Widgets in ZeppOS\nDESCRIPTION: This code example demonstrates creating multiple VIEW_CONTAINER widgets, adding child widgets, and implementing scrolling functionality in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/VIEW_CONTAINER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst getRandomColor = () => {\n  const randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\n  function getRandomFromSection(low, high) {\n    const RANDOM = Math.random()\n    const RANGE = high - low + 1\n\n    return Math.floor(RANDOM * RANGE) + low\n  }\n\n  const colorStr = Array.from({ length: 6 }).reduce((prev, curr) => {\n    const random = getRandomFromSection(0, 15)\n    return prev + randomArr[random]\n  }, '0x')\n\n  return Number(colorStr)\n}\n\nPage({\n  build() {\n    createWidget(widget.TEXT, {\n      x: px(96),\n      y: px(40),\n      w: px(288),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(36),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'VIEW_CONTAINER'\n    })\n\n    const viewContainer = createWidget(widget.VIEW_CONTAINER, {\n      x: px(0),\n      y: px(86),\n      w: px(480),\n      h: px(400)\n    })\n\n    Array.from({ length: 5 }).forEach((_, index) => {\n      viewContainer.createWidget(widget.FILL_RECT, {\n        x: 0,\n        y: px(index * 400),\n        w: px(480),\n        h: px(400),\n        color: getRandomColor()\n      })\n\n      viewContainer.createWidget(widget.TEXT, {\n        x: px(96),\n        y: px(170) + px(index * 400),\n        w: px(288),\n        h: px(46),\n        text_size: px(36),\n        color: 0xffffff,\n        align_h: align.CENTER_H,\n        align_v: align.CENTER_V,\n        text: `INDEX: ${index}`\n      })\n    })\n\n    const viewContainerButton = createWidget(widget.VIEW_CONTAINER, {\n      x: px(0),\n      y: px(86),\n      w: px(480),\n      h: px(400),\n      z_index: 1,\n      scroll_enable: false\n    })\n\n    viewContainerButton.createWidget(widget.BUTTON, {\n      x: 0,\n      y: px(50),\n      w: px(200),\n      h: px(100),\n      text: 'Click',\n      radius: px(12),\n      normal_color: DEFAULT_COLOR,\n      press_color: DEFAULT_COLOR_TRANSPARENT,\n      click_func: () => {\n        console.log('click button')\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining App Function Type in TypeScript\nDESCRIPTION: TypeScript definition of the App function, specifying its parameters and return type. It takes an Option object as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/App.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining setAppWidgetSize Type Signature in TypeScript\nDESCRIPTION: Type definition for the setAppWidgetSize function, specifying it accepts an Option object and returns undefined.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/setAppWidgetSize.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(option: Option) => undefined\n```\n\n----------------------------------------\n\nTITLE: Initializing Main Page Component in Zepp OS\nDESCRIPTION: Main page component file that handles UI initialization and rendering. Demonstrates separation of concerns by importing styles and logic from separate files.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/code-organization.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\nimport { TEXT_STYLE } from './page.styles.js'\nimport TextClass from './text.class.js'\n\nPage({\n  state: {\n    textInstance: null\n  },\n  build() {\n    this.state.textInstance = new TextClass()\n    this.buildUI()\n  },\n  buildUI() {\n    createWidget(widget.TEXT, {\n      attr: {\n        text: this.state.textInstance.getText()\n      },\n      styles: TEXT_STYLE\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for getAppIdByName in TypeScript\nDESCRIPTION: TypeScript type definition for the getAppIdByName function that takes a string parameter and returns a numeric result. This function performs fuzzy matching of Mini Program names.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/getAppIdByName.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getAppIdByName(name: string): Result\n```\n\n----------------------------------------\n\nTITLE: Defining updateLayoutStyle() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definition for the updateLayoutStyle() method. It takes a LayoutStyle object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/updateLayoutStyle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(style: LayoutStyle) => void\n```\n\n----------------------------------------\n\nTITLE: Complete Example of hmBle Usage in JavaScript\nDESCRIPTION: A complete JavaScript example showing how to create a Bluetooth connection, handle disconnection, check status, and register a listener for connection status changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmBle.mdx#2025-04-07_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Create Connection\nhmBle.createConnect(function (index, data, size) {\n  // Receive message callback, return the received message as it is\n  hmBle.send(data, size)\n})\n\n// Disconnection\nhmBle.disConnect()\n\n// Print Bluetooth connection status\nconsole.log(hmBle.connectStatus())\n\n// Register to listen for connection status\nhmBle.addListener(function (status) {\n  // Print connection status\n  console.log(status)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating RADIO_GROUP and STATE_BUTTON Components in ZeppOS\nDESCRIPTION: Basic syntax for creating a RADIO_GROUP component and a STATE_BUTTON component in ZeppOS. The RADIO_GROUP is initialized with radioGroupParam object, while the STATE_BUTTON is initialized with stateButtonParam object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst radioGroup = createWidget(widget.RADIO_GROUP, radioGroupParam)\nconst stateButton = createWidget(widget.STATE_BUTTON, stateButtonParam)\n```\n\n----------------------------------------\n\nTITLE: BLE Send Function Type Definition - TypeScript\nDESCRIPTION: TypeScript type definition for the BLE send function. Takes an object data parameter and a numeric size parameter for sending BLE messages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/send.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction send(data: object, size: number): void\n```\n\n----------------------------------------\n\nTITLE: Defining View Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the View component in ZeppOS. It takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/app-settings-api/ui/view.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstPrepare Function in JavaScript\nDESCRIPTION: This example shows how to import the mstPrepare function from the @zos/ble module. The actual usage of the function is not shown in the provided snippet.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstPrepare.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstPrepare } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering hmUI deleteWidget Documentation in React\nDESCRIPTION: This code snippet imports the content of the deleteWidget.mdx file from the hmUI module documentation and renders it using a custom Content component. This approach is commonly used in documentation websites to modularize and reuse content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/deleteWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmUI/deleteWidget.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining addEventListener Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definition for the addEventListener method. It takes an EventId and a callback function as parameters, and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/addEventListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(eventId: EventId, callback: (event: Event) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setAppWidgetSize Function\nDESCRIPTION: TypeScript type definition showing the function signature and parameter structure for the setAppWidgetSize function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setAppWidgetSize.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => undefined\n```\n\n----------------------------------------\n\nTITLE: Defining getSwiperIndex Function Type in TypeScript\nDESCRIPTION: TypeScript definition for the getSwiperIndex function that retrieves the current swiper index. The function returns either a number (starting from 1) when in swiper mode, or undefined otherwise.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/getSwiperIndex.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction getSwiperIndex(): Result\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for SysProGetDouble\nDESCRIPTION: Type definition showing the function signature for getting double values from system storage. Takes a string key parameter and returns a number result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Using getCurrentPage to Access Page State in JavaScript\nDESCRIPTION: Example JavaScript code showing how to define a Page with state and access that state using getCurrentPage(). This demonstrates how to retrieve page properties after initialization.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/getCurrentPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n\nconst page = getCurrentPage()\nconsole.log(page._options.state.text)\n```\n\n----------------------------------------\n\nTITLE: Using px Function for Device Screen Scaling in ZeppOS\nDESCRIPTION: Demonstration of how the px function scales values differently on GTR 3 PRO and GTR 3 devices based on their actual screen sizes and configured designWidth.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in GTR 3 PRO\nconsole.log(px(100)) // 100\n\n// in GTR 3\nconsole.log(px(100)) // 95\n```\n\n----------------------------------------\n\nTITLE: Importing setBrightness Documentation in JavaScript\nDESCRIPTION: This code snippet imports the content of the setBrightness.mdx file from the hmSetting module documentation and renders it using a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/setBrightness.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Canceling Distance Change Callback in TypeScript\nDESCRIPTION: Method to cancel a previously registered distance change callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Distance.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Complete Vibration Implementation Example - ZeppOS JavaScript\nDESCRIPTION: Demonstrates a complete implementation of vibration control including initialization, starting vibration with a specific scene, and cleanup in the onDestroy lifecycle method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n\nfunction click() {\n  vibrate.stop()\n  vibrate.scene = 25\n  vibrate.start()\n}\n\nclick()\n\nPage({\n  onDestroy() {\n    vibrate && vibrate.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Chinese Lunar Year in TypeScript\nDESCRIPTION: Retrieves the Chinese lunar year using the Time sensor. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarYear(): number\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in TypeScript\nDESCRIPTION: Adds a listener function to the end of the listeners array for the specified event name. The listener function can accept any number of arguments.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\non(eventName: string, listener: (...args: any[]) => void): void\n```\n\n----------------------------------------\n\nTITLE: Using rmSync to Delete a File in JavaScript\nDESCRIPTION: Demonstrates how to use the rmSync function to delete a file named 'test.txt' and check if the operation was successful.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/rmSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rmSync } from '@zos/fs'\n\nconst result = rmSync({\n  path: 'test.txt',\n})\n\nif (result === 0) {\n  console.log('rmSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Built-in System Sound Types in TypeScript\nDESCRIPTION: Method to get the built-in system ringtone types that can be used with the start method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetSourceType(): Type\n```\n\n----------------------------------------\n\nTITLE: Drawing a Pixel on Canvas in Zepp OS\nDESCRIPTION: Illustrates drawing a single pixel at coordinates (0,0) with white color on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawPixel({\n  x: 0,\n  y: 0,\n  color: 0xffffff\n})\n```\n\n----------------------------------------\n\nTITLE: Defining removeListener Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the removeListener method which cancels the connection status listener.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering hmFS Seek Documentation Content\nDESCRIPTION: Imports MDX documentation content about the hmFS.seek() API from a reference path and renders it using a React content component wrapper.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/seek.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/seek.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Defining createModal Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the createModal function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/createModal.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createModal(option: Option): Modal\n```\n\n----------------------------------------\n\nTITLE: Defining openAssetsSync Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the openAssetsSync function, showing its parameter structure and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/openAssetsSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction openAssetsSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining addEventListener Type Signature in TypeScript\nDESCRIPTION: This snippet defines the type signature for the addEventListener method in TypeScript. It specifies the method parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/addEventListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(eventId: EventId, callback: (event: Event) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Using getAutoBrightness Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the getAutoBrightness function from the @zos/display module. It checks the auto-brightness setting and logs a message if it's turned on.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/getAutoBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getAutoBrightness } from '@zos/display'\n\nconst result = getAutoBrightness()\n\nif (result) {\n  console.log('Auto brightness setting is turned on')\n}\n```\n\n----------------------------------------\n\nTITLE: Using setScreenOff Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the setScreenOff function from the @zos/display module. It calls the function and checks the result to determine if the operation was successful.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setScreenOff } from '@zos/display'\n\nconst result = setScreenOff()\n\nif (result === 0) {\n  console.log('setScreenOff success')\n}\n```\n\n----------------------------------------\n\nTITLE: Making Simple GET Request with Fetch in Zepp OS\nDESCRIPTION: Demonstrates how to make a basic GET request using fetch() by providing a URL. This example shows the syntax for requesting data and destructuring the response to extract the data property from the body.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/fetch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = 'https://xxx.com/api/xxx'\nconst { body: { data = {} } = {} } = await fetch(url)\n```\n\n----------------------------------------\n\nTITLE: Creating Time Display Widget with Image Arrays in ZeppOS\nDESCRIPTION: Demonstrates how to create a customizable time display using the IMG_TIME widget. The widget uses image arrays for digits 0-9, supports zero padding, configurable spacing, language-specific units, and AM/PM indicators. Includes options for hour, minute and second display alignment and following behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_TIME.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// The font of array. The number of images must be 10 in order 0-9.\nconst timeArray = []\nlet timeText = hmUI.createWidget(hmUI.widget.IMG_TIME, {\n  hour_zero: 1, // Whether to make up zero.\n  hour_startX: 205,\n  hour_startY: 184,\n  hour_array: timeArray,\n  hour_space: 8, // The interval between each array.\n  // Units\n  hour_unit_sc: rootPath + 'icon/colon.png',\n  hour_unit_tc: rootPath + 'icon/colon.png',\n  hour_unit_en: rootPath + 'icon/colon.png',\n  hour_align: hmUI.align.LEFT,\n  // minute second Replaces hour.\n  minute_follow: 1, // Whether to follow.\n  second_follow: 1, // Whether to follow.\n  // omitted as above\n  am_x: 200,\n  am_x: 200, am_y: 100,\n  am_sc_path: 'am.png',\n  am_en_path: 'am_en.png'\n  // pm as above. Prefix changed from am to pm.\n})\n```\n\n----------------------------------------\n\nTITLE: Defining clearTimeout Function Type in TypeScript\nDESCRIPTION: Type definition for the clearTimeout function in Zepp OS. It takes a TimeoutID as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/clearTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clearTimeout(timeoutID: TimeoutID): void\n```\n\n----------------------------------------\n\nTITLE: Complete TIME Sensor Usage Example in ZeppOS\nDESCRIPTION: A comprehensive example that creates a TIME sensor and logs its main properties including timestamp, year, month, day, hour, minute, and second to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/TIME.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating Sensors\nconst jstime = hmSensor.createSensor(hmSensor.id.TIME)\n\nconsole.log(\n  'The time utc: ' +\n    jstime.utc +\n    ' year: ' +\n    jstime.year +\n    ' month: ' +\n    jstime.month +\n    ' day: ' +\n    jstime.day +\n    ' hour: ' +\n    jstime.hour +\n    ' minute: ' +\n    jstime.minute +\n    ' second: ' +\n    jstime.second +\n    '\\r\\n'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring app.json configVersion in ZeppOS Mini Program\nDESCRIPTION: Example of setting the configuration file version for a ZeppOS Mini Program. Currently supports 'v3', while 'v1' is deprecated.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"configVersion\": \"v3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Music Sensor Documentation in ZeppOS\nDESCRIPTION: Imports the documentation for the music sensor module from the ZeppOS reference documentation using a relative path import statement\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/sensor/MUSIC'\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Component Type in TypeScript\nDESCRIPTION: The type definition for the Slider component, showing it takes Props as an argument and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/slider.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Complete ARC Widget Implementation with Event Handling\nDESCRIPTION: A complete example showing how to create an ARC widget inside a Page component. It demonstrates setting all required properties and adding a click event listener that modifies the y-coordinate property when the arc is clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/ARC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const arc = hmUI.createWidget(hmUI.widget.ARC, {\n      x: 100,\n      y: 100,\n      w: 250,\n      h: 250,\n      start_angle: -90,\n      end_angle: 90,\n      color: 0xfc6950,\n      line_width: 20\n    })\n\n    arc.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      arc.setProperty(hmUI.prop.MORE, {\n        y: 150\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to STAND Sensor\nDESCRIPTION: Shows the basic syntax for adding an event listener to the STAND sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Creating Widgets with Specific Display Levels in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a widget with specific display level settings to control its visibility in different watch face states (normal, AOD, edit mode). The show_level property determines when the widget will be visible.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = hmUI.createWidget(hmUI.widget.IMG, {\n    x: 158,\n    y: 218,\n    w: 112,\n    h: 136,\n    alpha: 100,\n    src: \"a.png\",\n    //表示只在正常表盘和息屏下显示 在可编辑下会不创建 会返回一个虚拟控件 保证js不报错\n    show_level:hmUI.show_level.ONLY_NORMAL | hmUI.show_level.ONAL_AOD,\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Vibration\nDESCRIPTION: Shows how to start a vibration scene. Must be followed by a stop() call when vibration is finished.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvibrate.start()\n```\n\n----------------------------------------\n\nTITLE: Simplified Function Type for clearLaunchAppTimeout in TypeScript\nDESCRIPTION: Alternative simplified TypeScript type definition showing direct timeoutId parameter usage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction clearLaunchAppTimeout(timeoutId: number): void\n```\n\n----------------------------------------\n\nTITLE: Installing Zeus CLI\nDESCRIPTION: Command to install the Zepp OS command-line toolset globally using npm.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/environment.mdx#2025-04-07_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @zeppos/zeus-cli -g\n```\n\n----------------------------------------\n\nTITLE: Creating Step Sensor Instance\nDESCRIPTION: Creates a new step sensor instance using hmSensor API and logs the current step count.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/STEP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst step = hmSensor.createSensor(hmSensor.id.STEP)\n\nconsole.log(step.current)\n```\n\n----------------------------------------\n\nTITLE: Defining hmFS.SysProGetInt Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the hmFS.SysProGetInt method. It takes a string key as input and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Importing SysProSetDouble Documentation in JSX\nDESCRIPTION: This code imports documentation content for the SysProSetDouble function from the reference section and renders it. The SysProSetDouble function is part of the hmFS namespace in the ZeppOS device app API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/SysProSetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetDouble.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Complete Settings App Implementation Example\nDESCRIPTION: Comprehensive example showing state management, storage handling, UI rendering, and event handling in a settings app implementation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/app-settings/register.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  // 1. Define state\n  state: {\n    testKey: null\n  },\n  build(props) {\n    // 2. Get SettingsStorage\n    this.getStorage(props)\n\n    // 3. Logic\n    const toggleButtonMap = {\n      ['Hello Zepp OS']: 'Hello World',\n      ['Hello World']: 'Hello Zepp OS'\n    }\n\n    // 4. Return Render Function\n    return Button({\n      label: this.state.testKey,\n      style: {\n        fontSize: '12px',\n        borderRadius: '30px',\n        background: '#D85E33',\n        color: 'white'\n      },\n      onClick: () => {\n        // 5. Modify the data in settingsStorage in the callback function of the event\n        props.settingsStorage.setItem('testKey', toggleButtonMap[this.state.testKey])\n      }\n    })\n  },\n  getStorage(props) {\n    this.state.testKey = props.settingsStorage.getItem('testKey') || 'Hello World'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Unregistering Barometer Change Event Listener in TypeScript\nDESCRIPTION: Removes a previously registered callback function for barometer changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Importing SysProGetChars Documentation in JavaScript\nDESCRIPTION: This code snippet imports the content of the SysProGetChars.mdx file from the reference documentation and renders it using a React-like syntax. It's likely part of a documentation website or application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProGetChars.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating CIRCLE Widget in ZeppOS\nDESCRIPTION: Demonstrates how to import and create a CIRCLE widget using the ZeppOS UI framework. The createWidget function is used with the widget.CIRCLE type and a parameter object specifying the circle's properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst circle = createWidget(widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: Creating Rotated IMG Widget in ZeppOS\nDESCRIPTION: Advanced example showing how to create an IMG widget with rotation and precise positioning using center points and angles.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_hour = hmUI.createWidget(hmUI.widget.IMG)\n    img_hour.setProperty(hmUI.prop.MORE, {\n      x: 0,\n      y: 0,\n      w: 454,\n      h: 454,\n      pos_x: 454 / 2 - 27,\n      pos_y: 50 + 50,\n      center_x: 454 / 2,\n      center_y: 454 / 2,\n      src: 'hour.png',\n      angle: 30\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Drawing Ellipse on CANVAS in Zepp OS\nDESCRIPTION: Demonstrates drawing a filled ellipse on the CANVAS widget using the drawEllipse method, specifying center coordinates, radii, and color.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncanvas.drawEllipse({\n  center_x: 80,\n  center_y: 300,\n  radius_x: 60,\n  radius_y: 80,\n  color: 0xff0000\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weekly PAI Data in TypeScript\nDESCRIPTION: Method signature for getting PAI data for the past week. Returns an array of 7 numbers where index 0 is today's PAI value, index 1 is yesterday's value, and so on.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Pai.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastWeek(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Complete Compass Usage Example - JavaScript\nDESCRIPTION: Example showing how to initialize and use the compass sensor, including starting/stopping monitoring and handling direction changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Compass } from '@zos/sensor'\n\nconst compass = new Compass()\n\nconst callback = () => {\n  if (compass.getStatus()) {\n    console.log(compass.getDirection())\n    console.log(compass.getDirectionAngle())\n  }\n}\ncompass.onChange(callback)\ncompass.start()\n\n// When not needed for use\ncompass.offChange()\ncompass.stop()\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Progress Widget in ZeppOS\nDESCRIPTION: Creates a basic arc progress widget instance using hmUI.createWidget method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Listener in Zepp OS\nDESCRIPTION: Example of implementing a message listener using the messaging.peerSocket.addListener API. The code demonstrates how to receive binary data, convert it to UTF-8 string, parse JSON, and handle different message commands.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/messaging.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmessaging.peerSocket.addListener('message', (payload) => {\n  // The Buffer here is polyfill.\n  const message = JSON.parse(Buffer.from(payload).toString('utf-8'))\n\n  if (message.type === 'command') {\n    switch (message.name) {\n      case GET_NOTE_LIST:\n        const notes = settings.settingsStorage.getItem('notes')\n        const noteBuffer = Buffer.from(notes)\n        messaging.peerSocket.send(noteBuffer.buffer)\n        break\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: MST Connect Usage Example - JavaScript\nDESCRIPTION: Basic example showing how to import the mstConnect function from the @zos/ble package.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstConnect.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstConnect } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data with hmSetting.getUserData() in JavaScript\nDESCRIPTION: Demonstrates how to use the hmSetting.getUserData() function to retrieve various user data properties such as age, height, weight, gender, and nickname.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getUserData.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst age = hmSetting.getUserData().age\nconst height = hmSetting.getUserData().height\nconst weight = hmSetting.getUserData().weight\nconst gender = hmSetting.getUserData().gender\nconst nickName = hmSetting.getUserData().nickName\n```\n\n----------------------------------------\n\nTITLE: Registering a Settings App with AppSettingsPage in JavaScript\nDESCRIPTION: Basic structure for registering a Settings App using the AppSettingsPage constructor. The build lifecycle returns a RenderFunc that draws the UI.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/framework/app-settings/register.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return RenderFunc\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Content Module for hmFS.rename\nDESCRIPTION: Imports the documentation content component for the hmFS.rename API from the reference path. Uses relative path navigation to access the MDX documentation file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/rename.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/rename.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving PAI Total in TypeScript\nDESCRIPTION: Gets the current cumulative PAI value using the getTotal method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Pai.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetTotal(): number\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example Usage of getSystemInfo\nDESCRIPTION: Example showing how to import and use the getSystemInfo function to retrieve the minimum API level from system information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getSystemInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSystemInfo } from '@zos/settings'\n\nconst { minAPI } = getSystemInfo()\nconsole.log(minAPI)\n```\n\n----------------------------------------\n\nTITLE: Applying px Function for UI Component Scaling\nDESCRIPTION: Shows how to create a text widget with dimensions scaled using the px function, enabling the UI to adapt proportionally to different screen sizes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst textStyle = {\n  x: px(96),\n  y: px(40),\n  w: px(288),\n  h: px(46),\n  color: 0xffffff,\n  text_size: px(36),\n  align_h: align.CENTER_H,\n  align_v: align.CENTER_V,\n  text_style: text_style.WRAP\n}\n\nconst text = createWidget(widget.TEXT, textStyle)\n```\n\n----------------------------------------\n\nTITLE: Implementing BUTTON Widgets with Various Styles\nDESCRIPTION: This example demonstrates creating two different BUTTON widgets: one with image backgrounds and another with color backgrounds. It also shows how to set click handlers and modify button properties dynamically.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img_button = createWidget(widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    createWidget(widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Simplified setAutoBrightness Function Type in TypeScript\nDESCRIPTION: This snippet shows a simplified TypeScript function type for setAutoBrightness. It takes a boolean parameter directly instead of an Option object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setAutoBrightness(autoBright: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line on Canvas in Zepp OS\nDESCRIPTION: Demonstrates drawing a line from (100,100) to (200,100) with white color on the canvas.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CANVAS.mdx#2025-04-07_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ncanvas.drawLine({\n  x1: 100,\n  y1: 100,\n  x2: 200,\n  y2: 100,\n  color: 0xffffff\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring API Permissions in Zepp OS app.json\nDESCRIPTION: This JSON configuration adds the 'data:user.info' permission to the app.json file, allowing the application to use APIs that require this permission.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/framework/device/permission.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"data:user.info\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using localStorage API in ZeppOS - JavaScript\nDESCRIPTION: Demonstrates practical usage of the localStorage API in ZeppOS using JavaScript. This example shows how to set an item, get an item (with and without a default value), remove an item, and clear all data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { localStorage } from '@zos/storage'\n\nlocalStorage.setItem('test', 'test value')\nconst val = localStorage.getItem('test')\nconst defaultValue = localStorage.getItem('none_key', 'defaultValue')\n\nlocalStorage.removeItem('test')\nlocalStorage.clear()\n```\n\n----------------------------------------\n\nTITLE: Creating CIRCLE Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a CIRCLE widget using the ZeppOS UI framework. It specifies the circle's center coordinates, radius, color, and alpha (transparency) value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst circle = createWidget(widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: getSportData Function Signature in TypeScript\nDESCRIPTION: TypeScript declaration of the getSportData function showing the expected parameters and return type. This function retrieves sports data based on the requested type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-access/getSportData.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSportData(options: Options, callback: (callbackResult: CallbackResult) => void): Result\n```\n\n----------------------------------------\n\nTITLE: Getting Current Day of Week in TypeScript\nDESCRIPTION: Retrieves the day of the week for the current time, ranging from 1 to 7, where 1 represents Monday.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetDay(): number\n```\n\n----------------------------------------\n\nTITLE: Inbox Type Definition\nDESCRIPTION: Type definition for the getInbox method return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => Inbox\n```\n\n----------------------------------------\n\nTITLE: Complete Media Player Example in ZeppOS\nDESCRIPTION: Demonstrates a full implementation of a media player including event handling, playback control, and resource management. Shows how to set up event listeners for preparation and playback completion.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/media.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Player\nimport { create, id } from '@zos/media'\n\nconst player = create(id.PLAYER)\n\nplayer.addEventListener(player.event.PREPARE, function (result) {\n  if (result) {\n    console.log('=== prepare succeed ===')\n    player.start()\n  } else {\n    console.log('=== prepare fail ===')\n    player.release()\n  }\n})\n\nplayer.addEventListener(player.event.COMPLETE, function (result) {\n  console.log('=== play end ===')\n  player.stop()\n  player.release()\n})\n\nplayer.setSource(player.source.FILE, { file: '08-15s-16000-1ch.opus' })\n\n// User control\nplayer.prepare()\nplayer.pause()\nplayer.resume()\nplayer.stop()\nplayer.release()\n```\n\n----------------------------------------\n\nTITLE: Configuring Modules in ZeppOS app.json\nDESCRIPTION: Shows how to configure various module properties in app.json, including page, app-side, setting, app-widget, and secondary-widget configurations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": {\n    \"page\": {\n      \"pages\": [\"page/gtr-3-pro/loading\"]\n    },\n    \"app-side\": {\n      \"path\": \"app-side/index\"\n    },\n    \"setting\": {\n      \"path\": \"setting/index\"\n    },\n    \"app-widget\": {\n      \"widgets\": [\n        {\n          \"path\": \"app-widget/index\",\n          \"icon\": \"icon.png\",\n          \"name\": \"app-widget-demo\",\n          \"runtime\": {\n            \"type\": \"js\"\n          }\n        }\n      ]\n    },\n    \"secondary-widget\": {\n      \"widgets\": [\n        {\n          \"path\": \"secondary-widget/index\",\n          \"icon\": \"icon.png\",\n          \"name\": \"secondary-widget-demo\",\n          \"runtime\": {\n            \"type\": \"js\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Heart Rate Event Listener Type Definition\nDESCRIPTION: Type definition for heart rate sensor event callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining getPerformance Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getPerformance function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/getPerformance.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getPerformance(...args: Array<'memory' | 'perf'>): Result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_PROGRESS Widget in ZeppOS\nDESCRIPTION: Basic widget creation syntax showing the required hmUI.createWidget call for IMG_PROGRESS type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/IMG_PROGRESS.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgProgress = hmUI.createWidget(hmUI.widget.IMG_PROGRESS, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining getItem Method in SessionStorage API for TypeScript\nDESCRIPTION: Method signature for retrieving data from SessionStorage by key. This method accepts an optional default value that will be returned if the specified key is not found.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/storage/sessionStorage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetItem(key: string, defaultValue?: any): void\n```\n\n----------------------------------------\n\nTITLE: Explaining ZeppOS Mini Program Directory Structure using the Calories Sample App\nDESCRIPTION: A tree representation of the standard folder structure for a ZeppOS Mini Program, showing the organization of app-side components, settings, resources, pages, and utility files. This structure demonstrates best practices for organizing code in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/architecture/folder-structure.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n.\n├── app-side // companion service directory\n│ └── index.js // companion service logic, which is also the entry file for setting the app (the path can be configured in app.json)\n├── setting // set the application directory\n│ ├── i18n // set the application multilingual directory\n│ │ └── en-US.po\n│ └── index.js // set the application logic, also set the application entry file (path can be configured in app.json)\n├── app.js // Mini Program logic\n├── app.json // Mini Program configuration\n├── assets // The directory where the resource files for different devices are stored is named after the key of the targets object in app.json\n│ ├── gtr-3\n│ │ ├── icon.png\n│ │ └── image\n│ │ └── logo.png\n│ ├── gtr-3-pro\n│ │ ├── icon.png\n│ │ └─ image\n│ │ └── logo.png\n│ └── gts-3\n│ ├── icon.png\n│ └── image\n│ └── logo.png\n├── page // Device application page\n│ ├── home // device application home directory (one directory for one page is recommended)\n│ │ ├── index.page.js // page logic\n│ │ └── index.style.js // page style\n│ └── i18n // Device application multilingual directory\n│ └── en-US.po\n└── utils // Tools and functions directory\n    ├── constants.js\n    ├── fs.js\n    └── index.js\n```\n\n----------------------------------------\n\nTITLE: Registering Single Heart Rate Measurement Change Event in TypeScript\nDESCRIPTION: Registers the callback function for heart rate single measurement change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonLastChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Implementing PICK_DATE Widget with Event Handling in ZeppOS\nDESCRIPTION: Comprehensive example showing how to create a PICK_DATE widget with specific properties, add a confirmation button, and retrieve the selected date values when the user confirms. Demonstrates practical application of the widget in a page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/PICK_DATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const pick_date_date = createWidget(widget.PICK_DATE)\n    pick_date_date.setProperty(prop.MORE, {\n      w: 480,\n      x: 20,\n      y: 120,\n      startYear: 2000,\n      endYear: 2030,\n      initYear: 2021,\n      initMonth: 2,\n      initDay: 3\n    })\n\n    const confirm = createWidget(widget.TEXT, {\n      x: 0,\n      y: 400,\n      w: 480,\n      h: 80,\n      text_size: 42,\n      color: 0xffffff,\n      text: 'confirm'\n    })\n\n    confirm.addEventListener(event.CLICK_UP, (info) => {\n      const dateObj = pick_date_date.getProperty(prop.MORE, {})\n      const { year, month, day } = dateObj\n\n      console.log('year', year)\n      console.log('month', month)\n      console.log('day', day)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Simplified closeSync Function Signature in TypeScript\nDESCRIPTION: This snippet shows a simplified TypeScript function signature for closeSync, which takes a file descriptor number as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction closeSync(fd: number): Result\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Notification in JavaScript\nDESCRIPTION: JavaScript example showing how to import and use the cancel function to remove a notification from the notification center using its ID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/notification/cancel.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { cancel } from '@zos/notification'\n\ncancel(alarmID)\n```\n\n----------------------------------------\n\nTITLE: Processing Sleep Stage Data in JavaScript\nDESCRIPTION: Demonstrates how to iterate through the sleep stage data array and access individual sleep stage information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sleepStageArray = sleep.getSleepStageData()\n\nfor (int i = 0; i < sleepStageArray.length; i++) {\n  const data = sleepStageArray[i];\n  console.log(data.model)\n  console.log(data.start)\n  console.log(data.stop)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Vibration Control Example in ZeppOS\nDESCRIPTION: Demonstrates the full implementation of vibration control including initialization, configuration, start/stop functions, and proper cleanup in the page lifecycle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst vibrate = hmSensor.createSensor(hmSensor.id.VIBRATE)\n\nfunction click() {\n  vibrate.stop()\n  vibrate.scene = 25\n  vibrate.start()\n}\n\nclick()\n\nPage({\n  onDestroy() {\n    vibrate && vibrate.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining mstWriteDescriptor Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript function signature for mstWriteDescriptor. It specifies the function parameters and their types, as well as the return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstWriteDescriptor.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mstWriteDescriptor(\n  profile: Profile,\n  uuid: UUID,\n  descUUID: DescUUID,\n  data: Data,\n  length: Length,\n): Result\n```\n\n----------------------------------------\n\nTITLE: Using hmUI.setLayerScrolling to Disable Default Layer Scrolling\nDESCRIPTION: Example of disabling the continuous scrolling behavior for the default layer containing JavaScript UI components.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/setLayerScrolling.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nhmUI.setLayerScrolling(false) //关闭默认layer的scrolling\n```\n\n----------------------------------------\n\nTITLE: Initializing Page in ZeppOS (JavaScript)\nDESCRIPTION: This function is called to initialize a page. It receives a parameter passed from hmApp.gotoPage or hmApp.reloadPage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/life-cycle.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(param: string) => void\n```\n\n----------------------------------------\n\nTITLE: Removing Data with removeItem from LocalStorage (TypeScript)\nDESCRIPTION: Illustrates the use of removeItem method to delete data associated with a specific key in LocalStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nremoveItem(key: string): void\n```\n\n----------------------------------------\n\nTITLE: Verifying Virtual Network Card Installation on macOS\nDESCRIPTION: Command to list devices in the /dev directory to verify if the tap virtual network interfaces (tap0-tap15) were successfully installed on macOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/simulator/setup.md#2025-04-07_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nls /dev\n```\n\n----------------------------------------\n\nTITLE: Device Targets Configuration Example in JavaScript\nDESCRIPTION: Example of targets configuration that specifies different build configurations for various device models (GTR 3 Pro, GTR 3, GTS 3).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ...\n      }\n    },\n    \"gtr-3\": {\n      \"module\": {\n        // ...\n      }\n    },\n    \"gts-3\": {\n      \"module\": {\n        // ...\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createSysTimer Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for createSysTimer, specifying the types of input parameters and return value. It shows that the function takes a boolean for periodicity, a number for the timer period, a callback function, and an optional argument.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/timer/createSysTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createSysTimer(periodic: Periodic, period: Period, callback: Callback, arg?: Arg): Result\n```\n\n----------------------------------------\n\nTITLE: Type Definition for setProperty Method\nDESCRIPTION: TypeScript type definition showing the method signature for the setProperty function that accepts a propertyId string and a value of any type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(propertyId: string, val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Release Notes Document Structure\nDESCRIPTION: Markdown formatted release history document showing version changes, new features, optimizations and fixes across multiple releases of the Zepp OS explorer tool.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/tools/vscode-extension/release-note.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Release Notes\n---\n\n# Release History\n\n### V0.1.2 (Aug 18, 2022)\n\n#### 📈  Optimized Features\n\n- Optimize the devices selection each time you use the dev/preview/bridge function, and instead read the configuration under STATUS-build.\n\n\n### V0.1.1 (Aug 12, 2022)\n\n#### 🔧  Fixed\n\n- Fixed the issue that device selection is invalid under bridge function.\n\n#### 📈  Optimized Features\n\n- Optimize the input of host and port each time you use the dev function, and instead read the configuration under STATUS-simulator.\n\n### V0.1.0 (Aug 04, 2022)\n\n#### 🚀  New Features\n\n- zepp os explorer BUILD  supports bridge-related features.\n\n#### 📣  Changes\n\n- Starting with this version there is no reliance on the global installation of the npm package `@zeppos/zeus-cli`.\n- Running mode (terminal and GUI) switching is not supported from this version.\n\n### V0.0.3 (June 23, 2022)\n\n#### 🚀  New Features\n\n- The zepp-os-explorer view for STATUS supports adding variables, and in-line edit buttons.\n\n### V0.0.2 (June 9, 2022)\n\n#### 🚀  New Features\n\n- Add zepp-os-explorer view for USER, STATUS, BUILD related information display and provide shortcut function buttons.\n\n- Support user-defined settings: 1. the type of run mode; 2. the bottom status bar to show which shortcut keys.\n\n#### 📈  Optimized Features\n\n- The little rocket icon 🚀 in the title status bar in the upper right corner has been replaced with the ZEPP OS icon.\n\n### V0.0.1 (May 26, 2022)\n\n#### 🚀  New Features\n\n- Implement visual interaction with the npm package [@zeppos/zeus-cli](../../cli/) command.\n```\n\n----------------------------------------\n\nTITLE: Type Definition for getTimeFormat Function in TypeScript\nDESCRIPTION: TypeScript function signature for getTimeFormat API that returns a numeric Result type representing the hour format.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getTimeFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTimeFormat(): Result\n```\n\n----------------------------------------\n\nTITLE: hmFS.remove Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the hmFS.remove function, which takes a file path string and returns a numeric result code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/remove.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Current and Target Standing Hours in TypeScript\nDESCRIPTION: This snippet demonstrates how to get the current number of hours with standing behavior and the target number of hours for standing behavior using the Stand sensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): number\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetTarget(): number\n```\n\n----------------------------------------\n\nTITLE: Creating Text Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to create a basic Text widget using the createWidget function from the @zos/ui module. It sets various properties such as position, size, color, and alignment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/TEXT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst text = createWidget(widget.TEXT, Param)\n```\n\n----------------------------------------\n\nTITLE: ClickFunc Type Definition for BUTTON Widget\nDESCRIPTION: Type definition for the button click callback function, which receives the button instance as a parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n(button: Button) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weather Forecast Data in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getForecastWeather method to retrieve weather forecast data. It returns an object containing the city name, forecast data, and tide data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Weather.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetForecastWeather(): ForecastWeather\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for getScreenType Method\nDESCRIPTION: Type definition showing the function signature for getScreenType() method that returns a screenType number value\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getScreenType.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => screenType\n```\n\n----------------------------------------\n\nTITLE: Defining keyType Field Format in JavaScript for ZeppOS Watch Buttons\nDESCRIPTION: This snippet demonstrates the format for defining the keyType field in ZeppOS. It includes the button mode, number of buttons, and whether a crown exists. The format is crucial for determining watch button configurations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/designs/interaction/definition.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  {button mode}_{number of buttons} // {whether crown exists,  1 means yes, 0 means no}\n}\n```\n\n----------------------------------------\n\nTITLE: Button Component Type Definition in TypeScript\nDESCRIPTION: Defines the function signature for the Button component that takes Props as an argument and returns a RenderFunc result type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-settings-api/ui/button.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Using Sleep Sensor API in JavaScript\nDESCRIPTION: This example shows how to use the Sleep sensor API in a Zepp OS application. It demonstrates importing the Sleep class, creating an instance, retrieving sleep information, getting sleep stage constants, and iterating through sleep stages to identify wake stages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sleep } from '@zos/sensor'\n\nconst sleep = new Sleep()\nconst { score } = sleep.getInfo()\nconst sleepStageConstants = sleep.getStageConstantObj()\nconst stage = sleep.getStage()\n\nstage.forEach((i) => {\n  const { model } = i\n\n  if (model === sleepStageConstants.WAKE_STAGE) {\n    console.log('This stage is awake stage')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: EnqueueFile Usage Example\nDESCRIPTION: Example demonstrating how to enqueue a file for transfer with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileObject = onbox.enqueueFile('data://download/test.png', { type: 'image', name: 'fdsa' })\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Distance Sensor\nDESCRIPTION: Demonstrates how to register a callback function for sensor events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncalorie.addEventListener(event, callback: Callback)\n```\n\n----------------------------------------\n\nTITLE: Get Total Sleep Time Example - JavaScript\nDESCRIPTION: Demonstrates retrieving the total sleep time.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst totalTime = sleep.getTotalTime()\n```\n\n----------------------------------------\n\nTITLE: Importing hmFS Open Documentation Content\nDESCRIPTION: Import statement that references the hmFS.open API documentation from a relative MDX file path for reuse in the current page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/open.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/open.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageBuilder and Establishing Connection in Device App\nDESCRIPTION: This snippet shows how to import necessary modules, instantiate MessageBuilder, and establish a Bluetooth connection in the Device App's lifecycle methods. It also demonstrates proper connection destruction to prevent memory leaks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './shared/device-polyfill'\nimport { MessageBuilder } from './shared/message'\nimport { getPackageInfo } from '@zos/app'\nimport * as ble from '@zos/ble'\n\nApp({\n  globalData: {\n    messageBuilder: null\n  },\n  onCreate(options) {\n    console.log('app on create invoke')\n    // establish connection\n    const { appId } = getPackageInfo()\n    const messageBuilder = new MessageBuilder({ appId, appDevicePort: 20, appSidePort: 0, ble })\n    this.globalData.messageBuilder = messageBuilder\n    messageBuilder.connect()\n  },\n  onDestroy(options) {\n    console.log('app on destroy invoke')\n    messageBuilder.disConnect()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Body Temperature Type Definition\nDESCRIPTION: TypeScript interface definition for the getToday() method that returns an array of temperature measurements taken every 5 minutes throughout the day.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/BodyTemperature.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetToday(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: ReadFileSync Usage Example\nDESCRIPTION: Demonstrates how to use readFileSync to read file contents both as a buffer and as a UTF-8 encoded string.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/readFileSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from '@zos/fs'\n\nconst contentBuffer = readFileSync({\n  path: 'test.txt',\n})\n\nconst contentString = readFileSync({\n  path: 'test.txt',\n  options: {\n    encoding: 'utf8',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getTemperatureUnit Function in TypeScript\nDESCRIPTION: TypeScript function signature for getTemperatureUnit, which returns a Result type representing the temperature unit.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/settings/getTemperatureUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTemperatureUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_ANIM Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating an IMG_ANIM widget in ZeppOS. This widget allows playing pre-given images at set frame rates to create animation effects.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgAnim = hmUI.createWidget(hmUI.widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Device Info Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the getDeviceInfo function that returns device information like screen dimensions, shape, and other device characteristics.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/device/getDeviceInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDeviceInfo(): Result\n```\n\n----------------------------------------\n\nTITLE: Setting Gyroscope Frequency Mode in ZeppOS\nDESCRIPTION: Method to set the trigger frequency mode for gyroscope data readings. The mode parameter determines power consumption and update frequency, using predefined constants like FREQ_MODE_LOW, FREQ_MODE_NORMAL, or FREQ_MODE_HIGH.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetFreqMode(mode: number): void\n```\n\n----------------------------------------\n\nTITLE: Hiding Status Bar Example in ZeppOS\nDESCRIPTION: JavaScript example showing how to import and use the setStatusBarVisible function from the ZeppOS UI module. This code hides the status bar by passing false to the function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/setStatusBarVisible.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setStatusBarVisible } from '@zos/ui'\n\nsetStatusBarVisible(false)\n```\n\n----------------------------------------\n\nTITLE: Creating HISTOGRAM Widget in Zepp OS\nDESCRIPTION: Demonstrates how to import and create a HISTOGRAM widget using the @zos/ui library. This snippet shows the basic structure for initializing the widget with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst histoGram = createWidget(widget.HISTOGRAM, Param)\n```\n\n----------------------------------------\n\nTITLE: Getting Lunar Day in TypeScript\nDESCRIPTION: Shows how to get the current Chinese lunar calendar day. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarDay(): number\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Sections in ZeppOS AppSettingsPage\nDESCRIPTION: This example shows how to create a form with multiple sections in an AppSettingsPage. It includes a TextInput for a name field and a Button for starting an action, demonstrating the nested structure of UI components.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/app-settings/ui-intro.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return Section({}, [\n      Section(\n        {},\n        TextInput({\n          label: 'Name',\n        })\n      ),\n      Section(\n        {},\n        Button({\n          label: 'Start',\n          onClick() {\n            // ...\n          }\n        })\n      )\n    ])\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Weight Target in ZeppOS\nDESCRIPTION: This function retrieves the user's weight target using the hmSetting.getWeightTarget() method. The returned value is the user-set weight target in kilograms, with a default of 0 if not set.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getWeightTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => weightTarget\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = hmSetting.getWeightTarget()\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.stat in Zepp OS Mini Program\nDESCRIPTION: Example demonstrating how to use hmFS.stat to get file information and display it using hmUI widget. Shows error handling and accessing file size and modification time properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/stat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const [fs_stat, err] = hmFS.stat('test_file.txt')\n\n    if (err === 0) {\n      const { size, mtime } = fs_stat\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(0),\n        y: px(120),\n        w: px(480),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(20),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `size: ${size}; mtime: ${mtime}`\n      })\n\n    } else {\n      console.log('err:', err)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining writeFileSync Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the writeFileSync function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction writeFileSync(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Resource Directory Structure for Animation\nDESCRIPTION: Example directory structure showing how animation frame images should be organized in the assets folder\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n.\n└── assets\n        └── gtr-3\n                └── anim\n                        ├── animation_0.png\n                        ├── animation_1.png\n                        ├── animation_2.png\n                        ├── animation_3.png\n                        ├── animation_4.png\n                        └── animation_5.png\n```\n\n----------------------------------------\n\nTITLE: Using getAutoBrightness Function\nDESCRIPTION: Example showing how to import and use the getAutoBrightness function to check auto-brightness settings. Returns a boolean indicating whether auto-brightness is enabled.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/getAutoBrightness.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAutoBrightness } from '@zos/display'\n\nconst result = getAutoBrightness()\n\nif (result) {\n  console.log('Auto brightness setting is turned on')\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Previewing a Zepp OS Project\nDESCRIPTION: This command uses the Zeus CLI to compile the project code and preview it through the simulator. It should be executed at the root of the template project directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/quick-start.mdx#2025-04-07_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nzeus dev\n```\n\n----------------------------------------\n\nTITLE: Permissions Configuration in JavaScript\nDESCRIPTION: Example showing the permissions array configuration in app.json. This array lists permissions required by the app that need to be requested from the user.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"permissions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering External Content in React\nDESCRIPTION: This snippet imports a React component containing documentation for the hmFS.write() function from a relative path. It then renders this component directly in JSX.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/write.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/write.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing Sensor Event Listener Documentation in React\nDESCRIPTION: Imports documentation for the hmSensor's addEventListener method from a reference file and renders it using a React component pattern.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/addEventListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSensor/addEventListener.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using hmUI.setStatusBarVisible in JavaScript\nDESCRIPTION: Example code showing how to hide the status bar using the hmUI.setStatusBarVisible method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/setStatusBarVisible.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmUI.setStatusBarVisible(false)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Information in ZeppOS\nDESCRIPTION: Demonstrates how to get device information including screen dimensions, shape, name, key count, and device code using the hmSetting.getDeviceInfo() function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getDeviceInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => deviceInfo\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst deviceInfo = hmSetting.getDeviceInfo()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Image Widget in ZeppOS\nDESCRIPTION: Demonstrates how to create a basic image widget with click event handling. The example shows setting basic properties like position and source, and includes event listener for click interactions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img = hmUI.createWidget(hmUI.widget.IMG, {\n      x: 125,\n      y: 125,\n      src: 'zeppos.png'\n    })\n    img.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      img.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Converting settingsStorage to Object in JavaScript\nDESCRIPTION: Example of using the toObject method to convert the contents of settingsStorage into an object form in JavaScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst storageObj = settings.settingsStorage.toObject()\n\nconsole.log(storageObj)\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition - TypeScript\nDESCRIPTION: Type definition for the getSleepTarget function that returns the user's sleep target value in minutes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getSleepTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => sleepTarget\n```\n\n----------------------------------------\n\nTITLE: Using getProfile API to Access User Information in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the getProfile function to retrieve user information such as age and gender, with conditional logic based on gender value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/user/getProfile.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { getProfile, GENDER_MALE } from '@zos/user'\n\nconst { age, gender } = getProfile()\nconsole.log(age)\n\nif (gender === GENDER_MALE) {\n  console.log('male')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Widget - Complete Example\nDESCRIPTION: Demonstrates a complete implementation of creating a circle widget within a Page component. Shows how to set center coordinates, radius, color (in hexadecimal), and alpha transparency.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const circle = hmUI.createWidget(hmUI.widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining unregisterSpinEvent Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition showing unregisterSpinEvent as a function that takes no parameters and returns void\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/spinEvent/unregisterSpinEvent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.stat_asset Function in Zepp OS Mini Program\nDESCRIPTION: This example demonstrates how to use the hmFS.stat_asset function within a Zepp OS mini program. It retrieves file information for 'raw/test_file.txt' and displays the file size and modification time using a text widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/stat_asset.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const [fs_stat, err] = hmFS.stat_asset('raw/test_file.txt')\n\n    if (err === 0) {\n      const { size, mtime } = fs_stat\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(0),\n        y: px(120),\n        w: px(480),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(20),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `size: ${size}; mtime: ${mtime}`\n      })\n\n    } else {\n      console.log('err:', err)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ZeppOS UI Modules\nDESCRIPTION: Imports required UI modules for widget creation, event handling, and layout management in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createWidget,\n  widget,\n  align,\n  event,\n  updateLayout,\n  deleteWidget,\n  openInspector\n} from '@zos/ui'\n```\n\n----------------------------------------\n\nTITLE: Using resetPageBrightTime Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the resetPageBrightTime function in conjunction with setPageBrightTime. It first sets the page bright time to 60000 milliseconds, then resets it using resetPageBrightTime.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/resetPageBrightTime.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setPageBrightTime, resetPageBrightTime } from '@zos/display'\n\nsetPageBrightTime({\n  brightTime: 60000,\n})\n\nconst result = resetPageBrightTime()\n```\n\n----------------------------------------\n\nTITLE: Using Distance Sensor API in JavaScript\nDESCRIPTION: Example demonstrating how to use the Distance Sensor API, including creating an instance, getting current distance, registering a change callback, and cleaning up.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Distance.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Distance } from '@zos/sensor'\n\nconst distance = new Distance()\nconst current = distance.getCurrent()\nconst callback = () => {\n  console.log(distance.getCurrent())\n}\n\ndistance.onChange(callback)\n\n// When not needed for use\ndistance.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Defining connectStatus Type in TypeScript\nDESCRIPTION: TypeScript type definition for the connectStatus method that returns the current connection state.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n() => Result\n```\n\n----------------------------------------\n\nTITLE: Creating SLIDE_SWITCH Component in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a SLIDE_SWITCH component using the createWidget function from the @zos/ui module. It includes all the necessary parameters for customizing the switch's appearance and behavior.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst slideSwitch = createWidget(widget.SLIDE_SWITCH, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Scrolling with hmUI.setScrollView in JavaScript\nDESCRIPTION: Example implementation of a scrollable page using hmUI.setScrollView. Creates 20 pages with random background colors and text. Uses helper functions to generate random colors and demonstrates vertical scrolling setup.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setScrollView.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\nfunction getRandomFromSection(low, high) {\n  const RANDOM = Math.random()\n  const RANGE = high - low + 1\n\n  return Math.floor(RANDOM * RANGE) + low\n}\n\nPage({\n  build() {\n    const isVertical = true\n    hmUI.setScrollView(true, px(480), 20, isVertical)\n\n    const numArr = Array.from({ length: 20 }).map((_, index) => index)\n\n    numArr.forEach((num) => {\n      const backgroundColor = Array.from({ length: 6 }).reduce((prev, curr) => {\n        const random = getRandomFromSection(0, 15)\n        return prev + randomArr[random]\n      }, '0x')\n\n      hmUI.createWidget(hmUI.widget.FILL_RECT, {\n        x: 0,\n        y: px(480) * num,\n        w: px(480),\n        h: px(480),\n        color: Number(backgroundColor)\n      })\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(96),\n        y: px(200) + px(480) * num,\n        w: px(320),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(36),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `HELLO ZEPPOS ${num}`\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for CHANGE Event Callback\nDESCRIPTION: Type signature for the callback function used when registering for music sensor change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: STAND Sensor Callback Type Definition\nDESCRIPTION: TypeScript type definition for the STAND sensor callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: ItemFocusChangeFunc Callback Function Type Declaration\nDESCRIPTION: TypeScript type definition for the item focus change callback function in CYCLE_LIST. This function is called when an item gains or loses focus.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(cycleList: CycleList, index: number, isFocus: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ZeppOS API Documentation in JavaScript\nDESCRIPTION: This code imports the content of the hmFS.open API documentation from a specific file path and renders it using a React component named Content. This approach allows for modular documentation that can be easily included and reused across different pages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/open.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/open.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using SysProGetChars in JavaScript\nDESCRIPTION: Example demonstrating how to store and retrieve a string value using SysProSetChars and SysProGetChars methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetChars('js_test_char', 'hello')\nconsole.log(hmFS.SysProGetChars('js_test_char'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions in ZeppOS app.json\nDESCRIPTION: Shows how to set the permissions property in app.json, which specifies the list of permissions requested by the mini-program.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Settings App Registration in JavaScript\nDESCRIPTION: Shows the minimal implementation of registering a settings app using AppSettingsPage constructor with a build lifecycle method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/app-settings/register.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return RenderFunc\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener from Widget in JavaScript\nDESCRIPTION: Example of using removeEventListener to remove a previously added click event listener from an image widget. It demonstrates importing necessary modules, creating a widget, defining a listener function, adding the listener, and then removing it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/removeEventListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, event } from '@zos/ui'\n\nconst img_bkg = createWidget(widget.IMG)\nconst listenerFunc = (info) => {\n  console.log(info.x)\n}\n\nimg_bkg.addEventListener(event.CLICK_DOWN, listenerFunc)\nimg_bkg.removeEventListener(event.CLICK_DOWN, listenerFunc)\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters During Page Navigation in Zepp OS\nDESCRIPTION: Demonstrates how to pass parameters from pageA to pageB using the push API for page navigation. The receiving page parses the parameters in its onInit method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { push } from '@zos/router'\n\npush({\n  url: 'path/to/pageB',\n  params: {\n    id: '0',\n    type: 'normal'\n  }\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  onInit(params) {\n    const paramsObj = JSON.parse(params)\n    const { id, type } = paramsObj\n    console.log(id === '0') // true\n    console.log(type === 'normal') // true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining App Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the App function that registers a mini-program in Zepp OS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/global/App.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Type Definition for send Method in TypeScript\nDESCRIPTION: TypeScript type definition for the send method which accepts data to be sent and its size.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmBle.mdx#2025-04-07_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n(data: object, size: number) => void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for deleteWidget Method\nDESCRIPTION: Type declaration for the hmUI.deleteWidget method showing it accepts a WIDGET parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/deleteWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(widget: WIDGET) => void\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetInt to Store and Retrieve Temporary Integer Values in JavaScript\nDESCRIPTION: Example showing how to store an integer value using SysProSetInt and retrieve it using SysProGetInt. This demonstrates the complete workflow for managing temporary integer values in Zepp OS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: Receiving Parameters in a ZeppOS Page's onInit Method\nDESCRIPTION: Shows how to receive and parse parameters in pageB's onInit method. The parameters passed from the previous page are parsed from a JSON string back into an object for use within the page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  onInit(params) {\n    const paramsObj = JSON.parse(params)\n    const { id, type } = paramsObj\n    console.log(id === '0') // true\n    console.log(type === 'normal') // true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using offDigitalCrown to Unregister Digital Crown Event in JavaScript\nDESCRIPTION: Example of using offDigitalCrown to unregister a previously set digital crown rotation event listener. The example also shows how to set up the listener using onDigitalCrown and handle the event with a callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/offDigitalCrown.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onDigitalCrown, offDigitalCrown, KEY_HOME } from '@zos/interaction'\n\nconst callback = (key, degree) => {\n  if (key === KEY_HOME) {\n    console.log(degree)\n  }\n}\n\nonDigitalCrown({\n  callback,\n})\n\noffDigitalCrown()\n```\n\n----------------------------------------\n\nTITLE: Example Page Registration in JavaScript\nDESCRIPTION: A complete example showing how to register a page using the Page() constructor. It demonstrates setting initial state, implementing lifecycle methods onInit and build, and accessing the state property.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/global/Page.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Widget Property Management Example\nDESCRIPTION: Example demonstrating various ways to use setProperty() including setting visibility, multiple properties with prop.MORE, and custom dataset properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/setProperty.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\n// 设置 widegt 隐藏/显示\nconst button = createWidget(widget.BUTTON, Param)\nbutton.setProperty(prop.VISIBLE, false)\n\nconst text = createWidget(widget.TEXT, Param)\ntext.setProperty(prop.MORE, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 200,\n  text: 'hello',\n  color: 0x34e073,\n  align_h: align.LEFT\n})\n\ntext.setProperty(prop.DATASET, {\n  name: 'text1'\n})\n\nconst dataset = text.getProperty(prop.DATASET)\n```\n\n----------------------------------------\n\nTITLE: Complete BUTTON Widget Implementation Example\nDESCRIPTION: Comprehensive example showing how to create two different button types: one with image backgrounds and another with color backgrounds. Also demonstrates how to use the click_func callback to change button properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nPage({\n  build() {\n    const img_button = hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(hmUI.prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100,\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining hmUI.getScrollCurrentPage Function Type in TypeScript\nDESCRIPTION: Defines the type signature for the hmUI.getScrollCurrentPage function, which returns the current page number in a swipe-enabled view.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getScrollCurrentPage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Music Control Method Types\nDESCRIPTION: TypeScript type definitions for music control methods including initialization, play, pause, and navigation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Unregistering Blood Oxygen Change Event Listener in TypeScript\nDESCRIPTION: This method unregisters the callback function for blood oxygen measurement value changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Extended Directory Structure for Multiple Devices\nDESCRIPTION: Shows the complete folder structure for a Mini Program including assets organization for both GTR-3 and GTR-3 Pro devices.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app.js\n├── app.json\n├── assets\n│   ├── gtr-3\n│   │   ├── icon.png\n│   │   └── image\n│   │       └── logo.png\n│   └── gtr-3-pro\n│       ├── icon.png\n│       └── image\n│           └── logo.png\n...\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.stat() to Get File Information in a Zepp OS Miniapp\nDESCRIPTION: Example of using the hmFS.stat() method to retrieve file size and modification time, then displaying this information in a text widget. The code handles potential errors by checking the error code returned by the method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/stat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nPage({\n  build() {\n    const [fs_stat, err] = hmFS.stat('test_file.txt')\n\n    if (err === 0) {\n      const { size, mtime } = fs_stat\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(0),\n        y: px(120),\n        w: px(480),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(20),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `size: ${size}; mtime: ${mtime}`\n      })\n\n    } else {\n      console.log('err:', err)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Timer Documentation in ZeppOS\nDESCRIPTION: This code snippet imports content from a documentation file about creating timers in ZeppOS and renders it using JSX syntax. It demonstrates how to include external markdown content in a React-based documentation system.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/timer/createTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/timer/createTimer.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Clearing All Data from LocalStorage (TypeScript)\nDESCRIPTION: Demonstrates the clear method which removes all data stored in LocalStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Defining Toggle Component Type in TypeScript\nDESCRIPTION: Type definition for the Toggle component that takes props and optional render functions as parameters. The component returns a render function as its result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/toggle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Documentation Content\nDESCRIPTION: Imports documentation content from a reference file about the hmFS.close API method. Uses relative path import with MDX file extension.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/close.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/close.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Complete Music Player Implementation for ZeppOS\nDESCRIPTION: A comprehensive example showing how to implement a music player interface with play, pause, next, and previous controls while displaying song information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const music = hmSensor.createSensor(hmSensor.id.MUSIC)\n\n    music.audInit()\n\n    const { title, artist, isPlaying } = music\n\n    const infoText = new TextByLine({\n      text: `title:${title};artist:${artist};isPlaying:${isPlaying}`,\n      line: 0\n    }).render()\n\n    music.addEventListener(hmSensor.event.CHANGE, function () {\n      const { title, artist, isPlaying } = music\n\n      infoText.setProperty(hmUI.prop.MORE, {\n        text: `title:${title};artist:${artist};isPlaying:${isPlaying}`,\n      })\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(240),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'PLAY',\n      click_func: () => {\n        music.audPlay()\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(320),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'PAUSE',\n      click_func: () => {\n        music.audPause()\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(400),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'PREV',\n      click_func: () => {\n        music.audPrev()\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(480),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'NEXT',\n      click_func: () => {\n        music.audNext()\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Buzzer Enable Status in TypeScript\nDESCRIPTION: Method to check if system buzzer scene settings are enabled for other options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisEnabled(): boolean\n```\n\n----------------------------------------\n\nTITLE: Example Usage of openAssetsSync in JavaScript\nDESCRIPTION: Demonstrates how to use openAssetsSync to open a file in read-only mode from the assets directory. Shows proper import statement and function call with options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/openAssetsSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openAssetsSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n```\n\n----------------------------------------\n\nTITLE: Stopping Buzzer in TypeScript\nDESCRIPTION: This method stops the buzzer.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Buzzer.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Getting Lunar Day in TypeScript\nDESCRIPTION: TypeScript method definition for getting Chinese lunar day\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarDay(): number\n```\n\n----------------------------------------\n\nTITLE: Renaming a File Using hmFS.rename in JavaScript\nDESCRIPTION: Demonstrates how to use the hmFS.rename function to rename a file from 'old_file.txt' to 'new_file.txt' and log the result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/rename.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = hmFS.rename('path/to/old_file.txt', 'path/to/new_file.txt')\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for hmFS.rename\nDESCRIPTION: Type definition showing the function signature for the rename operation that takes old and new file paths as string parameters and returns a numeric result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/rename.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(oldPath: string, newPath: string) => result\n```\n\n----------------------------------------\n\nTITLE: Importing Body Temperature Sensor Documentation Component\nDESCRIPTION: Imports the documentation content for the body temperature sensor API from the reference directory using a relative path. The imported content is rendered as a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/BODY_TEMP.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Getting Sleep Data in TypeScript\nDESCRIPTION: Defines the getInfo method signature that returns the SleepInfo object containing sleep score, deep sleep time, start and end times, and total sleep duration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo(): SleepInfo\n```\n\n----------------------------------------\n\nTITLE: Simplified Call Signature for clearLaunchAppTimeout in TypeScript\nDESCRIPTION: Alternative simplified TypeScript function signature for clearLaunchAppTimeout that directly accepts a timeout ID number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction clearLaunchAppTimeout(timeoutId: number): void\n```\n\n----------------------------------------\n\nTITLE: Mini Program Registration Example in JavaScript\nDESCRIPTION: Example of registering a Zepp OS Mini Program with global data and lifecycle callbacks. Demonstrates how to define globalData, onCreate, and onDestroy handlers in the app.js file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/App.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nApp({\n  globalData: {\n    text: 'Hello Zepp OS',\n  },\n  onCreate() {\n    console.log('onCreate')\n    console.log(this.globalData.text)\n  },\n  onDestroy() {\n    console.log('onDestroy')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Router Push Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the push function used for navigation in ZeppOS Mini Programs. The function takes an Option object with url and optional params.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/router/push.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction push(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Storing Data with SessionStorage in ZeppOS\nDESCRIPTION: Demonstrates how to store data using the sessionStorage API, which provides key-value pair storage for cross-page communication. This example shows storing a value in pageA.js.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sessionStorage } from '@zos/storage'\n\nsessionStorage.setItem('test', 'test value')\n```\n\n----------------------------------------\n\nTITLE: GetScene Usage Example\nDESCRIPTION: JavaScript example demonstrating how to use the getScene function to check if code is running in a Mini Program context.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/app/getScene.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getScene, SCENE_APP } from '@zos/app'\n\nconst result = getScene()\n\nif (result === SCENE_APP) {\n  console.log('in Mini Program')\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile Information in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the getProfile function to retrieve user information and check user gender using the GENDER_MALE constant.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/user/getProfile.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getProfile, GENDER_MALE } from '@zos/user'\n\nconst { age, gender } = getProfile()\nconsole.log(age)\n\nif (gender === GENDER_MALE) {\n  console.log('male')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setBrightness in JavaScript\nDESCRIPTION: A practical example of using the setBrightness function to set the screen brightness to 50%. It imports the function from the display module, calls it with an option object, and checks the result value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/display/setBrightness.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setBrightness } from '@zos/display'\n\nconst result = setBrightness({\n  brightness: 50,\n})\n\nif (result === 0) {\n  console.log('setBrightness success')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SysProGetInt Documentation in JavaScript\nDESCRIPTION: This code snippet imports the content of the SysProGetInt.mdx file from the Zepp OS documentation and renders it using a React component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProGetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProGetInt.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: SecondaryWidget Type Definition\nDESCRIPTION: TypeScript type definition for the SecondaryWidget constructor function, showing the function signature and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/SecondaryWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SecondaryWidget(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Creating FILL_RECT Widget with Basic Parameters in ZeppOS JavaScript\nDESCRIPTION: This snippet shows the basic syntax for creating a FILL_RECT widget using hmUI.createWidget(). It demonstrates the structure of the Param object that defines the widget's properties.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/FILL_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fillRect = hmUI.createWidget(hmUI.widget.FILL_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining keyType Field Format for Watch Button Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates the format for defining the keyType field. It includes the button mode, number of buttons, and whether a crown exists. The format is used to specify different watch configurations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/designs/interaction/definition.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n{button mode}_{number of buttons} // {whether crown exists,  1 means yes, 0 means no}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of onDigitalCrown API in JavaScript\nDESCRIPTION: Demonstrates how to import and use the onDigitalCrown function to detect HOME key rotation events and log the rotation degree to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onDigitalCrown.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onDigitalCrown, KEY_HOME } from '@zos/interaction'\n\nonDigitalCrown({\n  callback: (key, degree) => {\n    if (key === KEY_HOME) {\n      console.log(degree)\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createSensor in TypeScript\nDESCRIPTION: The TypeScript definition for the createSensor function, which takes a SENSOR_ID as parameter and returns a sensor instance result. This is the core function for accessing device sensors in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/createSensor.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(sensor_id: SENSOR_ID) => result\n```\n\n----------------------------------------\n\nTITLE: Defining onKey Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the onKey function that allows developers to listen to key events in ZeppOS applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onKey(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Implementing STROKE_RECT Widget with Event Listener in ZeppOS\nDESCRIPTION: This example shows how to create a STROKE_RECT widget with specific properties and add a click event listener. The widget's y-coordinate is updated when clicked.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/STROKE_RECT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const strokeRect = createWidget(widget.STROKE_RECT, {\n      x: 125,\n      y: 125,\n      w: 230,\n      h: 150,\n      radius: 20,\n      line_width: 4,\n      color: 0xfc6950\n    })\n\n    strokeRect.addEventListener(event.CLICK_DOWN, (info) => {\n      strokeRect.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing TEXT Widget with Event Handling and Custom Font\nDESCRIPTION: Shows a more complex example of creating TEXT widgets with event handling, custom fonts, and internationalization. It includes two text widgets: one with click event handling and another with a custom font and multi-language support.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/TEXT.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, prop, text_style, event } from '@zos/ui'\n\nPage({\n  build() {\n    const text = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO, Zepp OS',\n    })\n\n    text.addEventListener(event.CLICK_DOWN, (info) => {\n      text.setProperty(prop.MORE, {\n        y: 200\n      })\n    })\n\n    const textWithFont = createWidget(widget.TEXT, {\n      x: 96,\n      y: 300,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      font: 'fonts/custom.ttf',\n      text_i18n: {\n        'en-US': 'Hello Zepp OS'\n        'zh-CN': '你好 Zepp OS'\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for ARC_PROGRESS Widget in ZeppOS\nDESCRIPTION: This code example shows how to create an ARC_PROGRESS widget and set its properties using setProperty(). It demonstrates setting the center coordinates, radius, start and end angles, color, line width, and progress level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/ARC_PROGRESS.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst arcProgress = hmUI.createWidget(hmUI.widget.ARC_PROGRESS)\narcProgress.setProperty(hmUI.prop.MORE, {\n  center_x: 100,\n  center_y: 100,\n  radius: 200,\n  start_angle: -90,\n  end_angle: 90,\n  color: 0x34e073,\n  line_width: 10,\n  level: 50\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Body Temperature Data in TypeScript\nDESCRIPTION: This snippet shows the type definition for the getToday() method of the BodyTemperature class. It returns an array of numbers representing average temperature measurements taken every 5 minutes throughout the day.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/BodyTemperature.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetToday(): Array<number>\n```\n\n----------------------------------------\n\nTITLE: Defining SecondaryWidget Function Signature in TypeScript\nDESCRIPTION: This snippet defines the type signature for the SecondaryWidget function, specifying its parameters and return type. It shows that the function takes an Option object and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/SecondaryWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SecondaryWidget(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Simplified onKey Function Signature in TypeScript\nDESCRIPTION: Alternative simplified TypeScript definition for the onKey function that directly accepts a callback function instead of an option object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/onKey.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onKey(callback: (key: Key, event: KeyEvent) => PreventDefault): void\n```\n\n----------------------------------------\n\nTITLE: Defining setLaunchAppTimeout Function Type in TypeScript\nDESCRIPTION: TypeScript definition of the setLaunchAppTimeout function signature, showing that it accepts an Option object and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/router/setLaunchAppTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setLaunchAppTimeout(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Image with i18n Support in app.json\nDESCRIPTION: JSON configuration for adding internationalized preview images to a SecondaryWidget in ZeppOS. This snippet shows how to specify the preview image path which will automatically use language-specific variants (preview_en-US.png, preview_zh-CN.png).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/secondary-widget.md#2025-04-07_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"secondary-widget\": {\n  \"widgets\": [\n    {\n      \"path\": \"secondary-widget/index\",\n      \"runtime\": {\n        \"type\": \"js\"\n      },\n      \"preview\": \"preview.png\",\n      \"i18n\": {\n        \"en-US\": {\n          \"name\": \"App Name\"\n        },\n        \"zh-CN\": {\n          \"name\": \"应用名称\"\n        }\n      }\n    }\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Link Component Type in TypeScript for ZeppOS\nDESCRIPTION: This TypeScript definition specifies the type of the Link component. It takes Props as an argument and optionally accepts a RenderFunc or an array of RenderFunc. The component returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/app-settings-api/ui/link.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Migrating Utility Functions from ZeppOS 1.0 to 2.0\nDESCRIPTION: Example of migrating global utility functions 'px' and 'assets' to explicit imports from '@zos/utils' in ZeppOS 2.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npx(480)\n\nconst assetsPathFunc = assets('img')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { px, assets } from '@zos/utils'\n\npx(480)\n\nconst assetsPathFunc = assets('img')\n```\n\n----------------------------------------\n\nTITLE: Setting Page Brightness Duration Example in JavaScript\nDESCRIPTION: Example usage of setPageBrightTime function to set the screen brightness duration to 60000 milliseconds. The function returns 0 on success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/setPageBrightTime.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setPageBrightTime } from '@zos/display'\n\nconst result = setPageBrightTime({\n  brightTime: 60000,\n})\n\nif (result === 0) {\n  console.log('setPageBrightTime success')\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a File in Zepp OS Mini Program\nDESCRIPTION: Example demonstrating how to use hmFS.remove to delete a file in the Mini Program's /data directory. The function returns a numeric result where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/remove.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const result = hmFS.remove('path/to/test_file.txt')\n    console.log(result)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining BLE Connection Callback Function in TypeScript\nDESCRIPTION: This snippet defines the type for the callback function used in creating a BLE connection. It specifies the parameters for subpackage number, received data, and data length.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(callback: (index: number, data: object, size: number) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Defining AppWidget Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript function signature for the AppWidget function. It specifies the input parameter 'option' of type Option and the return type Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/AppWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction AppWidget(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining removeListener Type in TypeScript\nDESCRIPTION: TypeScript type definition for the removeListener method that unregisters connection status callbacks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmBle.mdx#2025-04-07_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Widget - ZeppOS JavaScript\nDESCRIPTION: Basic example of creating a DIALOG widget instance using the ZeppOS UI framework. Shows how to import required components and create a basic dialog widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/DIALOG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst dialog = createWidget(widget.DIALOG, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining onGesture Function Signature in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for the onGesture function, which takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onGesture(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: File Reading Comparison between Zepp OS 1.0 and 2.0\nDESCRIPTION: Compares file reading implementation between Zepp OS 1.0 and 2.0, demonstrating the simplified API in 2.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/new-api.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileName = 'TEST.txt'\n\nconst [fsStat, err] = hmFS.stat(fileName)\nif (err === 0) {\n  const fileContentUnit = new Uint8Array(fsStat.size)\n  const file = hmFS.open(fileName, hmFS.O_RDWR)\n  hmFS.seek(file, 0, hmFS.SEEK_SET)\n  hmFS.read(file, fileContentUnit.buffer, 0, fileContentUnit.length)\n  hmFS.close(file)\n\n  const content = JSON.parse(String.fromCharCode.apply(null, fileContentUnit))\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileName = 'TEST.txt'\nconst result = readFileSync({\n  path: fileName,\n  options: {\n    encoding: 'utf8'\n  }\n})\n\nif (result) {\n  const content = JSON.parse(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simplified rmSync Function Signature in TypeScript\nDESCRIPTION: Simplified TypeScript function signature for rmSync, accepting a string path parameter and returning a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/rmSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rmSync(path: string): Result\n```\n\n----------------------------------------\n\nTITLE: Creating POLYLINE Widget in Zepp OS\nDESCRIPTION: This snippet demonstrates how to import and create a POLYLINE widget using the createWidget function from the @zos/ui module. It specifies the widget type and parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/GRADIENT_POLYLINE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst polyline = createWidget(widget.GRADKIENT_POLYLINE, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining Auth OAUTH Component Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the Auth OAUTH component. It takes an object of type Props as an argument and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/auth.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Configuring app.json app section in ZeppOS Mini Program\nDESCRIPTION: Example of configuring the app section in app.json which includes essential Mini Program information such as appId, appName, appType, version details, icon path, developer information, and description.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/app-json.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"app\": {\n    \"appId\": 1000089,\n    \"appName\": \"······\",\n    \"appType\": \"app\",\n    \"version\": {\n      \"code\": 5,\n      \"name\": \"0.0.5\"\n    },\n    \"icon\": \"logo.png\",\n    \"vender\": \"······\",\n    \"description\": \"······\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Change Event Callback - TypeScript\nDESCRIPTION: Method to register a callback function that will be called when air pressure or altitude changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using onGesture Function in JavaScript\nDESCRIPTION: Example of using the onGesture function in a ZeppOS application. It imports the necessary functions and constants, then registers a callback for the up gesture event.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onGesture, GESTURE_UP } from '@zos/interaction'\n\nonGesture({\n  callback: (event) => {\n    if (event === GESTURE_UP) {\n      console.log('up')\n    }\n    return true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Event Handling With GROUP\nDESCRIPTION: Improved event handling using GROUP widget to manage click events for multiple widgets. Single event registration covers all child widgets with expanded clickable area.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/widget-group.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = () => {\n  console.log('callback')\n}\n\nconst group_widget = hmUI.createWidget(hmUI.widget.GROUP , {\n  // ...\n})\n\nconst img_icon_widget = group_widget.createWidget(hmUI.widget.IMG, {\n  // ...\n})\n\nconst img_arrow_widget = group_widget.createWidget(hmUI.widget.IMG, {\n  // ...\n})\n\nconst text_name_widget = group_widget.createWidget(hmUI.widget.TEXT, {\n  // ...\n})\n\ngroup_widget.addEventListener(hmUI.event.CLICK_DOWN, callback)\n```\n\n----------------------------------------\n\nTITLE: Using mstStopScan Function to Stop BLE Scanning in JavaScript\nDESCRIPTION: Example of importing and using the mstStopScan function to stop a Bluetooth device scan that was previously started with mstStartScan.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstStopScan.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { mstStopScan } from '@zos/ble'\n\nmstStopScan()\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetInt64 and SysProGetInt64 Functions in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the hmFS.SysProSetInt64 function to store a 64-bit integer and then retrieve it using hmFS.SysProGetInt64. It sets the value 200 for the key 'js_test_int64' and then logs the retrieved value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt64('js_test_int64', 200)\nconsole.log(hmFS.SysProGetInt64('js_test_int64'))\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Settings App Example in JavaScript\nDESCRIPTION: A complete example of a Settings App implementation, demonstrating state management, interaction with SettingsStorage, UI rendering with a button, and handling user interactions. It follows the recommended code structure for Zepp OS Settings Apps.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/app-settings/register.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  // 1. Define state\n  state: {\n    testKey: null\n  },\n  build(props) {\n    // 2. Get SettingsStorage\n    this.getStorage(props)\n\n    // 3. Logic\n    const toggleButtonMap = {\n      ['Hello Zepp OS']: 'Hello World',\n      ['Hello World']: 'Hello Zepp OS'\n    }\n\n    // 4. Return Render Function\n    return Button({\n      label: this.state.testKey,\n      style: {\n        fontSize: '12px',\n        borderRadius: '30px',\n        background: '#D85E33',\n        color: 'white'\n      },\n      onClick: () => {\n        // 5. Modify the data in settingsStorage in the callback function of the event\n        props.settingsStorage.setItem('testKey', toggleButtonMap[this.state.testKey])\n      }\n    })\n  },\n  getStorage(props) {\n    this.state.testKey = props.settingsStorage.getItem('testKey') || 'Hello World'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Stop Function Import Example - JavaScript\nDESCRIPTION: Example showing how to import the stop function from the @zos/app-service module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app-service/stop.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stop } from '@zos/app-service'\n```\n\n----------------------------------------\n\nTITLE: Screen Sensor Usage Example in JavaScript\nDESCRIPTION: Example showing how to import the Screen sensor, create an instance, get the screen status, register a change callback, and properly clean up by unregistering the callback when no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Screen } from '@zos/sensor'\n\nconst screen = new Screen()\nconst status = screen.getStatus()\nconst callback = () => {\n  console.log(screen.getStatus())\n}\n\nscreen.onChange(callback)\n\n// When not needed for use\nscreen.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Getting Chinese Lunar Monthly Calendar in TypeScript\nDESCRIPTION: Retrieves the monthly calendar information of the current month in the Chinese lunar calendar. Only works when the system language is set to Chinese.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ngetLunarMonthCalendar(): LunarMonthCalendar\n```\n\n----------------------------------------\n\nTITLE: Creating a Daily Repeating Alarm with ZeppOS\nDESCRIPTION: Example showing how to set up a daily repeating timer that triggers at a specific time each day, using the REPEAT_DAY constant.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/alarm/set.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// At a certain time each day\nimport { set, REPEAT_DAY } from '@zos/alarm'\n\nconst option = {\n  url: 'pages/index.js',\n  time: 12345678,\n  repeat_type: REPEAT_DAY,\n}\nconst id = set(option)\n```\n\n----------------------------------------\n\nTITLE: Defining readSync Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the readSync function, which synchronously reads content from a file into an ArrayBuffer.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/readSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Brightness with hmSetting.setBrightness in Zepp OS\nDESCRIPTION: Sets the screen brightness of the current device within a range of 0-100. Note that this function won't have an effect if automatic brightness is enabled. The function returns a number where 0 indicates success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSetting/setBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(brightness: number) => result\n```\n\nLANGUAGE: js\nCODE:\n```\nconst result = hmSetting.setBrightness(50)\n```\n\n----------------------------------------\n\nTITLE: Implementing AppWidget with Lifecycle Methods in JavaScript\nDESCRIPTION: This example demonstrates how to use the AppWidget function to create an AppWidget instance with state and lifecycle methods. It includes onInit and build methods, and shows how to access the state within the build method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/AppWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAppWidget({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sleep Stage Data Type Definition\nDESCRIPTION: TypeScript interface for getting sleep staging data array.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Sleep.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetStage(): Array<StageInfo>\n```\n\n----------------------------------------\n\nTITLE: Getting System Sound Types\nDESCRIPTION: Method to retrieve built-in system ringtone types that can be used with the start method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/SystemSounds.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetSourceType(): Type\n```\n\n----------------------------------------\n\nTITLE: Calculating Wrapped Text Layout in ZeppOS\nDESCRIPTION: This example shows how to calculate the width and height of multi-line text that wraps when it reaches the specified width. It uses the getTextLayout function with text_size and text_width parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/getTextLayout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTextLayout } from '@zos/ui'\n\nconst { width, height } = getTextLayout('turn right and go alone the road', {\n  text_size: 30,\n  text_width: 200\n})\n\nconsole.log('width', width)\nconsole.log('height', height)\n```\n\n----------------------------------------\n\nTITLE: Creating a CYCLE_LIST Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a CYCLE_LIST widget using hmUI.createWidget. This creates a cyclical scrollable list where each item can be set as an image.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cycleList = hmUI.createWidget(hmUI.widget.CYCLE_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstReadDescriptor Function in JavaScript\nDESCRIPTION: This example shows how to import the mstReadDescriptor function from the @zos/ble module. It's a starting point for using the function in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstReadDescriptor.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstReadDescriptor } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Event-based Communication in Side Service\nDESCRIPTION: This code shows how to set up event listeners for receiving messages from the Device App and how to send messages to the Device App using MessageBuilder in the Side Service.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message-side'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    messageBuilder.listen(() => {})\n\n    // send a message to Device App\n    messageBuilder.call({ text: 'Hello Zepp OS' })\n\n    // receive a message from Device App\n    messageBuilder.on('request', (ctx) => {\n      const payload = messageBuilder.buf2Json(ctx.request.payload)\n      const { method, params } = payload\n\n      if (method === 'GET') {\n        ctx.response({\n          data: { result : 0 }\n        })\n      }\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Complete RADIO_GROUP Implementation with Multiple STATE_BUTTON Widgets\nDESCRIPTION: A complete example showing how to create a RADIO_GROUP with three STATE_BUTTON widgets. The example includes initialization of the radio group, creation of buttons, and setting the default selected button using prop.INIT.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/RADIO_GROUP.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const radioGroup = createWidget(widget.RADIO_GROUP, {\n      x: 0,\n      y: 0,\n      w: 480,\n      h: 64,\n      select_src: 'selected.png',\n      unselect_src: 'unselected.png',\n      check_func: (group, index, checked) => {\n        console.log('index', index)\n        console.log('checked', checked)\n      }\n    })\n\n    const button1 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 40,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button2 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 190,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n    const button3 = radioGroup.createWidget(widget.STATE_BUTTON, {\n      x: 340,\n      y: 200,\n      w: 64,\n      h: 64\n    })\n\n    radioGroup.setProperty(prop.INIT, button3)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining hmUI.createWidget Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the hmUI.createWidget function. It takes a widgetId and an optional option parameter, and returns a widget object.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(widgetId: WIDGET_ID, option?: Option) => widget: WIDGET\n```\n\n----------------------------------------\n\nTITLE: Complete Example of CYCLE_IMAGE_TEXT_LIST Implementation\nDESCRIPTION: Comprehensive example showing how to create a CYCLE_IMAGE_TEXT_LIST with sample data, configure its appearance, and retrieve the index of the first row item.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst data_array = [\n  { src: rootPath + 'step/step_num_0.png', text: '1' },\n  { src: rootPath + 'step/step_num_1.png', text: '2' },\n  { src: rootPath + 'step/step_num_2.png', text: '3' }\n]\ncycleList = createWidget(widget.CYCLE_IMAGE_TEXT_LIST, {\n  x: 0,\n  y: 0,\n  w: 200,\n  h: 400,\n  data_array: data_array,\n  data_size: 3,\n  item_height: 100,\n  item_bg_color: 0xffffff,\n  item_text_color: 0x000000,\n  item_text_x: 10,\n  item_text_y: 10,\n  item_text_size: 18\n})\n\n//Get the index value of the first row.\nret = cycleList.getProperty(prop.MORE, {})\nconsole.log(ret.index)\n```\n\n----------------------------------------\n\nTITLE: Function Type Signature for hmFS.write in ZeppOS\nDESCRIPTION: TypeScript type definition for the hmFS.write function, showing its parameter types and return value structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmFS/write.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(fileId: number, buff: ArrayBuffer, pos: number, len: number) => result\n```\n\n----------------------------------------\n\nTITLE: Defining hmApp.reloadPage Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type signature for the hmApp.reloadPage function. It takes an Option object as a parameter and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmApp/reloadPage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(option: Option) => void\n```\n\n----------------------------------------\n\nTITLE: Creating GROUP Widget in ZeppOS\nDESCRIPTION: Demonstrates how to create a GROUP widget and add sub-widgets to it. The GROUP widget allows for unified control of multiple child widgets. The group's createWidget method must be used with relative positioning, and nested GROUP components are not supported.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/GROUP.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst group = createWidget(widget.GROUP, Param)\n\n// Creating UI sub-widgets\ngroup.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: Handling Player Preparation Events in ZeppOS\nDESCRIPTION: Sets up an event listener for the player's PREPARE event. This code shows how to handle successful or failed preparation states and take appropriate actions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/media.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, id } from '@zos/media'\n\nconst player = create(id.PLAYER)\n\nplayer.addEventListener(player.event.PREPARE, function (result) {\n  if (result) {\n    console.log('=== prepare succeed ===')\n    player.start()\n  } else {\n    console.log('=== prepare fail ===')\n    player.release()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for SysProSetInt Method in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the SysProSetInt method, showing its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string, val: number) => result\n```\n\n----------------------------------------\n\nTITLE: Using getRtlLayout() Function in Zepp OS with JavaScript\nDESCRIPTION: Example of how to use the getRtlLayout() function in a Zepp OS application. It imports the function from the @zos/ui module, calls it, and logs the result to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getRtlLayout.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getRtlLayout } from '@zos/ui'\n\nconst result = getRtlLayout()\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for onGesture\nDESCRIPTION: TypeScript type definition for the onGesture function that monitors user gesture events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/interaction/onGesture.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onGesture(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Using hmFS.SysProGetChars to Retrieve Temporary Strings in JavaScript\nDESCRIPTION: Example of setting a temporary string value with hmFS.SysProSetChars and then retrieving it with hmFS.SysProGetChars. The retrieved value is logged to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nhmFS.SysProSetChars('js_test_char', 'hello')\nconsole.log(hmFS.SysProGetChars('js_test_char'))\n```\n\n----------------------------------------\n\nTITLE: Screen Off Mode Color Specifications in CSS\nDESCRIPTION: Color values specified for screen off mode implementation, including mandatory background color (black) and main hand color (white).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/designs/specifications/screen-off-mode.md#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#000000 /* Background color must be black */\n#FFFFFF /* Main color for hands must be white */\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstDisconnect Function\nDESCRIPTION: Example showing how to import the mstDisconnect function from the ZeppOS BLE module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstDisconnect.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mstDisconnect } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_LEVEL Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG_LEVEL widget using hmUI.createWidget. It sets up the widget with an array of images and initial level.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, Param)\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking Widget Properties in JavaScript\nDESCRIPTION: This code snippet shows a workaround for widgets that don't support property acquisition. It demonstrates how to manually maintain a variable in the current page to record property changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/getProperty.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    buttonY: 0\n  },\n  build() {\n    this.state.buttonY = 300\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      y: this.state.buttonY,\n      // ...\n    })\n\n    hmUI.showToast({\n      text: this.state.buttonY\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Gregorian Holidays in TypeScript\nDESCRIPTION: Retrieves Gregorian holidays using the Time sensor, or returns 'INVALID' if there is no holiday.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetFestival(): string\n```\n\n----------------------------------------\n\nTITLE: Defining BLE Send Function Type in TypeScript\nDESCRIPTION: This snippet defines the type for the send function used in BLE communication. It specifies the parameters for data to be sent and the size of the data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ble.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(data: object, size: number) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Time Pointer Widget in ZeppOS JavaScript\nDESCRIPTION: Creates a time pointer widget for displaying analog clock hands. The widget allows customization of hour, minute, and second hands with configurable rotation centers, positions, images, and optional cover overlays.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/TIME_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet timePointer = hmUI.createWidget(hmUI.widget.TIME_POINTER, {\n  hour_centerX: 240, // Center of pointer rotation corresponds to centerX.\n  hour_centerY: 240, // Center of pointer rotation corresponds to centerY.\n  hour_posX: 19, // The pointer's own center of rotation, corresponds to the x in position.\n  hour_posY: 100, // Pointer's own center of rotation, corresponds to y in position.\n  hour_path: 'pointer.png', // Path of the pointer.\n  hour_cover_path: 'cover.png', // Pointer circle image.\n  hour_cover_y: 0,\n  hour_cover_x: 0\n  // Minute and seconds as same as above, just replace hour with minute/second.\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Data in ZeppOS App.js\nDESCRIPTION: Shows how to initialize a global data object in the app.js file that can be accessed by all pages of the Mini Program. This provides a shared state mechanism for cross-page communication.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nApp({\n  globalData: {\n    type: 'normal'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Compass.stop Method Definition\nDESCRIPTION: Method to stop monitoring compass data. This should be called when compass readings are no longer needed to conserve device resources.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SysProSetChars Documentation in React\nDESCRIPTION: This code snippet imports a React component containing documentation for the SysProSetChars function from the Zepp OS hmFS module. It then renders this content within the current component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetChars.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Button Component in JavaScript\nDESCRIPTION: This example demonstrates how to create a Button component with custom styling using CSS properties in camelCase format. It includes onClick functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/guides/framework/app-settings/ui-intro.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return Button({\n      label: 'Delete',\n      style: {\n        fontSize: '12px',\n        borderRadius: '30px',\n        background: '#D85E33',\n        color: 'white'\n      },\n      onClick: () => {\n        // ...\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Reading File Content with readSync in ZeppOS\nDESCRIPTION: This example demonstrates how to open a file in read-only mode and read its contents into an ArrayBuffer using the readSync function. The example shows the basic pattern of creating a buffer, opening a file handle, and reading data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/readSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { openSync, readSync, O_RDONLY } from '@zos/fs'\n\nconst fd = openSync({\n  path: 'test.txt',\n  flag: O_RDONLY,\n})\n\nconst buffer = new ArrayBuffer(4)\nconst result = readSync({\n  fd,\n  buffer,\n})\n```\n\n----------------------------------------\n\nTITLE: Sleep Stage Model Example - JavaScript\nDESCRIPTION: Shows how to access sleep stage model data including wake, REM, light, and deep sleep stages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/SLEEP.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst modelData = sleep.getSleepStageModel()\nconsole.log(modelData.WAKE_STAGE)\nconsole.log(modelData.REM_STAGE)\nconsole.log(modelData.LIGHT_STAGE)\nconsole.log(modelData.DEEP_STAGE)\n```\n\n----------------------------------------\n\nTITLE: World Clock Info Retrieval Method Type Definition\nDESCRIPTION: Type definition for the getWorldClockCountInfo method, which retrieves world clock data for a specific index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(index: number) => wordInfo\n```\n\n----------------------------------------\n\nTITLE: QRCODE Widget Implementation Example in Zepp OS\nDESCRIPTION: A complete example showing how to implement a QR code widget within a Zepp OS page. The example creates a QR code with the text 'Hello Zepp OS' and configures both the QR code dimensions and its background.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/QRCODE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const qrcode = createWidget(widget.QRCODE, {\n      content: 'Hello Zepp OS',\n      x: 140,\n      y: 140,\n      w: 200,\n      h: 200,\n      bg_x: 120,\n      bg_y: 120,\n      bg_w: 240,\n      bg_h: 240\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Battery Change Event Listener Example\nDESCRIPTION: Shows how to register an event listener for battery level changes. The callback function will be triggered whenever the battery level changes, allowing applications to respond to battery status updates.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbattery.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log('The current battery level is ' + battery.current + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Stand Sensor Implementation Example\nDESCRIPTION: Full example showing Stand sensor implementation with UI elements, event handling, and data display\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/STAND.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const stand = hmSensor.createSensor(hmSensor.id.STAND)\n\n    new TextByLine({\n      text: `current:${stand.current};target:${stand.target}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${stand.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = stand.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const standChangeListener = () => {\n      stand.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: standChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getTextLayout Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getTextLayout function, specifying input parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/getTextLayout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(text_string: string, options: object) => result\n```\n\n----------------------------------------\n\nTITLE: Using pausePalmScreenOff Function in JavaScript\nDESCRIPTION: Example showing how to use the pausePalmScreenOff function to suspend palm screen off behavior for 60 seconds (60000 milliseconds).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/pausePalmScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pausePalmScreenOff } from '@zos/display'\n\npausePalmScreenOff({\n  duration: 60000,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a STROKE_RECT Widget in ZeppOS\nDESCRIPTION: Basic syntax for creating a stroked rectangle widget in ZeppOS UI framework. This creates a rectangular widget with a colored stroke/border.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining setLaunchAppTimeout Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for setLaunchAppTimeout, including its parameter type (Option) and return type (Result).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/router/setLaunchAppTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setLaunchAppTimeout(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining BLE addListener Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the BLE addListener function, which registers a callback function to listen for connection status changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/addListener.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addListener(callback: Callback): void\n```\n\n----------------------------------------\n\nTITLE: hmSetting.setBrightScreen Method Signature in ZeppOS\nDESCRIPTION: The TypeScript type definition for the hmSetting.setBrightScreen method, showing that it accepts a numeric brightness time parameter and returns a numeric result code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setBrightScreen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(brightTime: number) => result\n```\n\n----------------------------------------\n\nTITLE: Defining getScrollTop Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the getScrollTop function, which returns a Result type representing the vertical scroll position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/getScrollTop.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getScrollTop(): Result\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener in TypeScript\nDESCRIPTION: Removes the specified listener from the listener array for the given event name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noff(eventName: string, listener: (...args: any[]) => void): void\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SysProSetBool in JavaScript\nDESCRIPTION: Example showing how to use the SysProSetBool method to store a boolean value with a specified key. The stored value will be cleared when the system reboots.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetBool.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetBool('test_key', true)\n```\n\n----------------------------------------\n\nTITLE: Setting designWidth in ZeppOS app.json\nDESCRIPTION: Configuration for designWidth which sets the design width for screen adaptation. This value is used by the global px function as the size calculation base.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"designWidth\": 390\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Body Temperature Sensor Values\nDESCRIPTION: Demonstrates how to read the current temperature value and time interval from the thermometer sensor. The current property returns the temperature reading and timeinterval provides the elapsed time since the last reading.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/BODY_TEMP.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  'the current temp: ' + thermometer.current + ' interval:' + thermometer.timeinterval + '\\r\\n'\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Keyboard in ZeppOS\nDESCRIPTION: This snippet shows how to exit and destroy the current keyboard input interface using the deleteKeyboard function from the @zos/ui module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SMART_KEYBOARD.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { deleteKeyboard } from '@zos/ui'\n\ndeleteKeyboard()\n```\n\n----------------------------------------\n\nTITLE: Timer Type Definition in TypeScript\nDESCRIPTION: Type definition for the stopTimer function that takes a timer ID and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/timer/stopTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(timerId: number) => void\n```\n\n----------------------------------------\n\nTITLE: Using updateStatusBarTitle Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmUI.updateStatusBarTitle() function to set the status bar text in a ZeppOS mini program. It sets the title to 'Mini Program Title'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/updateStatusBarTitle.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst title = 'Mini Program Title'\n\nhmUI.updateStatusBarTitle(title)\n```\n\n----------------------------------------\n\nTITLE: Using SysProSetInt and SysProGetInt in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmFS.SysProSetInt() function to store an integer value, and then retrieve it using hmFS.SysProGetInt(). The stored value is temporary and will be cleared on system reboot.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProSetInt.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmFS.SysProSetInt('js_test_int', 100)\nconsole.log(hmFS.SysProGetInt('js_test_int'))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for writeSync Function in ZeppOS\nDESCRIPTION: TypeScript type definition for the writeSync function which synchronously writes ArrayBuffer data to a file. It accepts an option object with file descriptor, buffer data, and optional configuration parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/writeSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction writeSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Implementing an IMG_LEVEL Widget with Image Array\nDESCRIPTION: Complete example of creating an IMG_LEVEL widget with an array of images. The level property (set to 2) determines which image is displayed from the array (in this case, the second image '2.png').\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_LEVEL.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgArray = ['1.png', '2.png', '3.png']\nconst imgLevel = hmUI.createWidget(hmUI.widget.IMG_LEVEL, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 480,\n  image_array: imgArray,\n  image_length: 3,\n  level: 2 //level is 2.Draw the second picture.\n})\n```\n\n----------------------------------------\n\nTITLE: Event-Based Communication in Side Service\nDESCRIPTION: Shows how to send messages to the Device App using 'call' method and handle incoming requests from the Device App using the 'on' method in the Side Service.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/guides/best-practice/bluetooth-communication.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageBuilder } from '../shared/message-side'\n\nconst messageBuilder = new MessageBuilder()\n\nAppSideService({\n  onInit() {\n    messageBuilder.listen(() => {})\n\n    // send a message to Device App\n    messageBuilder.call({ text: 'Hello Zepp OS' })\n\n    // receive a message from Device App\n    messageBuilder.on('request', (ctx) => {\n      const payload = messageBuilder.buf2Json(ctx.request.payload)\n      const { method, params } = payload\n\n      if (method === 'GET') {\n        ctx.response({\n          data: { result : 0 }\n        })\n      }\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Button Widget - Basic Usage\nDESCRIPTION: Basic syntax for creating a button widget using hmUI.createWidget(). Shows the fundamental method signature for button creation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = hmUI.createWidget(hmUI.widget.BUTTON, Param)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Layout with VIRTUAL_CONTAINER in Zepp OS\nDESCRIPTION: This example shows how to use VIRTUAL_CONTAINER to create a simple Flex layout. It demonstrates creating a root container, adding child elements (text and button), and updating layout styles.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/VIRTUAL_CONTAINER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\n// Create root container\nconst root = createWidget(widget.VIRTUAL_CONTAINER, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 480,\n  layout: {\n    display: 'flex',\n    'flex-flow': 'column',\n    'justify-content': 'center',\n    'align-items': 'center'\n  }\n})\n\n// Create child element\nconst text = createWidget(widget.TEXT, {\n  text: 'Hello Zepp OS',\n  layout: {\n    width: '100%',\n    height: 'auto',\n    'font-size': '36'\n  }\n})\n\n// Set text widget as a child node of root\ntext.setLayoutParent(root)\n\n// Create button\nconst button = createWidget(widget.BUTTON, {\n  text: 'Click Me',\n  layout: {\n    width: '80%',\n    height: '60px',\n    'margin-top': '20px'\n  }\n})\n\n// Add button as a child node of root\nroot.addLayoutChild(button)\n\n// Update layout style\nbutton.updateLayoutStyle({\n  'background-color': '#ff0000'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Text Widget with px Function in ZeppOS\nDESCRIPTION: Example of creating a text widget with responsive dimensions using the px function to ensure proper scaling across different device sizes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst textStyle = {\n  x: px(96),\n  y: px(40),\n  w: px(288),\n  h: px(46),\n  color: 0xffffff,\n  text_size: px(36),\n  align_h: h.ALIGN.CENTER_H,\n  align_v: h.ALIGN.CENTER_V,\n  text_style: hmUI.text_style.WRAP\n}\n\nconst text = hmUI.createWidget(hmUI.widget.TEXT, textStyle)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget ID in TypeScript for ZeppOS\nDESCRIPTION: This code snippet defines the type signature for the widget.getId() method. It takes no parameters and returns a number representing the unique ID of the widget. This method is available from API_LEVEL 2.0 and above.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/getId.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Creating Date Pointer Widget in JavaScript\nDESCRIPTION: Example of creating a DATE_POINTER widget that displays day of the week using a rotating pointer image. The widget can be configured with background images, pointer position, cover image, and rotation angles.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/DATE_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet week = hmUI.createWidget(hmUI.widget.DATE_POINTER, {\n  scale_x: 0,\n  scale_x: 0, scale_y: 0,\n  scale_sc: 'bg.png', // Background image, optional.\n  scale_tc: 'bg.png',\n  scale_en: 'bg.png',\n  center_x: 100,\n  center_y: 100,\n  src: 'pointer.png', // Image.\n  posX: 0,\n  posY: 0,\n  cover_x: 0, //Pointer above the hat.\n  cover_y: 0,\n  cover_path: 'cover.png',\n  start_angle: 0, //Point 0 is positive. You can write negative numbers.\n  end_angle: 180,\n  type: hmUI.date.WEEK //Refer to the table above.\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Canceling a Timed Alarm in JavaScript\nDESCRIPTION: Example code showing how to create a timed wake-up alarm that will activate after 10 seconds, and then how to cancel that alarm. The example demonstrates setting up the alarm with a specific app ID and target file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/alarm/alarmNew.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Wake up the application after 10 seconds.\nconst alarm = hmApp.alarmNew({\n  file: 'pages/js_widget_sample',\n  appid: 1000001,\n  delay: 10\n})\n\n//Cancel wake-up\n\nhmApp.alarmCancel(alarm)\n```\n\n----------------------------------------\n\nTITLE: Creating Distance Sensor Instance\nDESCRIPTION: Initializes a new distance sensor instance using hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst distance = hmSensor.createSensor(hmSensor.id.DISTANCE)\n```\n\n----------------------------------------\n\nTITLE: Defining Type Signature for hmApp.registerKeyEvent in TypeScript\nDESCRIPTION: TypeScript type definition for the registerKeyEvent method, showing that it accepts a callback function which receives key and action parameters and returns a boolean.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/keyEvent/registerKeyEvent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(callback: (key: Key, action: Action) => boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Creating KEYBOARD Widget in ZeppOS\nDESCRIPTION: Demonstrates how to create a KEYBOARD widget using the createWidget function. It includes the widget type and configuration parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/KEYBOARD.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst keyboard = createWidget(widget.KEYBOARD, Param)\n```\n\n----------------------------------------\n\nTITLE: Button Widget Implementation Examples\nDESCRIPTION: Complete example showing two button implementations - one with image backgrounds and another with color backgrounds. Includes click handling and property modification.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_button = hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(hmUI.prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using requestPermission API to Request Background Service Permission\nDESCRIPTION: Example of requesting the background service permission using the requestPermission API. The code demonstrates importing the API, specifying the required permissions, setting up a callback to handle the result, and logging the return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/app/requestPermission.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { requestPermission } from '@zos/app'\n\nconst result = requestPermission({\n  permissions: ['device:os.bg_service'],\n  callback: (result) => {\n    console.log(result)\n  },\n})\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Using getAllAppServices Function in JavaScript\nDESCRIPTION: This example demonstrates how to import and use the getAllAppServices function in a ZeppOS application. It retrieves the list of running services and logs the result to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/app-service/getAllAppServices.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllAppServices } from '@zos/app-service'\n\nconst serviceList = getAllAppServices()\nconsole.log(serviceList)\n```\n\n----------------------------------------\n\nTITLE: Event Handling Without GROUP\nDESCRIPTION: Traditional approach for handling click events by registering listeners on individual widgets. Requires separate event registration for each widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/widget-group.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = () => {\n  console.log('callback')\n}\n\nconst img_icon_widget = hmUI.createWidget(hmUI.widget.IMG, {\n  // ...\n})\n\nimg_icon_widget.addEventListener(hmUI.event.CLICK_DOWN, callback)\n\nconst img_arrow_widget = hmUI.createWidget(hmUI.widget.IMG, {\n  // ...\n})\n\nimg_arrow_widget.addEventListener(hmUI.event.CLICK_DOWN, callback)\n\nconst text_name_widget = hmUI.createWidget(hmUI.widget.TEXT, {\n  // ...\n})\n\ntext_name_widget.addEventListener(hmUI.event.CLICK_DOWN, callback)\n```\n\n----------------------------------------\n\nTITLE: Creating CYCLE_LIST Widget - Basic Initialization\nDESCRIPTION: Basic code structure for creating a CYCLE_LIST widget using the ZeppOS UI framework. Shows the basic import and creation syntax.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/CYCLE_LIST.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst cycleList = createWidget(widget.CYCLE_LIST, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining cancel Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for the cancel function. It takes an Option object as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/alarm/cancel.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cancel(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Defining Section Component Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the Section component. It takes props and optional render functions as parameters and returns a render function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/app-settings-api/ui/section.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props, renderFuncArr?: RenderFunc | Array<RenderFunc>) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Defining TransferFile Module Types in TypeScript\nDESCRIPTION: TypeScript type definitions for the getOnbox and getInbox functions, which return Onbox and Inbox objects respectively.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => Onbox\n```\n\nLANGUAGE: typescript\nCODE:\n```\n() => Inbox\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition in TypeScript\nDESCRIPTION: TypeScript function signature for the checkSystemApp API that verifies if a system app supports navigation. It supports two calling patterns: with an options object or with just the appId parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/router/checkSystemApp.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction checkSystemApp(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Simplified Calling Method in TypeScript\nDESCRIPTION: Shows a simplified alternative function signature for onDigitalCrown that directly accepts a callback function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/interaction/onDigitalCrown.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onDigitalCrown(callback: (key: Key, degree: Degree) => void): void\n```\n\n----------------------------------------\n\nTITLE: Back Function Type Definition - TypeScript\nDESCRIPTION: TypeScript type definition for the back() function that returns to the previous page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/router/back.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction back(): void\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Property Method Type in TypeScript\nDESCRIPTION: TypeScript type definition for the setProperty method that takes a propertyId string and a value of any type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(propertyId: string, val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Package Info in ZeppOS Mini Program\nDESCRIPTION: Example of using the getPackageInfo function to retrieve package information in a ZeppOS Mini Program. It imports the function from the @zos/app module and logs the 'name' field of the package info.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/getPackageInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getPackageInfo } from '@zos/app'\n\nconst packageInfo = getPackageInfo()\nconsole.log(packageInfo.name)\n```\n\n----------------------------------------\n\nTITLE: Complete Slide Switch Implementation Example\nDESCRIPTION: Full example showing how to create and configure a slide switch with all available properties and state change handling\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/SLIDE_SWITCH.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const slide_switch = hmUI.createWidget(hmUI.widget.SLIDE_SWITCH, {\n      x: 200,\n      y: 200,\n      w: 96,\n      h: 64,\n      select_bg: 'switch_on.png',\n      un_select_bg: 'switch_off.png',\n      slide_src: 'radio_select.png',\n      slide_select_x: 40,\n      slide_un_select_x: 8,\n      checked: true,\n      checked_change_func: (slideSwitch, checked) => {\n        console.log('checked', checked)\n      }\n    })\n\n    console.log('slide checked', slide_switch.getProperty(hmUI.prop.CHECKED))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Sensors using createSensor Function - TypeScript\nDESCRIPTION: Function signature for creating sensor instances. Takes a sensor ID as parameter and returns a reference to the specific sensor instance. Supports various sensor types including time and battery sensors.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSensor/createSensor.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(sensor_id: SENSOR_ID) => result\n```\n\n----------------------------------------\n\nTITLE: Configuring App Service with Permissions in app.json\nDESCRIPTION: Extended configuration for App Service requiring the background service permission necessary for continuous running services.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/app-service.md#2025-04-07_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"device:os.bg_service\"],\n  \"module\": {\n    \"app-service\": {\n      \"services\": [\"app-service/demo_service\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Animation Assets\nDESCRIPTION: A tree view showing the recommended directory structure for organizing animation frame images that will be used with the IMG_ANIM widget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n// 资源存放目录\n.\n└── assets\n        └── gtr-3\n                └── anim\n                        ├── animation_0.png\n                        ├── animation_1.png\n                        ├── animation_2.png\n                        ├── animation_3.png\n                        ├── animation_4.png\n                        └── animation_5.png\n```\n\n----------------------------------------\n\nTITLE: Implementing CIRCLE Widget in ZeppOS Page\nDESCRIPTION: This example shows how to implement a CIRCLE widget within a ZeppOS Page component. It creates a red circle with a radius of 120 pixels, centered at (240, 240), and sets its transparency to 200.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const circle = hmUI.createWidget(hmUI.widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Type Signature for hmApp.getLayerY Function in TypeScript\nDESCRIPTION: TypeScript type definition for the hmApp.getLayerY() function, which returns the Y-coordinate offset as a number result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/getLayerY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n() => Result\n```\n\n----------------------------------------\n\nTITLE: Timer Creation and Usage Example in JavaScript\nDESCRIPTION: Example showing how to create a timer with a 500ms initial delay and 1000ms repeat interval, including callback function implementation and timer stopping.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/timer/createTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timer1 = timer.createTimer(\n  500,\n  1000,\n  function (option) {\n    //callback\n    console.log('timer callback')\n    console.log(option.hour)\n  },\n  { hour: 0, minute: 15, second: 30 }\n)\n\n//Stop timer1\ntimer.stopTimer(timer1)\n```\n\n----------------------------------------\n\nTITLE: Defining getPackageInfoById Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the getPackageInfoById function. It specifies the function signature, including the Option parameter and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/app/getPackageInfoById.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getPackageInfoById(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_POINTER Widget - Complete Example\nDESCRIPTION: Demonstrates a complete example of creating an IMG_POINTER widget with specific position coordinates, rotation center, and initial angle settings.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG_POINTER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgPointer = hmUI.createWidget(hmUI.widget.IMG_POINTER, {\n  src: rootPath + 'hour.png',\n  center_x: 227,\n  center_y: 227,\n  x: 22,\n  y: 121,\n  angle: 245\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CIRCLE Widget in ZeppOS Page\nDESCRIPTION: This example shows how to implement a CIRCLE widget within a ZeppOS Page component. It creates a red circle with a radius of 120 pixels, centered at (240, 240), and sets its transparency to 200.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/widget/CIRCLE.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nPage({\n  build() {\n    const circle = createWidget(widget.CIRCLE, {\n      center_x: 240,\n      center_y: 240,\n      radius: 120,\n      color: 0xfc6950,\n      alpha: 200\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: AppWidget Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the AppWidget constructor function showing its parameter and return type signature.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/global/AppWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction AppWidget(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Using getWeightUnit Function in JavaScript\nDESCRIPTION: Demonstrates how to import and use the getWeightUnit function to retrieve the user's weight unit setting, and compares it with a constant.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getWeightUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getWeightUnit, WEIGHT_UNIT_KILOGRAM } from '@zos/settings'\n\nconst weightUnit = getWeightUnit()\n\nif (weightUnit === WEIGHT_UNIT_KILOGRAM) {\n  console.log('Kilogram')\n}\n```\n\n----------------------------------------\n\nTITLE: Type Signature for hmFS.remove() Method in TypeScript\nDESCRIPTION: Defines the type signature for the hmFS.remove() file deletion method. It takes a file path string and returns a numeric result code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/remove.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string) => result\n```\n\n----------------------------------------\n\nTITLE: Moving File Pointer Using hmFS.seek in JavaScript\nDESCRIPTION: This example demonstrates how to use hmFS.seek() to move the file pointer. It first opens or creates a file, then seeks to the beginning of the file using hmFS.SEEK_SET.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/seek.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 打开/创建文件\nconst fileId = hmFS.open(\"test_file.txt\", hmFS.O_RDWR | hmFS.O_CREAT)\n\n//定位到文件开始位置\nhmFS.seek(file, 0, hmFS.SEEK_SET);\n```\n\n----------------------------------------\n\nTITLE: Type Definition for createTimer Function in TypeScript\nDESCRIPTION: Type signature for the createTimer function that defines the expected parameters and return value. It takes delay time, repeat interval, callback function, and optional parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/timer/createTimer.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(delay: number, repeat: number, callback: (option: any) => void, option: any) => timerId\n```\n\n----------------------------------------\n\nTITLE: Defining getText Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for getText, which takes a string key and returns a string result. It's used to retrieve internationalized text based on a given key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/i18n/getText.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getText(key: Key): Result\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition for getSwiperIndex\nDESCRIPTION: Type declaration for the getSwiperIndex function that returns either a number or undefined based on the page scroll mode.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/page/getSwiperIndex.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSwiperIndex(): Result\n```\n\n----------------------------------------\n\nTITLE: Defining renameSync Function Type in TypeScript\nDESCRIPTION: Type definition for the renameSync function, specifying its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/renameSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction renameSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Stopping Blood Oxygen Measurement in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript interface for the stop() method, which cancels the current blood oxygen measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Preview Image Specifications - Markdown\nDESCRIPTION: Defines thumbnail size requirements for different device resolutions when creating watchface preview images.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/specification.md#2025-04-07_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|Device resolution|Thumbnail size|\n|:--|:--|\n|480\\*480|324\\*324|\n|454\\*454|306\\*306|\n|416\\*416|280\\*280|\n```\n\n----------------------------------------\n\nTITLE: Launching Simulator on Linux\nDESCRIPTION: Command to start the simulator on Linux systems.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/tools/simulator/setup.md#2025-04-07_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/simulator/ && ./simulator\n```\n\n----------------------------------------\n\nTITLE: Importing PAI Sensor Documentation in JavaScript\nDESCRIPTION: This code snippet imports the content of the PAI sensor documentation from a specific path and renders it using JSX syntax. It's likely part of a larger documentation system or website.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/PAI.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/PAI.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable View with Random Colors\nDESCRIPTION: Example implementation showing how to create a scrollable view with 20 pages, each having a random background color and centered text. The code demonstrates vertical scrolling with dynamically generated content.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/setScrollView.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\nfunction getRandomFromSection(low, high) {\n  const RANDOM = Math.random()\n  const RANGE = high - low + 1\n\n  return Math.floor(RANDOM * RANGE) + low\n}\n\nPage({\n  build() {\n    const isVertical = true\n    hmUI.setScrollView(true, px(480), 20, isVertical)\n\n    const numArr = Array.from({ length: 20 }).map((_, index) => index)\n\n    numArr.forEach((num) => {\n      const backgroundColor = Array.from({ length: 6 }).reduce((prev, curr) => {\n        const random = getRandomFromSection(0, 15)\n        return prev + randomArr[random]\n      }, '0x')\n\n      hmUI.createWidget(hmUI.widget.FILL_RECT, {\n        x: 0,\n        y: px(480) * num,\n        w: px(480),\n        h: px(480),\n        color: Number(backgroundColor)\n      })\n\n      const text = hmUI.createWidget(hmUI.widget.TEXT, {\n        x: px(96),\n        y: px(200) + px(480) * num,\n        w: px(320),\n        h: px(46),\n        color: 0xffffff,\n        text_size: px(36),\n        align_h: hmUI.align.CENTER_H,\n        align_v: hmUI.align.CENTER_V,\n        text_style: hmUI.text_style.NONE,\n        text: `HELLO ZEPPOS ${num}`\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Function Signature for getSystemMode in TypeScript\nDESCRIPTION: Type definition for the getSystemMode function that retrieves system mode settings. The function takes no parameters and returns a Result object containing various system mode states.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getSystemMode.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getSystemMode(): Result\n```\n\n----------------------------------------\n\nTITLE: Complete WEAR Sensor Implementation\nDESCRIPTION: Full example showing WEAR sensor implementation with UI components, event handling, and text display functionality\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/WEAR.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextByLine {\n  constructor(params) {\n    const { text = '', y = undefined, line = 0 } = params\n\n    this.text = text\n    this.y = y\n    this.line = line\n    this.y_computed = Number.isInteger(this.y) ? this.y : px(this.line * 60 + 120)\n  }\n\n  render() {\n    return hmUI.createWidget(hmUI.widget.TEXT, {\n      x: px(0),\n      y: this.y_computed,\n      w: px(480),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(20),\n      align_h: hmUI.align.CENTER_H,\n      align_v: hmUI.align.CENTER_V,\n      text_style: hmUI.text_style.NONE,\n      text: this.text\n    })\n  }\n}\n\nPage({\n  build() {\n    const wear = hmSensor.createSensor(hmSensor.id.WEAR)\n\n    const currentText = new TextByLine({\n      text: `current:${wear.current}`,\n      line: 0\n    }).render()\n\n    const changeEventText = new TextByLine({\n      text: `EVENT-CHANGE:${wear.current}`,\n      line: 1\n    }).render()\n\n    const changeCallback = () => {\n      const current = wear.current\n\n      changeEventText.setProperty(hmUI.prop.MORE, {\n        text: `EVENT-CHANGE: ${current}`\n      })\n    }\n\n    const wearChangeListener = () => {\n      wear.addEventListener(hmSensor.event.CHANGE, changeCallback)\n    }\n\n    hmUI.createWidget(hmUI.widget.BUTTON, {\n      x: px(80),\n      y: px(300),\n      w: px(300),\n      h: px(60),\n      radius: px(12),\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'REGISTER_CHANGE',\n      click_func: wearChangeListener\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of widget.getProperty Method\nDESCRIPTION: TypeScript type definition showing the signature of the widget.getProperty method that takes a property key and returns the corresponding result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/ui/getProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n(key: any) => result\n```\n\n----------------------------------------\n\nTITLE: Disallowed JavaScript Execution Methods in ZeppOS Mini Programs\nDESCRIPTION: Examples of JavaScript execution methods that are restricted in ZeppOS Mini Programs for security reasons. The code shows that eval() is not supported, and using new Function() is restricted with one exception.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/app-settings/js-support.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neval\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew Function\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew Function('return this')\n```\n\n----------------------------------------\n\nTITLE: Using setAutoBrightness Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the setAutoBrightness function in JavaScript. It imports the function from the @zos/display module and calls it with an option object to enable auto brightness.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/display/setAutoBrightness.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setAutoBrightness } from '@zos/display'\n\nsetAutoBrightness({\n  autoBright: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Accelerometer Data in TypeScript\nDESCRIPTION: Method to retrieve the current accelerometer sensor data. Returns an object with x, y, and z properties representing acceleration in cm/s^2 along each axis.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Accelerometer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrent(): Result\n```\n\n----------------------------------------\n\nTITLE: Using resetDropWristScreenOff Function in JavaScript\nDESCRIPTION: Example of using the pauseDropWristScreenOff and resetDropWristScreenOff functions from the @zos/display module. It demonstrates pausing the drop wrist screen off behavior and then resetting it after a 3-second delay.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/resetDropWristScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pauseDropWristScreenOff, resetDropWristScreenOff } from '@zos/display'\n\npauseDropWristScreenOff({\n  duration: 0,\n})\n\nsetTimeout(() => {\n  resetDropWristScreenOff()\n}, 3000)\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the setTimeout function, showing its parameter types and return value type. The function accepts a callback function and an optional delay parameter, returning a timeout ID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/setTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setTimeout(callback: Callback, delay?: Delay): TimeoutID\n```\n\n----------------------------------------\n\nTITLE: Timer Function Type Definition\nDESCRIPTION: TypeScript type definition for the set function that creates timer alarms.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/alarm/set.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction set(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Widget getType Method Type Definition in TypeScript\nDESCRIPTION: Type definition for the widget.getType() method, showing it returns a result without taking any parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getType.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Extended Directory Structure with GTR3\nDESCRIPTION: Updated directory structure showing organization of assets for both GTR3 and GTR3 PRO devices.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app.js\n├── app.json\n├── assets\n│   ├── gtr-3\n│   │   ├── icon.png\n│   │   └── image\n│   │       └── logo.png\n│   └── gtr-3-pro\n│       ├── icon.png\n│       └── image\n│           └── logo.png\n...\n```\n\n----------------------------------------\n\nTITLE: Defining setScreenOff Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for the setScreenOff function. It takes no parameters and returns a Result type, which is a number indicating success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/setScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setScreenOff(): Result\n```\n\n----------------------------------------\n\nTITLE: Opening a File with Read/Write Access in JavaScript\nDESCRIPTION: This example demonstrates how to use hmFS.open() to open a file named 'test_file.txt' with read and write access. If the file doesn't exist, it will be created. The function returns a file handle (fileId) for further operations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/open.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileId = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\n```\n\n----------------------------------------\n\nTITLE: Displaying PAI Values in Zepp OS\nDESCRIPTION: Complete example demonstrating how to create a PAI sensor and access all its properties including daily PAI, total accumulated PAI, and PAI values from the previous six days. This code logs all available PAI metrics to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/PAI.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pai = hmSensor.createSensor(hmSensor.id.PAI)\n\nconsole.log(\n  'The pai dailypai: ' +\n    pai.dailypai +\n    ' totalpai:' +\n    pai.totalpai +\n    ' prepai0:' +\n    pai.prepai0 +\n    ' prepai1:' +\n    pai.prepai1 +\n    ' prepai2:' +\n    pai.prepai2 +\n    ' prepai3:' +\n    pai.prepai3 +\n    ' prepai4:' +\n    pai.prepai4 +\n    ' prepai5:' +\n    pai.prepai5 +\n    ' prepai6:' +\n    pai.prepai6 +\n    '\\r\\n'\n)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling App from Connected Device in CLI Bridge Mode\nDESCRIPTION: Terminal command to uninstall the current directory's application from the connected runtime environment.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nuninstall\n```\n\n----------------------------------------\n\nTITLE: Example Usage of hmFS.SysProGetBool in JavaScript\nDESCRIPTION: Example demonstrating how to use hmFS.SysProGetBool to retrieve a boolean value from temporary storage using a specific key and then log the result to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst result = hmFS.SysProGetBool('test_key')\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Defining Error Method Type\nDESCRIPTION: TypeScript type definition for the error method that prints error level messages.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nerror(...args: string[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining setScreenAutoBright Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for the setScreenAutoBright method. It takes a boolean parameter and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/setScreenAutoBright.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(isAutoBright: boolean) => result\n```\n\n----------------------------------------\n\nTITLE: Creating and Stopping a Timer in ZeppOS\nDESCRIPTION: Demonstrates how to create a timer using createTimer and then stop it using stopTimer. The timer is set to trigger after 500ms and then every 1000ms, with a callback function that logs information.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/timer/stopTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//创建timer，延时500ms触发，之后每1000ms执行一次\nconst timer1 = timer.createTimer(\n  500,\n  1000,\n  function (option) {\n    //回调\n    console.log('timer callback')\n    console.log(option.hour)\n  },\n  { hour: 0, minute: 15, second: 30 }\n)\n\n//停止timer1\ntimer.stopTimer(timer1)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.stat_asset in TypeScript\nDESCRIPTION: TypeScript type definition showing the function signature that takes a path string parameter and returns a tuple containing stat object and error code.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/stat_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string) => [stat, err]\n```\n\n----------------------------------------\n\nTITLE: Creating Heart Rate Sensor in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a heart rate sensor instance and log the last measured heart rate value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst heart = hmSensor.createSensor(hmSensor.id.HEART)\n\nconsole.log(heart.last)\n```\n\n----------------------------------------\n\nTITLE: Using getScrollTop Function\nDESCRIPTION: Example showing how to import and use the getScrollTop function to retrieve the current vertical scroll position of a page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/getScrollTop.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getScrollTop } from '@zos/page'\n\nconst top = getScrollTop()\nconsole.log(top)\n```\n\n----------------------------------------\n\nTITLE: Creating HISTOGRAM Widget in Zepp OS\nDESCRIPTION: Demonstrates how to import and create a HISTOGRAM widget using the @zos/ui library. This snippet shows the basic structure for initializing the widget with parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst histoGram = createWidget(widget.HISTOGRAM, Param)\n```\n\n----------------------------------------\n\nTITLE: Using setBrightScreenCancel in JavaScript\nDESCRIPTION: Example showing how to use setBrightScreenCancel() after setting a bright screen duration. The method should be called in the app destroy function to clean up brightness settings.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/setBrightScreenCancel.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhmSetting.setBrightScreen(10)\nhmSetting.setBrightScreenCancel()\n```\n\n----------------------------------------\n\nTITLE: Configuring app.json for Multi-Device Support in Zepp OS\nDESCRIPTION: This JSON configuration demonstrates how to set up the targets field in app.json to support multiple device models. It includes configuration for GTR-3-Pro with appropriate device sources and design width specifications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/code-adaptations-for-new-devices.mdx#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ···\n      },\n      \"platforms\": [\n        {\n          \"name\": \"gtr-3-pro\",\n          \"deviceSource\": 229\n        },\n        {\n          \"name\": \"gtr-3-prow\",\n          \"deviceSource\": 230\n        }\n      ],\n      \"designWidth\": 480\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Weight Target Documentation in JSX\nDESCRIPTION: This code imports content from a referenced MDX file that contains the documentation for the hmSetting.getWeightTarget API function, and then renders that content directly in the current file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getWeightTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getWeightTarget.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using redraw() Function to Manually Update UI\nDESCRIPTION: Example showing how to import and call the redraw() function from the @zos/ui package to manually trigger a UI update.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/redraw.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { redraw } from '@zos/ui'\n\nredraw()\n```\n\n----------------------------------------\n\nTITLE: Using Stress Sensor API in JavaScript\nDESCRIPTION: This example demonstrates how to use the Stress Sensor API in JavaScript. It shows how to create a Stress object, get the current stress measurement, register a change callback, and unregister the callback when it's no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stress } from '@zos/sensor'\n\nconst stress = new Stress()\nconst { value } = stress.getCurrent()\n\nconst callback = () => {\n  console.log(stress.getCurrent())\n}\n\nstress.onChange(callback)\n\n// When not needed for use\nstress.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Month in TypeScript\nDESCRIPTION: Gets the month of the current date, ranging from 1 to 12, where 1 represents January.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetMonth(): number\n```\n\n----------------------------------------\n\nTITLE: Canceling Screen Change Callback in TypeScript\nDESCRIPTION: Method to cancel a previously registered callback function for screen display change events. The same callback function reference must be provided that was used for registration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: (status: number) => void): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data Properties Example\nDESCRIPTION: Example showing how to access individual properties from the getUserData() method return object. Demonstrates retrieving age, height, weight, gender, and nickname values.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getUserData.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst age = hmSetting.getUserData().age\nconst height = hmSetting.getUserData().height\nconst weight = hmSetting.getUserData().weight\nconst gender = hmSetting.getUserData().gender\nconst nickName = hmSetting.getUserData().nickName\n```\n\n----------------------------------------\n\nTITLE: Using Screen Sensor API in JavaScript\nDESCRIPTION: Demonstrates how to use the Screen sensor API to get screen status, register a change event listener, and unregister the listener when no longer needed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Screen } from '@zos/sensor'\n\nconst screen = new Screen()\nconst status = screen.getStatus()\nconst callback = () => {\n  console.log(screen.getStatus())\n}\n\nscreen.onChange(callback)\n\n// When not needed for use\nscreen.offChange(callback)\n```\n\n----------------------------------------\n\nTITLE: Installing NVM\nDESCRIPTION: Command to download and install Node Version Manager (NVM).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/environment.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Creating SPORT_DATA Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a SPORT_DATA widget using the createWidget function from the @zos/ui module. The widget is used to display sports data in ZeppOS applications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SPORT_DATA.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst sportData = createWidget(widget.SPORT_DATA, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining resetPalmScreenOff Function Type in TypeScript\nDESCRIPTION: This code snippet defines the type signature for the resetPalmScreenOff function. It takes no parameters and returns a Result type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/display/resetPalmScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction resetPalmScreenOff(): Result\n```\n\n----------------------------------------\n\nTITLE: Type Definition for swipeToIndex Function in TypeScript\nDESCRIPTION: TypeScript function signature for the swipeToIndex function, showing its parameter types and return value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/page/swipeToIndex.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction swipeToIndex(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for getUserData\nDESCRIPTION: Type definition showing the return type of the getUserData function.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getUserData.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => userData\n```\n\n----------------------------------------\n\nTITLE: Checking AOD Mode Status in TypeScript\nDESCRIPTION: Checks if Always-On Display (AOD) mode is enabled.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Screen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAodMode(): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining setProperty Method Signature in TypeScript\nDESCRIPTION: TypeScript definition for the setProperty method, which takes a propertyId string and a value of any type, returning void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/setProperty.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(propertyId: string, val: any) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Text Widget - Basic Initialization\nDESCRIPTION: Demonstrates how to import and create a basic text widget using the ZeppOS UI framework.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/TEXT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst text = createWidget(widget.TEXT, Param)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Targets in ZeppOS app.json\nDESCRIPTION: Demonstrates how to configure the targets property in app.json, which specifies build configurations for different device targets.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/app-json.mdx#2025-04-07_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"gtr-3-pro\": {\n      \"module\": {\n        // ···\n      }\n    },\n    \"gtr-3\": {\n      \"module\": {\n        // ···\n      }\n    },\n    \"gts-3\": {\n      \"module\": {\n        // ···\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setScreenOff Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the setScreenOff function. It takes no parameters and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/setScreenOff.mdx#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Using px Function for Screen Adaptation in ZeppOS\nDESCRIPTION: Demonstrates how the px utility function works to scale values based on device width and the configured designWidth, showing different results on GTR 3 PRO and GTR 3 devices.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/best-practice/multi-screen-adaption.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { px } from '@zos/utils'\n\n// in GTR 3 PRO\nconsole.log(px(100)) // 100\n\n// in GTR 3\nconsole.log(px(100)) // 95\n```\n\n----------------------------------------\n\nTITLE: Creating STROKE_RECT Widget - JavaScript\nDESCRIPTION: Basic widget creation syntax using hmUI.createWidget for a stroked rectangle component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/STROKE_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst strokeRect = hmUI.createWidget(hmUI.widget.STROKE_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Defining setItem Method for Settings Storage in TypeScript\nDESCRIPTION: Defines the type signature for the setItem method, which stores a key-value pair in the settings storage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, value: string) => void\n```\n\n----------------------------------------\n\nTITLE: LocalStorage Usage in Zepp OS 2.0\nDESCRIPTION: Demonstrates how to use the localStorage API for persistent key-value storage in Zepp OS 2.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/new-api.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { localStorage } from '@zos/storage'\n\nlocalStorage.setItem('test', 'test value')\nconst val = localStorage.getItem('test')\nconst defaultValue = localStorage.getItem('none_key', 'defaultValue')\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Event Listener in Zepp OS JavaScript\nDESCRIPTION: Example implementation of a key event listener that handles different physical keys (BACK, SELECT, HOME, UP, DOWN, SHORTCUT) and actions (CLICK, LONG_PRESS, DOUBLE_CLICK, RELEASE, PRESS) in a Zepp OS application. Returns true to skip default behavior for HOME key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/keyEvent/registerKeyEvent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//Registering a key listener Repeated registration of a JsApp will cause the last registered callback to fail.\nhmApp.registerKeyEvent(function (key, action) {\n  console.log('receive key code:' + code + ' action:' + action)\n  let msg = ''\n  let ret = false\n  switch (key) {\n    case hmApp.key.BACK:\n      msg = 'back.'\n      break\n    case hmApp.key.SELECT:\n      msg = 'select.'\n      break\n    case hmApp.key.HOME:\n      msg = 'home.'\n      ret = true //Skip the default home button handling.\n      break\n    case hmApp.key.UP:\n      msg = 'up.'\n      break\n    case hmApp.key.DOWN:\n      msg = 'down.'\n      break\n    case hmApp.key.SHORTCUT:\n      msg = 'shortcut.'\n      break\n    default:\n      msg = 'none.'\n      break\n  }\n\n  switch (action) {\n    case hmApp.action.CLICK:\n      msg = msg + 'click'\n      break\n    case hmApp.action.LONG_PRESS:\n      msg = msg + 'longPress'\n      break\n    case hmApp.action.DOUBLE_CLICK:\n      msg = msg + 'doubleClick'\n      break\n    case hmApp.action.RELEASE:\n      msg = msg + 'release'\n      break\n    case hmApp.action.PRESS:\n      msg = msg + 'press'\n      break\n    default:\n      msg = msg + 'none'\n      break\n  }\n\n  console.log('receive key:' + msg)\n  return ret\n})\n```\n\n----------------------------------------\n\nTITLE: Using createSysTimer in JavaScript for Zepp OS\nDESCRIPTION: Example demonstrating how to create both non-periodic and periodic system timers in Zepp OS. The example shows importing the function, creating a delayed timer with a custom parameter, and setting up a recurring interval timer.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/timer/createSysTimer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createSysTimer } from '@zos/timer'\n\n// Create a non-periodic timer that executes after 5 seconds\nconst timerId = createSysTimer(\n  false,\n  5000,\n  (param) => {\n    console.log('timer callback with param:', param)\n  },\n  'customParam',\n)\n\n// Create a periodic timer that executes every 10 seconds\nconst intervalId = createSysTimer(true, 10000, () => {\n  console.log('interval timer callback')\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Widget ID - TypeScript Function Signature\nDESCRIPTION: Function signature for the getId() method that returns a unique numerical identifier for a widget. Available from API_LEVEL 2.0 and above.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/getId.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Using toObject Method in JavaScript\nDESCRIPTION: Demonstrates how to use the toObject method to convert the settings storage contents into a JavaScript object and log it to the console.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst storageObj = settings.settingsStorage.toObject()\n\nconsole.log(storageObj)\n```\n\n----------------------------------------\n\nTITLE: hmUI Data Type Constants for Zepp OS\nDESCRIPTION: Complete enumeration of hmUI data type constants used for accessing various device metrics and functionalities. Includes health metrics, environmental data, activity tracking, and system functions. Each constant specifies its maximum data bits allocation where applicable.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/data_type.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhmUI.data_type.BATTERY             // Electricity (3 bits)\nhmUI.data_type.STEP                // Current Step Count (5 bits)\nhmUI.data_type.STEP_TARGET         // Target number of steps (5 bits)\nhmUI.data_type.CAL                 // Current Calories (4 bits)\nhmUI.data_type.CAL_TARGET          // Target Calories (4 bits)\nhmUI.data_type.HEART               // Current heart rate (3 bits)\nhmUI.data_type.PAI_DAILY           // Today PAI (3 bits)\nhmUI.data_type.PAI_WEEKLY          // Total PAI (3 bits)\nhmUI.data_type.DISTANCE            // Distance (4 bits)\nhmUI.data_type.STAND               // Current stand (5 bits)\nhmUI.data_type.STAND_TARGET        // Target stand (2 bits)\nhmUI.data_type.WEATHER_CURRENT     // Current temperature (3 bits)\nhmUI.data_type.WEATHER_LOW         // Current low temperature (3 bits)\nhmUI.data_type.WEATHER_HIGH        // Current high temperature (3 bits)\nhmUI.data_type.UVI                 // Ultraviolet light (2 bits)\nhmUI.data_type.AQI                 // Air Quality (3 bits)\nhmUI.data_type.HUMIDITY            // Humidity (3 bits)\nhmUI.data_type.ACTIVITY            // Current Activities (5 bits)\nhmUI.data_type.ACTIVITY_TARGET     // Target Activities (5 bits)\nhmUI.data_type.FAT_BURNING         // Fat Burning (3 bits)\nhmUI.data_type.FAT_BURNING_TARGET  // Fat Burning Goals (3 bits)\nhmUI.data_type.SUN_CURRENT         // Sunrise and sunset display (5 bits)\nhmUI.data_type.SUN_RISE            // Sunrise (5 bits)\nhmUI.data_type.SUN_SET             // Sunset (5 bits)\nhmUI.data_type.WIND                // Wind Power (2 bits)\nhmUI.data_type.STRESS              // Pressure (3 bits)\nhmUI.data_type.SPO2                // Blood oxygen (3 bits)\nhmUI.data_type.ALTIMETER           // Pneumatic pressure (4 bits)\nhmUI.data_type.MOON                // Moon phase (progress only)\nhmUI.data_type.FLOOR               // Climbing a building (3 bits)\nhmUI.data_type.ALARM_CLOCK         // Alarm Clock (5 bits)\nhmUI.data_type.COUNT_DOWN          // Countdown (2 bits)\nhmUI.data_type.STOP_WATCH          // Stopwatch (2 bits)\nhmUI.data_type.SLEEP               // Sleep (3 bits)\nhmUI.data_type.OUTDOOR_RUNNING     // Outdoor running (IMG_CLICK only)\nhmUI.data_type.WALKING             // Walking (IMG_CLICK only)\nhmUI.data_type.OUTDOOR_CYCLING     // Outdoor cycling (IMG_CLICK only)\nhmUI.data_type.FREE_TRAINING       // Free training (IMG_CLICK only)\nhmUI.data_type.POOL_SWIMMING       // Pool swimming (IMG_CLICK only)\nhmUI.data_type.OPEN_WATER_SWIMMING // Open water swimming (IMG_CLICK only)\n```\n\n----------------------------------------\n\nTITLE: Creating BATTERY Sensor in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create a BATTERY sensor instance using the hmSensor API in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n```\n\n----------------------------------------\n\nTITLE: Using Logger Example\nDESCRIPTION: Example showing how to import the log module, create a named logger instance, and use different logging methods.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/utils/log.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { log } from '@zos/utils'\n\nconst pageLogger = log.getLogger('page')\n\npageLogger.log('page created')\npageLogger.error('page error')\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SysProSetInt64 API Documentation\nDESCRIPTION: This code imports the content from the SysProSetInt64 documentation file and renders it using JSX. The Content component likely contains detailed API documentation for the SysProSetInt64 function from the hmFS module.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProSetInt64.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetInt64.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Using getTimeFormat Method in JavaScript\nDESCRIPTION: A code example showing how to retrieve the current system time format (12-hour or 24-hour) using the hmSetting.getTimeFormat() method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSetting/getTimeFormat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeFormat = hmSetting.getTimeFormat()\n```\n\n----------------------------------------\n\nTITLE: Using Zepp OS 1.0 API Methods\nDESCRIPTION: Example of using various Zepp OS 1.0 API methods, including setLayerY, getUserData, and gotoHome. These methods are part of the global hmApp and hmSetting objects in version 1.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhmApp.setLayerY(100)\nconst result = hmSetting.getUserData()\nhmApp.gotoHome()\n```\n\n----------------------------------------\n\nTITLE: Converting i18n Module Usage from ZeppOS 1.0 to 2.0\nDESCRIPTION: Shows how to update internationalization function calls. In 2.0, the module is imported from @zos/i18n and the function name changes from gettext to getText.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/migration-guide.md#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { gettext } from 'i18n'\n\ngettext('i18n_key')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getText } from '@zos/i18n'\n\ngetText('i18n_key')\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example Usage of getTemperatureUnit\nDESCRIPTION: Example showing how to import and use the getTemperatureUnit function to check if the configured temperature unit is Celsius.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getTemperatureUnit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTemperatureUnit, TEMPERATURE_UNIT_CENTIGRADE } from '@zos/settings'\n\nconst temperatureUnit = getTemperatureUnit()\n\nif (temperatureUnit === TEMPERATURE_UNIT_CENTIGRADE) {\n  console.log('centigrade')\n}\n```\n\n----------------------------------------\n\nTITLE: GetScene Function Type Definition\nDESCRIPTION: TypeScript type definition for the getScene function that returns the current scene number.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/app/getScene.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getScene(): Result\n```\n\n----------------------------------------\n\nTITLE: Adding Child Widgets to Containers in ZeppOS\nDESCRIPTION: Demonstrates how to use the addLayoutChild method to add button widgets to a virtual container in ZeppOS. Shows both adding to the end of the container and at a specified index.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/addLayoutChild.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst container = createWidget(widget.VIRTUAL_CONTAINER)\nconst button = createWidget(widget.BUTTON)\n\n// Add child node to the end of container\ncontainer.addLayoutChild(button)\n\n// Add child node at specified position\ncontainer.addLayoutChild(button, 0)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getDateFormat Function in JavaScript\nDESCRIPTION: Example showing how to import and use the getDateFormat function to check the current system date format against predefined constants.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getDateFormat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDateFormat, DATE_FORMAT_YMD } from '@zos/settings'\n\nconst currentDateFormat = getDateFormat()\n\nif (currentDateFormat === DATE_FORMAT_YMD) {\n  console.log('date format is YYYY-MM-DD')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Image Widget in ZeppOS\nDESCRIPTION: Basic example of creating an image widget with hmUI.createWidget() and setting required parameters like x, y coordinates and image source.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst img = hmUI.createWidget(hmUI.widget.IMG, Param)\n```\n\n----------------------------------------\n\nTITLE: Initializing ImageView for ScrollList in JavaScript\nDESCRIPTION: Defines an array of ImageView objects for use in a ScrollList widget. Each object specifies the position, size, data binding key, and click action for an image item.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Each structure in the array is an imageView\nconst image_view = [{ x: 0, y: 0, w: 20, h: 20, key: 'img_src', action: true }]\n```\n\n----------------------------------------\n\nTITLE: Creating IMG_ANIM Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG_ANIM widget using hmUI.createWidget(). It sets various parameters such as animation path, prefix, extension, fps, size, repeat count, and status. It also includes a callback function for animation completion.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgAnim = hmUI.createWidget(hmUI.widget.IMG_ANIM, Param)\n```\n\n----------------------------------------\n\nTITLE: Getting Minutes in TypeScript\nDESCRIPTION: Demonstrates how to get the current minutes using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetMinutes(): number\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener for Heart Rate Sensor in JavaScript\nDESCRIPTION: This snippet shows how to register an event listener for the heart rate sensor. It includes examples for both LAST and CURRENT events, as well as how to remove the listeners in the onDestroy lifecycle method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/HEART.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbattery.addEventListener(event, callback: Callback)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst hrLastListener = function () {\n  console.log(heart.last)\n}\n\nheart.addEventListener(heart.event.LAST, hrLastListener)\n\n// ...\n// 销毁函数\nonDestroy() {\n  heart.removeEventListener(heart.event.LAST, hrLastListener)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst hrCurrListener = function () {\n  console.log(heart.current)\n}\n\nheart.addEventListener(heart.event.CURRENT, hrCurrListener)\n\n// ...\n// 销毁函数\nonDestroy() {\n  heart.removeEventListener(heart.event.CURRENT, hrCurrListener)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Watch Pointers\nDESCRIPTION: Shows how to create editable watch pointers with customizable hour, minute, and second hands, including positioning and preview configurations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/widget/edit_watchface.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointerConfig = [\n  {\n    id: 1,\n    hour: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 12,\n      posY: 172,\n      path: pointPath + 'hand_4_h.png'\n    },\n    minute: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 18,\n      posY: 229,\n      path: pointPath + 'hand_4_m.png'\n    },\n    second: {\n      centerX: centerXValue,\n      centerY: centerYValue,\n      posX: 13,\n      posY: 245,\n      path: pointPath + 'hand_all_s.png'\n    },\n    preview: pointPath + 'preview1.png'\n  }\n]\n\nconst pointerEdit = hmUI.createWidget(hmUI.widget.WATCHFACE_EDIT_POINTER, {\n  edit_id: 120,\n  x: 0,\n  y: 0,\n  config: pointerConfig,\n  count: pointerConfig.length,\n  default_id: 1,\n  fg: ROOTPATH + 'pointer/fg.png',\n  tips_x: 178,\n  tips_y: 428,\n  tips_bg: TIPS_ROOT + 'bg_tips.png'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating DATE_POINTER Widget in ZeppOS\nDESCRIPTION: Example of creating a DATE_POINTER widget to display date information using a pointer visualization. The widget supports customization of pointer position, angles, background images, and date type selection between month, day, or week display.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/DATE_POINTER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet week = hmUI.createWidget(hmUI.widget.DATE_POINTER, {\n  scale_x: 0,\n  scale_x: 0, scale_y: 0,\n  scale_sc: 'bg.png', // Background image, optional.\n  scale_tc: 'bg.png',\n  scale_en: 'bg.png',\n  center_x: 100,\n  center_y: 100,\n  src: 'pointer.png', // Image.\n  posX: 0,\n  posY: 0,\n  cover_x: 0, //Pointer above the hat.\n  cover_y: 0,\n  cover_path: 'cover.png',\n  start_angle: 0, //Point 0 is positive. You can write negative numbers.\n  end_angle: 180,\n  type: hmUI.date.WEEK //Refer to the table above.\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Runtime Environment in Zepp CLI Bridge Mode\nDESCRIPTION: Command to establish a connection between Zepp CLI and a runtime environment when in Developer Bridge mode. After execution, the terminal will display a success message upon successful connection.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/developer-bridge-mode.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconnect\n```\n\n----------------------------------------\n\nTITLE: Registering Per-Minute Callback in TypeScript\nDESCRIPTION: Shows how to register a callback function that runs at the end of every minute. Available from API_LEVEL 2.1.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nonPerMinute(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Persistence with LocalStorage in ZeppOS Mini Programs\nDESCRIPTION: This code demonstrates how to use the LocalStorage API to persist data in a ZeppOS Mini Program. It initializes localStorage in the state, retrieves saved data when the page builds, and saves the current state when the page is destroyed, allowing application state to persist between sessions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/persistence-storage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LocalStorage } from '@zos/storage'\n\nconst localStorage = new LocalStorage()\n\nPage({\n  state: {\n    data: null,\n    storage: localStorage\n  },\n  build() {\n    this.state.data = localStorage.getItem('state')\n    // ...\n  },\n  onDestroy() {\n    localStorage.setItem('state', this.state.data)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Callback Function Type Definition\nDESCRIPTION: TypeScript type definition for the callback function used in sensor event listeners. The callback takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/DISTANCE.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Defining clear Method Type in TypeScript\nDESCRIPTION: Type definition for the clear method, which deletes all key-value pairs in the settingsStorage.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Unregistering Stress Change Callback - TypeScript Definition\nDESCRIPTION: TypeScript interface definition for canceling a previously registered stress measurement change callback.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Setting defaultLanguage in ZeppOS app.json\nDESCRIPTION: Configuration for the defaultLanguage property which specifies the default language for the application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-json.mdx#2025-04-07_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"defaultLanguage\": \"zh-cn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Blood Oxygen Measurement Change Callback in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the onChange() method, which registers a callback function to listen for blood oxygen measurement change events.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/BloodOxygen.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using statSync Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the statSync function to retrieve file information. It imports the function, calls it with a file path, and logs the file size if the file exists.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/fs/statSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { statSync } from '@zos/fs'\n\nconst result = statSync({\n  path: 'test.txt',\n})\n\nif (result) {\n  const { size } = result\n  console.log(size)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a DIALOG Widget with Callback Functions\nDESCRIPTION: Shows a complete example of creating and configuring a DIALOG widget with customized appearance properties and callback functions for button clicks. The example demonstrates setting properties, handling button events, and controlling dialog visibility.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/DIALOG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createWidget, widget, prop, align } from '@zos/ui'\n\nPage({\n  build() {\n    const dialog = createWidget(widget.DIALOG, {\n      ok_text: 'OK',\n      cancel_text: 'CANCEL'\n    })\n    dialog.setProperty(prop.MORE, {\n      text: 'DIALOG',\n      content_text_size: 40,\n      content_bg_color: 0x000000,\n      content_text_color: 0xffffff,\n      dialog_align_h: align.CENTER_H,\n      content_text_align_h: align.CENTER_H,\n      content_text_align_v: align.CENTER_V,\n      ok_func: () => {\n        console.log('OK')\n      },\n      cancel_func: () => {\n        console.log('CANCEL')\n      }\n    })\n    dialog.setProperty(prop.SHOW, true)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Wear Status Change Callback in TypeScript\nDESCRIPTION: This snippet demonstrates how to register a callback function for the device wear status change event in TypeScript. The callback function is called whenever the wearing status changes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Using removeListener Function in JavaScript\nDESCRIPTION: This example demonstrates how to import the removeListener function from the @zos/ble module in a JavaScript file. The function can then be used to cancel BLE connection status listening.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/removeListener.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { removeListener } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: React Image Import Example in Markdown\nDESCRIPTION: Example of using useBaseUrl to import and display an image in React-based documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/version-info/new-features-35.md#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl'\n```\n\n----------------------------------------\n\nTITLE: Updating HISTOGRAM Data in ZeppOS\nDESCRIPTION: Demonstrates how to update the data of an existing histogram widget using the setProperty method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/HISTOGRAM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = ......;\n  view.setProperty(prop.UPDATE_DATA, {\n  data_array: [100, 100, 0, 0, 0, 100],\n  data_count: 6\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Temporary Strings with hmFS.SysProGetChars in TypeScript\nDESCRIPTION: TypeScript function signature for hmFS.SysProGetChars which retrieves a temporarily stored string using a key. The function returns the stored string value associated with the provided key.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Configuring data_array for SCROLL_LIST in ZeppOS\nDESCRIPTION: This snippet demonstrates how to structure the data_array parameter for the SCROLL_LIST widget. It contains an array of objects with key-value pairs corresponding to the defined keys in the item configuration.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/SCROLL_LIST.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataList = [\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '12' },\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '13' },\n  { img_src: rootPath + 'step/step_num_1.png', name: 'name1', age: '13' }\n]\n```\n\n----------------------------------------\n\nTITLE: Unregistering Last Heart Rate Change Callback in TypeScript\nDESCRIPTION: This snippet demonstrates how to unregister the callback function for changes in the last heart rate measurement.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/HeartRate.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noffLastChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Implementing SecondaryWidget in JavaScript\nDESCRIPTION: This example demonstrates how to use the SecondaryWidget function in a Zepp OS application. It shows the implementation of various lifecycle methods and state management within a SecondaryWidget.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/global/SecondaryWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSecondaryWidget({\n  state: {\n    text: 'Hello Zepp OS',\n  },\n  onInit() {\n    console.log('onInit')\n  },\n  build() {\n    console.log('build')\n    console.log(this.state.text)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Clickable Widget in ZeppOS JavaScript\nDESCRIPTION: This example demonstrates how to create a widget that doesn't receive click events by setting the 'enable' property to false during widget creation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhmUI.createWidget(hmUI.widget.IMG, {\nx: 158,\ny: 218,\nw: 112,\nh: 136,\nalpha: 100,\nsrc: \"a.png\",\nenable：false，//False does not receive click events.\n})\n```\n\n----------------------------------------\n\nTITLE: Running Zeus Development Preview Command\nDESCRIPTION: Command to compile and preview a Zepp OS Mini Program project in the simulator. This should be run from within the project directory (e.g., hello-world) and will trigger the Zeus CLI to compile the code and launch the preview in the simulator.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/quick-start/simulator-dev.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzeus dev\n```\n\n----------------------------------------\n\nTITLE: Creating Battery Sensor in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a battery sensor and log the current battery level. It uses the hmSensor.createSensor method with the BATTERY sensor ID.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmSensor/sensorId/BATTERY.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n\nconsole.log('The current battery level is ' + battery.current + '\\r\\n')\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple VIEW_CONTAINER Widgets with Scrolling and Z-Index\nDESCRIPTION: A complete example demonstrating how to create multiple VIEW_CONTAINER widgets with different z-index values, implementing scrollable content and button interactions. The example creates colorful sections with text and a button overlay.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/VIEW_CONTAINER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget, text_style, align } from '@zos/ui'\nimport { px } from '@zos/utils'\n\nconst getRandomColor = () => {\n  const randomArr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']\n\n  function getRandomFromSection(low, high) {\n    const RANDOM = Math.random()\n    const RANGE = high - low + 1\n\n    return Math.floor(RANDOM * RANGE) + low\n  }\n\n  const colorStr = Array.from({ length: 6 }).reduce((prev, curr) => {\n    const random = getRandomFromSection(0, 15)\n    return prev + randomArr[random]\n  }, '0x')\n\n  return Number(colorStr)\n}\n\nPage({\n  build() {\n    createWidget(widget.TEXT, {\n      x: px(96),\n      y: px(40),\n      w: px(288),\n      h: px(46),\n      color: 0xffffff,\n      text_size: px(36),\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'VIEW_CONTAINER'\n    })\n\n    const viewContainer = createWidget(widget.VIEW_CONTAINER, {\n      x: px(0),\n      y: px(86),\n      w: px(480),\n      h: px(400)\n    })\n\n    Array.from({ length: 5 }).forEach((_, index) => {\n      viewContainer.createWidget(widget.FILL_RECT, {\n        x: 0,\n        y: px(index * 400),\n        w: px(480),\n        h: px(400),\n        color: getRandomColor()\n      })\n\n      viewContainer.createWidget(widget.TEXT, {\n        x: px(96),\n        y: px(170) + px(index * 400),\n        w: px(288),\n        h: px(46),\n        text_size: px(36),\n        color: 0xffffff,\n        align_h: align.CENTER_H,\n        align_v: align.CENTER_V,\n        text: `INDEX: ${index}`\n      })\n    })\n\n    const viewContainerButton = createWidget(widget.VIEW_CONTAINER, {\n      x: px(0),\n      y: px(86),\n      w: px(480),\n      h: px(400),\n      z_index: 1,\n      scroll_enable: false\n    })\n\n    viewContainerButton.createWidget(widget.BUTTON, {\n      x: 0,\n      y: px(50),\n      w: px(200),\n      h: px(100),\n      text: 'Click',\n      radius: px(12),\n      normal_color: DEFAULT_COLOR,\n      press_color: DEFAULT_COLOR_TRANSPARENT,\n      click_func: () => {\n        console.log('click button')\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Date in TypeScript\nDESCRIPTION: Demonstrates how to get the current day of the month (1-31) using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetDate(): number\n```\n\n----------------------------------------\n\nTITLE: Setting Item in LocalStorage - TypeScript\nDESCRIPTION: Sets a key-value pair in local storage. The method takes a string key and any value as parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/storage/localStorage.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetItem(key: string, value: any): void\n```\n\n----------------------------------------\n\nTITLE: Getting Screen Brightness Type Definition - TypeScript\nDESCRIPTION: Type definition showing the signature of the getBrightness function that returns a numeric brightness value.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSetting/getBrightness.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => result\n```\n\n----------------------------------------\n\nTITLE: Getting Month in TypeScript\nDESCRIPTION: TypeScript method definition for getting current month (1-12)\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetMonth(): number\n```\n\n----------------------------------------\n\nTITLE: Creating Circle UI Component in Zepp OS\nDESCRIPTION: This snippet demonstrates how to create a circle widget using the hmUI.createWidget method. It requires specifying the center coordinates, radius, color, and optionally the transparency of the circle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/CIRCLE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst circle = hmUI.createWidget(hmUI.widget.CIRCLE, Param)\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week in TypeScript\nDESCRIPTION: TypeScript method definition for getting current day of week (1-7, Monday is 1)\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetDay(): number\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnCharaNotification in JavaScript\nDESCRIPTION: Example code showing how to import the mstOnCharaNotification function from the Zepp OS BLE module. This is the starting point for setting up BLE characteristic notifications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnCharaNotification.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { mstOnCharaNotification } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Timestamp in TypeScript\nDESCRIPTION: Gets the UTC timestamp in milliseconds using the Time sensor.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetTime(): number\n```\n\n----------------------------------------\n\nTITLE: Function Signature for BLE Characteristic Notification Registration in TypeScript\nDESCRIPTION: TypeScript function signature for mstOnCharaNotification which accepts a callback function and returns a boolean result indicating success or failure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ble/mstOnCharaNotification.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction mstOnCharaNotification(callback: Callback): Result\n```\n\n----------------------------------------\n\nTITLE: Complete CYCLE_LIST Implementation Example\nDESCRIPTION: A full example showing how to implement a CYCLE_LIST widget with image items. The example creates a vertical scrollable list of 5 number images with click handling functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_LIST.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  state: {\n    pageName: 'CYCLE_LIST'\n  },\n\n  build() {\n    const imgArray = ['number-img/0.png', 'number-img/1.png', 'number-img/2.png', 'number-img/3.png', 'number-img/4.png']\n    const cycleList = hmUI.createWidget(hmUI.widget.CYCLE_LIST, {\n      x: 230,\n      y: 120,\n      h: 300,\n      w: 30,\n      data_array: imgArray,\n      data_size: 5,\n      item_height: 100,\n      item_click_func: (list, index) => {\n        console.log(index)\n      },\n      item_bg_color: 0xffffff\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: GetWeightUnit Function Type Definition in TypeScript\nDESCRIPTION: Type definition for the getWeightUnit function that returns a numeric result representing the weight unit setting.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getWeightUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getWeightUnit(): Result\n```\n\n----------------------------------------\n\nTITLE: Previewing Zepp OS Docs Project in Chinese\nDESCRIPTION: Commands to start a preview of the project in the Chinese language using npm or yarn.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/README.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- --locale zh-cn\n\n// or\nyarn start --locale zh-cn\n```\n\n----------------------------------------\n\nTITLE: Previewing Zepp OS Docs Project (Default English)\nDESCRIPTION: Commands to start a preview of the project in the default English language using npm or yarn.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n\n// or\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weight Target Example in JavaScript\nDESCRIPTION: Example showing how to import and use the getWeightTarget function from the @zos/settings module to retrieve the user's weight target.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/settings/getWeightTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getWeightTarget } from '@zos/settings'\n\nconst weightTarget = getWeightTarget()\nconsole.log(weightTarget)\n```\n\n----------------------------------------\n\nTITLE: Type Definition for clearLaunchAppTimeout Function in TypeScript\nDESCRIPTION: TypeScript function signature for the clearLaunchAppTimeout function that accepts an Option object containing the timer ID to cancel.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/router/clearLaunchAppTimeout.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction clearLaunchAppTimeout(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Using pausePalmScreenOff Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the pausePalmScreenOff function from the @zos/display module. It sets the duration to pause the palm screen off behavior for 60 seconds (60000 milliseconds).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/display/pausePalmScreenOff.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pausePalmScreenOff } from '@zos/display'\n\npausePalmScreenOff({\n  duration: 60000,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing hmFS Read Documentation Component\nDESCRIPTION: Imports the documentation content for the hmFS.read() functionality from the reference folder using a relative path import.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmFS/read.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/read.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for redraw() Function in TypeScript\nDESCRIPTION: Type definition showing that redraw() takes no parameters and returns undefined.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/redraw.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => undefined\n```\n\n----------------------------------------\n\nTITLE: Reloading a Page in ZeppOS using JavaScript\nDESCRIPTION: This example demonstrates how to use the hmApp.reloadPage() function to load a specific page (pages/index3.js) with additional parameters in a ZeppOS application.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmApp/reloadPage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 加载pages/index3.js页面\nhmApp.reloadPage({ url: 'pages/index3', param: '...' })\n```\n\n----------------------------------------\n\nTITLE: Defining getDateFormat Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for getDateFormat. It returns a Result type, which is a number representing the current system date format.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getDateFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDateFormat(): Result\n```\n\n----------------------------------------\n\nTITLE: Converting opus to wav using Node.js\nDESCRIPTION: This Node.js script converts watch recorded opus audio files to WAV format using the opusscript and wav libraries. It reads the opus file, decodes it, and writes the PCM data to a WAV file with the specified parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/faq/opus-to-mp3.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// npm i opusscript wav\nconst OpusScript = require(\"opusscript\");\nconst fs = require(\"node:fs\");\nconst wav = require(\"wav\");\nfunction opus2wav(input, output, rate = 16000, channels = 1) {\n  const encoder = new OpusScript(rate, channels, OpusScript.Application.AUDIO);\n  const data = fs.readFileSync(input);\n  const out = [];\n  for (let pos = 0; pos < data.byteLength;) {\n    const len = data.readUint32BE(pos);\n    const payload = data.subarray(pos + 8, pos + 8 + len);\n    out.push(encoder.decode(payload));\n    pos += 8 + len;\n  }\n  const pcm = Buffer.concat(out);\n  const writer = new wav.FileWriter(output, {\n    channels: channels,\n    sampleRate: rate,\n    bitDepth: 16\n  });\n  writer.write(pcm);\n  writer.end();\n}\n\nopus2wav(\"userContent.opus\", \"userContent.wav\");\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Sections with Form Elements in Zepp OS\nDESCRIPTION: Shows how to create a more complex UI structure using nested Section components containing a TextInput and Button. This example demonstrates the composition pattern for building multi-component interfaces.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/app-settings/ui-intro.md#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nAppSettingsPage({\n  build(props) {\n    return Section({}, [\n      Section(\n        {},\n        TextInput({\n          label: 'Name',\n        })\n      ),\n      Section(\n        {},\n        Button({\n          label: 'Start',\n          onClick() {\n            // ...\n          }\n        })\n      )\n    ])\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a PICK_DATE Widget in Zepp OS\nDESCRIPTION: Basic example of importing and creating a date picker widget. The PICK_DATE widget requires parameters for positioning and can be customized with various options.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/PICK_DATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst pickDate = createWidget(widget.PICK_DATE, Param)\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Node in Zepp OS Widget Layout\nDESCRIPTION: Example showing how to create a container widget and text widget, then set the text widget as a child of the container using setLayoutParent.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = createWidget(widget.VIRTUAL_CONTAINER, {\n  x: 0,\n  y: 0,\n  w: 480,\n  h: 480\n})\n\nconst text = createWidget(widget.TEXT, {\n  text: 'Hello Zepp OS'\n})\n\n// Set text widget as child node of container\ntext.setLayoutParent(container)\n```\n\n----------------------------------------\n\nTITLE: Getting Gyroscope Frequency Mode in ZeppOS\nDESCRIPTION: Method for retrieving the current frequency mode setting of the gyroscope. The return value corresponds to one of the frequency mode constants (LOW, NORMAL, or HIGH).\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Gyroscope.mdx#2025-04-07_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetFreqMode(): number\n```\n\n----------------------------------------\n\nTITLE: Registering Wear Status Change Callback in TypeScript\nDESCRIPTION: Method to register a callback function that will be called when the device's wear status changes. The callback function takes no parameters and returns void.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Wear.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Widget in ZeppOS UI\nDESCRIPTION: Example showing how to create a text widget in ZeppOS. This snippet demonstrates importing the necessary UI components, creating a text widget with specific positioning, styling, and content within a Page component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/createWidget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, align, text_style } from '@zos/ui'\n\nPage({\n  build() {\n    const textWidget = createWidget(widget.TEXT, {\n      x: 96,\n      y: 120,\n      w: 288,\n      h: 46,\n      color: 0xffffff,\n      text_size: 36,\n      align_h: align.CENTER_H,\n      align_v: align.CENTER_V,\n      text_style: text_style.NONE,\n      text: 'HELLO ZEPPOS'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Function Signature for SysProGetBool in TypeScript\nDESCRIPTION: TypeScript function signature for hmFS.SysProGetBool which retrieves a temporarily stored boolean value. The function takes a string key as parameter and returns a boolean result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/SysProGetBool.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Complete TransferFile Implementation Example\nDESCRIPTION: Full example showing file transfer implementation with progress tracking and event handling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst outbox = tranfserFile.getOutBox()\n\nAppSideService({\n  onInit() {\n    const fileObject = outbox.enqueueFile('data://download/1.png', {type: \"image\", name: \"fdsa\"})\n\n    file.on('progress', (event) => {\n        console.log(\"progress total size\",  event.data.fileSize)\n        console.log(\"progress total size\",  event.data.loadedSize)\n    })\n\n    file.on('change', (event) => {\n        if (event.data.readyState === 'transferred') {\n          console.log('transfered file success')\n        } else (event.data.readyState === 'error') {\n          console.log('error')\n        }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getItem Method Type in TypeScript\nDESCRIPTION: Type definition for the getItem method, which retrieves a stored value by its key name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/side-service-api/settings-storage.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result: string\n```\n\n----------------------------------------\n\nTITLE: Importing SysProSetChars API Documentation Component in JavaScript\nDESCRIPTION: This code imports a React component containing the documentation for the SysProSetChars API from the specified path and then renders it within the current page.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmFS/SysProSetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmFS/SysProSetChars.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Migrating Sensor Module from ZeppOS 1.0 to 2.0\nDESCRIPTION: Example of migrating sensor usage from ZeppOS 1.0 to 2.0. In 2.0, sensors are implemented as classes with method calls instead of attribute access.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/guides/version-info/migration-guide.md#2025-04-07_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst battery = hmSensor.createSensor(hmSensor.id.BATTERY)\n\nconsole.log(battery.current)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Battery } from '@zos/sensor'\n\nconst battery = new Battery()\nconsole.log(battery.getCurrent())\n```\n\n----------------------------------------\n\nTITLE: Using statSync to Retrieve File Information in ZeppOS\nDESCRIPTION: JavaScript example showing how to use the statSync function to get information about a file. It imports the function from the @zos/fs module, calls it with a file path, and logs the file size if the file exists.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/statSync.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { statSync } from '@zos/fs'\n\nconst result = statSync({\n  path: 'test.txt',\n})\n\nif (result) {\n  const { size } = result\n  console.log(size)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Widget - Basic Initialization\nDESCRIPTION: Basic code to create a dialog widget using hmUI.createWidget method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmUI/widget/DIALOG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dialog = hmUI.createWidget(hmUI.widget.DIALOG, Param)\n```\n\n----------------------------------------\n\nTITLE: Using resetPageBrightTime Function in JavaScript\nDESCRIPTION: This example demonstrates how to use the resetPageBrightTime function in conjunction with setPageBrightTime. It imports the necessary functions from the @zos/display module, sets a page bright time, and then resets it.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/display/resetPageBrightTime.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setPageBrightTime, resetPageBrightTime } from '@zos/display'\n\nsetPageBrightTime({\n  brightTime: 60000,\n})\n\nconst result = resetPageBrightTime()\n```\n\n----------------------------------------\n\nTITLE: Getting World Clock Count in ZeppOS\nDESCRIPTION: Type definition for the getWorldClockCount method, which returns the total number of configured world clocks.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/WORLD_CLOCK.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n() => number\n```\n\n----------------------------------------\n\nTITLE: Item Property Setting - JavaScript\nDESCRIPTION: Example of setting properties for a single item in the list, including text color and size configurations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmUI/widget/CYCLE_IMAGE_TEXT_LIST.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst widget = ...\nwidget.setProperty(hmUI.prop.ITEM_MORE,{\n  index:0,\n  item_text_color:0x2f4988,\n  item_text_size:50\n})\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for hmFS.write in TypeScript\nDESCRIPTION: TypeScript function signature showing the hmFS.write method parameters and return type. It accepts a file ID, buffer, position, and length parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/write.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n(fileId: number, buff: ArrayBuffer, pos: number, len: number) => result\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Weight Target in ZeppOS using JavaScript\nDESCRIPTION: This code demonstrates how to retrieve the user's set weight target in kilograms using the hmSetting.getWeightTarget() method. The function returns a number representing the weight target in kilograms, with a default value of 0 if no target has been set.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getWeightTarget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst target = hmSetting.getWeightTarget()\n```\n\n----------------------------------------\n\nTITLE: Type Definition for hmFS.open_asset\nDESCRIPTION: TypeScript type definition showing the function signature for opening asset files. Takes a path string and flag parameter, returns a numeric file handle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/reference/device-app-api/hmFS/open_asset.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(path: string, flag: FLAG) => fileId\n```\n\n----------------------------------------\n\nTITLE: Importing getMileageUnit Documentation Content\nDESCRIPTION: Imports documentation content from a mdx file containing information about the getMileageUnit API setting in ZeppOS.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSetting/getMileageUnit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getMileageUnit.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Initializing FAT_BURRING Sensor in ZeppOS\nDESCRIPTION: Creates a new FAT_BURRING sensor instance and demonstrates accessing current and target values. The sensor provides fat burning metrics in minutes.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fatburn = hmSensor.createSensor(hmSensor.id.FAT_BURRING)\n\nconsole.log(fatburn.current)\nconsole.log(fatburn.target)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Altitude in TypeScript\nDESCRIPTION: Gets the current altitude value in meters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Barometer.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAltitude(): number\n```\n\n----------------------------------------\n\nTITLE: Using getSystemInfo Function in JavaScript\nDESCRIPTION: Example of importing and using the getSystemInfo function from the @zos/settings module to retrieve the minimum API level supported by the device.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getSystemInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSystemInfo } from '@zos/settings'\n\nconst { minAPI } = getSystemInfo()\nconsole.log(minAPI)\n```\n\n----------------------------------------\n\nTITLE: Creating and Canceling a Timed Wake-up Alarm in ZeppOS\nDESCRIPTION: Example showing how to create a new alarm using hmApp.alarmNew() with parameters for the file path, app ID, and delay time, then canceling it using hmApp.alarmCancel() with the returned alarm handle.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmApp/alarm/alarmCancel.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst alarm = hmApp.alarmNew({\n  file: 'pages/js_widget_sample',\n  appid: 1000001,\n  delay: 10\n})\n\n//Cancel wake-up\n\nhmApp.alarmCancel(alarm)\n```\n\n----------------------------------------\n\nTITLE: Button Component Type Definition in TypeScript\nDESCRIPTION: Defines the type signature for the Button component, showing it accepts Props and returns a RenderFunc.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/app-settings-api/ui/button.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: Props) => result: RenderFunc\n```\n\n----------------------------------------\n\nTITLE: Removing a Child Widget from a Parent Container in JavaScript\nDESCRIPTION: Example showing how to remove a button widget from its parent container using the removeLayoutChild method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/removeLayoutChild.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove child widget from parent container\ncontainer.removeLayoutChild(button)\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Clickability in ZeppOS JavaScript\nDESCRIPTION: This snippet shows how to set a widget's clickability using the setEnable method. Setting it to true makes the widget clickable.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmUI/createWidget.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwidget.setEnable(true);//Set the control clickable.\n```\n\n----------------------------------------\n\nTITLE: Using addHealthData Function in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to use the addHealthData function from the @zos/user module. It shows how to call the function with an object containing weight and BMI values, following the specified Option structure.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/user/addHealthData.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addHealthData } from '@zos/user'\n\naddHealthData({\n  weight: 65,\n  bmi: 1900,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing HmBle Module Content in MDX\nDESCRIPTION: Imports HmBle module API documentation from a referenced MDX file and renders it using the Content component.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmBle.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../reference/device-app-api/hmBle.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Creating Fat Burning Sensor Instance\nDESCRIPTION: Initializes a new Fat Burning sensor instance using the hmSensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/FAT_BURRING.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fatburn = hmSensor.createSensor(hmSensor.id.FAT_BURRING)\n```\n\n----------------------------------------\n\nTITLE: Creating IMG Widget in ZeppOS\nDESCRIPTION: This snippet demonstrates how to create an IMG widget using hmUI.createWidget() and set its basic properties such as position and image source. It also shows how to add a click event listener to change the widget's position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img = hmUI.createWidget(hmUI.widget.IMG, {\n      x: 125,\n      y: 125,\n      src: 'zeppos.png'\n    })\n    img.addEventListener(hmUI.event.CLICK_DOWN, (info) => {\n      img.setProperty(hmUI.prop.MORE, {\n        y: 200\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating VIEW_CONTAINER Widget in Zepp OS\nDESCRIPTION: Basic code to create a VIEW_CONTAINER widget and a child widget within it. This container is a versatile layout component that supports z-indexing and scrolling functionality.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/VIEW_CONTAINER.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst viewContainer = createWidget(widget.VIEW_CONTAINER, Param)\n\n// 创建子 UI 控件\nviewContainer.createWidget(xxx, xxx)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for writeFileSync Function in ZeppOS\nDESCRIPTION: The type declaration for the writeFileSync function showing its signature and parameter structure. It defines the function that synchronously writes data to a file in the /data directory.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/fs/writeFileSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction writeFileSync(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Using EventBus in JavaScript\nDESCRIPTION: Example of importing EventBus from the Zepp OS utils, creating an instance, adding a listener, and emitting an event.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/utils/EventBus.mdx#2025-04-07_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventBus } from '@zos/utils'\n\nconst eventBus = new EventBus()\n\neventBus.on('data', (data) => {\n  console.log(data)\n})\n\neventBus.emit('data', 'Hello Zepp OS!')\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering Stand Behavior Change Listeners in TypeScript\nDESCRIPTION: This snippet shows how to register and unregister callback functions for monitoring changes in standing behavior hours using the Stand sensor API.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/sensor/Stand.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\noffChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Importing and Using mstOnCharaNotification in JavaScript\nDESCRIPTION: Basic example of importing the mstOnCharaNotification function from the Zepp OS BLE module. This function is used to register callbacks for BLE characteristic notifications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ble/mstOnCharaNotification.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { mstOnCharaNotification } from '@zos/ble'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Complete Button Widget Implementation Example\nDESCRIPTION: Comprehensive example showing button creation with both image-based and color-based styles, including click handlers and property modifications.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/widget/BUTTON.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nPage({\n  build() {\n    const img_button = createWidget(widget.BUTTON, {\n      x: (480 - 96) / 2,\n      y: 120,\n      text: 'Hello',\n      w: -1,\n      h: -1,\n      normal_src: 'button_normal.png',\n      press_src: 'button_press.png',\n      click_func: () => {\n        console.log('button click')\n      }\n    })\n\n    createWidget(widget.BUTTON, {\n      x: (480 - 400) / 2,\n      y: 240,\n      w: 400,\n      h: 100,\n      radius: 12,\n      normal_color: 0xfc6950,\n      press_color: 0xfeb4a8,\n      text: 'Hello',\n      click_func: (button_widget) => {\n        button_widget.setProperty(prop.MORE, {\n          x: (480 - 400) / 2,\n          y: 300,\n          w: 400,\n          h: 100\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Layout Style in Zepp OS\nDESCRIPTION: Example of updating a widget's layout style with flex display properties and dimensions.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Update widget's layout style\nwidget.updateLayoutStyle({\n  display: 'flex',\n  'flex-flow': 'column',\n  'justify-content': 'center',\n  'align-items': 'center',\n  width: '100%',\n  height: 'auto'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining closeSync Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the closeSync function, which takes an Option object as a parameter and returns a Result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/closeSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction closeSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a File Using hmFS.write() in JavaScript\nDESCRIPTION: This example demonstrates how to use the hmFS.write() function to write data to a file. It creates a buffer, opens a file, and writes the buffer contents to the file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/write.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst test_buf = new Uint8Array(10)\nconst test_buf2 = new Uint8Array(test_buf.length)\n\nconst file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\nhmFS.write(file, test_buf.buffer, 0, test_buf.length)\n```\n\n----------------------------------------\n\nTITLE: Router Replace Usage Example in JavaScript\nDESCRIPTION: Example showing how to use the replace function to navigate to a new page with parameters. Demonstrates importing the function and calling it with a URL and query parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-v2/reference/device-app-api/newAPI/router/replace.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { replace } from '@zos/router'\n\nreplace({\n  url: 'page/index',\n  params: 'type=1',\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Child Nodes in Zepp OS Widget Layout\nDESCRIPTION: Demonstrates how to add a button widget as a child node to a container widget at a specific index position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/layout.md#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = createWidget(widget.VIRTUAL_CONTAINER)\nconst button = createWidget(widget.BUTTON)\n\n// Add button as first child node of container\ncontainer.addLayoutChild(button, 0)\n```\n\n----------------------------------------\n\nTITLE: Using getDiskInfo Function in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the getDiskInfo function to retrieve disk information, specifically showing how to access the total disk space.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/device/getDiskInfo.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDiskInfo } from '@zos/device'\n\nconst { total } = getDiskInfo()\nconsole.log(total)\n```\n\n----------------------------------------\n\nTITLE: Snap Type Configuration Example\nDESCRIPTION: Example showing how to import and use snap type constants for SCROLL_LIST positioning.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SCROLL_LIST } from '@zos/ui'\n\nconsole.log(SCROLL_LIST.snap_type.SNAPCENTER_ALL)\n```\n\n----------------------------------------\n\nTITLE: Creating Widget Type Definition - TypeScript\nDESCRIPTION: Type definition for the createWidget function showing its parameters and return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/ui/createWidget.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(widgetId: WIDGET_ID, option?: Option) => widget: WIDGET\n```\n\n----------------------------------------\n\nTITLE: Registering End-of-Minute Event Listener in TypeScript\nDESCRIPTION: Registers a callback function for the end-of-minute event using the Time sensor. Available from API_LEVEL 2.1.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nonPerMinute(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining SysProGetDouble Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for SysProGetDouble. It takes a string key as input and returns a result, which is implicitly typed.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmFS/SysProGetDouble.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: SysProGetChars Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition showing the method signature for SysProGetChars, which takes a string key parameter and returns a result.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmFS/SysProGetChars.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string) => result\n```\n\n----------------------------------------\n\nTITLE: Getting Inbox Object in JavaScript\nDESCRIPTION: Example of how to get the Inbox object using the transferFile.getInbox() method in JavaScript.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst inbox = transferFile.getInbox()\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Capture in Page Lifecycle with try-catch in Zepp OS\nDESCRIPTION: Enhanced Page implementation with a try-catch block in the build lifecycle method. This approach provides more complete error stack traces by splitting and logging each line of the error stack individually, overcoming log length limitations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/error-catch.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    try {\n      const a = undefined\n      const b = () => {\n        a()\n      }\n      const c = () => {\n        b()\n      }\n      c()\n    } catch (e) {\n      console.log('LifeCycle Error', e)\n      e && e.stack && e.stack.split(/\\n/).forEach((i) => console.log('error stack', i))\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Promise API in JavaScript\nDESCRIPTION: This code snippet provides a complete implementation of the Promise API in JavaScript. It includes the core Promise constructor, methods like then, catch, and finally, as well as static methods like all, allSettled, resolve, reject, and race. The implementation also handles various edge cases and provides polyfills for different environments.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/best-practice/polyfill/promise.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n;(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined'\n    ? factory()\n    : typeof define === 'function' && define.amd\n    ? define(factory)\n    : factory()\n})(globalThis, function () {\n  'use strict'\n\n  /**\n   * @this {Promise}\n   */\n  function finallyConstructor(callback) {\n    var constructor = this.constructor\n    return this.then(\n      function (value) {\n        // @ts-ignore\n        return constructor.resolve(callback()).then(function () {\n          return value\n        })\n      },\n      function (reason) {\n        // @ts-ignore\n        return constructor.resolve(callback()).then(function () {\n          // @ts-ignore\n          return constructor.reject(reason)\n        })\n      }\n    )\n  }\n\n  function allSettled(arr) {\n    var P = this\n    return new P(function (resolve, reject) {\n      if (!(arr && typeof arr.length !== 'undefined')) {\n        return reject(\n          new TypeError(\n            typeof arr +\n              ' ' +\n              arr +\n              ' is not iterable(cannot read property Symbol(Symbol.iterator))'\n          )\n        )\n      }\n      var args = Array.prototype.slice.call(arr)\n      if (args.length === 0) return resolve([])\n      var remaining = args.length\n\n      function res(i, val) {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function (val) {\n                res(i, val)\n              },\n              function (e) {\n                args[i] = { status: 'rejected', reason: e }\n                if (--remaining === 0) {\n                  resolve(args)\n                }\n              }\n            )\n            return\n          }\n        }\n        args[i] = { status: 'fulfilled', value: val }\n        if (--remaining === 0) {\n          resolve(args)\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i])\n      }\n    })\n  }\n\n  // Store setTimeout reference so promise-polyfill will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var setTimeoutFunc = setTimeout\n\n  function isArray(x) {\n    return Boolean(x && typeof x.length !== 'undefined')\n  }\n\n  function noop() {}\n\n  // Polyfill for Function.prototype.bind\n  function bind(fn, thisArg) {\n    return function () {\n      fn.apply(thisArg, arguments)\n    }\n  }\n\n  /**\n   * @constructor\n   * @param {Function} fn\n   */\n  function Promise(fn) {\n    if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new')\n    if (typeof fn !== 'function') throw new TypeError('not a function')\n    /** @type {!number} */\n    this._state = 0\n    /** @type {!boolean} */\n    this._handled = false\n    /** @type {Promise|undefined} */\n    this._value = undefined\n    /** @type {!Array<!Function>} */\n    this._deferreds = []\n\n    doResolve(fn, this)\n  }\n\n  function handle(self, deferred) {\n    while (self._state === 3) {\n      self = self._value\n    }\n    if (self._state === 0) {\n      self._deferreds.push(deferred)\n      return\n    }\n    self._handled = true\n    Promise._immediateFn(function () {\n      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected\n      if (cb === null) {\n        ;(self._state === 1 ? resolve : reject)(deferred.promise, self._value)\n        return\n      }\n      var ret\n      try {\n        ret = cb(self._value)\n      } catch (e) {\n        reject(deferred.promise, e)\n        return\n      }\n      resolve(deferred.promise, ret)\n    })\n  }\n\n  function resolve(self, newValue) {\n    try {\n      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.')\n      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n        var then = newValue.then\n        if (newValue instanceof Promise) {\n          self._state = 3\n          self._value = newValue\n          finale(self)\n          return\n        } else if (typeof then === 'function') {\n          doResolve(bind(then, newValue), self)\n          return\n        }\n      }\n      self._state = 1\n      self._value = newValue\n      finale(self)\n    } catch (e) {\n      reject(self, e)\n    }\n  }\n\n  function reject(self, newValue) {\n    self._state = 2\n    self._value = newValue\n    finale(self)\n  }\n\n  function finale(self) {\n    if (self._state === 2 && self._deferreds.length === 0) {\n      Promise._immediateFn(function () {\n        if (!self._handled) {\n          Promise._unhandledRejectionFn(self._value)\n        }\n      })\n    }\n\n    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n      handle(self, self._deferreds[i])\n    }\n    self._deferreds = null\n  }\n\n  /**\n   * @constructor\n   */\n  function Handler(onFulfilled, onRejected, promise) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null\n    this.promise = promise\n  }\n\n  /**\n   * Take a potentially misbehaving resolver function and make sure\n   * onFulfilled and onRejected are only called once.\n   *\n   * Makes no guarantees about asynchrony.\n   */\n  function doResolve(fn, self) {\n    var done = false\n    try {\n      fn(\n        function (value) {\n          if (done) return\n          done = true\n          resolve(self, value)\n        },\n        function (reason) {\n          if (done) return\n          done = true\n          reject(self, reason)\n        }\n      )\n    } catch (ex) {\n      if (done) return\n      done = true\n      reject(self, ex)\n    }\n  }\n\n  Promise.prototype['catch'] = function (onRejected) {\n    return this.then(null, onRejected)\n  }\n\n  Promise.prototype.then = function (onFulfilled, onRejected) {\n    // @ts-ignore\n    var prom = new this.constructor(noop)\n\n    handle(this, new Handler(onFulfilled, onRejected, prom))\n    return prom\n  }\n\n  Promise.prototype['finally'] = finallyConstructor\n\n  Promise.all = function (arr) {\n    return new Promise(function (resolve, reject) {\n      if (!isArray(arr)) {\n        return reject(new TypeError('Promise.all accepts an array'))\n      }\n\n      var args = Array.prototype.slice.call(arr)\n      if (args.length === 0) return resolve([])\n      var remaining = args.length\n\n      function res(i, val) {\n        try {\n          if (val && (typeof val === 'object' || typeof val === 'function')) {\n            var then = val.then\n            if (typeof then === 'function') {\n              then.call(\n                val,\n                function (val) {\n                  res(i, val)\n                },\n                reject\n              )\n              return\n            }\n          }\n          args[i] = val\n          if (--remaining === 0) {\n            resolve(args)\n          }\n        } catch (ex) {\n          reject(ex)\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i])\n      }\n    })\n  }\n\n  Promise.allSettled = allSettled\n\n  Promise.resolve = function (value) {\n    if (value && typeof value === 'object' && value.constructor === Promise) {\n      return value\n    }\n\n    return new Promise(function (resolve) {\n      resolve(value)\n    })\n  }\n\n  Promise.reject = function (value) {\n    return new Promise(function (resolve, reject) {\n      reject(value)\n    })\n  }\n\n  Promise.race = function (arr) {\n    return new Promise(function (resolve, reject) {\n      if (!isArray(arr)) {\n        return reject(new TypeError('Promise.race accepts an array'))\n      }\n\n      for (var i = 0, len = arr.length; i < len; i++) {\n        Promise.resolve(arr[i]).then(resolve, reject)\n      }\n    })\n  }\n\n  // Use polyfill for setImmediate for performance gains\n  Promise._immediateFn =\n    // @ts-ignore\n    (typeof setImmediate === 'function' &&\n      function (fn) {\n        // @ts-ignore\n        setImmediate(fn)\n      }) ||\n    function (fn) {\n      setTimeoutFunc(fn, 0)\n    }\n\n  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n    if (typeof console !== 'undefined' && console) {\n      console.log('[jsfwk.error  ] Possible Unhandled Promise Rejection:', err) // eslint-disable-line no-console\n    }\n  }\n\n  /** @suppress {undefinedVars} */\n  var globalNS = (function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') {\n      return self\n    }\n    if (typeof window !== 'undefined') {\n      return window\n    }\n    if (typeof global !== 'undefined') {\n      return global\n    }\n    if (typeof globalThis !== 'undefined') {\n      return globalThis\n    }\n\n    throw new Error('unable to locate global object')\n  })()\n\n  globalNS['Promise'] = Promise\n  // Expose the polyfill if Promise is undefined or set to a\n  // non-function value. The latter can be due to a named HTMLElement\n  // being exposed by browsers for legacy reasons.\n  // https://github.com/taylorhakes/promise-polyfill/issues/114\n})\n```\n\n----------------------------------------\n\nTITLE: Button Click Function Type Definition\nDESCRIPTION: Type definition for the button click callback function, which receives the button instance as a parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmUI/widget/BUTTON.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(button: Button) => void\n```\n\n----------------------------------------\n\nTITLE: Music Event Listener Example\nDESCRIPTION: Example of registering a callback for music change events to log the current song name.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/reference/device-app-api/hmSensor/sensorId/MUSIC.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmusic.addEventListener(hmSensor.event.CHANGE, function () {\n  console.log(\"The current song's name: \" + music.title + '\\r\\n')\n})\n```\n\n----------------------------------------\n\nTITLE: Enqueueing File with Onbox Object in JavaScript\nDESCRIPTION: Example of how to enqueue a file using the Onbox object's enqueueFile method, specifying the file path and additional parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/side-service-api/transfer-file.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileObject = onbox.enqueueFile('data://download/test.png', { type: 'image', name: 'fdsa' })\n```\n\n----------------------------------------\n\nTITLE: Using PAI Sensor in JavaScript\nDESCRIPTION: Demonstrates how to import and use the PAI sensor in JavaScript. Creates a new Pai instance and calls methods to retrieve total PAI, today's PAI, and last week's PAI data.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Pai.mdx#2025-04-07_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pai } from '@zos/sensor'\n\nconst pai = new Pai()\nconst total = pai.getTotal()\nconst today = pai.getToday()\nconst lastWeek = pai.getLastWeek()\n```\n\n----------------------------------------\n\nTITLE: Registering Calorie Change Callback\nDESCRIPTION: Registers a callback function that will be executed when calorie data changes. Available from API_LEVEL 2.0 and requires permission 'data:user.hd.calorie'.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/sensor/Calorie.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Creating Rotated IMG Widget in ZeppOS\nDESCRIPTION: This snippet shows how to create an IMG widget with advanced properties including position, size, rotation angle, and rotation center. It creates an image of an hour hand rotated 30 degrees.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmUI/widget/IMG.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPage({\n  build() {\n    const img_hour = hmUI.createWidget(hmUI.widget.IMG)\n    img_hour.setProperty(hmUI.prop.MORE, {\n      x: 0,\n      y: 0,\n      w: 454,\n      h: 454,\n      pos_x: 454 / 2 - 27,\n      pos_y: 50 + 50,\n      center_x: 454 / 2,\n      center_y: 454 / 2,\n      src: 'hour.png',\n      angle: 30\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Compass.onChange Method Definition\nDESCRIPTION: Method to register a callback function that will be called when the compass direction changes. This allows applications to respond to changes in orientation without polling.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/sensor/Compass.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonChange(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Get Date Format Configuration in ZeppOS\nDESCRIPTION: Retrieves the current date format setting as a numeric value. The returned value indicates the order of year, month and day in date displays: 0 for year-month-day, 1 for day-month-year, or 2 for month-day-year.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/watchface/api/hmSetting/getDateFormat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n() => result\n```\n\nLANGUAGE: js\nCODE:\n```\nconst dateFormat = hmSetting.getDateFormat()\n```\n\n----------------------------------------\n\nTITLE: Defining swipeToIndex Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the swipeToIndex function that scrolls to a target item in Swiper mode. The function accepts an Option object parameter.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/page/swipeToIndex.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction swipeToIndex(option: Option): void\n```\n\n----------------------------------------\n\nTITLE: Importing CALORIE Sensor Documentation in JSX\nDESCRIPTION: This code imports a documentation component for the CALORIE sensor from the reference section and renders it in the current page. It demonstrates how documentation content is modularized in the Zepp OS documentation system.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSensor/sensorId/CALORIE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/CALORIE.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Importing Vibration Sensor Documentation in React\nDESCRIPTION: This code imports the VIBRATE sensor documentation content from the reference directory and renders it using JSX syntax. The file uses MDX which allows embedding React components in markdown documentation.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-1.0/watchface/api/hmSensor/sensorId/VIBRATE.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../../reference/device-app-api/hmSensor/sensorId/VIBRATE.mdx'\n\n<Content/>\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Animation Resources\nDESCRIPTION: Shows the recommended directory structure for organizing animation frame resources. This example demonstrates how animation frames should be placed in the assets folder.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmUI/widget/IMG_ANIM.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n// 资源存放目录\n.\n└── assets\n        └── gtr-3\n                └── anim\n                        ├── animation_0.png\n                        ├── animation_1.png\n                        ├── animation_2.png\n                        ├── animation_3.png\n                        ├── animation_4.png\n                        └── animation_5.png\n```\n\n----------------------------------------\n\nTITLE: SessionStorage Communication in Zepp OS\nDESCRIPTION: Demonstrates using sessionStorage API for cross-page communication through key-value pair storage, allowing data persistence between page navigations.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/best-practice/cross-page-communications.mdx#2025-04-07_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sessionStorage } from '@zos/storage'\n\nsessionStorage.setItem('test', 'test value')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sessionStorage } from '@zos/storage'\n\nsessionStorage.getItem('test')\n```\n\n----------------------------------------\n\nTITLE: Configuring IMG_POINTER Widget in Zepp OS\nDESCRIPTION: This example shows how to configure an IMG_POINTER widget with specific properties such as image source, rotation center, and angle. It creates a pointer image that rotates around a specified center point.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/watchface/api/hmUI/widget/IMG_POINTER.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgPointer = hmUI.createWidget(hmUI.widget.IMG_POINTER, {\n  src: rootPath + 'hour.png',\n  center_x: 227,\n  center_y: 227,\n  x: 22,\n  y: 121,\n  angle: 245\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Sunrise Event Listener in TypeScript\nDESCRIPTION: Registers a callback function for the Sunrise event using the Time sensor. Only takes effect when the device has weather information. Available from API_LEVEL 3.0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Time.mdx#2025-04-07_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nonSunrise(callback: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining checkSensor Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the checkSensor function which takes a sensor object as input and returns a boolean result indicating sensor availability.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/checkSensor.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction checkSensor(sensor: Sensor): Result\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a File with hmFS.write in JavaScript\nDESCRIPTION: Example JavaScript code demonstrating how to open a file in read-write and create mode, then write buffer data to it. The example creates a buffer, opens a file, and writes the buffer content to the file.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/watchface/api/hmFS/write.mdx#2025-04-07_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst test_buf = new Uint8Array(10)\nconst test_buf2 = new Uint8Array(test_buf.length)\n\nconst file = hmFS.open('test_file.txt', hmFS.O_RDWR | hmFS.O_CREAT)\nhmFS.write(file, test_buf.buffer, 0, test_buf.length);\n```\n\n----------------------------------------\n\nTITLE: Getting Last Week's Hourly Stress Averages in TypeScript\nDESCRIPTION: This snippet demonstrates how to get the hourly stress average for the past 7 days using the getLastWeekByHour method. It returns a fixed-length array of 168 (7 * 24) StressInfo objects.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/sensor/Stress.mdx#2025-04-07_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastWeekByHour(): Array<StressInfo>\n```\n\n----------------------------------------\n\nTITLE: Declaring readFileSync Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the readFileSync function showing the function signature with Option parameter and Result return type.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/fs/readFileSync.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readFileSync(option: Option): Result\n```\n\n----------------------------------------\n\nTITLE: Refreshing ScrollList Data in JavaScript\nDESCRIPTION: Example of updating a ScrollList's data using the setProperty method with prop.UPDATE_DATA. This allows changing the data array, configuration, and maintaining scroll position.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/ui/widget/SCROLL_LIST.mdx#2025-04-07_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget, prop } from '@zos/ui'\n\nconst scrollList = createWidget(widget.SCROLL_LIST, Param)\nscrollList.setProperty(prop.UPDATE_DATA, {\n  //Reset configuration information\n  data_type_config: [\n    {\n      start: 0,\n      end: 2,\n      type_id: 2\n    }\n  ],\n  //Configuration the length of information\n  data_type_config_count: 1,\n  //New data\n  data_array: [\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'Name', age: '12', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex1', age: '13', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex2', age: '13', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'namex3', age: '12', like: 'type2' },\n    { img_src: rootPath + 'test/NOrmalbtn_h.png', name: 'name666', age: '13', like: 'type2' }\n  ],\n  //The length of the data\n  data_count: 5,\n  //Refresh the data and stay on the current page. If it is not set or set to 0, it will return to the top of the list.\n  on_page: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SecondaryWidget in app.json for Zepp OS\nDESCRIPTION: JSON configuration required in app.json to register a SecondaryWidget. It specifies the widget path, icon, name, and runtime type within the module configuration for the target device.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/guides/framework/device/secondary-widget.md#2025-04-07_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"targets\": {\n    \"466x466-gtr-4\": {\n      \"module\": {\n        \"page\": {\n          \"pages\": [\n            \"page/index\"\n          ]\n        },\n        \"app-side\": {\n          \"path\": \"app-side/index\"\n        },\n        \"setting\": {\n          \"path\": \"setting/index\"\n        },\n        // widget related configuration\n        \"secondary-widget\": {\n          \"widgets\": [\n            {\n              // widget file path\n              \"path\": \"secondary-widget/index\",\n              \"icon\": \"icon.png\",\n              \"name\": \"widget-demo\",\n              \"runtime\": {\n                \"type\": \"js\"\n              }\n            }\n          ]\n        }\n      },\n```\n\n----------------------------------------\n\nTITLE: Using mkdirSync to Create a Directory in JavaScript\nDESCRIPTION: Demonstrates how to import and use the mkdirSync function to create a directory named 'content' in the application's data folder. Returns 0 on success.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-v2/reference/device-app-api/newAPI/fs/mkdirSync.mdx#2025-04-07_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { mkdirSync } from '@zos/fs'\n\nconst result = mkdirSync({\n  path: 'content',\n})\n\nif (result === 0) {\n  console.log('mkdirSync success')\n}\n```\n\n----------------------------------------\n\nTITLE: Using getTimeFormat in JavaScript\nDESCRIPTION: Example demonstrating how to import and use the getTimeFormat function to check if the system is using 24-hour time format.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getTimeFormat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTimeFormat, TIME_FORMAT_24 } from '@zos/settings'\n\nconst timeFormat = getTimeFormat()\n\nif (timeFormat === TIME_FORMAT_24) {\n  console.log('time format is 24-hour format')\n}\n```\n\n----------------------------------------\n\nTITLE: Unsupported JavaScript Dynamic Code Execution\nDESCRIPTION: Example of unsupported JavaScript code execution methods in Zepp OS Mini Programs for security reasons.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/guides/framework/device/js-support.md#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neval(\"code\") // Not supported\nnew Function(\"code\") // Not supported\nnew Function('return this') // Supported exception\n```\n\n----------------------------------------\n\nTITLE: Using getSleepTarget Function from ZeppOS Settings Module\nDESCRIPTION: Example of importing and using the getSleepTarget function to retrieve a user's sleep target setting in minutes. The function returns a number representing the target in minutes, with a default of 0.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/docs/reference/device-app-api/newAPI/settings/getSleepTarget.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSleepTarget } from '@zos/settings'\n\nconst sleepTarget = getSleepTarget()\nconsole.log(sleepTarget)\n```\n\n----------------------------------------\n\nTITLE: Creating STROKE_RECT Widget - Basic Usage\nDESCRIPTION: Basic initialization of a STROKE_RECT widget using createWidget from the @zos/ui package. This widget requires basic positioning and sizing parameters.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/reference/device-app-api/newAPI/ui/widget/STROKE_RECT.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWidget, widget } from '@zos/ui'\n\nconst strokeRect = createWidget(widget.STROKE_RECT, Param)\n```\n\n----------------------------------------\n\nTITLE: Importing Device Information Documentation Component\nDESCRIPTION: Imports a Content component from the device API documentation that contains information about the getDeviceInfo method.\nSOURCE: https://github.com/zepp-health/zeppos-docs/blob/main/versioned_docs/version-1.0/watchface/api/hmSetting/getDeviceInfo.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Content from '../../../reference/device-app-api/hmSetting/getDeviceInfo.mdx'\n```"
  }
]