[
  {
    "owner": "fkie-cad",
    "repo": "fact_core",
    "content": "TITLE: Initializing FACT Core from GitHub on Ubuntu (Shell)\nDESCRIPTION: This snippet installs required packages, clones the FACT_core repository, prepares storage directories, and runs the pre_install.sh preparation script. It is intended for initial installations and requires the user to have sudo privileges. The sequence must not be executed as root and is supported on Ubuntu 20.04 or 22.04. Inputs include system commands and creating directories; outputs are the cloned repository and prepared environment. Limitations: May overwrite some system packages, and a reboot is required before proceeding.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt upgrade && sudo apt install git\ngit clone https://github.com/fkie-cad/FACT_core.git ~/FACT_core\n~/FACT_core/src/install/pre_install.sh && sudo mkdir /media/data && sudo chown -R $USER /media/data\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration Script\nDESCRIPTION: Command to execute the migration script that transfers data from MongoDB to PostgreSQL. This script migrates existing analysis and comparison results to the new database format.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/migration.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 src/migrate_db_to_postgresql.py\n```\n\n----------------------------------------\n\nTITLE: Starting FACT Application via Python Script - Shell\nDESCRIPTION: This shell snippet demonstrates how to start the FACT application by running the 'start_fact.py' Python script. The script automatically detects installed components and initializes the web interface, which becomes accessible locally after execution. FACT requires that its dependencies (not detailed here) are installed as per the main documentation; ensure Python 3.9â€“3.12 is available. Input is not required; once started, the output is a running FACT web service accessible through a browser.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsrc/start_fact.py\n```\n\n----------------------------------------\n\nTITLE: Exporting Firmware Analysis Data - Python Shell\nDESCRIPTION: This shell command shows how to export unpacked firmware files and related analysis results using the 'firmware_import_export.py' script with the 'export' argument, one or more firmware UIDs, and an optional output directory. Required dependencies include Python 3 and access to the analysis results within FACT's data storage. The FW_UID parameters designate which analyzed firmware images to export, and an output directory can be specified with '-o'. The output is one or more ZIP archives containing the export data.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 firmware_import_export.py export FW_UID [FW_UID_2 ...] [-o OUTPUT_DIR]\n```\n\n----------------------------------------\n\nTITLE: Importing Firmware Analysis Data - Python Shell\nDESCRIPTION: This shell command demonstrates importing previously exported firmware analysis archives into a FACT instance using the 'firmware_import_export.py' script with the 'import' argument followed by one or more ZIP files. Ensure Python 3 and FACT's required dependencies are installed, and that the specified ZIP archives were created using the corresponding FACT export feature. Inputs are the ZIP file(s), and the output is merged analysis data and files available within the new FACT instance.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 firmware_import_export.py import FW.zip [FW_2.zip ...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Requirements with pip - requirements.txt\nDESCRIPTION: This snippet defines dependencies for the Python project by specifying required libraries and their versions using pip-compatible specifiers in a requirements.txt file. The listed dependencies include general build and testing tools (like pytest, pytest-rerunfailures, pytest-cov), libraries for working with containers, databases, and binary analysis (such as docker, sqlalchemy, lief, ssdeep), and custom code modules hosted on GitHub referenced via git+ URLs. This setup assumes pip as the package installer and requires internet connectivity for remote package fetching. Inputs are package specifiers, and outputs are managed Python environments with the specified packages installed. Constraints include strict or compatible versions to ensure reproducibility and integration compatibility.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/install/requirements_common.txt#_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\n# General build stuff\\ntestresources==2.0.1\\n\\n# General python dependencies\\ndocker~=7.1.0\\npytest-rerunfailures~=14.0\\nlief~=0.16.2\\npsutil~=6.1.1\\npsycopg2-binary~=2.9.10\\npylint~=3.2.7\\npytest-cov~=5.0.0\\npytest-timeout~=2.3.1\\npytest~=8.3.4\\npython-tlsh==4.5.0\\nredis~=5.2.1\\nrich~=13.9.4\\nsqlalchemy~=2.0.37\\nssdeep==3.4\\nxmltodict~=0.14.2\\n\\n# Common code modules\\ngit+https://github.com/fkie-cad/common_helper_files.git\\ngit+https://github.com/fkie-cad/common_helper_filter.git\\ngit+https://github.com/mass-project/common_helper_encoder.git\\n\\n# database migration\\nalembic~=1.14.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Project Dependencies in requirements.txt - Plaintext\nDESCRIPTION: This snippet is a requirements.txt file for a Python project, defining all needed package dependencies. Each line establishes a package name and version constraint, while commented lines provide context for optional or plugin-specific dependencies (notably flask for the compare/file_header plugin) and known issues. The requirements include standard PyPI packages with version pinning and a Git-based dependency, ensuring consistent set-up when installing with pip. No code is executable, but the file is critical for setup; inputs are package specifiers and comments, outputting a clear dependency manifest for reproducibility and development.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/install/requirements_backend.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncryptography~=44.0.0\\nMarkupSafe~=2.1.5\\nnetworkx~=3.1\\nPillow~=10.4.0\\npyopenssl~=25.0.0\\npyyaml~=6.0.2\\n\\n# FIXME This is only needed by the compare/file_header plugin\\n#       See Issue #832\\nflask~=3.0.3\\n\\ngit+https://github.com/fkie-cad/common_helper_yara.git\\n\\n# For plugin definition\\nsemver~=3.0.4\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Installation - Requirements.txt Format - Python\nDESCRIPTION: Specifies a list of required Python packages, including version constraints and compatibility specifications, to be installed in the project's virtual environment. Dependencies cover core libraries, request handling, serialization, plugin support, and configuration management. The snippet contributes to automated environment provisioning via pip, with comments indicating the context-specific purpose of some packages (e.g., plugins or configuration modules); requirements include direct (PyPI) and source-based (GitHub) installations. There are no programmatic inputs or outputs, but the effect is to ensure all listed packages are installed into the environment for downstream code to use.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/install/requirements_pre_install.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nvirtualenv\n\n# Python Libraries for python based installation\ndistro~=1.9.0\npackaging~=24.2\npython-magic==0.4.27\nrequests==2.32.3\n# Needed by config.py\npydantic==2.10.6\nwerkzeug~=3.0.6\ntoml==0.10.2\n# needed during installation of cve_lookup plugin\nijson==3.3.0\n\ngit+https://github.com/fkie-cad/common_helper_files.git\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Python and Node.js Package Dependencies in requirements File - requirements\nDESCRIPTION: This snippet is a requirements file specifying dependencies for a Python and Node.js project. It lists package names with compatible version requirements using the '~=' operator, supporting reproducible builds. Comments provide context for why specific packages are included and instructions for dependencies' installation order. There are no key input parameters, as this file is consumed by pip or similar tools; running 'pip install -r requirements.txt' will process the specified packages. Limitations include manual update requirements and need for corresponding tools like pip and nodeenv.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/install/requirements_frontend.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nargon2_cffi~=23.1.0\\nbcrypt~=4.1.3\\nemail-validator~=2.2.0\\nflask-login~=0.6.3\\nflask-paginate~=2024.4.12\\nflask-security-too~=5.4.3\\nflask-wtf~=1.2.1\\nflask~=3.0.3\\nflask-restx~=1.3.0\\nflask-sqlalchemy~=3.1.1\\ngql~=3.5.0\\nitsdangerous~=2.2.0\\nmatplotlib~=3.7.5\\nmore-itertools~=10.5.0\\nprompt-toolkit~=3.0.50\\npython-dateutil~=2.9.0\\nquantiphy~=2.20\\nuwsgi~=2.0.28\\nvirtualenv~=20.29.1\\n\\n# npm installation\\nnodeenv~=1.8.0\\n\\n# must be below dependent packages (flask, flask-login, flask-restx)\\nwerkzeug~=3.0.6\\n\\n# Used for username validation by flask-security\\nbleach~=6.1.0\\n\\n# Figuring out if the analysis is outdated\\nsemver~=3.0.4\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Package Requirements via requirements.txt\nDESCRIPTION: This snippet is a Python requirements.txt formatted list, specifying dependencies needed for a software project. It requires installation of the 'geoip2' library version 4.7.0, 'aiohttp' version compatible with 3.10.5 (only for Python >=3.12), and a custom package hosted on GitHub. The lines can be consumed directly by pip; the comment explains a conditional dependency for maintaining compatibility with Python versions.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/ip_and_uri_finder/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ngit+https://github.com/fkie-cad/common_analysis_ip_and_uri.git\ngeoip2==4.7.0\n# dependency of geoip2 for python >= 3.12\naiohttp~=3.10.5\n```\n\n----------------------------------------\n\nTITLE: Running FACT Core Installer and Component Startup (Shell)\nDESCRIPTION: Copies the FACT installer script and component startup command to be executed after rebooting, completing the FACT installation and starting all services. Requires previous steps to have been finished and a reboot. Input: shell commands referencing installer script and service launcher; output: installed and running FACT components. Must be run from the user's home directory.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n~/FACT_core/src/install.py\n~/FACT_core/start_all_installed_fact_components\n```\n\n----------------------------------------\n\nTITLE: Running FACT Main Installer Script (Shell)\nDESCRIPTION: Executes the FACT main installer script after pre-installation steps and reboot. Pulls and sets up remaining dependencies. Requires a prepared configuration file and environment. Outputs a ready-to-use FACT core installation, but may take some time to complete. Must run within the FACT_core directory.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsrc/install.py\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running FACT Pre-Installation Script from GitHub (Shell)\nDESCRIPTION: This sequence performs package updates, clones the FACT_core repository, changes into its directory, and invokes the pre_install.sh script. It is part of setting up FACT in non-distributed mode using git rather than a tarball. Prerequisite: sudo access. Inputs: none; outputs: prepared FACT_core directory with pre-install script executed.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt upgrade && sudo apt install git\ngit clone https://github.com/fkie-cad/FACT_core.git\ncd FACT_core\nsrc/install/pre_install.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment (Shell)\nDESCRIPTION: Initializes a new Python virtual environment in the .venv directory using the python3 venv module. No external dependencies beyond Python 3 and python3-venv. Creates an isolated environment for dependency management. Inputs: local directory; outputs: .venv directory structure. Should be run in the project root.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Installing Python venv Module on Ubuntu (Shell)\nDESCRIPTION: Installs the python3-venv package required for managing Python virtual environments on Ubuntu or Debian distributions. Required before creating a virtual environment if not already present. Inputs: apt install command; output: python3-venv installed system-wide.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install -y python3-venv\n```\n\n----------------------------------------\n\nTITLE: Activating Python venv (Shell)\nDESCRIPTION: Activates the previously created Python virtual environment in the current shell session. Only applicable for bash or compatible shells; location may differ for other shells. Dependencies: an existing .venv structure created by python3 -m venv. Inputs: none; outputs: environment variables set for active venv, updating Python path.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables System-Wide (Shell)\nDESCRIPTION: Defines HTTP, HTTPS, and NO_PROXY environment variables for system-wide proxy usage by appending them to /etc/environment. Useful in environments where external network access is controlled by a proxy. Requires sudo privilege to write to /etc/environment. Inputs: proxy host/port values; output: updated environment file for all system users.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\necho 'HTTP_PROXY=http://<YOUR-PROXY-HERE>:<PORT>/\nHTTPS_PROXY=http://<YOUR-PROXY-HERE>:<PORT>/\nhttp_proxy=http://<YOUR-PROXY-HERE>:<PORT>/\nhttps_proxy=http://<YOUR-PROXY-HERE>:<PORT>/\nno_proxy=\"localhost,127.0.0.1,::1\"\nNO_PROXY=\"localhost,127.0.0.1,::1\"' | sudo tee -a /etc/environment\n```\n\n----------------------------------------\n\nTITLE: Configuring apt to Use HTTP/S Proxy (Shell)\nDESCRIPTION: Directly configures apt to use a specified HTTP and HTTPS proxy by appending settings to /etc/apt/apt.conf.d/00proxy. Useful if environment variables are dropped when using sudo for apt operations. Requires sudo privileges. Input: proxy server and port; output: persistent apt proxy configuration.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\necho 'Acquire::http::Proxy \"http://<YOUR-PROXY-HERE>:<PORT>/\";\nAcquire::https::Proxy \"http://<YOUR-PROXY-HERE>:<PORT>/\";' | sudo tee /etc/apt/apt.conf.d/00proxy\n```\n\n----------------------------------------\n\nTITLE: Preserving Proxy Variables with sudo Using visudo Configuration (Shell)\nDESCRIPTION: Appends a configuration line to the system's sudoers file to preserve proxy-related environment variables during privilege escalation. Requires editing with visudo and administrative privileges. Inputs: sudoers file edit; outputs: sudo maintains specified variables when running commands as root.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nDefaults env_keep += \"ftp_proxy http_proxy https_proxy no_proxy\"\n```\n\n----------------------------------------\n\nTITLE: Specifying pyelftools Package Version for FACT Core\nDESCRIPTION: This line specifies the required version of the pyelftools package for the FACT Core project. It uses the exact version specifier to ensure compatibility.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/architecture_detection/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npyelftools==0.29\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies with requirements.txt for Python Projects\nDESCRIPTION: This snippet is a requirements.txt file that specifies the exact versions of the 'capstone', 'cstruct', and 'matplotlib' Python packages required by the project. No additional dependencies are needed for this file itself, but the listed packages must exist on PyPI. Each line follows the pattern '<package_name>==<version>', ensuring that the Python environment matches expected dependencies, preventing version mismatches. This file is typically used with pip to install all necessary project dependencies easily.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/binwalk/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncapstone==4.0.2\ncstruct==4.0\nmatplotlib==3.7.3\n```\n\n----------------------------------------\n\nTITLE: Executing Ghidra Headless Analysis\nDESCRIPTION: Command to run the Ghidra Headless analysis script. This automates the IPC analysis for multiple binaries using Ghidra's Headless mode. The script accepts optional arguments for Ghidra path, file path, and result path.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/ipc/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 ghidra_headless.py [-h] [-g [GHIDRAPATH]] filePath [resultPath]\n```\n\n----------------------------------------\n\nTITLE: Running IPC Analysis with Docker\nDESCRIPTION: Command to run the IPC analysis on a binary file using the Docker container. It mounts the binary file to the container and executes the analysis.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/ipc/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v /PATH/TO/BINARY:/input ipc /input\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for IPC Analysis\nDESCRIPTION: Command to build a Docker image for the IPC analysis tool. This creates a container with the necessary environment for running the IPC analyzer.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/ipc/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t ipc ./docker\n```\n\n----------------------------------------\n\nTITLE: Running Ghidra Headless Analysis with CVE-2021-45608 Detection Script\nDESCRIPTION: Command for executing the detect_CVE-2021-45608.py script using Ghidra's headless analyzer. This command imports the NetUSB.ko file, runs the detection script, and then deletes the temporary project.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/known_vulnerabilities/docker/scripts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nghidra_10.X_PUBLIC/support/analyzeHeadless <.> <./tmp_NetUSB_project> -deleteProject -import <NetUSB.ko> -postscript detect_CVE-2021-45608.py\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up FACT with Vagrant\nDESCRIPTION: Shell commands for installing and configuring FACT using Vagrant and VirtualBox. Includes steps from installation of prerequisites to starting and managing the VM.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.vagrant.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# 1. install vagrant and virtualbox\nsudo apt install virtualbox vagrant\n\n# 2. reboot your machine to ensure that the virtualbox dkms is loaded into the kernel\nsudo reboot now\n\n# 3. create a new folder for vagrant\nmkdir FACT-master\ncd FACT-master\n\n# 4. create a FACT-master configuration\nvagrant init fact-cad/FACT-master\n\n# 5. edit the Vagrantfile to your needs! an example can be found below.\nnano Vagrantfile\n\n# 6. start the VM. The first time executing this command will take some time, as the box is getting downloaded and imported. So better grab a coffee!\nvagrant up\n\n# Bonus: if you want to ssh into the vm, execute:\nvagrant ssh\n\n# Bonus: if you want to stop the vm, execute:\nvagrant halt\n```\n\n----------------------------------------\n\nTITLE: Configuring Vagrantfile for FACT\nDESCRIPTION: Example Vagrantfile configuration for FACT setup, including network port forwarding and VM resource allocation settings. Configures 4 CPU cores, 6GB RAM, and port 5000 forwarding.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.vagrant.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"fact-cad/FACT-master\"  # base image\n  config.vm.network \"forwarded_port\", guest: 5000, host: 5000  # listen port for FACT\n\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.gui = false  # suppress the virtualbox gui popping up on machine start\n    vb.cpus = 4  # assign 4 CPU cores to the VM\n    vb.memory = 6144 # assign 6GB RAM to the VM\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for FACT 4.0\nDESCRIPTION: Command to install updated dependencies required for FACT 4.0. This should be run to ensure all necessary components for PostgreSQL support are installed.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/migration.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 src/install.py\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB for Migration\nDESCRIPTION: Command to start the MongoDB server using the configuration file before migration. This ensures the old database is available during the migration process.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/migration.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mongod --config config/mongod.conf\n```\n\n----------------------------------------\n\nTITLE: Uninstalling MongoDB After Migration\nDESCRIPTION: Commands to remove MongoDB and its Python driver after successful migration. This is optional but recommended since FACT no longer uses MongoDB after version 4.0.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/migration.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m pip uninstall pymongo\n$ sudo apt remove mongodb # or mongodb-org depending on which version is installed\n```\n\n----------------------------------------\n\nTITLE: Vagrant Authentication Error Message\nDESCRIPTION: Example of a known authentication error message that occurs with certain Ubuntu Vagrant versions due to a documented bug.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/INSTALL.vagrant.md#_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nWarning: Authentication failure. Retrying...\n```\n\n----------------------------------------\n\nTITLE: Listing Package Dependencies for FACT Core\nDESCRIPTION: A comprehensive list of required system packages for setting up the FACT Core environment. The dependencies include package management tools, build essentials, Python development packages, and specialized libraries for firmware analysis.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/install/apt-pkgs-common.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napt-transport-https\n\n# install python3 and general build stuff\nautoconf\nautomake\nbuild-essential\ngit\ngnupg2\nlibtool\npython3\npython3-dev\nunzip\nwget\n\n# general python dependencies\nlibfuzzy-dev\nlibmagic-dev\n```\n\n----------------------------------------\n\nTITLE: Listing System Package Dependencies for Manual Installation - Shell/Bash\nDESCRIPTION: This code snippet enumerates system-level packages required for the project, such as Node.js (to be handled via a pre-install script) and the Papirus icon theme for file tree icons. It assumes these dependencies are not handled by standard Ubuntu package management, as indicated by the comment. There are no explicit commands in the snippet; rather, it serves as a manifest of required packages with clarifying comments.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/install/apt-pkgs-frontend.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Not an Ubuntu package, see pre_install.sh\\nnodejs\\n\\n# for file tree icons\\npapirus-icon-theme\n```\n\n----------------------------------------\n\nTITLE: Listing System Packages for FACT Core Environment (Shell/Text)\nDESCRIPTION: This snippet lists the required operating system packages for FACT Core, including the Lua interpreter, development headers for Lua, the LuaRocks package manager, Node.js for JavaScript runtime, and ShellCheck for static analysis of shell scripts. Intended to be used in a requirements file or an installation script, it is a simple newline-delimited list that can be fed into package managers or referenced in documentation. The snippet requires a system with package management facilities; the list is not interactive and expects users to process the packages as needed.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/linter/dnf-pkgs-runtime.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlua\\nlua-devel\\nluarocks\\nnodejs\\nShellCheck\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Documentation Dependencies - Python\nDESCRIPTION: Lists required Python packages for building project documentation using Sphinx and the Read the Docs theme. Intended for use with pip, users should install these dependencies before building documentation. Each line specifies a package and version, ensuring reproducible builds; no parameters or outputs are defined, and only package installation is implied.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/doc_dependencies.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSphinx==6.2.1\nsphinx_rtd_theme==1.2.2\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with Python\nDESCRIPTION: Commands to install required documentation dependencies using pip. Provides two alternative methods depending on Python/pip setup.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -r doc_dependencies.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\npip3 install -r doc_dependencies.txt\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Make\nDESCRIPTION: Command to clean existing documentation and build new HTML documentation.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake clean html\n```\n\n----------------------------------------\n\nTITLE: Opening Documentation in Firefox\nDESCRIPTION: Command to open the built documentation in Firefox browser from the _build directory.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfirefox _build/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Specifying xvfb Package\nDESCRIPTION: Specifies the xvfb package name, which is an X virtual framebuffer implementation used for running graphical applications in headless environments\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/binwalk/apt-pkgs-runtime.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nxvfb\n```\n\n----------------------------------------\n\nTITLE: Software Version String Listing\nDESCRIPTION: A comprehensive listing of software version strings including operating systems, network utilities, web servers, and embedded systems components. This appears to be output from a version detection or system analysis tool.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/src/plugins/analysis/software_components/test/data/software_component_test_list.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBash version 4.2.10\nBoot Agent CL v0.1.04\nBusyBox v1.01\nBusyBox v1.5.1\nCUPS v1.4.4\nChaiVM 7.0\nContiki/2.4\nEFI Shell Version 1.0\nFRRouting 7.2.1\nFileX ARM9/Green Hills Version G5.1.5.1\nGoAhead-Webs\nHewlett-Packard FTP Print Server Version 3.0\nInterNiche Portable TCP/IP Demo for Multitasking DOS, v1.8\nKC NetUSB General Driver\nLinux version 2.6.30\nLua: Lua 5.1.4 Copyright (C) 1994-2008\nLynxOS 3.1\nMIPS OpenWrt Linux-2.6.31\nMicrium OS\nMicroC/OS-II\nMiniUPNP 1.7\nMyTestRule 1.2.3\nNTP daemon program - Ver. 4.2.8p10\nNetUSB module for Linux\nNetgear Smart Wizard 3.0\nOpenSSH_7.4p1\nOpenSSL 0.9.8\nOpenSSL 1.0.1f\nOpenVPN 2.3.8 mips-openwrt-linux-gnu [SSL (PolarSSL)] [LZO] [EPOLL] [MH] [IPv6] built on\nPH7/2.1.4\nProFTPD 1.3.1\nProxy-agent: tinyproxy/1.8.3\nReadyDLNA 1.0.26\nRedis needs to enable the AOF\nSSLeay 0.8.2b\nThis is perl\nThreadX ARM11/Green Hills Version G5.0.5.0\nThreadX MIPS32_M14K/GNU Version G5.5.5.0\nU-Boot 1.1.4\nUPnP/1.0, Portable SDK for UPnP devices/1.3.1\nVxWorks 6.5\nVxWorks5.5.1\nX-Powered-By: PHP/7.3.5\n[v1.10-41.1]\navahi-0.6.31\nbftpd-V1.00\ncadaver 0.23.3\ncups-1.4.4\ncurl/7.37.0\ndhcp6c-V1.00\ndhcp6s-V1.00\ndnsmasq-2.41\ndropbear_2014.63\neCos Release: %d.%d.%d\nhostapd v0.5.9\niptables-1.4.16.3\niptables-1.4.5\njQuery v1.7\nl2tpd Version %s Copyright 2002 Roaring Penguin\nl2tpd version 0.69\nlibFLAC 1.2.1\nlibVorbis 1.2.3\nlibogg-1.1.4\nlibpcap version 1.5.2\nlibsqlite3-3.8.11.1.so\nlibupnp-1.6.18\nlighttpd-1.4.18\nnc -h for help\nnetatalk-2.2.0\nnginx version: nginx/1.13.3\nperl/5.30.0\npptp version 1.7.0\npure-ftpd v1.0.47\nradvd-1.4\nredis_version:%s\nro.build.version.name=Fire OS 5.5.0.3\nsamba-3.0.37\nsiproxd-0.5.10\nsquid/3.5.27\nstrongSwan 5.6.2\ntelnetd-V1.01\nuC/OS\nudhcp 0.9.7\nvsftpd: version 2.3.2\nvxworks-6.5\nwpa_supplicant v0.5.9\nwrlinux-1.4\nxl2tpd-1.1.12\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with Sphinx Directives in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText with Sphinx extensions to create a structured documentation homepage for the FACT core project. It includes an image directive for the project logo and hierarchical table of contents declarations to organize navigation between main sections, migration instructions, and implementation modules. The use of \":toctree:\", \":maxdepth:\", and other field lists enables flexible, multi-level documentation. No code logic is present, but proper Sphinx and reST tooling is required to render navigation, linking, and references. Outputs are HTML or other documentation formats and expect the directory structure to follow the referenced modules.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/index.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: ../src/web_interface/static/FACT_smaller.png\n   :width: 625\n   :alt: FACT Logo\n\nAbout\n============\n\nThe Firmware Analysis and Comparison Tool (FACT) is intended to automate Firmware Security analysis (Router, IoT, UEFI, Webcams, Drones, â€¦).\nThereby it shall be easy to use (web UI), extend (plug-in system) and integrate (REST API).\n\n\nContents\n============\n\n.. toctree::\n   :maxdepth: 1\n\n   main\n   migration\n\n\n.. toctree::\n   :hidden:\n   :maxdepth: 2\n   :caption: Modules:\n\n   modules/analysis\n   modules/config\n   modules/conftest\n   modules/test\n   modules/helperFunctions\n   modules/objects\n   modules/plugins\n   modules/scheduler\n   modules/web_interface\n\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Sphinx toctree directive for analysis.plugin documentation\nDESCRIPTION: A reStructuredText toctree directive that includes documentation for the analysis.plugin.plugin module with a maximum depth of 4 levels.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/analysis.plugin.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   analysis.plugin.plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for Analysis Plugin Module\nDESCRIPTION: RST configuration block that sets up automated documentation generation for the analysis.plugin.plugin module. Includes directives for documenting all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/analysis.plugin.plugin.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: analysis.plugin.plugin\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Tree Configuration\nDESCRIPTION: Sphinx documentation configuration that sets up the table of contents tree for the scheduler.analysis module documentation. It specifies a maximum depth of 4 levels and includes the plugin and scheduler submodules.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/scheduler.analysis.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   scheduler.analysis.plugin\n   scheduler.analysis.scheduler\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for FACT Core Analysis Plugin Scheduler\nDESCRIPTION: Sphinx directive for automatically generating documentation for the scheduler.analysis.plugin module in the FACT Core project. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/scheduler.analysis.plugin.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: scheduler.analysis.plugin\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for Config Module\nDESCRIPTION: ReStructuredText directive for configuring Sphinx autodoc extension to document the config module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/config.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: config\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Module Using Sphinx autonmodule Directive - reStructuredText\nDESCRIPTION: This snippet uses Sphinx documentation directives to generate reference documentation for the \"objects.file\" Python module. The \":members:\", \":undoc-members:\", and \":show-inheritance:\" options specify that all public attributes (including undocumented ones) and inheritance relationships are included in the auto-generated docs. There are no code-level dependencies, but Sphinx with the autodoc extension and access to the Python package are required. This markup is not executable code and is interpreted by Sphinx to build HTML or other formats for documentation purposes.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/objects.file.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: objects.file\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for helperFunctions.pdf Module\nDESCRIPTION: This is a Sphinx documentation directive that generates automatic API documentation for the helperFunctions.pdf module. It includes all members, undocumented members, and inheritance information from the module.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/helperFunctions.pdf.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: helperFunctions.pdf\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Python Module Import Definition\nDESCRIPTION: Sphinx documentation configuration for the helperFunctions.merge_generators module. Shows all members, including undocumented ones, and inheritance relationships.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/helperFunctions.merge_generators.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: helperFunctions.merge_generators\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Directive\nDESCRIPTION: Sphinx documentation configuration for the helperFunctions.yara_binary_search module, specifying documentation generation settings and member exclusions\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/helperFunctions.yara_binary_search.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: helperFunctions.yara_binary_search\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :exclude-members: YaraBinarySearchScannerDbInterface\n```\n\n----------------------------------------\n\nTITLE: Automating Module Documentation with Sphinx for Python\nDESCRIPTION: This snippet uses Sphinx reStructuredText directives to automatically document the helperFunctions.tag module. It includes all module members, both documented and undocumented, and displays inheritance information. It expects Sphinx to be set up in the project and relies on the helperFunctions.tag Python module being importable. The snippet outputs structured module documentation as part of the projectâ€™s generated docs.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/helperFunctions.tag.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: helperFunctions.tag\\n   :members:\\n   :undoc-members:\\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule Documentation Directive\nDESCRIPTION: ReStructuredText directive block for automatically generating documentation from the conftest Python module. Includes configuration for showing all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/fkie-cad/fact_core/blob/master/docsrc/modules/conftest.rst#_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: conftest\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```"
  }
]