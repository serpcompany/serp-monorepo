[
  {
    "owner": "redis",
    "repo": "nredisstack",
    "content": "TITLE: Setting a Key-Value Pair in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to set a simple key-value pair as a JSON object using the `JSON.SET` command in NRedisStack. It uses the `JsonCommands` object to set the value \"val\" at the root path \"$\" for the key \"ex1:1\".  It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nJsonCommands json = db.JSON();\nConsole.WriteLine(json.Set(\"ex1:1\", \"$\", \"\\\"val\\\"\"));\n```\n\n----------------------------------------\n\nTITLE: Setting a Single String Property in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to insert a JSON object with a single string property using the `JSON.SET` command in NRedisStack.  It creates an anonymous object with a property `field1` set to \"val1\" and sets it as the value for the key \"ex1:2\" at the root path \"$\". It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Set(\"ex1:2\", \"$\", new {field1 = \"val1\" }));\n```\n\n----------------------------------------\n\nTITLE: Loading JSON data into Redis\nDESCRIPTION: This snippet demonstrates how to load JSON data into Redis using the `json.Set` command. Each JSON object represents a product with fields such as id, gender, season, description, price, city, and coordinates. It prepares data for search operations.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nJsonCommands json = db.JSON();\njson.Set(\"product:15970\", \"$\", new {\n    id = 15970,\n    gender = \"Men\",\n    season = new[] {\"Fall\", \"Winter\"},\n    description = \"Turtle Check Men Navy Blue Shirt\",\n    price = 34.95,\n    city = \"Boston\",\n    coords = \"-71.057083, 42.361145\"\n});\njson.Set(\"product:59263\", \"$\", new {\n    id = 59263,\n    gender = \"Women\",\n    season = new[] {\"Fall\", \"Winter\", \"Spring\", \"Summer\"},\n    description = \"Titan Women Silver Watch\",\n    price = 129.99,\n    city = \"Dallas\",\n    coords = \"-96.808891, 32.779167\"\n});\njson.Set(\"product:46885\", \"$\", new {\n    id = 46885,\n    gender = \"Boys\",\n    season = new[] {\"Fall\"},\n    description = \"Ben 10 Boys Navy Blue Slippers\",\n    price = 45.99,\n    city = \"Denver\",\n    coords = \"-104.991531, 39.742043\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating RediSearch Index\nDESCRIPTION: This snippet creates a RediSearch index named 'idx1' on JSON data with the prefix 'product:'. The schema defines fields for indexing, including numeric, tag, text, and geo fields. It specifies the data types and field names to be used in the index.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSearchCommands ft = db.FT();\ntry {ft.DropIndex(\"idx1\");} catch {};\nft.Create(\"idx1\",   new FTCreateParams().On(IndexDataType.JSON)\n                                        .Prefix(\"product:\"),\n                                new Schema().AddNumericField(new FieldName(\"$.id\", \"id\"))\n                                            .AddTagField(new FieldName(\"$.gender\", \"gender\"))\n                                            .AddTagField(new FieldName(\"$.season.*\", \"season\"))\n                                            .AddTextField(new FieldName(\"$.description\", \"description\"))\n                                            .AddNumericField(new FieldName(\"$.price\", \"price\"))\n                                            .AddTextField(new FieldName(\"$.city\", \"city\"))\n                                            .AddGeoField(new FieldName(\"$.coords\", \"coords\")));\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Data Types in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates inserting a JSON object with multiple properties of different data types using the `JSON.SET` command in NRedisStack. It creates an anonymous object with string, boolean, and nullable string properties and sets it as the value for the key \"ex1:4\" at the root path \"$\".  It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Set(\"ex1:4\", \"$\", new {\n    field1 = \"val1\",\n    field2 = \"val2\",\n    field3 = true,\n    field4 = (string?) null\n}));\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data into Redis with NRedisStack (C#)\nDESCRIPTION: This snippet demonstrates loading book data into Redis using the `json.Set` command with the NRedisStack library. Each book is stored as a JSON object with fields like title, year, and price. It sets the JSON object at keys \"book:1\", \"book:2\", \"book:3\", and \"book:4\".\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\njson.Set(\"book:1\", \"$\", new {\n    title = \"System Design Interview\",\n    year = 2020,\n    price = 35.99\n});\njson.Set(\"book:2\", \"$\", new {\n    title =  \"The Age of AI: And Our Human Future\",\n    year = 2021,\n    price = 13.99\n});\njson.Set(\"book:3\", \"$\", new {\n    title = \"The Art of Doing Science and Engineering: Learning to Learn\",\n    year = 2020,\n    price = 20.99\n});\njson.Set(\"book:4\", \"$\", new {\n    title = \"Superintelligence: Path, Dangers, Stategies\",\n    year = 2016,\n    price = 14.36\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Mixed Data Types in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates inserting a JSON object with a mixture of property data types, including strings, arrays, and nested objects using the `JSON.SET` command in NRedisStack.  It creates an anonymous object with various properties and sets it as the value for the key \"ex1:7\" at the root path \"$\". It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Set(\"ex1:7\", \"$\", new {\n    str1 = \"val1\",\n    str2 = \"val2\",\n    arr1 = new [] {1,2,3,4},\n    obj1 = new {\n        num1 = 1,\n        arr2 = new [] {\"val1\",\"val2\", \"val3\"}\n    }\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Properties in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates inserting a JSON object with multiple string properties using the `JSON.SET` command in NRedisStack.  It creates an anonymous object with `field1` and `field2` properties, both set to string values, and sets it as the value for the key \"ex1:3\" at the root path \"$\".  It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Set(\"ex1:3\", \"$\", new {\n    field1 = \"val1\",\n    field2 = \"val2\"\n}));\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data into Redis\nDESCRIPTION: This C# code snippet demonstrates how to load JSON data into Redis using the NRedisStack client. It initializes a `JsonCommands` object, then uses the `Set` method to store a JSON object representing warehouse inventory under the key \"warehouse:1\". The JSON object contains details about products, including their ID, gender, season, description, and price.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nJsonCommands json = db.JSON();\njson.Set(\"warehouse:1\", \"$\", new {\n    city = \"Boston\",\n    location = \"42.361145, -71.057083\",\n    inventory = new[] {\n        new {\n            id = 15970,\n            gender = \"Men\",\n            season = new[] {\"Fall\", \"Winter\"},\n            description = \"Turtle Check Men Navy Blue Shirt\",\n            price = 34.95\n        },\n        new {\n            id = 59263,\n            gender = \"Women\",\n            season = new[] {\"Fall\", \"Winter\", \"Spring\", \"Summer\"},\n            description = \"Titan Women Silver Watch\",\n            price = 129.99\n        },\n        new {\n            id = 46885,\n            gender = \"Boys\",\n            season = new[] {\"Fall\"},\n            description =  \"Ben 10 Boys Navy Blue Slippers\",\n            price = 45.99\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Property from RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to set and fetch a single property from a JSON object using `JSON.SET` and `JSON.GET` commands in NRedisStack. It sets a JSON object with a `field1` property and then retrieves the value of that property using the path \"$.field1\". It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex2:2\", \"$\", new {\n    field1 = \"val1\"\n});\nConsole.WriteLine(json.Get(key: \"ex2:2\",\n    path: \"$.field1\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Geo Search Command in Redisearch with NRedisStack\nDESCRIPTION: This C# code snippet demonstrates how to perform a geo-based search using the NRedisStack client. It utilizes the `ft.Search` method with a query targeting the `coords` field to find documents within a 100-mile radius of the specified coordinates (Colorado Springs: -104.800644, 38.846127). The results are then converted to JSON format and printed to the console.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@coords:[-104.800644 38.846127 100 mi]\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Nested Property from RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to fetch a property nested within another JSON object using the `JSON.GET` command in NRedisStack. It sets a JSON object with a nested `obj1` and retrieves the value of `num2` within `obj1` using the path \"$.obj1.num2\".  It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex2:4\", \"$\", new {\n    obj1 = new {\n    str1 = \"val1\",\n    num2 = 2\n    }\n});\nConsole.WriteLine(json.Get(key: \"ex2:4\",\n    path: \"$.obj1.num2\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema for Redis Search Index using NRedisStack in C#\nDESCRIPTION: This snippet defines the schema for a Redis Search index using the Schema builder.  It adds three fields: name as a text field, age as a numeric field with indexing enabled (true), and city as a tag field. This schema defines how the data will be indexed and searched.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/CombinationModulesPipeline.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = new Schema().AddTextField(\"name\").AddNumericField(\"age\", true).AddTagField(\"city\");\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Index - C#\nDESCRIPTION: This snippet creates a RediSearch index for vector similarity search. It defines a schema with a tag field and a vector field, specifying the FLAT algorithm, data type, dimensions, and distance metric.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nSearchCommands ft = db.FT();\ntry {ft.DropIndex(\"vss_idx\");} catch {};\nConsole.WriteLine(ft.Create(\"vss_idx\", new FTCreateParams().On(IndexDataType.HASH).Prefix(\"vec:\"),\n    new Schema()\n    .AddTagField(\"tag\")\n    .AddVectorField(\"vector\", VectorField.VectorAlgo.FLAT,\n        new Dictionary<string, object>()\n        {\n            [\"TYPE\"] = \"FLOAT32\",\n            [\"DIM\"] = \"4\",\n            [\"DISTANCE_METRIC\"] = \"L2\"\n        }\n)));\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Transaction\nDESCRIPTION: This code creates a new Redis transaction object using the database instance. Transactions allow executing multiple commands atomically, ensuring data consistency.  This snippet initializes a `Transaction` object, which will encapsulate the subsequent Redis operations.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/TransactionsExample.md#_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar tran = new Transaction(db);\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Data in Redis\nDESCRIPTION: This snippet demonstrates storing JSON data in Redis using the `Json.SetAsync` method.  It sets the values for two different keys (`accdetails:Jeeva` and `accdetails:Shachar`) with JSON objects representing account details. The `$` path indicates that the entire JSON document should be replaced.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/TransactionsExample.md#_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\ntran.Json.SetAsync(\"accdetails:Jeeva\", \"$\", new { name = \"Jeeva\", totalAmount= 1000, bankName = \"City\" });\ntran.Json.SetAsync(\"accdetails:Shachar\", \"$\", new { name = \"Shachar\", totalAmount = 1000, bankName = \"City\" });\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Objects in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to insert a JSON object containing a nested object using the `JSON.SET` command in NRedisStack. It creates an anonymous object with a nested object `obj1` containing string and numeric properties and sets it as the value for the key \"ex1:6\" at the root path \"$\".  It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Set(\"ex1:6\", \"$\", new {\n    obj1 = new {\n        str1 = \"val1\",\n        num2 = 2\n    }\n}));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server using ConnectionMultiplexer in C#\nDESCRIPTION: This snippet establishes a connection to the Redis server using ConnectionMultiplexer from StackExchange.Redis. The connection string \"localhost\" specifies the Redis server address. This connection object is fundamental for all subsequent Redis operations.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/CombinationModulesPipeline.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar redis = ConnectionMultiplexer.Connect(\"localhost\");\n```\n\n----------------------------------------\n\nTITLE: Querying GeoShape Field with WITHIN Condition in C#\nDESCRIPTION: This C# code constructs a polygon 'within' and uses it to query the RediSearch index for documents where the 'geom' field is within the 'within' polygon.  It then executes the search using ft.Search and specifies DIALECT 3, which is required for GeoShape queries.  The 'poly' parameter is serialized to a string before being added to the query.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nPolygon within = factory.CreatePolygon(new Coordinate[]{new Coordinate(0, 0),\nnew Coordinate(0, 150), new Coordinate(150, 150), new Coordinate(150, 0), new Coordinate(0, 0)});\n\nSearchResult res = ft.Search(index, new Query(\"@geom:[within $poly]\")\n   .AddParam(\"poly\", within.ToString()) // Note serializing the argument to string\n   .Dialect(3)); // DIALECT 3 is required for this query\n```\n\n----------------------------------------\n\nTITLE: Querying GeoShape Field with Coordinates (Point) in C#\nDESCRIPTION: This C# code creates a point object and inserts it into Redis, then queries the RediSearch index to find documents whose 'geom' field is within a specified polygon. It is similar to the 'within polygon' query, but demonstrates querying with point data.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nPoint point = factory.CreatePoint(new Coordinate(10, 10));\ndb.HashSet(\"point\", \"geom\", point.ToString());\n\nres = ft.Search(index, new Query(\"@geom:[within $poly]\")\n   .AddParam(\"poly\", within.ToString()) // Note serializing the argument to string\n   .Dialect(3)); // DIALECT 3 is required for this query\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Index with JSON Field\nDESCRIPTION: This code creates a Redis search index named \"test\" that indexes JSON documents. It uses the FT.Create method with FTCreateParams to specify the index type (JSON) and prefix (\"doc:\"). A schema is defined to include a tag field for the \"name\" field within the JSON documents.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/ConvertSearchResultToJson.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nft.Create(\"test\", new FTCreateParams().On(IndexDataType.JSON).Prefix(\"doc:\"),\n            new Schema().AddTagField(new FieldName(\"$.name\", \"name\")));\n```\n\n----------------------------------------\n\nTITLE: Creating Index Parameters with Filter and Prefix C#\nDESCRIPTION: This snippet configures the index creation parameters using `FTCreateParams`. It filters the index to include only hashes where the 'age' is greater than 16 and restricts the index to keys with the prefixes 'student:' or 'pupil:'.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar parameters = FTCreateParams.CreateParams().Filter(\"@age>16\").Prefix(\"student:\", \"pupil:\");\n```\n\n----------------------------------------\n\nTITLE: Searching by Exact Phrase\nDESCRIPTION: This snippet shows how to search for documents containing an exact phrase ('Blue Shirt') within the 'description' field. The query ensures that the specified phrase is matched precisely.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@description:(\\\"Blue Shirt\\\")\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Redis Transaction\nDESCRIPTION: This snippet executes the Redis transaction using `tran.ExecuteAsync()`. This commits all the operations queued in the transaction atomically. The result indicates whether the transaction was executed successfully.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/TransactionsExample.md#_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\nvar condition = tran.ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Logical AND Filtering - RedisJSON in C#\nDESCRIPTION: This C# code filters the `inventory` array in Redis using a logical AND operation. It selects items where the `gender` is \"Men\" AND the `price` is greater than 20. The JSONPath expression `$.inventory[?(@.gender==\"Men\"&&@.price>20)]` implements this logic. The response is a JSON array containing items that satisfy both conditions.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[?(@.gender==\\\"Men\\\"&&@.price>20)]\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Connection and Pipeline in C#\nDESCRIPTION: This snippet establishes a connection to the Redis server and initializes a new pipeline using the NRedisStack library. The `redisFixture.Redis.GetDatabase()` method retrieves the database connection, and a `Pipeline` object is created using this connection.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineExample.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nIDatabase db = redisFixture.Redis.GetDatabase();\nvar pipeline = new Pipeline(db);\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Data to Redis Pipeline using NRedisStack in C#\nDESCRIPTION: This snippet adds multiple JSON documents to the Redis database using the Json.SetAsync method within a pipeline. Each document represents a person with properties like name, age, and city. The \"$\" path specifies the root of the JSON document.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/CombinationModulesPipeline.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npipeline.Json.SetAsync(\"person:01\", \"$\", new { name = \"John\", age = 30, city = \"New York\" });\npipeline.Json.SetAsync(\"person:02\", \"$\", new { name = \"Joy\", age = 25, city = \"Los Angeles\" });\npipeline.Json.SetAsync(\"person:03\", \"$\", new { name = \"Mark\", age = 21, city = \"Chicago\" });\npipeline.Json.SetAsync(\"person:04\", \"$\", new { name = \"Steve\", age = 24, city = \"Phoenix\" });\npipeline.Json.SetAsync(\"person:05\", \"$\", new { name = \"Michael\", age = 55, city = \"San Antonio\" });\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Properties from RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to fetch multiple properties from a JSON object using the `JSON.GET` command with multiple paths in NRedisStack. It sets a JSON object with `field1` and `field2` properties and then retrieves both properties. It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex2:3\", \"$\", new {\n    field1 = \"val1\",\n    field2 = \"val2\"\n});\nConsole.WriteLine(json.Get(key: \"ex2:3\",\n    paths: new[] {\"$.field1\", \"$.field2\" },\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Get All Properties of Array - RedisJSON in C#\nDESCRIPTION: This C# code snippet retrieves all properties of the `inventory` array within the JSON object stored under the key \"warehouse:1\" in Redis. It uses the `JSON.GET` command (accessed through the `json.Get` method) with the path `$.inventory[*]` to select all elements of the array.  The result will be a JSON array containing each inventory item as a separate object.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[*]\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Searching by Tag Array\nDESCRIPTION: This snippet demonstrates how to search for documents containing a specific tag value ('Spring') in the 'season' array field. It constructs a RediSearch query using the tag syntax.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@season:{Spring}\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Data from Redis\nDESCRIPTION: This snippet retrieves JSON data from Redis using the `Json.GetAsync` method within the transaction. It retrieves the entire JSON object for both `accdetails:Shachar` and `accdetails:Jeeva`. The retrieved data can then be processed further after the transaction is executed.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/TransactionsExample.md#_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nvar getShachar = tran.Json.GetAsync(\"accdetails:Shachar\");\nvar getJeeva = tran.Json.GetAsync(\"accdetails:Jeeva\");\n```\n\n----------------------------------------\n\nTITLE: Equality Filtering - RedisJSON in C#\nDESCRIPTION: This C# snippet filters the `inventory` array in Redis for items where the `description` field exactly matches \"Turtle Check Men Navy Blue Shirt\". The JSONPath expression `$.inventory[?(@.description==\"Turtle Check Men Navy Blue Shirt\")]` filters the array based on the equality condition.  The result will be a JSON array containing only the matching item(s).\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[?(@.description==\\\"Turtle Check Men Navy Blue Shirt\\\")]\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Searching by Numeric Range\nDESCRIPTION: This snippet demonstrates how to search for documents where the 'price' field falls within a specified numeric range (40 to 130). It creates a RediSearch query that filters based on the price range.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@price:[40,130]\"))\n                .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Greater Than or Equal Filtering - RedisJSON in C#\nDESCRIPTION: This C# code filters the `inventory` array in Redis for items where the `id` field is greater than or equal to 20000.  The JSONPath `$.inventory[?(@.id>=20000)]` performs the filtering. The returned JSON array will contain only the items with an ID meeting the specified criteria.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[?(@.id>=20000)]\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Updating an Array Item in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to update an item in an array via its index using the `JSON.SET` command in NRedisStack. It sets a JSON object containing an array `arr1` and then updates the element at index 0 to \"foo\". It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_15\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex3:4\", \"$\", new {\n    arr1 = new[] {\"val1\", \"val2\", \"val3\"}\n});\njson.Set(\"ex3:4\", \"$.arr1[0]\", \"\\\"foo\\\"\");\nConsole.WriteLine(json.Get(key: \"ex3:4\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Incrementing Numerical Values in JSON\nDESCRIPTION: This snippet increments numerical values within the JSON documents using `Json.NumIncrbyAsync`. It debits 200 from Jeeva's total amount and credits 200 to Shachar's total amount.  The `$.totalAmount` path specifies the field to be incremented/decremented.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/TransactionsExample.md#_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\ntran.Json.NumIncrbyAsync(\"accdetails:Jeeva\", \"$.totalAmount\", -200);\ntran.Json.NumIncrbyAsync(\"accdetails:Shachar\", \"$.totalAmount\", 200);\n```\n\n----------------------------------------\n\nTITLE: Execute Pipeline C#\nDESCRIPTION: Executes the pipeline, sending all batched commands to the Redis server for processing. This improves efficiency by reducing the number of round trips to the server.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npipeline.Execute();\n```\n\n----------------------------------------\n\nTITLE: Setup Pipeline Connection C#\nDESCRIPTION: Initializes a new pipeline object using the Redis database reference. This pipeline is then used to batch multiple Redis commands for more efficient execution.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar pipeline = new Pipeline(db);\n```\n\n----------------------------------------\n\nTITLE: Get Redis Database Reference C#\nDESCRIPTION: Retrieves a reference to the Redis database using redis.GetDatabase(). This allows subsequent operations to be performed on the database.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar db = redis.GetDatabase();\n```\n\n----------------------------------------\n\nTITLE: Accessing the JSON Result in C#\nDESCRIPTION: This snippet demonstrates how to access the result of the JSON retrieval operation.  The `getResponse.Result` property provides access to the JSON object retrieved from Redis after the pipeline has been executed.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineExample.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar result = getResponse.Result;\n```\n\n----------------------------------------\n\nTITLE: Regex Contains Case Insensitive - RedisJSON in C#\nDESCRIPTION: This C# snippet retrieves items from the `inventory` array in Redis where the `description` field contains \"watch\", regardless of case.  The JSONPath `$.inventory[?(@.description =~ \"(?i)watch\")]` uses a case-insensitive regular expression. The resulting JSON array will only include items matching this criteria.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[?(@.description =~ \\\"(?i)watch\\\")]\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Creating a FT Index using NRedisStack (C#)\nDESCRIPTION: This code creates a full-text index named \"book_idx\" using the NRedisStack library.  It indexes JSON documents with the prefix \"book:\". The schema includes text fields for 'title', and numeric fields for 'year' and 'price'.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nConsole.WriteLine(ft.Create(\"book_idx\", new FTCreateParams()\n                        .On(IndexDataType.JSON)\n                        .Prefix(\"book:\"),\n                        new Schema().AddTextField(new FieldName(\"$.title\", \"title\"))\n                            .AddNumericField(new FieldName(\"$.year\", \"year\"))\n                            .AddNumericField(new FieldName(\"$.price\", \"price\"))));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server C#\nDESCRIPTION: This snippet establishes a connection to the Redis server using ConnectionMultiplexer.Connect. The connection string \"localhost\" specifies the server address.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar redis = ConnectionMultiplexer.Connect(\"localhost\");\n```\n\n----------------------------------------\n\nTITLE: Installing NRedisStack Package using dotnet CLI\nDESCRIPTION: This command shows how to install the NRedisStack NuGet package using the dotnet CLI. It adds the NRedisStack package to your .NET project, allowing you to use Redis Stack features.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package NRedisStack\n```\n\n----------------------------------------\n\nTITLE: Executing Search Query and Converting to JSON\nDESCRIPTION: This snippet executes a Redis search query against the \"test\" index, searching for documents where the \"name\" field contains \"foo\". The FT.Search method is used with a Query object. The results are then converted to a JSON list (IEnumerable) using the ToJson() method.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/ConvertSearchResultToJson.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar res = ft.Search(\"test\", new Query(\"@name:{foo}\"));\nvar docs = res.ToJson();\n```\n\n----------------------------------------\n\nTITLE: Get Redis Database and Search API C#\nDESCRIPTION: This snippet retrieves a reference to the Redis database and the Redis Stack search API using the StackExchange.Redis library.  It uses the `GetDatabase()` and `FT()` extension methods to access these functionalities.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar db = redis.GetDatabase();\nvar ft = db.FT();\n```\n\n----------------------------------------\n\nTITLE: Importing NRedisStack Namespaces\nDESCRIPTION: This snippet imports the necessary namespaces from the NRedisStack library for interacting with Redis, including StackExchange.Redis, NRedisStack core, RedisStack commands, search capabilities, and aggregation functionalities.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nusing StackExchange.Redis;\nusing NRedisStack;\nusing NRedisStack.RedisStackCommands;\nusing NRedisStack.Search;\nusing NRedisStack.Search.Literals.Enums;\nusing NRedisStack.Search.Aggregation;\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Data in Pipeline using C#\nDESCRIPTION: This snippet demonstrates how to add JSON data to the pipeline using `pipeline.Json.SetAsync`. It sets a JSON object with properties like name, age, city, and an array of nicknames. The JSON object is associated with the key \"person\" at the root path \"$\".\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineExample.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npipeline.Json.SetAsync(\"person\", \"$\", new { name = \"John\", age = 30, city = \"New York\", nicknames = new[] { \"John\", \"Johny\", \"Jo\" } });\n```\n\n----------------------------------------\n\nTITLE: Create TimeSeries Async C#\nDESCRIPTION: Asynchronously creates new TimeSeries objects in Redis using the pipeline. The labels created in the previous step are associated with each TimeSeries.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npipeline.Ts.CreateAsync(\"temp:TLV\", labels: labels1);\npipeline.Ts.CreateAsync(\"temp:JLM\", labels: labels2);\n```\n\n----------------------------------------\n\nTITLE: Setting up Search Index (C#)\nDESCRIPTION: This C# code sets up the necessary using statements for using Redis Search functionality and connects to the Redis database.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing NRedisStack.Search;\nusing NRedisStack.Search.Literals.Enums;\n//...\nConnectionMultiplexer redis = ConnectionMultiplexer.Connect(\"localhost\");\nIDatabase db = redis.GetDatabase();\n\nSearchCommands ft = db.FT();\nJsonCommands json = db.JSON();\n```\n\n----------------------------------------\n\nTITLE: Get All Properties of a Field - RedisJSON in C#\nDESCRIPTION: This C# code retrieves all values of the `price` field within the `inventory` array from the JSON object stored under the key \"warehouse:1\" in Redis. The path `$.inventory[*].price` specifies that all `price` fields within each object in the `inventory` array should be returned as a JSON array.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[*].price\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Loading Vector Data - C#\nDESCRIPTION: This code loads vector data into Redis hashes. Each hash represents a vector with its associated tag. It converts float arrays to byte arrays for storage in Redis.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\ndb.HashSet(\"vec:1\", new HashEntry[]\n{\n    new(\"vector\", (new float[] { 1f, 1f, 1f, 1f }).SelectMany(BitConverter.GetBytes).ToArray()),\n    new(\"tag\", \"A\")\n});\ndb.HashSet(\"vec:2\", new HashEntry[]\n{\n    new(\"vector\", (new float[] { 2f, 2f, 2f, 2f }).SelectMany(BitConverter.GetBytes).ToArray()),\n    new(\"tag\", \"A\")\n});\ndb.HashSet(\"vec:3\", new HashEntry[]\n{\n    new(\"vector\", (new float[] { 3f, 3f, 3f, 3f }).SelectMany(BitConverter.GetBytes).ToArray()),\n    new(\"tag\", \"B\")\n});\ndb.HashSet(\"vec:4\", new HashEntry[]\n{\n    new(\"vector\", (new float[] { 4f, 4f, 4f, 4f }).SelectMany(BitConverter.GetBytes).ToArray()),\n    new(\"tag\", \"A\")\n});\n```\n\n----------------------------------------\n\nTITLE: Running Redis Stack using Docker\nDESCRIPTION: This command shows how to run a Redis Stack instance using Docker. It exposes port 6379 and names the container 'redis-stack', using the latest Redis Stack image. This sets up a local Redis instance with modules like JSON, Search, and TimeSeries.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -p 6379:6379 --name redis-stack redis/redis-stack:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Stack Index C#\nDESCRIPTION: This snippet creates a Redis Stack index named 'example_index' using the defined parameters and schema. The `ft.Create` method is called to initiate the index creation process.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nft.Create(\"example_index\", parameters, schema);\n```\n\n----------------------------------------\n\nTITLE: Redis Search Result (small and large Polygons)\nDESCRIPTION: This Redis search result indicates two documents were found ('small' and 'large'), both having 'geom' fields containing Well-Known Text (WKT) representations of polygons. This result is for a CONTAINS query.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n1) (integer) 2\n2) \"small\"\n3) 1) \"geom\"\n   2) \"POLYGON ((1 1, 1 100, 100 100, 100 1, 1 1))\"\n4) \"large\"\n5) 1) \"geom\"\n   2) \"POLYGON ((1 1, 1 200, 200 200, 200 1, 1 1))\"\n```\n\n----------------------------------------\n\nTITLE: Redis Search Result (small Polygon and Point)\nDESCRIPTION: This Redis search result shows two documents found: 'small' (a polygon) and 'point' (a point). Each entry has a 'geom' field containing its Well-Known Text representation. The result is from WITHIN query.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n1) (integer) 2\n2) \"small\"\n3) 1) \"geom\"\n   2) \"POLYGON ((1 1, 1 100, 100 100, 100 1, 1 1))\"\n4) \"point\"\n5) 1) \"geom\"\n   2) \"POINT (10 10)\"\n```\n\n----------------------------------------\n\nTITLE: Aggregation - Sum (C#)\nDESCRIPTION: This code calculates the sum of the 'price' field (inventory dollar value) grouped by 'year' using NRedisStack.  It utilizes the `Sum` reducer and prints the results to the console after performing the aggregation on the index named \"book_idx\".\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nrequest = new AggregationRequest(\"*\").GroupBy(\"@year\", Reducers.Sum(\"@price\").As(\"sum\"));\nresult = ft.Aggregate(\"book_idx\", request);\nfor (var i=0; i<result.TotalResults; i++)\n{\n    var row = result.GetRow(i);\n    Console.WriteLine($\"{row[\"year\"]}: {row[\"sum\"]}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data Using HSET Command C#\nDESCRIPTION: This snippet uses the HSET command to add multiple field-value pairs to different hashes in Redis. Each hash represents a person with 'first', 'last', and 'age' fields.  It creates hashes for professors, students, and pupils.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndb.HashSet(\"profesor:5555\", new HashEntry[] { new(\"first\", \"Albert\"), new(\"last\", \"Blue\"), new(\"age\", \"55\") });\ndb.HashSet(\"student:1111\", new HashEntry[] { new(\"first\", \"Joe\"), new(\"last\", \"Dod\"), new(\"age\", \"18\") });\ndb.HashSet(\"pupil:2222\", new HashEntry[] { new(\"first\", \"Jen\"), new(\"last\", \"Rod\"), new(\"age\", \"14\") });\ndb.HashSet(\"student:3333\", new HashEntry[] { new(\"first\", \"El\"), new(\"last\", \"Mark\"), new(\"age\", \"17\") });\ndb.HashSet(\"pupil:4444\", new HashEntry[] { new(\"first\", \"Pat\"), new(\"last\", \"Shu\"), new(\"age\", \"21\") });\ndb.HashSet(\"student:5555\", new HashEntry[] { new(\"first\", \"Joen\"), new(\"last\", \"Ko\"), new(\"age\", \"20\") });\ndb.HashSet(\"teacher:6666\", new HashEntry[] { new(\"first\", \"Pat\"), new(\"last\", \"Rod\"), new(\"age\", \"20\") });\n```\n\n----------------------------------------\n\nTITLE: Searching with Prefix\nDESCRIPTION: This snippet demonstrates how to search for documents where a word in the 'description' field begins with a specific prefix ('Nav'). It uses the wildcard character '*' to represent any characters following the prefix.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@description:Nav*\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Array Elements from RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates fetching elements within an array using array subscripting with the `JSON.GET` command in NRedisStack.  It shows how to retrieve a specific element, a range of elements, and elements from the end of the array. It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex2:5\", \"$\",new {\n    str1 = \"val1\",\n    str2 = \"val2\",\n    arr1 = new[] {1,2,3,4},\n    obj1 = new {\n        num1 = 1,\n        arr2 = new[] {\"val1\",\"val2\", \"val3\"}\n    }\n});\nConsole.WriteLine(json.Get(key: \"ex2:5\",\n    path: \"$.obj1.arr2\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\nConsole.WriteLine(json.Get(key: \"ex2:5\",\n    path: \"$.arr1[1]\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\nConsole.WriteLine(json.Get(key: \"ex2:5\",\n    path: \"$.obj1.arr2[0:2]\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\nConsole.WriteLine(json.Get(key: \"ex2:5\",\n    path: \"$.arr1[-2:]\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Running tests using dotnet test\nDESCRIPTION: This command executes the unit tests for the NRedisStack project using the dotnet test command. Passing tests are a prerequisite for submitting a pull request.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Property in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates deleting a single property from a JSON object using the `JSON.DEL` command in NRedisStack. It sets an initial object with `field1` and `field2` and then deletes the `field1` property using the path \"$.field1\". It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_17\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex4:2\", \"$\", new {\n    field1 = \"val1\",\n    field2 =  \"val2\"\n});\njson.Del(\"ex4:2\", \"$.field1\");\nConsole.WriteLine(json.Get(key: \"ex4:2\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Formatting code using dotnet format\nDESCRIPTION: This command is used to format the C# code according to the project's coding style using the dotnet format tool. This ensures consistent formatting across the codebase.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet format\n```\n\n----------------------------------------\n\nTITLE: Searching Index for Last Name Rod C#\nDESCRIPTION: This snippet attempts to search for hashes with the last name Rod. However, it will return empty because the index only considers those keys with the prefix of 'student:' or 'pupil:', and there are no entries that match both criteria.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar lastNameRod = ft.Search(\"example_index\", new Query(\"@last:Rod\"));\n```\n\n----------------------------------------\n\nTITLE: Example JSON Documents for Redisearch\nDESCRIPTION: These JSON snippets represent example documents stored in Redisearch. Each document contains fields such as `id`, `gender`, `season`, `description`, `price`, `city`, and `coords`, which represent various attributes of the products.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\"id\":15970,\"gender\":\"Men\",\"season\":[\"Fall\",\"Winter\"],\"description\":\"Turtle Check Men Navy Blue Shirt\",\"price\":34.95,\"city\":\"Boston\",\"coords\":\"-71.057083, 42.361145\"}\n{\"id\":46885,\"gender\":\"Boys\",\"season\":[\"Fall\"],\"description\":\"Ben 10 Boys Navy Blue Slippers\",\"price\":45.99,\"city\":\"Denver\",\"coords\":\"-104.991531, 39.742043\"}\n```\n\n----------------------------------------\n\nTITLE: Querying GeoShape Field with CONTAINS Condition in C#\nDESCRIPTION: This C# code constructs a polygon 'contains' and uses it to query the RediSearch index for documents where the 'geom' field contains the 'contains' polygon.  It executes the search using ft.Search and specifies DIALECT 3, which is required for GeoShape queries. The 'poly' parameter is serialized to a string before being added to the query.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nPolygon contains = factory.CreatePolygon(new Coordinate[]{new Coordinate(2, 2),\nnew Coordinate(2, 50), new Coordinate(50, 50), new Coordinate(50, 2), new Coordinate(2, 2)});\n\nres = ft.Search(index, new Query(\"@geom:[contains $poly]\")\n    .AddParam(\"poly\", contains.ToString()) // Note serializing the argument to string\n    .Dialect(3)); // DIALECT 3 is required for this query\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Index - C#\nDESCRIPTION: This code creates a RediSearch index for JSON documents. It defines a schema with a text field for the 'city' property within the JSON documents and uses \"warehouse:\" as a prefix.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\nSearchCommands ft = db.FT();\ntry {ft.DropIndex(\"wh_idx\");} catch {};\nConsole.WriteLine(ft.Create(\"wh_idx\", new FTCreateParams()\n                        .On(IndexDataType.JSON)\n                        .Prefix(\"warehouse:\"),\n                        new Schema().AddTextField(new FieldName(\"$.city\", \"city\"))));\n```\n\n----------------------------------------\n\nTITLE: Logical OR Filtering - RedisJSON in C#\nDESCRIPTION: This C# code retrieves the `id` of items from the `inventory` array that satisfy at least one of the following conditions: `price` is less than 100 OR `gender` is \"Women\". The JSONPath `$.inventory[?(@.price<100||@.gender==\"Women\")].id` implements the logical OR and specifies that only the `id` of the matching items should be returned in a JSON array.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[?(@.price<100||@.gender==\\\"Women\\\")].id\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Dropping the Index (C#)\nDESCRIPTION: This C# code demonstrates how to drop or delete a search index from Redis using the FT.DROPINDEX command from the NRedisStack library. It removes the index named 'myIndex'.  It depends on NRedisStack and StackExchange.Redis NuGet packages.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// FT.DROPINDEX myIndex\nft.DropIndex(\"myIndex\");\n```\n\n----------------------------------------\n\nTITLE: Preparing Geometric Data in Redis using C#\nDESCRIPTION: This C# code creates two polygons, 'small' and 'large', using the GeometryFactory, converts them to Well-Known Text (WKT) format, and stores them in Redis hashes named 'small' and 'large' respectively, under the field 'geom'. This simulates indexing geospatial data in Redis.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nPolygon small = factory.CreatePolygon(new Coordinate[]{new Coordinate(1, 1),\nnew Coordinate(1, 100), new Coordinate(100, 100), new Coordinate(100, 1), new Coordinate(1, 1)});\ndb.HashSet(\"small\", \"geom\", small.ToString());\n\nPolygon large = factory.CreatePolygon(new Coordinate[]{new Coordinate(1, 1),\nnew Coordinate(1, 200), new Coordinate(200, 200), new Coordinate(200, 1), new Coordinate(1, 1)});\ndb.HashSet(\"large\", \"geom\", large.ToString());\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis Server C#\nDESCRIPTION: Establishes a connection to the Redis server using ConnectionMultiplexer.Connect. This is the initial step for interacting with Redis.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar redis = ConnectionMultiplexer.Connect(\"localhost\");\n```\n\n----------------------------------------\n\nTITLE: Hybrid Vector Search Result - Bash\nDESCRIPTION: This is the expected result after performing the Hybrid Vector Search.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nid: vec:2, score: 3\nid: vec:4, score: 7\n```\n\n----------------------------------------\n\nTITLE: Fetching a Key-Value Pair from RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to set and fetch a simple key-value pair as a JSON object using `JSON.SET` and `JSON.GET` commands in NRedisStack. It first sets the value \"val\" at the root path \"$\" for the key \"ex2:1\" and then retrieves it. It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex2:1\", \"$\", \"\\\"val\\\"\");\nConsole.WriteLine(json.Get(key: \"ex2:1\",\n    path: \"$\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Warehouse Data Set - JSON\nDESCRIPTION: This is the data set that stores warehouse information. It include city, location, and the inventory information.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"city\": \"Boston\",\n    \"location\": \"42.361145, -71.057083\",\n    \"inventory\": [\n        {\n            \"id\": 15970,\n            \"gender\": \"Men\",\n            \"season\":[\"Fall\", \"Winter\"],\n            \"description\": \"Turtle Check Men Navy Blue Shirt\",\n            \"price\": 34.95\n        },\n        {\n            \"id\": 59263,\n            \"gender\": \"Women\",\n            \"season\": [\"Fall\", \"Winter\", \"Spring\", \"Summer\"],\n            \"description\": \"Titan Women Silver Watch\",\n            \"price\": 129.99\n        },\n        {\n            \"id\": 46885,\n            \"gender\": \"Boys\",\n            \"season\": [\"Fall\"],\n            \"description\": \"Ben 10 Boys Navy Blue Slippers\",\n            \"price\": 45.99\n        }\n    ]\n},\n{\n    \"city\": \"Dallas\",\n    \"location\": \"32.779167, -96.808891\",\n    \"inventory\": [\n        {\n            \"id\": 51919,\n            \"gender\": \"Women\",\n            \"season\":[\"Summer\"],\n            \"description\": \"Nyk Black Horado Handbag\",\n            \"price\": 52.49\n        },\n        {\n            \"id\": 4602,\n            \"gender\": \"Unisex\",\n            \"season\": [\"Fall\", \"Winter\"],\n            \"description\": \"Wildcraft Red Trailblazer Backpack\",\n            \"price\": 50.99\n        },\n        {\n            \"id\": 37561,\n            \"gender\": \"Girls\",\n            \"season\": [\"Spring\", \"Summer\"],\n            \"description\": \"Madagascar3 Infant Pink Snapsuit Romper\",\n            \"price\": 23.95\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure Example\nDESCRIPTION: This JSON snippet defines a sample data structure for warehouse inventory, which includes fields like city, location, and an array of inventory items. Each item in the inventory array contains properties such as id, gender, season, description, and price.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"city\": \"Boston\",\n    \"location\": \"42.361145, -71.057083\",\n    \"inventory\": [\n        {\n            \"id\": 15970,\n            \"gender\": \"Men\",\n            \"season\":[\"Fall\", \"Winter\"],\n            \"description\": \"Turtle Check Men Navy Blue Shirt\",\n            \"price\": 34.95\n        },\n        {\n            \"id\": 59263,\n            \"gender\": \"Women\",\n            \"season\": [\"Fall\", \"Winter\", \"Spring\", \"Summer\"],\n            \"description\": \"Titan Women Silver Watch\",\n            \"price\": 129.99\n        },\n        {\n            \"id\": 46885,\n            \"gender\": \"Boys\",\n            \"season\": [\"Fall\"],\n            \"description\": \"Ben 10 Boys Navy Blue Slippers\",\n            \"price\": 45.99\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Filtering Search Result 1 - JSON\nDESCRIPTION: This is the expected result after searching and filtering JSON documents.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[59263]\n```\n\n----------------------------------------\n\nTITLE: Setting up Redis Connection and Geometry Factory in C#\nDESCRIPTION: This C# code establishes a connection to the Redis server, retrieves a database instance, gets a reference to the RediSearch commands, and initializes WKTReader and GeometryFactory objects. These objects are used for reading and creating geometry objects that will be used when indexing data and creating queries.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Connect to the Redis server:\nvar redis = ConnectionMultiplexer.Connect(\"localhost\");\nvar db = redis.GetDatabase();\n// Get a reference to the database and for search commands:\nvar ft = db.FT();\n\n// Create WTKReader and GeometryFactory objects:\nWKTReader reader = new WKTReader();\nGeometryFactory factory = new GeometryFactory();\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Arrays in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to insert a JSON object containing an array using the `JSON.SET` command in NRedisStack. It creates an anonymous object with an array property `arr1` containing string values and sets it as the value for the key \"ex1:5\" at the root path \"$\". It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Set(\"ex1:5\", \"$\", new {\n    arr1 = new [] {\"val1\", \"val2\", \"val3\"}\n}));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis and Creating Module Variables (C#)\nDESCRIPTION: This C# code demonstrates how to connect to a Redis instance using StackExchange.Redis and NRedisStack. It also shows how to create variables for different Redis Stack modules like Bloom Filter, Cuckoo Filter, Count-min Sketch, TopK, T-Digest, Search, JSON, TimeSeries, and Graph.  It depends on NRedisStack and StackExchange.Redis NuGet packages.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing NRedisStack;\nusing NRedisStack.RedisStackCommands;\nusing StackExchange.Redis;\n//...\nConnectionMultiplexer redis = ConnectionMultiplexer.Connect(\"localhost\");\nIDatabase db = redis.GetDatabase();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nBloomCommands bf = db.BF();\nCuckooCommands cf = db.CF();\nCmsCommands cms = db.CMS();\nTopKCommands topk = db.TOPK();\nTdigestCommands tdigest = db.TDIGEST();\nSearchCommands ft = db.FT();\nJsonCommands json = db.JSON();\nTimeSeriesCommands ts = db.TS();\nGraphCommands graph = db.GRAPH(); // If Redis version is less than 7.2 and NRedisStack version is less than 0.13.x\n```\n\n----------------------------------------\n\nTITLE: JSON Index Creation Result - Bash\nDESCRIPTION: This is the expected result after creating the JSON index.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nTrue\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data - C#\nDESCRIPTION: This code loads JSON data representing warehouse information into Redis using the JSON.SET command. It stores the data under keys \"warehouse:1\" and \"warehouse:2\".\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\nJsonCommands json = db.JSON();\njson.Set(\"warehouse:1\", \"$\", new {\n    city = \"Boston\",\n    location = \"-71.057083, 42.361145\",\n    inventory = new[] {\n        new {\n            id = 15970,\n            gender = \"Men\",\n            season = new[] {\"Fall\", \"Winter\"},\n            description = \"Turtle Check Men Navy Blue Shirt\",\n            price = 34.95\n        },\n        new {\n            id = 59263,\n            gender = \"Women\",\n            season = new[] {\"Fall\", \"Winter\", \"Spring\", \"Summer\"},\n            description = \"Titan Women Silver Watch\",\n            price = 129.99\n        },\n        new {\n            id = 46885,\n            gender = \"Boys\",\n            season = new[] {\"Fall\"},\n            description = \"Ben 10 Boys Navy Blue Slippers\",\n            price = 45.99\n        }\n    }\n});\njson.Set(\"warehouse:2\", \"$\", new {\n    city = \"Dallas\",\n    location = \"-96.808891, 32.779167\",\n    inventory = new[] {\n        new {\n            id = 51919,\n            gender = \"Women\",\n            season = new[] {\"Summer\"},\n            description = \"Nyk Black Horado Handbag\",\n            price = 52.49\n        },\n        new {\n            id = 4602,\n            gender = \"Unisex\",\n            season = new[] {\"Fall\", \"Winter\"},\n            description = \"Wildcraft Red Trailblazer Backpack\",\n            price = 50.99\n        },\n        new {\n            id = 37561,\n            gender = \"Girls\",\n            season = new[] {\"Spring\", \"Summer\"},\n            description = \"Madagascar3 Infant Pink Snapsuit Romper\",\n            price = 23.95\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Nested Property in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates deleting a property from an embedded object using the `JSON.DEL` command in NRedisStack.  It sets a JSON object with a nested `obj1` and then deletes the `num2` property within `obj1` using the path \"$.obj1.num2\".  It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_18\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex4:3\", \"$\", new {\n    obj1 = new {\n        str1 = \"val1\",\n        num2 = 2\n    }\n});\njson.Del(\"ex4:3\", \"$.obj1.num2\");\nConsole.WriteLine(json.Get(key: \"ex4:3\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Updating a Nested Property in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to update a property in an embedded JSON object using the `JSON.SET` command in NRedisStack. It sets a JSON object with a nested `obj1` and then updates the value of `num2` within `obj1` to 3. It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex3:3\", \"$\", new {\n    obj1 = new {\n        str1 = \"val1\",\n        num2 = 2\n    }\n});\njson.Set(\"ex3:3\", \"$.obj1.num2\", 3);\nConsole.WriteLine(json.Get(key: \"ex3:3\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Deleting an Array Item in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates deleting a single item from an array using the `JSON.DEL` command in NRedisStack. It sets a JSON object containing an array `arr1` and then deletes the element at index 0 using the path \"$.arr1[0]\". It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_19\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex4:4\", \"$\", new {\n    arr1 = new[] {\"val1\", \"val2\", \"val3\"}\n});\njson.Del(\"ex4:4\", \"$.arr1[0]\");\nConsole.WriteLine(json.Get(key: \"ex4:4\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Property in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates how to update a single property within a JSON object using the `JSON.SET` command in NRedisStack. It sets an initial object with `field1` and `field2` and then updates the value of `field1` to \"foo\".  It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex3:2\", \"$\", new {\n    field1 = \"val1\",\n    field2 = \"val2\"\n});\njson.Set(\"ex3:2\", \"$.field1\", \"\\\"foo\\\"\");\nConsole.WriteLine(json.Get(key: \"ex3:2\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Vector Index Creation Result - Bash\nDESCRIPTION: This is the expected result after creating the Vector index.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTrue\n```\n\n----------------------------------------\n\nTITLE: Regex Begins With Filtering - RedisJSON in C#\nDESCRIPTION: This C# code snippet filters the `inventory` array in Redis for items where the `description` field begins with the letter \"T\". The JSONPath expression `$.inventory[?(@.description =~ \"^T\")]` uses a regular expression to check for descriptions starting with 'T'.  The returned JSON array includes only items whose description begins with 'T'.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[?(@.description =~ \\\"^T\\\")]\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Add Data to TimeSeries Async C#\nDESCRIPTION: Adds data to the TimeSeries objects asynchronously using MAddAsync and the pipeline.  The TimeSeries objects are specified by name along with a timestamp and a value.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nList<(string, TimeStamp, double)> sequence1 = new List<(string, TimeStamp, double)>()\n{\n   (\"temp:TLV\",1000,30),\n   (\"temp:TLV\", 1010 ,35),\n   (\"temp:TLV\", 1020, 9999),\n   (\"temp:TLV\", 1030, 40)\n};\nList<(string, TimeStamp, double)> sequence2 = new List<(string, TimeStamp, double)>()\n{\n   (\"temp:JLM\",1005,30),\n   (\"temp:JLM\", 1015 ,35),\n   (\"temp:JLM\", 1025, 9999),\n   (\"temp:JLM\", 1035, 40)\n};\n\npipeline.Ts.MAddAsync(sequence1);\npipeline.Ts.MAddAsync(sequence2);\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Index (C#)\nDESCRIPTION: This C# code demonstrates how to create a search index in Redis using the FT.CREATE command from the NRedisStack library. It defines the index schema with text fields and weights.  It depends on NRedisStack and StackExchange.Redis NuGet packages. Requires Redis Stack to be running.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// FT.CREATE myIdx ON HASH PREFIX 1 doc: SCHEMA title TEXT WEIGHT 5.0 body TEXT url TEXT\nft.Create(\"myIndex\", new FTCreateParams().On(IndexDataType.HASH)\n                                         .Prefix(\"doc:\"),\n                     new Schema().AddTextField(\"title\", 5.0)\n                                 .AddTextField(\"body\")\n                                 .AddTextField(\"url\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Hash Document (C#)\nDESCRIPTION: This C# code shows how to create a hash document and add it to the Redis index. It simulates the `HSET` command to store key-value pairs, which are automatically indexed due to the defined prefix. It depends on NRedisStack and StackExchange.Redis NuGet packages.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// HSET doc:1 title \"hello world\" body \"lorem ipsum\" url \"http://redis.io\"\ndb.HashSet(\"doc:1\", new HashEntry[] { new(\"title\", \"hello world\"),\n                                      new(\"body\", \"lorem ipsum\"),\n                                      new(\"url\", \"http://redis.io\") });\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Field from JSON Data\nDESCRIPTION: This snippet retrieves a specific field (`totalAmount`) from the JSON documents using `Json.GetAsync` with a path specified. It fetches the `totalAmount` for both Jeeva and Shachar after the increment operations. The `path` parameter allows targeting a specific field within the JSON document.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/TransactionsExample.md#_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nvar totalAmtOfJeeva = tran.Json.GetAsync(\"accdetails:Jeeva\", path:\"$.totalAmount\");\nvar totalAmtOfShachar = tran.Json.GetAsync(\"accdetails:Shachar\", path:\"$.totalAmount\");\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search - C#\nDESCRIPTION: This code performs a vector search using the KNN (K-Nearest Neighbors) algorithm.  It searches for the top 2 nearest vectors to the provided query vector and sorts the results by the vector score.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nfloat[] vec = new[] { 2f, 3f, 3f, 3f};\nvar res = ft.Search(\"vss_idx\",\n            new Query(\"*[KNN 2 @vector $query_vec]\")\n            .AddParam(\"query_vec\", vec.SelectMany(BitConverter.GetBytes).ToArray())\n            .SetSortBy(\"__vector_score\")\n            .Dialect(2));\nforeach (var doc in res.Documents) {\n    foreach (var item in doc.GetProperties()) {\n        if (item.Key == \"__vector_score\") {\n            Console.WriteLine($\"id: {doc.Id}, score: {item.Value}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Search Result (small Polygon)\nDESCRIPTION: This Redis search result shows the structure of a response when searching for GeoShape data. It indicates that one record was found ('small'), and the 'geom' field contains the Well-Known Text representation of the polygon.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n1) (integer) 1\n2) \"small\"\n3) 1) \"geom\"\n   2) \"POLYGON ((1 1, 1 100, 100 100, 100 1, 1 1))\"\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entire Object in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates deleting an entire JSON object (key) using the `JSON.DEL` command in NRedisStack. It first sets a JSON object with `field1` and then deletes the entire key \"ex4:1\". It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_16\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex4:1\", \"$\", new {field1 = \"val1\"});\njson.Del(\"ex4:1\");\nConsole.WriteLine(json.Get(key: \"ex4:1\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Searching with Suffix\nDESCRIPTION: This snippet demonstrates how to search for documents where a word in the 'description' field ends with a specific suffix ('Watch'). It uses the wildcard character '*' to represent any characters preceding the suffix.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@description:*Watch\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Hybrid Vector Search - C#\nDESCRIPTION: This code performs a hybrid query combining vector search with tag filtering.  It searches only for documents with a specific tag and finds the nearest vectors.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nfloat[] vec = new[] { 2f, 3f, 3f, 3f};\nvar res = ft.Search(\"vss_idx\",\n            new Query(\"@tag:{A}=>[KNN 2 @vector $query_vec]\")\n            .AddParam(\"query_vec\", vec.SelectMany(BitConverter.GetBytes).ToArray())\n            .SetSortBy(\"__vector_score\")\n            .Dialect(2));\nforeach (var doc in res.Documents) {\n    foreach (var item in doc.GetProperties()) {\n        if (item.Key == \"__vector_score\") {\n            Console.WriteLine($\"id: {doc.Id}, score: {item.Value}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing a JSON Object in Redis (C#)\nDESCRIPTION: This C# code shows how to store a JSON object in Redis using the JSON module of NRedisStack. It connects to Redis, gets the JSON commands interface, and sets a JSON object at a specified key and path.  It depends on NRedisStack and StackExchange.Redis NuGet packages.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nConnectionMultiplexer redis = ConnectionMultiplexer.Connect(\"localhost\");\nIDatabase db = redis.GetDatabase();\n\nJsonCommands json = db.JSON();\nvar key = \"myKey\";\njson.Set(key, \"$\", new { Age = 35, Name = \"Alice\" });\n```\n\n----------------------------------------\n\nTITLE: Less Than Filtering - RedisJSON in C#\nDESCRIPTION: This C# snippet filters the `inventory` array in Redis for items where the `price` field is less than 100. The JSONPath expression `$.inventory[?(@.price<100)]` filters the array, returning only the items that satisfy the condition. The result will be a JSON array of items with a price less than 100.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[?(@.price<100)]\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Searching Indexed Records with NRedisStack in C#\nDESCRIPTION: This snippet searches the \"person-idx\" index for all records. The Query() object represents an empty query, which returns all indexed documents. The search is performed using the `FT().SearchAsync` method, retrieving all the indexed person records from Redis.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/CombinationModulesPipeline.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar getAllPersons = db.FT().SearchAsync(\"person-idx\", new Query());\n```\n\n----------------------------------------\n\nTITLE: Updating an Entire Object in RedisJSON (C#)\nDESCRIPTION: This snippet demonstrates updating an entire JSON object using the `JSON.SET` command in NRedisStack.  It first sets a JSON object and then overwrites it with a new object. It requires an existing Redis connection and the NRedisStack client library.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicJsonExamples.md#_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\njson.Set(\"ex3:1\", \"$\", new {field1 = \"val1\"});\njson.Set(\"ex3:1\", \"$\", new {foo = \"bar\"});\nConsole.WriteLine(json.Get(key: \"ex3:1\",\n    indent: \"\\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Regex Exact Filtering - RedisJSON in C#\nDESCRIPTION: This C# code filters the `inventory` array in Redis for items where the `description` field contains the exact term \"Blue\". The JSONPath `$.inventory[?(@.description =~ \"Blue\")]` uses a regular expression to perform this check. The resulting JSON array contains the matching items.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedJsonExamples.md#_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\nConsole.WriteLine(json.Get(key: \"warehouse:1\",\n    path: \"$.inventory[?(@.description =~ \\\"Blue\\\")]\",\n    indent: \"\t\",\n    newLine: \"\\n\"\n));\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Documents into Index\nDESCRIPTION: This loop inserts 10 JSON documents into the Redis database.  Each document has the key \"doc:\" + i and contains a JSON object with a \"name\" field set to \"foo\". The json.Set method is used to insert the JSON documents.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/ConvertSearchResultToJson.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nfor (int i = 0; i < 10; i++)\n{\n    json.Set(\"doc:\" + i, \"$\", \"{\\\"name\\\":\\\"foo\\\"}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a JSON Field in Pipeline using C#\nDESCRIPTION: This snippet demonstrates how to delete a specific field from a JSON object using `pipeline.Json.DelAsync`. It removes the 'nicknames' field from the 'person' JSON object.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineExample.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npipeline.Json.DelAsync(\"person\", \"$.nicknames\");\n```\n\n----------------------------------------\n\nTITLE: Searching & JSON Filtering (Example 2) - C#\nDESCRIPTION: This code searches for inventory items in Dallas that are for Women or Girls, and returns the corresponding inventory items.  JSON filtering is used to retrieve specific inventory items based on gender.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\nforeach (var doc in ft.Search(\"wh_idx\",\n                        new Query(\"@city:(Dallas)\")\n                            .ReturnFields(new FieldName(\"$.inventory[?(@.gender==\\\"Women\\\" || @.gender==\\\"Girls\\\")]\", \"result\"))\n                            .Dialect(3))\n                    .Documents.Select(x => x[\"result\"]))\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Result of Redisearch Geo Query\nDESCRIPTION: This JSON snippet represents the result of the geo search performed in Redisearch. It shows a document matching the query criteria, including fields like `id`, `gender`, `season`, `description`, `price`, `city`, and `coords`.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\"id\":46885,\"gender\":\"Boys\",\"season\":[\"Fall\"],\"description\":\"Ben 10 Boys Navy Blue Slippers\",\"price\":45.99,\"city\":\"Denver\",\"coords\":\"-104.991531, 39.742043\"}\n```\n\n----------------------------------------\n\nTITLE: Searching & JSON Filtering (Example 1) - C#\nDESCRIPTION: This code searches for inventory items in the Boston warehouse with a price greater than $50 and returns their IDs. It leverages JSON filtering within the RediSearch query.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\nforeach (var doc in ft.Search(\"wh_idx\",\n                        new Query(\"@city:Boston\")\n                            .ReturnFields(new FieldName(\"$.inventory[?(@.price>50)].id\", \"result\"))\n                            .Dialect(3))\n                    .Documents.Select(x => x[\"result\"]))\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Searching the Index (C#)\nDESCRIPTION: This C# code shows how to search the Redis index for documents containing the phrase 'hello world'. It executes the `FT.SEARCH` command with a query and limit parameters. It depends on NRedisStack and StackExchange.Redis NuGet packages.\nSOURCE: https://github.com/redis/nredisstack/blob/master/README.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// FT.SEARCH myIndex \"hello world\" LIMIT 0 10\nft.Search(\"myIndex\", new Query(\"hello world\").Limit(0, 10));\n```\n\n----------------------------------------\n\nTITLE: Setting up a Pipeline in C# for NRedisStack Operations\nDESCRIPTION: This snippet initializes a Redis database connection and creates a Pipeline object associated with that database. The Pipeline object is then used to queue multiple commands for efficient execution.  It is crucial for bundling multiple module operations.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/CombinationModulesPipeline.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar db = redis.GetDatabase();\nvar pipeline = new Pipeline(db);\n```\n\n----------------------------------------\n\nTITLE: Running functional tests using Docker\nDESCRIPTION: This command demonstrates how to run a Redis Stack server in a Docker container, which serves as a local environment for running functional tests for NRedisStack. The port 6379 is mapped to the host, and the redis/redis-stack-server:edge image is used.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6379:6379 -it redis/redis-stack-server:edge\n```\n\n----------------------------------------\n\nTITLE: Running tests against specific Redis host and port\nDESCRIPTION: This command shows how to run tests against a specific Redis server by setting the `REDIS` environment variable using the `--environment` flag in `dotnet test`. Replace `<redisServer:port>` with the actual Redis server address and port.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --environment=\"REDIS=<redisServer:port>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a RediSearch Index with GeoShape Field in C#\nDESCRIPTION: This C# code creates a RediSearch index with a GeoShape field named 'geom' using the FLAT coordinate system. The index name is stored in the 'index' variable. This index is necessary for storing and querying the geometric data.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nft.Create(index, new Schema().AddGeoShapeField(\"geom\", GeoShapeField.CoordinateSystem.FLAT));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server\nDESCRIPTION: This snippet demonstrates connecting to a Redis server using ConnectionMultiplexer and obtaining a database instance. It uses the `ConnectionMultiplexer.ConnectAsync` method to establish the connection and then retrieves the database instance using `redis.GetDatabase()`. This connection is essential for interacting with Redis.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/TransactionsExample.md#_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar redis = await ConnectionMultiplexer.ConnectAsync(\"localhost\");\nvar db = redis.GetDatabase();\n```\n\n----------------------------------------\n\nTITLE: Getting Database and Command References\nDESCRIPTION: This snippet retrieves references to the Redis database and the FT (search) and JSON commands. These references are obtained from the established Redis connection. The database reference is used for general Redis operations, while FT and JSON are used for search and JSON-specific commands.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/ConvertSearchResultToJson.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar db = redis.GetDatabase();\nvar ft = db.FT();\nvar json = db.JSON();\n```\n\n----------------------------------------\n\nTITLE: Searching with Logical AND\nDESCRIPTION: This snippet demonstrates how to combine multiple search criteria using a logical AND. It searches for documents where the 'price' is between 40 and 100 and the 'description' contains the word 'Blue'.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@price:[40, 100] @description:Blue\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema for Indexing C#\nDESCRIPTION: This snippet defines the schema for the Redis Stack index. It specifies that 'first' and 'last' fields should be treated as text fields, and 'age' as a numeric field. This schema is later used when creating the index.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = new Schema().AddTextField(\"first\").AddTextField(\"last\").AddNumericField(\"age\");\n```\n\n----------------------------------------\n\nTITLE: Book Data Set - JSON\nDESCRIPTION: This dataset represents a collection of books, each with a title, publication year, and price.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"System Design Interview\",\n    \"year\": 2020,\n    \"price\": 35.99\n},\n{\n    \"title\": \"The Age of AI: And Our Human Future\",\n    \"year\": 2021,\n    \"price\": 13.99\n},\n{\n    \"title\": \"The Art of Doing Science and Engineering: Learning to Learn\",\n    \"year\": 2020,\n    \"price\": 20.99\n},\n{\n    \"title\": \"Superintelligence: Path, Dangers, Stategies\",\n    \"year\": 2016,\n    \"price\": 14.36\n}\n```\n\n----------------------------------------\n\nTITLE: Searching by Single Term\nDESCRIPTION: This snippet demonstrates how to search for documents containing a specific word ('Slippers') in the 'description' field.  It constructs a RediSearch query targeting the 'description' field and filters by the specified term.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@description:Slippers\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Documents\nDESCRIPTION: This snippet demonstrates how to retrieve all documents from the 'idx1' index. It uses a `Query` object with a wildcard '*' to match all documents and then prints each document in JSON format.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"*\")).ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Logical OR\nDESCRIPTION: This snippet demonstrates how to search for documents that match either of two criteria using a logical OR. It searches for documents where the 'gender' is 'Women' or the 'city' is 'Boston'.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"(@gender:{Women})|(@city:Boston)\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Redis Pipeline in C# with NRedisStack\nDESCRIPTION: This snippet executes the previously queued commands in the pipeline. This sends all commands to Redis in a single batch, improving performance.  This call commits all the JSON data insertion and the index creation to redis.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/CombinationModulesPipeline.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npipeline.Execute();\n```\n\n----------------------------------------\n\nTITLE: Importing NRedisStack Modules\nDESCRIPTION: This snippet imports necessary modules from NRedisStack library for Redis interaction, search functionality, and enum literals. It sets the stage for using RediSearch features within a C# application.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing StackExchange.Redis;\nusing NRedisStack;\nusing NRedisStack.RedisStackCommands;\nusing NRedisStack.Search;\nusing NRedisStack.Search.Literals.Enums;\n```\n\n----------------------------------------\n\nTITLE: Searching Index without Filters C#\nDESCRIPTION: This snippet performs a search on the 'example_index' without any specific filters, returning all matching hashes based on the index definition. A new `Query()` object is created without any parameters.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar noFilters = ft.Search(\"example_index\", new Query());\n```\n\n----------------------------------------\n\nTITLE: Searching Index with Exact Match Filter C#\nDESCRIPTION: This snippet searches the 'example_index' for hashes where the 'first' name is exactly 'Pat'. It uses the query \"@first:Pat\" to find matching hashes.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar namedPat = ft.Search(\"example_index\", new Query(\"@first:Pat\"));\n```\n\n----------------------------------------\n\nTITLE: Aggregation - Count (C#)\nDESCRIPTION: This snippet demonstrates performing an aggregation to count the number of books per year using the NRedisStack library.  It groups the results by the 'year' field and uses the `Count` reducer. The result is then iterated over and printed to the console.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nvar request = new AggregationRequest(\"*\").GroupBy(\"@year\", Reducers.Count().As(\"count\"));\nvar result = ft.Aggregate(\"book_idx\", request);\nfor (var i=0; i<result.TotalResults; i++)\n{\n    var row = result.GetRow(i);\n    Console.WriteLine($\"{row[\"year\"]}: {row[\"count\"]}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Negation\nDESCRIPTION: This snippet demonstrates how to search for documents that do not contain a specific word ('Shirt') in the 'description' field. It uses the negation operator '-' in the RediSearch query.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"-(@description:Shirt)\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Fuzzy Matching\nDESCRIPTION: This snippet demonstrates how to search for documents where a word in the 'description' field is similar to a given word ('wavy') using fuzzy matching (Levenshtein distance of 1).\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/BasicQueryOperations.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nforeach (var doc in ft.Search(\"idx1\", new Query(\"@description:%wavy%\"))\n                    .ToJson())\n{\n    Console.WriteLine(doc);\n}\n```\n\n----------------------------------------\n\nTITLE: Create TimeSeries Labels C#\nDESCRIPTION: Creates TimeSeriesLabel objects and associates them with lists. These labels are used to provide metadata for the TimeSeries data.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTimeSeriesLabel label1 = new TimeSeriesLabel(\"temp\", \"TLV\");\nTimeSeriesLabel label2 = new TimeSeriesLabel(\"temp\", \"JLM\");\nvar labels1 = new List<TimeSeriesLabel> { label1 };\nvar labels2 = new List<TimeSeriesLabel> { label2 };\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Response from Pipeline using C#\nDESCRIPTION: This snippet retrieves the JSON object associated with the key 'person' using `pipeline.Json.GetAsync`. The result of this operation is stored in the `getResponse` variable, which is later accessed after the pipeline is executed.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineExample.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar getResponse = pipeline.Json.GetAsync(\"person\");\n```\n\n----------------------------------------\n\nTITLE: Searching Index with Prefix Filter C#\nDESCRIPTION: This snippet searches the 'example_index' for hashes where the 'first' name starts with 'Jo'.  It uses the query \"@first:Jo*\" to achieve this.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/HsetAndSearch.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar startWithJo = ft.Search(\"example_index\", new Query(\"@first:Jo*\"));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server\nDESCRIPTION: This code snippet establishes a connection to the Redis server using ConnectionMultiplexer from the StackExchange.Redis library. It requires the StackExchange.Redis NuGet package. The connection string \"localhost\" specifies the Redis server address.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/ConvertSearchResultToJson.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar redis = ConnectionMultiplexer.Connect(\"localhost\");\n```\n\n----------------------------------------\n\nTITLE: Get TimeSeries Commands Reference C#\nDESCRIPTION: Obtains a reference to the TimeSeries commands using db.TS(). This is necessary to perform TimeSeries-specific operations.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar ts = db.TS();\n```\n\n----------------------------------------\n\nTITLE: Interpreting Search Result from Redis GeoShape Query in C#\nDESCRIPTION: This C# code extracts the geometry data from the search result, converts it to string, and uses a WKTReader to parse the string representation of the geometry back into a Geometry object. This allows further manipulation and analysis of the retrieved geometric data.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nreader.Read(res.Documents[0][\"geom\"].ToString());\n```\n\n----------------------------------------\n\nTITLE: Incrementing Numerical Value in JSON using C#\nDESCRIPTION: This snippet demonstrates how to increment a numerical value within a JSON object using `pipeline.Json.NumIncrbyAsync`.  It increments the value of the 'age' field within the 'person' JSON object by 2.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineExample.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npipeline.Json.NumIncrbyAsync(\"person\", \"$.age\", 2);\n```\n\n----------------------------------------\n\nTITLE: Creating Search Index Parameters with NRedisStack in C#\nDESCRIPTION: This snippet sets up the parameters for creating a Redis Search index. It specifies that the index should operate on JSON data and only index keys prefixed with \"person:\". The `FTCreateParams` builder allows configuring various index options.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/CombinationModulesPipeline.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar parameters = FTCreateParams.CreateParams().On(IndexDataType.JSON).Prefix(\"person:\");\n```\n\n----------------------------------------\n\nTITLE: JSON Filtering Search Result 2 - JSON\nDESCRIPTION: This is the expected result after performing the second search and filtering JSON documents.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[{\"id\":51919,\"gender\":\"Women\",\"season\":[\"Summer\"],\"description\":\"Nyk Black Horado Handbag\",\"price\":52.49},{\"id\":37561,\"gender\":\"Girls\",\"season\":[\"Spring\",\"Summer\"],\"description\":\"Madagascar3 Infant Pink Snapsuit Romper\",\"price\":23.95}]\n```\n\n----------------------------------------\n\nTITLE: Executing the Redis Pipeline in C#\nDESCRIPTION: This snippet executes all the commands added to the pipeline using `pipeline.Execute()`. This sends all the batched commands to the Redis server in a single request, improving performance.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineExample.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npipeline.Execute();\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Search Index using Pipeline in C# with NRedisStack\nDESCRIPTION: This snippet creates a Redis Search index named \"person-idx\" using the defined parameters and schema within a pipeline. This index allows searching the JSON data stored with the \"person:\" prefix. The `Ft.CreateAsync` function handles the index creation.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/CombinationModulesPipeline.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npipeline.Ft.CreateAsync(\"person-idx\", parameters, schema);\n```\n\n----------------------------------------\n\nTITLE: Vector Search Result - Bash\nDESCRIPTION: This is the expected result after performing the Vector Search.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/AdvancedQueryOperations.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nid: vec:2, score: 2\nid: vec:3, score: 2\n```\n\n----------------------------------------\n\nTITLE: Filtering tests using dotnet test\nDESCRIPTION: This command demonstrates how to run a specific test or set of tests using the `--filter` flag with the `dotnet test` command. Replace `<YourTestName>` with the actual name of the test to be executed.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter <YourTestName>\n```\n\n----------------------------------------\n\nTITLE: Example: Running tests against Redis at 127.17.0.1:6379\nDESCRIPTION: This is an example demonstrating how to run tests against a Redis server running at `127.17.0.1` on port `6379` using the `--environment` flag in `dotnet test`.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --environment=\"REDIS=127.17.0.1:6379\"\n```\n\n----------------------------------------\n\nTITLE: Running tests with specific Redis version\nDESCRIPTION: This command sets both the Redis server address/port and the Redis server version via environment variables for targeted testing, using the `--environment` flag in `dotnet test`. Replace `<redisServer:port>` and `<redisServerVersion>` with appropriate values.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --environment=\"REDIS=<redisServer:port>\" --environment=\"REDIS_VERSION=<redisServerVersion>\"\n```\n\n----------------------------------------\n\nTITLE: Example: Running tests with Redis version 7.4.0\nDESCRIPTION: Example setting both the Redis address and version. This runs tests against the server at `127.17.0.1:6379` with the server version specified as `7.4.0`.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --environment=\"REDIS=127.17.0.1:6379\" --environment=\"REDIS_VERSION=7.4.0\"\n```\n\n----------------------------------------\n\nTITLE: Running tests against OSS Cluster\nDESCRIPTION: This command runs tests against an OSS Cluster. It defines the Redis cluster's host, port and number of nodes using environment variables.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --environment \"REDIS_CLUSTER=<redisServer:port>\" --environment \"NUM_REDIS_CLUSTER_NODES=<number of nodes in the cluster>\"\n```\n\n----------------------------------------\n\nTITLE: Example: Running tests against OSS Cluster with 6 nodes\nDESCRIPTION: Example command setting environment variables to run tests against an OSS Cluster with the server running on `127.0.0.1:16379` and having 6 nodes.\nSOURCE: https://github.com/redis/nredisstack/blob/master/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --environment \"REDIS_CLUSTER=127.0.0.1:16379\" --environment \"NUM_REDIS_CLUSTER_NODES=6\"\n```\n\n----------------------------------------\n\nTITLE: Get TimeSeries Data with Labels Async C#\nDESCRIPTION: Asynchronously retrieves TimeSeries data using MGetAsync, filtering by the \"temp=JLM\" label. It also specifies that only the \"location\" label should be returned using the selectedLabels parameter.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineWithAsync.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar respons = await ts.MGetAsync(new List<string> { \"temp=JLM\" }, selectedLabels: new List<string> { \"location\" });\n```\n\n----------------------------------------\n\nTITLE: Clearing a JSON Field in Pipeline using C#\nDESCRIPTION: This snippet shows how to clear a specific field from a JSON object using `pipeline.Json.ClearAsync`. It removes the 'nicknames' field from the 'person' JSON object.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/PipelineExample.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npipeline.Json.ClearAsync(\"person\", \"$.nicknames\");\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Modules in C#\nDESCRIPTION: This C# code imports the required modules for connecting to Redis, using RedisStack commands, performing search operations, working with geometric objects, and serializing/deserializing geometry data using the NetTopologySuite library. These are essential for interacting with Redis and performing spatial queries.\nSOURCE: https://github.com/redis/nredisstack/blob/master/Examples/GeoShapeQueryExample.md#_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nusing StackExchange.Redis;\nusing NRedisStack.RedisStackCommands;\nusing NRedisStack.Search;\nusing NetTopologySuite.Geometries;\nusing NetTopologySuite.IO;\n```"
  }
]