[
  {
    "owner": "celery",
    "repo": "django-celery-beat",
    "content": "TITLE: Creating Periodic Task with Arguments in Django Celery Beat\nDESCRIPTION: This snippet shows how to create a periodic task with arguments and keyword arguments. It demonstrates JSON serialization for args and kwargs, and setting an expiry time for the task.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/introduction.txt#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n>>> from datetime import datetime, timedelta\n\n>>> PeriodicTask.objects.create(\n...     interval=schedule,                  # we created this above.\n...     name='Importing contacts',          # simply describes this periodic task.\n...     task='proj.tasks.import_contacts',  # name of task.\n...     args=json.dumps(['arg1', 'arg2']),\n...     kwargs=json.dumps({\n...        'be_careful': True,\n...     }),\n...     expires=datetime.utcnow() + timedelta(seconds=30)\n... )\n```\n\n----------------------------------------\n\nTITLE: Creating Periodic Task with Arguments and Expiry Time\nDESCRIPTION: Example showing how to create a periodic task with arguments, keyword arguments, and an expiry time. JSON serialization is required for the arguments.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> import json\n>>> from datetime import datetime, timedelta\n\n>>> PeriodicTask.objects.create(\n...     interval=schedule,                  # we created this above.\n...     name='Importing contacts',          # simply describes this periodic task.\n...     task='proj.tasks.import_contacts',  # name of task.\n...     args=json.dumps(['arg1', 'arg2']),\n...     kwargs=json.dumps({\n...        'be_careful': True,\n...     }),\n...     expires=datetime.utcnow() + timedelta(seconds=30)\n... )\n```\n\n----------------------------------------\n\nTITLE: Creating Crontab-based Periodic Task in Django Celery Beat\nDESCRIPTION: This example shows how to create a crontab-based periodic task. It first creates a CrontabSchedule object with specific time parameters, then uses it to create a PeriodicTask.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/introduction.txt#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from django_celery_beat.models import CrontabSchedule, PeriodicTask\n>>> schedule, _ = CrontabSchedule.objects.get_or_create(\n...     minute='30',\n...     hour='*',\n...     day_of_week='*',\n...     day_of_month='*',\n...     month_of_year='*',\n... )\n\n>>> PeriodicTask.objects.create(\n...     crontab=schedule,\n...     name='Importing contacts',\n...     task='proj.tasks.import_contacts',\n... )\n```\n\n----------------------------------------\n\nTITLE: Creating Periodic Task with Crontab Schedule\nDESCRIPTION: Code showing how to create a periodic task using a previously defined crontab schedule. Uses the same approach as interval-based tasks but with 'crontab=schedule'.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n>>> PeriodicTask.objects.create(\n...     crontab=schedule,\n...     name='Importing contacts',\n...     task='proj.tasks.import_contacts',\n... )\n```\n\n----------------------------------------\n\nTITLE: Creating Interval-based Periodic Task in Django Celery Beat\nDESCRIPTION: Example demonstrating how to create an interval-based periodic task. First creates an IntervalSchedule object that executes every 10 seconds, then creates a PeriodicTask that uses this schedule.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django_celery_beat.models import PeriodicTask, IntervalSchedule\n\n# executes every 10 seconds.\n>>> schedule, created = IntervalSchedule.objects.get_or_create(\n...     every=10,\n...     period=IntervalSchedule.SECONDS,\n... )\n```\n\n----------------------------------------\n\nTITLE: Creating Interval-based Periodic Task in Django Celery Beat\nDESCRIPTION: This example demonstrates how to create an interval-based periodic task using the django-celery-beat models. It first creates an IntervalSchedule object and then uses it to create a PeriodicTask.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/introduction.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from django_celery_beat.models import PeriodicTask, IntervalSchedule\n\n>>> schedule, created = IntervalSchedule.objects.get_or_create(\n...     every=10,\n...     period=IntervalSchedule.SECONDS,\n... )\n\n>>> PeriodicTask.objects.create(\n...     interval=schedule,                  # we created this above.\n...     name='Importing contacts',          # simply describes this periodic task.\n...     task='proj.tasks.import_contacts',  # name of task.\n... )\n```\n\n----------------------------------------\n\nTITLE: Creating a Periodic Task with IntervalSchedule\nDESCRIPTION: Code that creates a periodic task entry using a previously defined interval schedule object. This defines a task that will run at the specified interval.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> PeriodicTask.objects.create(\n...     interval=schedule,                  # we created this above.\n...     name='Importing contacts',          # simply describes this periodic task.\n...     task='proj.tasks.import_contacts',  # name of task.\n... )\n```\n\n----------------------------------------\n\nTITLE: Creating Crontab-based Schedule in Django Celery Beat\nDESCRIPTION: Example demonstrating how to create a crontab schedule equivalent to '30 * * * *' (execute 30 minutes past every hour) with a specific timezone.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django_celery_beat.models import CrontabSchedule, PeriodicTask\n>>> schedule, _ = CrontabSchedule.objects.get_or_create(\n...     minute='30',\n...     hour='*',\n...     day_of_week='*',\n...     day_of_month='*',\n...     month_of_year='*',\n...     timezone=zoneinfo.ZoneInfo('Canada/Pacific')\n... )\n```\n\n----------------------------------------\n\nTITLE: Disabling a Periodic Task in Django Celery Beat\nDESCRIPTION: This snippet demonstrates how to temporarily disable a periodic task by setting the 'enabled' flag to False and saving the change.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/introduction.txt#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> periodic_task.enabled = False\n>>> periodic_task.save()\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling a Periodic Task\nDESCRIPTION: Code showing how to temporarily disable a periodic task by setting the 'enabled' flag to False and saving the task.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> periodic_task.enabled = False\n>>> periodic_task.save()\n```\n\n----------------------------------------\n\nTITLE: Resetting Periodic Task Schedule After Time Zone Change\nDESCRIPTION: Code to reset the last run time for all periodic tasks after changing the Django TIME_ZONE setting. This is necessary because the periodic task schedule will still be based on the old timezone.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django_celery_beat.models import PeriodicTask, PeriodicTasks\n>>> PeriodicTask.objects.all().update(last_run_at=None)\n>>> PeriodicTasks.update_changed()\n```\n\n----------------------------------------\n\nTITLE: Resetting Periodic Task Schedule after Timezone Change in Python\nDESCRIPTION: This snippet demonstrates how to reset the 'last run time' for all periodic tasks after changing the Django TIME_ZONE setting. It updates all PeriodicTask objects and triggers a reload of the schedule.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/introduction.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django_celery_beat.models import PeriodicTask, PeriodicTasks\n>>> PeriodicTask.objects.update(last_run_at=None)\n>>> PeriodicTasks.update_changed()\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Periodic Tasks Counter in Python\nDESCRIPTION: This code snippet shows how to manually update the counter in the PeriodicTasks model after bulk updates to periodic tasks. This ensures the celery beat service reloads the schedule from the database.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/introduction.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django_celery_beat.models import PeriodicTasks\n>>> PeriodicTasks.changed()\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Periodic Tasks Counter\nDESCRIPTION: Code to manually update the PeriodicTasks counter after bulk updates to periodic tasks. This tells the celery beat service to reload the schedule from the database.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django_celery_beat.models import PeriodicTasks\n>>> PeriodicTasks.update_changed()\n```\n\n----------------------------------------\n\nTITLE: Adding Django Celery Beat to Django Settings\nDESCRIPTION: Code showing how to add 'django_celery_beat' to the INSTALLED_APPS list in Django's settings module after installation.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    'django_celery_beat',\n]\n```\n\n----------------------------------------\n\nTITLE: Installing django-celery-beat using pip\nDESCRIPTION: This snippet shows how to install django-celery-beat using pip. It upgrades the package to the latest version available on PyPI.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/installation.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install --upgrade django-celery-beat\n```\n\n----------------------------------------\n\nTITLE: Installing the development version of django-celery-beat using pip\nDESCRIPTION: This snippet demonstrates how to install the latest snapshot of django-celery-beat directly from the GitHub repository using pip.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/installation.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install https://github.com/celery/django-celery-beat/zipball/master#egg=django-celery-beat\n```\n\n----------------------------------------\n\nTITLE: Installing django-celery-beat from source\nDESCRIPTION: This snippet shows the process of downloading the source code, setting up a virtual environment, and installing django-celery-beat from the source distribution.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/installation.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m venv .venv\n$ source .venv/bin/activate\n$ pip install --upgrade build pip\n$ tar xvfz django-celery-beat-0.0.0.tar.gz\n$ cd django-celery-beat-0.0.0\n$ python -m build\n$ pip install .\n```\n\n----------------------------------------\n\nTITLE: Installing the current default branch of django-celery-beat\nDESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the current default branch of django-celery-beat directly from the GitHub repository.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/includes/installation.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m venv .venv\n$ source .venv/bin/activate\n$ pip install --upgrade pip\n$ pip install git+https://github.com/celery/django-celery-beat.git\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Django Celery Beat\nDESCRIPTION: Specifies required Python packages and their version constraints for django-celery-beat functionality. Includes conditional dependencies for Python version compatibility and essential packages for handling timezones and cron operations.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/requirements/default.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncelery>=5.2.3,<6.0\nimportlib-metadata<5.0; python_version<\"3.8\" # TODO: remove this when celery >= 5.3.0\ndjango-timezone-field>=5.0\nbackports.zoneinfo; python_version<\"3.9\"\ntzdata\npython-crontab>=2.3.4\ncron-descriptor>=1.2.32\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Version Requirement for django-celery-beat\nDESCRIPTION: This snippet defines the Django version requirement for the django-celery-beat project. It specifies that the project is compatible with Django versions from 2.2 up to, but not including, 6.0. This ensures compatibility with a wide range of Django versions while setting an upper limit to prevent potential issues with future major releases.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/requirements/runtime.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nDjango>=2.2,<6.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Version Requirement for django-celery-beat\nDESCRIPTION: This snippet defines the Django version compatibility for the django-celery-beat project. It specifies that the project is compatible with Django versions 3.2 or higher, but lower than 6.0.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/requirements/test-django.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nDjango>=3.2,<6.0\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies with Python Version Conditionals\nDESCRIPTION: Lists required Python packages with version constraints. Includes base dependencies (ephem, pytest-timeout) and conditional dependencies based on Python version, particularly differentiating between Python 3.8 and Python 3.9+ requirements.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/requirements/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Base dependencies (common for all Python versions)\nephem\npytest-timeout\n\n# Conditional dependencies\npytest>=6.2.5,<8.0; python_version < '3.9'  # Python 3.8 only\npytest>=6.2.5,<9.0; python_version >= '3.9'  # Python 3.9+ only\npytest-django>=4.5.2,<4.6.0; python_version < '3.9'  # Python 3.8 only\npytest-django>=4.5.2,<5.0; python_version >= '3.9'    # Python 3.9+ only\nbackports.zoneinfo; python_version < '3.9'  # Python 3.8 only\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Django Celery Beat\nDESCRIPTION: This snippet lists the required dependencies for the Django Celery Beat project. It includes Django version constraints, Sphinx extensions for Django documentation, and development versions of Celery-related packages from GitHub.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/requirements/docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDjango>=2.2,<6.0\nsphinxcontrib-django\nhttps://github.com/celery/sphinx_celery/archive/master.zip\nhttps://github.com/celery/kombu/zipball/main#egg=kombu\nhttps://github.com/celery/celery/zipball/main#egg=celery\n-r default.txt\n```\n\n----------------------------------------\n\nTITLE: Documenting Django Celery Beat Models Module in RST\nDESCRIPTION: RestructuredText documentation snippet that sets up autodocumentation for the django_celery_beat.models module. Includes section headers, table of contents, and module reference directives.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.models.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=====================================================\n ``django_celery_beat.models``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: django_celery_beat.models\n\n.. automodule:: django_celery_beat.models\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Documentation for django_celery_beat.schedulers\nDESCRIPTION: This snippet sets up the structure for auto-generating documentation for the django_celery_beat.schedulers module. It includes directives for table of contents, current module, and automodule with options for including all members and undocumented members.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.schedulers.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n=====================================================\n ``django_celery_beat.schedulers``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: django_celery_beat.schedulers\n\n.. automodule:: django_celery_beat.schedulers\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for django_celery_beat.clockedschedule\nDESCRIPTION: ReStructuredText documentation template defining the structure for the clockedschedule module documentation. It includes table of contents, module reference and member documentation.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.clockedschedule.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================================================\n ``django_celery_beat.clockedschedule``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: django_celery_beat.clockedschedule\n\n.. automodule:: django_celery_beat.clockedschedule\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Module Documentation Directives\nDESCRIPTION: Sphinx documentation configuration directives for generating API documentation of the django_celery_beat.tzcrontab module with all members and undocumented members included.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.tzcrontab.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. contents::\n    :local:\n.. currentmodule:: django_celery_beat.tzcrontab\n\n.. automodule:: django_celery_beat.tzcrontab\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Importing Django Celery Beat Signals Module - Python\nDESCRIPTION: Example showing how to import and reference the django_celery_beat.signals module. This module contains signal definitions and handlers for Django Celery Beat functionality.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.signals.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django_celery_beat import signals\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Django Celery Beat Utils\nDESCRIPTION: ReStructuredText documentation configuration for the django_celery_beat.utils module. Sets up automodule documentation with local table of contents and full member documentation.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.utils.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================================================\n ``django_celery_beat.utils``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: django_celery_beat.utils\n\n.. automodule:: django_celery_beat.utils\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Declaration for Django Celery Beat Querysets\nDESCRIPTION: Sphinx documentation configuration for the django_celery_beat.querysets module. Sets up the table of contents and module documentation directives.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.querysets.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. contents::\n    :local:\n.. currentmodule:: django_celery_beat.querysets\n\n.. automodule:: django_celery_beat.querysets\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Documentation Section\nDESCRIPTION: Sets up documentation structure with table of contents and module references for django_celery_beat package.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n=====================================================\n ``django_celery_beat``\n=====================================================\n\n.. contents::\n    :local:\n.. currentmodule:: django_celery_beat\n\n.. automodule:: django_celery_beat\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Importing Django Celery Beat Admin Module\nDESCRIPTION: Module import statement for django_celery_beat.admin which contains admin interface configurations for periodic tasks and schedules.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/django-celery-beat.admin.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: django_celery_beat.admin\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents for Django Celery Beat API\nDESCRIPTION: RST markup defining the API reference documentation structure with a table of contents containing links to different components of Django Celery Beat\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/reference/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _apiref:\n\n===============\n API Reference\n===============\n\n:Release: |version|\n:Date: |today|\n\n.. toctree::\n    :maxdepth: 1\n\n    django-celery-beat\n    django-celery-beat.models\n    django-celery-beat.tzcrontab\n    django-celery-beat.querysets\n    django-celery-beat.schedulers\n    django-celery-beat.admin\n    django-celery-beat.utils\n    django-celery-beat.validators\n    django-celery-beat.clockedschedule\n    django-celery-beat.signals\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Badges in reStructuredText\nDESCRIPTION: Sets up badges for wheel support, Python versions, and Python implementations using reStructuredText directives. Each badge is linked to the package's PyPI page.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |wheel| image:: https://img.shields.io/pypi/wheel/django-celery-beat.svg#foo\n    :alt: django-celery-beat can be installed via wheel\n    :target: http://pypi.python.org/pypi/django-celery-beat/\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/django-celery-beat.svg#foo\n    :alt: Supported Python versions.\n    :target: http://pypi.python.org/pypi/django-celery-beat/\n\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/django-celery-beat.svg#foo\n    :alt: Support Python implementations.\n    :target: http://pypi.python.org/pypi/django-celery-beat/\n```\n\n----------------------------------------\n\nTITLE: Requirements List for Django Celery Beat Development\nDESCRIPTION: Lists required Python packages for development including build tools, code quality checkers, testing frameworks, and documentation utilities. Specifies minimum version requirements for each package to ensure compatibility.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/requirements/pkgutils.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetuptools>=40.8.0\nwheel>=0.33.1\nflake8>=3.8.3\ntox>=2.3.1\nsphinx2rst>=1.0\nbumpversion\npydocstyle\n```\n\n----------------------------------------\n\nTITLE: Defining Glossary Section in reStructuredText\nDESCRIPTION: This snippet sets up a glossary section in reStructuredText format. It uses the 'glossary' directive with the 'sorted' option to create an alphabetically sorted list of terms and their descriptions.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/glossary.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. glossary::\n    :sorted:\n\n    term\n        Description of term\n```\n\n----------------------------------------\n\nTITLE: Including Changelog in RestructuredText Document\nDESCRIPTION: This directive includes the content of the Changelog file from the parent directory into the current document. It's commonly used in documentation to maintain a single source of truth for version history.\nSOURCE: https://github.com/celery/django-celery-beat/blob/main/docs/changelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../Changelog\n```"
  }
]