[
  {
    "owner": "block",
    "repo": "goose",
    "content": "TITLE: Installing Goose CLI via Curl Command\nDESCRIPTION: A shell command to download and install the latest version of Goose CLI using curl. The script fetches the installation script from the Goose GitHub repository and executes it.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Creating Global Goosehints File for AI Assistant Configuration\nDESCRIPTION: This snippet demonstrates the content of a global .goosehints file. It includes instructions for using TypeScript in Next.js projects, following Google Style Guide for Python, running unit tests before commits, and preferring functional programming patterns.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/using-goosehints.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAlways use TypeScript for new Next.js projects.\n\nFollow the [Google Style Guide](https://google.github.io/styleguide/pyguide.html) for Python code.\n\nRun unit tests before committing any changes.\n\nPrefer functional programming patterns where applicable.\n```\n\n----------------------------------------\n\nTITLE: Running Goose CLI Session\nDESCRIPTION: Command to start a new Goose CLI session from the terminal.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Installing Goose CLI on MacOS\nDESCRIPTION: Command to install the latest version of Goose CLI on MacOS using curl. Includes option for non-interactive installation by disabling CONFIGURE flag.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh | bash\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh | CONFIGURE=false bash\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Server for Wikipedia Article Reading in Python\nDESCRIPTION: Main server implementation with a tool for reading Wikipedia articles and converting them to Markdown. Uses the FastMCP class from the MCP Python SDK to register the tool and handle errors.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom requests.exceptions import RequestException\nfrom bs4 import BeautifulSoup\nfrom html2text import html2text\n\nfrom mcp.server.fastmcp import FastMCP\nfrom mcp.shared.exceptions import McpError\nfrom mcp.types import ErrorData, INTERNAL_ERROR, INVALID_PARAMS\n\nmcp = FastMCP(\"wiki\")\n\n@mcp.tool()\ndef read_wikipedia_article(url: str) -> str:\n    \"\"\"\n    Fetch a Wikipedia article at the provided URL, parse its main content,\n    convert it to Markdown, and return the resulting text.\n\n    Usage:\n        read_wikipedia_article(\"https://en.wikipedia.org/wiki/Python_(programming_language)\")\n    \"\"\"\n    try:\n        # Validate input\n        if not url.startswith(\"http\"):\n            raise ValueError(\"URL must start with http or https.\")\n\n        response = requests.get(url, timeout=10)\n        if response.status_code != 200:\n            raise McpError(\n                ErrorData(\n                    INTERNAL_ERROR,\n                    f\"Failed to retrieve the article. HTTP status code: {response.status_code}\"\n                )\n            )\n\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        content_div = soup.find(\"div\", {\"id\": \"mw-content-text\"})\n        if not content_div:\n            raise McpError(\n                ErrorData(\n                    INVALID_PARAMS,\n                    \"Could not find the main content on the provided Wikipedia URL.\"\n                )\n            )\n\n        # Convert to Markdown\n        markdown_text = html2text(str(content_div))\n        return markdown_text\n\n    except ValueError as e:\n        raise McpError(ErrorData(INVALID_PARAMS, str(e))) from e\n    except RequestException as e:\n        raise McpError(ErrorData(INTERNAL_ERROR, f\"Request error: {str(e)}\")) from e\n    except Exception as e:\n        raise McpError(ErrorData(INTERNAL_ERROR, f\"Unexpected error: {str(e)}\")) from e\n```\n\n----------------------------------------\n\nTITLE: Installing WSL for Windows Goose Installation\nDESCRIPTION: Commands for setting up Windows Subsystem for Linux (WSL) and installing Goose on Windows, including optional bzip2 installation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwsl --install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh | bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install bzip2 -y\n```\n\n----------------------------------------\n\nTITLE: Sample Prompt for Creating a Tic-Tac-Toe Game\nDESCRIPTION: An example prompt to instruct Goose to create an interactive browser-based tic-tac-toe game in JavaScript. The prompt demonstrates the natural language approach to asking Goose to perform development tasks.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncreate an interactive browser-based tic-tac-toe game in javascript where a player competes against a bot\n```\n\n----------------------------------------\n\nTITLE: Basic Help Command Usage\nDESCRIPTION: Displays the help menu for Goose CLI\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-cli-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoose --help\n```\n\n----------------------------------------\n\nTITLE: Resuming a Previous Goose Session\nDESCRIPTION: A shell command to resume the most recent Goose session. This is useful after configuring settings or installing extensions to continue your work where you left off.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngoose session -r\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Tool in TypeScript\nDESCRIPTION: TypeScript code for implementing an MCP tool using the server.tool method. It defines a tool with a name, description, parameter schema, and an async function to handle tool calls and return processed data.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nserver.tool(\n  \"example-tool\",\n  \"example description for tool\",\n  { param: z.string() },\n  async ({ param }) => ({\n    content: [{ type: \"text\", text: `Processed ${param}` }],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Goose CLI using update command\nDESCRIPTION: This command updates the Goose CLI to the latest version. It's the simplest way to update Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/updating-goose.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose update\n```\n\n----------------------------------------\n\nTITLE: Expected CLI Help Output\nDESCRIPTION: The expected output when running the mcp-wiki --help command. Shows the usage instructions and command-line options for the MCP Wiki CLI.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n❯ mcp-wiki --help\nusage: mcp-wiki [-h]\n\nGives you the ability to read Wikipedia articles and convert them to Markdown.\n\noptions:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Starting a Goose Session from CLI\nDESCRIPTION: A shell command to initiate a new Goose session from the command line. This command should be run from within the directory where you want Goose to work.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Running Goose with Built-in Extensions\nDESCRIPTION: Demonstrates how to run Goose with specific built-in extensions. This example uses the developer and computercontroller extensions.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngoose run --with-builtin \"developer,computercontroller\" -t \"your instructions\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Resource in TypeScript\nDESCRIPTION: TypeScript code for implementing an MCP resource using the server.resource method. It defines a resource template and an async function to handle resource requests, returning formatted data.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nserver.resource(\n  \"example\",\n  new ResourceTemplate(\"example://{param}\", { list: undefined }),\n  async (uri, { param }) => ({\n    contents: [\n      {\n        uri: uri.href,\n        text: `Data for ${param}`,\n      },\n    ],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Running Goose with Text Instruction\nDESCRIPTION: Demonstrates how to use the Goose CLI 'run' command with a text instruction passed directly in the command line. This is useful for quick, one-off commands that don't require an interactive session.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoose run -t \"your instructions here\"\n```\n\n----------------------------------------\n\nTITLE: Starting Session with Built-in Extensions\nDESCRIPTION: Commands to start a Goose session with built-in extensions. Shows both single and multiple extension syntax.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-builtin \"{extension_id}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-builtin \"developer,computercontroller\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-builtin developer --with-builtin computercontroller\n```\n\n----------------------------------------\n\nTITLE: Adding Logging for Debugging in Python\nDESCRIPTION: Python code snippet demonstrating how to add file-based logging to an MCP extension for debugging purposes. It sets up a logger and shows how to log debug and error information in a tool implementation.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.basicConfig(\n    filename='mcp_extension.log',\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n@mcp.tool()\ndef example_tool(param: str) -> str:\n    logging.debug(f\"example_tool called with param: {param}\")\n    try:\n        result = f\"Processed {param}\"\n        logging.debug(f\"example_tool succeeded: {result}\")\n        return result\n    except Exception as e:\n        logging.error(f\"example_tool failed: {str(e)}\", exc_info=True)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Resuming the Latest Goose Session via CLI\nDESCRIPTION: Command to resume the most recent Goose session. This allows you to continue from where you left off previously.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/managing-goose-sessions.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose session -r\n```\n\n----------------------------------------\n\nTITLE: Installing Goose on Linux\nDESCRIPTION: Commands for installing Goose CLI on Linux systems using curl, with option for non-interactive installation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh | bash\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh | CONFIGURE=false bash\n```\n\n----------------------------------------\n\nTITLE: Running Goose with Standard Input\nDESCRIPTION: Demonstrates how to pass instructions to Goose using standard input. This method is useful for piping commands from other tools or scripts into Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho \"What is 2+2?\" | goose run -i -\n```\n\n----------------------------------------\n\nTITLE: Resuming a Specific Goose Session via CLI\nDESCRIPTION: Command to resume a named Goose session. This allows you to return to a specific conversation context.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/managing-goose-sessions.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngoose session -r --name <name>\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Trait in Rust\nDESCRIPTION: Defines the core Extension trait that all extensions must implement. It includes methods for name, description, instructions, tools, status, and calling tools.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/goose-architecture/extensions-design.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait]\npub trait Extension: Send + Sync {\n    fn name(&self) -> &str;\n    fn description(&self) -> &str;\n    fn instructions(&self) -> &str;\n    fn tools(&self) -> &[Tool];\n    async fn status(&self) -> AnyhowResult<HashMap<String, Value>>;\n    async fn call_tool(&self, tool_name: &str, parameters: HashMap<String, Value>) -> ToolResult<Value>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Goose with Custom Extensions\nDESCRIPTION: Shows how to run Goose with custom extensions, including passing environment variables to the extension.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngoose run --with-extension \"ENV1=value1 custom-extension-args\" -t \"your instructions\"\n```\n\n----------------------------------------\n\nTITLE: Running MCP Server in Development Mode\nDESCRIPTION: Command to run the MCP server in development mode, which starts the server and makes it available for testing with the MCP Inspector UI.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmcp dev src/mcp_wiki/server.py\n```\n\n----------------------------------------\n\nTITLE: Running Goose for Development Workflows\nDESCRIPTION: Shows how to start a Goose session with specific extensions for development workflows.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngoose run --with-builtin \"developer,git\" -n dev-session -s\n```\n\n----------------------------------------\n\nTITLE: Starting a Goose Session via CLI\nDESCRIPTION: Command to start a new Goose session from the terminal. This creates a workspace for interacting with the Goose assistant.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/managing-goose-sessions.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Prompting Goose to Set Up JavaScript Project\nDESCRIPTION: Example prompt for Goose that requests setting up a JavaScript project with Express, Mongoose, Nodemon, and Dotenv, including package version fetching, README generation, and Git initialization.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/developer-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nset up a new JavaScript project with Express, Mongoose, Nodemon, and Dotenv? Fetch the latest package versions, generate a README with those versions, and initialize Git\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions via Goose CLI Command\nDESCRIPTION: Command to add a specific named extension to Goose using the MCP command.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose mcp {name}\n```\n\n----------------------------------------\n\nTITLE: Installing Goose Desktop via Homebrew\nDESCRIPTION: Command to install Goose Desktop application using Homebrew package manager on MacOS.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask block-goose\n```\n\n----------------------------------------\n\nTITLE: Implementing ScheduleExtension in Rust\nDESCRIPTION: Example implementation of an extension (ScheduleExtension) in Rust. It demonstrates how extensions are structured, including dependency injection and tool definition.\nSOURCE: https://github.com/block/goose/blob/main/ARCHITECTURE.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct ScheduleExtension {\n    notifier: Box<dyn Notifier>,\n    calendar: Box<dyn Calendar>,\n    assistant: Box<dyn Assistant>,\n    contacts: Box<dyn Contacts>,\n    appointments_state: Vec<Appointment>,\n}\n\nimpl Extension for ScheduleExtension {\n    fn new(notifier: Box<dyn Notifier>, requires: Requirements) -> Self {\n        Self {\n            notifier,\n            calendar: requires.get(\"calendar\"),\n            assistant: requires.get(\"assistant\"),\n            contacts: requires.get(\"contacts\"),\n            appointments_state: vec![],\n        }\n    }\n\n    fn prompt(&self) -> String {\n        \"Try out the example tool.\".to_string()\n    }\n\n    #[tool]\n    fn example(&self) {\n        self.notifier.log(format!(\"An example tool was called, current state is {:?}\", self.appointments_state));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic MCP Server in TypeScript\nDESCRIPTION: TypeScript code for creating an MCP server using the McpServer class from the @modelcontextprotocol/sdk package. It initializes the server with a name and version, and connects it to a StdioServerTransport.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\n\nconst server = new McpServer({\n  name: \"Extension Name\",\n  version: \"1.0.0\",\n});\n\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\n```\n\n----------------------------------------\n\nTITLE: Launching Goose Configuration Interface\nDESCRIPTION: Command to open the Goose configuration interface, which allows adding and managing extensions.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Installing Goose JetBrains Extension with CLI\nDESCRIPTION: Shell commands for configuring the JetBrains extension through Goose CLI, including the configuration steps and interactive prompts.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/jetbrains-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Configuring vLLM Self-Hosted Environment Variables for Goose\nDESCRIPTION: Sets environment variables for using LLaMA or other models with vLLM and OpenAI compatibility in Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nOPENAI_HOST=https://your-vllm-endpoint.internal\nOPENAI_API_KEY=your-internal-api-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Repomix Extension via Goose CLI\nDESCRIPTION: Command to start the Goose configuration process for adding the Repomix extension\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Recipe YAML File Specification\nDESCRIPTION: YAML structure for a Goose recipe file which defines the configuration for shared Agents. Includes required fields (version, title, description, instructions) and optional fields for customizing the agent behavior.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/share-goose-sessions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Required fields\nversion: 1.0.0\ntitle: $title\ndescription: $description\n\ninstructions: $instructions # instructions to be added to the system prompt\n\n# Optional fields\nprompt: $prompt             # if set, the initial prompt for the run/session\n\nextensions:\n- $extensions\ncontext:\n- $context\nactivities:\n- $activities\nauthor:\ncontact: $contact\nmetadata: $metadata\n```\n\n----------------------------------------\n\nTITLE: System Information and Version Commands\nDESCRIPTION: Commands for checking system information and version details\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-cli-commands.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngoose info\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose --version\n```\n\n----------------------------------------\n\nTITLE: Refactoring Axios Interceptor Chain\nDESCRIPTION: Suggested refactoring for improved interceptor chain management in Axios. This refactoring introduces a dedicated InterceptorChain class to handle the creation and execution of the interceptor chain.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass InterceptorChain {\n  constructor(request, config) {\n    this.request = request;\n    this.config = config;\n    this.chain = [];\n  }\n\n  addRequestInterceptors(interceptors) {\n    // Add request interceptors\n  }\n\n  addResponseInterceptors(interceptors) {\n    // Add response interceptors\n  }\n\n  execute() {\n    // Execute chain\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Axios Config Processing\nDESCRIPTION: Suggested refactoring for improved config processing in the Axios request method. This refactoring separates concerns by introducing dedicated methods for config normalization and validation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequest(configOrUrl, config) {\n  const normalizedConfig = this._normalizeConfig(configOrUrl, config);\n  this._validateConfig(normalizedConfig);\n  return this._processRequest(normalizedConfig);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Goose Configuration CLI\nDESCRIPTION: Command to start the Goose configuration process via CLI for setting up providers and other options.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Starting Session with Environment Variables\nDESCRIPTION: Commands showing how to start a Goose session with extensions that require environment variables, including GitHub extension example\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-extension \"VAR=value command arg1 arg2\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-extension \"GITHUB_PERSONAL_ACCESS_TOKEN=<YOUR_TOKEN> npx -y @modelcontextprotocol/server-github\"\n```\n\n----------------------------------------\n\nTITLE: Creating Local Goosehints File for JavaScript Web Application\nDESCRIPTION: This snippet shows an example of a local .goosehints file for a JavaScript web application using Express.js. It provides context about the project, points to documentation, specifies change confirmation requirements, and includes test running instructions.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/using-goosehints.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is a simple example JavaScript web application that uses the Express.js framework. View [Express documentation](https://expressjs.com/) for extended guidance.\n\nGo through the README.md for information on how to build and test it as needed.\n\nMake sure to confirm all changes with me before applying.\n\nRun tests with `npm run test` ideally after each change.\n```\n\n----------------------------------------\n\nTITLE: Configuring Langfuse Environment Variables for Goose\nDESCRIPTION: Sets up the required environment variables to connect Goose to Langfuse server. Includes configuration for API keys and server URL with options for different regions and self-hosting.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/langfuse.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport LANGFUSE_INIT_PROJECT_PUBLIC_KEY=pk-lf-...\nexport LANGFUSE_INIT_PROJECT_SECRET_KEY=sk-lf-...\nexport LANGFUSE_URL=https://cloud.langfuse.com # EU data region 🇪🇺\n\n# https://us.cloud.langfuse.com if you're using the US region 🇺🇸\n# https://localhost:3000 if you're self-hosting\n```\n\n----------------------------------------\n\nTITLE: Tool Calling Example with read_file Function in JSON\nDESCRIPTION: This JSON snippet demonstrates how an LLM selects and calls the read_file tool with appropriate parameters. It shows the structured format used for tool calling where the LLM specifies which tool to use and provides the necessary parameters.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-02-17-agentic-ai-mcp/index.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"tool\": \"read_file\",\n    \"parameters\": { \"file_path\": \"UserService.java\" }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Async Interceptors in Axios\nDESCRIPTION: New unit test to verify correct handling of async interceptors in Axios. This test ensures that async request and response interceptors are executed in the correct order, even with different execution times.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should handle async interceptors correctly', async function() {\n  const instance = new Axios({});\n  const order = [];\n\n  instance.interceptors.request.use(async function(config) {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    order.push(1);\n    return config;\n  });\n\n  instance.interceptors.request.use(async function(config) {\n    await new Promise(resolve => setTimeout(resolve, 50));\n    order.push(2);\n    return config;\n  });\n\n  instance.interceptors.response.use(async function(response) {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    order.push(3);\n    return response;\n  });\n\n  await instance.request('/foo');\n  expect(order).toEqual([2, 1, 3]); // Interceptors should execute in correct order\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Goose in GitHub Actions\nDESCRIPTION: This YAML snippet shows the steps to install the Goose CLI and configure it within the GitHub Actions workflow.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/cicd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    - name: Install Goose CLI\n      run: |\n          mkdir -p /home/runner/.local/bin\n          curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \\\n            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash\n          echo \"/home/runner/.local/bin\" >> $GITHUB_PATH\n\n    - name: Configure Goose\n      run: |\n          mkdir -p ~/.config/goose\n          cat <<EOF > ~/.config/goose/config.yaml\n          GOOSE_PROVIDER: REPLACE_WITH_PROVIDER\n          GOOSE_MODEL: REPLACE_WITH_MODEL\n          keyring: false\n          EOF\n```\n\n----------------------------------------\n\nTITLE: Basic Gooseignore Pattern Examples\nDESCRIPTION: Example patterns for .gooseignore file showing how to ignore specific files, directories, and file extensions. Includes patterns for exact matches, wildcards, and negation patterns.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/using-gooseignore.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Ignore specific files by name\nsettings.json         # Ignore only the file named \"settings.json\"\n\n# Ignore files by extension\n*.pdf                # Ignore all PDF files\n*.config             # Ignore all files ending in .config\n\n# Ignore directories and their contents\nbackup/              # Ignore everything in the \"backup\" directory\ndownloads/           # Ignore everything in the \"downloads\" directory\n\n# Ignore all files with this name in any directory\n**/credentials.json  # Ignore all files named \"credentials.json\" in any directory\n\n# Complex patterns\n*.log                # Ignore all .log files\n!error.log           # Except for error.log file\n```\n\n----------------------------------------\n\nTITLE: Tool Display Template in Jinja2\nDESCRIPTION: A Jinja2 template block that conditionally displays available tools and their details, including name, description, and parameters.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose/src/prompts/plan.md#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if (tools is defined) and tools %} ## Available Tools\n{% for tool in tools %}\n**{{tool.name}}**\nDescription: {{tool.description}}\nParameters: {{tool.parameters}}\n\n{% endfor %}\n{% else %}\nNo tools are defined.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Resuming a Named Session Example via CLI\nDESCRIPTION: Example command showing how to resume a specific session named 'react-migration'. This demonstrates the practical usage of the resume feature.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/managing-goose-sessions.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngoose session -r --name react-migration\n```\n\n----------------------------------------\n\nTITLE: Starting Session with External Extensions\nDESCRIPTION: Commands for starting a Goose session with external extensions, including example with the Fetch extension\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-extension \"{extension command}\" --with-extension \"{another extension command}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-extension \"uvx mcp-server-fetch\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose Profile in YAML\nDESCRIPTION: Example YAML configuration for a Goose profile, specifying models, moderator, and extensions to be used. This configuration demonstrates how to set up dependencies between extensions.\nSOURCE: https://github.com/block/goose/blob/main/ARCHITECTURE.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprocessor: openai:gpt-4\naccelerator: openai:gpt-4-turbo\nmoderator: passive\nextensions:\n  - developer\n  - calendar\n  - contacts\n  - name: scheduling\n    requires:\n      assistant: assistant\n      calendar: calendar\n      contacts: contacts\n```\n\n----------------------------------------\n\nTITLE: Starting a New Goose Session via CLI\nDESCRIPTION: Command to start a new Goose session in CLI mode, which is needed before using Goose to automate development tasks.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/developer-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Accessing Exchange History in Rust Extension\nDESCRIPTION: Example of how to access the exchange history within an extension's tool implementation using the ExchangeView object.\nSOURCE: https://github.com/block/goose/blob/main/ARCHITECTURE.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[tool]\nfn example_history(&self) {\n    let last_message = self.exchange_view.processor.messages.last();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Selection Menu Display\nDESCRIPTION: Terminal output showing the available LLM provider selection options\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n┌   goose-configure \n│\n◇  What would you like to configure?\n│  Configure Providers \n│\n◆  Which model provider should we use?\n│  ● Anthropic (Claude and other models from Anthropic)\n│  ○ Databricks \n│  ○ Google Gemini \n│  ○ Groq \n│  ○ Ollama \n│  ○ OpenAI \n│  ○ OpenRouter \n└  \n```\n\n----------------------------------------\n\nTITLE: Complete Goose Benchmark Configuration Schema\nDESCRIPTION: Full JSON schema for configuring benchmark settings including model configurations, evaluation parameters, and general options.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/benchmarking.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"models\": [\n    {\n      \"provider\": \"databricks\",\n      \"name\": \"goose\",\n      \"parallel_safe\": true,\n      \"tool_shim\": {\n        \"use_tool_shim\": false,\n        \"tool_shim_model\": null\n      }\n    }\n  ],\n  \"evals\": [\n    {\n      \"selector\": \"core\",\n      \"post_process_cmd\": null,\n      \"parallel_safe\": true\n    }\n  ],\n  \"include_dirs\": [],\n  \"repeat\": 2,\n  \"run_id\": null,\n  \"eval_result_filename\": \"eval-results.json\",\n  \"run_summary_filename\": \"run-results-summary.json\",\n  \"env_file\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Security Audit Instruction File\nDESCRIPTION: An example of an instruction file for running a security audit on project dependencies. It outlines steps for analyzing dependencies, checking for vulnerabilities, and creating an upgrade plan.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Dependency Security Audit\n\n1. Analyze project dependencies:\n   - Check package.json and requirements.txt files\n   - List all dependencies with versions\n   - Identify outdated packages\n\n2. Security check:\n   - Run npm audit (for JavaScript packages)\n   - Check for known vulnerabilities in Python packages\n   - Identify dependencies with critical security issues\n\n3. Create an upgrade plan:\n   - List packages requiring immediate updates\n   - Note breaking changes in latest versions\n   - Estimate impact of required updates\n\nSave findings in 'security_audit.md' with severity levels highlighted.\n```\n\n----------------------------------------\n\nTITLE: Installing Google Maps MCP Server Extension\nDESCRIPTION: Command to install the Google Maps MCP Server extension using npx. This is the primary installation method for adding Google Maps functionality to Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-maps-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-google-maps\n```\n\n----------------------------------------\n\nTITLE: Complex Goose Command Combining Multiple Options\nDESCRIPTION: Demonstrates a complex Goose command that combines multiple options including built-in extensions, custom extensions with API keys, session naming, and initial instructions.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngoose run \\\n  --with-builtin \"developer,git\" \\\n  --with-extension \"API_KEY=xyz123 custom-tool\" \\\n  -n project-setup \\\n  -t \"Initialize project\" \n```\n\n----------------------------------------\n\nTITLE: Goose Allowlist YAML Example\nDESCRIPTION: Practical example of an allowlist YAML file showing how to configure multiple extensions with their specific MCP commands. Demonstrates the format for common integrations like Slack, GitHub, and Jira.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-server/ALLOWLIST.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  - id: slack\n    command: uvx mcp_slack\n  - id: github\n    command: uvx mcp_github\n  - id: jira\n    command: uvx mcp_jira\n```\n\n----------------------------------------\n\nTITLE: Starting Goose Session\nDESCRIPTION: Command to initiate a new Goose session after configuration is complete.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-in-docker.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Security Audit Prompt for Goose with Filesystem Extension\nDESCRIPTION: Example prompt requesting Goose to perform a comprehensive security audit across multiple projects, demonstrating how to utilize the filesystem extension for code analysis and vulnerability detection.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/filesystem-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nHey Goose, I need to perform a security audit and implement fixes across multiple projects:\n\n        1. Please analyze these codebases for security issues:\n            - /Users/ebonyl/e-commerce-dashboard\n            - /Users/ebonyl/client-projects/payment-system\n            - /Users/ebonyl/internal/auth-service\n\n        2. Look for:\n            - Hardcoded credentials (API keys, passwords, secrets)\n            - Insecure cryptographic practices (weak hashing, encryption)\n            - SQL injection vulnerabilities\n            - Exposed configuration files\n            - Insecure session handling\n            - Logging of sensitive data\n            - Outdated dependencies in package.json\n            - Unsafe authentication methods\n\n        3. For each vulnerability found:\n            - Show me the problematic code\n            - Explain the security risk\n            - Provide a secure implementation\n            - Help me apply and test the fixes\n\n        4. Create a detailed security report including:\n            - Critical findings by project\n            - Risk severity levels\n            - Exact file locations and snippets\n            - Applied fixes and improvements\n            - Verification steps taken\n\n    Please focus particularly on the payment system and authentication service as they handle sensitive data.\n```\n\n----------------------------------------\n\nTITLE: CLI Output for Recipe Generation\nDESCRIPTION: Sample output displayed when Goose CLI successfully generates and saves a recipe.yaml file. Shows the path where the recipe file is saved.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/share-goose-sessions.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nGenerating Recipe\nSaved recipe to .../my-shared-project/goose/recipe.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Goose Prompt for Delivery Tracking\nDESCRIPTION: A sample prompt that instructs Goose to track a delivery driver, query Google Maps for traffic data, adjust ETAs, and handle notifications. Demonstrates practical usage of the Google Maps extension.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-maps-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nTrack the live GPS location of driver ID #12345. Query Google Maps for real-time traffic data and adjust the estimated delivery time if delays exceed 5 minutes. If ETA changes, update the customer's live tracker and send an SMS notification. If the delay is greater than 20 minutes, check if another driver within a 1-mile radius can take over the delivery.\n```\n\n----------------------------------------\n\nTITLE: Example Prompt for Computer Controller Automation\nDESCRIPTION: A sample prompt demonstrating how to instruct Goose to perform multiple automated tasks using the Computer Controller extension. The prompt requests playing music, adjusting screen brightness, conducting web research, and creating and opening a CSV file.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/computer-controller-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nGoose, I need to decompress while researching AI models for tomorrow's meeting. Can you create a relaxing environment and help me research?\n\n1. Play classical music in Safari\n2. Dim screen brightness (2 levels)\n3. Research current flagship AI models (Anthropic, OpenAI, Google):\n    * Verify availability\n    * Collect: release date, features, pricing, context window\n    * Use official sources only\n4. Create \"ai-models-comparison.csv\" on desktop with collected data\n5. Launch Numbers and open the CSV file\n6. Reset brightness and close Safari\n```\n\n----------------------------------------\n\nTITLE: Example Goose Prompt for GitHub Operations\nDESCRIPTION: Example prompt demonstrating how to instruct Goose to perform GitHub operations like creating branches, updating files, and opening pull requests.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/github-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncreate a new branch called hello-world in my angiejones/goose-demo repository. Update the README.md file to say \"this was written by goose\" and commit it. Open a pull request with your changes.\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Personal Access Token Environment Variable\nDESCRIPTION: Environment variable setup required for authentication with GitHub. The personal access token enables Goose to perform operations on your behalf.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/github-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nGITHUB_PERSONAL_ACCESS_TOKEN: <YOUR_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Updating Goose CLI with additional options\nDESCRIPTION: These commands demonstrate additional update options for Goose CLI, including updating to the latest canary version and reconfiguring settings during update.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/updating-goose.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Update to latest canary (development) version\ngoose update --canary\n\n# Update and reconfigure settings\ngoose update --reconfigure\n```\n\n----------------------------------------\n\nTITLE: Example Goose Prompt for Google Drive Integration\nDESCRIPTION: Example prompt for Goose to fetch and analyze marketing budget documents from Google Drive, demonstrating the extension's practical use.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-drive-mcp.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nI have an important marketing budget review meeting in 30 minutes and I need your help getting prepared. I have several documents in my Google Drive from our previous meetings and planning sessions. Could you help me by:\n\n1. Finding all relevant documents about our marketing budget and performance\n2. Giving me a quick summary of our Q1 performance\n3. Highlighting the key decisions we need to make about the marketing automation tool and video production\n4. Identifying any outstanding action items from our last meeting\n\nI need a quick but comprehensive overview so I can walk into this meeting well-prepared.\n```\n\n----------------------------------------\n\nTITLE: Selecting Tool Output Adjustment Option\nDESCRIPTION: Interface showing the menu options in the Goose configure command with 'Adjust Tool Output' highlighted as the selected option.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/adjust-tool-output.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n┌   goose-configure \n│\n◆  What would you like to configure?\n│  ○ Configure Providers \n│  ○ Add Extension \n│  ○ Toggle Extensions \n│  ○ Remove Extension\n// highlight-next-line\n│  ● Adjust Tool Output (Show more or less tool output)\n└  \n```\n\n----------------------------------------\n\nTITLE: Example Goose Natural Language Query\nDESCRIPTION: Sample prompt demonstrating how to query student GPA data using natural language\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/postgres-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nSearch my database for any students whose current GPA is higher than the average in their current grade level. Tell me their name, grade, and how much they exceed their grade's average GPA, and the average GPA.\n```\n\n----------------------------------------\n\nTITLE: Naming a Goose Session via CLI\nDESCRIPTION: Command to start a Goose session with a custom name. This allows for easier identification when resuming sessions later.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/managing-goose-sessions.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose session -n react-migration\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose via CLI\nDESCRIPTION: Command to launch the Goose configuration interface\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Example Goose Prompt for Web Search\nDESCRIPTION: Sample prompt demonstrating how to use Tavily search functionality in Goose\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tavily-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSearch for recent news about artificial intelligence breakthroughs in medicine and summarize the key findings.\n```\n\n----------------------------------------\n\nTITLE: Running Goose with Instruction File\nDESCRIPTION: Shows how to execute a Goose task using an instruction file. This method is ideal for complex sets of instructions or automated workflows stored in a separate file.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoose run -i instructions.md\n```\n\n----------------------------------------\n\nTITLE: API Key Configuration Prompt\nDESCRIPTION: Terminal output showing the API key input prompt for provider configuration\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n┌   goose-configure \n│\n◇  What would you like to configure?\n│  Configure Providers \n│\n◇  Which model provider should we use?\n│  Anthropic \n│\n◆  Provider Anthropic requires ANTHROPIC_API_KEY, please enter a value\n│   \n└  \n```\n\n----------------------------------------\n\nTITLE: Enhancing Interactive Button Accessibility\nDESCRIPTION: Shows how to improve button accessibility by adding ARIA labels and proper tabindex attributes for better screen reader support and keyboard navigation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Current -->\n<button class=\"cook-button\">COOK CHOCOLATE CAKE</button>\n\n<!-- Recommended -->\n<button \n  class=\"cook-button\"\n  aria-label=\"Cook Chocolate Cake recipe\"\n  tabindex=\"0\">\n  COOK CHOCOLATE CAKE\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Interpreter Model\nDESCRIPTION: Command to pull the default mistral-nemo interpreter model from Ollama server\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/experimental-features.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nollama pull mistral-nemo\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Labels\nDESCRIPTION: Proper implementation of form labels for improved form accessibility.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"prep-time\">Preparation Time</label>\n<input id=\"prep-time\" type=\"text\" value=\"20 min\">\n```\n\n----------------------------------------\n\nTITLE: CLI Mode Commands\nDESCRIPTION: Commands for changing Goose modes during an active session\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/mode auto\n/mode approve\n/mode chat\n```\n\n----------------------------------------\n\nTITLE: Example Goose Prompt for Transcript Retrieval\nDESCRIPTION: Sample prompt demonstrating how to request a transcript from a YouTube video using the extension.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/youtube-transcript.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGet me the transcript for this YouTube video: https://www.youtube.com/watch?v=dQw4w9WgXcQ\n```\n\n----------------------------------------\n\nTITLE: Running a Shared Agent from Recipe in CLI\nDESCRIPTION: Command to start a Goose Agent using a recipe file. This allows a user to create a session with all components shared from the original session.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/share-goose-sessions.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngoose run --<RECIPE_FILE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Running Goose Docker Container\nDESCRIPTION: Command to run the Goose container and connect to its CLI interface. The --rm flag ensures the container is removed after exit.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-in-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f documentation/docs/docker/docker-compose.yml run --rm goose-cli\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers for OpenAI-compatible Endpoints in Goose\nDESCRIPTION: Configures environment variables including custom headers for OpenAI-compatible endpoints in Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nOPENAI_API_KEY=your-api-key\nOPENAI_ORGANIZATION=org-id123\nOPENAI_PROJECT=compliance-approved\nOPENAI_CUSTOM_HEADERS=\"X-Header-A=abc,X-Header-B=def\"\n```\n\n----------------------------------------\n\nTITLE: Improving Color Contrast\nDESCRIPTION: CSS improvements for better color contrast to meet WCAG accessibility guidelines.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/* Current */\n.difficulty-beginner {\n  color: #90EE90;\n}\n\n/* Recommended */\n.difficulty-beginner {\n  color: #2E7D32; /* Darker green for better contrast */\n}\n```\n\n----------------------------------------\n\nTITLE: Using Goose Prompt for API Integration\nDESCRIPTION: Example prompt demonstrating how to request Goose to create a web page that fetches and displays programming jokes from an API\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/fetch-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmake a web page that tells jokes for programmers. The page should ask the user the setup of the joke, allow them to guess the punchline and then tell them if they are right or wrong. Include a button that allows them to request another joke. you can fetch the jokes from the official joke api\n```\n\n----------------------------------------\n\nTITLE: Setting Ollama Model Environment Variable\nDESCRIPTION: Command to set the environment variable for specifying a custom Ollama model\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/experimental-features.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGOOSE_TOOLSHIM_OLLAMA_MODEL=llama3.2\n```\n\n----------------------------------------\n\nTITLE: Starting Goose Session with MCP Extension\nDESCRIPTION: Bash commands to start a Goose session with the implemented MCP extension for Python, TypeScript, and Kotlin. These commands allow testing and interaction with the extension.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Python example\ngoose session --with-extension \"python server.py\"\n\n# TypeScript example\ngoose session --with-extension \"node server.js\"\n\n# Kotlin example\ngoose session --with-extension \"java -jar build/libs/extension.jar\"\n```\n\n----------------------------------------\n\nTITLE: Managing Goose Sessions\nDESCRIPTION: Shows how to start a new named session and resume a previous session using the Goose CLI. This is useful for managing and returning to specific task contexts.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Start a new named session\ngoose run -n my-project -t \"initial instructions\"\n\n# Resume a previous session\ngoose run -n my-project -r\n```\n\n----------------------------------------\n\nTITLE: Adding Knowledge Graph Memory Extension in Node\nDESCRIPTION: Command to add the Knowledge Graph Memory MCP Server as an extension using Node.js.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-memory\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Function in Rust\nDESCRIPTION: Shows the signature of a tool function that takes a Value parameter and returns an AgentResult<Value>. This structure makes it compatible with the tool calling framework from the agent.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/goose-architecture/extensions-design.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nasync fn echo(&self, params: Value) -> AgentResult<Value>\n```\n\n----------------------------------------\n\nTITLE: Configuring Knowledge Graph Memory Extension in Goose CLI\nDESCRIPTION: Steps to configure the Knowledge Graph Memory extension using the Goose CLI. This includes running the configure command, selecting the extension type, naming the extension, and setting the command to run.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/knowledge-graph-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Setting Asana Access Token Environment Variable\nDESCRIPTION: Environment variable configuration for the Asana access token. This is required for authentication with the Asana API.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/asana-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nASANA_ACCESS_TOKEN: <YOUR_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Enabling Ollama Tool Shim\nDESCRIPTION: Command to enable the tool shim feature via environment variable\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/experimental-features.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGOOSE_TOOLSHIM=1\n```\n\n----------------------------------------\n\nTITLE: Running Goose for Quick Commands\nDESCRIPTION: Demonstrates how to use Goose for quick, one-off commands without starting an interactive session.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngoose run -t \"Create a CHANGELOG.md entry comparing current git branch with main\"\n```\n\n----------------------------------------\n\nTITLE: Running Goose Configuration Command\nDESCRIPTION: Command to start the Goose configuration process where you can add extensions like the Figma MCP Server.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/figma-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Starting a Goose Session from JetBrains IDE Terminal\nDESCRIPTION: Command to start a new Goose session from within a terminal in a JetBrains IDE to utilize the JetBrains extension.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/jetbrains-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Fixing Hardcoded Credentials in JavaScript Configuration\nDESCRIPTION: Demonstrates the transition from hardcoded credentials to environment variables for secure credential management in a Node.js application\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/filesystem-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Current (Unsafe):\nconst STRIPE_SECRET = 'sk_live_abcdef123456';\nconst AWS_KEY = 'AKIA12345EXAMPLE';\n\n// Recommended Fix:\nconst STRIPE_SECRET = process.env.STRIPE_SECRET_KEY;\nconst AWS_KEY = process.env.AWS_ACCESS_KEY_ID;\n```\n\n----------------------------------------\n\nTITLE: Installing Fetch Extension via Command Line\nDESCRIPTION: Command to install the Fetch MCP Server extension using uvx package manager\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/fetch-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nuvx mcp-server-fetch\n```\n\n----------------------------------------\n\nTITLE: Running Goose in Interactive Mode\nDESCRIPTION: Demonstrates how to start Goose in interactive mode after processing initial commands. This is useful when you want to continue working with Goose after your initial instructions are executed.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngoose run -i instructions.txt -s\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose Profile with GitHub Toolkit in YAML\nDESCRIPTION: YAML configuration for a Goose profile that includes the necessary toolkits (developer and GitHub) required for CI debugging functionality.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-12-11-resolving-ci-issues-with-goose-a-practical-walkthrough/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmy-profile:\n  provider: anthropic\n  processor: claude-3-5-sonnet\n  accelerator: claude-3-5-sonnet\n  moderator: truncate\n  toolkits:\n    - name: developer\n      requires: {}\n    - name: github\n      requires: {}\n```\n\n----------------------------------------\n\nTITLE: Setting KServe Deployment Environment Variables for Goose\nDESCRIPTION: Configures environment variables for models deployed on Kubernetes using KServe in Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nOPENAI_HOST=https://kserve-gateway.your-cluster\nOPENAI_API_KEY=your-kserve-api-key\nOPENAI_ORGANIZATION=your-org-id\nOPENAI_PROJECT=ml-serving\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub MCP Server Extension via NPX\nDESCRIPTION: Command to install the GitHub MCP Server as a Goose extension using NPX. This is the core command needed to add GitHub functionality to Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/github-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-github\n```\n\n----------------------------------------\n\nTITLE: Installing Knowledge Graph Memory Extension via NPX\nDESCRIPTION: Command to install the Knowledge Graph Memory MCP Server using NPX. This enables Goose to analyze relationships, detect patterns, and gain a deeper understanding of data.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/knowledge-graph-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-memory\n```\n\n----------------------------------------\n\nTITLE: Session Listing Commands\nDESCRIPTION: Commands for listing saved sessions with various output formats and verbosity levels\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-cli-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoose session list\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session list --verbose\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session list --format json\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Extension with Goose CLI\nDESCRIPTION: Command to start the configuration process for adding new extensions to Goose CLI.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/filesystem-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Installing Tavily MCP Server\nDESCRIPTION: Command to install the Tavily MCP server package using npx\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tavily-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y tavily-mcp\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Resource in Kotlin\nDESCRIPTION: Kotlin code for adding an MCP resource to the server. It defines a resource with a URI template, name, and description, and provides a lambda function to handle resource requests and return formatted data.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nserver.addResource(\n    uri = \"example://{param}\",\n    name = \"Example\",\n    description = \"Example resource\"\n) { request ->\n    ReadResourceResult(\n        contents = listOf(\n            TextResourceContents(\n                text = \"Data for ${request.params[\"param\"]}\",\n                uri = request.uri,\n                mimeType = \"text/plain\"\n            )\n        )\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose CLI\nDESCRIPTION: Command to start the Goose configuration process through the command line interface.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-drive-mcp.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Example Google Drive MCP Prompt\nDESCRIPTION: This snippet illustrates a prompt for using Google Drive MCP to prepare for a marketing budget review meeting by finding and summarizing relevant documents.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-01-mcp-nondevs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nI have an important marketing budget review meeting in 30 minutes and I need your help getting prepared. I have several documents in my Google Drive from our previous meetings and planning sessions. Could you help me by:\n\n1. Finding all relevant documents about our marketing budget and performance\n2. Giving me a quick summary of our Q1 performance\n3. Highlighting the key decisions we need to make about the marketing automation tool and video production\n4. Identifying any outstanding action items from our last meeting\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Computer Controller Extension via Goose CLI\nDESCRIPTION: Commands to enable the Computer Controller extension through Goose's command line interface. This involves running the configure command, selecting the built-in extension option, choosing Computer Controller, and setting a timeout value.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/computer-controller-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Reader Extension in Goose CLI\nDESCRIPTION: Series of CLI commands and interactions to configure the PDF Reader extension in Goose. This includes naming the extension, setting the command, and configuring the timeout.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/pdf-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Installing Asana MCP Server Extension via NPX\nDESCRIPTION: Command to install the Asana MCP Server extension using NPX. This is the core command used in both CLI and Desktop installation methods.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/asana-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @roychri/mcp-server-asana\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise OpenAI Environment Variables for Goose\nDESCRIPTION: Sets up environment variables for enterprise OpenAI deployments with governance in Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nOPENAI_API_KEY=your-api-key\nOPENAI_ORGANIZATION=org-id123\nOPENAI_PROJECT=compliance-approved\n```\n\n----------------------------------------\n\nTITLE: Setting GDRIVE_OAUTH_PATH Environment Variable\nDESCRIPTION: Environment variable that specifies the path to the Google Cloud Platform OAuth keys JSON file used for authorization.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-drive-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nGDRIVE_OAUTH_PATH: ~/.config/gcp-oauth.keys.json\n```\n\n----------------------------------------\n\nTITLE: Installing Blender MCP using uvx command\nDESCRIPTION: The command to install the Blender MCP server extension using uvx, which enables natural language control of Blender.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/blender-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nuvx blender-mcp\n```\n\n----------------------------------------\n\nTITLE: Starting a New Goose Session\nDESCRIPTION: Command to start a new Goose session, helpful when Goose gets stuck in a loop or becomes unresponsive during a long session.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Update Commands\nDESCRIPTION: Commands for updating Goose CLI to newer versions with various options\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-cli-commands.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngoose update\n\n# Update to latest canary version\ngoose update --canary\n\n# Update and reconfigure settings\ngoose update --reconfigure\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix MCP Server via NPX\nDESCRIPTION: Basic command to install and run Repomix MCP Server using NPX package runner\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y repomix --mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer Server Extension\nDESCRIPTION: Command to install the Puppeteer MCP server using npx package runner\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-puppeteer\n```\n\n----------------------------------------\n\nTITLE: Installing VS Code MCP Server\nDESCRIPTION: Basic command to install and run the VS Code MCP server using npx\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/vscode-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx vscode-mcp-server\n```\n\n----------------------------------------\n\nTITLE: Installing PDF Reader Extension via Command Line\nDESCRIPTION: Command to install the PDF Reader MCP Server extension using uvx. This enables Goose to read and extract text from protected and unprotected PDFs.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/pdf-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nuvx mcp-read-pdf\n```\n\n----------------------------------------\n\nTITLE: Running Google Drive MCP Server\nDESCRIPTION: Command to start the Google Drive MCP Server which allows Goose to access Google Drive files and folders.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-drive-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-gdrive\n```\n\n----------------------------------------\n\nTITLE: Adding Wikipedia Reader Extension in Python\nDESCRIPTION: Command to add a Wikipedia Reader extension using Python's uvx package.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nuvx mcp-wiki\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Data Explorer Extension in Java\nDESCRIPTION: Command to add a Spring Data Explorer extension using JBang with custom Spring profile.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\njbang -Dspring.profiles.active=dev org.example:spring-data-mcp:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing AgentQL MCP Server via NPX Command\nDESCRIPTION: The command to install the AgentQL MCP Server extension using NPX, which requires Node.js to be installed on the system.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/agentql-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y agentql-mcp\n```\n\n----------------------------------------\n\nTITLE: Resuming a Desktop Session in CLI Example\nDESCRIPTION: Example command for resuming a Desktop-created session in CLI using the timestamp-based session name. This demonstrates cross-interface functionality.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/managing-goose-sessions.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngoose session -r --name 20250305_113223\n```\n\n----------------------------------------\n\nTITLE: Running Ollama with Qwen2.5 Model\nDESCRIPTION: Command to run the Qwen2.5 model using Ollama for local LLM support in Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nollama run qwen2.5\n```\n\n----------------------------------------\n\nTITLE: Installing YouTube Transcript Extension via NPX\nDESCRIPTION: Core command to install the YouTube Transcript MCP Server using NPX package runner.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/youtube-transcript.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @jkawamoto/mcp-youtube-transcript\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose from CLI\nDESCRIPTION: A shell command to run the Goose configuration tool, which allows setting up LLM providers, adding extensions, and customizing other settings.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Running Goose Benchmark\nDESCRIPTION: Command to execute the benchmark using a specified configuration file.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/benchmarking.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoose bench run -c bench-config.json\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection URL Format\nDESCRIPTION: Template showing the structure of PostgreSQL connection URLs with all required components\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/postgres-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://username:password@hostname:5432/database\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Structure with Bash Commands\nDESCRIPTION: Commands to create a basic project structure for an MCP server named 'mcp-wiki'. The commands set up the necessary directories and files for the server implementation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv init mcp-wiki\n\ncd mcp-wiki\nrm hello.py\n\nmkdir -p src/mcp_wiki\ntouch src/mcp_wiki/server.py  # Your MCP server code (tool, resources, prompts)\ntouch src/mcp_wiki/__init__.py  # Primary CLI entry point\ntouch src/mcp_wiki/__main__.py # To enable running as a Python module\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Local Development Server\nDESCRIPTION: This command starts a local development server for the Docusaurus website and opens a browser window. It allows for live updates without server restarts.\nSOURCE: https://github.com/block/goose/blob/main/documentation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Tavily API Key Environment Variable\nDESCRIPTION: Environment variable configuration for Tavily API authentication\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tavily-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nTAVILY_API_KEY: <YOUR_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Run Commands with Options\nDESCRIPTION: Commands for executing instructions from files or stdin with various options\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-cli-commands.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngoose run --instructions plan.md\n\n#Load a recipe with a prompt that Goose executes and then exits  \ngoose run --recipe recipe.yaml\n\n#Load a recipe from this chat and then stays in an interactive session\ngoose run --recipe recipe.yaml -s\n\n#Load a recipe containing a prompt which Goose executes and then drops into an interactive session\ngoose run --recipe recipe.yaml --interactive\n\n#Generates an error: no text provided for prompt in headless mode\ngoose run --recipe recipe_no_prompt.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Goose with Script File\nDESCRIPTION: Shows how to create and run a script file containing multiple instructions for Goose to execute.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nCheck the current branch\nRun the test suite\nBuild the documentation\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose run -i build-script.txt\n```\n\n----------------------------------------\n\nTITLE: Opening an HTML File in Browser via Goose\nDESCRIPTION: A simple prompt to instruct Goose to open the created HTML file in a web browser. This requires the Computer Controller extension to be enabled.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nopen index.html in a browser\n```\n\n----------------------------------------\n\nTITLE: Example Goose Search Output\nDESCRIPTION: Sample response showing the formatted output from a Tavily search query\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tavily-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nI'll use the Tavily news search tool to find recent news about AI in medicine.\n\n─── tavily_news_search | tavily ──────────────────────────\nmax_results: 5\nquery: ...\n\n\n\nLet me summarize the key findings from the recent news about AI in medicine:\n\n1. Personalized AI-Driven Healthcare:\n- Development of AI systems that act as \"personal doctors\" that work alongside human clinicians rather than replacing them\n- Focus on augmenting clinical capabilities while maintaining human oversight\n\n2. Breakthrough in Medical Imaging:\n- A significant advancement in CT scan analysis has been reported in Nature\n- Development of a \"Unified total-body CT image\" (Uni-CT) algorithm that:\n  - Automatically generates single series of total-body CT images\n  - Concatenates multiple images of segmented organs using organ-specific window settings\n  - Reduces diagnosis time by 35% without compromising accuracy\n  - Improves efficiency in trauma cases\n\n3. Future Trends:\n- Movement toward democratized AI in healthcare, potentially reducing the gap between large and small healthcare providers\n- Development of hyper-personalized medical experiences powered by AI\n- Integration of AI systems that can perform human-like reasoning in medical contexts\n\nThe most concrete breakthrough appears to be in medical imaging, with the Uni-CT algorithm showing promising results in improving both the speed and accuracy of trauma diagnosis. This represents a practical application of AI that could have immediate benefits in emergency medicine.\n\nWould you like me to search for more specific information about any of these developments or explore other areas of AI in medicine?\n```\n\n----------------------------------------\n\nTITLE: Recipe Management Commands\nDESCRIPTION: Commands for validating and sharing recipe files\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-cli-commands.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngoose recipe validate $FILE.yaml\n\n# Generate a deeplink for a recipe file\ngoose recipe deeplink $FILE.yaml\n\n# Print this message or the help for the given command\ngoose recipe help\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions via YAML Config File\nDESCRIPTION: Example of directly editing the Goose config file to add a GitHub extension with a personal access token.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  fetch:\n    name: GitHub\n    cmd: npx\n    args: [-y @modelcontextprotocol/server-github]\n    enabled: true\n    envs: { \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\" }\n    type: stdio\n    timeout: 300\n```\n\n----------------------------------------\n\nTITLE: Enabling Developer Extension with Goose CLI\nDESCRIPTION: Command to run the Goose configure utility, which allows toggling extensions including the Developer extension that is enabled by default.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/developer-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic MCP Server in Python\nDESCRIPTION: Python code snippet for initializing a basic MCP server using the FastMCP class from the mcp package. It sets up the server with a custom name and prepares it to run.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP\nfrom mcp.server.stdio import stdio_server\n\nmcp = FastMCP(\"Extension Name\")\n\nif __name__ == \"__main__\":\n    mcp.run()\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Figma Access\nDESCRIPTION: Environment variable configuration for Figma access. Requires a personal access token from Figma account settings to authenticate API requests.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/figma-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nFIGMA_ACCESS_TOKEN: <YOUR_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Starting Goose Session\nDESCRIPTION: Command to initiate a new Goose session in the terminal\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/speech-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Starting a New Goose Session via CLI\nDESCRIPTION: Command to initiate a new Goose session through the command line interface, which is required before using the Computer Controller extension functionality.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/computer-controller-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Starting a New Goose Session\nDESCRIPTION: Command to start a new Goose session in the terminal, which is the first step in using the Memory extension.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/memory-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose CLI Extension\nDESCRIPTION: Command to start the Goose configuration process for adding extensions\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/vscode-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Starting Goose CLI Session\nDESCRIPTION: Command to initialize a new Goose CLI session for running accessibility tests\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose session\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode\nDESCRIPTION: Command to run benchmark with detailed debug logging enabled.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/benchmarking.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=debug goose bench bench-config.json\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing the MCP Server CLI\nDESCRIPTION: Commands to install the project locally and verify the CLI is available and working properly. Checks the CLI executable in the virtual environment and tests the help command.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install .\nls .venv/bin/  # Verify your CLI is available\nmcp-wiki --help\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL MCP Server via NPX\nDESCRIPTION: Command to install and run the PostgreSQL MCP server with a database connection URL\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/postgres-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-postgres postgresql://localhost/mydb\n```\n\n----------------------------------------\n\nTITLE: Running the Goose Configure Command\nDESCRIPTION: The command to start the Goose configuration process for adding an extension.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/agentql-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Authenticating Google Drive Extension with OAuth\nDESCRIPTION: Command to authenticate the Google Drive extension using OAuth. This requires specifying paths to store OAuth keys and credentials, and will open a browser window for Google account authentication.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-drive-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nGDRIVE_OAUTH_PATH=/Users/<username>/.config/gcp-oauth.keys.json \\ \nGDRIVE_CREDENTIALS_PATH=/Users/<username>/.config/.gdrive-server-credentials.json \\ \nnpx -y @modelcontextprotocol/server-gdrive auth\n```\n\n----------------------------------------\n\nTITLE: GitHub API Call for CI Failure Annotations in curl\nDESCRIPTION: Example curl command that Goose executes using the GitHub CLI to retrieve annotations from a specific check run. This provides detailed information about CI failures.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-12-11-resolving-ci-issues-with-goose-a-practical-walkthrough/index.md#2025-04-21_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ngh api -H \"Accept: application/vnd.github+json\" /repos/<owner>/<repo>/check-runs/<check-run-id>/annotations\n```\n\n----------------------------------------\n\nTITLE: Enabling Python Module Execution in __main__.py\nDESCRIPTION: A minimal implementation to enable the package to be run as a Python module. Imports and calls the main function from the package.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_wiki import main\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps API Key Environment Variable\nDESCRIPTION: Environment variable configuration required for the Google Maps extension to authenticate with the Google Maps API. A valid API key must be obtained from Google's developer console.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-maps-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nGOOGLE_MAPS_API_KEY: <YOUR_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tutorial Extension via Goose CLI\nDESCRIPTION: CLI commands and interaction steps to enable and configure the Tutorial extension in Goose. Includes setting timeout values and selecting extension type.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tutorial-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Running Filesystem MCP Server with NPX Command\nDESCRIPTION: Command to run the Filesystem MCP server using NPX, specifying allowed directories for file access and manipulation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/filesystem-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-filesystem </path/to/allowed/directory>\n```\n\n----------------------------------------\n\nTITLE: Checking Directory Permissions\nDESCRIPTION: Command to check the current permissions for the ~/.config directory, which is necessary for Goose to function properly on macOS.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nls -ld ~/.config\n```\n\n----------------------------------------\n\nTITLE: Defining Notifier Trait in Rust\nDESCRIPTION: Definition of the Notifier trait, which provides methods for logging and status updates. This trait is implemented by each UX to handle notifications.\nSOURCE: https://github.com/block/goose/blob/main/ARCHITECTURE.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ntrait Notifier {\n    fn log(&self, content: RichRenderable);\n    fn status(&self, message: String);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Goose Prompt for Java Project Upgrade\nDESCRIPTION: Sample prompt demonstrating how to instruct Goose to upgrade a Java project to the latest LTS version using the JetBrains IDE tools.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/jetbrains-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nusing the JetBrains IDE tools, upgrade this project to use the latest Java LTS version and refactor the codebase to use newer Java features where beneficial.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in WSL\nDESCRIPTION: Commands for setting up persistent environment variables in WSL for Goose configuration.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY={your_api_key}\n```\n\nLANGUAGE: bash\nCODE:\n```\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc\necho 'export OPENAI_API_KEY=your_api_key' >> ~/.bashrc\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Voice Activation Example Prompt\nDESCRIPTION: Example prompt to activate the speech interface in Goose\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/speech-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nGoose I don't feel like talking today\n```\n\n----------------------------------------\n\nTITLE: Prompt Command Examples\nDESCRIPTION: Examples of using prompt commands for various operations\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-cli-commands.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Create a plan for triaging test failures\n/plan let's create a plan for triaging test failures\n\n# List all prompts from the developer extension\n/prompts --extension developer\n\n# Switch to chat mode\n/mode chat\n```\n\n----------------------------------------\n\nTITLE: Extension Configuration Command\nDESCRIPTION: Base command to configure a new extension in Goose\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/_template_.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment\nDESCRIPTION: Commands for creating and activating a Python virtual environment for dependency isolation. Includes commands for both Unix-based systems and Windows.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/first-game.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv env\nsource env/bin/activate  # or env\\Scripts\\activate on Windows\n```\n\n----------------------------------------\n\nTITLE: Example Goose Output for Java Project Upgrade\nDESCRIPTION: Sample output from Goose showing the results of upgrading a Java project, including detailed changes made and a summary of modernization improvements.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/jetbrains-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: md\nCODE:\n```\nI'll make several improvements to modernize this codebase to use Java 21 (latest LTS) features. Here are the changes I'll implement:\n\n1. Update the `pom.xml` to use Java 21\n2. Use newer Java features \n\n[... code changes ...]\n\nHere's a summary of the modernization changes made:\n\n1. `pom.xml`:\n   - Set Java version to 21\n   - Enabled preview features\n   - Updated all dependencies to their latest stable versions\n\n2. `AccountsOverviewPage.java`:\n   - Made the class `final` since it extends the sealed `Page` class\n   - Updated stream collection to use `.toList()` instead of `collect(Collectors.toList())`\n   - Made fields final for better immutability\n\n3. `Page.java`:\n   - Converted to a sealed class\n   - Restricted which classes can extend it using `permits`\n   - Made fields protected and final where appropriate\n   - Added pattern matching for exception handling\n   - Implemented Optional for null safety\n   - Used String Templates for error messages\n   - Added functional programming concepts with Supplier\n   - Enhanced error handling with specific exception types\n\n4. `LoginComponent.java`:\n   - Added a private record for credentials\n   - Implemented pattern matching with record patterns\n   - Made fields final for better immutability\n\n5. `AccountTests.java`:\n   - Implemented structured concurrency using `StructuredTaskScope`\n   - Used parallel execution for UI and API tasks\n   - Improved error handling with structured task management\n   - Used pattern matching and type inference with `var`\n\n6. `BaseTests.java`:\n   - Implemented structured concurrency for setup tasks\n   - Improved resource management\n   - Better exception handling\n   - Used modern Duration API\n\n7. `APIUtil.java`:\n   - Implemented String Templates (Java 21 preview feature)\n   - Used modern text blocks\n\n8. `Customers.java`:\n   - Added sealed interface for customer types\n   - Implemented pattern matching for switch expressions\n   - Added pattern matching for instanceof\n   - Enhanced type safety with records\n\nKey modern Java features used:\n- String Templates (Java 21 Preview)\n- Pattern Matching for switch (Java 21)\n- Sealed Classes and Interfaces (Java 17)\n- Records (Java 16)\n- Pattern Matching for instanceof (Java 16)\n- Text Blocks (Java 15)\n- Switch Expressions (Java 14)\n\nThe codebase is now using the latest Java LTS version (21) and incorporates many modern Java features that improve:\n- Type safety\n- Null safety\n- Code readability\n- Error handling\n- Performance\n```\n\n----------------------------------------\n\nTITLE: Project Structure for VSCode MCP\nDESCRIPTION: Shows the basic directory structure of the VSCode MCP project, consisting of the server implementation and VS Code extension components.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-21-goose-vscode/index.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvscode-mcp/\n├── server/    # MCP server implementation\n└── extension/ # VS Code extension\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions Workflow for Goose\nDESCRIPTION: This YAML snippet defines the GitHub Actions workflow for Goose, including triggers, permissions, and environment variables.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/cicd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Goose\n\non:\n    pull_request:\n        types: [opened, synchronize, reopened, labeled]\n\npermissions:\n    contents: write\n    pull-requests: write\n    issues: write\n\nenv:\n   PROVIDER_API_KEY: ${{ secrets.REPLACE_WITH_PROVIDER_API_KEY }}\n   PR_NUMBER: ${{ github.event.pull_request.number }}\n```\n\n----------------------------------------\n\nTITLE: Example Google Maps MCP Prompt\nDESCRIPTION: This snippet demonstrates a prompt for using Google Maps MCP to track driver location, adjust delivery times, and manage delays.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-01-mcp-nondevs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nGoogle Maps: Track the live GPS location of driver ID #{driver_id}. Query Google Maps for real-time traffic data and adjust the estimated delivery time if delays exceed 5 minutes. If ETA changes, update the customer's live tracker and send an SMS notification. If the delay is greater than 20 minutes, check if another driver within a 1-mile radius can take over the delivery.\n```\n```\n\n----------------------------------------\n\nTITLE: Running MCP Server for Wikipedia Article Reader\nDESCRIPTION: Starts the MCP server in development mode, which will handle Wikipedia article reading requests.\nSOURCE: https://github.com/block/goose/blob/main/examples/mcp-wiki/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmcp dev src/mcp_wiki/server.py\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Extension\nDESCRIPTION: Environment variable template for storing access token required by the extension\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/_template_.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{env_var}: <YOUR_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Environment Setup Commands\nDESCRIPTION: Shell commands for setting up environment configuration files across projects\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/filesystem-mcp.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For each project\ncp .env.example .env\n# Fill in secure values in .env files\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment with uv\nDESCRIPTION: Commands for setting up the development environment using uv. Syncs dependencies and activates the virtual environment.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Goose Allowlist URL in Bash\nDESCRIPTION: Commands to set the environment variable that specifies the URL for the allowlist YAML file. This is the primary configuration step for enabling allowlist restrictions.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-server/ALLOWLIST.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOSE_ALLOWLIST=https://example.com/goose-allowlist.yaml\n```\n\n----------------------------------------\n\nTITLE: Example YouTube Transcript MCP Prompt\nDESCRIPTION: This snippet shows a prompt for using YouTube Transcript MCP to fetch a video transcript and summarize it into a blog post.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-01-mcp-nondevs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nYouTube Transcript: Get the transcript from this youtube video [link to video]. Then, summarize it into a blog post.\n```\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Goose API Key\nDESCRIPTION: Command to reconfigure Goose API keys when encountering API errors, typically when API credits are exhausted or the API key is invalid.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Extension Command Template\nDESCRIPTION: Generic command template for installing the extension\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/_template_.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n{command}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Updating MCP SDK Reference\nDESCRIPTION: Bash script to clone or update the MCP SDK reference repository for the chosen language (Python, TypeScript, or Kotlin). This ensures access to the most up-to-date implementation details.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /tmp/mcp-reference && cd /tmp/mcp-reference\n([ -d [python|typescript|kotlin]-sdk/.git ] && (cd [python|typescript|kotlin]-sdk && git pull) \\\n    || git clone https://github.com/modelcontextprotocol/[python|typescript|kotlin]-sdk.git\ncat /tmp/mcp-reference/[python|typescript|kotlin]-sdk/README.md\n```\n\n----------------------------------------\n\nTITLE: Running the Goose Configure Command\nDESCRIPTION: Command to access the Goose configuration interface which allows adjusting various settings including tool output verbosity.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/adjust-tool-output.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Running MCP Client with stdio Transport\nDESCRIPTION: This command runs the MCP client example using the stdio transport method. It uses Cargo to execute the example from the mcp-client package.\nSOURCE: https://github.com/block/goose/blob/main/crates/mcp-client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p mcp-client --example stdio\n```\n\n----------------------------------------\n\nTITLE: Taking a Screenshot with Goose Screen Toolkit\nDESCRIPTION: Command for instructing Goose to capture a screenshot of a specified display. This allows Goose to analyze the UI visually before applying design transformations.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-11-22-screenshot-driven-development/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTake a screenshot of display(1)  \n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment for Wikipedia Article Reader\nDESCRIPTION: Activates the virtual environment created for the Wikipedia article reader project.\nSOURCE: https://github.com/block/goose/blob/main/examples/mcp-wiki/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Enabling Memory Extension via Goose CLI\nDESCRIPTION: Steps to enable the Memory extension using the Goose CLI, including running the configure command and selecting the appropriate options.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/memory-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Cleaning Hermit Cache on macOS\nDESCRIPTION: Command to remove the Hermit cache directory on macOS to resolve \"hermit:fatal\" extension installation issues. Hermit is used to ensure npx and uvx are consistently available.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm -rf ~/Library/Caches/hermit\n```\n\n----------------------------------------\n\nTITLE: Selecting Tool Output Verbosity Level\nDESCRIPTION: Interface showing the three available verbosity levels (High Importance, Medium Importance, and All) that can be selected to control how much information is displayed in tool outputs.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/adjust-tool-output.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n┌   goose-configure \n│\n◇  What would you like to configure?\n│  Adjust Tool Output \n│\n// highlight-start\n◆  Which tool output would you like to show?\n│  ○ High Importance \n│  ○ Medium Importance \n│  ○ All \n// highlight-end\n└  \n```\n\n----------------------------------------\n\nTITLE: Starting Session with Remote SSE Extensions\nDESCRIPTION: Commands for starting a Goose session with remote extensions over Server-Sent Events (SSE)\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-remote-extension \"{extension URL}\" --with-remote-extension \"{another extension URL}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-remote-extension \"http://localhost:8080/sse\"\n```\n\n----------------------------------------\n\nTITLE: Running Goose with Remote Extensions\nDESCRIPTION: Demonstrates how to run Goose with remote extensions by specifying a URL.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngoose run --with-remote-extension \"url\" -t \"your instructions\"\n```\n\n----------------------------------------\n\nTITLE: Installing Goose AI CLI Tool\nDESCRIPTION: Commands to install Goose AI using pipx, a tool for installing and running Python applications in isolated environments. The installation process includes ensuring the pipx path is set up correctly.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-11-22-screenshot-driven-development/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pipx\npipx ensurepath\npipx install goose-ai\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Setting Up Test Environment in ARM64 Container\nDESCRIPTION: These commands update the package list, install necessary dependencies, and set up the configuration directory for testing the Goose binary in the ARM64 container.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\napt update\napt install libxcb1 libxcb1-dev libdbus-1-3 nvi\nmkdir -p ~/.config/goose\n# create goose config file\n# set api key env variable\n```\n\n----------------------------------------\n\nTITLE: Launching Goose with Admin Privileges\nDESCRIPTION: Command to launch Goose Desktop app with superuser privileges as a troubleshooting step for permission issues on macOS.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo /Applications/Goose.app/Contents/MacOS/Goose\n```\n\n----------------------------------------\n\nTITLE: Goose Speech Interface Response\nDESCRIPTION: System response confirming speech interface activation\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/speech-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nI understand! In that case, I can help you use voice commands instead. I'll launch the speech interface so you can speak your requests rather than type them\n\n---- Launch Speech UI ----\n```\n\n----------------------------------------\n\nTITLE: Opening Goose Configuration CLI\nDESCRIPTION: Command to open Goose's configuration interface for managing extensions\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/using-extensions.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Basic Goose Benchmark Configuration\nDESCRIPTION: Example of initializing and viewing a basic benchmark configuration file that defines model and evaluation settings.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/benchmarking.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoose bench init-config -n bench-config.json\ncat bench-config.json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"models\": [\n    {\n      \"provider\": \"databricks\",\n      \"name\": \"goose\",\n      \"parallel_safe\": true\n    }\n  ],\n  \"evals\": [\n    {\n      \"selector\": \"core\",\n      \"parallel_safe\": true\n    }\n  ],\n  \"repeat\": 1\n}...etc.\n```\n\n----------------------------------------\n\nTITLE: Installing and Authenticating GitHub CLI in bash\nDESCRIPTION: Commands for installing GitHub CLI via Homebrew and starting the authentication process. This is a prerequisite for Goose to access CI check run details.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-12-11-resolving-ci-issues-with-goose-a-practical-walkthrough/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gh\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Website Content\nDESCRIPTION: This command generates static content for the Docusaurus website into the 'build' directory, ready for deployment on any static content hosting service.\nSOURCE: https://github.com/block/goose/blob/main/documentation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing Custom DeepSeek-R1 Model for Goose via Ollama\nDESCRIPTION: Command to install and run a custom DeepSeek-R1 model optimized for Goose using Ollama.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nollama run michaelneale/deepseek-r1-goose\n```\n\n----------------------------------------\n\nTITLE: Running Goose Benchmarks with Options\nDESCRIPTION: Example commands showing how to run benchmarks using run-benchmarks.sh script with different configuration options. Demonstrates both release and debug build execution.\nSOURCE: https://github.com/block/goose/blob/main/scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run with release build (default)\n./scripts/run-benchmarks.sh --provider-models 'openai:gpt-4o,anthropic:claude-3-5-sonnet' --suites 'core,small_models'\n\n# Run with debug build\n./scripts/run-benchmarks.sh --provider-models 'openai:gpt-4o' --suites 'core' --debug\n```\n\n----------------------------------------\n\nTITLE: Structuring JSON Response with Instructions and Activities\nDESCRIPTION: This JSON structure demonstrates the required format for the response, including an 'instructions' key containing a string and an 'activities' key containing an array of strings. It provides an example related to discussing fruit.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose/src/prompts/recipe.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"instructions\": \"Using web searches we find pictures of fruit, and always check what language to reply in.\",\n\"activities\": [\n\"Show pics of apples\",\n\"say a random fruit\",\n\"share a fruit fact\"\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Goose Output for JavaScript Project Setup\nDESCRIPTION: The response from Goose after processing the request to set up a JavaScript project, showing what the Developer extension was able to accomplish, including creating files, installing dependencies, and setting up the project structure.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/developer-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: md\nCODE:\n```\nI'll help you set up a new JavaScript project with those dependencies. I'll break this down into steps:\n\n1. First, let's create a new directory and initialize the project\n2. Then install the dependencies\n3. Create a detailed README\n4. Initialize git\n5. Create some starter files\n6. Let's begin:\n\n[... shell commands, files created ...]\n\nGreat! I've set up a complete Express project with MongoDB and Dotenv integrations:\n\n1. Created a new project directory and initialized npm\n2. Installed Express, Mongoose, and dotenv dependencies\n3. set up the basic project structure with directories for:\n    - config/\n    - models/\n    - routes/ \n    - controllers/\n4. Created essential files:\n    - index.js (main server file)\n    - .env (environment variables)\n    - .ignore (with common node.js ignores)\n5. Added a basic user model with basic name and email fields\n6. Created a user controller with two methods:\n    - getUsers (GET all users)\n    - createUser (POST new user)\n7. Added user routes under `/api/routes`\n8. Updated package.json with start scripts\n9. Created a comprehensive README.md with:\n    - Installation scripts\n    - Project structure\n    - Available scripts\n    - Environment variables \n    - Latest package versions\n\nThe project structure is:\n\nmy-express-app/\n├── config/         # Configuration files\n├── models/        # MongoDB models\n│   └── User.js    # User model\n├── routes/        # API routes\n│   └── userRoutes.js\n├── controllers/   # Route controllers\n│   └── userController.js\n├── .env           # Environment variables\n├── .gitignore     # Git ignore file\n├── index.js       # Entry point\n└── package.json   # Project dependencies and scripts\n\nTo start developing you can:\n\n1. Run `npm install` to install dependencies\n2. start the server with `npm run dev` \n\nThe API will be available at:\n    - `http://localhost:3000/api/users` (GET to get all users)\n    - `http://localhost:3000/api/users` (POST to create a new user)\n\nTo test out the API you can use tools like postman or curl, for example, to create a new user:\n\ncurl x POST http://localhost:3000/api/users \\\n-H \"Content-Type: application/json\" \\\n-d '{\"name\": \"Ebony Louis\" , \"email\": \"ebony@example.com\"}'\n\nWould you like me to add any additional features or make other improvements to the setup?\n```\n\n----------------------------------------\n\nTITLE: Bypassing Goose Allowlist in Bash\nDESCRIPTION: Command to set the environment variable that bypasses allowlist restrictions for development or testing purposes. When set to true, all commands will be allowed regardless of allowlist settings.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-server/ALLOWLIST.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOSE_ALLOWLIST_BYPASS=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose Extension with CLI\nDESCRIPTION: Command to run the Goose configure utility to begin adding extensions.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/blender-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Tools for an AI Agent in Plain Text\nDESCRIPTION: This snippet shows how an AI agent presents available tools to an LLM in a structured format. It includes tools for reading files, analyzing code, editing files, and running tests, enabling the LLM to understand what capabilities it can utilize.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-02-17-agentic-ai-mcp/index.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser Request: \"Fix the NullPointerException in my UserService.java file.\"\n\nAvailable Tools:\n1. read_file(file_path: str) → Returns the contents of the specified file.\n2. analyze_code(file_content: str) → Identifies potential errors and suggests fixes.\n3. edit_file(file_path: str, modifications: dict) → Applies code changes.\n4. run_tests() → Executes the test suite and returns results.\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the blog post, defining title, description and authors.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-11-finetuning-toolshim/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Finetuning Toolshim Models for Tool Calling\"\ndescription: \"Addressing performance limitations in models without native tool calling support\"\nauthors: \n    - alice\n    - mic\n---\n```\n\n----------------------------------------\n\nTITLE: Running Python Example\nDESCRIPTION: Commands to build the FFI library and run the Python example with required environment variables.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-ffi/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# First, build the FFI library\ncargo build --release --package goose_ffi\n\n# Then set the environment variables & run the example\nDATABRICKS_HOST=... DATABRICKS_API_KEY=... python crates/goose-ffi/examples/goose_agent.py\n```\n\n----------------------------------------\n\nTITLE: Security Testing Commands\nDESCRIPTION: Curl commands for testing various security measures including rate limiting, file upload, and protected routes\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/filesystem-mcp.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Rate limiting\ncurl -X POST http://localhost:3000/api/login -d '{\"username\":\"test\",\"password\":\"test\"}' -H 'Content-Type: application/json'\n\n# File upload\ncurl -X POST http://localhost:3000/api/upload -F 'file=@test.jpg' -H 'Authorization: Bearer YOUR_TOKEN'\n\n# Protected routes\ncurl http://localhost:3000/api/protected -H 'Authorization: Bearer YOUR_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Granting Read/Write Permissions to Config Directory\nDESCRIPTION: Commands to add correct read and write permissions to the ~/.config directory to resolve macOS permission issues with Goose.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nchmod u+rw ~/.config\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose CLI for OpenRouter\nDESCRIPTION: Command to initiate Goose configuration for setting up OpenRouter as the LLM provider. This allows users to manage rate limits by utilizing OpenRouter's unified interface.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/handling-llm-rate-limits-with-goose.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Initializing Knowledge Graph with Project Documentation\nDESCRIPTION: Example of instructing Goose to read project documentation and store key information in the knowledge graph for future reference. This showcases how to provide context to the AI assistant.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-01-top-5-mcp-servers/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nI'm currently in a project called Goose, read through the documentation in `documentation/docs/` folder and store key information in the knowledge graph. Use it for reference anytime I ask you about Goose.\n```\n```\n\n----------------------------------------\n\nTITLE: Setting LLM Provider API Keys for Goose\nDESCRIPTION: Environment variable configuration for different LLM providers that can be used with Goose. These commands set the necessary API keys required for Goose to access various language model services.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-11-22-screenshot-driven-development/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your_api_key\n# Or for other providers:\nexport ANTHROPIC_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Running Goose in Headless Mode with Cargo\nDESCRIPTION: This command demonstrates how to run Goose in headless mode using Cargo. It executes the Goose binary with instructions from a Markdown file, which is useful for running Goose on servers or in environments without a graphical interface.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-12-06-previewing-goose-v10-beta/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin goose -- run -i instructions.md\n```\n\n----------------------------------------\n\nTITLE: Creating Instructions for Goose in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to create structured instructions for Goose based on pull request changes.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/cicd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: Create instructions for Goose\n      run: |\n          cat <<EOF > instructions.txt\n          Create a summary of the changes provided. Don't provide any session or logging details.\n          The summary for each file should be brief and structured as:\n            <filename/path (wrapped in backticks)>\n              - dot points of changes\n          You don't need any extensions, don't mention extensions at all.\n          The changes to summarise are:\n          $(cat changes.txt)\n          EOF\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Permissions for Config Directory\nDESCRIPTION: Commands to create the ~/.config directory if it doesn't exist and then assign the proper permissions to resolve macOS permission issues.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ~/.config\nchmod u+rw ~/.config\n```\n\n----------------------------------------\n\nTITLE: Session Management Commands\nDESCRIPTION: Various commands for managing Goose sessions including creating, resuming, and using extensions\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-cli-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --name <name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --resume --name <name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-extension \"npx -y @modelcontextprotocol/server-memory\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-extension \"GITHUB_PERSONAL_ACCESS_TOKEN=<YOUR_TOKEN> npx -y @modelcontextprotocol/server-github\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-remote-extension \"http://localhost:8080/sse\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngoose session --with-builtin computercontroller\n```\n\n----------------------------------------\n\nTITLE: Syncing Fork Commands\nDESCRIPTION: Git commands for keeping fork synchronized with upstream repository\nSOURCE: https://github.com/block/goose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\ngit push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Example Asana MCP Prompt\nDESCRIPTION: This snippet demonstrates a prompt for using Asana MCP to create a new task and summarize existing tasks due in the current week.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-01-mcp-nondevs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\nAsana: Create a new task in my Asana workspace called 'Review Q4 metrics' and set the due date to next Friday. Then, find all tasks assigned to me that are due this week and summarize them.\n```\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Tags for Social Media Sharing\nDESCRIPTION: HTML head section containing Open Graph and Twitter Card meta tags for social media sharing of the article. Includes title, description, image and URL metadata.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-26-mcp-security/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"How to Determine If An MCP Server Is Safe\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/03/21/goose-vscode\" />\n  <meta property=\"og:description\" content=\"Before you plug your AI agent into just any MCP server, here's how to check if it's actually safe.\" />\n  <meta property=\"og:image\" content=\"http://block.github.io/goose/assets/images/mcpsafety-87eb7ace7163a5edbe068ff75b79a199.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"How to Determine If An MCP Server Is Safe\" />\n  <meta name=\"twitter:description\" content=\"Before you plug your agent into just any MCP server, here's how to check if it's actually safe.\" />\n  <meta name=\"twitter:image\" content=\"http://block.github.io/goose/assets/images/mcpsafety-87eb7ace7163a5edbe068ff75b79a199.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Testing Rust Changes\nDESCRIPTION: Commands for checking and testing Rust code changes\nSOURCE: https://github.com/block/goose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo check  # do your changes compile\ncargo test  # do the tests pass with your changes.\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Provider via CLI Command\nDESCRIPTION: Command to launch the Goose provider configuration interface via CLI\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Starting Goose Session with Tool Shim Configuration\nDESCRIPTION: Complete command to start a Goose session with custom tool shim and model settings\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/experimental-features.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGOOSE_TOOLSHIM=1 GOOSE_TOOLSHIM_OLLAMA_MODEL=llama3.2 cargo run --bin goose session\n```\n\n----------------------------------------\n\nTITLE: Installing Figma MCP Server Extension\nDESCRIPTION: The command to install the Figma MCP Server extension using npx. This installs the package and sets up the server for interacting with Figma designs and components.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/figma-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @hapins/figma-mcp\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Goose\nDESCRIPTION: Command to build the Docker image using the specified docker-compose configuration file.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-in-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f documentation/docs/docker/docker-compose.yml build\n```\n\n----------------------------------------\n\nTITLE: Tool Calling Example with edit_file Function in JSON\nDESCRIPTION: This JSON snippet shows how an LLM calls the edit_file tool to fix the NullPointerException issue. It specifies the file path and provides a modification with line number and replacement code to initialize the db variable.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-02-17-agentic-ai-mcp/index.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"tool\": \"edit_file\",\n    \"parameters\": {\n      \"file_path\": \"UserService.java\",\n      \"modifications\": {\n        \"line_number\": 3,\n        \"replacement\": \"private Database db = new Database();\"\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Building for Linux\nDESCRIPTION: Command to build cross-platform binaries specifically for linux x86_64 architecture from Mac.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-ffi/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCROSS_BUILD_OPTS=\"--platform linux/amd64 --no-cache\" CROSS_CONTAINER_OPTS=\"--platform linux/amd64\" cross build -p goose-ffi --release --target x86_64-unknown-linux-gnu --no-default-features\n```\n\n----------------------------------------\n\nTITLE: CLI Provider Configuration Menu Display\nDESCRIPTION: Terminal output showing the provider configuration menu interface in Goose CLI\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/getting-started/providers.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n┌   goose-configure \n│\n◆  What would you like to configure?\n│  ● Configure Providers (Change provider or update credentials)\n│  ○ Toggle Extensions \n│  ○ Add Extension \n└  \n```\n\n----------------------------------------\n\nTITLE: Goose Mode Options Menu\nDESCRIPTION: ASCII menu interface showing the different mode options available for configuration\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-permissions.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n┌   goose-configure\n│\n◇  What would you like to configure?\n│  Goose Settings\n│\n◇  What setting would you like to configure?\n│  Goose Mode\n│\n◆  Which Goose mode would you like to configure?\n│  ● Auto Mode\n|  ○ Approve Mode\n|  ○ Smart Approve Mode    \n|  ○ Chat Mode\n|\n└  Set to Auto Mode - full file modification enabled\n```\n\n----------------------------------------\n\nTITLE: Example Agent-User Weather Interaction\nDESCRIPTION: A sample conversation showing how a customized shared Agent might interact with a user based on instructions to collect zipcode information for weather forecasts. Demonstrates how the agent follows custom instructions.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/share-goose-sessions.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nuser: \"will it be sunny and warm today?\"\nAgent: \"I notice that to provide accurate weather information for your area, I'll need your zip code. Could you please provide your zip code so I can check the current weather conditions for your specific location? - This is important since the instructions mention that users of this project need to know the weather conditions as they'll be working outside and need to stay dry and warm.\n\nOnce you share your zip code, I can get that information for you right away.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic MCP Server in Kotlin\nDESCRIPTION: Kotlin code for setting up an MCP server using the Server class from the io.modelcontextprotocol.kotlin.sdk package. It creates a server with specified name and version, and connects it to a StdioServerTransport.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.modelcontextprotocol.kotlin.sdk.server.Server\nimport io.modelcontextprotocol.kotlin.sdk.server.StdioServerTransport\n\nval server = Server(\n    serverInfo = Implementation(\n        name = \"Extension Name\",\n        version = \"1.0.0\"\n    )\n)\n\nval transport = StdioServerTransport()\nserver.connect(transport)\n```\n\n----------------------------------------\n\nTITLE: Initializing Kotlin Project with Gradle\nDESCRIPTION: Gradle command to initialize a Kotlin project with specific settings for MCP extension development. It sets up the project structure, build files, and initial dependencies.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngradle init \\\n  --type kotlin-application \\\n  --dsl kotlin \\\n  --test-framework junit-jupiter \\\n  --package my.project \\\n  --project-name $PROJECT_NAME  \\\n  --no-split-project  \\\n  --java-version 21\n```\n\n----------------------------------------\n\nTITLE: Checking Goose CLI version\nDESCRIPTION: This command displays the current version of the installed Goose CLI. It's useful for verifying successful updates or checking the current version before updating.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/updating-goose.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngoose --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose in Container\nDESCRIPTION: Command to configure Goose settings within the Docker container.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-in-docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Secure Login API Endpoint Implementation in JavaScript\nDESCRIPTION: Improved version of the login API endpoint with security enhancements. This implementation addresses SQL injection vulnerabilities, implements proper authentication, and includes error handling.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/knowledge-graph-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\napp.post('/api/login', async (req, res) => {\n    try {\n        // Input validation\n        if (!req.body.username || !req.body.password) {\n        return res.status(400).json({\n            success: false,\n            error: 'Username and password required'\n        });\n        }\n\n        // Parameterized query (prevents SQL injection)\n        const query = 'SELECT * FROM users WHERE username = ?';\n        const result = await db.query(query, [req.body.username]);\n\n        if (!result.length) {\n        return res.status(401).json({\n            success: false,\n            error: 'Invalid credentials'\n        });\n        }\n\n        // Password verification would go here\n        // const validPassword = await bcrypt.compare(req.body.password, result[0].password);\n\n        // JWT-based session management (prevents session hijacking)\n        const token = jwt.sign(\n        { userId: result[0].id },\n        process.env.JWT_SECRET,\n        { expiresIn: '1h' }\n        );\n\n        res.json({\n        success: true,\n        token: token\n        });\n\n    } catch (error) {\n        res.status(500).json({\n        success: false,\n        error: 'Internal server error'\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Running MCP Inspector for Server Testing\nDESCRIPTION: This command uses npx to run the MCP Inspector, which is then used to test the MCP server. It specifically runs the 'cargo run' command for the 'mcp-server' package.\nSOURCE: https://github.com/block/goose/blob/main/crates/mcp-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector cargo run -p mcp-server\n```\n\n----------------------------------------\n\nTITLE: Installing Alternative Ollama Model\nDESCRIPTION: Command to pull an alternative model (llama3.2) from Ollama server\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/experimental-features.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nollama pull llama3.2\n```\n\n----------------------------------------\n\nTITLE: Running x86_64 Debian Container for Binary Testing\nDESCRIPTION: This command runs an x86_64 Debian container, mounting the current directory (containing the built binary) for testing purposes.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --platform linux/amd64 -it -v \"$(pwd)\":/app debian:latest /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Goose Mode Selection Menu\nDESCRIPTION: ASCII menu interface showing the Goose mode selection options\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-permissions.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n┌   goose-configure\n│\n◇  What would you like to configure?\n│  Goose Settings\n│\n◆  What setting would you like to configure?\n│  ● Goose Mode (Configure Goose mode)\n|  ○ Tool Output\n└\n```\n\n----------------------------------------\n\nTITLE: Running Repomix Extension Command\nDESCRIPTION: The main command to be configured for running the Repomix extension with a 300-second timeout\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y repomix --mcp\n```\n\n----------------------------------------\n\nTITLE: Implementing Semantic HTML Structure\nDESCRIPTION: Demonstrates proper semantic HTML structure for recipe titles, showing the current implementation and recommended accessibility improvement using heading tags.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Current -->\n<div class=\"recipe-title\">Chocolate Cake</div>\n\n<!-- Recommended -->\n<h2 class=\"recipe-title\">Chocolate Cake</h2>\n```\n\n----------------------------------------\n\nTITLE: Moving OAuth Keys to Secure Location\nDESCRIPTION: Command to move the downloaded OAuth keys to a secure location accessible by the Google Drive extension.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-drive-mcp.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmv ~/Downloads/gcp-oauth.keys.json ~/.config/gcp-oauth.keys.json\n```\n\n----------------------------------------\n\nTITLE: Running MCP Inspector with Goose Example\nDESCRIPTION: This command runs the MCP Inspector tool with the Goose MCP example. It uses npx to execute the inspector, which then runs the Rust cargo command to build and run the mcp example from the goose-mcp package.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector cargo run -p goose-mcp --example mcp\n```\n\n----------------------------------------\n\nTITLE: Building Release for x86_64-apple-darwin using Cross\nDESCRIPTION: This command builds a release version for the x86_64-apple-darwin target using Cross. Note that this may fall back to the host machine if no Docker image is available.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncross build --release --target x86_64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Goose CLI Configuration Command\nDESCRIPTION: Initial command to start the Goose configuration process\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/postgres-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Starting Tutorial Interaction\nDESCRIPTION: Example of how to initiate a tutorial session with Goose by asking a direct question.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tutorial-extension.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n( O)> I'd like to learn how to build an extension for Goose\n```\n\n----------------------------------------\n\nTITLE: Posting Goose Output as PR Comment in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to post the processed Goose output as a comment on the pull request.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/cicd.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: Post comment to PR\n      run: |\n          cat -A pr_comment.txt\n          gh pr comment $PR_NUMBER --body-file pr_comment.txt\n```\n\n----------------------------------------\n\nTITLE: Tutorial System Response\nDESCRIPTION: Example of the system's detailed response when initiating a tutorial session, showing options and next steps.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tutorial-extension.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nI'll help you learn about building extensions! The \"build-mcp-extension\" tutorial would be perfect for this. Let me load it and guide you through it.\n\n─── load_tutorial | tutorial ──────────────────────────\nname: build-mcp-extension\n\n\n\nBefore we dive into building your extension, I need to understand a few things to better guide you:\n\n1. Which SDK would you prefer to use? We have three options:\n   - Python (beginner-friendly, great for prototyping)\n   - TypeScript (great for web-based tools)\n   - Kotlin (robust, type-safe, good for complex applications)\n\n2. What type of extension would you like to build? For example:\n   - A tool that performs specific actions\n   - A resource that provides data to the LLM\n   - Or do you have a specific idea in mind?\n\nLet me know your preferences, and I'll help you get started with the appropriate setup and implementation!\n\nFor reference, here's what we'll cover:\n1. Setting up your development environment\n2. Creating the basic MCP server\n3. Implementing your specific functionality\n4. Testing and debugging\n\nWhich SDK would you like to use to get started?\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Server Context Length\nDESCRIPTION: Command to start Ollama server with increased context length for better performance\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/experimental-features.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nOLLAMA_CONTEXT_LENGTH=32768 ollama serve\n```\n\n----------------------------------------\n\nTITLE: Running x86_64 Binary on Apple Silicon using Rosetta\nDESCRIPTION: This command uses the arch command to run the x86_64 Goose binary on an Apple Silicon Mac using Rosetta 2 emulation.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\narch -x86_64 ./goose help\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Goose Desktop App\nDESCRIPTION: Steps to clone the repository, install dependencies, and start the Goose Desktop App. Requires nvm, node, and rust to be installed.\nSOURCE: https://github.com/block/goose/blob/main/ui/desktop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:block/goose.git\ncd goose/ui/desktop\nnvm use\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Goose with Multi-line Standard Input\nDESCRIPTION: Shows how to pass multi-line instructions to Goose using standard input. This is useful for more complex commands or multiple tasks.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/running-tasks.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF | goose run -i -\nPlease help me with these tasks:\n1. Calculate 15% of 85\n2. Convert 32°C to Fahrenheit\nEOF\n```\n\n----------------------------------------\n\nTITLE: Default Gooseignore Patterns\nDESCRIPTION: Default patterns that Goose uses to restrict file access when no .gooseignore file is present. These patterns protect common sensitive files like environment variables and secrets.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/using-gooseignore.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n**/.env\n**/.env.*\n**/secrets.*\n```\n\n----------------------------------------\n\nTITLE: Provider Type Enum Definition in C\nDESCRIPTION: C enum definition for specifying the AI provider type, currently supporting only Databricks.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-ffi/README.md#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum {\n    PROVIDER_DATABRICKS = 0,  // Databricks AI provider\n} ProviderType;\n```\n\n----------------------------------------\n\nTITLE: Adding Chart Accessibility Features\nDESCRIPTION: Shows how to make charts accessible by adding ARIA roles, labels, and hidden table content for screen readers.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Recommended addition -->\n<div class=\"yumminess-chart\" \n     role=\"region\" \n     aria-label=\"Monthly yumminess ratings\">\n  <table class=\"sr-only\">\n    <!-- Add hidden table for screen readers -->\n  </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 for x86_64 Binary Testing on Apple Silicon\nDESCRIPTION: This command installs Rosetta 2 on Apple Silicon Macs, allowing for testing of x86_64 binaries.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsoftwareupdate --install-rosetta # make sure Rosetta 2 is installed\n```\n\n----------------------------------------\n\nTITLE: Building Rust Backend\nDESCRIPTION: Instructions for building and testing the Goose CLI using Cargo\nSOURCE: https://github.com/block/goose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Implementing Snowflake Feedback Tool with MCP in Python\nDESCRIPTION: Example of creating an MCP tool that integrates with Snowflake API to submit feedback. The function is decorated with @mcp.tool() and handles feedback submission through a Snowflake client instance.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-31-securing-mcp/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@mcp.tool()\nasync def submit_feedback(\n    feedback: str\n) -> Dict[str, Union[str, int, List]]:\n    \"\"\"Submit feedback to the Snowflake team.\n\n    Args:\n        feedback: Feedback message\n\n    Returns:\n        Dictionary containing feedback status\n    \"\"\"\n    return snowflake_client.submit_feedback(\n        feedback_text=feedback\n    )\n```\n\n----------------------------------------\n\nTITLE: Tool Calling Example with run_tests Function in JSON\nDESCRIPTION: This JSON snippet demonstrates the LLM calling the run_tests tool without parameters to verify the fix. It shows how an agent can validate changes by running tests automatically without user intervention.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-02-17-agentic-ai-mcp/index.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"tool\": \"run_tests\",\n    \"parameters\": {}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Refactoring Axios Error Handling\nDESCRIPTION: Suggested refactoring for improved error handling in the Axios _request method. This refactoring adds better type checking and wrapping of errors in AxiosError instances.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync _request(configOrUrl, config) {\n  try {\n    return await this.request(configOrUrl, config);\n  } catch (err) {\n    if (err instanceof AxiosError) {\n      throw err;\n    }\n    throw AxiosError.from(err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Goose Prompt for Figma Design Conversion\nDESCRIPTION: A sample prompt to instruct Goose to convert a Figma design into a webpage. Includes the file ID and specific requirements for implementation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/figma-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n( O)> Convert my figma design with file ID 7r0mLHWx2rrjwn79mcNVNE into a webpage. Get specific detailed information and styling about each element and components within each frame. Make sure to implement any interactions or animations and use a placeholder div with a gray background for images. \n\nSome elements are centralized, some are duplicated, make sure to get them correct. And ensure correct alignment and spacing between elements.\n```\n\n----------------------------------------\n\nTITLE: Creating CLI Entry Point in __init__.py\nDESCRIPTION: Implements the main entry point for the MCP Wiki CLI. Sets up argument parsing and runs the MCP server when the module is executed directly.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport argparse\nfrom .server import mcp\n\ndef main():\n    \"\"\"MCP Wiki: Read Wikipedia articles and convert them to Markdown.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Gives you the ability to read Wikipedia articles and convert them to Markdown.\"\n    )\n    parser.parse_args()\n    mcp.run()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with uv for Wikipedia Article Reader\nDESCRIPTION: Installs the required packages and sets up the virtual environment using the uv package manager.\nSOURCE: https://github.com/block/goose/blob/main/examples/mcp-wiki/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Referencing Tool Annotation in MCP Schema for Safety Controls\nDESCRIPTION: A link to the Model Context Protocol specification where tools can be annotated as 'readOnly' or 'destructive', providing a mechanism to implement appropriate security controls for different risk levels of operations.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-31-securing-mcp/index.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nhttps://github.com/modelcontextprotocol/specification/blob/9236eb1cbfa02c17ab45c83a7bdbe55c450070be/schema/2025-03-26/schema.ts#L730\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Tool in Kotlin\nDESCRIPTION: Kotlin code for adding an MCP tool to the server. It defines a tool with a name and description, and provides a lambda function to handle tool calls and return processed data as a ToolCallResult.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nserver.addTool(\n    name = \"example-tool\",\n    description = \"Example tool\"\n) { request ->\n    ToolCallResult(\n        content = listOf(\n            TextContent(\n                type = \"text\",\n                text = \"Processed ${request.arguments[\"param\"]}\"\n            )\n        )\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Config Merging in Axios Request Method\nDESCRIPTION: New unit test to verify proper merging of nested config objects in the Axios request method. This test ensures that headers from different sources (common, method-specific, and custom) are correctly combined.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should properly merge nested config objects', function(done) {\n  const instance = new Axios({\n    headers: {\n      common: {\n        'X-Common': 'common'\n      },\n      get: {\n        'X-Method': 'get'\n      }\n    }\n  });\n\n  instance.request({\n    method: 'get',\n    headers: {\n      'X-Custom': 'custom'\n    }\n  }).then(function(response) {\n    expect(response.config.headers['X-Common']).toBe('common');\n    expect(response.config.headers['X-Method']).toBe('get');\n    expect(response.config.headers['X-Custom']).toBe('custom');\n    done();\n  }).catch(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Method Aliases with Various Data Types in Axios\nDESCRIPTION: New unit test to verify correct handling of various data types in Axios HTTP method aliases (post, put, patch). This test ensures that different data types are correctly processed and sent with the request.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should handle various data types in post/put/patch', function(done) {\n  const instance = new Axios({});\n  const testCases = [\n    {method: 'post', data: {foo: 'bar'}},\n    {method: 'put', data: 'string data'},\n    {method: 'patch', data: new URLSearchParams('foo=bar')},\n    {method: 'post', data: new FormData()},\n    {method: 'put', data: new Blob(['test'])},\n    {method: 'patch', data: null}\n  ];\n\n  Promise.all(testCases.map(({method, data}) => {\n    return instance[method]('/foo', data).then(response => {\n      expect(response.config.data).toEqual(data);\n      return response;\n    });\n  })).then(() => done()).catch(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystem Extension in Rust\nDESCRIPTION: Demonstrates a complete example of a simple FileSystem extension. It includes the struct definition, a tool implementation using a macro, and the Extension trait implementation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/goose-architecture/extensions-design.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse goose_macros::tool;\n\nstruct FileSystem {\n    registry: ToolRegistry,\n    root_path: PathBuf,\n}\n\nimpl FileSystem {\n    #[tool(\n        name = \"read_file\",\n        description = \"Read contents of a file\"\n    )]\n    async fn read_file(&self, path: String) -> ToolResult<Value> {\n        let full_path = self.root_path.join(path);\n        let content = tokio::fs::read_to_string(full_path)\n            .await\n            .map_err(|e| ToolError::ExecutionError(e.to_string()))?;\n            \n        Ok(json!({ \"content\": content }))\n    }\n}\n\n#[async_trait]\nimpl Extension for FileSystem {\n    // ... implement trait methods ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Wikipedia Article Reader CLI Help Command\nDESCRIPTION: Runs the help command for the Wikipedia article reader CLI to verify its functionality.\nSOURCE: https://github.com/block/goose/blob/main/examples/mcp-wiki/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmcp-wiki --help\n```\n\n----------------------------------------\n\nTITLE: Java Class with NullPointerException Bug\nDESCRIPTION: This Java code snippet shows a UserService class with a potential NullPointerException. The db variable is declared but not initialized, which would cause an error when the getUser method tries to access it.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-02-17-agentic-ai-mcp/index.md#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class UserService {\n    private Database db;\n\n    public void getUser(String userId) {\n        System.out.println(db.findUserById(userId).getName());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Ollama Service Connection in WSL\nDESCRIPTION: Command to check if the Ollama service is running and accessible from WSL by requesting the available tags.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:11434/api/tags\n```\n\n----------------------------------------\n\nTITLE: Generating Comprehensive Marketing Meeting Overview using AI Assistant\nDESCRIPTION: This code snippet showcases an AI assistant's output for preparing a marketing strategy meeting. It includes Q1 performance summary, key decisions needed, outstanding action items, and Q2 planning considerations.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-drive-mcp.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nI'll help you prepare for your meeting. Let me first list available resources from Google Drive to make sure we access the correct files. \n\n[... list resources ...]\n\nGreat! I can see several relevant documents. Let me access them one by one to gather the information you need. \n\n[... reads resources ...]\n\nBased on all these documents, here's your comprehensive overview for the meeting: \n\nQ1 Performance Summary:\n\n  - Overall 5% under budget ($104,200 spent vs $107,000 budgeted)\n  - Digital Marketing performing well with highest ROI:\n      - Email marketing: 3.2 ROI\n      - Google Ads: 2.4 ROI\n      - Content Marketing: 2.1 ROI\n  - Social media engagement up 23% from previous quarter\n  - Content marketing blog posts generating 2x expected leads\n\nKey Decisions Needed:\n\n  1. Marketing Automation Tool (License Renewal Due):\n    - Current tool (BasicAutomation Pro): $12,000/year\n    - Options:\n        - GrowthStack ($15,000/year) - recommended option, balanced features/price\n        - MarketingHub Enterprise ($18,000/year) - premium option with AI features\n        - Decision needed on whether to upgrade or maintain current solution\n    - Implementation would take 6 weeks if changing providers\n\n  2. Video Production Investment:\n    - Three vendor options:\n        - CreativeForce Media ($16,200) - most comprehensive, unlimited revisions\n        - VisualCraft Studios ($14,500) - solid middle option\n        - Digital Narrative Pro ($12,800) - basic package\n    - CreativeForce Media is recommended despite higher cost due to comprehensive deliverables\n    - Timeline ranges from 3-5 weeks depending on vendor choice\n\nOutstanding Action Items from Last Meeting:\n\n  1. Sarah needs to present ROI analysis for video content investment\n  2. John needs to complete software license review\n  3. Lisa to present new PPC strategy\n  4. Mike has completed the video production agency quotes\n\nQ2 Planning Considerations:\n\n  - Proposed 12% budget increase for Q2 ($120,000 total)\n  - Potential reallocation needed based on new tool and video production decisions\n  - PPC strategy review pending\n\nWould you like me to focus on any particular aspect of this overview in more detail?\n```\n\n----------------------------------------\n\nTITLE: Customizing Goose Evaluation Settings\nDESCRIPTION: Examples of customizing benchmark evaluations with post-processing commands, additional data directories, and environment variables.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/benchmarking.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"evals\": [\n    {\n      \"selector\": \"core\",\n      \"post_process_cmd\": \"/path/to/process-script.sh\",\n      \"parallel_safe\": true\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include_dirs\": [\n    \"/path/to/custom/eval/data\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env_file\": \"/path/to/env-file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project with pyproject.toml\nDESCRIPTION: Project configuration that defines metadata, dependencies, and CLI script entry point. Specifies required packages including the MCP SDK, BeautifulSoup4, html2text, and requests.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"mcp-wiki\"\nversion = \"0.1.0\"\ndescription = \"MCP Server for Wikipedia\"\nreadme = \"README.md\"\nrequires-python = \">=3.13\"\ndependencies = [\n    \"beautifulsoup4>=4.12.3\",\n    \"html2text>=2024.2.26\",\n    \"mcp[cli]>=1.2.0\",\n    \"requests>=2.32.3\",\n]\n\n[project.scripts]\nmcp-wiki = \"mcp_wiki:main\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Goose AI Session\nDESCRIPTION: Command to start a new Goose AI session. This initiates an interactive environment where you can give instructions to the AI assistant.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-11-22-screenshot-driven-development/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoose session start\n```\n\n----------------------------------------\n\nTITLE: Final Agent Response to User in Plain Text\nDESCRIPTION: This snippet shows the final response the AI agent delivers to the user after fixing the NullPointerException. It summarizes the action taken and confirms successful testing, demonstrating the end-to-end workflow of an AI agent.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-02-17-agentic-ai-mcp/index.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nI've fixed the NullPointerException in UserService.java by initializing the db variable. All tests have passed. Let me know if you need further modifications!\n```\n\n----------------------------------------\n\nTITLE: Langfuse Environment Setup\nDESCRIPTION: Environment variables configuration for Langfuse tracing integration\nSOURCE: https://github.com/block/goose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport LANGFUSE_INIT_PROJECT_PUBLIC_KEY=publickey-local\nexport LANGFUSE_INIT_PROJECT_SECRET_KEY=secretkey-local\n```\n\n----------------------------------------\n\nTITLE: Parsing Benchmark Results\nDESCRIPTION: Command showing how to use parse-benchmark-results.sh script to analyze a benchmark results JSON file.\nSOURCE: https://github.com/block/goose/blob/main/scripts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/parse-benchmark-results.sh path/to/benchmark-results.json\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Resource in Python\nDESCRIPTION: Python code demonstrating how to implement an MCP resource using a decorator. This resource function takes a parameter and returns a formatted string response.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@mcp.resource(\"example://{param}\")\ndef get_example(param: str) -> str:\n    return f\"Data for {param}\"\n```\n\n----------------------------------------\n\nTITLE: Starting UI Development\nDESCRIPTION: Command to run the Electron-based GUI for development\nSOURCE: https://github.com/block/goose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njust run-ui\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Tool in Python\nDESCRIPTION: Python code demonstrating how to implement an MCP tool using a decorator. This tool function takes a parameter, processes it, and returns a formatted string response.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@mcp.tool()\ndef example_tool(param: str) -> str:\n    \"\"\"Example description for tool\"\"\"\n    return f\"Processed {param}\"\n```\n\n----------------------------------------\n\nTITLE: Tutorial Initiation Example\nDESCRIPTION: Example showing a complete interaction for starting a tutorial session about building extensions.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tutorial-extension.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nI'd like to learn how to build an extension for Goose\n```\n\n----------------------------------------\n\nTITLE: Accessing Dependencies in Rust Extension\nDESCRIPTION: Example of how to access dependencies within an extension's tool implementation. This snippet demonstrates using the calendar dependency to fetch appointments.\nSOURCE: https://github.com/block/goose/blob/main/ARCHITECTURE.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[tool]\nfn example_dependency(&self) {\n    let appointments = self.calendar.appointments();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Images\nDESCRIPTION: Demonstrates proper image accessibility implementation with alt text and ARIA roles for better screen reader support.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Current -->\n<img src=\"chocolate-cake.jpg\">\n\n<!-- Recommended -->\n<img \n  src=\"chocolate-cake.jpg\" \n  alt=\"Chocolate cake with dark chocolate frosting\"\n  role=\"img\">\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Login API Endpoint in JavaScript\nDESCRIPTION: Example of a vulnerable login API endpoint in JavaScript. This code snippet demonstrates common security issues such as SQL injection and weak authentication.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/knowledge-graph-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\napp.post('/api/login', (req, res) => {\n    const { username, password } = req.body;\n    const query = `SELECT * FROM users WHERE username = '${username}'`;\n    db.query(query, (err, result) => {\n        if (err) throw err;\n        if (result.length > 0) {\n        res.cookie('user', username);\n        res.json({ success: true });\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Output Directory Structure\nDESCRIPTION: Example of the benchmark output directory hierarchy showing where results are stored.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/benchmarking.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbenchmark-${datetime}/\n  ${model}-${provider}[-tool-shim[-${shim-model}]]/\n    run-${i}/\n      ${an-include_dir-asset}\n      run-results-summary.json\n      core/developer/list_files/\n        ${an-include_dir-asset}\n        run-results-summary.json\n```\n\n----------------------------------------\n\nTITLE: Running Headless Goose Session for Testing\nDESCRIPTION: Bash commands to run a headless Goose session with the MCP extension for Python, TypeScript, and Kotlin. These commands allow automated testing with a specific prompt.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Python example\ngoose run --with-extension \"python server.py\" --text \"EXAMPLE PROMPT HERE\"\n\n# TypeScript example\ngoose run --with-extension \"node server.js\" --text \"EXAMPLE PROMPT HERE\"\n\n# Kotlin example\ngoose run --with-extension \"java -jar build/libs/extension.jar\" --text \"EXAMPLE PROMPT HERE\"\n```\n\n----------------------------------------\n\nTITLE: Adding Logging for Debugging in TypeScript\nDESCRIPTION: TypeScript code showing how to implement file-based logging in an MCP extension for debugging. It defines a custom log function and demonstrates its usage in a tool implementation to log debug and error information.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from \"fs\";\n\nfunction log(message: string) {\n  fs.appendFileSync(\n    \"mcp_extension.log\",\n    `${new Date().toISOString()} - ${message}\\n`,\n  );\n}\n\nserver.tool(\"example-tool\", { param: z.string() }, async ({ param }) => {\n  log(`example-tool called with param: ${param}`);\n  try {\n    const result = `Processed ${param}`;\n    log(`example-tool succeeded: ${result}`);\n    return {\n      content: [{ type: \"text\", text: result }],\n    };\n  } catch (error) {\n    log(`example-tool failed: ${error}`);\n    throw error;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Building Exchange Object in Rust\nDESCRIPTION: Function signature for building the Exchange object, which is the core of Goose's execution logic. It takes a Profile and Notifier as input and returns an Exchange object.\nSOURCE: https://github.com/block/goose/blob/main/ARCHITECTURE.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn build_exchange(profile: Profile, notifier: Notifier) -> Exchange {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: The expected directory structure for the MCP server project after initialization. Shows the hierarchy of files and folders including the main Python module structure.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/custom-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md\n├── pyproject.toml\n├── src\n│   └── mcp_wiki\n│       ├── __init__.py\n│       ├── __main__.py\n│       └── server.py\n└── uv.lock\n```\n\n----------------------------------------\n\nTITLE: Adding Logging for Debugging in Kotlin\nDESCRIPTION: Kotlin code illustrating how to add file-based logging to an MCP extension for debugging. It defines a custom log function and shows its usage in a tool implementation to log debug and error information.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-mcp/src/tutorial/tutorials/build-mcp-extension.md#2025-04-21_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.io.File\nimport java.time.LocalDateTime\n\nfun log(message: String) {\n    File(\"mcp_extension.log\").appendText(\"${LocalDateTime.now()} - $message\\n\")\n}\n\nserver.addTool(\n    name = \"example-tool\",\n    description = \"Example tool\"\n) { request ->\n    log(\"example-tool called with param: ${request.arguments[\"param\"]}\")\n    try {\n        val result = \"Processed ${request.arguments[\"param\"]}\"\n        log(\"example-tool succeeded: $result\")\n        ToolCallResult(\n            content = listOf(\n                TextContent(\n                    type = \"text\",\n                    text = result\n                )\n            )\n        )\n    } catch (e: Exception) {\n        log(\"example-tool failed: ${e.message}\")\n        throw e\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Goose Prompt for Conference Data Extraction\nDESCRIPTION: A sample prompt for the AgentQL extension that requests extraction of tech conference data to help plan speaking engagements, specifying the data points to collect and structure as JSON.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/agentql-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nI'm a tech conference speaker planning my 2025-2026 submissions. \n\nExtract for developer conferences (attendance > 500) occurring between 2022-2024:\n- Conference name\n- Conference dates\n- CFP timeline \n\nTo identify:\n- Consistent monthly patterns\n- Whether conferences stick to same months yearly\n- If CFP windows are consistent year-to-year\n- Any shifts in traditional timing\n\nStructure results as JSON\n```\n\n----------------------------------------\n\nTITLE: Running ARM64 Ubuntu Container for Binary Testing\nDESCRIPTION: This command runs an ARM64 Ubuntu container, mounting the current directory (containing the built binary) for testing purposes.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v $(pwd):/app -it arm64v8/ubuntu /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Server with SSE Transport\nDESCRIPTION: This command starts the MCP server using the SSE (Server-Sent Events) transport method. It runs the 'echo.py' script using the 'fastmcp' command.\nSOURCE: https://github.com/block/goose/blob/main/crates/mcp-client/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastmcp run -t sse echo.py\n```\n\n----------------------------------------\n\nTITLE: Testing Interceptor Error Handling in Axios\nDESCRIPTION: New unit test to verify proper error handling in Axios interceptors. This test ensures that errors thrown in interceptors are correctly propagated and caught in the request chain.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should handle interceptor errors properly', function(done) {\n  const instance = new Axios({});\n  const error = new Error('Interceptor Error');\n\n  instance.interceptors.request.use(function() {\n    throw error;\n  });\n\n  instance.request('/foo').catch(function(e) {\n    expect(e).toBe(error);\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Building Release for aarch64-unknown-linux-gnu using Cross\nDESCRIPTION: This command builds a release version for the aarch64-unknown-linux-gnu target using Cross. It specifies platform options for both the build and container.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nCROSS_BUILD_OPTS=\"--platform linux/amd64 --no-cache\" CROSS_CONTAINER_OPTS=\"--platform linux/amd64\" cross build --release --target aarch64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Running MCP Client with SSE Transport\nDESCRIPTION: This command runs the MCP client example using the SSE transport method. It uses Cargo to execute the example from the mcp-client package.\nSOURCE: https://github.com/block/goose/blob/main/crates/mcp-client/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p mcp-client --example sse\n```\n\n----------------------------------------\n\nTITLE: Dependency Update and Security Audit Commands\nDESCRIPTION: Shell commands for updating dependencies and running security audits in npm projects\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/filesystem-mcp.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# In each project directory\nnpm install\nnpm audit\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Without SSH\nDESCRIPTION: This command deploys the Docusaurus website without using SSH. It requires specifying the GitHub username and is used for GitHub Pages hosting, building the site and pushing to the 'gh-pages' branch.\nSOURCE: https://github.com/block/goose/blob/main/documentation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Test Results Response in JSON\nDESCRIPTION: This JSON snippet shows the results of running tests after fixing the code. It includes a boolean flag indicating all tests passed and an empty array of failed tests, confirming the NullPointerException was successfully resolved.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-02-17-agentic-ai-mcp/index.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tests_passed\": true,\n  \"failed_tests\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Cross-created Docker Container for Debugging\nDESCRIPTION: This command runs an interactive bash session in the Docker container created by Cross, allowing for debugging and inspection of the build environment.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --platform linux/amd64 -it <image-id> /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose Profiles with Screen Toolkit\nDESCRIPTION: YAML configuration for enabling the Screen toolkit in Goose's profiles. This configuration sets up the default LLM provider and enables both the developer and screen toolkits which extend Goose's functionality.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-11-22-screenshot-driven-development/index.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  provider: openai\n  processor: gpt-4o\n  accelerator: gpt-4o-mini\n  moderator: truncate\n  toolkits:\n  - name: developer\n    requires: {}\n  - name: screen\n    requires: {}\n```\n\n----------------------------------------\n\nTITLE: Rendering Personal Greeting Template\nDESCRIPTION: This snippet demonstrates a simple template with placeholders for a person's name and age. It uses double curly braces {{ }} as delimiters for the variable insertions.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose/src/prompts/mock.md#2025-04-21_snippet_0\n\nLANGUAGE: Template\nCODE:\n```\nHello, {{ name }}! You are {{ age }} years old.\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using SSH\nDESCRIPTION: This command deploys the Docusaurus website using SSH. It's typically used for GitHub Pages hosting, building the site and pushing to the 'gh-pages' branch.\nSOURCE: https://github.com/block/goose/blob/main/documentation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Using PDF Reader Extension to Analyze Resume\nDESCRIPTION: Example Goose prompt demonstrating how to use the PDF Reader extension to analyze a resume PDF file. The prompt asks for evaluation of specific job requirements and scoring.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/pdf-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nRead the resume at ~/Downloads/resume.pdf and evaluate how well this candidate aligns with the following role requirements:\n\n  - 5+ years of backend development experience\n  - Strong system design and distributed systems knowledge\n  - Cloud infrastructure experience (AWS preferred)\n  - Prior experience leading technical projects or teams\n  - Bonus: familiarity with LLMs or AI/ML tools\n\nGive a score out of 5 for each requirement, supporting evidence, and a summary at the end with pros, cons, and a decision: Strong Fit / Moderate Fit / Weak Fit.\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Carousel Component in React/JSX\nDESCRIPTION: React/JSX component that implements an image carousel to display Wiki page outputs from different AI models. The component accepts an array of images and corresponding model names as props.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-31-goose-benchmark/index.md#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ImageCarousel id=\"wiki\" width=\"80%\" images={[\n   require('./wiki_pages_carousel/gemma3.27b-toolshim-mistral-nemo.png').default,\n   require('./wiki_pages_carousel/claude-3.5-haiku.png').default,\n   require('./wiki_pages_carousel/claude-3.5-sonnet-2.png').default,\n   // ... additional images\n   ]} \n   names={[\n   \"gemma3.27b-toolshim-mistral-nemo\",\n   \"claude-3.5-haiku\",\n   \"claude-3.5-sonnet-2\",\n   // ... additional names\n   ]}/>\n```\n\n----------------------------------------\n\nTITLE: Removing Quarantine Attribute from macOS Binary\nDESCRIPTION: This command removes the quarantine attribute from the Goose binary on macOS, which may be necessary if the binary is signed with a certificate.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nxattr -d com.apple.quarantine goose\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the blog post, defining title, description and authors.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-10-goose-calls-vyop/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Automating Phone Calls with Goose\"\ndescription: Practical tips to help you use Goose more effectively and efficiently.\nauthors: \n    - angie\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Goose for PR Summary using GitHub MCP\nDESCRIPTION: Example of using Goose with the GitHub MCP to generate a changelog from a pull request. This demonstrates how to leverage AI for PR analysis and documentation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-01-top-5-mcp-servers/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nHey Goose, this pull request https://github.com/block/goose/pull/1949, has a lot of changes. Can you summarize into a changelog for me?\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Media Meta Tags in HTML\nDESCRIPTION: HTML meta tags configuration for social media sharing, including OpenGraph and Twitter card properties for the Goose benchmark article.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-31-goose-benchmark/index.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"Community-Inspired Benchmarking: The Goose Vibe Check\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/03/31/goose-benchmark\" />\n  <meta property=\"og:description\" content=\"See how open source AI models measure up in our first Goose agent benchmark tests\" />\n  <meta property=\"og:image\" content=\"http://block.github.io/goose/assets/images/goose-benchmark-d9726c203290ef892fe3fe3adc7d898f.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"Community-Inspired Benchmarking: The Goose Vibe Check\" />\n  <meta name=\"twitter:description\" content=\"See how open source AI models measure up in our first Goose agent benchmark tests\" />\n  <meta name=\"twitter:image\" content=\"http://block.github.io/goose/assets/images/goose-benchmark-d9726c203290ef892fe3fe3adc7d898f.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Adding Skip Navigation Link\nDESCRIPTION: Implementation of skip navigation link for improved keyboard accessibility.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#main-content\" class=\"skip-link\">\n  Skip to main content\n</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenGraph and Twitter Card Meta Tags in HTML\nDESCRIPTION: HTML meta tags implementation for social media sharing optimization, including OpenGraph and Twitter Card properties. Sets up title, description, image and other metadata for social media platforms.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-10-visual-guide-mcp/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"A Visual Guide To MCPs\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp\" />\n  <meta property=\"og:description\" content=\"Visual breakdown of MCP: How your agent, tools, and models work together.\" />\n  <meta property=\"og:image\" content=\"https://block.github.io/goose/assets/images/mcpblog-40894789122bda594a8576ebcb67a2d8.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"A Visual Guide To MCPs\" />\n  <meta name=\"twitter:description\" content=\"Visual breakdown of MCP: How your AI agent, tools, and models work together.\" />\n  <meta name=\"twitter:image\" content=\"https://block.github.io/goose/assets/images/mcpblog-40894789122bda594a8576ebcb67a2d8.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Implementing Open Graph and Twitter Card Metadata in HTML\nDESCRIPTION: This HTML code snippet implements metadata tags for Open Graph and Twitter Card to optimize how the blog post appears when shared on social media platforms. It includes title, description, URL, image, and card type settings.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-18-goose-langfuse/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"How Goose Catches AI Errors with Langfuse\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/03/18/goose-langfuse\" />\n  <meta property=\"og:description\" content=\"Get detailed insights into Goose's behavior with Langfuse's observability tools.\" />\n  <meta property=\"og:image\" content=\"http://block.github.io/goose/assets/images/goose_aierrors-22154af884db86789ce1a12a72897e8e.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"How Goose Catches AI Errors with Langfuse\" />\n  <meta name=\"twitter:description\" content=\"Get detailed insights into Goose's behavior with Langfuse's observability tools.\" />\n  <meta name=\"twitter:image\" content=\"http://block.github.io/goose/assets/images/goose_aierrors-22154af884db86789ce1a12a72897e8e.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in Axios Request Method\nDESCRIPTION: New unit test to handle null/undefined config values in the Axios request method. This test ensures that the request method correctly processes configurations with null or undefined values for params and data.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/repomix-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('should handle null/undefined config values', function(done) {\n  const instance = new Axios({});\n  \n  instance.request({\n    url: '/foo',\n    params: null,\n    data: undefined\n  }).then(function(response) {\n    expect(response.config.params).toBeNull();\n    expect(response.config.data).toBeUndefined();\n    done();\n  }).catch(done);\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Head Meta Tags\nDESCRIPTION: HTML meta tags for social media sharing and SEO optimization\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-08-vibe-code-responsibly/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"How to Vibe Code Responsibly (with Goose)\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/04/08/vibe-code-responsibly\" />\n  <meta property=\"og:description\" content=\"Vibe coding feels magical until it isn't. Learn how to flow with Goose while protecting your code, your team, and your future self.\" />\n  <meta property=\"og:image\" content=\"http://block.github.io/goose/assets/images/responsible-vibe-code-a77f5e24a879edda943cc76f1fc0bd2a.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"How to Vibe Code Responsibly (with Goose)\" />\n  <meta name=\"twitter:description\" content=\"Vibe coding feels magical until it isn't. Learn how to flow with Goose while protecting your code, your team, and your future self.\" />\n  <meta name=\"twitter:image\" content=\"http://block.github.io/goose/assets/images/responsible-vibe-code-a77f5e24a879edda943cc76f1fc0bd2a.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Example Goose Output for Computer Controller Tasks\nDESCRIPTION: Sample output from Goose showing the execution of various automated tasks using the Computer Controller extension. The output shows Goose breaking down tasks into discrete steps including web searches, automation scripts, and computer control commands.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/computer-controller-mcp.md#2025-04-21_snippet_3\n\nLANGUAGE: md\nCODE:\n```\nI'll help you create a relaxing research environment and gather information about AI models. I'll break this down into steps:\n\n1. First, let's set up the relaxing environment with classical music and dimmed screen:\n\n─── computer_control | computercontroller ──────────────────────────\nscript: ...\n\n\n\n2. Now, let's research the AI models. I'll use web search and scraping to gather\n information from official sources:\n\n─── web_search | computercontroller ──────────────────────────\nquery: Claude\n\n\n\n\n─── web_search | computercontroller ──────────────────────────\nquery: GPT4\n\n\n\n\n─── web_search | computercontroller ──────────────────────────\nquery: Gemini\n\n\n\n3. Let's create the CSV file with the collected information:\n\n─── automation_script | computercontroller ──────────────────────────\nlanguage: shell\nscript: ...\n\n\n\n4. Now, let's open the CSV file in Numbers and reset the environment:\n\n─── computer_control | computercontroller ──────────────────────────\nscript: ...\n\nI've completed all the requested tasks:\n1. ✅ Played classical music in Safari\n2. ✅ Dimmed screen brightness\n3. ✅ Researched current flagship AI models\n4. ✅ Created the CSV file on desktop\n5. ✅ Launched Numbers and opened the CSV file\n6. ✅ Reset brightness and closed Safari\n\nThe CSV file has been created on your desktop with the following information for each model:\n- Model name\n- Company\n- Release date\n- Key features\n- Context window size\n- Pricing information\n\nThe file is now open in Numbers for your review. The environment has been reset to normal settings. Is there anything specific about any of the models you'd like me to elaborate on?\n```\n\n----------------------------------------\n\nTITLE: Structured Image Analysis Output Example in JSON\nDESCRIPTION: Example JSON structure demonstrating how to format image analysis results with structured outputs when using Ollama. Shows scene description, object detection with confidence scores, and image attributes.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-14-goose-ollama/index.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scene\": \"sunset over mountains\",\n  \"objects\": [\n    {\n      \"type\": \"sun\",\n      \"attributes\": [\"orange\", \"setting\", \"partially visible\"],\n      \"confidence\": 0.95\n    },\n    {\n      \"type\": \"mountains\",\n      \"attributes\": [\"silhouetted\", \"range\", \"distant\"],\n      \"confidence\": 0.92\n    },\n    {\n      \"type\": \"sky\",\n      \"attributes\": [\"gradient\", \"orange to purple\", \"clear\"],\n      \"confidence\": 0.98\n    }\n  ],\n  \"mood\": \"peaceful\",\n  \"lighting\": \"golden hour\",\n  \"composition\": \"rule of thirds\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Head Metadata Configuration for MCP Blog Post\nDESCRIPTION: HTML head section containing metadata for the blog post about connecting AI agents to systems with MCP. Includes meta tags for character set, title, description, keywords, and social media sharing tags for Facebook and Twitter.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-12-10-connecting-ai-agents-to-your-systems-with-mcp/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Connecting AI Agents to Your Systems with MCP</title>\n  <meta name=\"description\" content=\"Goose\" />\n  <meta name=\"keywords\" content=\"MCP, Anthropic, AI Open Standards\" />\n\n\n  <!-- HTML Meta Tags -->\n  <title>Connecting AI Agents to Your Systems with MCP</title>\n  <meta name=\"description\" content=\"Learn how MCP standardizes integrations and fosters an ecosystem for the future of AI-enabled tools.\" />\n\n  <!-- Facebook Meta Tags -->\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2024/12/10/connecting-ai-agents-to-your-systems-with-mcp\" />\n  <meta property=\"og:type\" content=\"website\" />\n  <meta property=\"og:title\" content=\"Connecting AI Agents to Your Systems with MCP\" />\n  <meta property=\"og:description\" content=\"Learn how MCP standardizes integrations and fosters an ecosystem for the future of AI-enabled tools.\" />\n  <meta property=\"og:image\" content=\"https://block.github.io/goose/assets/images/goose-mcp-34a5252d18d18dff26157d673f7af779.png\" />\n\n  <!-- Twitter Meta Tags -->\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io\" />\n  <meta property=\"twitter:url\" content=\"https://block.github.io/goose/blog/2024/12/10/connecting-ai-agents-to-your-systems-with-mcp\" />\n  <meta name=\"twitter:title\" content=\"Connecting AI Agents to Your Systems with MCP\" />\n  <meta name=\"twitter:description\" content=\"Learn how MCP standardizes integrations and fosters an ecosystem for the future of AI-enabled tools.\" />\n  <meta name=\"twitter:image\" content=\"https://block.github.io/goose/assets/images/goose-mcp-34a5252d18d18dff26157d673f7af779.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Verifying CLI Installation for Wikipedia Article Reader\nDESCRIPTION: Lists the contents of the virtual environment's bin directory to verify the CLI tool installation.\nSOURCE: https://github.com/block/goose/blob/main/examples/mcp-wiki/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nls .venv/bin/\n```\n\n----------------------------------------\n\nTITLE: Building Release for aarch64-apple-darwin using Cross\nDESCRIPTION: This command builds a release version for the aarch64-apple-darwin target using Cross. Note that this may fall back to the host machine if no Docker image is available.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncross build --release --target aarch64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Markdown Links and References\nDESCRIPTION: A collection of markdown reference-style links pointing to various documentation pages and support resources for the Goose project.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[handling-rate-limits]: /docs/guides/handling-llm-rate-limits-with-goose\n[installation]: /docs/getting-started/installation\n[discord]: https://discord.gg/block-opensource\n[goosehints]: /docs/guides/using-goosehints\n[configure-llm-provider]: /docs/getting-started/providers\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenGraph and Twitter Card Meta Tags in HTML\nDESCRIPTION: HTML head section containing meta tags for social media sharing, including OpenGraph and Twitter Card implementations for article preview data.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-02-21-gooseteam-mcp/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"Let A Team of AI Agents Do It For You\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/02/17/gooseteam-mcp\" />\n  <meta property=\"og:description\" content=\"Community Spotlight on Cliff Hall's GooseTeam MCP server.\" />\n  <meta property=\"og:image\" content=\"https://block.github.io/goose/assets/images/gooseteam-mcp-082fa2890c313519c2a1637ca979c219.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"Let A Team of AI Agents Do It For You\" />\n  <meta name=\"twitter:description\" content=\"Community Spotlight on Cliff Hall's GooseTeam MCP server.\" />\n  <meta name=\"twitter:image\" content=\"https://block.github.io/goose/assets/images/gooseteam-mcp-082fa2890c313519c2a1637ca979c219.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Calendar UI with HTML and CSS\nDESCRIPTION: Complete HTML file with CSS styling for a basic calendar interface that serves as the starting point for design transformations. The calendar includes a month header, day labels, and a grid of numbered days with styling for inactive days and the current day.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-11-22-screenshot-driven-development/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            background: linear-gradient(45deg, #6e48aa, #9c27b0);\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n        }\n\n        .calendar {\n            background: white;\n            border-radius: 12px;\n            box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n            width: 400px;\n            padding: 20px;\n        }\n\n        .header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding-bottom: 20px;\n            border-bottom: 2px solid #f0f0f0;\n        }\n\n        .month {\n            font-size: 24px;\n            font-weight: 600;\n            color: #1a1a1a;\n        }\n\n        .days {\n            display: grid;\n            grid-template-columns: repeat(7, 1fr);\n            gap: 10px;\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        .days-header {\n            display: grid;\n            grid-template-columns: repeat(7, 1fr);\n            gap: 10px;\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        .days-header span {\n            color: #666;\n            font-weight: 500;\n            font-size: 14px;\n        }\n\n        .day {\n            aspect-ratio: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            border-radius: 50%;\n            font-size: 14px;\n            color: #333;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n\n        .day:hover {\n            background: #f0f0f0;\n        }\n\n        .day.today {\n            background: #9c27b0;\n            color: white;\n        }\n\n        .day.inactive {\n            color: #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"calendar\">\n        <div class=\"header\">\n            <div class=\"month\">November 2024</div>\n        </div>\n        <div class=\"days-header\">\n            <span>Sun</span>\n            <span>Mon</span>\n            <span>Tue</span>\n            <span>Wed</span>\n            <span>Thu</span>\n            <span>Fri</span>\n            <span>Sat</span>\n        </div>\n        <div class=\"days\">\n            <div class=\"day inactive\">27</div>\n            <div class=\"day inactive\">28</div>\n            <div class=\"day inactive\">29</div>\n            <div class=\"day inactive\">30</div>\n            <div class=\"day inactive\">31</div>\n            <div class=\"day\">1</div>\n            <div class=\"day\">2</div>\n            <div class=\"day\">3</div>\n            <div class=\"day\">4</div>\n            <div class=\"day\">5</div>\n            <div class=\"day\">6</div>\n            <div class=\"day\">7</div>\n            <div class=\"day\">8</div>\n            <div class=\"day\">9</div>\n            <div class=\"day\">10</div>\n            <div class=\"day\">11</div>\n            <div class=\"day\">12</div>\n            <div class=\"day\">13</div>\n            <div class=\"day today\">14</div>\n            <div class=\"day\">15</div>\n            <div class=\"day\">16</div>\n            <div class=\"day\">17</div>\n            <div class=\"day\">18</div>\n            <div class=\"day\">19</div>\n            <div class=\"day\">20</div>\n            <div class=\"day\">21</div>\n            <div class=\"day\">22</div>\n            <div class=\"day\">23</div>\n            <div class=\"day\">24</div>\n            <div class=\"day\">25</div>\n            <div class=\"day\">26</div>\n            <div class=\"day\">27</div>\n            <div class=\"day\">28</div>\n            <div class=\"day\">29</div>\n            <div class=\"day\">30</div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Programmer Jokes Game with HTML, CSS, and JavaScript\nDESCRIPTION: A complete HTML document that creates an interactive joke guessing game. It uses the official-joke-api.appspot.com API to fetch programming jokes, allows users to guess punchlines, and provides feedback on their answers. Includes styled UI components and asynchronous JavaScript for API interaction.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/fetch-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Programmer Jokes</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            text-align: center;\n        }\n        .container {\n            background-color: #f5f5f5;\n            padding: 20px;\n            border-radius: 10px;\n            margin-top: 20px;\n        }\n        .setup {\n            font-size: 1.2em;\n            margin-bottom: 20px;\n        }\n        .guess-container {\n            margin-bottom: 20px;\n        }\n        #guessInput {\n            padding: 10px;\n            width: 300px;\n            margin-right: 10px;\n        }\n        button {\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n        .result {\n            margin-top: 20px;\n            font-weight: bold;\n        }\n        .correct {\n            color: green;\n        }\n        .incorrect {\n            color: red;\n        }\n        #punchline {\n            display: none;\n            margin-top: 20px;\n            font-style: italic;\n        }\n    </style>\n</head>\n<body>\n    <h1>Programmer Jokes</h1>\n    <div class=\"container\">\n        <div id=\"setup\" class=\"setup\">Loading joke...</div>\n        <div class=\"guess-container\">\n            <input type=\"text\" id=\"guessInput\" placeholder=\"Guess the punchline...\">\n            <button onclick=\"checkGuess()\">Submit Guess</button>\n        </div>\n        <div id=\"result\" class=\"result\"></div>\n        <div id=\"punchline\"></div>\n        <button onclick=\"getNewJoke()\" style=\"margin-top: 20px;\">Get Another Joke</button>\n    </div>\n\n    <script>\n        let currentJoke = null;\n\n        async function getNewJoke() {\n            try {\n                const response = await fetch('https://official-joke-api.appspot.com/jokes/programming/random');\n                const jokes = await response.json();\n                currentJoke = jokes[0];\n                \n                document.getElementById('setup').textContent = currentJoke.setup;\n                document.getElementById('guessInput').value = '';\n                document.getElementById('result').textContent = '';\n                document.getElementById('punchline').style.display = 'none';\n                document.getElementById('guessInput').disabled = false;\n            } catch (error) {\n                document.getElementById('setup').textContent = 'Error loading joke. Please try again.';\n            }\n        }\n\n        function checkGuess() {\n            const guess = document.getElementById('guessInput').value.trim().toLowerCase();\n            const punchline = currentJoke.punchline.toLowerCase();\n            const resultElement = document.getElementById('result');\n            const punchlineElement = document.getElementById('punchline');\n\n            if (guess === punchline) {\n                resultElement.textContent = 'Correct! You got it! 🎉';\n                resultElement.className = 'result correct';\n            } else {\n                resultElement.textContent = 'Not quite! Here\\'s the punchline:';\n                resultElement.className = 'result incorrect';\n            }\n\n            punchlineElement.textContent = currentJoke.punchline;\n            punchlineElement.style.display = 'block';\n            document.getElementById('guessInput').disabled = true;\n        }\n\n        // Load first joke when page loads\n        getNewJoke();\n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Context Length for Ollama Models\nDESCRIPTION: Shows how to increase the context length for Ollama models using an environment variable to prevent running out of space in the context window. This command sets the context length to 28,672 tokens when serving Ollama models.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-31-goose-benchmark/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOLLAMA_CONTEXT_LENGTH=28672 ollama serve\n```\n\n----------------------------------------\n\nTITLE: Setting Up QEMU and Pulling ARM64 Ubuntu Image for Testing\nDESCRIPTION: These commands set up QEMU for ARM64 emulation and pull an ARM64 Ubuntu Docker image for testing the built binary.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\ndocker pull arm64v8/ubuntu\n```\n\n----------------------------------------\n\nTITLE: Installing Speech MCP Extension via UV Package Manager\nDESCRIPTION: Command to install the Speech MCP extension using the UV package manager with Python 3.10.14\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/speech-mcp.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nuvx -p 3.10.14 speech-mcp@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing SEO Meta Tags\nDESCRIPTION: HTML meta tags implementation for SEO and social media sharing, including Open Graph and Twitter card metadata.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-17-goose-goes-to-NY/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"Codename Goose Goes to New York\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/04/14/community-atruelight4\" />\n  <meta property=\"og:description\" content=\"Goose lands in NYC for its second community meetup\" />\n  <meta property=\"og:image\" content=\"https://block.github.io/goose/assets/images/cover-6c131d275bcdb4d8651a140d62e2975f.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"Codename Goose Goes to New York\" />\n  <meta name=\"twitter:description\" content=\"Goose lands in NYC for its second community meetup\" />\n  <meta name=\"twitter:image\" content=\"https://block.github.io/goose/assets/images/cover-6c131d275bcdb4d8651a140d62e2975f.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Importing Image Assets in React\nDESCRIPTION: Import statements for loading multiple image assets to be used in an image carousel component.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-17-goose-goes-to-NY/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ImageCarousel from '@site/src/components/ImageCarousel';\nimport swag from './swag2.jpg';\nimport swag1 from './swag1.jpg';\nimport swag2 from './swag.jpg';\nimport swag3 from './swag3.jpg';\nimport focus from './focus.jpg';\nimport focus2 from './focus2.jpg';\nimport focus3 from './focus3.jpg';\nimport focus4 from './focus5.jpg';\nimport focus5 from './focus4.jpg';\nimport speaker from './speaker.jpg';\nimport speaker1 from './speaker1.jpg';\nimport fun from './fun.jpg';\nimport fun1 from './fun1.jpg';\n```\n\n----------------------------------------\n\nTITLE: Running Goose and Filtering Output in GitHub Actions\nDESCRIPTION: This YAML snippet shows how to run Goose with the prepared instructions and clean the output by removing unnecessary information.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/cicd.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: Run Goose and filter output\n      run: |\n          goose run --instructions instructions.txt | \\\n            # Remove ANSI color codes\n            sed -E 's/\\x1B\\[[0-9;]*[mK]//g' | \\\n            # Remove session/logging lines\n            grep -v \"logging to /home/runner/.config/goose/sessions/\" | \\\n            grep -v \"^starting session\" | \\\n            grep -v \"^Closing session\" | \\\n            # Trim trailing whitespace\n            sed 's/[[:space:]]*$//' \\\n            > pr_comment.txt\n```\n\n----------------------------------------\n\nTITLE: Building Release for x86_64-unknown-linux-gnu using Cross\nDESCRIPTION: This command builds a release version for the x86_64-unknown-linux-gnu target using Cross, specifying platform options for both the build and container.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nCROSS_BUILD_OPTS=\"--platform linux/amd64 --no-cache\" CROSS_CONTAINER_OPTS=\"--platform linux/amd64\" cross build --release --target x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Tags Configuration for Social Media\nDESCRIPTION: Configuration of Open Graph and Twitter Card meta tags for social media sharing, including title, description, image and URL properties.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-10-goose-calls-vyop/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"Wild Goose Case: Automating Phone Calls with Goose and VOYP\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/03/06/goose-tips\" />\n  <meta property=\"og:description\" content=\"Give Goose the ability to make phone calls with the VOYP extension.\" />\n  <meta property=\"og:image\" content=\"https://block.github.io/goose/assets/images/goose-voyp-215f3391cfbe2132542a2be63db84999.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"Wild Goose Case: Automating Phone Calls with Goose and VOYP\" />\n  <meta name=\"twitter:description\" content=\"Give Goose the ability to make phone calls with the VOYP extension.\" />\n  <meta name=\"twitter:image\" content=\"https://block.github.io/goose/assets/images/goose-voyp-215f3391cfbe2132542a2be63db84999.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Metadata Block in Markdown\nDESCRIPTION: Frontmatter metadata block defining the blog post title, description and authors\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-08-vibe-code-responsibly/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"How to Vibe Code Responsibly (with Goose)\"\ndescription: Vibe coding feels magical until it isn't. Learn how to flow with Goose while protecting your code, your team, and your future self.\nauthors: \n    - rizel\n---\n```\n\n----------------------------------------\n\nTITLE: Wikipedia Article Reader CLI Help Output\nDESCRIPTION: Shows the expected output of the help command for the Wikipedia article reader CLI, including usage and options.\nSOURCE: https://github.com/block/goose/blob/main/examples/mcp-wiki/README.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n❯ mcp-wiki --help\nusage: mcp-wiki [-h]\n\nGives you the ability to read Wikipedia articles and convert them to Markdown.\n\noptions:\n -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Testing Echo Tool in Rust\nDESCRIPTION: Illustrates how to write a test for an extension's tool. This example tests the 'echo' tool of a TestExtension, verifying that it correctly returns the input message.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/goose-architecture/extensions-design.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::test]\nasync fn test_echo_tool() {\n    let extension = TestExtension::new();\n    let result = extension.call_tool(\n        \"echo\",\n        hashmap!{ \"message\" => json!(\"hello\") }\n    ).await;\n    \n    assert_eq!(result.unwrap(), json!({ \"response\": \"hello\" }));\n}\n```\n\n----------------------------------------\n\nTITLE: Example GitHub MCP Prompt\nDESCRIPTION: This snippet shows a prompt for using GitHub MCP to create a new branch, update a file, and open a pull request in a GitHub repository.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-01-mcp-nondevs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```\nGitHub: Create a new branch called hello-world in my angiejones/goose-demo repository. Update the README.md file to say \"this was written by goose\" and commit it. Open a pull request with your changes.\n```\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Tags Implementation\nDESCRIPTION: Implementation of Open Graph and Twitter card meta tags for social media sharing of the article. Includes title, description, image, and other metadata properties.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-04-11-finetuning-toolshim/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"Finetuning Toolshim Models for Tool Calling\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/04/11/finetuning-toolshim\" />\n  <meta property=\"og:description\" content=\"Addressing performance limitations in models without native tool calling support\" />\n  <meta property=\"og:image\" content=\"https://block.github.io/goose/assets/images/toolshim-header-42611f614e7722f90cf83991debe3046.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"Finetuning Toolshim Models for Tool Calling\" />\n  <meta name=\"twitter:description\" content=\"Addressing performance limitations in models without native tool calling support\" />\n  <meta name=\"twitter:image\" content=\"https://block.github.io/goose/assets/images/toolshim-header-42611f614e7722f90cf83991debe3046.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Video Player HTML Implementation\nDESCRIPTION: HTML code block for embedding a video player that shows a demo of Goose making a live phone call. Includes responsive styling and fallback message.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-21-goose-boston-meetup/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div style={{ width: '100%', maxWidth: '800px', margin: '0 auto' }}>\n  <video \n    controls \n    width=\"100%\" \n    height=\"400px\"\n    playsInline\n  >\n    <source src={require('@site/static/videos/goose_makes_a_call.mp4').default} type=\"video/mp4\" />\n    Your browser does not support the video tag.\n  </video>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing ImageCarousel Component in React\nDESCRIPTION: This code snippet imports the ImageCarousel component from a specific path in a React project.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-31-goose-benchmark/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ImageCarousel from '@site/src/components/ImageCarousel';\n```\n\n----------------------------------------\n\nTITLE: Security Headers Check Command\nDESCRIPTION: Curl command for verifying security headers implementation\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/filesystem-mcp.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I http://localhost:3000\n# Verify security headers are present\n```\n\n----------------------------------------\n\nTITLE: Meta Tags Implementation for Social Sharing\nDESCRIPTION: HTML head section containing Open Graph and Twitter Card meta tags for social media sharing optimization of the blog post.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-21-goose-boston-meetup/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"Codename Goose Goes to Boston\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/03/21/goose-boston-meetup\" />\n  <meta property=\"og:description\" content=\"We hosted our first Goose Meetup in Boston, bringing together over 70 community members for lightning talks, hacking, and lively conversations about agentic systems and the future of MCPs.\" />\n  <meta property=\"og:image\" content=\"http://block.github.io/goose/assets/images/goose_goes_to_boston_banner-3ef0eedeb9d3eac56907c0c5e615d919.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"Codename Goose Goes to Boston\" />\n  <meta name=\"twitter:description\" content=\"We hosted our first Goose Meetup in Boston, bringing together over 70 community members for lightning talks, hacking, and lively conversations about agentic systems and the future of MCPs.\" />\n  <meta name=\"twitter:image\" content=\"http://block.github.io/goose/assets/images/goose_goes_to_boston_banner-3ef0eedeb9d3eac56907c0c5e615d919.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Livestream Video in HTML\nDESCRIPTION: This code embeds a YouTube video iframe that demonstrates the Goose Flight School tutorial where Adewale Abati shows how to convert Figma designs into a Nuxt application.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-12-goose-figma-mcp/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe class=\"aspect-ratio\" src=\"https://www.youtube.com/embed/_9t_N9zKwKM?si=r3e1MkrjS-f2AvkI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Running Goose Configure Command\nDESCRIPTION: Command to launch the Goose configuration interface where you can add extensions. This is the starting point for adding the GitHub extension.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/github-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Management Styles\nDESCRIPTION: CSS styles for proper focus management and visual indicators for keyboard navigation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* Add to CSS */\n:focus {\n  outline: 3px solid #2196F3;\n  outline-offset: 2px;\n}\n\n.cook-button:focus {\n  box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.4);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Goose Configure Command\nDESCRIPTION: Command to launch the Goose configuration interface for adding extensions. This is the first step in the CLI configuration process.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-maps-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Adding ARIA Live Regions\nDESCRIPTION: Implementation of ARIA live regions for dynamic content updates.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div aria-live=\"polite\" role=\"status\">\n  <!-- Dynamic content updates -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Testing Environment for x86_64 Linux Build\nDESCRIPTION: These commands set up QEMU and pull a Debian Docker image for testing the x86_64 Linux build of the Goose binary.\nSOURCE: https://github.com/block/goose/blob/main/run_cross_local.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\ndocker pull --platform linux/amd64 debian:latest\n```\n\n----------------------------------------\n\nTITLE: Finding WSL Host IP Address\nDESCRIPTION: Command to find the correct IP address for the Windows host from WSL, which is needed when localhost is not accessible for Ollama provider.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/troubleshooting.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nip route show | grep -i default | awk '{ print $3 }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Preconfigured Bundle\nDESCRIPTION: Python code snippet showing how environment variables are set for a preconfigured bundle of the Goose Desktop App. This allows setting default provider type, host, and model.\nSOURCE: https://github.com/block/goose/blob/main/ui/desktop/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nf\"        process.env.GOOSE_PROVIDER__TYPE = '{os.getenv(\"GOOSE_BUNDLE_TYPE\")}';\",\nf\"        process.env.GOOSE_PROVIDER__HOST = '{os.getenv(\"GOOSE_BUNDLE_HOST\")}';\",\nf\"        process.env.GOOSE_PROVIDER__MODEL = '{os.getenv(\"GOOSE_BUNDLE_MODEL\")}';\"\n```\n\n----------------------------------------\n\nTITLE: Goose Settings Menu Navigation\nDESCRIPTION: ASCII menu interface showing the navigation path to Goose settings configuration\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/goose-permissions.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n┌ goose-configure\n│\n◆ What would you like to configure?\n| ○ Configure Providers\n| ○ Add Extension\n| ○ Toggle Extensions\n| ○ Remove Extension\n| ● Goose Settings (Set the Goose Mode, Tool Output, Experiment and more)\n└\n```\n\n----------------------------------------\n\nTITLE: Listing Benchmark Selectors in Goose\nDESCRIPTION: Command to display all valid benchmark selector options in the Goose system.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/benchmarking.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoose bench selectors\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript API Endpoint with Stored Knowledge\nDESCRIPTION: Example of how Goose applies stored API standards to create a new TypeScript endpoint for user preferences, including interfaces, decorators, and OpenAPI documentation.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/memory-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserPreferences {\n    userId: string;\n    theme: 'light' | 'dark';\n    notifications: boolean;\n    timezone: string;\n}\n\ninterface ErrorResponse { \n    type: string;\n    title: string;\n    status: number;\n    detail: string;\n    instance: string;\n}\n\n@Route('/api/users/:userId/preferences')\nclass UserPreferencesController {\n    @Get()\n    @RateLimit(100)  // Adding required rate limiting\n    @OpenAPI({ ... }) // Including mandatory OpenAPI docs\n    async getUserPreferences(\n        @Header('Authorization') token: string,  // JWT auth as per our standard\n        @Param('userId') userId: string\n    ): Promise<UserPreferences | ErrorResponse> {\n        // Implementation following our error handling pattern\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wikipedia Article Reader CLI Locally\nDESCRIPTION: Installs the Wikipedia article reader project locally as a CLI tool using uv package manager.\nSOURCE: https://github.com/block/goose/blob/main/examples/mcp-wiki/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install .\n```\n\n----------------------------------------\n\nTITLE: Adding Open Graph and Twitter Card Metadata in HTML\nDESCRIPTION: This HTML snippet adds metadata tags for Open Graph and Twitter Card integration. It includes title, description, image, and URL information to enhance social media sharing of the 'Introducing codename goose' article.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-01-28-introducing-codename-goose/index.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"Introducing codename goose\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2024/12/11/resolving-ci-issues-with-goose-a-practical-walkthrough\" />\n  <meta property=\"og:description\" content=\"codename goose is your open source AI agent, automating engineering tasks and improving productivity.\" />\n  <meta property=\"og:image\" content=\"https://block.github.io/goose/assets/images/introducing-codename-goose-89cac25816e0ea215dd47d4b9768c8ab.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"Introducing codename goose\" />\n  <meta name=\"twitter:description\" content=\"codename goose is your open source AI agent, automating engineering tasks and improving productivity.\" />\n  <meta name=\"twitter:image\" content=\"https://block.github.io/goose/assets/images/introducing-codename-goose-89cac25816e0ea215dd47d4b9768c8ab.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Meta Tags for Social Media Sharing\nDESCRIPTION: This code snippet shows the implementation of Open Graph and Twitter Card meta tags in the head section to optimize the page for social media sharing. It includes title, description, URL, and image metadata for both Open Graph and Twitter platforms.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-12-goose-figma-mcp/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta property=\"og:title\" content=\"Goose Flight School: Turn Figma Designs Into Code With Goose\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:url\" content=\"https://block.github.io/goose/blog/2025/03/12/goose-figma-mcp\" />\n  <meta property=\"og:description\" content=\"Give Goose the ability to turn Figma designs into code with the Figma extension.\" />\n  <meta property=\"og:image\" content=\"http://block.github.io/goose/assets/images/goosefigma-e6f84a734bd56cb431bb02452331a5d5.png\" />\n  <meta name=\"twitter:card\" content=\"summary_large_image\" />\n  <meta property=\"twitter:domain\" content=\"block.github.io/goose\" />\n  <meta name=\"twitter:title\" content=\"Goose Flight School: Turn Figma Designs Into Code With Goose\" />\n  <meta name=\"twitter:description\" content=\"Give Goose the ability to turn Figma designs into code with the Figma extension.\" />\n  <meta name=\"twitter:image\" content=\"http://block.github.io/goose/assets/images/goosefigma-e6f84a734bd56cb431bb02452331a5d5.png\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Block Usage Example in Goose Response Guidelines\nDESCRIPTION: An example of how to format code blocks in Markdown when using the Goose AI agent. The example shows the proper syntax for creating fenced code blocks with language specification for syntax highlighting.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose/src/prompts/system.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```python\n```\n\n----------------------------------------\n\nTITLE: Git Fork Setup Commands\nDESCRIPTION: Git commands for forking and setting up the repository locally\nSOURCE: https://github.com/block/goose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/goose.git\ncd goose\ngit remote add upstream https://github.com/block/goose.git\ngit checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Provider Type Enum Definition in Python\nDESCRIPTION: Python enum definition for specifying the AI provider type, matching the C enum definition.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-ffi/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ProviderType(IntEnum):\n    DATABRICKS = 0  # Databricks AI provider\n```\n\n----------------------------------------\n\nTITLE: Installing PortAudio Dependencies for Speech MCP\nDESCRIPTION: Commands for installing the required PortAudio library on macOS and Linux systems before setting up the Speech MCP server.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2025-03-28-vibe-coding-with-goose/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For macOS\nbrew install portaudio\n\n# For Linux\napt-get install portaudio  # or dnf install portaudio\n```\n\n----------------------------------------\n\nTITLE: Goose Allowlist YAML Structure\nDESCRIPTION: Template showing the required structure for the allowlist YAML file. Defines the basic format for specifying allowed extension IDs and their corresponding commands.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-server/ALLOWLIST.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  - id: extension-id-1\n    command: command-name-1\n  - id: extension-id-2\n    command: command-name-2\n```\n\n----------------------------------------\n\nTITLE: Updating Goose CLI using installation script\nDESCRIPTION: This command downloads and runs the Goose CLI installation script, which can be used to update an existing installation. The CONFIGURE=false flag prevents reconfiguration.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/updating-goose.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh | CONFIGURE=false bash\n```\n\n----------------------------------------\n\nTITLE: Launching Goose GUI using Goosey command\nDESCRIPTION: This command demonstrates how to launch the Goose GUI from any directory using the 'goosey' command. The current directory is specified as the argument.\nSOURCE: https://github.com/block/goose/blob/main/ui/desktop/scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoosey .\n```\n\n----------------------------------------\n\nTITLE: Configuring Goose Extension\nDESCRIPTION: Command to launch Goose's configuration interface for adding extensions\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/puppeteer-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoose configure\n```\n\n----------------------------------------\n\nTITLE: Setting GDRIVE_CREDENTIALS_PATH Environment Variable\nDESCRIPTION: Environment variable that specifies the path to the Google Drive server credentials file used for authentication.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/google-drive-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nGDRIVE_CREDENTIALS_PATH: ~/.config/.gdrive-server-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Running Goose CLI Commands\nDESCRIPTION: Basic CLI commands for Goose including help, configuration and session management\nSOURCE: https://github.com/block/goose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./target/debug/goose --help\n./target/debug/goose configure\n./target/debug/goose session\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Page Frontmatter\nDESCRIPTION: Basic frontmatter structure for a Markdown page that defines the page title. Shows the minimal required configuration for standalone Markdown pages.\nSOURCE: https://github.com/block/goose/blob/main/documentation/src/pages/markdown-page.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown page example\n---\n```\n\n----------------------------------------\n\nTITLE: CLI Extension Configuration Steps\nDESCRIPTION: Interactive CLI prompts showing the complete configuration process for adding VS Code MCP as a command-line extension with timeout settings\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/vscode-mcp.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n┌   goose-configure \n│\n◇  What would you like to configure?\n│  Add Extension \n│\n◆  What type of extension would you like to add?\n│  ○ Built-in Extension \n│  ● Command-line Extension (Run a local command or script)\n│  ○ Remote Extension \n└ \n```\n\nLANGUAGE: sh\nCODE:\n```\n┌   goose-configure \n│\n◇  What would you like to configure?\n│  Add Extension \n│\n◇  What type of extension would you like to add?\n│  Command-line Extension \n│\n◆  What would you like to call this extension?\n│  vscode-mcp\n└ \n```\n\nLANGUAGE: sh\nCODE:\n```\n┌   goose-configure \n│\n◇  What would you like to configure?\n│  Add Extension \n│\n◇  What type of extension would you like to add?\n│  Command-line Extension \n│\n◇  What would you like to call this extension?\n│  vscode-mcp\n│\n◆  What command should be run?\n│  npx vscode-mcp-server\n└ \n```\n\nLANGUAGE: sh\nCODE:\n```\n┌   goose-configure \n│\n◇  What would you like to configure?\n│  Add Extension \n│\n◇  What type of extension would you like to add?\n│  Command-line Extension \n│\n◇  What would you like to call this extension?\n│  vscode-mcp\n│\n◇  What command should be run?\n│  npx vscode-mcp-server install\n│\n◆  Please set the timeout for this tool (in secs):\n│  300\n│\n└ \n```\n\n----------------------------------------\n\nTITLE: Building Goose FFI Library\nDESCRIPTION: Commands to build the FFI library in debug and release modes using Cargo.\nSOURCE: https://github.com/block/goose/blob/main/crates/goose-ffi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build the library in debug mode\ncargo build --package goose_ffi\n\n# Build the library in release mode (recommended for production)\ncargo build --release --package goose_ffi\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Website Dependencies with Yarn\nDESCRIPTION: This command installs all necessary dependencies for the Docusaurus website project using Yarn package manager.\nSOURCE: https://github.com/block/goose/blob/main/documentation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Requesting Specific Tutorial\nDESCRIPTION: Example showing how to request a specific tutorial by name.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/tutorial-extension.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n( O)> Can you walk me through the first-game tutorial?\n```\n\n----------------------------------------\n\nTITLE: Starting a Goose Session with Profile in bash\nDESCRIPTION: Command to start a Goose session using a configured profile with the required toolkits for GitHub CI integration.\nSOURCE: https://github.com/block/goose/blob/main/documentation/blog/2024-12-11-resolving-ci-issues-with-goose-a-practical-walkthrough/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoose session start --profile my-profile\n```\n\n----------------------------------------\n\nTITLE: Setting AgentQL API Key Environment Variable\nDESCRIPTION: Required environment variable configuration for the AgentQL MCP Server extension, where you need to insert your API key.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/tutorials/agentql-mcp.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAGENTQL_API_KEY: <YOUR_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Creating a Goose Recipe with CLI Command\nDESCRIPTION: Command to generate a recipe.yaml file for sharing a Goose Agent using the CLI. This command creates a blueprint that contains instructions for recreating an agent for someone else.\nSOURCE: https://github.com/block/goose/blob/main/documentation/docs/guides/share-goose-sessions.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n( O)> /recipe\n```"
  }
]