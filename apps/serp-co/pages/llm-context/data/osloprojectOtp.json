[
  {
    "owner": "oslo-project",
    "repo": "otp",
    "content": "TITLE: Generating and Verifying TOTP in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @oslojs/otp library to generate and verify a time-based one-time password (TOTP). It imports the necessary functions, generates a TOTP, and then verifies it using the same parameters.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateTOTP, verifyTOTP } from \"@oslojs/otp\";\n\nconst totp = generateTOTP(key, 30, 6);\nconst valid = verifyTOTP(key, 30, 6, totp);\n```\n\n----------------------------------------\n\nTITLE: Generating and Verifying TOTPs in TypeScript\nDESCRIPTION: This snippet demonstrates how to generate a TOTP, verify it with a grace period, and verify it without a grace period. It uses the generateTOTP, verifyTOTPWithGracePeriod, and verifyTOTP functions from the @oslojs/otp library.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/examples/totp.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateTOTP, verifyTOTPWithGracePeriod, verifyTOTP } from \"@oslojs/otp\";\n\nconst digits = 6;\nconst intervalInSeconds = 30;\n\nconst otp = generateTOTP(key, intervalInSeconds, digits);\nconst valid = verifyTOTPWithGracePeriod(key, intervalInSeconds, digits, otp, 30);\nconst valid = verifyTOTP(key, intervalInSeconds, digits, otp);\n```\n\n----------------------------------------\n\nTITLE: Generating and Verifying TOTP in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @oslojs/otp library to generate and verify a time-based one-time password (TOTP). It imports the necessary functions, generates a TOTP with a specified key, time step, and digit count, and then verifies the generated TOTP.\nSOURCE: https://github.com/oslo-project/otp/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateTOTP, verifyTOTP } from \"@oslojs/otp\";\n\nconst totp = generateTOTP(key, 30, 6);\nconst valid = verifyTOTP(totp, key, 30, 6);\n```\n\n----------------------------------------\n\nTITLE: Verifying TOTP with Constant-time Comparison in TypeScript\nDESCRIPTION: A function that verifies Time-based One-Time Passwords (TOTP) using a constant-time comparison approach for security. Takes a HMAC key, time interval in seconds, number of digits, and the OTP to verify as parameters.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/verifyTOTP.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction verifyTOTP(\n\tkey: Uint8Array,\n\tintervalInSeconds: number,\n\tdigits: number,\n\totp: string\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: Verifying TOTP with Grace Period in TypeScript\nDESCRIPTION: A function that verifies a Time-based One-Time Password (TOTP) with a grace period. This allows OTPs generated within a specified time window before or after the current time to be considered valid.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/verifyTOTPWithGracePeriod.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction verifyTOTPWithGracePeriod(\n\tkey: Uint8Array,\n\tintervalInSeconds: number,\n\tdigits: number,\n\totp: string,\n\tgracePeriodInSeconds: number\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP with SHA-1 in TypeScript\nDESCRIPTION: Function that generates a Time-based One-Time Password (TOTP) using SHA-1 hashing algorithm. It takes a HMAC key as Uint8Array, a time interval in seconds, and the number of digits for the generated code.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/generateTOTP.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction generateTOTP(key: Uint8Array, intervalInSeconds: number, digits: number): string;\n```\n\n----------------------------------------\n\nTITLE: Generating and Verifying HOTP in TypeScript\nDESCRIPTION: Demonstrates how to generate and verify HMAC-based one-time passwords using generateHOTP and verifyHOTP functions. Takes a key, counter, and number of digits as parameters to generate and validate OTPs.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/examples/hotp.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateHOTP, verifyHOTP } from \"@oslojs/otp\";\n\nconst digits = 6;\nlet counter = 10n;\n\nconst otp = generateHOTP(key, counter, digits);\nconst validOTP = verifyHOTP(key, counter, digits, otp);\n```\n\n----------------------------------------\n\nTITLE: Verifying HOTP with Constant-time Comparison in TypeScript\nDESCRIPTION: Function signature for verifyHOTP() which performs constant-time verification of HMAC-based One-Time Passwords. It takes the HMAC key as a Uint8Array, a counter value as bigint, the number of digits in the OTP, and the OTP string to verify.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/verifyHOTP.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction verifyHOTP(key: Uint8Array, counter: bigint, digits: number, otp: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Generating HOTP with SHA-1 in TypeScript\nDESCRIPTION: This function generates a new HMAC-based One-Time Password (HOTP) using SHA-1. It takes a HMAC key, a counter, and the number of digits for the generated password as input parameters.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/generateHOTP.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction generateHOTP(key: Uint8Array, counter: bigint, digits: number): string;\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP Key URI for QR Code Generation in TypeScript\nDESCRIPTION: This snippet shows how to create a TOTP key URI using the createTOTPKeyURI function from the @oslojs/otp library. The resulting URI can be encoded into a QR code for easy setup in authenticator apps.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/examples/totp.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTOTPKeyURI } from \"@oslojs/otp\";\n\nconst issuer = \"My app\";\nconst accountName = \"user@example.com\";\nconst intervalInSeconds = 30;\nconst digits = 6;\nconst uri = createTOTPKeyURI(issuer, accountName, key, intervalInSeconds, digits);\n```\n\n----------------------------------------\n\nTITLE: Creating HOTP Key URI for QR Codes\nDESCRIPTION: Shows how to create a key URI for HOTP that can be encoded into QR codes. Requires issuer name, account name, key, counter, and digit length as parameters to generate the URI.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/examples/hotp.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHOTPKeyURI } from \"@oslojs/otp\";\n\nconst issuer = \"My app\";\nconst accountName = \"user@example.com\";\nconst digits = 6;\nconst uri = createHOTPKeyURI(issuer, accountName, key, counter, digits);\n```\n\n----------------------------------------\n\nTITLE: Defining TOTP Key URI Generation Function in TypeScript\nDESCRIPTION: Function signature for creating a TOTP key URI. Takes issuer name, account name, secret key, time period, and digits as parameters to generate a properly formatted URI string.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/createTOTPKeyURI.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createTOTPKeyURI(\n\tissuer: string,\n\taccountName: string,\n\tkey: Uint8Array,\n\tperiodInSeconds: number,\n\tdigits: number\n): string;\n```\n\n----------------------------------------\n\nTITLE: Using TOTP Key URI Generator in TypeScript\nDESCRIPTION: Example usage of the createTOTPKeyURI function showing how to generate a TOTP key URI with specific parameters including app name, user email, secret key, 30-second period, and 6-digit code length.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/createTOTPKeyURI.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTOTPKeyURI } from \"@oslojs/otp\";\n\nconst uri = createTOTPKeyURI(\"My App\", \"user@example.com\", key, 30, 6);\n```\n\n----------------------------------------\n\nTITLE: Defining createHOTPKeyURI Function in TypeScript\nDESCRIPTION: Function signature for createHOTPKeyURI which generates an HOTP key URI with SHA1 algorithm. It takes issuer, accountName, key, counter, and digits as parameters and returns a URI string.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/createHOTPKeyURI.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createHOTPKeyURI(\n\tissuer: string,\n\taccountName: string,\n\tkey: Uint8Array,\n\tcounter: bigint,\n\tdigits: number\n): string;\n```\n\n----------------------------------------\n\nTITLE: Using createHOTPKeyURI Function in TypeScript\nDESCRIPTION: Example of importing and using the createHOTPKeyURI function from the @oslojs/otp package to generate an HOTP key URI with 6 digits.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/reference/main/createHOTPKeyURI.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHOTPKeyURI } from \"@oslojs/otp\";\n\nconst uri = createHOTPKeyURI(\"My App\", \"user@example.com\", key, counter, 6);\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/otp via npm\nDESCRIPTION: This command shows how to install the @oslojs/otp library using npm (Node Package Manager). It adds the library to your project's dependencies.\nSOURCE: https://github.com/oslo-project/otp/blob/main/docs/pages/index.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/otp\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/otp Package via npm\nDESCRIPTION: This command installs the @oslojs/otp package using npm (Node Package Manager). It adds the library to your project's dependencies, allowing you to use its OTP generation and verification functions.\nSOURCE: https://github.com/oslo-project/otp/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/otp\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Building the Package\nDESCRIPTION: Commands to execute tests and build the Oslo OTP package during development. These are essential steps before submitting a pull request.\nSOURCE: https://github.com/oslo-project/otp/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager, which is required for setting up the development environment for the Oslo OTP project.\nSOURCE: https://github.com/oslo-project/otp/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Changesets for Minor Features and Patches\nDESCRIPTION: Commands to create changesets using the Auri tool, which is required when making pull requests. Use 'minor' for new features and 'patch' for bug fixes.\nSOURCE: https://github.com/oslo-project/otp/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm auri add minor\npnpm auri add patch\n```\n\n----------------------------------------\n\nTITLE: Example Changeset for Bug Fix\nDESCRIPTION: Example of the content for a changeset markdown file when fixing a bug. The text should provide a concise description of the bug fix with the 'Fix:' prefix.\nSOURCE: https://github.com/oslo-project/otp/blob/main/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nFix: Handle negative numbers in `sqrt()`\n```\n\n----------------------------------------\n\nTITLE: Example Changeset for New Feature\nDESCRIPTION: Example of the content for a changeset markdown file when adding a new feature. The text should provide a concise description of the feature with the 'Feat:' prefix.\nSOURCE: https://github.com/oslo-project/otp/blob/main/CONTRIBUTING.md#2025-04-12_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nFeat: Add `greet()`\n```"
  }
]