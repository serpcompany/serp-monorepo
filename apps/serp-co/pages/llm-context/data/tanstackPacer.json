[
  {
    "owner": "tanstack",
    "repo": "pacer",
    "content": "TITLE: Using React Hooks for Rate Limiting with TanStack React Pacer in TSX\nDESCRIPTION: This snippet shows integration of TanStack Pacer's rate limiting utilities in a React environment using hooks. Examples include a low-level hook for full control, a simplified callback hook for rate-limited function calls, and a state hook for applying rate limiting to reactive state values. These hooks facilitate declarative and reactive rate limiting in React applications.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRateLimiter, useRateLimitedCallback, useRateLimitedValue } from '@tanstack/react-pacer'\n\n// Low-level hook for full control\nconst limiter = useRateLimiter(\n  (id: string) => fetchUserData(id),\n  { limit: 5, window: 1000 }\n)\n\n// Simple callback hook for basic use cases\nconst handleFetch = useRateLimitedCallback(\n  (id: string) => fetchUserData(id),\n  { limit: 5, window: 1000 }\n)\n\n// State-based hook for reactive state management\nconst [instantState, setInstantState] = useState('')\nconst [rateLimitedState, setRateLimitedState] = useRateLimitedValue(\n  instantState, // Value to rate limit\n  { limit: 5, window: 1000 }\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Async Rate Limiting with asyncRateLimit Function in TypeScript\nDESCRIPTION: This example wraps an asynchronous API call function with `asyncRateLimit` from TanStack Pacer, limiting executions to 5 per second. It includes an error callback to log failures, and usage demonstrates awaiting the returned promise to determine whether the call was executed or rejected due to rate limits.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { asyncRateLimit } from '@tanstack/pacer'\n\nconst rateLimited = asyncRateLimit(\n  async (id: string) => {\n    const response = await fetch(`/api/data/${id}`)\n    return response.json()\n  },\n  {\n    limit: 5,\n    window: 1000,\n    onError: (error) => {\n      console.error('API call failed:', error)\n    }\n  }\n)\n\n// Returns a Promise<boolean> - resolves to true if executed, false if rejected\nconst wasExecuted = await rateLimited('123')\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Queue Integration Example in React - TSX\nDESCRIPTION: This example shows the full lifecycle and usage pattern for the React `useAsyncQueuer` hook in a TypeScript (TSX) component. An async queue is instantiated with custom options, items are enqueued, and queue control methods such as start are invoked. State queries reveal queue idle status and item count. Event listeners for item processing success or error are registered, and callback handlers perform side effects such as logging. This snippet illustrates a typical integration for asynchronous API request processing in React, requiring the TanStack Pacer library.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncqueuer.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// Basic async queuer for API requests\nconst asyncQueuer = useAsyncQueuer({\n  initialItems: [],\n  concurrency: 2,\n  maxSize: 100,\n  started: false,\n});\n\n// Add items to queue\nasyncQueuer.addItem(newItem);\n\n// Start processing\nasyncQueuer.start();\n\n// Monitor queue state\nconst isPending = !asyncQueuer.isIdle();\nconst itemCount = asyncQueuer.size();\n\n// Handle results\nasyncQueuer.onSuccess((result) => {\n  console.log('Item processed:', result);\n});\n\nasyncQueuer.onError((error) => {\n  console.error('Processing failed:', error);\n});\n```\n\n----------------------------------------\n\nTITLE: Using useRateLimitedCallback for API call rate limiting in TSX\nDESCRIPTION: This example demonstrates how to use the `useRateLimitedCallback` hook within a React component context (using TSX syntax). It shows how to wrap an asynchronous API call function, setting a strict rate limit of 5 calls within a 1-minute window (60000 milliseconds). It also includes an `onReject` callback to handle instances where the rate limit is exceeded.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedcallback.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Rate limit API calls to maximum 5 calls per minute\nconst makeApiCall = useRateLimitedCallback(\n  (data: ApiData) => {\n    return fetch('/api/endpoint', { method: 'POST', body: JSON.stringify(data) });\n  },\n  {\n    limit: 5,\n    window: 60000, // 1 minute\n    onReject: () => {\n      console.warn('API rate limit reached. Please wait before trying again.');\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using useAsyncThrottler for API Call Throttling - React TypeScript\nDESCRIPTION: This example shows how to use the useAsyncThrottler hook to throttle an asynchronous API call within a React component. The async function fetches data based on an identifier, while the throttler restricts execution with a configurable 'wait' time in milliseconds. Dependencies include React and an API client. The maybeExecute method is called to possibly invoke the throttled function. Inputs include the API method and delay options; outputs are managed by the user. This pattern prevents rapid or repeated API calls from overloading the system.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncthrottler.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic API call throttling\nconst { maybeExecute } = useAsyncThrottler(\n  async (id: string) => {\n    const data = await api.fetchData(id);\n    return data;\n  },\n  { wait: 1000 }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Async Queue with AsyncQueuer Class in TypeScript\nDESCRIPTION: This snippet shows how to instantiate the AsyncQueuer class directly for full control over the async queue. It configures concurrency to process two items simultaneously, waits one second between starting new tasks, and starts queue processing immediately. It registers global error and success handlers via onError and onSuccess callbacks to log results or errors. Async tasks that fetch data asynchronously are added to the queue using addItem. This requires @tanstack/pacer and an implementation of fetchData for data retrieval.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AsyncQueuer } from '@tanstack/pacer'\n\nconst queue = new AsyncQueuer<string>({\n  concurrency: 2, // Process 2 items at once\n  wait: 1000,     // Wait 1 second between starting new items\n  started: true   // Start processing immediately\n})\n\n// Add error and success handlers\nqueue.onError((error) => {\n  console.error('Task failed:', error)\n})\n\nqueue.onSuccess((result) => {\n  console.log('Task completed:', result)\n})\n\n// Add async tasks\nqueue.addItem(async () => {\n  const result = await fetchData(1)\n  return result\n})\n\nqueue.addItem(async () => {\n  const result = await fetchData(2)\n  return result\n})\n```\n\n----------------------------------------\n\nTITLE: Using useDebouncedCallback in a React Input Component with TSX\nDESCRIPTION: This TSX example demonstrates using the useDebouncedCallback hook within a functional React component to debounce a search function. The handleSearch callback is created to delay invocation of fetchSearchResults while the user types in a search input, using a wait period of 500ms. Dependencies are @tanstack/pacer for the hook and standard React for component structure. The input element calls handleSearch on every change, but execution is throttled by debouncing.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usedebouncedcallback.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// Debounce a search handler\nconst handleSearch = useDebouncedCallback((query: string) => {\n  fetchSearchResults(query);\n}, {\n  wait: 500 // Wait 500ms between executions\n});\n\n// Use in an input\n<input\n  type=\"search\"\n  onChange={(e) => handleSearch(e.target.value)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example: State Management with useAsyncRateLimiter in JSX\nDESCRIPTION: This JSX example demonstrates integrating `useAsyncRateLimiter` with state management (using `useState`) to manage the results of API calls. It showcases the hook's flexibility to be combined with various state management solutions like useState. The hook's `onReject` callback is configured to log information if the rate limit is exceeded. This example shows how to manage the state while limiting the call frequency.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncratelimiter.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n// With state management\nconst [data, setData] = useState(null);\nconst { maybeExecute } = useAsyncRateLimiter(\n  async (query) => {\n    const result = await searchAPI(query);\n    setData(result);\n  },\n  {\n    limit: 10,\n    window: 60000, // 10 calls per minute\n    onReject: (info) => console.log(`Rate limit exceeded: ${info.nextValidTime - Date.now()}ms until next window`)\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using RateLimiter Class for Advanced Rate Limiting Control in TypeScript\nDESCRIPTION: This snippet illustrates how to instantiate and use the `RateLimiter` class from TanStack Pacer to achieve fine-grained rate limiting control. It shows configuring limit, window, and callback options for execution and rejection events. It also demonstrates usage of methods to inspect state (remaining calls, execution count, rejection count), dynamically change options, attempt executions conditionally, and reset the limiter.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RateLimiter } from '@tanstack/pacer'\n\n// Create a rate limiter instance\nconst limiter = new RateLimiter(\n  (id: string) => fetchUserData(id),\n  {\n    limit: 5,\n    window: 60 * 1000,\n    onExecute: (rateLimiter) => {\n      console.log('Function executed', rateLimiter.getExecutionCount())\n    },\n    onReject: (rateLimiter) => {\n      console.log(`Rate limit exceeded. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`)\n    }\n  }\n)\n\n// Get information about current state\nconsole.log(limiter.getRemainingInWindow()) // Number of calls remaining in current window\nconsole.log(limiter.getExecutionCount()) // Total number of successful executions\nconsole.log(limiter.getRejectionCount()) // Total number of rejected executions\n\n// Attempt to execute (returns boolean indicating success)\nlimiter.maybeExecute('user-1')\n\n// Update options dynamically\nlimiter.setOptions({ limit: 10 }) // Increase the limit\n\n// Reset all counters and state\nlimiter.reset()\n```\n\n----------------------------------------\n\nTITLE: Combining useAsyncDebouncer with React State Management\nDESCRIPTION: An example showing how to integrate useAsyncDebouncer with React's useState hook. This pattern demonstrates updating component state with the results of a debounced API call using a 300ms wait time.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncdebouncer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// With state management\nconst [results, setResults] = useState([]);\nconst { maybeExecute } = useAsyncDebouncer(\n  async (searchTerm) => {\n    const data = await searchAPI(searchTerm);\n    setResults(data);\n  },\n  {\n    wait: 300,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Example: Basic API Call Rate Limiting in JSX\nDESCRIPTION: This JSX snippet illustrates the use of `useAsyncRateLimiter` for rate limiting API calls. It demonstrates how to integrate the hook with an asynchronous function and configure rate limiting parameters. It uses `maybeExecute` to conditionally call the async function, adhering to the specified rate limit of 5 calls per second. This example showcases a core use case of the hook.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncratelimiter.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n// Basic API call rate limiting\nconst { maybeExecute } = useAsyncRateLimiter(\n  async (id: string) => {\n    const data = await api.fetchData(id);\n    return data;\n  },\n  { limit: 5, window: 1000 } // 5 calls per second\n);\n\n```\n\n----------------------------------------\n\nTITLE: Monitoring and Controlling AsyncQueuer Queue State in TypeScript\nDESCRIPTION: This snippet lists various AsyncQueuer instance methods used for inspecting queue state, manipulating queued tasks, and controlling processing. It shows methods to peek at next tasks, check queue size and emptiness, access active and pending items, clear and reset queue, track execution count, and start or stop queue processing. These utilities provide comprehensive queue management for maintaining smooth operation and monitoring.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Queue inspection\nqueue.getPeek()           // View next item without removing it\nqueue.getSize()          // Get current queue size\nqueue.getIsEmpty()       // Check if queue is empty\nqueue.getIsFull()        // Check if queue has reached maxSize\nqueue.getAllItems()   // Get copy of all queued items\nqueue.getActiveItems() // Get currently processing items\nqueue.getPendingItems() // Get items waiting to be processed\n\n// Queue manipulation\nqueue.clear()         // Remove all items\nqueue.reset()         // Reset to initial state\nqueue.getExecutionCount() // Get number of processed items\n\n// Processing control\nqueue.start()         // Begin processing items\nqueue.stop()          // Pause processing\nqueue.getIsRunning()     // Check if queue is processing\nqueue.getIsIdle()        // Check if queue is empty and not processing\n```\n\n----------------------------------------\n\nTITLE: Creating and Using useAsyncQueuer in React - TypeScript\nDESCRIPTION: This code snippet demonstrates the use of the `useAsyncQueuer` TypeScript hook to create a managed asynchronous queue within a React component. It shows configuring queue parameters such as initial items, concurrency, maximum size, and whether the queue is started by default. Methods are used to add items to the queue, start processing, monitor queue status, and handle results or errors using provided lifecycle callbacks. No special dependencies are required beyond React and the TanStack Pacer package. The main input is the options object, with outputs provided via queue methods and event handlers. The hook is flexible, but proper handling of asynchronous item processing results and error management is necessary for robust usage.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncqueuer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useAsyncQueuer<TValue>(options): AsyncQueuer<TValue>\n```\n\n----------------------------------------\n\nTITLE: Check if queuer is full\nDESCRIPTION: The `getIsFull()` method returns `true` if the queuer is full, based on the configured concurrency limit.  It returns `false` if there is capacity for more tasks.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetIsFull(): boolean\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Debouncer in TypeScript\nDESCRIPTION: Demonstrates how to create a Debouncer instance and use it to limit the frequency of a database save operation triggered by input events. The debounced function will only execute after 500ms of inactivity.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/debouncer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst debouncer = new Debouncer((value: string) => {\n  saveToDatabase(value);\n}, { wait: 500 });\n\n// Will only save after 500ms of no new input\ninputElement.addEventListener('input', () => {\n  debouncer.maybeExecute(inputElement.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors and Successes with AsyncQueuer in TypeScript\nDESCRIPTION: This snippet demonstrates comprehensive error handling for AsyncQueuer. It shows global error, success, and settled callbacks registered during queue instantiation to handle task results and failures globally. Additionally, it depicts individual task-level error handling via catch on the promise returned by addItem, allowing error recovery on a per-task basis. This setup ensures robust handling of asynchronous task outcomes.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst queue = new AsyncQueuer<string>()\n\n// Handle errors globally\nconst queue = new AsyncQueuer<string>({\n  onError: (error) => {\n    console.error('Task failed:', error)\n  },\n  onSuccess: (result) => {\n    console.log('Task succeeded:', result)\n  },\n  onSettled: (result) => {\n    if (result instanceof Error) {\n      console.log('Task failed:', result)\n    } else {\n      console.log('Task succeeded:', result)\n    }\n  }\n})\n\n// Handle errors per task\nqueue.addItem(async () => {\n  throw new Error('Task failed')\n}).catch(error => {\n  console.error('Individual task error:', error)\n})\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Function with Simple Rate Limiting using rateLimit in TypeScript\nDESCRIPTION: This snippet demonstrates how to wrap a function with the `rateLimit` utility from TanStack Pacer to enforce a maximum of 5 executions per minute. It includes an onReject callback that logs when calls exceed the limit. The rateLimitedApi function is then called multiple times, showing how calls beyond the limit are rejected until the window resets.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rateLimit } from '@tanstack/pacer'\n\n// Rate limit API calls to 5 per minute\nconst rateLimitedApi = rateLimit(\n  (id: string) => fetchUserData(id),\n  {\n    limit: 5,\n    window: 60 * 1000, // 1 minute in milliseconds\n    onReject: (rateLimiter) => {\n      console.log(`Rate limit exceeded. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`)\n    }\n  }\n)\n\n// First 5 calls will execute immediately\nrateLimitedApi('user-1') // ✅ Executes\nrateLimitedApi('user-2') // ✅ Executes\nrateLimitedApi('user-3') // ✅ Executes\nrateLimitedApi('user-4') // ✅ Executes\nrateLimitedApi('user-5') // ✅ Executes\nrateLimitedApi('user-6') // ❌ Rejected until window resets\n```\n\n----------------------------------------\n\nTITLE: Initializing React Async Queue State with useAsyncQueuerState Hook in TypeScript\nDESCRIPTION: Defines a React hook 'useAsyncQueuerState' that creates an AsyncQueuer instance with integrated React state management. It enables components to manage asynchronous tasks in a queue with configurable concurrency, maximum size, and processing lifecycle callbacks. The hook returns the current array of queued items as React state and the AsyncQueuer instance with methods to control the queue, such as adding items or starting/stopping processing. This setup ensures React components automatically re-render on queue state changes. Dependencies include React and an AsyncQueuer implementation supporting the provided options and callbacks.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncqueuerstate.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useAsyncQueuerState<TValue>(options): [() => Promise<TValue>[], AsyncQueuer<TValue>]\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// Create a queue with state management\nconst [queueItems, asyncQueuer] = useAsyncQueuerState({\n  concurrency: 2,\n  maxSize: 100,\n  started: true\n});\n\n// Add items to queue - state updates automatically\nasyncQueuer.addItem(async () => {\n  const result = await fetchData();\n  return result;\n});\n\n// Start processing\nasyncQueuer.start();\n\n// Stop processing\nasyncQueuer.stop();\n\n// queueItems reflects current queue state\nconst pendingCount = asyncQueuer.getPendingItems().length;\n```\n\n----------------------------------------\n\nTITLE: Configuring FIFO Queue with AsyncQueuer in TypeScript\nDESCRIPTION: This snippet configures the AsyncQueuer instance to function as a FIFO (First In, First Out) queue by adding items to the back of the queue and retrieving items from the front. It sets concurrency to 2, enabling two tasks to be processed concurrently in order of insertion. Tasks added to the queue represent asynchronous operations returning string results. This setup is suitable for maintaining task sequence while processing multiple tasks concurrently.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst queue = new AsyncQueuer<string>({\n  addItemsTo: 'back',  // default\n  getItemsFrom: 'front', // default\n  concurrency: 2\n})\n\nqueue.addItem(async () => 'first')  // [first]\nqueue.addItem(async () => 'second') // [first, second]\n// Processes: first and second concurrently\n```\n\n----------------------------------------\n\nTITLE: Visualizing Async Queueing Concept with Concurrency (text)\nDESCRIPTION: This snippet provides a textual visualization of the async queueing concept, illustrating concurrency with a concurrency level of 2 and processing timeline ticks. It demonstrates how multiple asynchronous tasks are handled simultaneously, showing the queue status, active tasks, and completed tasks over time. This verbal diagram helps users understand how async queuing differs from synchronous processing by enabling concurrent task execution.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAsync Queueing (concurrency: 2, wait: 2 ticks)\nTimeline: [1 second per tick]\nCalls:        ⬇️  ⬇️  ⬇️  ⬇️     ⬇️  ⬇️     ⬇️\nQueue:       [ABC]   [C]    [CDE]    [E]    []\nActive:      [A,B]   [B,C]  [C,D]    [D,E]  [E]\nCompleted:    -       A      B        C      D,E\n             [=================================================================]\n             ^ Unlike regular queueing, multiple items\n               can be processed concurrently\n\n             [Items queue up]   [Process 2 at once]   [Complete]\n              when busy         with wait between      all items\n```\n\n----------------------------------------\n\nTITLE: Applying basic throttling TanStack Pacer TypeScript\nDESCRIPTION: Demonstrates the basic usage of the `throttle` function to limit how often a synchronous function can execute. It takes the function to throttle and an options object with a `wait` time in milliseconds. Subsequent calls within the wait period are ignored.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { throttle } from '@tanstack/pacer'\n\n// Throttle UI updates to once every 200ms\nconst throttledUpdate = throttle(\n  (value: number) => updateProgressBar(value),\n  {\n    wait: 200,\n  }\n)\n\n// In a rapid loop, only executes every 200ms\nfor (let i = 0; i < 100; i++) {\n  throttledUpdate(i) // Many calls get throttled\n}\n```\n\n----------------------------------------\n\nTITLE: Using SolidJS Debounced Signal Hook - TSX Example\nDESCRIPTION: This TSX/JavaScript example demonstrates how to use the `createDebouncedSignal` SolidJS hook. It shows initialization with an initial value and a `wait` option, how to update the debounced value using the setter (`setSearchTerm`), and how to access the debouncer's internal state (`executionCount`, `isPending`) and configuration (`getExecutionCount`) via the returned `debouncer` object, particularly within the `onExecute` callback. This illustrates practical application in a UI context like a search input.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createdebouncedsignal.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// Debounced search input\nconst [searchTerm, setSearchTerm, debouncer] = createDebouncedSignal('', {\n  wait: 500 // Wait 500ms after last keystroke\n});\n\n// Update value - will be debounced\nconst handleChange = (e) => {\n  setSearchTerm(e.target.value);\n};\n\n// Access debouncer state via signals\nconsole.log('Executions:', debouncer.executionCount());\nconsole.log('Is pending:', debouncer.isPending());\n\n// In onExecute callback, use get* methods\nconst [searchTerm, setSearchTerm, debouncer] = createDebouncedSignal('', {\n  wait: 500,\n  onExecute: (debouncer) => {\n    console.log('Total executions:', debouncer.getExecutionCount());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Get the next item\nDESCRIPTION: The `getNextItem()` method removes and returns the next item from the queuer.  The `position` parameter can be used to control the retrieval order.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetNextItem(position): undefined | () => Promise<TValue>\n```\n\n----------------------------------------\n\nTITLE: Using the asyncRateLimit Function for API Calls in TypeScript\nDESCRIPTION: Demonstrates applying `asyncRateLimit` to an example `makeApiCall` function, restricting it to 5 calls per minute (60000ms). It includes an `onReject` callback to log when the rate limit is hit and suggests using `throttle` for more evenly spaced executions as an alternative.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncratelimit.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Rate limit to 5 calls per minute\nconst rateLimited = asyncRateLimit(makeApiCall, {\n  limit: 5,\n  window: 60000,\n  onReject: (rateLimiter) => {\n    console.log(`Rate limit exceeded. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`);\n  }\n});\n\n// First 5 calls will execute immediately\n// Additional calls will be rejected until the minute window resets\nawait rateLimited();\n\n// For more even execution, consider using throttle instead:\nconst throttled = throttle(makeApiCall, { wait: 12000 }); // One call every 12 seconds\n```\n\n----------------------------------------\n\nTITLE: Handling Queue Rejections with Queuer in TypeScript\nDESCRIPTION: Demonstrates setting a maximum queue size using the maxSize option and defining an onReject callback to handle items rejected when the queue is full. The snippet tracks rejections via getRejectionCount(). Requires the Queuer class with support for maxSize, onReject callback, addItem, and rejection count retrieval methods.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/queueing.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst queue = new Queuer<number>({\n  maxSize: 2, // Only allow 2 items in queue\n  onReject: (item, queuer) => {\n    console.log('Queue is full. Item rejected:', item)\n  }\n})\n\nqueue.addItem(1) // Accepted\nqueue.addItem(2) // Accepted\nqueue.addItem(3) // Rejected, triggers onReject callback\n\nconsole.log(queue.getRejectionCount()) // 1\n```\n\n----------------------------------------\n\nTITLE: Applying async throttling TanStack Pacer TypeScript\nDESCRIPTION: Illustrates how to use the `asyncThrottle` function to throttle asynchronous operations. It takes an async function and options like `wait` and `onError`, ensuring that the async function is not executed more often than the specified interval and providing a way to handle potential errors.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { asyncThrottle } from '@tanstack/pacer'\n\nconst throttledFetch = asyncThrottle(\n  async (id: string) => {\n    const response = await fetch(`/api/data/${id}`)\n    return response.json()\n  },\n  {\n    wait: 1000,\n    onError: (error) => {\n      console.error('API call failed:', error)\n    }\n  }\n)\n\n// Will only make one API call per second\nawait throttledFetch('123')\n```\n\n----------------------------------------\n\nTITLE: Using Throttler class TanStack Pacer TypeScript\nDESCRIPTION: Shows how to use the `Throttler` class for more fine-grained control over throttling. It allows accessing information about the throttler's state, such as execution count and last execution time, and provides methods like `cancel` to stop any pending executions.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Throttler } from '@tanstack/pacer'\n\nconst updateThrottler = new Throttler(\n  (value: number) => updateProgressBar(value),\n  { wait: 200 }\n)\n\n// Get information about execution state\nconsole.log(updateThrottler.getExecutionCount()) // Number of successful executions\nconsole.log(updateThrottler.getLastExecutionTime()) // Timestamp of last execution\n\n// Cancel any pending execution\nupdateThrottler.cancel()\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Debouncing with `asyncDebounce` (TypeScript)\nDESCRIPTION: Demonstrates using the `asyncDebounce` function for debouncing asynchronous operations, typically involving Promises. It supports the `wait` option and the `onError` callback for handling potential errors within the async function. Calls to the debounced function can be awaited.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { asyncDebounce } from '@tanstack/pacer'\n\nconst debouncedSearch = asyncDebounce(\n  async (searchTerm: string) => {\n    const results = await fetchSearchResults(searchTerm)\n    updateUI(results)\n  },\n  {\n    wait: 500,\n    onError: (error) => {\n      console.error('Search failed:', error)\n    }\n  }\n)\n\n// Will only make one API call after typing stops\nsearchInput.addEventListener('input', async (e) => {\n  await debouncedSearch(e.target.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Debounced Functions using TanStack Pacer debounce in TypeScript\nDESCRIPTION: Defines a generic debounce function that returns a debounced version of the given function `fn`, delaying its execution until after a specified wait period. Supports an `initialOptions` parameter to configure behavior such as immediate leading invocation. The function accepts any callable `fn` and returns a function that discards rapid repeated calls, invoking `fn` only after the wait delay. Repeated calls within the delay reset the timer. Returns void on invocation. Requires TypeScript and optionally the Debouncer class for more advanced usage.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/debounce.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction debounce<TFn>(fn, initialOptions): (...args) => void\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst debounced = debounce(() => {\n  saveChanges();\n}, { wait: 1000 });\n\n// Called repeatedly but executes at most once per second\ninputElement.addEventListener('input', debounced);\n```\n\n----------------------------------------\n\nTITLE: Using createDebouncer for Search Input in SolidJS\nDESCRIPTION: Example of using createDebouncer to limit API calls when handling search input changes. Shows how to create the debouncer, use it in an event handler, access its state, and update its options.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createdebouncer.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Debounce a search function to limit API calls\nconst debouncer = createDebouncer(\n  (query: string) => fetchSearchResults(query),\n  { wait: 500 } // Wait 500ms after last keystroke\n);\n\n// In an event handler\nconst handleChange = (e) => {\n  debouncer.maybeExecute(e.target.value);\n};\n\n// Access debouncer state via signals\nconsole.log('Executions:', debouncer.executionCount());\nconsole.log('Is pending:', debouncer.isPending());\n\n// Update options\ndebouncer.setOptions({ wait: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Clear all items from the queuer\nDESCRIPTION: The `clear()` method removes all items from the queuer. This effectively resets the queue, discarding all pending and active tasks.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using a Priority Queuer with Automatic Processing in TypeScript\nDESCRIPTION: This snippet configures a Queuer instance to process items by numerical priority. The getPriority function assigns priorities, and options like started and wait enable auto-processing with delays. The onGetNextItem callback is triggered for each processed item. Requires Queuer and valid TypeScript environment. The queue processes higher values first, with items passed to the provided callback.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/queuer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst priorityQueue = new Queuer<number>({\n  getPriority: (n) => n, // Higher numbers have priority\n  started: true, // Begin processing immediately\n  wait: 1000, // Wait 1s between items\n  onGetNextItem: (item, queuer) => console.log(item)\n});\npriorityQueue.addItem(1); // [1]\npriorityQueue.addItem(3); // [3, 1] - 3 processed first\npriorityQueue.addItem(2); // [3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of createRateLimiter in Solid.js\nDESCRIPTION: Demonstrates practical implementation of the createRateLimiter function to limit API calls to five per minute. Showcases how to instantiate the limiter, monitor its status, and use the limiter in event handlers to control function execution based on remaining capacity. Assumes dependencies such as createRateLimiter, apiCall, and UI functions like showRateLimitWarning, all used within a TypeScript context.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createratelimiter.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Basic rate limiting - max 5 calls per minute\nconst rateLimiter = createRateLimiter(apiCall, {\n  limit: 5,\n  window: 60000,\n});\n\n// Monitor rate limit status\nconst handleClick = () => {\n  if (rateLimiter.remainingInWindow() > 0) {\n    rateLimiter.maybeExecute(data);\n  } else {\n    showRateLimitWarning();\n  }\n};\n\n// Access rate limiter state via signals\nconsole.log('Executions:', rateLimiter.executionCount());\nconsole.log('Rejections:', rateLimiter.rejectionCount());\nconsole.log('Remaining:', rateLimiter.remainingInWindow());\nconsole.log('Next window in:', rateLimiter.msUntilNextWindow());\n```\n\n----------------------------------------\n\nTITLE: useDebouncer Example Usage - TSX\nDESCRIPTION: Demonstrates how to use the useDebouncer hook in a React component. It shows how to create a debouncer instance for a search function, specifying a wait time of 500ms. It then shows how to call the debouncer's maybeExecute method within an event handler. It also shows how to get number of times the debounced function has executed and how to get the pending state.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usedebouncer.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Debounce a search function to limit API calls\nconst searchDebouncer = useDebouncer(\n  (query: string) => fetchSearchResults(query),\n  { wait: 500 } // Wait 500ms after last keystroke\n);\n\n// In an event handler\nconst handleChange = (e) => {\n  searchDebouncer.maybeExecute(e.target.value);\n};\n\n// Get number of times the debounced function has executed\nconst executionCount = searchDebouncer.getExecutionCount();\n\n// Get the pending state\nconst isPending = searchDebouncer.getIsPending();\n```\n\n----------------------------------------\n\nTITLE: Basic Async Queuer Example in TypeScript\nDESCRIPTION: This code snippet demonstrates the basic usage of the `createAsyncQueuer` function.  It initializes an async queuer with specified parameters such as `initialItems`, `concurrency`, `maxSize`, and `started`.  It then adds items to the queue using `addItem`, starts the queue using `start`, and demonstrates handling success and error events using `onSuccess` and `onError` callbacks, respectively.  This example provides a simple API request management scenario.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncqueuer.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic async queuer for API requests\nconst asyncQueuer = createAsyncQueuer({\n  initialItems: [],\n  concurrency: 2,\n  maxSize: 100,\n  started: false,\n});\n\n// Add items to queue\nasyncQueuer.addItem(newItem);\n\n// Start processing\nasyncQueuer.start();\n\n// Handle results\nasyncQueuer.onSuccess((result) => {\n  console.log('Item processed:', result);\n});\n\nasyncQueuer.onError((error) => {\n  console.error('Processing failed:', error);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the useQueuer Hook with Custom State Management in React\nDESCRIPTION: This example demonstrates how to use the `useQueuer` hook within a React component, integrating it with `useState` for custom state management. It configures the queuer to start automatically, process items every second (`wait: 1000`), update the local state via `onItemsChange`, and uses a `getPriority` function. It also shows how to add items and control the queuer's processing state (`start`, `stop`).\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usequeuer.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Example with custom state management and scheduling\nconst [items, setItems] = useState([]);\n\nconst queue = useQueuer({\n  started: true, // Start processing immediately\n  wait: 1000,    // Process one item every second\n  onItemsChange: (queue) => setItems(queue.getAllItems()),\n  getPriority: (item) => item.priority // Process higher priority items first\n});\n\n// Add items to process - they'll be handled automatically\nqueue.addItem('task1');\nqueue.addItem('task2');\n\n// Control the scheduler\nqueue.stop();  // Pause processing\nqueue.start(); // Resume processing\n```\n\n----------------------------------------\n\nTITLE: Get Queuer Options\nDESCRIPTION: The `getOptions()` method retrieves the current options configuration of the queuer. It returns a required type of `AsyncQueuerOptions`, ensuring all options are defined.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Required<AsyncQueuerOptions<TValue>>\n```\n\n----------------------------------------\n\nTITLE: Integrating useAsyncThrottler with State Management - React TypeScript\nDESCRIPTION: This snippet illustrates combining useAsyncThrottler with React state management. A throttled async search function calls an external API and updates component state using setData. Throttling options include 'wait' duration, and configuration for leading/trailing execution edges to control when the function fires relative to call timing. Inputs are the async search function and options object; outputs flow through setState. Relevant for optimizing input-driven or interactive UIs, this ensures backend resources are not overloaded while providing responsive feedback.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncthrottler.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// With state management\nconst [data, setData] = useState(null);\nconst { maybeExecute } = useAsyncThrottler(\n  async (query) => {\n    const result = await searchAPI(query);\n    setData(result);\n  },\n  {\n    wait: 2000,\n    leading: true,   // Execute immediately on first call\n    trailing: false  // Skip trailing edge updates\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Applying rateLimit Function (Example)\nDESCRIPTION: This example shows how to use the `rateLimit` helper function to wrap an existing function (`makeApiCall`). It configures the rate limit (5 calls per minute) and provides an `onReject` callback to handle cases where the limit is exceeded. It also includes a comparison demonstrating how `throttle` offers a different execution control pattern.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/ratelimit.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Rate limit to 5 calls per minute\nconst rateLimited = rateLimit(makeApiCall, {\n  limit: 5,\n  window: 60000,\n  onReject: (rateLimiter) => {\n    console.log(`Rate limit exceeded. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`);\n  }\n});\n\n// First 5 calls will execute immediately\n// Additional calls will be rejected until the minute window resets\nrateLimited();\n\n// For more even execution, consider using throttle instead:\nconst throttled = throttle(makeApiCall, { wait: 12000 }); // One call every 12 seconds\n```\n\n----------------------------------------\n\nTITLE: Using React Throttling Hooks TanStack Pacer TypeScript/React\nDESCRIPTION: Provides examples of framework adapter hooks for React. `useThrottler` offers low-level class control, `useThrottledCallback` simplifies throttling for event handlers or simple functions, and `useThrottledValue` integrates throttling directly into reactive state management.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_8\n\nLANGUAGE: typescriptreact\nCODE:\n```\nimport { useThrottler, useThrottledCallback, useThrottledValue } from '@tanstack/react-pacer'\n\n// Low-level hook for full control\nconst throttler = useThrottler(\n  (value: number) => updateProgressBar(value),\n  { wait: 200 }\n)\n\n// Simple callback hook for basic use cases\nconst handleUpdate = useThrottledCallback(\n  (value: number) => updateProgressBar(value),\n  { wait: 200 }\n)\n\n// State-based hook for reactive state management\nconst [instantState, setInstantState] = useState(0)\nconst [throttledState, setThrottledState] = useThrottledValue(\n  instantState, // Value to throttle\n  { wait: 200 }\n)\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using AsyncRateLimiter Class in TypeScript\nDESCRIPTION: Illustrates creating an `AsyncRateLimiter` instance with a limit of 5 calls per 1000ms window. It demonstrates calling `maybeExecute`, showing that the first 5 calls succeed, while subsequent calls within the same window are rejected. This example showcases the core rate-limiting behavior.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncratelimit.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst rateLimiter = new AsyncRateLimiter(fn, { limit: 5, window: 1000 });\n\n// First 5 calls will execute\nawait rateLimiter.maybeExecute('arg1', 'arg2');\n\n// Additional calls within the window will be rejected\nawait rateLimiter.maybeExecute('arg1', 'arg2'); // Rejected\n```\n\n----------------------------------------\n\nTITLE: Executing Rate-Limited Function - TypeScript\nDESCRIPTION: This example demonstrates the use of the `maybeExecute` method. It attempts to execute the rate-limited function and will either execute the function or reject the execution based on the rate limits. The first calls execute, and subsequent calls in the window are rejected.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncratelimiter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst rateLimiter = new AsyncRateLimiter(fn, { limit: 5, window: 1000 });\n\n// First 5 calls will execute\nawait rateLimiter.maybeExecute('arg1', 'arg2');\n\n// Additional calls within the window will be rejected\nawait rateLimiter.maybeExecute('arg1', 'arg2'); // Rejected\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Synchronous Debouncing with `debounce` (TypeScript)\nDESCRIPTION: Demonstrates the simplest way to apply debouncing using the `debounce` function. It wraps a target function, delaying its execution until a specified `wait` period has passed without any new calls. Ideal for scenarios like debouncing search input event listeners.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { debounce } from '@tanstack/pacer'\n\n// Debounce search input to wait for user to stop typing\nconst debouncedSearch = debounce(\n  (searchTerm: string) => performSearch(searchTerm),\n  {\n    wait: 500, // Wait 500ms after last keystroke\n  }\n)\n\nsearchInput.addEventListener('input', (e) => {\n  debouncedSearch(e.target.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Add a success callback\nDESCRIPTION: The `onSuccess()` method adds a callback function that is executed when a task completes successfully.  This enables the handling of successful task results.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nonSuccess(cb): () => void\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Priority Queue with AsyncQueuer in TypeScript\nDESCRIPTION: This snippet illustrates how to create a priority queue with static priority values attached directly to task functions. Tasks are assigned a numeric priority property, with higher numbers indicating higher priority. The AsyncQueuer processes tasks based on priority rather than insertion order, running the highest priority tasks first concurrently. This requires concurrency setting and task assignment of priority metadata for correct ordering.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst priorityQueue = new AsyncQueuer<string>({\n  concurrency: 2\n})\n\n// Create tasks with static priority values\nconst lowPriorityTask = Object.assign(\n  async () => 'low priority result',\n  { priority: 1 }\n)\n\nconst highPriorityTask = Object.assign(\n  async () => 'high priority result',\n  { priority: 3 }\n)\n\nconst mediumPriorityTask = Object.assign(\n  async () => 'medium priority result',\n  { priority: 2 }\n)\n\n// Add tasks in any order - they'll be processed by priority (higher numbers first)\npriorityQueue.addItem(lowPriorityTask)\npriorityQueue.addItem(highPriorityTask)\npriorityQueue.addItem(mediumPriorityTask)\n// Processes: high and medium concurrently, then low\n```\n\n----------------------------------------\n\nTITLE: Basic API Call Debouncing Example in React\nDESCRIPTION: A simple example of using the useAsyncDebouncer hook to debounce an API search call with a 500ms wait time. This demonstrates the core functionality of delaying an async function execution.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncdebouncer.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic API call debouncing\nconst { maybeExecute } = useAsyncDebouncer(\n  async (query: string) => {\n    const results = await api.search(query);\n    return results;\n  },\n  { wait: 500 }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Async Queue with asyncQueue Function in TypeScript\nDESCRIPTION: This snippet demonstrates creating a simple async queue using the asyncQueue function from TanStack Pacer. It sets concurrency to 2, allowing up to two async tasks to run simultaneously. The onItemsChange callback logs the count of active tasks whenever the queue's state changes. It shows how to add asynchronous tasks using the returned function, where each task fetches data asynchronously and returns results. It requires the @tanstack/pacer package and an asynchronous fetchData function definition.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { asyncQueue } from '@tanstack/pacer'\n\n// Create a queue that processes up to 2 items concurrently\nconst processItems = asyncQueue<string>({\n  concurrency: 2,\n  onItemsChange: (queuer) => {\n    console.log('Active tasks:', queuer.getActiveItems().length)\n  }\n})\n\n// Add async tasks to be processed\nprocessItems(async () => {\n  const result = await fetchData(1)\n  return result\n})\n\nprocessItems(async () => {\n  const result = await fetchData(2)\n  return result\n})\n```\n\n----------------------------------------\n\nTITLE: Defining useAsyncRateLimiter Hook in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `useAsyncRateLimiter` hook. It creates and returns an `AsyncRateLimiter` instance, allowing control over the execution rate of an asynchronous function. The hook takes an asynchronous function (`fn`) and options (`options`) as parameters, returning an `AsyncRateLimiter` instance. This allows developers to control how frequently an asynchronous function is called within a given time window, useful for adhering to API rate limits or managing resource usage.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncratelimiter.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useAsyncRateLimiter<TFn, TArgs>(fn, options): AsyncRateLimiter<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Throttling with State Management - TSX\nDESCRIPTION: Illustrates how to integrate `createAsyncThrottler` with state management using `createSignal`. An asynchronous `searchAPI` function is throttled to update the state (`data`) with the search results. The configuration includes a `wait` time of 2000ms, `leading: true` to execute immediately on the first call, and `trailing: false` to skip trailing edge updates. The result of `searchAPI` is set to the signal `data` via `setData`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncthrottler.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// With state management\nconst [data, setData] = createSignal(null);\nconst { maybeExecute } = createAsyncThrottler(\n  async (query) => {\n    const result = await searchAPI(query);\n    setData(result);\n  },\n  {\n    wait: 2000,\n    leading: true,   // Execute immediately on first call\n    trailing: false  // Skip trailing edge updates\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Example: Throttling a Resize Handler with useThrottledCallback (TSX)\nDESCRIPTION: Demonstrates using `useThrottledCallback` to create a throttled resize event handler in a React component. The handler function (`updateLayoutMeasurements`) will execute at most once every 100 milliseconds. The throttled function is then used within a `useEffect` hook to add and remove the event listener.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottledcallback.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Throttle a window resize handler\nconst handleResize = useThrottledCallback(() => {\n  updateLayoutMeasurements();\n}, {\n  wait: 100 // Execute at most once every 100ms\n});\n\n// Use in an event listener\nuseEffect(() => {\n  window.addEventListener('resize', handleResize);\n  return () => window.removeEventListener('resize', handleResize);\n}, [handleResize]);\n```\n\n----------------------------------------\n\nTITLE: Basic API call throttling - TSX\nDESCRIPTION: Demonstrates basic usage of `createAsyncThrottler` to throttle an API call. It defines an asynchronous function that fetches data from an API based on an ID. The `createAsyncThrottler` hook is used with a `wait` time of 1000ms, limiting the function's execution to once per second.  The `maybeExecute` function returned by `createAsyncThrottler` is used to conditionally execute the throttled function.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncthrottler.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic API call throttling\nconst { maybeExecute } = createAsyncThrottler(\n  async (id: string) => {\n    const data = await api.fetchData(id);\n    return data;\n  },\n  { wait: 1000 }\n);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of createRateLimitedValue in SolidJS Components\nDESCRIPTION: Demonstrates practical examples of using the createRateLimitedValue hook in SolidJS components. Shows basic usage with limit and window settings, handling rejected updates, and accessing the rateLimiter state through signals.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createratelimitedvalue.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic rate limiting - update at most 5 times per minute\nconst [rateLimitedValue] = createRateLimitedValue(rawValue, {\n  limit: 5,\n  window: 60000\n});\n\n// With rejection callback\nconst [rateLimitedValue, rateLimiter] = createRateLimitedValue(rawValue, {\n  limit: 3,\n  window: 5000,\n  onReject: (rateLimiter) => {\n    console.log(`Update rejected. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`);\n  }\n});\n\n// Optionally access rateLimiter state via signals\nconst handleSubmit = () => {\n  const remaining = rateLimiter.remainingInWindow();\n  if (remaining > 0) {\n    console.log(`${remaining} updates remaining in this window`);\n  } else {\n    console.log('Rate limit reached for this window');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Throttler maybeExecute example\nDESCRIPTION: Shows the usage of the maybeExecute method with a Throttler instance.  It demonstrates that the first call to maybeExecute will execute immediately and subsequent calls within the specified wait period will be throttled, depending on the leading/trailing edge options.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttled = new Throttler(fn, { wait: 1000 });\n\n// First call executes immediately\nthrottled.maybeExecute('a', 'b');\n\n// Call during wait period - gets throttled\nthrottled.maybeExecute('c', 'd');\n```\n\n----------------------------------------\n\nTITLE: Conditional Enabling/Disabling with Solid Framework Adapter (TypeScript)\nDESCRIPTION: Illustrates how to reactively update the `enabled` option of a `Debouncer` instance in Solid. Using `createEffect`, the `setOptions` method is called whenever the condition (e.g., signal value length) changes, enabling or disabling the debouncer.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// Solid example\nconst debouncer = new Debouncer(fn, { wait: 500, enabled: false }) // Disable by default\ncreateEffect(() => {\n  debouncer.setOptions({ enabled: search().length > 3 }) // Enable/disable based on input length\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the useRateLimiter Hook Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the `useRateLimiter` hook. It accepts a function `fn` (of generic type `TFn`) and an `options` object (of type `RateLimiterOptions`) as input. It returns a `RateLimiter` instance typed with the provided function and argument types (`TFn`, `TArgs`).\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimiter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRateLimiter<TFn, TArgs>(fn, options): RateLimiter<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Accessing RateLimiter Methods Example\nDESCRIPTION: This example demonstrates accessing methods of the returned `rateLimiter` instance.  It shows how to check the remaining updates available within the current window using `getRemainingInWindow()` and how to handle the case when the rate limit is reached. This illustrates how to use the rate limiter for conditional operations in the UI.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedvalue.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Optionally access rateLimiter methods\nconst handleSubmit = () => {\n  const remaining = rateLimiter.getRemainingInWindow();\n  if (remaining > 0) {\n    console.log(`${remaining} updates remaining in this window`);\n  } else {\n    console.log('Rate limit reached for this window');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Throttler Class Initialization and Usage\nDESCRIPTION: This code demonstrates how to initialize a Throttler instance with a function and options, including the wait time.  It shows how to call the maybeExecute method, and the effect of throttling subsequent calls within the wait period. The Throttler ensures the function is called at most once per specified time window.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttler = new Throttler(\n  (id: string) => api.getData(id),\n  { wait: 1000 } // Execute at most once per second\n);\n\n// First call executes immediately\nthrottler.maybeExecute('123');\n\n// Subsequent calls within 1000ms are throttled\nthrottler.maybeExecute('123'); // Throttled\n```\n\n----------------------------------------\n\nTITLE: Registering Task Lifecycle Callbacks with AsyncQueuer in TypeScript\nDESCRIPTION: This snippet illustrates the use of AsyncQueuer task lifecycle callbacks: onSuccess, onError, and onSettled. Each method registers a callback to handle task completion events—success, failure, or any settled state respectively. The snippet also shows how to unsubscribe from these callbacks when no longer needed. This feature enables fine-grained monitoring and reaction to task outcomes.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst queue = new AsyncQueuer<string>()\n\n// Handle successful task completion\nconst unsubSuccess = queue.onSuccess((result) => {\n  console.log('Task succeeded:', result)\n})\n\n// Handle task errors\nconst unsubError = queue.onError((error) => {\n  console.error('Task failed:', error)\n})\n\n// Handle task completion regardless of success/failure\nconst unsubSettled = queue.onSettled((result) => {\n  if (result instanceof Error) {\n    console.log('Task failed:', result)\n  } else {\n    console.log('Task succeeded:', result)\n  }\n})\n\n// Unsubscribe from callbacks when no longer needed\nunsubSuccess()\nunsubError()\nunsubSettled()\n```\n\n----------------------------------------\n\nTITLE: AsyncDebouncer getIsPending Method\nDESCRIPTION: The `getIsPending` method returns a boolean indicating whether there is a pending execution of the debounced function.  It returns `true` if a call is scheduled to be executed after the wait period, and `false` otherwise.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncdebouncer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetIsPending(): boolean\n```\n\n----------------------------------------\n\nTITLE: Basic API Call Rate Limiting Example - TSX\nDESCRIPTION: Demonstrates basic API call rate limiting using createAsyncRateLimiter.  It defines an async function to fetch data from an API and rate limits its execution to 5 calls per second.  The `maybeExecute` function is used to conditionally execute the API call based on the rate limit.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncratelimiter.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic API call rate limiting\nconst { maybeExecute } = createAsyncRateLimiter(\n  async (id: string) => {\n    const data = await api.fetchData(id);\n    return data;\n  },\n  { limit: 5, window: 1000 } // 5 calls per second\n);\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks (`onExecute`, `onError`) in `AsyncDebouncer` (TypeScript)\nDESCRIPTION: Explains the callbacks available for the asynchronous `AsyncDebouncer`. `onExecute` is called after successful execution (similar to the synchronous version), while `onError` is specifically for handling errors thrown by the debounced asynchronous function.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst asyncDebouncer = new AsyncDebouncer(async (value) => {\n  await saveToAPI(value)\n}, {\n  wait: 500,\n  onExecute: (debouncer) => {\n    // Called after each successful execution\n    console.log('Async function executed', debouncer.getExecutionCount())\n  },\n  onError: (error) => {\n    // Called if the async function throws an error\n    console.error('Async function failed:', error)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using RateLimiter Class Instance (Example)\nDESCRIPTION: This snippet demonstrates creating an instance of the `RateLimiter` class directly. It shows how to configure the limit and window and then call the `maybeExecute` method. The method returns `true` if the call is allowed and `false` if it is rejected due to exceeding the rate limit.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/ratelimit.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst rateLimiter = new RateLimiter(fn, { limit: 5, window: 1000 });\n\n// First 5 calls will return true\nrateLimiter.maybeExecute('arg1', 'arg2'); // true\n\n// Additional calls within the window will return false\nrateLimiter.maybeExecute('arg1', 'arg2'); // false\n```\n\n----------------------------------------\n\nTITLE: AsyncDebouncer Usage Example\nDESCRIPTION: Demonstrates how to use the AsyncDebouncer class to debounce an asynchronous search API call. The `maybeExecute` method is called on each keystroke, but the API call is only executed after 500ms of no typing.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncdebouncer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst asyncDebouncer = new AsyncDebouncer(async (value: string) => {\n  await searchAPI(value);\n}, { wait: 500 });\n\n// Called on each keystroke but only executes after 500ms of no typing\ninputElement.addEventListener('input', () => {\n  asyncDebouncer.maybeExecute(inputElement.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items with FIFO and LIFO Behavior Using getNextItem in TypeScript\nDESCRIPTION: This example highlights how to retrieve items from the Queuer instance as either a standard FIFO queue or a stack (LIFO) structure by passing different position arguments to getNextItem. If no position is given, FIFO is used; specifying 'back' enables LIFO. Requires an initialized Queuer instance. Input is optional position parameter; output is the next item per the selected behavior.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/queuer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Standard FIFO queuer\nqueuer.getNextItem()\n// Stack-like behavior (LIFO)\nqueuer.getNextItem('back')\n```\n\n----------------------------------------\n\nTITLE: Custom Leading/Trailing Behavior (JSX)\nDESCRIPTION: This example illustrates how to customize the throttling behavior using `leading` and `trailing` options.  It initializes the throttled value and throttler instance, setting `leading` to `true` (immediate update) and `trailing` to `false` (skip trailing update). This allows for more granular control over when the value is updated within the throttling window.  This also shows how to get the throttler instance to access the throttler's methods.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottledvalue.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n// With custom leading/trailing behavior\nconst [throttledValue, throttler] = useThrottledValue(rawValue, {\n  wait: 1000,\n  leading: true,   // Update immediately on first change\n  trailing: false  // Skip trailing edge updates\n});\n```\n\n----------------------------------------\n\nTITLE: Example Usage of createQueuer with Solid.js\nDESCRIPTION: Demonstrates the usage of the `createQueuer` hook with Solid.js's `createSignal` for custom state management. It shows how to configure the queue with options like `started`, `wait`, `onItemsChange`, and `getPriority`, and how to interact with the queue's methods to add items, control the scheduler, and access the queue state.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createqueuer.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Example with custom state management and scheduling\nconst [items, setItems] = createSignal([]);\n\nconst queue = createQueuer({\n  started: true, // Start processing immediately\n  wait: 1000,    // Process one item every second\n  onItemsChange: (queue) => setItems(queue.getAllItems()),\n  getPriority: (item) => item.priority // Process higher priority items first\n});\n\n// Add items to process - they'll be handled automatically\nqueue.addItem('task1');\nqueue.addItem('task2');\n\n// Control the scheduler\nqueue.stop();  // Pause processing\nqueue.start(); // Resume processing\n\n// Access queue state via signals\nconsole.log('Items:', queue.allItems());\nconsole.log('Size:', queue.size());\nconsole.log('Is empty:', queue.isEmpty());\nconsole.log('Is running:', queue.isRunning());\nconsole.log('Next item:', queue.peek());\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Rate Limiter with TanStack Pacer in Solid - TypeScript\nDESCRIPTION: This snippet demonstrates the creation of a reusable rate limiter and a signal-based rate limiter hook in a Solid project using the '@tanstack/solid-pacer' package. The first hook, 'createRateLimiter', provides full control over how often a function (such as 'fetchUserData') can be called, based on a specified limit and window. The second hook, 'createRateLimitedSignal', adds rate limiting to a reactive signal and provides a callback to monitor executions, enabling stateful control and observable execution counts. Dependencies: '@tanstack/solid-pacer', and optionally 'fetchUserData'. Inputs include an API function or initial state with limit and window parameters; outputs include limited execution and signal-based state. These should be used where rate-limited asynchronous operations or state updates are required in a Solid application.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createRateLimiter, createRateLimitedSignal } from '@tanstack/solid-pacer'\n\n// Low-level hook for full control\nconst limiter = createRateLimiter(\n  (id: string) => fetchUserData(id),\n  { limit: 5, window: 1000 }\n)\n\n// Signal-based hook for state management\nconst [value, setValue, limiter] = createRateLimitedSignal('', {\n  limit: 5,\n  window: 1000,\n  onExecute: (limiter) => {\n    console.log('Total executions:', limiter.getExecutionCount())\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using createRateLimitedSignal Hook in TSX\nDESCRIPTION: Provides examples of how to use the `createRateLimitedSignal` hook within a Solid (TSX) application. It demonstrates setting up basic rate limiting (e.g., 5 updates per minute), implementing a callback (`onReject`) for when the rate limit is exceeded, and accessing the rate limiter's state directly (e.g., checking `remainingInWindow`) for conditional logic.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createratelimitedsignal.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic rate limiting - update state at most 5 times per minute\nconst [value, setValue, rateLimiter] = createRateLimitedSignal(0, {\n  limit: 5,\n  window: 60000\n});\n\n// With rejection callback\nconst [value, setValue] = createRateLimitedSignal(0, {\n  limit: 3,\n  window: 5000,\n  onReject: (rateLimiter) => {\n    alert(`Rate limit reached. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`);\n  }\n});\n\n// Access rateLimiter state via signals\nconst handleSubmit = () => {\n  const remaining = rateLimiter.remainingInWindow();\n  if (remaining > 0) {\n    setValue(newValue);\n  } else {\n    showRateLimitWarning();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Attempting Execution with RateLimiter maybeExecute in TypeScript\nDESCRIPTION: Defines the `maybeExecute` method signature. It attempts to invoke the wrapped function with the provided `args` if the rate limit has not been exceeded. Returns `true` if the function was executed, `false` otherwise.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nmaybeExecute(...args): boolean\n```\n\n----------------------------------------\n\nTITLE: Async Queue Usage Example TypeScript\nDESCRIPTION: This example demonstrates how to use the asyncQueue function to enqueue asynchronous tasks. It initializes the queue with a type of string, then adds an asynchronous function that returns the string 'Hello' to the queue. The `enqueue` function is used to add items to be processed.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncqueue.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst enqueue = asyncQueue<string>();\n\n// Add items to be processed\nenqueue(async () => {\n  return 'Hello';\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing RateLimiter with Function and Options in TypeScript\nDESCRIPTION: Demonstrates creating a `RateLimiter` instance. It takes a function (`api.getData`) to be rate-limited and an options object specifying the `limit` (5 calls) and `window` (1000ms). Calls to `maybeExecute` will run immediately up to the limit within the window, then block subsequent calls.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst rateLimiter = new RateLimiter(\n  (id: string) => api.getData(id),\n  { limit: 5, window: 1000 } // 5 calls per second\n);\n\n// Will execute immediately until limit reached, then block\nrateLimiter.maybeExecute('123');\n```\n\n----------------------------------------\n\nTITLE: Example Usage of asyncThrottle (TypeScript)\nDESCRIPTION: Demonstrates how to use the `asyncThrottle` function in TypeScript. It creates a throttled version of an asynchronous operation (`someAsyncOperation`) with a wait time of 1000ms (1 second). Subsequent calls to `throttled()` within the wait period will be delayed, ensuring the operation runs at most once per second.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncthrottle.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst throttled = asyncThrottle(async () => {\n  await someAsyncOperation();\n}, { wait: 1000 });\n\n// This will execute at most once per second\nawait throttled();\nawait throttled(); // Waits 1 second before executing\n```\n\n----------------------------------------\n\nTITLE: AsyncDebouncer setOptions Method\nDESCRIPTION: The `setOptions` method updates the debouncer options with the provided new options. It returns the new options state after the update. It accepts a partial version of the AsyncDebouncerOptions interface.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncdebouncer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(newOptions): Required<AsyncDebouncerOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Integrating useThrottler with Redux\nDESCRIPTION: Example demonstrating how to use the useThrottler hook with Redux dispatch to throttle action dispatches. The throttled function dispatches an updateAction with the provided value at most once every 1000ms.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottler.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// With Redux\nconst dispatch = useDispatch();\nconst throttler = useThrottler(\n  (value) => dispatch(updateAction(value)),\n  { wait: 1000 }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Rate-Limited State Usage (TSX)\nDESCRIPTION: Shows how to initialize a state variable using `useRateLimitedState` with a specified `limit` and `window` duration, receiving the state value, a rate-limited setter function, and the rate limiter instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedstate.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// Basic rate limiting - update state at most 5 times per minute\nconst [value, setValue, rateLimiter] = useRateLimitedState(0, {\n  limit: 5,\n  window: 60000\n});\n```\n\n----------------------------------------\n\nTITLE: Async Queue Definition TypeScript\nDESCRIPTION: Defines the asyncQueue function that creates an AsyncQueuer instance and returns a bound addItem function. It takes AsyncQueuerOptions as a parameter and returns a function that adds tasks to the queuer. The addItem function takes a function (fn) that returns a Promise, a queue position, and a boolean runOnUpdate flag.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncqueue.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction asyncQueue<TValue>(options): (fn, position, runOnUpdate) => Promise<TValue>\n```\n\n----------------------------------------\n\nTITLE: Configuring LIFO Stack with AsyncQueuer in TypeScript\nDESCRIPTION: This snippet demonstrates creating a LIFO (Last In, First Out) stack behavior with AsyncQueuer by adding items to the back and retrieving items from the back as well. This approach prioritizes the most recently added tasks first, useful for prioritizing newer tasks or managing task stacks. It runs with concurrency 2, processing two tasks in parallel, where the newest tasks are executed before older ones.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst stack = new AsyncQueuer<string>({\n  addItemsTo: 'back',\n  getItemsFrom: 'back', // Process newest items first\n  concurrency: 2\n})\n\nstack.addItem(async () => 'first')  // [first]\nstack.addItem(async () => 'second') // [first, second]\n// Processes: second first, then first\n```\n\n----------------------------------------\n\nTITLE: React Framework Adapter Debouncing Hooks (TSX)\nDESCRIPTION: Introduces the hooks provided by the TanStack Pacer React adapter. These hooks (`useDebouncer`, `useDebouncedCallback`, `useDebouncedValue`) integrate debouncing directly into React components and state management, offering different levels of abstraction for various use cases.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDebouncer, useDebouncedCallback, useDebouncedValue } from '@tanstack/react-pacer'\n\n// Low-level hook for full control\nconst debouncer = useDebouncer(\n  (value: string) => saveToDatabase(value),\n  { wait: 500 }\n)\n\n// Simple callback hook for basic use cases\nconst handleSearch = useDebouncedCallback(\n  (query: string) => fetchSearchResults(query),\n  { wait: 500 }\n)\n\n// State-based hook for reactive state management\nconst [instantState, setInstantState] = useState('')\nconst [debouncedState, setDebouncedState] = useDebouncedValue(\n  instantState, // Value to debounce\n  { wait: 500 }\n)\n```\n\n----------------------------------------\n\nTITLE: Using the useRateLimiter Hook in a React Component (TSX)\nDESCRIPTION: This example demonstrates how to use the `useRateLimiter` hook within a React component using TSX. It initializes the hook with a hypothetical `apiCall` function and options to limit execution to 5 calls per 60 seconds. The `maybeExecute` function returned by the hook is then used conditionally within a click handler, checking the remaining allowed executions using `getRemainingInWindow` before attempting the call.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimiter.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic rate limiting - max 5 calls per minute\nconst { maybeExecute, getRemainingInWindow } = useRateLimiter(apiCall, {\n  limit: 5,\n  window: 60000,\n});\n\n// Monitor rate limit status\nconst handleClick = () => {\n  const remaining = getRemainingInWindow();\n  if (remaining > 0) {\n    maybeExecute(data);\n  } else {\n    showRateLimitWarning();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic throttling with custom state - TSX\nDESCRIPTION: Demonstrates basic throttling using `createThrottler` with Solid's `createSignal`.  It creates a signal `value` and then creates a throttler that updates the signal's value. The throttling is configured with a `wait` time of 1000ms.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createthrottler.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic throttling with custom state\nconst [value, setValue] = createSignal(0);\nconst throttler = createThrottler(setValue, { wait: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Importing Core Pacer Functionality\nDESCRIPTION: This code imports core Pacer functionality (`debounce`, `Debouncer`) directly from the `@tanstack/react-pacer` package. This eliminates the need to install the core Pacer package separately. It shows how to access underlying pacer utilities from the react adapter.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/adapter.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { debounce, Debouncer } from '@tanstack/react-pacer' // no need to install the core package separately\n```\n\n----------------------------------------\n\nTITLE: AsyncDebouncer Constructor\nDESCRIPTION: Defines the constructor for the AsyncDebouncer class. It accepts an asynchronous function (`fn`) and initial options (`initialOptions`) including the wait time. It returns an instance of the AsyncDebouncer class.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncdebouncer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew AsyncDebouncer<TFn, TArgs>(fn, initialOptions): AsyncDebouncer<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting with Rejection Callback Example\nDESCRIPTION: This example demonstrates rate limiting with a rejection callback. It limits updates to 3 within a 5000 millisecond window. The `onReject` callback logs a message indicating the time until the next window if an update is rejected. The rateLimiter instance returned from `useRateLimitedValue` provides the `getMsUntilNextWindow()` method to get the time remaining.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedvalue.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// With rejection callback\nconst [rateLimitedValue, rateLimiter] = useRateLimitedValue(rawValue, {\n  limit: 3,\n  window: 5000,\n  onReject: (rateLimiter) => {\n    console.log(`Update rejected. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the useThrottledCallback Hook Signature (TypeScript)\nDESCRIPTION: Defines the TypeScript signature for the `useThrottledCallback` hook. It accepts a function `fn` and an `options` object (of type `ThrottlerOptions`) and returns a new function that takes the same arguments as `fn` but is throttled according to the provided options.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottledcallback.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useThrottledCallback<TFn, TArgs>(fn, options): (...args) => void\n```\n\n----------------------------------------\n\nTITLE: Using useThrottler with React useState\nDESCRIPTION: Example showing how to use the useThrottler hook with React's useState to throttle state updates. The hook is configured with a 1000ms wait time between executions.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottler.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic throttling with custom state\nconst [value, setValue] = useState(0);\nconst throttler = useThrottler(setValue, { wait: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Visualizing Throttling Behavior\nDESCRIPTION: This text-based diagram illustrates how throttling works over time. It shows that even with multiple rapid calls, the throttled function only executes at a fixed interval (one execution per 3 ticks in this example), demonstrating how some calls are skipped.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThrottling (one execution per 3 ticks)\nTimeline: [1 second per tick]\nCalls:        ⬇️  ⬇️  ⬇️           ⬇️  ⬇️  ⬇️  ⬇️             ⬇️\nExecuted:     ✅  ❌  ⏳  ->   ✅  ❌  ❌  ❌  ✅             ✅ \n             [=================================================================]\n             ^ Only one execution allowed per 3 ticks,\n               regardless of how many calls are made\n\n             [First burst]    [More calls]              [Spaced calls]\n             Execute first    Execute after             Execute each time\n             then throttle    wait period               wait period passes\n```\n\n----------------------------------------\n\nTITLE: Defining createRateLimitedSignal Hook in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for `createRateLimitedSignal`. This hook takes an initial value (`TValue`) and rate limiter options (`RateLimiterOptions`), returning a tuple containing a Solid state accessor (`Accessor`), a rate-limited setter (`Setter`), and the underlying `SolidRateLimiter` instance for finer control.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createratelimitedsignal.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createRateLimitedSignal<TValue>(value, initialOptions): [Accessor<TValue>, Setter<TValue>, SolidRateLimiter<Setter<TValue>, [Accessor<TValue>]>]\n```\n\n----------------------------------------\n\nTITLE: Defining useRateLimitedValue Hook (Type Definition)\nDESCRIPTION: This snippet defines the type signature for the `useRateLimitedValue` function. It specifies the generic type `TValue` for the value being rate-limited, and the type of the options parameter (`RateLimiterOptions`).  The hook returns a tuple containing the rate-limited value of type `TValue` and a `RateLimiter` instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedvalue.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRateLimitedValue<TValue>(value, options): [TValue, RateLimiter<Dispatch<SetStateAction<TValue>>, [TValue]>]\n```\n\n----------------------------------------\n\nTITLE: Creating Throttled State Signals with Solid.js in TypeScript\nDESCRIPTION: This snippet defines the 'createThrottledSignal' hook which accepts an initial state value and throttling options to create a throttled state signal. It returns a tuple with a throttled getter (accessor), a throttled setter, and the throttler instance for detailed control and inspection. The hook leverages Solid's reactive primitives and throttling logic to limit update frequency to a configured wait time, optionally supporting leading and trailing edge updating behavior. Dependencies include Solid's createSignal and related types, as well as a Throttler implementation. Inputs are the initial value and throttler options; outputs are the accessor, setter, and throttler. This is suitable for scenarios needing controlled state updates to prevent frequent recalculations or renders.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createthrottledsignal.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction createThrottledSignal<TValue>(value, initialOptions): [Accessor<TValue>, Setter<TValue>, SolidThrottler<Setter<TValue>, [Accessor<TValue>]>]\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// Basic throttling - update state at most once per second\nconst [value, setValue, throttler] = createThrottledSignal(0, { wait: 1000 });\n\n// With custom leading/trailing behavior\nconst [value, setValue] = createThrottledSignal(0, {\n  wait: 1000,\n  leading: true,   // Update immediately on first change\n  trailing: false  // Skip trailing edge updates\n});\n\n// Access throttler state via signals\nconsole.log('Executions:', throttler.executionCount());\nconsole.log('Is pending:', throttler.isPending());\nconsole.log('Last execution:', throttler.lastExecutionTime());\nconsole.log('Next execution:', throttler.nextExecutionTime());\n```\n\n----------------------------------------\n\nTITLE: Setting Callbacks for AsyncRateLimiter Including Error Handling in TypeScript\nDESCRIPTION: The snippet initializes an `AsyncRateLimiter` for asynchronous functions that return promises. It shows configuring callbacks for execution success (`onExecute`), rejection (`onReject`), and error handling (`onError`), enabling robust tracking and graceful error management without breaking the rate limiting chain.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst asyncLimiter = new AsyncRateLimiter(async (id) => {\n  await saveToAPI(id)\n}, {\n  limit: 5,\n  window: 1000,\n  onExecute: (rateLimiter) => {\n    // Called after each successful execution\n    console.log('Async function executed', rateLimiter.getExecutionCount())\n  },\n  onReject: (rateLimiter) => {\n    // Called when an execution is rejected\n    console.log(`Rate limit exceeded. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`)\n  },\n  onError: (error) => {\n    // Called if the async function throws an error\n    console.error('Async function failed:', error)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Rate Limiting Example\nDESCRIPTION: This example demonstrates basic rate limiting.  It sets the limit to 5 updates per minute (60000 milliseconds).  The `useRateLimitedValue` hook returns `rateLimitedValue` which is the rate-limited value.  This is a common use case for limiting the number of updates within a given period.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedvalue.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Basic rate limiting - update at most 5 times per minute\nconst [rateLimitedValue] = useRateLimitedValue(rawValue, {\n  limit: 5,\n  window: 60000\n});\n```\n\n----------------------------------------\n\nTITLE: Debouncer getExecutionCount Method in TypeScript\nDESCRIPTION: Method that returns the number of times the debounced function has been executed, which can be useful for tracking or debugging purposes.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/debouncer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetExecutionCount(): number\n```\n\n----------------------------------------\n\nTITLE: useDebouncedState Hook Example - TSX\nDESCRIPTION: Illustrates how to use the useDebouncedState hook within a React component to debounce a search term.  It defines a state variable `searchTerm` and updates it with debouncing.  It also shows how to access debouncer's properties such as execution count and pending status.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usedebouncedstate.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Debounced search input\nconst [searchTerm, setSearchTerm, debouncer] = useDebouncedState('', {\n  wait: 500 // Wait 500ms after last keystroke\n});\n\n// Update value - will be debounced\nconst handleChange = (e) => {\n  setSearchTerm(e.target.value);\n};\n\n// Get number of times the debounced function has executed\nconst executionCount = debouncer.getExecutionCount();\n\n// Get the pending state\nconst isPending = debouncer.getIsPending();\n```\n\n----------------------------------------\n\nTITLE: Get active items\nDESCRIPTION: The `getActiveItems()` method returns an array of currently active items. These are the tasks that are currently being processed by the queuer.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetActiveItems(): () => Promise<TValue>[]\n```\n\n----------------------------------------\n\nTITLE: Creating AsyncQueuer Instance with Constructor\nDESCRIPTION: This snippet demonstrates how to create a new instance of `AsyncQueuer` using its constructor. The constructor accepts an `initialOptions` object which allows to configure various aspects of the queue like the concurrency limit.  The return value is a new `AsyncQueuer` instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew AsyncQueuer<TValue>(initialOptions): AsyncQueuer<TValue>\n```\n\n----------------------------------------\n\nTITLE: Add a settled callback\nDESCRIPTION: The `onSettled()` method adds a callback function that is executed when a task has settled (either completed successfully or rejected).  This allows for consistent state updates or cleanup regardless of task outcome.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nonSettled(cb): () => void\n```\n\n----------------------------------------\n\nTITLE: useDebouncedState Function Definition - Typescript\nDESCRIPTION: Defines the useDebouncedState function, which is a React hook for debouncing state updates.  It takes a value and debouncer options as input. It returns a tuple containing the debounced value, a state update dispatcher, and the debouncer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usedebouncedstate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useDebouncedState<TValue>(value, options): [TValue, Dispatch<SetStateAction<TValue>>, Debouncer<Dispatch<SetStateAction<TValue>>, [TValue]>]\n```\n\n----------------------------------------\n\nTITLE: Configuring useThrottler with Custom Options\nDESCRIPTION: Example showing advanced configuration of useThrottler with a generic state manager. The throttler is configured with a 2000ms wait time, enabling the leading option to execute immediately on first call, and disabling the trailing option to skip trailing edge updates.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottler.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// With any state manager\nconst throttler = useThrottler(\n  (value) => stateManager.setState(value),\n  {\n    wait: 2000,\n    leading: true,   // Execute immediately on first call\n    trailing: false  // Skip trailing edge updates\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Throttling with State Manager and Options - TSX\nDESCRIPTION: Shows how to integrate `createThrottler` with any state manager.  It configures the throttler with custom options such as `wait`, `leading`, and `trailing` to control execution behavior. The throttled function updates the state using `stateManager.setState(value)`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createthrottler.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// With any state manager\nconst throttler = createThrottler(\n  (value) => stateManager.setState(value),\n  {\n    wait: 2000,\n    leading: true,   // Execute immediately on first call\n    trailing: false  // Skip trailing edge updates\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a FIFO Queuer with Queuer Class in TypeScript\nDESCRIPTION: This example demonstrates how to create a standard first-in-first-out queuer using the Queuer class. By adding items via addItem(), they are placed at the end and removed from the front with getNextItem(). No special dependencies are required, but TypeScript support is recommended. Input comprises the items to be enqueued (numbers in this example); output is the retrieval of these items in their original order.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/queuer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// FIFO queuer\nconst queuer = new Queuer<number>();\nqueuer.addItem(1); // [1]\nqueuer.addItem(2); // [1, 2]\nqueuer.getNextItem(); // returns 1, queuer is [2]\n```\n\n----------------------------------------\n\nTITLE: Implementing callbacks AsyncThrottler TanStack Pacer TypeScript\nDESCRIPTION: Demonstrates the callbacks available for the asynchronous `AsyncThrottler`. It includes `onExecute`, which fires after a successful async execution, and `onError`, which is called if the wrapped asynchronous function throws an error, allowing for robust error handling within the throttling mechanism.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst asyncThrottler = new AsyncThrottler(async (value) => {\n  await saveToAPI(value)\n}, {\n  wait: 200,\n  onExecute: (throttler) => {\n    // Called after each successful execution\n    console.log('Async function executed', throttler.getExecutionCount())\n  },\n  onError: (error) => {\n    // Called if the async function throws an error\n    console.error('Async function failed:', error)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Get the size of the queuer\nDESCRIPTION: The `getSize()` method returns the current size of the queuer, which is the total number of items, including both active and pending tasks.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ngetSize(): number\n```\n\n----------------------------------------\n\nTITLE: Debouncer getIsPending Method in TypeScript\nDESCRIPTION: Method that returns a boolean indicating whether the debounced function is currently pending execution (i.e., the debounce timer is active).\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/debouncer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetIsPending(): boolean\n```\n\n----------------------------------------\n\nTITLE: Reset the queuer\nDESCRIPTION: The `reset()` method resets the queuer to its initial state.  The optional `withInitialItems` parameter controls whether initial items are re-added after reset.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nreset(withInitialItems?): void\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Execution Time with SolidJS Accessor in TypeScript\nDESCRIPTION: This snippet defines the `lastExecutionTime` property, a SolidJS `Accessor` returning a number. It provides reactive access to the timestamp of the last successful execution of the throttled function, replacing the standard `getLastExecutionTime` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidthrottler.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nlastExecutionTime: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Check if queuer is running\nDESCRIPTION: The `getIsRunning()` method returns `true` if the queuer is currently processing items, and `false` if it's paused or stopped.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetIsRunning(): boolean\n```\n\n----------------------------------------\n\nTITLE: Using useDebouncedValue Hook in React\nDESCRIPTION: This code snippet demonstrates the usage of the `useDebouncedValue` hook from `@tanstack/react-pacer`. It creates a debounced value that updates after a specified delay (1000ms in this case) based on the `instantValue`.  It depends on React's `useState` hook.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/adapter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDebouncedValue } from '@tanstack/react-pacer'\n\nconst [instantValue, instantValueRef] = useState(0)\nconst [debouncedValue, debouncer] = useDebouncedValue(instantValue, {\n  wait: 1000,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Throttler Methods (JSX)\nDESCRIPTION: This snippet demonstrates how to access the methods of the underlying `Throttler` instance to gain more control over the throttling process. This particular example accesses the `getExecutionCount` method. This allows the user to view the internal state of the throttler, such as the number of times the throttled function has been executed. It also showcases how to bind throttler methods to a UI element.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottledvalue.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n// Optionally access throttler methods\nconst handleExecutionCount = () => {\n  console.log('Executions:', throttler.getExecutionCount());\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Execution Count with SolidJS Accessor in TypeScript\nDESCRIPTION: This snippet defines the `executionCount` property, which is a SolidJS `Accessor` returning a number. It provides reactive access to the total number of times the throttled function has been executed, replacing the standard `getExecutionCount` method from the base Throttler.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidthrottler.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexecutionCount: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Using `Debouncer` Class for Advanced Synchronous Debouncing (TypeScript)\nDESCRIPTION: Shows how to use the `Debouncer` class constructor for more fine-grained control over debouncing behavior. It allows accessing the debouncer's state (like execution count or pending status), dynamically updating options, and explicitly cancelling pending executions.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Debouncer } from '@tanstack/pacer'\n\nconst searchDebouncer = new Debouncer(\n  (searchTerm: string) => performSearch(searchTerm),\n  { wait: 500 }\n)\n\n// Get information about current state\nconsole.log(searchDebouncer.getExecutionCount()) // Number of successful executions\nconsole.log(searchDebouncer.getIsPending()) // Whether a call is pending\n\n// Update options dynamically\nsearchDebouncer.setOptions({ wait: 1000 }) // Increase wait time\n\n// Cancel pending execution\nsearchDebouncer.cancel()\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler getIsPending Method in TypeScript\nDESCRIPTION: Method that returns whether the throttled function has a pending execution.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetIsPending(): boolean\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler cancel Method Implementation in TypeScript\nDESCRIPTION: Method for canceling any pending execution in the throttler.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(): void\n```\n\n----------------------------------------\n\nTITLE: Debouncing a search query using createDebouncedValue\nDESCRIPTION: This example demonstrates how to debounce a search query using the createDebouncedValue hook in a Solid.js application.  It sets up a signal for the search query, and then debounces it using createDebouncedValue with a specified wait time. The debounced value is then used to fetch search results, preventing excessive API calls during rapid typing.  The debouncer instance's state signals are also accessed.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createdebouncedvalue.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Debounce a search query\nconst [searchQuery, setSearchQuery] = createSignal('');\nconst [debouncedQuery, debouncer] = createDebouncedValue(searchQuery, {\n  wait: 500 // Wait 500ms after last change\n});\n\n// debouncedQuery will update 500ms after searchQuery stops changing\ncreateEffect(() => {\n  fetchSearchResults(debouncedQuery());\n});\n\n// Access debouncer state via signals\nconsole.log('Executions:', debouncer.executionCount());\nconsole.log('Is pending:', debouncer.isPending());\n\n// Handle input changes\nconst handleChange = (e) => {\n  setSearchQuery(e.target.value);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncRateLimiterOptions Interface - TypeScript\nDESCRIPTION: This code snippet defines the `AsyncRateLimiterOptions` interface, which provides configuration options for the async rate limiter functionality.  It takes two type parameters: `TFn` which extends `AnyAsyncFunction` and `TArgs` which extends `Parameters<TFn>`. It includes several properties like `enabled`, `limit`, `onError`, `onExecute`, `onReject`, and `window`, which dictate the rate limiting behavior.  These parameters configure things like enabling the limiter, defining the execution limit, handling errors, and handling rejections.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncratelimiteroptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\noptional enabled: boolean;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nlimit: number;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\noptional onError: (error) => void;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\noptional onExecute: (rateLimiter) => void;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\noptional onReject: (rateLimiter) => void;\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nwindow: number;\n```\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler getExecutionCount Method in TypeScript\nDESCRIPTION: Method that returns the number of times the throttled function has been executed.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetExecutionCount(): number\n```\n\n----------------------------------------\n\nTITLE: Configuring wait option in QueuerOptions (TypeScript)\nDESCRIPTION: Specifies the minimum time in milliseconds to pause between processing subsequent items from the queue. This can be used for pacing task execution.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\noptional wait: number;\n```\n\n----------------------------------------\n\nTITLE: Rate-Limited State with Rejection Callback (TSX)\nDESCRIPTION: Illustrates how to use the `useRateLimitedState` hook with the `onReject` callback option, which is invoked when a state update is rejected due to exceeding the rate limit, providing the `rateLimiter` instance for information.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedstate.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n// With rejection callback\nconst [value, setValue] = useRateLimitedState(0, {\n  limit: 3,\n  window: 5000,\n  onReject: (rateLimiter) => {\n    alert(`Rate limit reached. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Debouncing Concept Visualization\nDESCRIPTION: Illustrates the deb concept on a timeline, showing how multiple rapid calls are collapsed into a single execution that occurs only after a specified period of inactivity ('wait'). Calls before the wait period ends are discarded.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDebouncing (wait: 3 ticks)\nTimeline: [1 second per tick]\nCalls:        ⬇️  ⬇️  ⬇️  ⬇️  ⬇️     ⬇️  ⬇️  ⬇️  ⬇️               ⬇️  ⬇️\nExecuted:     ❌  ❌  ❌  ❌  ❌     ❌  ❌  ❌  ⏳   ->   ✅     ❌  ⏳   ->    ✅\n             [=================================================================]\n                                                        ^ Executes here after\n                                                         3 ticks of no calls\n\n             [Burst of calls]     [More calls]   [Wait]      [New burst]\n             No execution         Resets timer    [Delayed Execute]  [Wait] [Delayed Execute]\n```\n\n----------------------------------------\n\nTITLE: Debouncer setOptions Method in TypeScript\nDESCRIPTION: Method that updates the debouncer configuration with new options and returns the updated options state. This allows for dynamic adjustment of debounce behavior.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/debouncer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(newOptions): Required<DebouncerOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Async Debounce Function Definition - TypeScript\nDESCRIPTION: Defines the `asyncDebounce` function, which takes an async function `fn` and initial options as input. It returns a debounced function that, when called, delays the execution of `fn` until a specified wait time has elapsed. If called again during the wait period, the timer resets.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncdebounce.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction asyncDebounce<TFn, TArgs>(fn, initialOptions): (...args) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring getPriority option in QueuerOptions (TypeScript)\nDESCRIPTION: A function used to determine the processing priority of items. It takes an item of type TValue and should return a number, where higher numbers indicate higher priority.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional getPriority: (item) => number;\n```\n\n----------------------------------------\n\nTITLE: Defining the 'trailing' property for AsyncDebouncerOptions in TypeScript\nDESCRIPTION: Defines the optional `trailing` boolean property for the AsyncDebouncerOptions interface. If set to true, the debounced function executes on the trailing edge of the timeout period, meaning after the specified wait time has elapsed since the last invocation. It defaults to true.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncdebounceroptions.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional trailing: boolean;\n```\n\n----------------------------------------\n\nTITLE: Throttler getLastExecutionTime method\nDESCRIPTION: This snippet shows the getLastExecutionTime method for the Throttler class. Returns the last execution time.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastExecutionTime(): number\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using AsyncThrottler in TypeScript\nDESCRIPTION: Example showing how to create and use an AsyncThrottler to limit API calls to once per second when an input value changes.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttler = new AsyncThrottler(async (value: string) => {\n  await saveToAPI(value);\n}, { wait: 1000 });\n\n// Will only execute once per second no matter how often called\ninputElement.addEventListener('input', () => {\n  throttler.maybeExecute(inputElement.value);\n});\n```\n\n----------------------------------------\n\nTITLE: createDebouncedValue Function Definition\nDESCRIPTION: Defines the signature of the createDebouncedValue function, which creates a debounced value in Solid.js. It takes a Solid.js accessor (signal) and debouncer options, returning a tuple containing a debounced accessor and a SolidDebouncer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createdebouncedvalue.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createDebouncedValue<TValue>(value, initialOptions): [Accessor<TValue>, SolidDebouncer<Setter<TValue>, [Accessor<TValue>]>]\n```\n\n----------------------------------------\n\nTITLE: Configuring getItemsFrom option in QueuerOptions (TypeScript)\nDESCRIPTION: Specifies the default position ('front' or 'back') for retrieving items from the queue during processing. Defaults to 'front' if not specified.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional getItemsFrom: QueuePosition;\n```\n\n----------------------------------------\n\nTITLE: Declaring Time Window for Rate Limiting - TypeScript\nDESCRIPTION: Specifies a required numeric property `window` defining the time window in milliseconds during which the rate limiting applies. When combined with `limit`, it enforces that no more than the allowed executions occur in the given period. No dependencies beyond basic TypeScript.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/ratelimiteroptions.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nwindow: number;\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler getOptions Method in TypeScript\nDESCRIPTION: Method that returns the current throttling options configuration.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Required<AsyncThrottlerOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Configuring onIsRunningChange option in QueuerOptions (TypeScript)\nDESCRIPTION: A callback function triggered whenever the running state of the Queuer (whether it's actively processing) changes. It receives the Queuer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noptional onIsRunningChange: (queuer) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining SolidJS Debounced Signal Hook - TypeScript\nDESCRIPTION: This TypeScript snippet defines the signature of the `createDebouncedSignal` hook. It shows the generic type parameter `TValue`, the parameters `value` (the initial state value) and `initialOptions` (configuration for the debouncer), and the returned tuple containing the debounced value accessor, the setter function, and the debouncer instance with control methods. It highlights the core types used in the hook's interface.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createdebouncedsignal.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction createDebouncedSignal<TValue>(value, initialOptions): [Accessor<TValue>, Setter<TValue>, SolidDebouncer<Setter<TValue>, [Accessor<TValue>]>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving RateLimiter Options in TypeScript\nDESCRIPTION: Defines the `getOptions` method signature. This method returns the currently configured options for the `RateLimiter` instance as a `Required<RateLimiterOptions>` object, ensuring all default options are included.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ngetOptions(): Required<RateLimiterOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'enabled' property for AsyncDebouncerOptions in TypeScript\nDESCRIPTION: Defines the optional `enabled` boolean property within the AsyncDebouncerOptions interface. This flag controls whether the debouncer is active; if set to false, calls to `maybeExecute` will not trigger function executions. It defaults to true.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncdebounceroptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional enabled: boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring started option in QueuerOptions (TypeScript)\nDESCRIPTION: A boolean flag indicating whether the Queuer should automatically begin processing items immediately upon instantiation. Defaults to false if not specified.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\noptional started: boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating AsyncRateLimiter Instance - TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of `AsyncRateLimiter`.  It takes an asynchronous function and options which define the rate limit (calls per window). The function will execute immediately until the rate limit is reached, after which calls are blocked until the window resets.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncratelimiter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rateLimiter = new AsyncRateLimiter(\n  async (id: string) => await api.getData(id),\n  { limit: 5, window: 1000 } // 5 calls per second\n);\n\n// Will execute immediately until limit reached, then block\nawait rateLimiter.maybeExecute('123');\n```\n\n----------------------------------------\n\nTITLE: Async Debounce Example Usage - TypeScript\nDESCRIPTION: Demonstrates how to use the `asyncDebounce` function to create a debounced version of an async function that saves a value to an API. The debounced function will only execute once, after a 1-second delay following the last call. Subsequent calls within the 1-second window are cancelled.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncdebounce.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst debounced = asyncDebounce(async (value: string) => {\n  await saveToAPI(value);\n}, { wait: 1000 });\n\n// Will only execute once, 1 second after the last call\nawait debounced(\"first\");  // Cancelled\nawait debounced(\"second\"); // Cancelled\nawait debounced(\"third\");  // Executes after 1s\n```\n\n----------------------------------------\n\nTITLE: Getting Rejection Count from RateLimiter in TypeScript\nDESCRIPTION: Defines the `getRejectionCount` method signature. This method returns the number of times `maybeExecute` was called but the execution was rejected because the rate limit had been exceeded.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ngetRejectionCount(): number\n```\n\n----------------------------------------\n\nTITLE: Defining the 'onExecute' callback for AsyncThrottlerOptions in TypeScript\nDESCRIPTION: Optional callback function that is called immediately when the throttled function is executed. It receives the `AsyncThrottler` instance (parameterized with the function type `TFn` and arguments type `TArgs`) as its argument and returns void.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncthrottleroptions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional onExecute: (throttler) => void;\n```\n\n----------------------------------------\n\nTITLE: Adding and Starting Tasks in AsyncQueuer\nDESCRIPTION: This example shows how to add a task to the `AsyncQueuer` and then start processing it. The `addItem` method adds a function to the queue that returns a promise.  The `start()` method initiates the processing of tasks in the queue, respecting the concurrency limit set during instantiation.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasyncQueuer.addItem(async () => {\n  return 'Hello';\n});\n\nasyncQueuer.start();\n```\n\n----------------------------------------\n\nTITLE: Defining the 'onError' callback for AsyncThrottlerOptions in TypeScript\nDESCRIPTION: Optional callback function that gets invoked when the throttled asynchronous function throws an error. It receives the error object (`unknown`) as its only argument and returns void.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncthrottleroptions.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional onError: (error) => void;\n```\n\n----------------------------------------\n\nTITLE: Assigning onExecute Callback Function - TypeScript\nDESCRIPTION: Declares an optional `onExecute` property as a callback function to be invoked after a function has been executed successfully by the rate limiter. The callback receives the rate limiter instance as an argument and returns void. Useful for post-execution logic such as logging or metrics. Requires the `RateLimiter` class/type as a dependency.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/ratelimiteroptions.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional onExecute: (rateLimiter) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining the 'leading' property for AsyncDebouncerOptions in TypeScript\nDESCRIPTION: Defines the optional `leading` boolean property for the AsyncDebouncerOptions interface. If set to true, the debounced function executes on the leading edge of the timeout period, meaning immediately upon the first call within a wait cycle. It defaults to false.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncdebounceroptions.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional leading: boolean;\n```\n\n----------------------------------------\n\nTITLE: SolidQueuer isRunning Property (TypeScript)\nDESCRIPTION: This property provides a Solid.js `Accessor` signal that is `true` if the queuer is currently actively processing one or more items. It offers a reactive status update on whether the queuer's execution function is running, mirroring the `getIsRunning` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidqueuer.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nisRunning: Accessor<boolean>;\n\n```\n\n----------------------------------------\n\nTITLE: Handling Success Callback in AsyncQueuer\nDESCRIPTION: This snippet showcases how to handle the success callback of a task in `AsyncQueuer`. The `onSuccess` method is used to register a function that is executed when a task successfully completes. The result of the task will be passed to the provided callback function.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasyncQueuer.onSuccess((result) => {\n  console.log(result); // 'Hello'\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects with shallowEqualObjects - TypeScript\nDESCRIPTION: This TypeScript snippet defines the `shallowEqualObjects` function. The function takes two objects, `a` and `b`, as input and returns a boolean value indicating whether they are shallowly equal.  The type parameter `T` extends `Record<string, any>` to ensure objects with string keys and any type of value can be used.  The function compares object properties to determine if they are shallowly equal.  No specific dependencies are required other than the TypeScript environment. The output is a boolean: `true` if the objects are shallowly equal, and `false` otherwise.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/shallowequalobjects.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction shallowEqualObjects<T>(a, b): boolean\n```\n\n----------------------------------------\n\nTITLE: SolidQueuer executionCount Property (TypeScript)\nDESCRIPTION: This property provides a Solid.js `Accessor` signal representing the total number of items that have been processed or executed by the queuer. It serves as a reactive equivalent to the `getExecutionCount` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidqueuer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexecutionCount: Accessor<number>;\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Task to the Queuer\nDESCRIPTION: The `addItem()` method adds a task to the queuer. The `fn` parameter is a function that returns a Promise which represents the task to be executed. `position` defines where the task should be inserted in the queue and `runOnUpdate` controls if the queue should be started after adding the item.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddItem(\n   fn, \n   position, \nrunOnUpdate): Promise<TValue>\n```\n\n----------------------------------------\n\nTITLE: Solid Rate Limiter Remaining In Window Accessor (TypeScript)\nDESCRIPTION: Defines the `remainingInWindow` property within the `SolidRateLimiter` interface. This SolidJS `Accessor` provides a reactive number indicating how many more executions are allowed within the current rate limiting window before requests start being rejected.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidratelimiter.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nremainingInWindow: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Basic Throttle Usage Example in TypeScript\nDESCRIPTION: Example showing how to use the throttle function to create throttled versions of functions with different configurations.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/throttle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Basic throttling - max once per second\nconst throttled = throttle(updateUI, { wait: 1000 });\n\n// Configure leading/trailing execution\nconst throttled = throttle(saveData, {\n  wait: 2000,\n  leading: true,  // Execute immediately on first call\n  trailing: true  // Execute again after delay if called during wait\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects with replaceEqualDeep Function (TypeScript)\nDESCRIPTION: This TypeScript function signature defines `replaceEqualDeep`. It takes two parameters, `a` and `b`, and a type parameter `T`. The function returns `a` if `b` is deeply equal to `a`; otherwise, it returns a new object based on `b` but with any children that are deeply equal to corresponding children in `a` replaced by the children from `a`. This is useful for optimizing updates in data structures by reusing existing objects.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/replaceequaldeep.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction replaceEqualDeep<T>(a, b): T\n```\n\n----------------------------------------\n\nTITLE: Checking Pending State in SolidAsyncDebouncer (TypeScript)\nDESCRIPTION: This snippet defines the `isPending` property for the `SolidAsyncDebouncer` interface. It's a SolidJS `Accessor` that indicates whether the debounced function is currently pending execution or is in the process of running. This reactive property is useful for displaying loading states or disabling UI elements while the debouncer is active.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidasyncdebouncer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nisPending: Accessor<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Throttler Class Usage Example in TypeScript\nDESCRIPTION: Example showing how to use the Throttler class directly, which is the underlying implementation that the throttle function uses.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/throttle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttled = new Throttler(fn, { wait: 1000 });\n\n// First call executes immediately\nthrottled.maybeExecute('a', 'b');\n\n// Call during wait period - gets throttled\nthrottled.maybeExecute('c', 'd');\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Status with SolidJS Accessor in TypeScript\nDESCRIPTION: This snippet defines the `isPending` property, a SolidJS `Accessor` returning a boolean. It provides reactive access to the throttler's state, indicating whether a throttled function call is currently pending execution, replacing the standard `getIsPending` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidthrottler.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nisPending: Accessor<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Throttle Function Signature in TypeScript\nDESCRIPTION: The type signature of the throttle function, showing its parameters and return type. It takes a function and options object and returns a throttled version of the function.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/throttle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction throttle<TFn, TArgs>(fn, initialOptions): (...args) => void\n```\n\n----------------------------------------\n\nTITLE: Defining the executionCount Accessor in SolidDebouncer (TypeScript)\nDESCRIPTION: Defines the `executionCount` property within the `SolidDebouncer` interface. This property is a SolidJS `Accessor` that returns a number, providing reactive access to the number of times the debounced function has executed.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/soliddebouncer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutionCount: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Throttler getExecutionCount method\nDESCRIPTION: This snippet shows the getExecutionCount method for the Throttler class. Returns the number of times the function has been executed.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetExecutionCount(): number\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for SolidAsyncQueuer in TanStack Pacer\nDESCRIPTION: This interface defines the properties and types for managing an asynchronous task queue in SolidJS, extending functionalities from the AsyncQueuer interface while omitting specific methods. It uses SolidJS signals to provide reactive access to queue state, including active and pending items, execution count, and queue status flags.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidasyncqueuer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SolidAsyncQueuer<TValue> extends Omit<AsyncQueuer<TValue>, \"getActiveItems\" | \"getAllItems\" | \"getExecutionCount\" | \"getIsEmpty\" | \"getIsFull\" | \"getIsIdle\" | \"getIsRunning\" | \"getPeek\" | \"getPendingItems\" | \"getSize\"> {\n  activeItems: Accessor<() => Promise<TValue>[]>;\n  allItems: Accessor<() => Promise<TValue>[]>;\n  executionCount: Accessor<number>;\n  isEmpty: Accessor<boolean>;\n  isFull: Accessor<boolean>;\n  isIdle: Accessor<boolean>;\n  isRunning: Accessor<boolean>;\n  peek: Accessor<undefined | TValue>;\n  pendingItems: Accessor<() => Promise<TValue>[]>;\n  size: Accessor<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Plain Object Type Guard in TypeScript\nDESCRIPTION: Defines a TypeScript function isPlainObject that takes any input and returns a type predicate indicating whether the input is a plain JavaScript object. This function helps in type narrowing by confirming that the input conforms to the Object type. It requires no external dependencies and takes a single parameter 'o' of any type, returning 'o is Object' to be used as a type guard in TypeScript. The function is intended to be used for runtime type checks within TypeScript projects.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/isplainobject.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction isPlainObject(o): o is Object\n```\n\n----------------------------------------\n\nTITLE: Configuring Debounced Function with DebouncerOptions TypeScript Interface\nDESCRIPTION: Defines the DebouncerOptions interface that configures a debounced function's behavior. It includes optional boolean flags to enable or disable the debouncer, execute on leading or trailing edges, and a callback invoked after execution. There is a mandatory 'wait' number parameter specifying the delay in milliseconds before the debounced function fires. The interface is generic using TFn and TArgs to constrain the function type and its parameters. This interface depends on an external generic type AnyFunction representing a general function type and is used to ensure typed, customizable debouncer implementations.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/debounceroptions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional enabled: boolean;\noptional leading: boolean;\noptional onExecute: (debouncer: Debouncer<TFn, TArgs>) => void;\noptional trailing: boolean;\nwait: number;\n```\n\n----------------------------------------\n\nTITLE: createThrottler Function Definition - Typescript\nDESCRIPTION: Defines the `createThrottler` function in Typescript. It accepts a function `fn` and initial options, and returns a `SolidThrottler` instance. This throttler can be used to limit the execution rate of `fn`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createthrottler.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createThrottler<TFn, TArgs>(fn, initialOptions): SolidThrottler<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack React Pacer Package Using NPM Shell\nDESCRIPTION: Installs the React-specific TanStack Pacer package using NPM. Requires NPM package manager and React version 16.8 or higher. This command adds the @tanstack/react-pacer package which provides pacing utilities optimized for React applications.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tanstack/react-pacer\n```\n\n----------------------------------------\n\nTITLE: Installing React Pacer Package\nDESCRIPTION: This command installs the `@tanstack/react-pacer` package, which provides React hooks and re-exports core Pacer functionalities for use in React applications. It uses npm as the package manager.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/adapter.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tanstack/react-pacer\n```\n\n----------------------------------------\n\nTITLE: AsyncDebouncer maybeExecute Method\nDESCRIPTION: The `maybeExecute` method attempts to execute the debounced function with the provided arguments. If a call is already in progress, it will be queued. It returns a Promise that resolves when the function has finished executing.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncdebouncer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmaybeExecute(...args): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining QueuePosition Type Alias in TypeScript\nDESCRIPTION: This TypeScript snippet introduces a type alias named QueuePosition, which is limited to the string literal values \"front\" or \"back\". It serves the purpose of explicitly constraining parameters for addItem and getNextItem functions to only accept these two string values, increasing type safety in queue manipulation routines. No external dependencies are required, and the type expects inputs strictly matching these values, returning an error on violation.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/type-aliases/queueposition.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype QueuePosition = \"front\" | \"back\";\n```\n\n----------------------------------------\n\nTITLE: Defining the 'onError' callback for AsyncDebouncerOptions in TypeScript\nDESCRIPTION: Defines the optional `onError` callback function property for the AsyncDebouncerOptions interface. This function is invoked with the error object if the underlying debounced async function throws an exception during execution. It accepts one parameter `error` of type `unknown` and returns `void`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncdebounceroptions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional onError: (error) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining AnyAsyncFunction Type Alias - TypeScript\nDESCRIPTION: This TypeScript code defines a type alias named `AnyAsyncFunction`. It represents an asynchronous function that accepts any number of arguments (specified by `TArgs`) and returns a `Promise` that resolves to a value of any type. `TArgs` defaults to `any[]`, allowing flexibility in function signatures. This type alias is used for defining functions that operate asynchronously and can handle various argument types.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/type-aliases/anyasyncfunction.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnyAsyncFunction<TArgs> = (...args) => Promise<any>;\n```\n\n----------------------------------------\n\nTITLE: Defining useAsyncDebouncer Function in TypeScript\nDESCRIPTION: The type signature of the useAsyncDebouncer hook, which takes a function and options parameter and returns an AsyncDebouncer instance. It's defined to work with any async function type and arbitrary arguments.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncdebouncer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAsyncDebouncer<TFn, TArgs>(fn, options): AsyncDebouncer<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'enabled' property for AsyncThrottlerOptions in TypeScript\nDESCRIPTION: Optional boolean property to enable or disable the async throttler. When set to false, `maybeExecute` will not trigger any function executions. Defaults to true if not specified.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncthrottleroptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional enabled: boolean;\n```\n\n----------------------------------------\n\nTITLE: Accessing Throttler State via Signals - TSX\nDESCRIPTION: Illustrates how to access the state of the `SolidThrottler` instance using signals. It shows how to retrieve the `executionCount`, `isPending` status, `lastExecutionTime`, and `nextExecutionTime` of the throttler.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createthrottler.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Access throttler state via signals\nconsole.log(throttler.executionCount()); // number of times executed\nconsole.log(throttler.isPending());      // whether throttled function is pending\nconsole.log(throttler.lastExecutionTime()); // timestamp of last execution\nconsole.log(throttler.nextExecutionTime()); // timestamp of next allowed execution\n```\n\n----------------------------------------\n\nTITLE: Creating Priority Queue - TypeScript\nDESCRIPTION: This snippet illustrates the creation of a priority queue using `queue()`. It defines a queue that processes items asynchronously and uses a `getPriority` function to determine the processing order. Higher numbers are processed first, showing how to control processing order based on item-specific properties.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/queue.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Priority queuer\nconst processPriority = queuer<number>({\n  process: async (n) => console.log(n),\n  getPriority: n => n // Higher numbers processed first\n})\nprocessPriority(1)\nprocessPriority(3) // Processed before 1\n```\n\n----------------------------------------\n\nTITLE: Accessing RateLimiter Instance for Manual Checks (TSX)\nDESCRIPTION: Provides an example of accessing the `rateLimiter` instance returned by `useRateLimitedState` to manually check the remaining updates in the window before attempting to set the state, allowing for custom logic or warnings.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedstate.md#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n// Access rateLimiter methods if needed\nconst handleSubmit = () => {\n  const remaining = rateLimiter.getRemainingInWindow();\n  if (remaining > 0) {\n    setValue(newValue);\n  } else {\n    showRateLimitWarning();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the wait Property in ThrottlerOptions\nDESCRIPTION: Required number property specifying the time window in milliseconds during which the throttled function can only be executed once.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/throttleroptions.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nwait: number;\n```\n\n----------------------------------------\n\nTITLE: Binding Instance Methods in TypeScript\nDESCRIPTION: This TypeScript function, `bindInstanceMethods`, is designed to bind methods of a given instance. It accepts a single parameter, `instance`, typed as `T` (which extends `Record<string, any>`), and returns a value of type `any`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/bindinstancemethods.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bindInstanceMethods<T>(instance): any\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server (Shell)\nDESCRIPTION: This command executes the 'dev' script defined in the `scripts` section of the project's `package.json` file. This script typically starts a local development server, bundles assets, or performs other development-related tasks. It usually requires the project dependencies to be installed first using `npm install`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useThrottledCallback/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting with State Management Example - TSX\nDESCRIPTION: Shows how to integrate createAsyncRateLimiter with state management using createSignal. It defines an async function to query a search API and update the state with the results. The rate limit is set to 10 calls per minute, and an onReject callback logs a message when the rate limit is exceeded.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncratelimiter.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// With state management\nconst [data, setData] = createSignal(null);\nconst { maybeExecute } = createAsyncRateLimiter(\n  async (query) => {\n    const result = await searchAPI(query);\n    setData(result);\n  },\n  {\n    limit: 10,\n    window: 60000, // 10 calls per minute\n    onReject: (info) => console.log(`Rate limit exceeded: ${info.nextValidTime - Date.now()}ms until next window`)\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with npm\nDESCRIPTION: This snippet illustrates how to start a local development server for the project using npm. It executes the 'dev' script defined in the project's package.json to enable live reloading and testing.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/asyncDebounce/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling RateLimiter Dynamically in TypeScript\nDESCRIPTION: This example shows how to instantiate a `RateLimiter` with the `enabled` option initially set to false to disable it by default. It demonstrates enabling the limiter at runtime using the `setOptions` method. This pattern supports conditional enabling/disabling of rate limiting functionality dynamically.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst limiter = new RateLimiter(fn, { \n  limit: 5, \n  window: 1000,\n  enabled: false // Disable by default\n})\nlimiter.setOptions({ enabled: true }) // Enable at any time\n```\n\n----------------------------------------\n\nTITLE: Integrating createAsyncDebouncer with SolidJS State Management\nDESCRIPTION: This example illustrates how to integrate the `createAsyncDebouncer` hook with SolidJS state management (`createSignal`). It shows the debounced async function updating a Solid signal (`setResults`) after the API call (`searchAPI`) completes. A `wait` time of 300ms is configured.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncdebouncer.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n// With state management\nconst [results, setResults] = createSignal([]);\nconst { maybeExecute } = createAsyncDebouncer(\n  async (searchTerm) => {\n    const data = await searchAPI(searchTerm);\n    setResults(data);\n  },\n  {\n    wait: 300,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (npm)\nDESCRIPTION: Executes the npm command to download and install all project dependencies defined in the `package.json` file. This step is required before running the project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createRateLimitedSignal/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Assigning onReject Callback Function - TypeScript\nDESCRIPTION: Specifies an optional `onReject` callback to handle cases where function execution is rejected due to exceeding the rate limit. Receives the rate limiter instance as a parameter and returns void. Implementers can use this to handle or log rejected invocations. Requires the `RateLimiter` class/type.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/ratelimiteroptions.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional onReject: (rateLimiter) => void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript createRateLimiter Function Signature and Description\nDESCRIPTION: Defines the signature and purpose of the createRateLimiter function, including its parameters, type parameters, return type, and a brief overview of its use as a rate limiting utility in Solid.js applications. Requires TypeScript as the programming language and is designed to be flexible and state-management agnostic.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createratelimiter.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction createRateLimiter<TFn, TArgs>(fn, initialOptions): SolidRateLimiter<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This snippet outlines the command for installing project dependencies required for the TanStack Pacer project. It prepares the environment by downloading necessary packages before development.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/asyncDebounce/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies - Shell\nDESCRIPTION: Installs project dependencies listed in the package.json file using npm. This command is a prerequisite for running the development server.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/asyncThrottle/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Leading and Trailing Debounce Execution (TypeScript)\nDESCRIPTION: Explains the `leading` and `trailing` options available for synchronous debouncing. `leading: true` executes the function immediately on the first call within a sequence, while `trailing: true` (default) executes it after the wait period following the last call. These can be combined.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst debouncedFn = debounce(fn, {\n  wait: 500,\n  leading: true,   // Execute on first call\n  trailing: true,  // Execute after wait period\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Pacer Example\nDESCRIPTION: Commands for setting up and running the Pacer example project. First installs dependencies and then starts the development server.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useThrottledState/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm (Shell)\nDESCRIPTION: This command uses npm (Node Package Manager) to install all necessary project dependencies listed in the 'dependencies' and 'devDependencies' sections of the project's package.json file. It must be run in the project's root directory.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createAsyncRateLimiter/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Throttler Constructor\nDESCRIPTION: This snippet shows the constructor signature for the Throttler class. It takes a function (fn) and ThrottlerOptions as parameters and returns a Throttler instance. The options control the throttling behavior.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Throttler<TFn, TArgs>(fn, initialOptions): Throttler<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Creating Sequential Queue - TypeScript\nDESCRIPTION: This snippet demonstrates the use of the `queue()` function to create a basic sequential processing queue. It initializes a queue that waits 1000ms between processing items, logging the current items each time the queue changes. The example adds two items to the queue, demonstrating FIFO processing order.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/queue.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// Basic sequential processing\nconst processItems = queuer<number>({\n  wait: 1000,\n  onItemsChange: (queuer) => console.log(queuer.getAllItems())\n})\nprocessItems(1) // Logs: 1\nprocessItems(2) // Logs: 2 after 1 completes\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with npm\nDESCRIPTION: Executes the 'dev' script defined in the `package.json` file, typically used to start a local development server for the project. This command should be run after installing dependencies with `npm install`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/throttle/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Throttler getNextExecutionTime method\nDESCRIPTION: This snippet shows the getNextExecutionTime method for the Throttler class. Returns the next execution time.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetNextExecutionTime(): number\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling `Debouncer` Instances (TypeScript)\nDESCRIPTION: Demonstrates how to control the active state of a `Debouncer` instance using the `enabled` option. The `setOptions` method is used to dynamically enable or disable the debouncer, preventing or allowing subsequent calls from triggering executions.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst debouncer = new Debouncer(fn, { wait: 500, enabled: false }) // Disable by default\ndebouncer.setOptions({ enabled: true }) // Enable at any time\n```\n\n----------------------------------------\n\nTITLE: Defining useAsyncThrottler Hook in React - TypeScript\nDESCRIPTION: This snippet demonstrates the function signature for useAsyncThrottler, a generic React hook written in TypeScript. It takes an asynchronous function and options as parameters, returning an AsyncThrottler instance. Dependencies include React and a supporting AsyncThrottler implementation. The 'fn' parameter should be any asynchronous function, and 'options' should follow the AsyncThrottlerOptions interface including properties like 'wait', 'leading', and 'trailing'. The output is an AsyncThrottler object managing throttled execution of the provided function. The hook itself is UI-library agnostic, focusing only on limiting async invocations.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useasyncthrottler.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAsyncThrottler<TFn, TArgs>(fn, options): AsyncThrottler<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Conditional Enabling/Disabling with React Framework Adapter (TSX)\nDESCRIPTION: Shows a conceptual example of how a framework adapter (like the React adapter) can enable reactive control over the `enabled` option using hooks. This allows enabling or disabling the debouncer dynamically based on component state or props.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// React example\nconst debouncer = useDebouncer(\n  setSearch, \n  { wait: 500, enabled: searchInput.value.length > 3 } // Enable/disable based on input length IF using a framework adapter that supports reactive options\n)\n```\n\n----------------------------------------\n\nTITLE: Throttler setOptions method\nDESCRIPTION: This snippet shows the setOptions method for the Throttler class. Updates the throttler options and returns the new options state.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(newOptions): Required<ThrottlerOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Core Pacer Package Using NPM Shell for Vanilla JS\nDESCRIPTION: Installs the core TanStack Pacer package usable in any JavaScript environment or framework. Requires NPM package manager. This package is a framework-agnostic pacing utility and is re-exported by all framework-specific packages. Use this to add pacing capabilities without framework-specific bindings.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/installation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tanstack/pacer\n```\n\n----------------------------------------\n\nTITLE: Throttler maybeExecute method\nDESCRIPTION: This snippet shows the maybeExecute method for the Throttler class. Attempts to execute the throttled function based on the throttler options.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmaybeExecute(...args): void\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (npm)\nDESCRIPTION: This command installs all necessary project dependencies listed in the `package.json` file. It is a prerequisite for running the project or its development scripts.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useRateLimitedState/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Throttler getIsPending method\nDESCRIPTION: This snippet shows the getIsPending method for the Throttler class. Returns true if there is a pending execution.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetIsPending(): boolean\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tanstack Pacer Example\nDESCRIPTION: Commands for installing dependencies and starting the development server for a Tanstack Pacer example project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useQueuer/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Throttler cancel method\nDESCRIPTION: This snippet shows the cancel method for the Throttler class. Cancels any pending trailing execution and clears internal state. Has no effect if there is no pending execution.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(): void\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler maybeExecute Method in TypeScript\nDESCRIPTION: Core method that attempts to execute the throttled function based on the wait time constraints.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nmaybeExecute(...args): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (npm) - Shell\nDESCRIPTION: This command uses npm (Node Package Manager) to install all necessary dependencies specified in the project's package.json file. It prepares the project environment for execution and is a prerequisite for running the development server.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/queue/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler getNextExecutionTime Method in TypeScript\nDESCRIPTION: Method that returns the timestamp when the next throttled execution will occur.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetNextExecutionTime(): number\n```\n\n----------------------------------------\n\nTITLE: Setting up and running the Pacer example project with npm\nDESCRIPTION: Commands to install dependencies and start the development server for the Pacer example project. This sequence installs all required packages and then launches the development environment.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/queue/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining createAsyncDebouncer Signature\nDESCRIPTION: This snippet shows the TypeScript signature for the `createAsyncDebouncer` function. It defines the function name, generic types (TFn for the async function type, TArgs for its arguments), parameters (the async function `fn` and `initialOptions`), and the return type (`SolidAsyncDebouncer` instance).\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncdebouncer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction createAsyncDebouncer<TFn, TArgs>(fn, initialOptions): SolidAsyncDebouncer<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Defining createAsyncQueuer Function in TypeScript\nDESCRIPTION: This code defines the `createAsyncQueuer` function, which creates an `AsyncQueuer` instance for managing an async queue. It accepts an `initialOptions` parameter of type `AsyncQueuerOptions<TValue>`.  It returns a `SolidAsyncQueuer<TValue>` object, containing methods to manage the queue.  The function is crucial for handling queued asynchronous operations with configurable concurrency, size, and lifecycle callbacks.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncqueuer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createAsyncQueuer<TValue>(initialOptions): SolidAsyncQueuer<TValue>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Shell)\nDESCRIPTION: Uses the Node Package Manager (npm) command-line tool to install the project's dependencies listed in the `package.json` file. This command must be run in the project's root directory.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createAsyncThrottler/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Debouncer maybeExecute Method in TypeScript\nDESCRIPTION: Core method that attempts to execute the debounced function with the provided arguments. If a call is already in progress, it will be queued according to the debounce rules.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/debouncer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmaybeExecute(...args): void\n```\n\n----------------------------------------\n\nTITLE: Implementing useThrottler Function in TypeScript\nDESCRIPTION: The function signature for the useThrottler hook which accepts a function and throttling options. It creates a Throttler instance that limits how often the provided function can execute and returns that instance for use in components.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottler.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useThrottler<TFn, TArgs>(fn, options): Throttler<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Building Project Artifacts\nDESCRIPTION: Executes the build process for the project using pnpm. This command compiles source code and generates distributable artifacts, often required before testing the package in external projects.\nSOURCE: https://github.com/tanstack/pacer/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: AsyncDebouncer Cancel Method\nDESCRIPTION: The `cancel` method cancels any pending execution of the debounced function. It effectively resets the timer and prevents the function from being called if it was scheduled for execution.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncdebouncer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(): void\n```\n\n----------------------------------------\n\nTITLE: Creating Rate-Limited Values in SolidJS with TypeScript\nDESCRIPTION: The createRateLimitedValue function signature that creates a rate-limited version of a value using SolidJS's reactivity system. It takes an input value and configuration options, returning both the rate-limited value and the limiter controller.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createratelimitedvalue.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createRateLimitedValue<TValue>(value, initialOptions): [Accessor<TValue>, SolidRateLimiter<Setter<TValue>, [Accessor<TValue>]>]\n```\n\n----------------------------------------\n\nTITLE: Defining useRateLimitedState Hook Signature (TypeScript)\nDESCRIPTION: Details the function signature of the `useRateLimitedState` React hook, including its generic type parameter `TValue`, the initial `value`, `options` for rate limiting, and the returned tuple containing the state value, setter function, and rate limiter instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedstate.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useRateLimitedState<TValue>(value, options): [TValue, Dispatch<SetStateAction<TValue>>, RateLimiter<Dispatch<SetStateAction<TValue>>, [TValue]>]\n```\n\n----------------------------------------\n\nTITLE: Using useThrottledState Hook - TSX Examples\nDESCRIPTION: Illustrates practical usage of the useThrottledState hook within React components (using TSX syntax). Examples include basic throttling by specifying a 'wait' time, customizing the throttle behavior with 'leading' and 'trailing' options, and utilizing the methods available on the returned 'throttler' instance, such as 'cancel()' to clear pending updates.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottledstate.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// Basic throttling - update state at most once per second\nconst [value, setValue, throttler] = useThrottledState(0, { wait: 1000 });\n\n// With custom leading/trailing behavior\nconst [value, setValue] = useThrottledState(0, {\n  wait: 1000,\n  leading: true,   // Update immediately on first change\n  trailing: false  // Skip trailing edge updates\n});\n\n// Access throttler methods if needed\nconst handleReset = () => {\n  setValue(0);\n  throttler.cancel(); // Cancel any pending updates\n};\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes for External Testing\nDESCRIPTION: Starts the development watcher using `pnpm dev` to automatically rebuild the project upon file changes. This allows developers to test the package integration within their own separate projects by linking the built artifacts.\nSOURCE: https://github.com/tanstack/pacer/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Solid Pacer Package Using NPM Shell\nDESCRIPTION: Installs the Solid-specific TanStack Pacer package using NPM. Requires NPM package manager and Solid version 1.9.5 or higher. This command adds the @tanstack/solid-pacer package which provides pacing utilities optimized for Solid.js applications.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/installation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tanstack/solid-pacer\n```\n\n----------------------------------------\n\nTITLE: useDebouncer Function Definition - Typescript\nDESCRIPTION: Defines the useDebouncer function, a React hook that creates and manages a Debouncer instance. It takes a function to debounce and options (including a wait time) as parameters. The function is generic, allowing it to work with different function types and arguments. It returns a Debouncer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usedebouncer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useDebouncer<TFn, TArgs>(fn, options): Debouncer<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Defining SolidAsyncRateLimiter Interface with Accessors in TypeScript\nDESCRIPTION: Declares the SolidAsyncRateLimiter interface that extends the AsyncRateLimiter interface but omits specific methods such as getExecutionCount and getRejectionCount. It uses TypeScript generics to enforce type constraints on an async function and its arguments. The interface exposes reactive Accessor properties reflecting real-time metrics of the rate limiter, including execution count, rejection count, remaining calls allowed in the current window, and milliseconds until the next rate limit window resets.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidasyncratelimiter.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexecutionCount: Accessor<number>;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nrejectionCount: Accessor<number>;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nremainingInWindow: Accessor<number>;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nmsUntilNextWindow: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Running the TanStack Pacer Example (Bash)\nDESCRIPTION: Commands to install project dependencies using npm and then start the development server for the TanStack Pacer example. The first command (`npm install`) fetches and installs packages defined in `package.json`. The second command (`npm run dev`) executes the 'dev' script, typically used to launch a local development environment.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useAsyncQueuer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining useDebouncedCallback Hook with TypeScript\nDESCRIPTION: This TypeScript snippet defines the useDebouncedCallback hook, which returns a stable, debounced callback function for React components. It accepts a function to debounce (fn) and an options object (of type DebouncerOptions) to configure behavior such as debounce wait time. Requires TypeScript and is part of the @tanstack/pacer package dependencies. The result is a function matching fn's signature, but debounced, suitable for event handlers and other callbacks. Limitations include no manual cancellation or access to the underlying Debouncer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usedebouncedcallback.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useDebouncedCallback<TFn, TArgs>(fn, options): (...args) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring Callbacks for Synchronous RateLimiter in TypeScript\nDESCRIPTION: This snippet configures a synchronous `RateLimiter` with callbacks for handling successful executions (`onExecute`) and rejections due to rate limits (`onReject`). These callbacks receive the current rate limiter instance to access state and are useful for logging, UI updates, or custom behavior during the rate limiting lifecycle.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst limiter = new RateLimiter(fn, {\n  limit: 5,\n  window: 1000,\n  onExecute: (rateLimiter) => {\n    // Called after each successful execution\n    console.log('Function executed', rateLimiter.getExecutionCount())\n  },\n  onReject: (rateLimiter) => {\n    // Called when an execution is rejected\n    console.log(`Rate limit exceeded. Try again in ${rateLimiter.getMsUntilNextWindow()}ms`)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring leading/trailing edge throttling TanStack Pacer TypeScript\nDESCRIPTION: Illustrates how to configure the execution behavior of the synchronous throttler using `leading` and `trailing` options. These boolean flags control whether the function executes immediately on the first call within a wait period (`leading`) and whether it executes after the wait period if calls occurred during that time (`trailing`). Default is `{ leading: true, trailing: true }`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttledFn = throttle(fn, {\n  wait: 200,\n  leading: true,   // Execute on first call (default)\n  trailing: true,  // Execute after wait period (default)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Shell)\nDESCRIPTION: This command installs all required project dependencies listed in the `package.json` file of the project. It is a standard step in setting up any Node.js project. This command requires Node.js and npm to be installed on the system.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useThrottledCallback/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining the useRateLimitedCallback React hook in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the `useRateLimitedCallback` hook. It takes a function `fn` and rate limiter `options`, and returns a new function that is rate-limited according to the provided options. The returned function also indicates whether the call was accepted or rejected.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/useratelimitedcallback.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRateLimitedCallback<TFn, TArgs>(fn, options): (...args) => boolean\n```\n\n----------------------------------------\n\nTITLE: Creating a Debouncer in SolidJS\nDESCRIPTION: Function signature for creating a debouncer in Solid.js, which takes a function and options and returns a SolidDebouncer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createdebouncer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createDebouncer<TFn, TArgs>(fn, initialOptions): SolidDebouncer<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Rate Limiting Concept in Plain Text\nDESCRIPTION: This snippet visually represents how rate limiting blocks calls beyond a specified quota within fixed windows of time. It illustrates the allowed calls, blocked calls, and window durations on a timeline to demonstrate the rate limiting behavior without actual code.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/rate-limiting.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRate Limiting (limit: 3 calls per window)\nTimeline: [1 second per tick]\n                                        Window 1                  |    Window 2            \nCalls:        ⬇️     ⬇️     ⬇️     ⬇️     ⬇️                             ⬇️     ⬇️\nExecuted:     ✅     ✅     ✅     ❌     ❌                             ✅     ✅\n             [=== 3 allowed ===][=== blocked until window ends ===][=== new window =======]\n```\n\n----------------------------------------\n\nTITLE: Constructing a RateLimiter Instance in TypeScript\nDESCRIPTION: Shows the constructor signature for the `RateLimiter` class. It requires the function `fn` (of type `TFn`) to be rate-limited and `initialOptions` (of type `RateLimiterOptions`) defining the rate limits.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nnew RateLimiter<TFn, TArgs>(fn, initialOptions): RateLimiter<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler Constructor Implementation in TypeScript\nDESCRIPTION: Constructor signature for the AsyncThrottler class, showing how to initialize a new throttler with a function and options.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew AsyncThrottler<TFn, TArgs>(fn, initialOptions): AsyncThrottler<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of RateLimiter maybeExecute in TypeScript\nDESCRIPTION: Illustrates the usage of the `maybeExecute` method. After initializing a `RateLimiter` with a limit of 5 calls per 1000ms, the first five calls to `maybeExecute` within that window return `true`, while subsequent calls return `false` until the window resets.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst rateLimiter = new RateLimiter(fn, { limit: 5, window: 1000 });\n\n// First 5 calls will return true\nrateLimiter.maybeExecute('arg1', 'arg2'); // true\n\n// Additional calls within the window will return false\nrateLimiter.maybeExecute('arg1', 'arg2'); // false\n```\n\n----------------------------------------\n\nTITLE: Basic Throttling Example (JSX)\nDESCRIPTION: This example shows a basic usage of `useThrottledValue`.  It throttles `rawValue` to update at most once every 1000 milliseconds (1 second). This demonstrates the simplest way to use the hook, applying a rate limit to updates of a state variable.  It assumes `rawValue` is already defined and is a variable containing the value to be throttled.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottledvalue.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n// Basic throttling - update at most once per second\nconst [throttledValue] = useThrottledValue(rawValue, { wait: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Using Solid Throttling Hooks TanStack Pacer TypeScript/Solid\nDESCRIPTION: Illustrates framework adapter hooks for Solid. `createThrottler` provides access to the underlying `Throttler` class for control, while `createThrottledSignal` integrates throttling with Solid's signal system for reactive state that updates only at the throttled interval.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThrottler, createThrottledSignal } from '@tanstack/solid-pacer'\n\n// Low-level hook for full control\nconst throttler = createThrottler(\n  (value: number) => updateProgressBar(value),\n  { wait: 200 }\n)\n\n// Signal-based hook for state management\nconst [value, setValue, throttler] = createThrottledSignal(0, {\n  wait: 200,\n  onExecute: (throttler) => {\n    console.log('Total executions:', throttler.getExecutionCount())\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Monitoring Queuer Performance Metrics in TypeScript\nDESCRIPTION: Demonstrates usage of getExecutionCount() and getRejectionCount() methods to monitor how many items have been processed and how many were rejected by the queue. Useful for performance analytics and queue health checking. Requires Queuer class supporting execution and rejection count tracking.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/queueing.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst queue = new Queuer<number>()\n\n// Add and process some items\nqueue.addItem(1)\nqueue.addItem(2)\nqueue.addItem(3)\n\nconsole.log(queue.getExecutionCount()) // Number of items processed\nconsole.log(queue.getRejectionCount()) // Number of items rejected\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Throttler TanStack Pacer TypeScript\nDESCRIPTION: Explains how to control the active state of a `Throttler` instance using the `enabled` option. The throttler can be initialized as disabled and later enabled dynamically using the `setOptions` method, allowing runtime control over throttling.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttler = new Throttler(fn, { wait: 200, enabled: false }) // Disable by default\nthrottler.setOptions({ enabled: true }) // Enable at any time\n```\n\n----------------------------------------\n\nTITLE: Defining the useThrottledValue Hook (TypeScript)\nDESCRIPTION: This snippet defines the signature of the `useThrottledValue` function using TypeScript.  It specifies the type parameters, the input parameters (`value` and `options`), and the return type (a tuple containing the throttled value and a `Throttler` instance).  It uses generic types to allow for flexibility in the types of values being throttled.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottledvalue.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useThrottledValue<TValue>(value, options): [TValue, Throttler<Dispatch<SetStateAction<TValue>>, [TValue]>]\n```\n\n----------------------------------------\n\nTITLE: Solid Framework Adapter Debouncing Hooks (TypeScript)\nDESCRIPTION: Introduces the hooks provided by the TanStack Pacer Solid adapter. These hooks (`createDebouncer`, `createDebouncedSignal`) integrate debouncing with Solid's reactive signal system, allowing for debounced side effects and state updates within Solid components.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { createDebouncer, createDebouncedSignal } from '@tanstack/solid-pacer'\n\n// Low-level hook for full control\nconst debouncer = createDebouncer(\n  (value: string) => saveToDatabase(value),\n  { wait: 500 }\n)\n\n// Signal-based hook for state management\nconst [searchTerm, setSearchTerm, debouncer] = createDebouncedSignal('', {\n  wait: 500,\n  onExecute: (debouncer) => {\n    console.log('Total executions:', debouncer.getExecutionCount())\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring AsyncQueuerOptions Interface with Optional Properties - TypeScript\nDESCRIPTION: This TypeScript code defines the AsyncQueuerOptions<TValue> interface, which specifies configurable properties for an asynchronous queuer such as concurrency limits, maximum queuer size, default queue positions for adding/retrieving items, support for priority, and event/callback hooks triggered on item or state changes. Callback signatures include parameters for the item and queuer instance, supporting control over item rejection or queue state transitions. All fields are optional, and several have default behaviors (e.g., add position to 'back', get position from 'front'). Developers should supply appropriate types and handle optional callbacks when extending or using this interface. No direct dependencies outside standard TypeScript.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncqueueroptions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AsyncQueuerOptions<TValue> {\n  addItemsTo?: QueuePosition;\n  concurrency?: number;\n  getItemsFrom?: QueuePosition;\n  getPriority?: (item: () => Promise<TValue>) => number;\n  initialItems?: (() => Promise<TValue>) & object[];\n  maxSize?: number;\n  onGetNextItem?: (item: () => Promise<TValue>, queuer: AsyncQueuer<TValue>) => void;\n  onIsRunningChange?: (queuer: AsyncQueuer<TValue>) => void;\n  onItemsChange?: (queuer: AsyncQueuer<TValue>) => void;\n  onReject?: (item: () => Promise<TValue>, queuer: AsyncQueuer<TValue>) => void;\n  started?: boolean;\n  wait?: number;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Debouncer Constructor Implementation in TypeScript\nDESCRIPTION: The constructor for the Debouncer class that takes a function and initial options. The function will be debounced according to the specified options.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/debouncer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew Debouncer<TFn, TArgs>(fn, initialOptions): Debouncer<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: SolidQueuer isIdle Property (TypeScript)\nDESCRIPTION: This property provides a Solid.js `Accessor` signal that is `true` if the queuer is currently idle, meaning it is not processing any items and there are no items waiting in the queue. It acts as a reactive version of the `getIsIdle` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidqueuer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nisIdle: Accessor<boolean>;\n\n```\n\n----------------------------------------\n\nTITLE: Defining the asyncRateLimit Function Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript function signature for `asyncRateLimit`. It accepts generic types `TFn` (an async function) and `TArgs` (its arguments), takes the function `fn` and `initialOptions` as input, and returns a new function. The returned function accepts `args` and returns a Promise resolving to a boolean indicating if execution was permitted.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncratelimit.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction asyncRateLimit<TFn, TArgs>(fn, initialOptions): (...args) => Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring Queuer Options in TypeScript\nDESCRIPTION: Illustrates modifying a Queuer's configuration after instantiation using setOptions(), including changing the processing wait time and start state. Also shows fetching current configuration via getOptions(). Requires Queuer class support for dynamic option updates and retrieval with methods setOptions and getOptions.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/queueing.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst queue = new Queuer<number>({\n  wait: 1000,\n  started: false\n})\n\n// Change configuration\nqueue.setOptions({\n  wait: 500, // Process items twice as fast\n  started: true // Start processing\n})\n\n// Get current configuration\nconst options = queue.getOptions()\nconsole.log(options.wait) // 500\n```\n\n----------------------------------------\n\nTITLE: Initializing Queuer with Pre-populated Items in TypeScript\nDESCRIPTION: Shows how to create a Queuer instance pre-populated with initial items using the initialItems option. It also demonstrates starting the queue processing immediately by setting started to true. Dependencies include the Queuer class supporting initialItems and started options to manage queue state and processing.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/queueing.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst queue = new Queuer<number>({\n  initialItems: [1, 2, 3],\n  started: true // Start processing immediately\n})\n\n// Queue starts with [1, 2, 3] and begins processing\n```\n\n----------------------------------------\n\nTITLE: SolidQueuer peek Property (TypeScript)\nDESCRIPTION: This property provides a Solid.js `Accessor` signal that returns the next item to be processed from the queue without removing it, or `undefined` if the queue is empty. It serves as a reactive way to peek at the front of the queue, equivalent to the `getPeek` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidqueuer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\npeek: Accessor<undefined | TValue>;\n\n```\n\n----------------------------------------\n\nTITLE: Defining the asyncThrottle Function Signature (TypeScript)\nDESCRIPTION: Defines the TypeScript signature for the `asyncThrottle` function. It accepts a generic async function (`TFn`) and initial options, returning a new function that takes arguments (`TArgs`) and returns a Promise resolving to void. This signature outlines the function's contract for creating throttled asynchronous operations.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/asyncthrottle.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction asyncThrottle<TFn, TArgs>(fn, initialOptions): (...args) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Basic API Call Debouncing using createAsyncDebouncer\nDESCRIPTION: This example demonstrates the basic usage of `createAsyncDebouncer` for debouncing an asynchronous API call. It shows how to wrap an async function (`api.search`) and configure a `wait` time (500ms). The returned `maybeExecute` function is then used to trigger the debounced call.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncdebouncer.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// Basic API call debouncing\nconst { maybeExecute } = createAsyncDebouncer(\n  async (query: string) => {\n    const results = await api.search(query);\n    return results;\n  },\n  { wait: 500 }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onExecute callback Throttler TanStack Pacer TypeScript\nDESCRIPTION: Shows how to use the `onExecute` callback option available in the synchronous `Throttler`. This callback is invoked immediately after the throttled function successfully executes, providing a hook for side effects like logging or state updates.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/throttling.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttler = new Throttler(fn, {\n  wait: 200,\n  onExecute: (throttler) => {\n    // Called after each successful execution\n    console.log('Function executed', throttler.getExecutionCount())\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Set Queuer Options\nDESCRIPTION: The `setOptions()` method allows to update the configuration options of the queuer. It returns the new options state after the update.  Useful for dynamically adjusting queue behavior.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(newOptions): AsyncQueuerOptions<TValue>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'wait' property for AsyncDebouncerOptions in TypeScript\nDESCRIPTION: Defines the required `wait` number property for the AsyncDebouncerOptions interface. This property specifies the delay in milliseconds the debouncer should wait after the last function call before executing the target function. Although marked as required, the documentation comment notes a default of 0ms.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncdebounceroptions.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwait: number;\n```\n\n----------------------------------------\n\nTITLE: Defining createQueuer Function\nDESCRIPTION: Defines the `createQueuer` function, a Solid hook that creates and manages a `Queuer` instance. This function takes initial options as a parameter and returns a `SolidQueuer` instance. It's designed for integrating with custom state management solutions using the `onItemsChange` callback.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createqueuer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createQueuer<TValue>(initialOptions): SolidQueuer<TValue>\n```\n\n----------------------------------------\n\nTITLE: Using `onExecute` Callback in Synchronous `Debouncer` (TypeScript)\nDESCRIPTION: Introduces the `onExecute` callback option available for the synchronous `Debouncer`. This callback is invoked immediately after the debounced function successfully executes, providing a way to perform side effects or logging based on execution events.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/debouncing.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst debouncer = new Debouncer(fn, {\n  wait: 500,\n  onExecute: (debouncer) => {\n    // Called after each successful execution\n    console.log('Function executed', debouncer.getExecutionCount())\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: SolidQueuer isFull Property (TypeScript)\nDESCRIPTION: This property provides a Solid.js `Accessor` signal that is `true` if the queue has reached its maximum capacity and cannot accept more items. It offers a reactive way to check the queue's full status, equivalent to the `getIsFull` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidqueuer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisFull: Accessor<boolean>;\n\n```\n\n----------------------------------------\n\nTITLE: AsyncDebouncer getOptions Method\nDESCRIPTION: The `getOptions` method returns the current options of the debouncer.  This includes the wait time and any other configuration parameters that were set when the AsyncDebouncer was initialized or updated using `setOptions`. It returns a `Required` version of the `AsyncDebouncerOptions` interface.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncdebouncer.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Required<AsyncDebouncerOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Creating an AsyncQueuer Instance\nDESCRIPTION: This snippet demonstrates the creation of an `AsyncQueuer` instance. It initializes the queuer with a concurrency limit of 2, which determines how many tasks can run concurrently. The `AsyncQueuer` will then manage and process added tasks based on this concurrency configuration.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst asyncQueuer = new AsyncQueuer<string>({ concurrency: 2 });\n```\n\n----------------------------------------\n\nTITLE: Accessing Next Execution Time with SolidJS Accessor in TypeScript\nDESCRIPTION: This snippet defines the `nextExecutionTime` property, a SolidJS `Accessor` returning a number. It provides reactive access to the estimated timestamp of the next possible execution, which is calculated based on the throttling delay, replacing the standard `getNextExecutionTime` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidthrottler.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nnextExecutionTime: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Defining the useQueuer Hook Type Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the `useQueuer` hook. It takes an optional `options` object of type `QueuerOptions<TValue>` and returns a `Queuer<TValue>` instance. The hook is generic, accepting a type parameter `TValue` for the items in the queue.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usequeuer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useQueuer<TValue>(options): Queuer<TValue>\n```\n\n----------------------------------------\n\nTITLE: SolidQueuer isEmpty Property (TypeScript)\nDESCRIPTION: This property provides a Solid.js `Accessor` signal that is `true` if the queue is currently empty, indicating that there are no items waiting to be processed. It is the reactive counterpart to the `getIsEmpty` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidqueuer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisEmpty: Accessor<boolean>;\n\n```\n\n----------------------------------------\n\nTITLE: Solid Rate Limiter Rejection Count Accessor (TypeScript)\nDESCRIPTION: Defines the `rejectionCount` property within the `SolidRateLimiter` interface. This SolidJS `Accessor` provides a reactive number representing the cumulative count of function calls that have been rejected by the rate limiter because the limit was exceeded.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidratelimiter.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrejectionCount: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Starting Example Development Server (dev command)\nDESCRIPTION: Starts the development server for a specific example using the `pnpm dev` command. This command must be executed from within the target example's directory. It's typically used for running and testing individual examples.\nSOURCE: https://github.com/tanstack/pacer/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server (npm) - Shell\nDESCRIPTION: This command executes the script defined under the 'dev' key in the project's package.json file. It typically starts a local development server or initiates a build process, allowing the user to view the example. This command should be run after installing dependencies.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/queue/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Debouncer cancel Method Implementation in TypeScript\nDESCRIPTION: Method that cancels any pending execution of the debounced function, preventing it from running if it's currently waiting.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/debouncer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncancel(): void\n```\n\n----------------------------------------\n\nTITLE: Starting Example Development Server (start command)\nDESCRIPTION: Starts the development server for a specific example using the `pnpm start` command. This command must be executed from within the target example's directory and serves as an alternative to `pnpm dev` for running examples.\nSOURCE: https://github.com/tanstack/pacer/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Development Build and Test Watcher\nDESCRIPTION: Starts a development watcher process using pnpm. This command automatically rebuilds project files and runs tests whenever source files are modified, facilitating the core development loop. Run this from the project root.\nSOURCE: https://github.com/tanstack/pacer/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server - npm - Shell\nDESCRIPTION: This command executes a custom script named 'dev' defined within the 'scripts' section of the package.json file. This script typically starts a local development server or performs other tasks necessary to run the example project locally for development purposes.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/asyncDebounce/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install all necessary dependencies required by the project.  It fetches the packages defined in the `package.json` file and installs them into the `node_modules` directory.  This step is essential before running the project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useQueuerState/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - npm - Shell\nDESCRIPTION: This command uses npm (Node Package Manager) to install all project dependencies listed in the 'dependencies' and 'devDependencies' sections of the package.json file. It's a standard first step before running any Node.js project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/asyncDebounce/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating RateLimiter Options in TypeScript\nDESCRIPTION: Defines the `setOptions` method signature. This method allows updating the rate limiter's configuration (e.g., `limit`, `window`) dynamically by passing a `Partial<RateLimiterOptions>` object. It returns the complete, updated options object.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nsetOptions(newOptions): RateLimiterOptions<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Add an error callback\nDESCRIPTION: The `onError()` method adds a callback function that is executed when a task encounters an error. This allows for error handling and logging.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nonError(cb): () => void\n```\n\n----------------------------------------\n\nTITLE: Solid Rate Limiter Ms Until Next Window Accessor (TypeScript)\nDESCRIPTION: Defines the `msUntilNextWindow` property within the `SolidRateLimiter` interface. This SolidJS `Accessor` provides a reactive number indicating the milliseconds remaining until the next execution window opens, allowing more requests.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidratelimiter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmsUntilNextWindow: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message Format for New Examples\nDESCRIPTION: Shows the recommended commit message format when adding a new example. The prefix `docs:` indicates a documentation-related change, followed by a description of the action. Replace 'example-name' with the specific name.\nSOURCE: https://github.com/tanstack/pacer/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndocs: Add example-name\n```\n\n----------------------------------------\n\nTITLE: Get all items\nDESCRIPTION: The `getAllItems()` method returns a copy of all items in the queuer. This includes both pending and active items.  This can be useful to inspect the current state of the queue without altering it.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetAllItems(): () => Promise<TValue>[]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the TanStack Pacer Example (npm)\nDESCRIPTION: These commands first install the necessary Node.js package dependencies using npm and then execute the development script (likely starting a development server or running the example) defined in the project's package.json.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/rateLimit/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining the isPending Accessor in SolidDebouncer (TypeScript)\nDESCRIPTION: Defines the `isPending` property within the `SolidDebouncer` interface. This property is a SolidJS `Accessor` that returns a boolean, indicating whether there is a pending execution scheduled by the debouncer.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/soliddebouncer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisPending: Accessor<boolean>;\n```\n\n----------------------------------------\n\nTITLE: SolidQueuer allItems Property (TypeScript)\nDESCRIPTION: This property provides a Solid.js `Accessor` signal containing an array of all current items in the queue. It mirrors the functionality of the `getAllItems` method found on the base `Queuer` interface, allowing reactivity within Solid.js components.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidqueuer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nallItems: Accessor<TValue[]>;\n\n```\n\n----------------------------------------\n\nTITLE: SolidQueuer size Property (TypeScript)\nDESCRIPTION: This property provides a Solid.js `Accessor` signal representing the current number of items waiting in the queue. It offers a reactive count of queued items, acting as a direct replacement for the `getSize` method.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidqueuer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsize: Accessor<number>;\n\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm\nDESCRIPTION: Installs all project dependencies and sets up necessary linkages using the pnpm package manager. This command should be run from the project root directory.\nSOURCE: https://github.com/tanstack/pacer/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Throttler getOptions method\nDESCRIPTION: This snippet shows the getOptions method for the Throttler class. Returns the current throttler options.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/throttler.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Required<ThrottlerOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Solid Rate Limiter Execution Count Accessor (TypeScript)\nDESCRIPTION: Defines the `executionCount` property within the `SolidRateLimiter` interface. This property is a SolidJS `Accessor` that provides a reactive number representing the total count of successful executions by the rate limiter.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidratelimiter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutionCount: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: Get pending items\nDESCRIPTION: The `getPendingItems()` method returns an array of pending items. These are the tasks that are waiting to be processed.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngetPendingItems(): () => Promise<TValue>[]\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler getLastExecutionTime Method in TypeScript\nDESCRIPTION: Method that returns the timestamp of the last function execution.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetLastExecutionTime(): number\n```\n\n----------------------------------------\n\nTITLE: Get an item without removing it\nDESCRIPTION: The `getPeek()` method returns an item without removing it from the queuer. The `position` parameter allows you to peek at the front or the back of the queue.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetPeek(position): undefined | () => Promise<TValue>\n```\n\n----------------------------------------\n\nTITLE: Check if queuer is idle\nDESCRIPTION: The `getIsIdle()` method returns `true` if the queuer is running but has no items to process, and `false` otherwise.  This indicates the queue is ready for more work.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngetIsIdle(): boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring onItemsChange option in QueuerOptions (TypeScript)\nDESCRIPTION: A callback function executed whenever items are added to or removed from the queue. It receives the current Queuer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\noptional onItemsChange: (queuer) => void;\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Priority Queue with AsyncQueuer in TypeScript\nDESCRIPTION: This snippet creates a priority queue where task priority is computed dynamically via the getPriority callback option on AsyncQueuer. The getPriority function accepts a task and returns a numeric priority used to order task execution, allowing flexible priority assignment based on task properties or external logic. Tasks added to the queue will be processed according to their dynamically evaluated priority values.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/guides/async-queueing.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst dynamicPriorityQueue = new AsyncQueuer<string>({\n  concurrency: 2,\n  getPriority: (task) => {\n    // Calculate priority based on task properties or other factors\n    // Higher numbers have priority\n    return calculateTaskPriority(task)\n  }\n})\n\n// Add tasks - priority will be calculated dynamically\ndynamicPriorityQueue.addItem(async () => {\n  const result = await processTask('low')\n  return result\n})\n\ndynamicPriorityQueue.addItem(async () => {\n  const result = await processTask('high')\n  return result\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Count from RateLimiter in TypeScript\nDESCRIPTION: Defines the `getExecutionCount` method signature. This method returns the total number of times the rate-limited function has been successfully executed.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ngetExecutionCount(): number\n```\n\n----------------------------------------\n\nTITLE: Get execution count\nDESCRIPTION: The `getExecutionCount()` method returns the number of items that have been removed from the queuer, indicating how many tasks have been completed.  This helps track the progress of the queue.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetExecutionCount(): number\n```\n\n----------------------------------------\n\nTITLE: Check if queuer is empty\nDESCRIPTION: The `getIsEmpty()` method returns `true` if the queuer contains no items, and `false` otherwise. It checks both pending and active tasks.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetIsEmpty(): boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Remaining Executions in Window from RateLimiter in TypeScript\nDESCRIPTION: Defines the `getRemainingInWindow` method signature. This method returns the number of executions still permitted within the current time window before the limit is reached.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ngetRemainingInWindow(): number\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Pacer Example in Shell\nDESCRIPTION: Commands for setting up and running a TanStack Pacer example. First installs all dependencies using npm, then starts the development server.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createDebouncedValue/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Getting Time Until Next Window from RateLimiter in TypeScript\nDESCRIPTION: Defines the `getMsUntilNextWindow` method signature. This method calculates and returns the time remaining in milliseconds until the current rate-limiting window resets, allowing further executions.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ngetMsUntilNextWindow(): number\n```\n\n----------------------------------------\n\nTITLE: Running Pacer Example with npm\nDESCRIPTION: Command-line instructions to install dependencies and start the development server for the Pacer example project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/rateLimit/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tanstack Pacer Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Tanstack Pacer example project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useRateLimiter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Declaring Limit Property for Execution Count - TypeScript\nDESCRIPTION: Defines a required numeric property `limit` within the interface to specify the maximum number of allowed function executions within a configured time window. This property should be a positive integer and directly restricts the frequency of allowed calls. No external dependencies are required.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/ratelimiteroptions.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlimit: number;\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Enabled Property - TypeScript\nDESCRIPTION: Declares an optional boolean property `enabled` in the `RateLimiterOptions` interface to control whether the rate limiter is active. If not specified, it defaults to true. When disabled, invoking maybeExecute will not trigger executions. No external dependencies beyond TypeScript are required.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/ratelimiteroptions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional enabled: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining the 'wait' property for AsyncThrottlerOptions in TypeScript\nDESCRIPTION: Required number property specifying the time window in milliseconds. Within this window, the throttled function can only be executed once. Defaults to 0ms according to the description, although marked as required in the type definition.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncthrottleroptions.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwait: number;\n```\n\n----------------------------------------\n\nTITLE: Resetting RateLimiter State in TypeScript\nDESCRIPTION: Defines the `reset` method signature. Calling this method resets the internal state of the `RateLimiter`, clearing execution and rejection counts, and resetting the time window.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/ratelimiter.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nreset(): void\n```\n\n----------------------------------------\n\nTITLE: Peeking at Items in the Queuer Using getPeek in TypeScript\nDESCRIPTION: Shows usage of the getPeek method to view the next (FIFO) or last (LIFO/stack) item without removing it from the queue. Passing 'back' as an argument enables LIFO mode. Input is an optional position argument; output is the corresponding queued item or undefined if empty. Requires a Queuer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/queuer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Look at next item to getNextItem\nqueuer.getPeek()\n// Look at last item (like stack top)\nqueuer.getPeek('back')\n```\n\n----------------------------------------\n\nTITLE: Defining the leading Property in ThrottlerOptions\nDESCRIPTION: Optional boolean property to determine if the function should execute on the leading edge of the timeout period. Defaults to true.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/throttleroptions.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional leading: boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring onReject option in QueuerOptions (TypeScript)\nDESCRIPTION: A callback function invoked when an item is rejected from being added to the queue, potentially due to exceeding maxSize or other constraints. It receives the rejected item and the Queuer instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\noptional onReject: (item, queuer) => void;\n```\n\n----------------------------------------\n\nTITLE: Start Queuer\nDESCRIPTION: The `start()` method initiates the processing of items in the queuer. It begins executing tasks according to the concurrency limit and prioritizes tasks if specified.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nstart(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining useThrottledState Hook Signature - TypeScript\nDESCRIPTION: Documents the TypeScript signature for the useThrottledState React hook. It outlines the generic type TValue, the input parameters 'value' and 'options', and the specific types of the elements returned in the tuple: the throttled state value, a throttled state setter function, and the underlying Throttler instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/react/reference/functions/usethrottledstate.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useThrottledState<TValue>(value, options): [TValue, Dispatch<SetStateAction<TValue>>, Throttler<Dispatch<SetStateAction<TValue>>, [TValue]>]\n```\n\n----------------------------------------\n\nTITLE: Stop Queuer\nDESCRIPTION: The `stop()` method stops the queuer from processing any further items.  Currently running tasks will continue to run until completion, but no new tasks will be started.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Defining the onExecute Callback in ThrottlerOptions\nDESCRIPTION: Optional callback function that is invoked after the throttled function executes. It receives the Throttler instance as an argument.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/throttleroptions.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional onExecute: (throttler) => void;\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Pacer Example Project with npm\nDESCRIPTION: Commands for setting up and running the TanStack Pacer example project. First installs all dependencies, then starts the development server.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createDebouncedSignal/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server (npm)\nDESCRIPTION: Executes the npm script named 'dev', as defined in the project's `package.json` file. This command typically builds the project and starts a local development server. Dependencies must be installed first using `npm install`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createRateLimitedSignal/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the TanStack Pacer Example (Shell)\nDESCRIPTION: Provides the sequence of shell commands required to install project dependencies using npm and then start the development server for the TanStack Pacer example. Assumes Node.js and npm are installed. The first command installs dependencies listed in `package.json`, and the second command executes the `dev` script defined in `package.json`, typically starting a development server.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useThrottledValue/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: AsyncThrottler setOptions Method in TypeScript\nDESCRIPTION: Method for updating the throttler's configuration options at runtime.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncthrottler.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetOptions(newOptions): Required<AsyncThrottlerOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Accessing Execution Count in SolidAsyncDebouncer (TypeScript)\nDESCRIPTION: This snippet defines the `executionCount` property within the `SolidAsyncDebouncer` interface. It provides a SolidJS `Accessor` (a reactive signal) that holds the number of times the debounced function has been executed. This allows SolidJS components to reactively track the execution count.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/interfaces/solidasyncdebouncer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexecutionCount: Accessor<number>;\n```\n\n----------------------------------------\n\nTITLE: createAsyncThrottler Function Definition - TypeScript\nDESCRIPTION: Defines the createAsyncThrottler function, which accepts an asynchronous function `fn` and initial options of type `AsyncThrottlerOptions`. It returns a `SolidAsyncThrottler` instance configured to throttle the execution of the provided function. The function is generic, accepting type parameters `TFn` for the async function type and `TArgs` for the function arguments.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncthrottler.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createAsyncThrottler<TFn, TArgs>(fn, initialOptions): SolidAsyncThrottler<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: createAsyncRateLimiter Function Definition - TypeScript\nDESCRIPTION: Defines the createAsyncRateLimiter function, which creates an AsyncRateLimiter instance. It takes an async function and initial options as parameters. The function returns a SolidAsyncRateLimiter instance.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/framework/solid/reference/functions/createasyncratelimiter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createAsyncRateLimiter<TFn, TArgs>(fn, initialOptions): SolidAsyncRateLimiter<TFn, TArgs>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'onExecute' callback for AsyncDebouncerOptions in TypeScript\nDESCRIPTION: Defines the optional `onExecute` callback function property for the AsyncDebouncerOptions interface. This function is called whenever the debounced function is successfully executed, receiving the corresponding `AsyncDebouncer` instance as its argument. It returns `void`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/asyncdebounceroptions.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional onExecute: (debouncer) => void;\n```\n\n----------------------------------------\n\nTITLE: AsyncDebouncer getExecutionCount Method\nDESCRIPTION: The `getExecutionCount` method returns the number of times the debounced function has been executed. This can be useful for tracking how often the function is actually being called after debouncing.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncdebouncer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetExecutionCount(): number\n```\n\n----------------------------------------\n\nTITLE: Get rejection count\nDESCRIPTION: The `getRejectionCount()` method returns the number of items that have been rejected from the queuer, indicating the number of tasks that failed.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/asyncqueuer.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngetRejectionCount(): number\n```\n\n----------------------------------------\n\nTITLE: Configuring onGetNextItem option in QueuerOptions (TypeScript)\nDESCRIPTION: A callback function invoked whenever an item is removed from the queue for processing. It receives the item and the Queuer instance as parameters.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional onGetNextItem: (item, queuer) => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring maxSize option in QueuerOptions (TypeScript)\nDESCRIPTION: Sets the maximum allowed number of items in the queue. Items added beyond this limit may be rejected depending on Queuer implementation.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional maxSize: number;\n```\n\n----------------------------------------\n\nTITLE: Defining the trailing Property in ThrottlerOptions\nDESCRIPTION: Optional boolean property to determine if the function should execute on the trailing edge of the timeout period. Defaults to true.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/throttleroptions.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional trailing: boolean;\n```\n\n----------------------------------------\n\nTITLE: Debouncer getOptions Method in TypeScript\nDESCRIPTION: Method that returns the current configuration options of the debouncer, such as wait time, leading/trailing execution settings, and other parameters.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/classes/debouncer.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetOptions(): Required<DebouncerOptions<TFn, TArgs>>\n```\n\n----------------------------------------\n\nTITLE: Configuring addItemsTo option in QueuerOptions (TypeScript)\nDESCRIPTION: Specifies the default position ('front' or 'back') for adding new items to the queue. Defaults to 'back' if not specified.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional addItemsTo: QueuePosition;\n```\n\n----------------------------------------\n\nTITLE: Defining the enabled Property in ThrottlerOptions\nDESCRIPTION: Optional boolean property to enable or disable the throttler. When set to false, the throttled function will not execute. Defaults to true.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/throttleroptions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional enabled: boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring initialItems option in QueuerOptions (TypeScript)\nDESCRIPTION: An array of items of type TValue to initially populate the queue with when the Queuer instance is created.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/interfaces/queueroptions.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional initialItems: TValue[];\n```\n\n----------------------------------------\n\nTITLE: Running Development Script (npm)\nDESCRIPTION: This command executes the 'dev' script defined in the `package.json` file. This script typically starts a local development server or a build process, allowing you to run and test the project locally.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useRateLimitedState/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm - Shell\nDESCRIPTION: Runs the development script defined in the project's package.json using npm. This command typically starts a local server or build process for development.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/asyncThrottle/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server for TanStack Pacer - npm\nDESCRIPTION: This command starts the development server for the TanStack Pacer example. It uses npm scripts, defined in the project's `package.json`, to execute the development server.  The command will typically start a local web server, allowing you to view and interact with the example application in a web browser.  The specific server startup script is project-dependent but commonly uses tools like Webpack or Parcel.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useAsyncRateLimiter/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for Tanstack Pacer Example (Shell)\nDESCRIPTION: This command uses npm to execute the 'dev' script defined in the `package.json` file, typically starting a development server for the Tanstack Pacer example project. This requires dependencies to be installed first using `npm install`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useAsyncQueuerState/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing isPlainArray Function in TypeScript\nDESCRIPTION: A TypeScript function that determines if a provided value is a plain JavaScript array. The function takes any value as input and returns a boolean result. It is defined in the compare.ts file of the TanStack Pacer library.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/functions/isplainarray.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isPlainArray(value): boolean\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This shell command installs all the necessary project dependencies defined in the `package.json` file using the Node Package Manager (npm). This is typically the first step required after cloning or downloading the project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createThrottler/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Tanstack Pacer Example (Shell)\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the project dependencies listed in the `package.json` file for the Tanstack Pacer example. This step is necessary before running the project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useAsyncQueuerState/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Function Type in TypeScript\nDESCRIPTION: A type definition for a general-purpose function that can accept any arguments (typed as TArgs) and return any value. This type is used throughout the pacer library for flexible function typing.\nSOURCE: https://github.com/tanstack/pacer/blob/main/docs/reference/type-aliases/anyfunction.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AnyFunction<TArgs> = (...args) => any;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Pacer - npm\nDESCRIPTION: This command installs all the necessary dependencies for the TanStack Pacer example project. It utilizes npm, the Node Package Manager, to fetch and install packages declared in the project's `package.json` file. This step is a prerequisite for running the example and ensures that all required libraries are available.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useAsyncRateLimiter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Installs the necessary Node.js package dependencies defined in the project's `package.json` file using the Node Package Manager (npm). This command must be run before starting the development server.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/throttle/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running the Example Project (Shell)\nDESCRIPTION: Commands to install project dependencies via npm and subsequently launch the development server using the predefined 'dev' script. Execute these in sequence in your terminal within the project directory.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useDebouncedValue/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server - npm\nDESCRIPTION: This command executes the development server, which is typically defined in the `package.json` scripts section. It starts the application in a development environment, allowing for live reloading and other development-related features.  The specifics of the `dev` script vary depending on the project.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/react/useQueuerState/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm (Shell)\nDESCRIPTION: This command executes the 'dev' script defined in the 'scripts' section of the project's package.json file. This script typically starts a local development server, sets up a build process, or performs other tasks necessary for running the example locally.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createAsyncRateLimiter/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server (Shell)\nDESCRIPTION: Uses npm to execute the 'dev' script defined in the project's `package.json` file. This typically starts a local development server. Dependencies must be installed via `npm install` prior to running this command.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createAsyncThrottler/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server using npm\nDESCRIPTION: This shell command executes the 'dev' script specified in the project's `package.json` file. This script usually starts a local development server, enabling testing and development of the application. It should be run after dependencies have been successfully installed via `npm install`.\nSOURCE: https://github.com/tanstack/pacer/blob/main/examples/solid/createThrottler/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```"
  }
]