[
  {
    "owner": "versatica",
    "repo": "mediasoup",
    "content": "TITLE: Running Mediasoup Worker with Custom Binary Path\nDESCRIPTION: This command sets the `MEDIASOUP_WORKER_BIN` environment variable to an absolute file path and then runs the Node.js application.  This instructs the mediasoup Node.js module to use the specified `mediasoup-worker` binary instead of compiling it.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Building.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nMEDIASOUP_WORKER_BIN=\"/home/xxx/src/foo/mediasoup-worker\" node myapp.js\n```\n\n----------------------------------------\n\nTITLE: Finding Duplicate Files Across Subfolders\nDESCRIPTION: This command uses `find`, `sha1sum`, `sort`, and `uniq` to identify duplicate files across all subfolders. It calculates the SHA1 hash of each file, sorts the results, and then uses `uniq` to find duplicate hashes, revealing files with identical content.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/worker/deps/webrtc-fuzzer-corpora/README.md#_snippet_3\n\nLANGUAGE: Shell Script\nCODE:\n```\n> find . \\( ! -regex '.*/\\..*' \\) -type f -exec sha1sum {} + | sort | uniq -w40 -dD\n131d620296fa9eb2c372c7fd71b8e58f8a10abd5  ./corpora/sdp-corpus/46-131d620296fa9eb2c372c7fd71b8e58f8a10abd5.sdp\n131d620296fa9eb2c372c7fd71b8e58f8a10abd5  ./corpora/sdp-corpus/50.sdp\n271138fdddb4f02313f25b47581f9f8f4a2eb201  ./corpora/sdp-corpus/12-271138fdddb4f02313f25b47581f9f8f4a2eb201.sdp\n271138fdddb4f02313f25b47581f9f8f4a2eb201  ./corpora/sdp-corpus/15.sdp\n271138fdddb4f02313f25b47581f9f8f4a2eb201  ./corpora/sdp-corpus/40.sdp\n...\n461a0e9201a7ea5ea6a43511571bdafce10b8185  ./corpora/rtcp-corpus/17-461a0e9201a7ea5ea6a43511571bdafce10b8185.rtcp\n461a0e9201a7ea5ea6a43511571bdafce10b8185  ./reports/crashes/rtcp/crash-461a0e9201a7ea5ea6a43511571bdafce10b8185\n```\n\n----------------------------------------\n\nTITLE: Finding Duplicate Files within a Subfolder\nDESCRIPTION: This command utilizes grep to identify duplicate files within the same subfolder based on their SHA1 hash.  It searches the output of `add_sha1.sh` for lines containing 'DUPLICATE', indicating that a file has the same hash as another in the same directory.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/worker/deps/webrtc-fuzzer-corpora/README.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\n> ./add_sha1.sh . | grep DUPLICATE\n./corpora/rtp-corpus/rtp-4 -> DUPLICATE ./corpora/rtp-corpus/rtp-1-5a709d82364ddf4f9350104c83994dded1c9f91c\n./corpora/sdp-corpus/4.sdp -> DUPLICATE ./corpora/sdp-corpus/2-60495c33fc8758c5ce44f896c5f508bc026842c2.sdp\n./corpora/sdp-corpus/8.sdp -> DUPLICATE ./corpora/sdp-corpus/2-60495c33fc8758c5ce44f896c5f508bc026842c2.sdp\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: RTP example\nDESCRIPTION: Example command to run the fuzzer specifically for RTP, enabling memory leak detection. It uses a specific corpus directory for RTP.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_RTP=1 LSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer -artifact_prefix=fuzzer/reports/ -max_len=1400 fuzzer/new-corpus deps/webrtc-fuzzer-corpora/corpora/rtp-corpus\n```\n\n----------------------------------------\n\nTITLE: RFC 6642: TLLEI Description\nDESCRIPTION: This snippet describes TLLEI and its purpose as defined in RFC 6642. It informs the receiver when the sender of the RTCP TPLR has received reports that the indicated packets were lost and asks the receiver not to send feedback regarding these packets. Mediasoup ignores this information but could use it in the future to avoid feedback storms.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/RTCP.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nRFC 6642:\nThe RTCP TPLR message can be used by the intermediaries to\ninform the receiver that the sender of the RTCP TPLR has received\nreports that the indicated packets were lost and ask the receiver not\nto send feedback to it regarding these packets.\n```\n\n----------------------------------------\n\nTITLE: Adding SHA1 Hash to Filenames (add_sha1.sh)\nDESCRIPTION: This shell script adds the SHA1 hash of a file to its filename. It iterates through files in a specified directory and renames them to include the SHA1 hash. The script detects if a file is already hashed and skips it.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/worker/deps/webrtc-fuzzer-corpora/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ ./add_sha1.sh .\nrenamed './corpora/agc-corpus/agc-1' -> './corpora/agc-corpus/agc-1-b35a35f11d86e802f694f84c45e48da96158f73f'\nrenamed './corpora/agc-corpus/agc-2' -> './corpora/agc-corpus/agc-2-f3d59a997d30890da3239b377bba3bc502d18f1e'\n...\nrenamed './corpora/rtcp-corpus/0.rtcp' -> './corpora/rtcp-corpus/0-01b13c2eb549daadeec1eb7eb0846e9a2f5729eb.rtcp'\n```\n\n----------------------------------------\n\nTITLE: RFC 6051: RTCP-SR-REQ Description\nDESCRIPTION: This snippet describes the use case for RTCP-SR-REQ (Sender Report Request) as defined in RFC 6051. It explains the synchronization of RTP sessions and potential delays caused by video switching MCUs or large source-specific multicast (SSM) groups. Mediasoup ignores this request.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/RTCP.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRFC 6051:\nThis memo outlines how RTP sessions are synchronised, and discusses\nhow rapidly such synchronisation can occur.  We show that most RTP\nsessions can be synchronised immediately, but that the use of video\nswitching multipoint conference units (MCUs) or large source-specific\nmulticast (SSM) groups can greatly increase the synchronisation\ndelay.  This increase in delay can be unacceptable to some\napplications that use layered and/or multi-description codecs.\n```\n\n----------------------------------------\n\nTITLE: Transport RTCP FIR Processing Fix\nDESCRIPTION: This snippet highlights a fix in Transport.cpp regarding RTCP FIR processing. Instead of focusing on the media ssrc in the common header, the code now iterates over FIR items and associates Consumers based on the ssrcs within each item. This resolves a reported issue (#350).\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n`Transport.cpp`: Fix RTCP FIR processing:\n  - Instead of looking at the media ssrc in the common header, iterate FIR items and look for associated `Consumers` based on ssrcs in each FIR item.\n  - Fixes #350 (thanks @j1elo for reporting and documenting the issue).\n```\n\n----------------------------------------\n\nTITLE: Detecting Hashed Files with grep\nDESCRIPTION: This command uses grep to filter the output of `add_sha1.sh` and identify files that are already hashed. It searches for lines containing 'OK', indicating that the script recognized the existing hash.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/worker/deps/webrtc-fuzzer-corpora/README.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n> ./add_sha1.sh . | grep OK\n./corpora/pseudotcp-corpus/785b96587d0eb44dd5d75b7a886f37e2ac504511 -> OK\n./corpora/rtcp-corpus/0-01b13c2eb549daadeec1eb7eb0846e9a2f5729eb.rtcp -> OK\n./corpora/rtp-corpus/rtp-0-951641f47532884149e6ebe9a87386226d8bf4fe -> OK\n```\n\n----------------------------------------\n\nTITLE: RFC 5104: TMMBR/TMMBN Description\nDESCRIPTION: This snippet describes the purpose of TMMBR (Temporary Maximum Media Stream Bit Rate Request) as defined in RFC 5104.  It explains that receivers, translators, or mixers use TMMBR to request a sender to limit the maximum bit rate for a media stream. Mediasoup ignores this information.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/RTCP.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRFC 5104:\nA receiver, translator, or mixer uses the Temporary Maximum Media\nStream Bit Rate Request (TMMBR, \"timber\") to request a sender to\nlimit the maximum bit rate for a media stream (see section 2.2) to,\nor below, the provided value.\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: All targets example\nDESCRIPTION: Example command to run the fuzzer for all enabled targets, with a specific log level and tags, enabling memory leak detection. It uses specific corpus directories for STUN, RTP, and RTCP.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_LOG_LEVEL=warn MS_FUZZ_LOG_TAGS=\"rtp rtcp\" LSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer -artifact_prefix=fuzzer/reports/ -max_len=1400 fuzzer/new-corpus deps/webrtc-fuzzer-corpora/corpora/stun-corpus deps/webrtc-fuzzer-corpora/corpora/rtp-corpus deps/webrtc-fuzzer-corpora/corpora/rtcp-corpus\n```\n\n----------------------------------------\n\nTITLE: Port Manager Bind Attempts\nDESCRIPTION: This snippet describes a change in PortManager.cpp to iterate through all ports in the range given to the Worker instead of limiting the number of failed bind() attempts to 20. This resolves issues in scenarios with numerous Workers launched with the same port range.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n`PortManager.cpp`: Do not limit the number of failed `bind()` attempts to 20 since it does not work well in scenarios that launch tons of `Workers` with same port range. Instead iterate all ports in the range given to the Worker.\n```\n\n----------------------------------------\n\nTITLE: Adding subchannel methods to DataConsumer in Mediasoup\nDESCRIPTION: This code snippet refers to the addition of `addSubchannel()` and `removeSubchannel()` methods to the `DataConsumer` class in the Mediasoup library. These methods likely allow for the dynamic management of subchannels within a DataConsumer, enabling more flexible data streaming configurations. The PR number associated with this change is 1263.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fixing pip install command in tasks.py for Windows\nDESCRIPTION: This update modifies the `tasks.py` file to always include the `--no-user` flag in `pip install` commands. This change resolves the \"can not combine --user and --target\" error that occurs in Windows environments during the installation process. The associated PR is 1257.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Fuzzing: Codecs example\nDESCRIPTION: Example command to run the fuzzer specifically for audio/video codecs, enabling memory leak detection. It utilizes the default corpus directory.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_CODECS=1 LSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer -artifact_prefix=fuzzer/reports/ -max_len=1400 fuzzer/new-corpus\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Release Check with npm\nDESCRIPTION: This snippet combines multiple checks into a single command, ensuring thorough code quality and compliance before a release. `npm run release:check` performs linting, TypeScript compilation, and runs all tests, providing a comprehensive verification process.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run release:check\n```\n\n----------------------------------------\n\nTITLE: Store Packet Crash Fix\nDESCRIPTION: This commit addresses a crash in RtpStreamSend.cpp within the StorePacket() function. The crash occurred when receiving an old packet with no space left in the storage buffer. The fix, contributed by zkfun, resolves this memory management issue.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n`RtpStreamSend.cpp`: Fix a crash in `StorePacket()` when it receives an old packet and there is no space left in the storage buffer (thanks to zkfun for reporting it and providing us with the solution).\n```\n\n----------------------------------------\n\nTITLE: Running Mediasoup Frontend Examples\nDESCRIPTION: These commands are used to install the necessary dependencies and start the client-side part of the mediasoup frontend examples. First, `npm install` installs the packages listed in the `package.json` file. Then, `npm start` executes the start script defined in `package.json`, typically launching the development server.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/rust/examples-frontend/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compilation with npm\nDESCRIPTION: This snippet demonstrates the npm command used to compile TypeScript code located in the `src` directory into JavaScript code, which is then placed in the `lib` directory. This compilation step is a prerequisite for running tests and ensuring the proper execution of the code.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run typescript:build\n```\n\n----------------------------------------\n\nTITLE: RFC 5104: TSTR/TSTN Description\nDESCRIPTION: This snippet describes TSTR (Temporal-Spatial Trade-off Request) as defined in RFC 5104. It instructs the video encoder to change its trade-off between temporal and spatial resolution. Mediasoup ignores this information.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/RTCP.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRFC 5104:\nThe Temporal-Spatial Trade-off Request (TSTR) instructs the video\nencoder to change its trade-off between temporal and spatial\nresolution.  Index values from 0 to 31 indicate monotonically a\ndesire for higher frame rate.\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript and C++ Tests with npm\nDESCRIPTION: This snippet shows the npm command to execute both JavaScript and C++ test suites. It's crucial for verifying that code changes do not introduce regressions or break existing functionality. This command runs all test units defined in the project.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: SCTP Test Waiting for Association\nDESCRIPTION: This change in test-node-sctp.js modifies the test to wait for the SCTP association to be fully open before transmitting data. This ensures that the test accurately reflects real-world scenarios and avoids potential issues caused by sending data before the connection is ready.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n`test-node-sctp.js`: Wait for SCTP association to be open before sending data.\n```\n\n----------------------------------------\n\nTITLE: Updating a Subproject Wrap File\nDESCRIPTION: This example shows how to update a subproject's wrap file using Invoke. It requires changing the directory to `worker`, running the `update-wrap-file` task, and then running the `setup` task with the `--reconfigure` argument.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Building.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd worker\ninvoke update-wrap-file openssl\nMESON_ARGS=\"--reconfigure\" invoke setup\n```\n\n----------------------------------------\n\nTITLE: Clang-Tidy Usage Example in macOS\nDESCRIPTION: This command demonstrates how to run clang-tidy on macOS, specifying the path to the clang tools directory and invoking the `tidy` task.  It assumes that the llvm package is installed via brew.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Building.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMEDIASOUP_CLANG_TIDY_DIR=/usr/local/opt/llvm/bin invoke tidy\n```\n\n----------------------------------------\n\nTITLE: libSRTP GYP Modernization\nDESCRIPTION: This entry details the modernization of libsrtp.gyp based on the new BUILD.gn file in Chromium. It also mentions removing \"test\" and other unnecessary targets. This improves the build process and reduces the compiled size.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_9\n\nLANGUAGE: GYP\nCODE:\n```\n`libsrtp.gyp`: Modernize it based on the new `BUILD.gn` in Chromium.\n  - `libsrtp.gyp`: Don't include \"test\" and other targets.\n```\n\n----------------------------------------\n\nTITLE: Jest Test Execution with Arguments (Node)\nDESCRIPTION: This command executes Jest test units located in the `node/test` folder with specified arguments for filtering tests. It uses the `--testPathPattern` and `--testNamePattern` options to narrow down the test scope.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Building.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:node -- --testPathPattern \"test-Worker.ts\" --testNamePattern \"createWorker\"\n```\n\n----------------------------------------\n\nTITLE: Update Wrap File using Makefile\nDESCRIPTION: This command demonstrates how to use the Makefile to update a wrap file. It requires setting the `SUBPROJECT` environment variable to specify the subproject to update.  The command must be executed from the `worker` directory.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Building.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ncd worker\nmake update-wrap-file SUBPROJECT=openssl\n```\n\n----------------------------------------\n\nTITLE: Running Mediasoup Worker with Debug Build\nDESCRIPTION: This command sets the `MEDIASOUP_BUILDTYPE` environment variable to \"Debug\" and then runs the Node.js application. This instructs the mediasoup Node.js module to use the Debug version of the `mediasoup-worker` binary.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Building.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMEDIASOUP_BUILDTYPE=Debug node myapp.js\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Crash verification\nDESCRIPTION: Example command to verify that a specific crash has been fixed. This involves running the fuzzer with the crash report as input, enabling memory leak detection.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nLSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer fuzzer/reports/crash-f39771f7a03c0e7e539d4e52f48f7adad8976404\n```\n\n----------------------------------------\n\nTITLE: Rust Code Formatting, Linting, and Testing\nDESCRIPTION: These commands ensure that the Rust code adheres to the project's coding style and passes all tests. `cargo fmt` formats the code, `cargo clippy` performs linting, and `cargo test` executes the unit tests.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo fmt\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo clippy\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Utils example\nDESCRIPTION: Example command to run the fuzzer specifically for mediasoup-worker C++ utils, enabling memory leak detection. It utilizes the default corpus directory.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_UTILS=1 LSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer -artifact_prefix=fuzzer/reports/ -max_len=2000 fuzzer/new-corpus\n```\n\n----------------------------------------\n\nTITLE: Linting and Formatting with npm\nDESCRIPTION: This snippet shows the npm commands used to check and fix linting errors in TypeScript and C++ code. `npm run lint` identifies errors, and `npm run format` automatically corrects formatting issues.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: PlainRtpTransport Missing Methods and Events\nDESCRIPTION: This fixes an issue with PlainRtpTransport.js by adding missing methods and events. This ensures that all expected functionality and event handlers are available for this transport type in the JavaScript API.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n`PlainRtpTransport.js`: Add missing methods and events.\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: STUN example\nDESCRIPTION: Example command to run the fuzzer specifically for STUN, enabling memory leak detection.  It also uses a specific corpus directory for STUN.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_STUN=1 LSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer -artifact_prefix=fuzzer/reports/ -max_len=1400 fuzzer/new-corpus deps/webrtc-fuzzer-corpora/corpora/stun-corpus\n```\n\n----------------------------------------\n\nTITLE: SCTP Socket Initialization\nDESCRIPTION: This commit addresses issue #348 by initializing the usrsctp socket within the class constructor in SctpAssociation.cpp. This ensures proper initialization and avoids potential issues related to uninitialized sockets.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n`SctpAssociation.cpp`: Initialize the `usrsctp` socket in the class constructor. Fixes #348.\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: RTCP example\nDESCRIPTION: Example command to run the fuzzer specifically for RTCP, enabling memory leak detection. It uses a specific corpus directory for RTCP.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_RTCP=1 LSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer -artifact_prefix=fuzzer/reports/ -max_len=1400 fuzzer/new-corpus deps/webrtc-fuzzer-corpora/corpora/rtcp-corpus\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Setting log level\nDESCRIPTION: This environment variable sets the log level for the fuzzer, allowing you to control the verbosity of the logging output. It can be set to debug, warn or error (it is none if unset).\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_LOG_LEVEL=warn\n```\n\n----------------------------------------\n\nTITLE: NPM Install in Worker Scripts\nDESCRIPTION: This command installs the npm dependencies required for the `worker/scripts/package.json` file. It ensures that all the necessary packages for the worker scripts are installed before running associated tasks.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Building.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci --prefix worker/scripts\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Limiting input length\nDESCRIPTION: This option limits the maximum input length for the fuzzer, which can help improve performance and focus on relevant input sizes. A max length of 1400 is recommended.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-max_len=1400\n```\n\n----------------------------------------\n\nTITLE: Example of a good comment in TypeScript\nDESCRIPTION: Illustrates the correct style for inline comments in TypeScript. Comments must start with an uppercase letter, not exceed 80 columns, and end with a dot.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Calculate foo based on bar value.\nconst foo = bar / 2;\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: SCTP example\nDESCRIPTION: Example command to run the fuzzer specifically for SCTP, enabling memory leak detection. It utilizes the default corpus directory.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_SCTP=1 LSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer -artifact_prefix=fuzzer/reports/ -max_len=1400 fuzzer/new-corpus\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: DTLS example\nDESCRIPTION: Example command to run the fuzzer specifically for DTLS, enabling memory leak detection. It utilizes the default corpus directory.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_DTLS=1 LSAN_OPTIONS=verbosity=1:log_threads=1 ./out/Release/mediasoup-worker-fuzzer -artifact_prefix=fuzzer/reports/ -max_len=1400 fuzzer/new-corpus\n```\n\n----------------------------------------\n\nTITLE: Example of a bad comment in TypeScript\nDESCRIPTION: Illustrates incorrect style for inline comments in TypeScript. Comments should start with an uppercase letter, should not exceed 80 columns, and should end with a dot.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// calculate foo based on bar value\nconst foo = bar / 2;\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Setting crash report prefix\nDESCRIPTION: This option sets the prefix for crash report files generated by the fuzzer, allowing them to be stored in a specific directory. This allows to store new crash reports.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-artifact_prefix=fuzzer/reports/\n```\n\n----------------------------------------\n\nTITLE: Get Clang Fuzzer Dependencies\nDESCRIPTION: This script downloads a specific version of Linux clang required for fuzzing. It must be executed before building the Docker image.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Building.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd worker\nscripts/get-dep.sh clang-fuzzer\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Enabling STUN fuzzer\nDESCRIPTION: This environment variable enables the STUN (Session Traversal Utilities for NAT) fuzzer, which focuses on testing the STUN protocol implementation in mediasoup-worker.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_STUN=1\n```\n\n----------------------------------------\n\nTITLE: PlainRtpTransport Comedia Mode Fix\nDESCRIPTION: This snippet notes a fix applied to the comedia mode within PlainRtpTransport. This indicates a bug or issue within this specific mode of operation that has been addressed.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n`PlainRtpTransport`: Fix comedia mode.\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Enabling RTCP fuzzer\nDESCRIPTION: This environment variable enables the RTCP (Real-time Transport Control Protocol) fuzzer, which focuses on testing the RTCP protocol implementation in mediasoup-worker.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_RTCP=1\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Enabling DTLS fuzzer\nDESCRIPTION: This environment variable enables the DTLS (Datagram Transport Layer Security) fuzzer, which focuses on testing the DTLS protocol implementation in mediasoup-worker.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_DTLS=1\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Enabling SCTP fuzzer\nDESCRIPTION: This environment variable enables the SCTP (Stream Control Transmission Protocol) fuzzer, which focuses on testing the SCTP protocol implementation in mediasoup-worker.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_SCTP=1\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Enabling RTP fuzzer\nDESCRIPTION: This environment variable enables the RTP (Real-time Transport Protocol) fuzzer, which focuses on testing the RTP protocol implementation in mediasoup-worker.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_RTP=1\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Enabling Codecs fuzzer\nDESCRIPTION: This environment variable enables the audio/video codecs fuzzer, which focuses on testing the codec implementations in mediasoup-worker.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_CODECS=1\n```\n\n----------------------------------------\n\nTITLE: Fuzzing: Enabling Utils fuzzer\nDESCRIPTION: This environment variable enables the C++ utils fuzzer, which focuses on testing the utility functions in mediasoup-worker.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/doc/Fuzzer.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nMS_FUZZ_UTILS=1\n```\n\n----------------------------------------\n\nTITLE: Example of inline documentation in TypeScript\nDESCRIPTION: Illustrates the proper syntax for inline documentation of methods or functions in TypeScript. It uses the `/** */` syntax.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Calculates current score for foo and bar.\n */\nfunction calculateScore(): number {\n\t// [...]\n}\n```\n\n----------------------------------------\n\nTITLE: SCTP Association Logging Improvement\nDESCRIPTION: This snippet mentions improvements and fixes to logs within SctpAssociation.cpp. These changes likely involve enhancing the clarity, detail, or accuracy of log messages to aid in debugging and monitoring SCTP association behavior.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n`SctpAssociation.cpp`: Improve/fix logs.\n```\n\n----------------------------------------\n\nTITLE: Transport RTCP SDES Packet Handling\nDESCRIPTION: This change, applied to Transport.cpp, instructs the application to ignore RTCP SDES packets. This is because the application currently does not process or utilize any information contained within these packets, streamlining processing.\nSOURCE: https://github.com/versatica/mediasoup/blob/v3/CHANGELOG.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n`Transport.cpp`: Ignore RTCP SDES packets (we don't do anything with them anyway).\n```"
  }
]