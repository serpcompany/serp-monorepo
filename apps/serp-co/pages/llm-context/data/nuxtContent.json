[
  {
    "owner": "nuxt",
    "repo": "content",
    "content": "TITLE: Using orWhere for alternative conditions in Nuxt Content\nDESCRIPTION: Demonstrates how to create OR condition groups for alternative filtering options.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst { data } = await useAsyncData('featured-docs', () => {\n  return queryCollection('docs')\n    .where('published', '=', true)\n    .orWhere(query => query.where('featured', '=', true).where('priority', '>', 5))\n    .all()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Content Collection with Schema Validation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a blog collection with a Zod schema for data validation. It enforces a structure where each blog post must have tags, an image, and a date.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/1.define.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    blog: defineCollection({\n      source: 'blog/*.md',\n      type: 'page',\n      // Define custom schema for docs collection\n      schema: z.object({\n        tags: z.array(z.string()),\n        image: z.string(),\n        date: z.date()\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Nuxt Content Module in Nuxt Configuration\nDESCRIPTION: Adds the @nuxt/content module to the Nuxt configuration file. This step is necessary to enable Nuxt Content in the project.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/2.installation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/content']\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Nuxt Content Page in Vue Component\nDESCRIPTION: Vue component that fetches and displays the content of a Nuxt Content page. It uses useAsyncData to query the content and ContentRenderer to render it.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/2.installation.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: home } = await useAsyncData(() => queryCollection('content').path('/').first())\n\nuseSeoMeta({\n  title: home.value?.title,\n  description: home.value?.description\n})\n</script>\n\n<template>\n  <ContentRenderer v-if=\"home\" :value=\"home\" />\n  <div v-else>Home not found</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Collection Type in Nuxt Content\nDESCRIPTION: This snippet shows how to define a data-type collection in Nuxt Content. It specifies the source as YAML files in the 'authors' directory and sets the type to 'data'.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/2.types.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ndefineCollection({\n  source: 'authors/**.yml',\n  type: 'data'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collections in Nuxt Content\nDESCRIPTION: This TypeScript code defines a content configuration for Nuxt Content. It creates a 'blog' collection with a custom schema using Zod for type validation. This enables type-safe querying of blog post content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/index.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineContentConfig, defineCollection, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    blog: defineCollection({\n      source: 'blog/*.md',\n      type: 'page',\n      // Define custom schema for docs collection\n      schema: z.object({\n        tags: z.array(z.string()),\n        image: z.string(),\n        date: z.Date()\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using andWhere for complex conditions in Nuxt Content\nDESCRIPTION: Shows how to create complex AND condition groups for more advanced filtering.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst { data } = await useAsyncData('recent-docs', () => {\n  return queryCollection('docs')\n    .where('published', '=', true)\n    .andWhere(query => query.where('date', '>', '2024-01-01').where('category', '=', 'news'))\n    .all()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Content Collections\nDESCRIPTION: Creates a content configuration file to define a default content collection. This setup processes all Markdown files in the content folder as pages.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/2.installation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineContentConfig, defineCollection } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    content: defineCollection({\n      type: 'page',\n      source: '**/*.md'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using queryCollectionItemSurroundings in Vue Component\nDESCRIPTION: Example of using the queryCollectionItemSurroundings composable in a Vue component. It demonstrates how to fetch surrounding items for a specific content path, apply additional query conditions, and use the result in the template.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/3.query-collection-item-surroundings.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useAsyncData('surround', () => {\n  return queryCollectionItemSurroundings('docs', '/foo')\n    .where('published', '=', true)\n    .order('date', 'DESC')\n})\n</script>\n\n<template>\n  <div class=\"flex justify-between\">\n    <NuxtLink v-if=\"data?.[0]\" :to=\"data[0].path\">\n      ← {{ data[0].title }}\n    </NuxtLink>\n    <NuxtLink v-if=\"data?.[1]\" :to=\"data[1].path\">\n      {{ data[1].title }} →\n    </NuxtLink>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collection Schema\nDESCRIPTION: Example of defining a content collection schema using Zod for form generation in the Studio editor\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/3.content.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineContentConfig({\n  collections: {\n    posts: defineCollection({\n      type: 'page',\n      source: 'blog/*.md',\n      schema: z.object({\n        draft: z.boolean().default(false),\n        category: z.enum(['Alps', 'Himalaya', 'Pyrenees']).optional(),\n        date: z.date(),\n        image: z.object({\n          src: z.string().editor({ input: 'media' }),\n          alt: z.string(),\n        }),\n        slug: z.string().editor({ hidden: true }),\n        icon: z.string().optional().editor({ input: 'icon' }),\n        authors: z.array(z.object({\n          slug: z.string(),\n          username: z.string(),\n          name: z.string(),\n          to: z.string(),\n          avatar: z.object({\n            src: z.string(),\n            alt: z.string(),\n          }),\n        })),\n      }),\n    }),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Skipping query results in Nuxt Content\nDESCRIPTION: Shows how to skip a specific number of results in a query, useful for pagination.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    // Skip first 5 items\n    .skip(5)\n    .all()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Text Search with Nuxt UI Pro in Vue\nDESCRIPTION: This snippet demonstrates how to use Nuxt UI Pro's UContentSearch component for full-text search. It uses queryCollectionNavigation and queryCollectionSearchSections to fetch data for navigation and search functionality.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/1.fulltext-search.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: navigation } = await useAsyncData('navigation', () => queryCollectionNavigation('docs'))\nconst { data: files } = await useAsyncData('search', () => queryCollectionSearchSections('docs'))\n\nconst searchTerm = ref('')\n</script>\n\n<template>\n  <UContentSearch\n    v-model:search-term=\"searchTerm\"\n    :files=\"files\"\n    :navigation=\"navigation\"\n    :fuse=\"{ resultLimit: 42 }\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Nuxt Content Configuration\nDESCRIPTION: Basic configuration setup for Nuxt Content module in nuxt.config.ts file.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    // Options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Type definition of queryCollection in TypeScript\nDESCRIPTION: Provides the TypeScript type definition for the queryCollection function and CollectionQueryBuilder interface, showing available methods and their parameters.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction queryCollection<T extends keyof Collections>(collection: T): CollectionQueryBuilder<Collections[T]>\n\ninterface CollectionQueryBuilder<T> {\n  where(field: keyof T | string, operator: SQLOperator, value?: unknown): CollectionQueryBuilder<T>\n  andWhere(groupFactory: QueryGroupFunction<T>): CollectionQueryBuilder<T>\n  orWhere(groupFactory: QueryGroupFunction<T>): CollectionQueryBuilder<T>\n  order(field: keyof T, direction: 'ASC' | 'DESC'): CollectionQueryBuilder<T>\n  // ... other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Content Collections in Vue Component\nDESCRIPTION: This Vue component demonstrates how to use the queryCollection utility to fetch and display blog posts from a collection. It uses the useAsyncData composable for data fetching and renders a list of blog post links.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/v3.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: posts } = await useAsyncData('blog', () => {\n  return queryCollection('blog').all()\n})\n</script>\n\n<template>\n  <div>\n    <h1>Blog</h1>\n    <ul>\n      <li v-for=\"post in posts\" :key=\"post.id\">\n        <NuxtLink :to=\"post.path\">{{ post.title }}</NuxtLink>\n      </li>\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Content Collection Configuration in TypeScript\nDESCRIPTION: This code demonstrates how to create a basic content collection configuration file that defines a 'docs' collection which includes all content in the project.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/1.define.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineContentConfig } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      // Load every file inside the `content` directory\n      source: '**',\n      // Specify the type of content in this collection\n      type: 'page'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing content:file:afterParse Hook in Nuxt Config\nDESCRIPTION: Hook that executes after content parsing but before database storage, enabling post-processing modifications. Used in Nuxt configuration to modify parsed content before final storage.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/5.hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  hooks: {\n    'content:file:afterParse'(ctx) {\n      // ...\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using queryCollection to fetch page content in Nuxt\nDESCRIPTION: Demonstrates how to use the queryCollection composable to find content within a collection based on the current route path.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').path(route.path).first()\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collections in TypeScript\nDESCRIPTION: This snippet demonstrates how to define collections in the content.config.ts file using the defineCollection utility. It shows how to configure the database structure, specify content types, and define schemas for collections.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/v3.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, z } from '@nuxt/content'\n\n// Export collections\nexport const collections = {\n  // Define collection using `defineCollection` utility\n  posts: defineCollection({\n    // Specify the type of content in this collection\n    type: 'page',\n    // Load every file matching this pattern\n    source: 'blog/**/*.md',\n    // Define custom schema for this collection\n    schema: z.object({\n      date: z.date(),\n      image: z.object({\n        src: z.string(),\n        alt: z.string()\n      }),\n      badge: z.object({\n        label: z.string(),\n        color: z.string()\n      })\n    })\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Using queryContent Composable\nDESCRIPTION: Demonstrates using the queryContent composable to fetch content with filtering and pagination\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/query.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await queryContent('posts')\n  .where({ category: { $in: ['nature', 'people'] } })\n  .limit(10)\n  .find()\n\nconst doc = await queryContent('/').findOne()\n```\n\n----------------------------------------\n\nTITLE: Querying Blog Posts in Nuxt Content\nDESCRIPTION: This Vue component fetches blog posts using Nuxt Content's queryCollection method. It demonstrates how to use useAsyncData to query the 'blog' collection and display a list of blog post titles with links.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/index.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: posts } = await useAsyncData('blog', () => {\n  return queryCollection('blog').all()\n})\n</script>\n\n<template>\n  <div>\n    <h1>Blog</h1>\n    <ul>\n      <li v-for=\"post in posts\" :key=\"post.id\">\n        <NuxtLink :to=\"post.path\">{{ post.title }}</NuxtLink>\n      </li>\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Attributes with Various Markdown Elements\nDESCRIPTION: Shows how to apply attributes to different markdown elements like links, code, italic and bold text.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_7\n\nLANGUAGE: md\nCODE:\n```\nAttributes work on:\n\n- [link](#attributes){style=\"background-color: pink;\"}, `code`{style=\"color: cyan;\"},\n- _italic_{style=\"background-color: yellow; color:black;\"} and **bold**{style=\"background-color: lightgreen;\"} texts.\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Text Search with MiniSearch in Vue\nDESCRIPTION: This snippet shows how to implement full-text search using the MiniSearch library. It sets up a MiniSearch instance with custom search options and displays search results in a list.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/1.fulltext-search.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport MiniSearch from 'minisearch'\n\nconst query = ref('')\nconst { data } = await useAsyncData('search', () => queryCollectionSearchSections('docs'))\n\nconst miniSearch = new MiniSearch({\n  fields: ['title', 'content'],\n  storeFields: ['title', 'content'],\n  searchOptions: {\n    prefix: true,\n    fuzzy: 0.2,\n  },\n})\n\n// Add data to the MiniSearch instance\nminiSearch.addAll(toValue(data.value))\nconst result = computed(() => miniSearch.search(toValue(query)))\n</script>\n\n<template>\n  <UContainer class=\"p-4\">\n    <UCard>\n      <UInput v-model=\"query\" placeholder=\"Search...\" />\n      <ul>\n        <li v-for=\"link of result\" :key=\"link.id\" class=\"mt-2\">\n          <NuxtLink :to=\"link.id\">{{ link.title }}</NuxtLink>\n          <p class=\"text-gray-500 text-xs\">{{ link.content }}</p>\n        </li>\n      </ul>\n    </UCard>\n  </UContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Querying Content Collections in Vue Component\nDESCRIPTION: This Vue component demonstrates how to fetch all items from a blog collection using the queryCollection utility and display them as a list of links.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/1.define.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: posts } = await useAsyncData('blog', () => queryCollection('blog').all())\n</script>\n\n<template>\n  <div>\n    <h1>Blog</h1>\n    <ul>\n      <li v-for=\"post in posts\" :key=\"post.id\">\n        <NuxtLink :to=\"post.path\">{{ post.title }}</NuxtLink>\n      </li>\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for queryCollectionNavigation\nDESCRIPTION: Defines the TypeScript function signature and interfaces for the queryCollectionNavigation utility, including chainable promise methods for query building.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/2.query-collection-navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction queryCollectionNavigation<T extends keyof PageCollections>(\n  collection: T,\n  fields?: Array<keyof PageCollections[T]>\n): ChainablePromise<T, ContentNavigationItem[]>\n\ninterface ChainablePromise<T extends keyof PageCollections, R> extends Promise<R> {\n  where(field: keyof PageCollections[T] | string, operator: SQLOperator, value?: unknown): ChainablePromise<T, R>\n  andWhere(groupFactory: QueryGroupFunction<PageCollections[T]>): ChainablePromise<T, R>\n  orWhere(groupFactory: QueryGroupFunction<PageCollections[T]>): ChainablePromise<T, R>\n  order(field: keyof PageCollections[T], direction: 'ASC' | 'DESC'): ChainablePromise<T, R>\n}\n```\n\n----------------------------------------\n\nTITLE: Querying YAML Data in Vue Component\nDESCRIPTION: Vue component setup demonstrating how to query YAML data using Nuxt Content's queryCollection API. Shows examples of finding single authors and retrieving all authors with sorting.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/2.yaml.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\n// Find a single author\nconst { data: author } = await useAsyncData('larbish', () => {\n  return queryCollection('authors')\n    .where('stem', '=', 'larbish')\n    .first()\n})\n\n// Get all authors\nconst { data: authors } = await useAsyncData('authors', () => {\n  return queryCollection('authors')\n    .order('name', 'DESC')\n    .all()\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data in Nuxt Content with Vue and TypeScript\nDESCRIPTION: This snippet demonstrates how to query JSON data in Nuxt Content using Vue and TypeScript. It includes examples of finding a single author and retrieving all authors with sorting.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/3.json.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\n// Find a single author\nconst { data: author } = await useAsyncData('larbish', () => {\n  return queryCollection('authors')\n    .where('stem', '=', 'larbish')\n    .first()\n})\n\n// Get all authors\nconst { data: authors } = await useAsyncData('authors', () => {\n  return queryCollection('authors')\n    .order('name', 'DESC')\n    .all()\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Markdown Page\nDESCRIPTION: Example of a simple Markdown file for the first content page. This demonstrates the basic structure of a Markdown file in Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/2.installation.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# My First Page\n\nHere is some content.\n```\n\n----------------------------------------\n\nTITLE: Creating an Image with ProseImg in Markdown\nDESCRIPTION: Shows how to insert an image in markdown that will be rendered using the ProseImg component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n![A Cool Image](https://nuxt.com/design-kit/icon-green.png)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hacker News Data Source in TypeScript\nDESCRIPTION: Creates a custom source definition for fetching Hacker News data using defineCollectionSource. Implements getKeys to fetch story IDs and getItem to fetch individual story details.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/6.custom-source.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollectionSource } from '@nuxt/content'\n\nconst hackernewsSource = defineCollectionSource({\n  getKeys: () => {\n    return fetch('https://hacker-news.firebaseio.com/v0/topstories.json')\n      .then(res => res.json())\n      .then(data => data.map((key: string) => `${key}.json`))\n  },\n  getItem: (key: string) => {\n    const id = key.split('.')[0]\n    return fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n      .then(res => res.json())\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic ContentRenderer Usage in Vue Page\nDESCRIPTION: A basic implementation of ContentRenderer to display a document fetched with useAsyncData. This example shows how to query a document using the path from the current route and render it.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/0.content-renderer.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').path(route.path).first()\n})\n</script>\n\n<template>\n  <ContentRenderer v-if=\"page\" :value=\"page\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for queryCollectionSearchSections in TypeScript\nDESCRIPTION: The TypeScript interface definition for the queryCollectionSearchSections function and the ChainablePromise interface it returns. This defines the function signature and available query methods.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/4.query-collection-search-sections.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction queryCollectionSearchSections(collection: keyof Collections, opts?: { ignoredTags: string[] }): ChainablePromise<T, Section[]>\n\ninterface ChainablePromise<T extends keyof PageCollections, R> extends Promise<R> {\n  where(field: keyof PageCollections[T] | string, operator: SQLOperator, value?: unknown): ChainablePromise<T, R>\n  andWhere(groupFactory: QueryGroupFunction<PageCollections[T]>): ChainablePromise<T, R>\n  orWhere(groupFactory: QueryGroupFunction<PageCollections[T]>): ChainablePromise<T, R>\n  order(field: keyof PageCollections[T], direction: 'ASC' | 'DESC'): ChainablePromise<T, R>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Collection Configuration in TypeScript\nDESCRIPTION: Configuration setup for YAML data collection using Nuxt Content. Defines a schema for author data including name, avatar and URL fields using Zod validation.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/2.yaml.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    authors: defineCollection({\n      type: 'data',\n      source: 'authors/**.yml',\n      schema: z.object({\n        name: z.string(),\n        avatar: z.string(),\n        url: z.string()\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt Content Project\nDESCRIPTION: Commands to install project dependencies using different package managers (npm, pnpm, yarn, bun). This step is crucial before running or building the project.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/basic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Creating an H1 Heading with ProseH1 in Markdown\nDESCRIPTION: Demonstrates how to create an H1 heading in markdown that will be rendered using the ProseH1 component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# H1 Heading\n```\n\n----------------------------------------\n\nTITLE: Converting queryContent to queryCollections in Nuxt Content v3\nDESCRIPTION: Shows how to convert queryContent calls from v2 to queryCollections in v3, including examples for finding content by path and using custom filters.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/4.migration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Content v2\nconst v2Query = await queryContent(route.path).findOne()\n// Content v3 - don't forget to create `content` collection in `content.config.ts`\nconst v3Query = await queryCollection('content').path(route.path).first()\n\n// Content v2\nconst v2Query = await queryContent()\n  .where({ path: /^\\/hello\\/.*/ })\n  .find()\n// Content v3 - don't forget to create `content` collection in `content.config.ts`\nconst v3Query = await queryCollection('content')\n  .where('path', 'LIKE', '/hello%')\n  .first()\n```\n\n----------------------------------------\n\nTITLE: Complete example of querying and displaying documents in Nuxt Content\nDESCRIPTION: A full example showing how to fetch and display a list of documents from a collection with title, path, and description.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: docs } = await useAsyncData('documents-list', () => {\n  return queryCollection('docs')\n    .order('date', 'DESC')\n    .select('title', 'path', 'description')\n    .all()\n})\n</script>\n\n<template>\n  <NuxtLink v-for=\"doc in docs\" :key=\"doc.path\" :to=\"doc.path\">\n    <h2>{{ doc.title }}</h2>\n    <p>{{ doc.description }}</p>\n  </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Content Filters for LLMs Module\nDESCRIPTION: Example of content filtering options for the LLMs module, demonstrating various filter types including file extension, draft status, and path matching.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/7.llms.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncontentFilters: [\n  // Only include markdown files\n  { field: 'extension', operator: '=', value: 'md' },\n  // Only include published content\n  { field: 'draft', operator: '<>', value: true },\n  // Filter by directory\n  { field: 'path', operator: 'LIKE', value: '/guide%' },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Driven Mode in Nuxt Content v3\nDESCRIPTION: Demonstrates how to create a catch-all page in Nuxt and fetch contents based on route path to implement document driven mode in Content v3.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/4.migration.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('content').path(route.path).first()\n})\n</script>\n\n<template>\n  <div>\n    <header><!-- ... --></header>\n\n    <ContentRenderer v-if=\"page\" :value=\"page\" />\n\n    <footer><!-- ... --></footer>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Converting queryContent().findSurround() in Nuxt Content v3\nDESCRIPTION: Demonstrates how to convert the findSurround() method from v2 to the new queryCollectionItemSurroundings API in v3.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/4.migration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetPath = '/docs'\n\n// Content v2\nconst v2Surround = await queryContent(targetPath)\n  .only(['title', 'description', 'navigation'])\n  .findSurround(withoutTrailingSlash(route.path))\n\n// Content v3 - don't forget to create `content` collection in `content.config.ts`\nconst v3Surround = await queryCollectionItemSurroundings(\n  'content',\n  targetPath,\n  {\n    fields: ['title', 'description', 'navigation']\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with ProseA in Markdown\nDESCRIPTION: Demonstrates how to create a link in markdown that will be rendered using the ProseA component. The example shows a link to the prose components documentation.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Link](/docs/components/prose)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Collection in Nuxt Content Configuration\nDESCRIPTION: This snippet demonstrates how to define a JSON collection in the Nuxt Content configuration file. It sets up an 'authors' collection with a schema for name, avatar, and URL.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/3.json.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    authors: defineCollection({\n      type: 'data',\n      source: 'authors/**.json',\n      schema: z.object({\n        name: z.string(),\n        avatar: z.string(),\n        url: z.string()\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Text Search with Fuse.js in Vue\nDESCRIPTION: This snippet demonstrates how to use Fuse.js for full-text search. It creates a Fuse instance with custom search options and displays search results in a list with buttons.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/1.fulltext-search.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Fuse from 'fuse.js'\n\nconst query = ref('')\nconst { data } = await useAsyncData('search-data', () => queryCollectionSearchSections('docs'))\n\nconst fuse = new Fuse(data.value, {\n  keys: ['title', 'description']\n})\n\nconst result = computed(() => fuse.search(toValue(query)).slice(0, 10))\n</script>\n\n<template>\n  <UContainer class=\"p-4\">\n    <UCard>\n      <UInput v-model=\"query\" placeholder=\"Search...\" class=\"w-full\" />\n      <ul>\n        <li v-for=\"link of result\" :key=\"link.item.id\" class=\"mt-2\">\n          <UButton variant=\"ghost\" class=\"w-full\" :to=\"link.item.id\">\n            {{ link.item.title }}\n            <span class=\"text-gray-500 text-xs\">\n              {{ link.item.content?.slice(0, 100) }}...\n            </span>\n          </UButton>\n        </li>\n      </ul>\n    </UCard>\n  </UContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Source with Advanced Options\nDESCRIPTION: This example shows how to configure a collection source with more detailed options, including include and exclude patterns, and a custom prefix for page types.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/3.sources.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefineCollection({\n  type: \"page\",\n  source: {\n    include: \"en/**\",\n    exclude: [\"en/index.md\"],\n    prefix: '/'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections in Nuxt Content v3\nDESCRIPTION: This snippet shows how to configure content collections in the content.config.ts file for Nuxt Content v3, defining separate collections for landing and documentation pages.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineContentConfig({\n  collections: {\n    landing: defineCollection({\n      type: 'page',\n      source: 'index.md'\n    }),\n    docs: defineCollection({\n      type: 'page',\n      source: {\n        include: '**',\n        exclude: ['index.md']\n      },\n      ...\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Page Collection Type in Nuxt Content\nDESCRIPTION: This snippet demonstrates how to define a page-type collection in Nuxt Content. It specifies the source as Markdown files and sets the type to 'page'.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/2.types.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ndefineCollection({\n  source: '**/*.md',\n  type: 'page'\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Tip Component in Markdown (Nuxt Content)\nDESCRIPTION: Shows how to use a custom 'tip' component with a 'warning' type attribute in Nuxt Content Markdown, along with a link to the official documentation.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/ui-pro/content/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::tip{type=\"warning\"}\nCheckout [official docs][docs] to read more about Nuxt Content\n::\n\n[docs]: https://content.nuxt.com\n```\n\n----------------------------------------\n\nTITLE: Rendering Content with ContentRenderer in Vue\nDESCRIPTION: This Vue component shows how to use the ContentRenderer component to display the content of a Markdown file. It fetches the 'about' page content using queryCollection and renders it, with a fallback message if the page doesn't exist.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/v3.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nconst { data: page } = await useAsyncData(() => {\n  return queryCollection('content').path('/about').first()\n})\n</script>\n\n<template>\n  <ContentRenderer v-if=\"page\" :value=\"page\" />\n  <p v-else>About page not written yet.</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Deploying Content App with Node.js Docker Image\nDESCRIPTION: Multi-stage Dockerfile for building and deploying a Content application using Node.js Alpine image. Uses pnpm for package management and includes build and production stages for optimized container size.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/8.docker.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Build Stage 1\n\nFROM node:22-alpine AS build\nWORKDIR /app\n\nRUN corepack enable\n\n# Copy package.json and your lockfile, here we add pnpm-lock.yaml for illustration\nCOPY package.json pnpm-lock.yaml .npmrc ./\n\n# Install dependencies\nRUN pnpm i\n\n# Copy the entire project\nCOPY . ./\n\n# Build the project\nRUN pnpm run build\n\n# Build Stage 2\n\nFROM node:22-alpine\nWORKDIR /app\n\n# Only `.output` folder is needed from the build stage\nCOPY --from=build /app/.output/ ./\n\n# Change the port and host\nENV PORT 80\nENV HOST 0.0.0.0\n\nEXPOSE 80\n\nCMD [\"node\", \"/app/server/index.mjs\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Sources in Nuxt Config (TypeScript)\nDESCRIPTION: Demonstrates how to configure content sources in the Nuxt configuration file. It shows setting up default and additional content directories, as well as using custom drivers with options.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/content.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    sources: [\n      'content', // Default directory\n      'v2/content', // Additional source\n      {\n        // Checkout unstorage repository to learn more about drivers.\n        // https://github.com/unjs/unstorage\n        driver: 'fs' | 'http' | 'memory' | 'Resolved path for custom driver',\n        driverOptions: {\n          // Additional options for driver\n        }\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Navigation Vue Component\nDESCRIPTION: Enhanced Vue component with additional query conditions, extra fields, and complex template rendering.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/2.query-collection-navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useAsyncData('navigation', () => {\n  return queryCollectionNavigation('docs', ['description', 'badge'])\n    .where('draft', '=', false)\n    .where('partial', '=', false)\n    .order('title', 'ASC')\n})\n</script>\n\n<template>\n  <nav>\n    <ul v-if=\"data\">\n      <li v-for=\"item in data\" :key=\"item.path\">\n        <NuxtLink :to=\"item.path\">\n          {{ item.title }}\n          <span v-if=\"item.badge\" class=\"badge\">{{ item.badge }}</span>\n        </NuxtLink>\n        <p v-if=\"item.description\">{{ item.description }}</p>\n      </li>\n    </ul>\n  </nav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Implementation with queryCollectionNavigation\nDESCRIPTION: Demonstrates basic usage of queryCollectionNavigation in a Vue component with filtering and ordering.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/2.query-collection-navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useAsyncData('navigation', () => {\n  return queryCollectionNavigation('docs')\n    .where('published', '=', true)\n    .order('date', 'DESC')\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields from a collection in Nuxt Content\nDESCRIPTION: Shows how to use the select method to retrieve only specific fields from collection documents.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .select('path', 'title', 'description')\n    .first()\n})\n```\n\n----------------------------------------\n\nTITLE: Populating SEO Metadata for Docs Pages with Content v3 Page Type\nDESCRIPTION: Using the built-in seo field provided by the page type in Content v3 to populate useSeoMeta for documentation pages, including the site name in the Open Graph title.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nuseSeoMeta({\n  title: page.value.seo.title,\n  ogTitle: `${page.value.seo.title} - ${seo?.siteName}`,\n  description: page.value.seo.description,\n  ogDescription: page.value.seo.description\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Content in Nuxt Page Component\nDESCRIPTION: Demonstrates how to use queryCollection() to fetch raw content data and display it in a Vue component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/2.raw-content.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst { data } = useAsyncData('page-' + route.path, () => queryCollection('docs').path(route.path).first())\n</script>\n\n<template>\n  <pre>{{ data.rawbody }}</pre>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Filtering content with where clause in Nuxt Content\nDESCRIPTION: Demonstrates how to filter content using the where method with comparison operators.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .where('date', '<', '2024-04-04')\n    .all()\n})\n```\n\n----------------------------------------\n\nTITLE: Querying CSV Data in Vue Component\nDESCRIPTION: Vue component example demonstrating how to query and display CSV data using useAsyncData and queryCollection.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/4.csv.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { data } = await useAsyncData('users', () => \n  queryCollection('users').find()\n)\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"user in data\" :key=\"user.id\">\n      {{ user.name }} ({{ user.email }})\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining queryCollectionItemSurroundings Type in TypeScript\nDESCRIPTION: Type definition for the queryCollectionItemSurroundings function and related interfaces. It specifies the function signature, parameters, and return type, including the chainable promise methods for query customization.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/3.query-collection-item-surroundings.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction queryCollectionItemSurroundings<T extends keyof PageCollections>(\n  collection: T,\n  path: string,\n  opts?: SurroundOptions<keyof PageCollections[T]>\n): ChainablePromise<T, ContentNavigationItem[]>\n\ninterface ChainablePromise<T extends keyof PageCollections, R> extends Promise<R> {\n  where(field: keyof PageCollections[T] | string, operator: SQLOperator, value?: unknown): ChainablePromise<T, R>\n  andWhere(groupFactory: QueryGroupFunction<PageCollections[T]>): ChainablePromise<T, R>\n  orWhere(groupFactory: QueryGroupFunction<PageCollections[T]>): ChainablePromise<T, R>\n  order(field: keyof PageCollections[T], direction: 'ASC' | 'DESC'): ChainablePromise<T, R>\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Usage of queryCollectionItemSurroundings in Nuxt\nDESCRIPTION: Demonstrates how to use queryCollectionItemSurroundings on the server side in a Nuxt application. It shows the slight difference in usage where the event object needs to be passed as the first argument to the function.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/3.query-collection-item-surroundings.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default eventHandler(async (event) => {\n  const surroundings = await queryCollectionItemSurroundings(event, 'docs', '/foo')\n  return surroundings\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt Development Server\nDESCRIPTION: Commands to start the development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/ui-pro/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Raw Content for Specific File in Nuxt Content\nDESCRIPTION: Shows how to prevent shipping raw content for a specific file by setting 'rawbody' to an empty string in the frontmatter.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/2.raw-content.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My page\nrawbody: ''\n---\n\n```\n\n----------------------------------------\n\nTITLE: Configuring External Repository as Content Source\nDESCRIPTION: This example shows how to use an external GitHub repository as a content source for a Nuxt Content collection, specifying the repository URL and include pattern.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/3.sources.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineCollection, defineContentConfig } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      type: 'page',\n      source: {\n        repository: 'https://github.com/nuxt/content',\n        include: 'docs/content/**',\n      },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Source in Content Configuration\nDESCRIPTION: Demonstrates how to configure the custom Hacker News source in content.config.ts, including schema definition using Zod and collection setup.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/6.custom-source.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineContentConfig, defineCollectionSource, defineCollection, z } from '@nuxt/content'\n\nconst hackernewsSource = defineCollectionSource({\n  getKeys: () => {\n    return fetch('https://hacker-news.firebaseio.com/v0/topstories.json')\n      .then(res => res.json())\n      .then(data => data.map((key: string) => `${key}.json`))\n  },\n  getItem: (key: string) => {\n    const id = key.split('.')[0]\n    return fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n      .then(res => res.json())\n  },\n})\n\nconst hackernews = defineCollection({\n  type: 'data',\n  source: hackernewsSource,\n  schema: z.object({\n    title: z.string(),\n    date: z.date(),\n    type: z.string(),\n    score: z.number(),\n    url: z.string(),\n    by: z.string(),\n  }),\n})\n\nexport default defineContentConfig({\n  collections: {\n    hackernews,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Content v3 with Package Managers\nDESCRIPTION: Commands for installing the @nuxt/content package using different package managers including pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/2.installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxt/content\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nuxt/content\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nuxt/content\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @nuxt/content\n```\n\n----------------------------------------\n\nTITLE: Updating Docs Page Data and Surroundings Fetch with Content v3 API\nDESCRIPTION: Migrating from separate queryContent calls to consolidated Promise.all with queryCollection and queryCollectionItemSurroundings methods for retrieving documentation pages data in Content v3.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst { data } = await useAsyncData(route.path, () => Promise.all([\n  queryCollection('docs').path(route.path).first(),\n  queryCollectionItemSurroundings('docs', route.path, {\n    fields: ['title', 'description'],\n  }),\n]), {\n  transform: ([page, surround]) => ({ page, surround }),\n})\n\nconst page = computed(() => data.value?.page)\nconst surround = computed(() => data.value?.surround)\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\nconst { data: surround } = await useAsyncData(`${route.path}-surround`, () => queryContent()\n  .where({ _extension: 'md', navigation: { $ne: false } })\n  .only(['title', 'description', '_path'])\n  .findSurround(withoutTrailingSlash(route.path))\n)\n```\n\n----------------------------------------\n\nTITLE: ContentRenderer with Fallback for Missing Pages\nDESCRIPTION: An enhanced implementation that displays a fallback message when content is not found. This pattern uses conditional rendering to show either the content or a user-friendly error message with navigation back to home.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/0.content-renderer.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('docs').path(route.path).findOne()\n})\n</script>\n\n<template>\n  <template v-if=\"page\">\n    <ContentRenderer :value=\"page\" />\n  </template>\n  <template v-else>\n    <div class=\"empty-page\">\n      <h1>Page Not Found</h1>\n      <p>Oops! The content you're looking for doesn't exist.</p>\n      <NuxtLink to=\"/\">Go back home</NuxtLink>\n    </div>\n  </template>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nuxt Content Playground Component in Markdown\nDESCRIPTION: Shows how to include a playground component in a Nuxt Content markdown file using frontmatter for the title and a custom directive for the playground.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/98.playground.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Playground\n---\n\n:playground\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Examples\nDESCRIPTION: Examples of configuring different database adapters for Nuxt Content including SQLite, D1, Postgres, and LibSQL.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'sqlite',\n      filename: 'SQLITE_DB_LOCATION'\n    }\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'd1',\n      bindingName: 'CF_BINDING_NAME'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Content in Vue\nDESCRIPTION: Vue component setup for rendering Markdown blog posts using ContentRenderer.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst slug = useRoute().params.slug\nconst { data: post } = await useAsyncData(`blog-${slug}`, () => {\n  return queryCollection('blog').path(`/blog/${slug}`).first()\n})\n</script>\n\n<template>\n  <!-- Render the blog post as Prose & Vue components -->\n  <ContentRenderer :value=\"post\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Sections for LLMs Content Generation\nDESCRIPTION: Advanced Nuxt configuration demonstrating how to set up custom sections for LLMs content generation, including content collection and filtering options.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/7.llms.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@nuxt/content', 'nuxt-llms'],\n  llms: {\n    domain: 'https://your-site.com',\n    title: 'Your Site Name',\n    description: 'A brief description of your site',\n    sections: [\n      {\n        title: 'Documentation',\n        description: 'Technical documentation and guides',\n        // Specify which content collection to use\n        contentCollection: 'docs',\n        // Filter content as needed\n        contentFilters: [\n          { field: 'extension', operator: '=', value: 'md' },\n          // You can add more filters here\n        ]\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Landing Page Data Fetching with Content v3 API\nDESCRIPTION: Migrating from queryContent to the new queryCollection method for retrieving landing page data in Content v3.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst { data: page } = await useAsyncData('index', () => queryCollection('landing').path('/').first())\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst { data: page } = await useAsyncData('index', () => queryContent('/').findOne())\n```\n\n----------------------------------------\n\nTITLE: Querying Markdown Content in TypeScript\nDESCRIPTION: Examples of querying blog posts using the content query API.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the foo post\nconst fooPost = await queryCollection('blog').path('/foo').first()\n\n// Find all posts\nconst allPosts = await queryCollection('blog').order('date', 'DESC').all()\n```\n\n----------------------------------------\n\nTITLE: Deploying Content App with Bun Docker Image\nDESCRIPTION: Multi-stage Dockerfile for building and deploying a Content application using the official Bun image. Includes optimizations for dependency installation and production deployment configuration.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/8.docker.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# use the official Bun image\n# see all versions at https://hub.docker.com/r/oven/bun/tags\nFROM oven/bun:1 AS build\nWORKDIR /app\n\nCOPY package.json bun.lockb ./\n\n# use ignore-scripts to avoid builting node modules like better-sqlite3\nRUN bun install --frozen-lockfile --ignore-scripts\n\n# Copy the entire project\nCOPY . .\n\nRUN bun --bun run build\n\n# copy production dependencies and source code into final image\nFROM oven/bun:1 AS production\nWORKDIR /app\n\n# Only `.output` folder is needed from the build stage\nCOPY --from=build /app/.output /app\n\n# run the app\nEXPOSE 3000/tcp\nENTRYPOINT [ \"bun\", \"--bun\", \"run\", \"/app/server/index.mjs\" ]\n```\n\n----------------------------------------\n\nTITLE: Server-side Usage in Nitro API Handler\nDESCRIPTION: An example of using queryCollectionSearchSections on the server side within a Nitro API endpoint, showing the event parameter requirement for server usage.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/4.query-collection-search-sections.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default eventHandler(async (event) => {\n  const sections = await queryCollectionSearchSections(event, 'docs')\n  return sections\n})\n```\n\n----------------------------------------\n\nTITLE: Ordering query results in Nuxt Content\nDESCRIPTION: Shows how to sort query results by a specific field in ascending or descending order.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .order('date', 'DESC')\n    .all()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview API for Nuxt Studio\nDESCRIPTION: Configuration for enabling Preview API functionality, particularly for use with Nuxt Studio. Sets up the API endpoint for preview mode.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\npreview: {\n  api: 'https://api.nuxt.studio',\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Content Search Command Palette with Content v3 API\nDESCRIPTION: Migrating from useLazyFetch to the new queryCollectionSearchSections method for retrieving search data in Content v3.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst { data: files } = useLazyAsyncData('search', () => queryCollectionSearchSections('docs'), {\n  server: false,\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst { data: files } = useLazyFetch<ParsedContent[]>('/api/search.json', {\n  default: () => [],\n  server: false\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of queryCollectionItemSurroundings in Vue\nDESCRIPTION: An advanced example of using queryCollectionItemSurroundings with custom options and additional query conditions. It shows how to specify the number of items to fetch before and after, include additional fields, and apply multiple where conditions.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/3.query-collection-item-surroundings.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useAsyncData('surround', () => {\n  return queryCollectionItemSurroundings('docs', '/foo', {\n    before: 1,\n    after: 1,\n    fields: ['badge', 'description']\n  })\n    .where('_draft', '=', false)\n    .where('_partial', '=', false)\n    .order('date', 'DESC')\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt Content Site for Static Hosting\nDESCRIPTION: Command to generate a static build of a Nuxt Content application. This creates a dist/ directory containing all static files ready for deployment to any static hosting service.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/9.static.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi generate\n```\n\n----------------------------------------\n\nTITLE: Server-side TypeScript Configuration\nDESCRIPTION: JSON configuration for server-side TypeScript to avoid type errors when using queryCollectionSearchSections in server code, extending the Nuxt-generated server TypeScript configuration.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/4.query-collection-search-sections.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication for Private Repository\nDESCRIPTION: This snippet demonstrates how to set up basic authentication for accessing a private Bitbucket repository as a content source in Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/3.sources.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndefineCollection({\n  type: 'page',\n  source: {\n    repository: 'https://bitbucket.org/username/repo',\n    authBasic: {\n      username: 'username',\n      password: 'password',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database for Nuxt Content\nDESCRIPTION: This snippet shows how to configure a PostgreSQL database for a Nuxt Content project. It requires creating a PostgreSQL database and setting the POSTGRES_URL environment variable.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/2.serverless.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'postgres',\n      url: process.env.POSTGRES_URL\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Vue Component for Content Editor\nDESCRIPTION: Example of creating a Vue component that can be used within the Markdown content editor. The component includes icon and content slot functionality.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/3.content.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"flex items-start gap-3\">\n    <div class=\"flex items-center justify-center border rounded-lg p-1.5\">\n      <UIcon :name=\"icon\" />\n    </div>\n    <div class=\"flex flex-col\">\n      <h3 class=\"font-semibold\">\n        <ContentSlot name=\"title\" />\n      </h3>\n      <span>\n        <ContentSlot name=\"description\" />\n      </span>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ndefineProps({\n  icon: {\n    type: String,\n    default: 'i-ph-cursor-click',\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Content Schema with Zod in Nuxt Content\nDESCRIPTION: A comprehensive example of defining a content collection schema using zod in a content.config.ts file. This schema defines various field types including boolean, enum, date, nested objects, and arrays that will generate appropriate form inputs in Studio.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/changelog/studio-customisation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineContentConfig({\n  collections: {\n    posts: defineCollection({\n      type: 'page',\n      source: 'blog/*.md',\n      schema: z.object({\n        draft: z.boolean().default(false),\n        category: z.enum(['Alps', 'Himalaya', 'Pyrenees']).optional(),\n        date: z.date(),\n        image: z.object({\n          src: z.string().editor({ input: 'media' }),\n          alt: z.string(),\n        }),\n        slug: z.string().editor({ hidden: true }),\n        icon: z.string().optional().editor({ input: 'icon' }),\n        authors: z.array(z.object({\n          slug: z.string(),\n          username: z.string(),\n          name: z.string(),\n          to: z.string(),\n          avatar: z.object({\n            src: z.string(),\n            alt: z.string(),\n          }),\n        })),\n      }),\n    }),\n  },\n})    \n```\n\n----------------------------------------\n\nTITLE: Building Nuxt Content Project for Production\nDESCRIPTION: Commands to build the Nuxt Content application for production using different package managers. This step optimizes the project for deployment.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/basic/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Counting collection entries in Nuxt Content\nDESCRIPTION: Demonstrates how to count the number of matched collection entries with or without additional query conditions.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    // Count matches\n    .count()\n})\n\n// Returns\n5 // number of matches\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .where('date', '<', '2024-04-04')\n    // Count matches\n    .count()\n})\n\n// Returns\n3 // number of matches for the provided query\n```\n\n----------------------------------------\n\nTITLE: Implementing content:file:beforeParse Hook in Nuxt Config\nDESCRIPTION: Hook that executes before content parsing, allowing modification of raw file content or transform options. Used in Nuxt configuration to intercept content before it's processed.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/5.hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  hooks: {\n    'content:file:beforeParse'(ctx) {\n      // ...\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Nuxt Content Collection with Source Configuration\nDESCRIPTION: This snippet demonstrates how to define a Nuxt Content collection using the defineCollection and defineContentConfig functions. It sets up a 'docs' collection with a source pattern to include all files.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/3.sources.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineContentConfig } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      source: '**',\n      type: 'page'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Content v3 Preview Mode\nDESCRIPTION: Shows how to enable preview mode in Nuxt Content v3 by configuring the Nuxt configuration file to use the Studio API.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/4.migration.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Content Configuration for Collections in Content v3\nDESCRIPTION: JavaScript configuration file for defining content collections structure in Nuxt Content v3. It defines two collections: 'landing' for the home page and 'docs' for documentation pages with custom schema validation.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { defineContentConfig, defineCollection, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    landing: defineCollection({\n      type: 'page',\n      source: 'index.yml'\n    }),\n    docs: defineCollection({\n      type: 'page',\n      source: {\n        include: '**',\n        exclude: ['index.yml']\n      },\n      schema: z.object({\n        links: z.array(z.object({\n          label: z.string(),\n          icon: z.string(),\n          to: z.string(),\n          target: z.string().optional()\n        })).optional()\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt Project for Production\nDESCRIPTION: Commands to build the Nuxt application for production deployment using different package managers.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/ui-pro/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Attributes in Nuxt Content\nDESCRIPTION: Demonstrates how to use attributes for styling and modifying text elements in markdown with custom classes, IDs and styles.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_6\n\nLANGUAGE: mdc\nCODE:\n```\nHello [World]{style=\"color: green;\" .custom-class #custom-id}!\n```\n\n----------------------------------------\n\nTITLE: Server-side usage of queryCollection in Nuxt Content\nDESCRIPTION: Shows how to use queryCollection on the server side within an API route handler, requiring the event parameter.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport default eventHandler(async (event) => {\n  const { slug } = getRouterParams(event)\n  const page = await queryCollection(event, 'docs').path(slug).first()\n  return page\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Pages Preset in Nuxt Config\nDESCRIPTION: This snippet shows how to configure the Cloudflare Pages preset in the Nuxt configuration file. It sets the Nitro preset to 'cloudflare_pages' to ensure proper deployment to Cloudflare Pages.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/4.cloudflare-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    preset: 'cloudflare_pages',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Content Transformer\nDESCRIPTION: Example of implementing a custom content transformer to modify content processing.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    build: {\n      transformers: [\n        '~/transformers/title-suffix',\n      ],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineTransformer } from '@nuxt/content'\n\nexport default defineTransformer({\n  name: 'title-suffix',\n  extensions: ['.md'],\n  transform(file) {\n    return {\n      ...file,\n      title: file.title + ' (suffix)',\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Content v3 Collection Source\nDESCRIPTION: Shows how to configure a Nuxt Content v3 collection source to include or exclude specific files, including handling of dot files and .navigation.yml.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/4.migration.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndefineCollection({\n  source: {\n    include: '**',\n    exclude: ['**/.*']\n  }\n})\n\ndefineCollection({\n  source: {\n    include: '**',\n    exclude: ['**/.!(navigation.yml)']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Required Package for AWS Amplify Deployment\nDESCRIPTION: Command to install the required SQLite package for AWS Amplify deployment. This is a prerequisite for deploying Nuxt Content applications to AWS Amplify.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/7.aws-amplify.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Blog Posts\nDESCRIPTION: Examples of Markdown blog post files with frontmatter and content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndate: 2020-11-11\n---\n\n# Foo\n\nThis is Foo blog post.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndate: 2024-12-12\n---\nHello\nI am bar. Nice to meet you.\n```\n\n----------------------------------------\n\nTITLE: Querying Content via Server API Endpoint\nDESCRIPTION: Example of using the /api/_content/query endpoint to fetch content with various query parameters including first, skip, limit, sort, where, only, and without filters\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/query.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n$fetch('/api/_content/query', {\n  method: 'POST',\n  body: {\n    first: false, // set to true for returning only one document\n    skip: 0,\n    limit: 0,\n    sort: [],\n    where: [],\n    only:[],\n    without:[]\n  },\n})\n// returns an array\n// [{ path: 'posts/hello-world' }, ...]\n```\n\n----------------------------------------\n\nTITLE: Installing @nuxthub/core Module for Nuxt\nDESCRIPTION: This command installs the @nuxthub/core module and registers it in the nuxt.config.ts file. It's a quick way to set up NuxtHub integration for a Nuxt Content project.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/3.nuxthub.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add hub\n```\n\n----------------------------------------\n\nTITLE: Creating a Landing Hero Component in Vue\nDESCRIPTION: This snippet defines a Vue component called LandingHero. It takes an 'image' prop and provides slots for 'title' and 'description'. The component creates a responsive layout with an image and text content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/index.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefineProps<{ image: string }>()\n</script>\n\n<template>\n  <section class=\"flex flex-col sm:flex-row sm:items-center flex-col-reverse gap-4 py-8 sm:gap-12 sm:py-12\">\n    <div>\n      <h1 class=\"text-4xl font-semibold\">\n        <slot name=\"title\" />\n      </h1>\n      <div class=\"text-base text-gray-600 dark:text-gray-300\">\n        <slot name=\"description\" />\n      </div>\n    </div>\n    <img :src=\"image\" class=\"w-1/2 rounded-lg\">\n  </section>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections in TypeScript\nDESCRIPTION: Defines a content collection configuration for blog posts with schema validation using Zod.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    blog: defineCollection({\n      type: 'page',\n      source: 'blog/*.md',\n      schema: z.object({\n        date: z.string()\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Compare Changes Link v2.4.1\nDESCRIPTION: Markdown link to compare changes between versions v2.4.0 and v2.4.1\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.4.0...v2.4.1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview API in Nuxt Config\nDESCRIPTION: Configuration code to enable the Preview API in nuxt.config.ts file. This setup is required to unlock full Studio features including live preview and dynamic form generation.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/1.setup.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw Content Schema in Nuxt Content\nDESCRIPTION: Defines a content configuration with a 'rawbody' field in the schema to enable shipping of raw content data to production.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/2.raw-content.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineContentConfig, z } from '@nuxt/content'\n\nexport default defineContentConfig({\n  collections: {\n    docs: defineCollection({\n      source: '**',\n      type: 'page',\n      schema: z.object({\n        rawbody: z.string()\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Integration with MDC\nDESCRIPTION: Examples of using Vue components in Markdown with MDC syntax, including slots and props.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n::component-name\nDefault slot content\n::\n```\n\nLANGUAGE: markdown\nCODE:\n```\n::card\nThe content of the card\n::\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- components/content/Card.vue -->\n<template>\n  <div class=\"p-2 border bg-white dark:bg-black dark:border-gray-700 rounded\">\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Migrating Docs Layout for Nuxt UI v3\nDESCRIPTION: This snippet shows how to migrate the docs layout in Nuxt UI v3, using the new PageAside and ContentNavigation components to display the documentation navigation.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UContainer>\n    <UPage>\n      <template #left>\n        <UPageAside>\n          <UContentNavigation\n            highlight\n            :navigation=\"navigation\"\n          />\n        </UPageAside>\n      </template>\n\n      <slot />\n    </UPage>\n  </UContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Vue Component\nDESCRIPTION: Complete Vue component example showing basic navigation implementation without query conditions.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/2.query-collection-navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useAsyncData('navigation', () => {\n  return queryCollectionNavigation('docs')\n})\n</script>\n\n<template>\n  <nav>\n    <ul v-if=\"data\">\n      <li v-for=\"item in data\" :key=\"item.path\">\n        <NuxtLink :to=\"item.path\">{{ item.title }}</NuxtLink>\n      </li>\n    </ul>\n  </nav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Components in Nuxt\nDESCRIPTION: Configuration example showing how to make external UI components available globally in the Studio editor\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/3.content.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  hooks: {\n    'components:extend': (components) => {\n      const globals = components.filter(c => ['UButton', 'UIcon'].includes(c.pascalName))\n\n      globals.forEach(c => c.global = true)\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview API in Nuxt Config\nDESCRIPTION: This snippet shows how to configure the Preview API for Nuxt Studio integration in the Nuxt configuration file. It enables the preview functionality by setting the Studio API as the Preview API in Nuxt Content settings.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/v3.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Vue Component with MDC Syntax in Markdown\nDESCRIPTION: This example demonstrates how to use the Callout component within Markdown content using MDC syntax.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/1.slot.md#2025-04-23_snippet_1\n\nLANGUAGE: mdc\nCODE:\n```\n::callout\nThis is a callout.\n::\n```\n\n----------------------------------------\n\nTITLE: Updating Header Component for Nuxt UI v3\nDESCRIPTION: This code shows how to update the Header component in Nuxt UI v3, replacing the NavigationTree with ContentNavigation and using the new queryCollectionNavigation method for navigation data.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n// Content navigation provided by queryCollectionNavigation('docs')\nconst navigation = inject<Ref<ContentNavigationItem[]>>('navigation')\n</script>\n\n<template>\n  <UHeader>\n    <template #content>\n      <UContentNavigation\n        highlight\n        :navigation=\"navigation\"\n      />\n     </template>\n   </UHeader>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Slot in a Vue Component\nDESCRIPTION: This snippet shows how to create a simple Vue component with a default slot for rendering Markdown content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/1.slot.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"callout\">\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using MDC Syntax in Markdown Content\nDESCRIPTION: Demonstrates how to integrate Vue components in Markdown files using MDC syntax\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/3.content.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::home-feature\n  ---\n  icon: i-mdi-vuejs\n  ---\n  #title\n  Embedded Vue components\n  #description\n  Edit slots and props inside the Notion-like editor.\n::\n```\n\n----------------------------------------\n\nTITLE: Configuring NuxtHub Database for Nuxt Content\nDESCRIPTION: This code shows how to set up a NuxtHub database for a Nuxt Content project. It involves installing the NuxtHub module and configuring the database settings.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/2.serverless.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/content', '@nuxthub/core'],\n  content: {\n    database: {\n      type: 'd1',\n      binding: 'DB'\n    }\n  },\n  hub: {\n    database: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating app.vue for Nuxt Page Rendering\nDESCRIPTION: Updates the main app.vue file to include NuxtPage component, allowing the rendering of pages in a new Nuxt project using Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/2.installation.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLayout>\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Remark Plugin Configuration\nDESCRIPTION: Configuration example for remark plugins in Nuxt Content, showing how to override defaults and add new plugins.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        // Object syntax can be used to override default options\n        remarkPlugins: {\n          // Override remark-emoji options\n          'remark-emoji': {\n            options: {\n              emoticon: true\n            }\n          },\n          // Disable remark-gfm\n          'remark-gfm': false,\n          // Add remark-oembed\n          'remark-oembed': {\n            // Options\n          }\n        },\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rehype Plugin Configuration\nDESCRIPTION: Example of configuring rehype plugins in Nuxt Content build settings.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        // Object syntax can be used to override default options\n        rehypePlugins: {\n          'rehype-figure': {\n\n          }\n        },\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring LibSQL Database for Nuxt Content\nDESCRIPTION: This snippet illustrates the configuration of a LibSQL database on Turso.tech for a Nuxt Content project. It requires setting up the database and adding TURSO_DATABASE_URL and TURSO_AUTH_TOKEN environment variables.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/2.serverless.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/content'],\n  content: {\n    database: {\n      type: 'libsql',\n      url: process.env.TURSO_DATABASE_URL,\n      authToken: process.env.TURSO_AUTH_TOKEN,\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Code Block with ProsePre in Markdown\nDESCRIPTION: Demonstrates how to create a code block with syntax highlighting, filename, and line highlighting using the ProsePre component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```js [file.js]{2} meta-info=val\nexport default () => {\n  console.log('Code block')\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Input for App Config in TypeScript\nDESCRIPTION: Shows how to set up a select input for the primary color in the app configuration. It uses the field helper with a required array to create a dropdown selection.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/5.config.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { field, group } from '@nuxt/content/preview'\n\nexport default defineNuxtSchema({\n  appConfig: {\n    parent: group({\n      title: 'UI',\n      description: 'UI configuration',\n      icon: 'i-ph-palette-fill',\n      fields: {\n        primary: field({\n          type: 'string',\n          title: 'Primary',\n          description: 'Primary color of your UI.',\n          icon: 'i-ph-palette',\n          default: 'sky',\n          required: ['sky', 'mint', 'rose', 'amber']\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using ContentRenderer Component in Vue Template\nDESCRIPTION: Shows how to use the ContentRenderer component in a Vue template to render document content. It includes fetching data using useAsyncData and queryContent.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/content.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst route = useRoute()\nconst { data } = await useAsyncData(`doc-${route.path}`, () => queryContent(route.path).findOne())\n</script>\n\n<template>\n  <ContentRenderer :value=\"data\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Files for Authors in Nuxt Content\nDESCRIPTION: These snippets show examples of creating JSON files for authors in the content/authors/ directory. Each file contains an object with name, avatar, and URL properties.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/3.json.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Ahad Birang\",\n  \"avatar\": \"https://avatars.githubusercontent.com/u/2047945?v=4\",\n  \"url\": \"https://github.com/farnabaz\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Baptiste Leproux\",\n  \"avatar\": \"https://avatars.githubusercontent.com/u/7290030?v=4\",\n  \"url\": \"https://github.com/larbish\"\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting query results in Nuxt Content\nDESCRIPTION: Demonstrates how to limit the number of results returned by a query.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst route = useRoute()\nconst { data } = await useAsyncData(route.path, () => {\n  return queryCollection('docs')\n    .limit(10)\n    .all()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing nuxt-llms Module\nDESCRIPTION: Command to install the nuxt-llms module using npm or yarn package managers.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/7.llms.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nuxt-llms\n# or\nyarn add nuxt-llms\n```\n\n----------------------------------------\n\nTITLE: Custom Editor Types Configuration in Nuxt Content v3\nDESCRIPTION: Shows how to configure custom editor types for form fields in the schema definition, enabling specific editor interfaces like media pickers and icon selectors in Nuxt Studio.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/changelog/frontmatter-form.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimage: z.object({\n    src: z.string().editor({ type: 'media' })\n    alt: z.string()\n}),\nicon: z.string().editor({ type: 'icon' })\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS-first Theming in Nuxt UI v3\nDESCRIPTION: This snippet demonstrates how to set up CSS-first theming in Nuxt UI v3 using the @theme directive. It includes importing Tailwind CSS, Nuxt UI Pro, and defining custom color variables.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\" theme(static);\n@import \"@nuxt/ui-pro\";\n\n@source \"../content/**/*\";\n\n@theme {\n  --font-sans: 'DM Sans', sans-serif;\n\n  --color-green-50: #EFFDF5;\n  --color-green-100: #D9FBE8;\n  --color-green-200: #B3F5D1;\n  --color-green-300: #75EDAE;\n  --color-green-400: #00DC82;\n  --color-green-500: #00C16A;\n  --color-green-600: #00A155;\n  --color-green-700: #007F45;\n  --color-green-800: #016538;\n  --color-green-900: #0A5331;\n  --color-green-950: #052E16;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database for AWS Lambda Deployment\nDESCRIPTION: This snippet demonstrates how to configure a SQLite database for deploying a Nuxt Content project on AWS Lambda. It ensures the SQLite file is in the /tmp directory, which is the only writable folder in Lambda environments.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/2.serverless.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/content'],\n  content: {\n    database: {\n      type: 'sqlite',\n      filename: '/tmp/contents.sqlite'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for App Config Editing in TypeScript\nDESCRIPTION: Demonstrates how to create a schema for customizing the app.config.ts editing experience in Studio. It uses group and field helpers to define the structure and properties of the configuration.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/5.config.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { field, group } from '@nuxt/content/preview'\n\nexport default defineNuxtSchema({\n  appConfig: {\n    parent: group({\n      title: 'Parent title',\n      description: 'Parent description.',\n      icon: 'i-icon-to-display',\n      fields: {\n        leaf: field({\n          type: 'Type of component used to edit your field',\n          title: 'Field title',\n          description: 'Field Description',\n          icon: 'i-icon-to-display',\n          default: 'default value'\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Editor Input Configuration\nDESCRIPTION: Example of configuring custom editor input types using Zod schema extensions\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/3.content.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmainScreen: z.string().editor({ input: 'media' })\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of queryCollectionSearchSections in Vue Component\nDESCRIPTION: A simple Vue component example demonstrating how to use the queryCollectionSearchSections composable with useAsyncData to fetch searchable sections from the 'docs' collection.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/4.query-collection-search-sections.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nconst { data: sections } = await useAsyncData('search-sections', () => {\n  return queryCollectionSearchSections('docs')\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Fetch in app.vue with Content v3 API\nDESCRIPTION: Migrating from the fetchContentNavigation method to the new queryCollectionNavigation method in Content v3 for retrieving navigation data.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst { data: navigation } = await useAsyncData('navigation', () => queryCollectionNavigation('docs'))\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst { data: navigation } = await useAsyncData('navigation', () => fetchContentNavigation())\n```\n\n----------------------------------------\n\nTITLE: Defining Complex UI Configuration Schema in TypeScript\nDESCRIPTION: Illustrates a more complex schema for UI configuration, including primary color selection and icon management. It uses nested group and field helpers to create a structured editing experience.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/5.config.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtSchema({\n  ui: group({\n    title: 'UI',\n    description: 'UI Customization.',\n    icon: 'i-mdi-palette-outline',\n    fields: {\n      primary: field({\n        type: 'string',\n        title: 'Primary',\n        description: 'Primary color of your UI.',\n        icon: 'i-mdi-palette-outline',\n        required: ['sky', 'mint', 'rose', 'amber', 'violet', 'emerald', 'fuchsia', '...']\n      }),\n      gray: field({ ... }),\n      icons: group({\n        title: 'Icons',\n        description: 'Manage icons used in UI Pro.',\n        icon: 'i-mdi-application-settings-outline',\n        fields: {\n          search: field({ ...}),\n          dark: field({ ... }),\n          light: field({ ... }),\n          external: field({ ...}),\n          chevron: field({ ... }),\n          hash: field({ ... })\n        }\n      })\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Example with Options in Vue Component\nDESCRIPTION: A more advanced Vue component example showing how to use queryCollectionSearchSections with custom options, specifically ignoring code tags when generating search sections.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/4.query-collection-search-sections.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nconst { data: surround } = await useAsyncData('foo-surround', () => {\n  return queryCollectionSearchSections('docs', {\n    ignoredTags: ['code']\n  })\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty App Config in TypeScript\nDESCRIPTION: Creates an empty app configuration file using defineAppConfig. This is a prerequisite for customizing the editing experience in Studio.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/5.config.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({})\n```\n\n----------------------------------------\n\nTITLE: Using Named Slots in MDC Syntax\nDESCRIPTION: This snippet demonstrates how to use named slots within MDC syntax in Markdown content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/1.slot.md#2025-04-23_snippet_6\n\nLANGUAGE: mdc\nCODE:\n```\n::callout\n#title\nPlease be careful!\n#default\nUsing MDC & Vue components is addictive.\n::\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Working Directory for Content Matching\nDESCRIPTION: This snippet demonstrates how to set a custom working directory (cwd) for content matching, allowing inclusion of files from outside the default content directory.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/2.collections/3.sources.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsource: {\n  cwd: path.resolve('packages/my-pkg/docs'),\n  include: '**/*.md',\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Inputs with Editor Method in Zod\nDESCRIPTION: A code snippet demonstrating how to use the editor method to customize form inputs in Studio. This example shows how to set a field to use the media input type.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/changelog/studio-customisation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmainScreen: z.string().editor({ input: 'media' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Studio Editor in Nuxt Config\nDESCRIPTION: Example of how to enable the Studio editor in Nuxt Content v3 through the nuxt.config.ts file configuration.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/changelog/yaml-json-form.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontent.editor: true\n```\n\n----------------------------------------\n\nTITLE: Using Images in Markdown Content\nDESCRIPTION: Example of how to reference images in markdown content files.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_11\n\nLANGUAGE: md\nCODE:\n```\n![my image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring Excerpt Schema\nDESCRIPTION: TypeScript configuration for defining excerpt schema in content collections.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nconst content = defineCollection({\n  type: 'page',\n  source: '**',\n  schema: z.object({\n    excerpt: z.object({\n      type: z.string(),\n      children: z.any(),\n    }),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Example with Query\nDESCRIPTION: Example of Markdown frontmatter usage and how to query it.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Title of the page'\ndescription: 'meta description of the page'\n---\n\n<!-- Content of the page -->\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst home = await queryCollection('content').path('/').first()\n\nconsole.log(home.title)\n// => 'Title of the page'\nconsole.log(home.description)\n// => 'meta description of the page'\nconsole.log(home.body)\n// => AST object of the page content\n```\n\n----------------------------------------\n\nTITLE: Data Binding in Markdown with YAML Frontmatter\nDESCRIPTION: Example of using YAML frontmatter to define variables and bind them in markdown content using mustache syntax.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_8\n\nLANGUAGE: mdc\nCODE:\n```\n---\ntitle: 'Title of the page'\ndescription: 'meta description of the page'\ncustomVariable: 'Custom Value'\n---\n\n# The Title is {{ $doc.title }} and customVariable is {{ $doc.customVariable || 'defaultValue' }}\n\n```\n\n----------------------------------------\n\nTITLE: External Data Binding with ContentRenderer Component\nDESCRIPTION: Demonstrates how to bind external data to markdown content using the ContentRenderer component in Vue.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <ContentRenderer :value=\"data\" :data=\"mdcVars\"/>\n    <button type=\"button\" v-on:click=\"mdcVars.name = 'Hugo'\">Change name</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst { data } = await useAsyncData(() => queryCollection('content').path('/test').first());\nconst mdcVars = ref({ name: 'Maxime'});\n</script>\n```\n\nLANGUAGE: mdc\nCODE:\n```\n# Hello {{ $doc.name || 'World' }}\n\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Images in Nuxt Content\nDESCRIPTION: Shows the required directory structure for using images in Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncontent/\n  index.md\npublic/\n  image.png\nnuxt.config.ts\npackage.json\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Query Plugin\nDESCRIPTION: Example of creating a custom query plugin that adds version filtering functionality to the query system\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/query.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// file `~/plugin-version.ts`\nimport { defineQueryPlugin } from '#imports'\n\nexport default defineQueryPlugin({\n  name: 'version',\n  queries: {\n    version: params => {\n      return v => {\n        params.version = v\n      }\n    }\n  },\n  execute: (data, params) => {\n    if (params.version) {\n      return data.filter(v => v.version === params.version)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating error.vue Page for Nuxt UI v3\nDESCRIPTION: This snippet demonstrates how to migrate the error.vue page to use the new UError component in Nuxt UI v3. It simplifies the error page structure while maintaining header and footer components.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <AppHeader />\n\n    <UError :error=\"error\" />\n\n    <AppFooter />\n\n    <ClientOnly>\n      <LazyUContentSearch\n        :files=\"files\"\n        :navigation=\"navigation\"\n      />\n    </ClientOnly>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Parsing in Nuxt Config\nDESCRIPTION: Configuration setup for CSV parsing in nuxt.config.ts, including options for JSON conversion and custom delimiter specification.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/4.csv.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    build: {\n      csv: {\n        // Convert CSV data to JSON objects\n        json: true,\n        // Specify custom delimiter (default is ',')\n        delimiter: ','\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare D1 Database for Nuxt Content\nDESCRIPTION: This code demonstrates how to set up a Cloudflare D1 database for a Nuxt Content project. It involves creating a D1 database in your Cloudflare account and linking it to your project with a binding name.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/2.serverless.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    database: {\n      type: 'd1',\n      binding: '<YOUR_BINDING_NAME>'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Blockquote with ProseBlockquote in Markdown\nDESCRIPTION: Shows how to create a blockquote in markdown that will be rendered using the ProseBlockquote component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> Block quote\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Documentation Page\nDESCRIPTION: YAML frontmatter configuration defining the navigation title, page title, and description for the Nuxt Content v3 documentation page.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/1.index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnavigation:\n  title: Introduction\ntitle: Nuxt Content v3\ndescription: The powerful Git-based CMS designed specifically for Nuxt developers.\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Query Playground Component in Vue\nDESCRIPTION: This code snippet defines a Vue component named 'query-playground'. It appears to be a custom component for Nuxt Content, likely used to provide an interactive interface for testing content queries.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/99.query-playground.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n:query-playground\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Configuration\nDESCRIPTION: Default configuration and type signature for table of contents settings in Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoc: {\n  depth: 2,\n  searchDepth: 2\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Toc = {\n  depth: number\n  searchDepth: number\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Named Slots\nDESCRIPTION: This example shows how to create a Vue component with both default and named slots for more complex content structuring.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/1.slot.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"callout\">\n    <h2 v-if=\"$slots.title\">\n      <slot name=\"title\" mdc-unwrap=\"p\" />\n    </h2>\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating an H3 Heading with ProseH3 in Markdown\nDESCRIPTION: Demonstrates how to create an H3 heading in markdown that will be rendered using the ProseH3 component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### H3 Heading\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter Metadata in Markdown\nDESCRIPTION: This snippet demonstrates how to define frontmatter metadata for a Nuxt Content post. It includes a title and an array of authors.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/post.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Post 1\nauthors: [ \"alice\", \"bob\" ]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Content Preview API for Studio Integration\nDESCRIPTION: Adding configuration for Preview API in Nuxt Content v3 to replace the deprecated Studio module, enabling direct integration with Nuxt Studio.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Nuxt Content Preview in Development\nDESCRIPTION: Configuration to force the Content module to initialize in development environment, which is required for testing Studio customizations locally.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/6.debug.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    preview: {\n      // force module initialization on dev env\n      dev: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Collections Schema in Nuxt Content v3\nDESCRIPTION: Demonstrates how to define content collections with schema validation using Zod in the content.config.ts file. Shows collection configuration including type specification, source pattern matching, and schema definition for content structure.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/changelog/frontmatter-form.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, z } from '@nuxt/content'\n\n// Export collections\nexport const collections = {\n  // Define collection using `defineCollection` utility\n  posts: defineCollection({\n    // Specify the type of content in this collection\n    type: 'page',\n    // Load every file matching this pattern\n    source: 'blog/**/*.md',\n    // Define custom schema for this collection\n    schema: z.object({\n      date: z.date(),\n      image: z.object({\n        src: z.string(),\n        alt: z.string()\n      }),\n      badge: z.object({\n        label: z.string(),\n        color: z.string()\n      })\n    })\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Unordered List with ProseUl in Markdown\nDESCRIPTION: Demonstrates how to create an unordered list in markdown that will be rendered using the ProseUl component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- Just\n- An\n- Unordered\n- List\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Documentation Link\nDESCRIPTION: Demonstrates how to create a styled div containing a documentation link using Markdown and custom styling.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/basic/content/index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n::div{style=\"background: orange; font-size: 1.5rem; padding: 10px 20px;\"}\nCheckout [official docs][docs] to read more about Nuxt Content\n::\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of MDC Component\nDESCRIPTION: This snippet shows the resulting HTML output when the Callout component is rendered with Markdown content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/1.slot.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"callout\">\n  <p>This is a callout.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Content Preview API for Studio Integration\nDESCRIPTION: This code snippet demonstrates how to configure the Nuxt Content Preview API for integration with Nuxt Studio, enabling preview mode and binding to the Studio API.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio'\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt with Content and LLMs Modules\nDESCRIPTION: Basic Nuxt configuration to enable @nuxt/content and nuxt-llms modules, including LLMs settings for domain, title, and description.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/7.llms.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@nuxt/content', 'nuxt-llms'],\n  llms: {\n    domain: 'https://your-site.com',\n    title: 'Your Site Name',\n    description: 'A brief description of your site',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Resetting Nuxt Content Database\nDESCRIPTION: A series of commands to manually reset the Nuxt Content database by deleting the file, cleaning up, and restarting the development server.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/4.tools.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf .data/content/contents.sqlite\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi cleanup\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi dev\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with Named Slots\nDESCRIPTION: This example shows the final HTML output when using a component with named slots in MDC syntax.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/1.slot.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"callout\">\n  <h2>Please be careful!</h2>\n  <p>Using MDC & Vue components is addictive.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Excerpts\nDESCRIPTION: Shows how to use the excerpt feature in markdown content using the more divider.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/1.markdown.md#2025-04-23_snippet_12\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: Introduction\n---\n\nLearn how to use `@nuxt/content`.\n\n<!--more-->\n\nFull amount of content beyond the more divider.\n```\n\n----------------------------------------\n\nTITLE: Navigation Metadata Configuration\nDESCRIPTION: YAML configuration file for defining navigation metadata including title and icon.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/2.query-collection-navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Getting Started\nicon: i-lucide-square-play\n```\n\n----------------------------------------\n\nTITLE: Properties Structure for the ProsePre Component\nDESCRIPTION: Illustrates the JSON structure of properties passed to the ProsePre component, including code content, language, filename, highlighted lines, and metadata.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  code: \"export default () => {\\n    console.log('Code block')\\n}\"\n  language: \"js\"\n  filename: \"file.js\"\n  highlights: [2]\n  meta: \"meta-info=val\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Types with Content v3 Built-in TypeScript Definitions\nDESCRIPTION: Using the ContentNavigationItem type provided by Content v3 to replace custom NavItem type for better type safety.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { ContentNavigationItem } from '@nuxt/content'\n\nconst navigation = inject<Ref<ContentNavigationItem[]>>('navigation')\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with Unwrapped Content\nDESCRIPTION: This snippet demonstrates the HTML output when content is unwrapped using the mdc-unwrap prop.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/1.slot.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"callout\">\n  This is a callout.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Built Nuxt Server\nDESCRIPTION: Command to start the built Nuxt server from the output directory. The server will start listening on localhost port 3000.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/1.server.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ node .output/server/index.mjs\nListening on http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch Features in Nuxt Config\nDESCRIPTION: Example configuration to enable content watching with custom port and URL display settings in Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    watch: {\n      port: 4000,\n      showURL: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating UI Overloads in app.config.ts for Nuxt UI v3\nDESCRIPTION: This code snippet shows how to update the UI overloads in the app.config.ts file for Nuxt UI v3. It includes configurations for colors and footer styling.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  ui: {\n    colors: {\n      primary: 'green',\n      neutral: 'slate'\n    }\n  },\n  uiPro: {\n    footer: {\n      slots: {\n        root: 'border-t border-gray-200 dark:border-gray-800',\n        left: 'text-sm text-gray-500 dark:text-gray-400'\n      }\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS and Nuxt UI Pro in CSS File\nDESCRIPTION: Setting up proper CSS imports for Tailwind CSS and Nuxt UI Pro v3 in a dedicated CSS file and including it in the Nuxt configuration.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\" theme(static);\n@import \"@nuxt/ui-pro\";\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui-pro'],\n  css: ['~/assets/css/main.css']\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue Component in Markdown (Nuxt Content)\nDESCRIPTION: Demonstrates how to embed a Vue component called 'counter' within Markdown content using Nuxt Content's custom syntax.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/ui-pro/content/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::counter\n::\n```\n\n----------------------------------------\n\nTITLE: Vue Application Component Structure\nDESCRIPTION: Main Vue application component showing SEO meta configuration, layout structure with header/footer components, and custom styling. Demonstrates the use of useSeoMeta composable for SEO optimization.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/0.index.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nuseSeoMeta({\n  title: 'Meet Nuxt!',\n  description: 'The Intuitive Vue Framework.'\n})\n</script>\n\n<template>\n  <div id=\"app\">\n    <AppHeader />\n    <NuxtPage />\n    <AppFooter />\n  </div>\n</template>\n\n<style>\n#app {\n  background-color: #020420;\n  color: #00DC82;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Info Override in Nuxt Config\nDESCRIPTION: Configuration to manually override gitInfo in nuxt.config.ts when automatic fetching doesn't work with certain providers. This ensures proper connection with Nuxt Studio.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/1.setup.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    preview: {\n      api: 'https://api.nuxt.studio',\n      gitInfo: {\n        name: 'Your repository name',\n        owner: 'Your repository owner/organization',\n        url: 'Your GitHub repository URL'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SEO Metadata with Content v3 Page Type\nDESCRIPTION: Using the built-in seo field provided by the page type in Content v3 to populate useSeoMeta for better SEO management.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nuseSeoMeta({\n  title: page.value.seo.title,\n  ogTitle: page.value.seo.title,\n  description: page.value.seo.description,\n  ogDescription: page.value.seo.description\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt Configuration for UI Pro v3 Module\nDESCRIPTION: Migrating from using Nuxt UI Pro as a layer to using it as a module in the Nuxt configuration. UI Pro v3 automatically imports the UI module, so it's no longer needed to add it separately.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui-pro']\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: ['@nuxt/ui-pro'],\n  modules: ['@nuxt/ui']\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Content v3 Package with Package Managers\nDESCRIPTION: Commands for installing the Nuxt Content v3 package using different package managers including pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxt/content@^3\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nuxt/content@^3\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nuxt/content@^3\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @nuxt/content@^3\n```\n\n----------------------------------------\n\nTITLE: Server-side TypeScript configuration for Nuxt Content\nDESCRIPTION: Provides the necessary TypeScript configuration to avoid type errors when using server-side features.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/1.query-collection.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Command for Nuxt Content Deployment\nDESCRIPTION: This bash command sets the build command for deploying a Nuxt Content project on various serverless platforms. It generates output compatible with the selected platform.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/2.serverless.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnuxi build\n```\n\n----------------------------------------\n\nTITLE: Updating Landing Page Rendering for Nuxt Content v3\nDESCRIPTION: This code demonstrates how to update the landing page rendering in Nuxt Content v3, using ContentRenderer to display Markdown content without prose styling.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UContainer>\n    <ContentRenderer\n      v-if=\"page\"\n      :value=\"page\"\n      :prose=\"false\"\n    />\n  </UContainer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Template Features for Nuxt UI Pro Documentation\nDESCRIPTION: This code block defines a list of features for the Nuxt UI Pro documentation template, including Nuxt 3, Markdown support, Nuxt UI components, TypeScript, Nuxt Studio compatibility, and full-text search functionality.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/templates/docs.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::template-features\n---\nfeatures:\n  - label: Nuxt 3\n    content: Powered by Nuxt 3 for optimal performances and SEO.\n  - label: Markdown\n    content: Write your pages with MDC thanks to Nuxt Content.\n  - label: Nuxt UI\n    content: Offers a very large set of full customizable components.\n  - label: TypeScript\n    content: A fully typed development experience.\n  - label: Nuxt Studio\n    content: Supported by Nuxt Studio for fast updates and previews.\n  - label: Search\n    content: A full-text search modal empowered by Fuse.js.\n---\n:::\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Settings in Nuxt Content\nDESCRIPTION: Default configuration for content hot reload in development. Controls hot reload enablement, WebSocket server port, and URL display settings.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwatch: {\n  enabled: true,\n  port: 4000,\n  showURL: false\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Delimiter Configuration\nDESCRIPTION: Configuration example for using custom delimiters in CSV parsing.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/4.csv.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    build: {\n      csv: {\n        delimiter: ';' // Use semicolon as delimiter\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Watch Features in Nuxt Config\nDESCRIPTION: Configuration example showing how to disable the content watching feature in Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    watch: {\n      enabled: false\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt Production Build\nDESCRIPTION: Commands to preview the production build locally before deployment using different package managers.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/ui-pro/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Nuxt Content\nDESCRIPTION: This snippet defines the frontmatter metadata for a Nuxt Content page, including details about the documentation template such as title, description, and associated images.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/templates/docs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: docs\nsubtitle: Create your documentation in seconds\ntitle: Docs\nbaseDir: .\nbranch: main\ncategory: docs\ncreatedAt: 2023-11-15T17:41:03.087Z\ndemo: https://v3.docs-template-3erl.pages.dev/\ndescription: Create your documentation in seconds with this template\nlicenseType: nuxt-ui-pro\nmainScreen: /templates/docs-main.webp\nname: docs\nowner: nuxt-ui-pro\nimage1: /templates/docs-1.webp\nimage2: /templates/docs-2.webp\nimage3: /templates/docs-3.webp\n---\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt Content Production Build\nDESCRIPTION: Commands to locally preview the production build of the Nuxt Content project using different package managers. This allows for testing the production version before deployment.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/basic/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Using Counter Component in Markdown\nDESCRIPTION: Demonstrates how to integrate a Vue component called 'counter' within Markdown content using MDC syntax.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/basic/content/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::counter\n::\n```\n\n----------------------------------------\n\nTITLE: Preview JSON Structure Example\nDESCRIPTION: Example of the required gitInfo structure in the __preview.json file, which is automatically generated by the Content module. This information is crucial for proper Studio connectivity.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/1.setup.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"gitInfo\": {\n  \"name\": \"content\",\n  \"owner\": \"nuxt\",\n  \"url\": \"https://github.com/nuxt/content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendering for Serverless Optimization\nDESCRIPTION: This code snippet shows how to optimize a serverless Nuxt Content application by pre-rendering certain pages using the routeRules option. It improves performance by reducing the need for fresh server instances on every request.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/2.serverless.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  routeRules: {\n    '/': { prerender: true }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Template Features Configuration\nDESCRIPTION: YAML configuration block defining the key features of the Content Wind theme, including Nuxt architecture, Studio compatibility, and deployment options.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/templates/content-wind.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfeatures:\n  - label: Nuxt Architecture\n    content: Harness the full power of Nuxt 3 and its modules ecosystem.\n  - label: Nuxt Studio ready\n    content: Edit your theme content and appearance with live-preview within Nuxt Studio.\n  - label: Vue Components\n    content: Insert built-in components (or your own) inside your content.\n  - label: Write Markdown\n    content: Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n  - label: Deploy anywhere\n    content: In one click from Studio or with zero config on Vercel or Netlify. Choose between static generation, on-demand rendering (Node) or edge-side rendering on CloudFlare workers.\n  - label: Extensible\n    content: Customize the whole design, or add components using slots - you can make Content-Wind your own.\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt Development Server\nDESCRIPTION: Command to start the Nuxt development server, which generates the SQLite database.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/4.tools.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi dev\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up and Restarting Nuxt\nDESCRIPTION: Commands to clean up the Nuxt project and restart the development server to regenerate the database.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/4.tools.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi cleanup && npx nuxi dev\n```\n\n----------------------------------------\n\nTITLE: Using HomeFeature Component in Markdown\nDESCRIPTION: Example of how to use the HomeFeature component within markdown content, demonstrating slot usage and icon prop setting\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/studio/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::home-feature\n  ---\n  icon: i-mdi-vuejs\n  ---\n  #title\n  Embedded Vue components\n  #description\n  Edit slots and props inside the Notion-like editor.\n::\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Content in a Vue Slot\nDESCRIPTION: This example shows how to use the mdc-unwrap prop to remove wrapping elements from the rendered content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/1.slot.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"callout\">\n    <slot mdc-unwrap=\"p\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt Content Template Configuration in YAML\nDESCRIPTION: Frontmatter configuration for a minimal Nuxt starter template, defining metadata like slug, title, description, and associated assets.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/templates/minimal-starter.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslug: minimal-starter\nsubtitle: The minimalist template\ntitle: Minimal Starter\nbaseDir: .\nbranch: content\ncategory: minimal\ndemo: https://codesandbox.io/p/sandbox/github/nuxt/starter/tree/content\ndescription: \"Minimalist start, limitless possibilities: craft your vision!\"\nlicenseType: free\nmainScreen: /templates/starter-main.webp\nname: starter\nowner: nuxt\nimage1: /templates/starter-1.webp\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format\nDESCRIPTION: Example of how CSV data is converted to JSON format when json:true is configured.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/4.csv.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"1\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n  },\n  {\n    \"id\": \"2\",\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane@example.com\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt Content Project for Production\nDESCRIPTION: Commands to build the Nuxt Content application for production using various package managers.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/i18n/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Development Server with Tunnel\nDESCRIPTION: Command to start the Nuxt development server with a tunnel option that exposes your local server to the internet, allowing Studio to connect to your local environment.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/8.studio/6.debug.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxt dev --tunnel\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code Using Content API Endpoint (TypeScript)\nDESCRIPTION: Shows how to use the /api/_content/highlight endpoint to highlight a piece of code. It sends a POST request with the code and language, and receives an array of tokens with color information.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/content.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n$fetch('/api/_content/highlight', {\n  method: 'POST',\n  body: {\n    code: `const contents = await queryContent('posts').where({ category: { $in: ['nature', 'people'] } }).limit(10).find()`,\n    lang: 'js'\n  }\n})\n// Return an array of tokens\n// [{ content: 'const', color: '#C678DD' }, ...]\n```\n\n----------------------------------------\n\nTITLE: Creating Author YAML Data Files\nDESCRIPTION: Example YAML files for storing author information in the content/authors directory. Each file contains structured data for an individual author.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/2.yaml.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Ahad Birang\navatar: https://avatars.githubusercontent.com/u/2047945?v=4\nurl: https://github.com/farnabaz\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: Baptiste Leproux\navatar: https://avatars.githubusercontent.com/u/7290030?v=4\nurl: https://github.com/larbish\n```\n\n----------------------------------------\n\nTITLE: TSConfig for Server-side Usage in Nuxt\nDESCRIPTION: Configuration for the server-side TypeScript setup in a Nuxt project. This tsconfig.json file extends the Nuxt-generated server configuration to avoid type errors when using server-side utilities.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/3.query-collection-item-surroundings.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt Content Project\nDESCRIPTION: Commands to install project dependencies using various package managers (npm, pnpm, yarn, bun).\nSOURCE: https://github.com/nuxt/content/blob/main/examples/i18n/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Deploying to Vercel via CLI\nDESCRIPTION: Command to deploy a Nuxt Content application to Vercel using the command-line interface. This is one of two deployment methods, with the alternative being deployment via the Vercel dashboard.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/5.vercel.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx vercel deploy\n```\n\n----------------------------------------\n\nTITLE: Enabling Native SQLite in Nuxt Content\nDESCRIPTION: Configuration for enabling experimental native SQLite support, available in Node.js v22.5.0 and above.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    experimental: { nativeSqlite: true },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Structure\nDESCRIPTION: Example CSV file structure showing user data with id, name, and email fields.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/4.csv.md#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nid,name,email\n1,John Doe,john@example.com\n2,Jane Smith,jane@example.com\n```\n\n----------------------------------------\n\nTITLE: Creating an H5 Heading with ProseH5 in Markdown\nDESCRIPTION: Demonstrates how to create an H5 heading in markdown that will be rendered using the ProseH5 component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n##### H5 Heading\n```\n\n----------------------------------------\n\nTITLE: Creating a Paragraph with ProseP in Markdown\nDESCRIPTION: Shows how to create a paragraph in markdown that will be rendered using the ProseP component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\nJust a paragraph.\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI Pro v3 Alpha Package with Package Managers\nDESCRIPTION: Commands for installing the Nuxt UI Pro v3 alpha package using different package managers including pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/ui-pro-docs-migration.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxt/ui-pro@next\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nuxt/ui-pro@next\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nuxt/ui-pro@next\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @nuxt/ui-pro@next\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Code with ProseCode in Markdown\nDESCRIPTION: Shows how to create inline code snippets with optional syntax highlighting using the ProseCode component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`code`\n\n`const code: string = 'highlighted code inline'`{lang=\"ts\"}\n```\n\n----------------------------------------\n\nTITLE: Server-side Navigation Query Implementation\nDESCRIPTION: Example of using queryCollectionNavigation in a server-side API endpoint.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/2.query-collection-navigation.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default eventHandler(async (event) => {\n  const navigation = await queryCollectionNavigation(event, 'docs')\n  return navigation\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Emphasized Text with ProseEm in Markdown\nDESCRIPTION: Shows how to create emphasized (italic) text in markdown that will be rendered using the ProseEm component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n_Just an italic paragraph._\n```\n\n----------------------------------------\n\nTITLE: Creating an Ordered List with ProseOl in Markdown\nDESCRIPTION: Demonstrates how to create an ordered list in markdown that will be rendered using the ProseOl component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n1. Foo\n2. Bar\n3. Baz\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build of Nuxt Content Project\nDESCRIPTION: Commands to locally preview the production build of the Nuxt Content project using different package managers.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/i18n/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with ProseTable in Markdown\nDESCRIPTION: Demonstrates how to create a table in markdown that will be rendered using the ProseTable component and its related components (ProseTbody, ProseTd, ProseTh, ProseThead, ProseTr).\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Key | Type      | Description |\n| --- | --------- | ----------- |\n| 1   | Wonderful | Table       |\n| 2   | Wonderful | Data        |\n| 3   | Wonderful | Website     |\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt Application with Node Preset\nDESCRIPTION: Command to build a Nuxt project using the default Node.js preset. This generates the server output in the .output directory.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/1.server.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnuxi build\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Rule with ProseHr in Markdown\nDESCRIPTION: Demonstrates how to create a horizontal rule divider in markdown that will be rendered using the ProseHr component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nDivider under.\n\n---\n\nDivider above.\n```\n\n----------------------------------------\n\nTITLE: Creating an H2 Heading with ProseH2 in Markdown\nDESCRIPTION: Shows how to create an H2 heading in markdown that will be rendered using the ProseH2 component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## H2 Heading\n```\n\n----------------------------------------\n\nTITLE: Tip Block in Markdown\nDESCRIPTION: A tip about Nuxt Studio's optimization for Content projects\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/studio-v2.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::tip\nStudio is optimized for **Nuxt Content** project but the only real requirement is to have a *content* folder with Markdown files. This simple setup is enough to start editing and publishing your files with the platform.\n::\n```\n\n----------------------------------------\n\nTITLE: Using ContentRendererMarkdown Component in Vue Template\nDESCRIPTION: Demonstrates the usage of the ContentRendererMarkdown component to render markdown content in a Vue template.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/content.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ContentRendererMarkdown :value=\"data\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt Content Development Server\nDESCRIPTION: Commands to start the development server on http://localhost:3000 using different package managers. This allows for local development and testing of the Nuxt Content project.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/basic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Warning Block in Markdown\nDESCRIPTION: A warning notice about article publication timing and module deprecation\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/studio-v2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::warning\nThis article was published before the merge of the [Content](https://github.com/nuxt/content) and [Studio](https://github.com/nuxtlabs/studio-module) modules on January 6, 2025. As a result, it may contain some inconsistencies. The Studio module is now deprecated and available as an opt-in feature of the Content module. Learn how to enable it in [this guide](/docs/getting-started).\n::\n```\n\n----------------------------------------\n\nTITLE: Creating an H4 Heading with ProseH4 in Markdown\nDESCRIPTION: Shows how to create an H4 heading in markdown that will be rendered using the ProseH4 component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n#### H4 Heading\n```\n\n----------------------------------------\n\nTITLE: Tip Block for Editor Future\nDESCRIPTION: A tip about the future development of the editor\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/studio-v2.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n::tip\nOur Notion-like editor has a bright future ahead, and we want to develop it collaboratively with the community.\n::\n```\n\n----------------------------------------\n\nTITLE: Deploying Nuxt Content to NuxtHub\nDESCRIPTION: This command deploys the Nuxt Content project to NuxtHub. It should be run after setting up the @nuxthub/core module and preparing the content for deployment.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/6.deploy/3.nuxthub.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxthub deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Nuxt Content Project\nDESCRIPTION: Commands to start the development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/i18n/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Warning Block for Google Users\nDESCRIPTION: A warning about Google user limitations\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/studio-v2.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n::warning\nSince a Google user can not create a project, he has to **join a team** with existing projects to edit them.\n::\n```\n\n----------------------------------------\n\nTITLE: Creating Strong Text with ProseStrong in Markdown\nDESCRIPTION: Demonstrates how to create strong (bold) text in markdown that will be rendered using the ProseStrong component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n**Just a strong paragraph.**\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in Robots.txt\nDESCRIPTION: This configuration restricts search engine crawlers from accessing the /dev/ directory and its subdirectories, while implicitly allowing access to all other parts of the website. The wildcard user-agent directive applies these rules to all web crawlers.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nuser-agent: *\ndisallow: /dev/*\n```\n\n----------------------------------------\n\nTITLE: Custom Delimited CSV Example\nDESCRIPTION: Sample CSV data using semicolon as a custom delimiter.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/3.files/4.csv.md#2025-04-23_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\nid;name;email\n1;John Doe;john@example.com\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt Content Project\nDESCRIPTION: Commands for installing project dependencies using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/ui-pro/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Warning Block for Studio Module\nDESCRIPTION: A warning about using the latest Studio module version\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/studio-v2.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n::warning{to=\"https://github.com/nuxtlabs/studio-module\"}\nIt's crucial to use the latest version of the **Studio module** to ensure compatibility and access to new features.\n::\n```\n\n----------------------------------------\n\nTITLE: Styling Div with Markdown\nDESCRIPTION: Shows how to create a styled div element using Markdown with inline styling attributes.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/basic/content/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:div{style=\"margin: 2rem 0\"}\n```\n\n----------------------------------------\n\nTITLE: Comparing Changes Between Nuxt Content Versions\nDESCRIPTION: GitHub compare links to view changes between different versions of Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.9.0...v2.10.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.8.5...v2.9.0)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.8.4...v2.8.5)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.8.3...v2.8.4)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.8.2...v2.8.3)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.8.1...v2.8.2)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.8.0...v2.8.1)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.7.2...v2.8.0)\n```\n\n----------------------------------------\n\nTITLE: TOC Implementation Example\nDESCRIPTION: Example of customizing table of contents depth in Nuxt Content configuration.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/1.getting-started/3.configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  content: {\n    build: {\n      markdown: {\n        toc: {\n          depth: 3, // include h3 headings\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing HomeFeature Vue Component\nDESCRIPTION: A Vue component that renders feature items with icons and text content. Takes an icon prop and provides slots for title and description content.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/studio/index.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  defineProps({\n    icon: {\n      type: String,\n      default: 'i-ph-cursor-click',\n    },\n  })\n</script>\n\n<template>\n  <div class=\"flex items-start gap-3\">\n    <div class=\"flex items-center justify-center border rounded-lg p-1.5\">\n      <UIcon :name=\"icon\" />\n    </div>\n    <div class=\"flex flex-col\">\n      <h3 class=\"font-semibold\">\n        <slot name=\"title\" />\n      </h3>\n      <span>\n        <slot name=\"description\" />\n      </span>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query Plugin\nDESCRIPTION: Example of using the custom version plugin along with other query filters to fetch content\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/query.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst contents = await queryContent()\n  .where({ category: { $in: ['nature', 'people'] } })\n  .version('3.x')\n  .limit(10)\n  .find()\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the Content Wind theme, defining metadata like title, description, demo URL, and image paths.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/templates/content-wind.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: content-wind\nsubtitle: A minimal portfolio template\ntitle: Content Wind\nbaseDir: .\nbranch: main\ncategory: blog\ndemo: https://content-wind.nuxt.space\ndescription: A lightweight Nuxt theme to build your portfolio in minutes.\nlicenseType: free\nmainScreen: /templates/content-wind-main.webp\nname: content-wind\nowner: Atinux\nimage1: /templates/content-wind-1.webp\nimage2: /templates/content-wind-2.webp\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Compare Changes Link v2.4.0\nDESCRIPTION: Markdown link to compare changes between versions v2.3.0 and v2.4.0\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.3.0...v2.4.0)\n```\n\n----------------------------------------\n\nTITLE: Creating an H6 Heading with ProseH6 in Markdown\nDESCRIPTION: Shows how to create an H6 heading in markdown that will be rendered using the ProseH6 component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n###### H6 Heading\n```\n\n----------------------------------------\n\nTITLE: Registering Query Plugin in Nuxt Config\nDESCRIPTION: Configuration example showing how to register a custom query plugin in the Nuxt configuration file\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/query.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// file `nuxt.config.ts`\nimport { defineNuxtConfig } from 'nuxt3'\nimport { resolveModule } from '@nuxt/kit'\n\nexport default defineNuxtConfig({\n  content: {\n    query: {\n      plugins: [resolveModule('./plugin-version', { paths: __dirname })]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Front Matter in YAML\nDESCRIPTION: Defines page metadata using YAML front matter that specifies a title, boolean field, number field, and array field. This configuration will be processed by Nuxt Content to set up page properties.\nSOURCE: https://github.com/nuxt/content/blob/main/test/fixtures/basic/content/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Home page\nbooleanField: true\nnumberField: 1\narrayField:\n  - item1\n  - item2\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a List Item with ProseLi in Markdown\nDESCRIPTION: Shows how to create a list item in markdown that will be rendered using the ProseLi component.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/5.components/2.prose.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- List element\n```\n\n----------------------------------------\n\nTITLE: Example YAML Front Matter Structure\nDESCRIPTION: Demonstration of YAML front matter structure used in the documentation, showing metadata like name, title, description, date, and author information.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/changelog/yaml-json-form.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Visual YAML and JSON File Edition\ntitle: Visual YAML and JSON File Edition\ndescription: Edit YAML and JSON files with an automatically generated form.\ndate: 2024-10-28T01:00:00.000Z\nimage:\n  src: /docs/studio/json-yml-forms.png\nauthors:\n  - name: Baptiste Leproux\n    to: https://x.com/_larbish\n    avatar:\n      src: https://avatars.githubusercontent.com/u/7290030?v=4\ncategory: studio\n```\n\n----------------------------------------\n\nTITLE: Compare Changes Link v2.5.0\nDESCRIPTION: Markdown link to compare changes between versions v2.4.3 and v2.5.0\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.4.3...v2.5.0)\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Content\nDESCRIPTION: Basic markdown content defining the page heading. This represents the main content that will be rendered on the page.\nSOURCE: https://github.com/nuxt/content/blob/main/test/fixtures/basic/content/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Home page\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component for Nuxt Content Index Page\nDESCRIPTION: This code snippet defines a Vue component that likely serves as the layout or content for the index page of the Nuxt Content module documentation. It includes a placeholder slot for content to be inserted.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/remark-code-import.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  title: 'Index'\n})\n</script>\n\n<template>\n  <UPage>\n    <UPageContent>\n      <UPageSection>\n        <ContentDoc />\n      </UPageSection>\n    </UPageContent>\n  </UPage>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Content Plugin (TypeScript)\nDESCRIPTION: Demonstrates how to define a custom content plugin using defineContentPlugin. It includes options for specifying supported file extensions, parsing function, and transformation function.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/content.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineContentPlugin({\n  name: 'plugin-name',\n  extensions: ['.md'],\n  parse: async (id, content) => {},\n  transform: async content => {}\n})\n```\n\n----------------------------------------\n\nTITLE: Compare Changes Link v2.4.2\nDESCRIPTION: Markdown link to compare changes between versions v2.4.1 and v2.4.2\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.4.1...v2.4.2)\n```\n\n----------------------------------------\n\nTITLE: Referencing Nuxt Content Filter in Markdown\nDESCRIPTION: This snippet shows how to reference a Nuxt Content filter (`$contains`) within markdown content using inline code formatting.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/1.real-content/post.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`$contains`\n```\n\n----------------------------------------\n\nTITLE: Locating Nuxt Content SQLite Database\nDESCRIPTION: The file path where Nuxt Content stores its SQLite database.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/7.advanced/4.tools.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.data/content/contents.sqlite\n```\n\n----------------------------------------\n\nTITLE: Warning Block for Media Display\nDESCRIPTION: A warning about media display limitations\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/studio-v2.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n::warning\nMedias in the editor are not displayed until you set up the live preview (see section below).\n::\n```\n\n----------------------------------------\n\nTITLE: Inline TypeScript Variable Declaration\nDESCRIPTION: Simple example showing TypeScript variable declaration syntax\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/0.index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 1\n```\n\n----------------------------------------\n\nTITLE: Commit Hash References in Changelog\nDESCRIPTION: Git commit hash references for various bug fixes and changes made to the Nuxt Content module.\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **changelog:** image size ([7c8e950](https://github.com/nuxt/content/commit/7c8e950a3f78ad8ccaf578ac8d66cc165bb7a58d))\n* convert boolean value to number in query condition ([#2927](https://github.com/nuxt/content/issues/2927)) ([#3018](https://github.com/nuxt/content/issues/3018)) ([c11f90a](https://github.com/nuxt/content/commit/c11f90abe020e804de1620320e16d26c6b9dd5bb))\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Page with YAML Frontmatter in Nuxt Content\nDESCRIPTION: Minimal YAML frontmatter configuration for a Nuxt Content page that defines only the page title. This represents the most basic possible page structure in Nuxt Content.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/empty.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Empty Page\n---\n```\n\n----------------------------------------\n\nTITLE: Sample Front Matter Structure in Markdown\nDESCRIPTION: Example of front matter configuration showing metadata structure for a blog post including title, description, authors, and date.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/blog/visual-editor.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Behind the scenes of Nuxt Studio's visual editor\ndescription: Discover the inner workings of Nuxt Studio's visual editor and how it interprets the Markdown syntax and generate it back.\nimage:\n  src: /blog/visual-editor.webp\nauthors:\n  - name: Baptiste Leproux\n    avatar:\n      src: https://avatars.githubusercontent.com/u/7290030?v=4\n    to: https://x.com/_larbish\n    username: larbish\n  - name: Ferdinand Coumau\n    avatar:\n      src: https://avatars.githubusercontent.com/u/98885012?v=4\n    to: https://x.com/CoumauFerdinand\n    username: CoumauFerdinand\ndate: 2024-09-04T00:00:00.000Z\ncategory: studio\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Template Features Configuration in YAML\nDESCRIPTION: Feature list configuration defining the core capabilities of the Nuxt starter template, including architecture, Nuxt Studio integration, and deployment options.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/templates/minimal-starter.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures:\n  - label: Nuxt Architecture\n    content: Harness the full power of Nuxt 3 and its modules ecosystem.\n  - label: Nuxt Studio ready\n    content: Edit your theme content and appearance with live-preview within Nuxt Studio.\n  - label: Vue Components\n    content: Use built-in components (or your own) inside your content.\n  - label: Write Markdown\n    content: Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n  - label: Deploy anywhere\n    content: In one click from Studio or with zero config on Vercel or Netlify. Choose between static generation, on-demand rendering (Node) or edge-side rendering on CloudFlare workers.\n```\n\n----------------------------------------\n\nTITLE: Compare Changes Link v2.4.3\nDESCRIPTION: Markdown link to compare changes between versions v2.4.2 and v2.4.3\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[compare changes](https://github.com/nuxt/content/compare/v2.4.2...v2.4.3)\n```\n\n----------------------------------------\n\nTITLE: Version Release Headers\nDESCRIPTION: Version headers indicating major and minor releases of the Nuxt Content module with dates and version comparisons.\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.1](https://github.com/nuxt/content/compare/v3.0.0...v3.0.1) (2025-01-27)\n\n## [3.0.0](https://github.com/nuxt/content/compare/v3.0.0-alpha.9...v3.0.0) (2025-01-16)\n\n## [3.0.0-alpha.9](https://github.com/nuxt/content/compare/v3.0.0-alpha.8...v3.0.0-alpha.9) (2025-01-15)\n```\n\n----------------------------------------\n\nTITLE: Linking to GitHub Issues and Pull Requests in Nuxt Content\nDESCRIPTION: Markdown links to reference specific GitHub issues and pull requests in the Nuxt Content repository.\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[#2413](https://github.com/nuxt/content/pull/2413)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#2412](https://github.com/nuxt/content/pull/2412)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#2418](https://github.com/nuxt/content/pull/2418)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#2425](https://github.com/nuxt/content/pull/2425)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#2427](https://github.com/nuxt/content/pull/2427)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#2470](https://github.com/nuxt/content/pull/2470)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#2433](https://github.com/nuxt/content/pull/2433)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#2472](https://github.com/nuxt/content/pull/2472)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[#2474](https://github.com/nuxt/content/pull/2474)\n```\n\n----------------------------------------\n\nTITLE: Referencing Git Commit Hashes in Nuxt Content\nDESCRIPTION: Short Git commit hashes used to reference specific changes in the Nuxt Content repository.\nSOURCE: https://github.com/nuxt/content/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[d2bcf70f](https://github.com/nuxt/content/commit/d2bcf70f)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[7bf89960](https://github.com/nuxt/content/commit/7bf89960)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[f33f5a20](https://github.com/nuxt/content/commit/f33f5a20)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[7dcbf130](https://github.com/nuxt/content/commit/7dcbf130)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[3ec3de44](https://github.com/nuxt/content/commit/3ec3de44)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[1f06910c](https://github.com/nuxt/content/commit/1f06910c)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[746cfce8](https://github.com/nuxt/content/commit/746cfce8)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[1ce6953f](https://github.com/nuxt/content/commit/1ce6953f)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[6dcf4645](https://github.com/nuxt/content/commit/6dcf4645)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[dee73c67](https://github.com/nuxt/content/commit/dee73c67)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[6b94f131](https://github.com/nuxt/content/commit/6b94f131)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[6a56986c](https://github.com/nuxt/content/commit/6a56986c)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[8c442665](https://github.com/nuxt/content/commit/8c442665)\n```\n\n----------------------------------------\n\nTITLE: Displaying Tip in Markdown for Nuxt Content\nDESCRIPTION: This snippet demonstrates how to create a tip box in Markdown format, specifically for Nuxt Content. It uses custom syntax to define the tip block and includes a link to the official documentation.\nSOURCE: https://github.com/nuxt/content/blob/main/examples/i18n/content/en/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::tip\nCheckout [official docs][docs] to read more about Nuxt Content\n::\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Nuxt Content Home Page\nDESCRIPTION: This YAML front matter block defines the title of the page as 'Home'. It is used by Nuxt Content to set metadata for the page.\nSOURCE: https://github.com/nuxt/content/blob/main/playground/content/pages/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Home\n---\n```\n\n----------------------------------------\n\nTITLE: Server TypeScript Configuration\nDESCRIPTION: TSConfig setup for server-side implementation to avoid type errors.\nSOURCE: https://github.com/nuxt/content/blob/main/docs/content/docs/4.utils/2.query-collection-navigation.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n}\n```"
  }
]