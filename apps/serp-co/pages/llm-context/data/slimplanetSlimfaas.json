[
  {
    "owner": "slimplanet",
    "repo": "slimfaas",
    "content": "TITLE: Deploying SlimFaas on Kubernetes\nDESCRIPTION: This snippet demonstrates how to deploy SlimFaas and related services on a Kubernetes cluster, including deploying SlimFaas itself, exposing it as a NodePort service, deploying sample Fibonacci functions, and deploying a MySQL database. It uses `kubectl apply` to deploy YAML manifests.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/AxaFrance/slimfaas.git\ncd slimfaas/demo\n\n# Deploy SlimFaas (StatefulSet) and related ServiceAccount\nkubectl apply -f service-account-slimfaas.yml\nkubectl apply -f deployment-slimfaas.yml\n\n# Expose SlimFaas Service as NodePort or Ingress\nkubectl apply -f slimfaas-nodeport.yml\n# Alternatively:\n# kubectl apply -f slimfaas-ingress.yml\n\n# Deploy three sample Fibonacci functions\nkubectl apply -f deployment-functions.yml\n\n# Deploy MySQL (used by the Fibonacci functions)\nkubectl apply -f deployment-mysql.yml\n\n# (Optional) Run a single-page demo webapp on http://localhost:8000\ndocker run -d -p 8000:8000 --rm axaguildev/fibonacci-webapp:latest\n```\n\n----------------------------------------\n\nTITLE: Function Deployment Annotations Example - YAML\nDESCRIPTION: This YAML snippet provides an example of the essential annotations required in a Kubernetes Deployment or StatefulSet to enable SlimFaas auto-scaling and routing. It includes annotations for enabling the function, setting minimum replicas, initial replicas at start, inactivity timeout, and maximum parallel requests.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/functions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Example snippet from a Deployment\nmetadata:\n    annotations:\n        SlimFaas/Function: \"true\"\n        SlimFaas/ReplicasMin: \"0\"\n        SlimFaas/ReplicasAtStart: \"1\"\n        SlimFaas/TimeoutSecondBeforeSetReplicasMin: \"300\"\n        SlimFaas/NumberParallelRequest: \"10\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SlimFaas Jobs via ConfigMap\nDESCRIPTION: This snippet shows how to define SlimFaas jobs configuration using a Kubernetes ConfigMap. The configuration includes settings for the container image, resource requests and limits, dependencies, environment variables, backoff limit, visibility, parallelism, TTL, and restart policy. The ConfigMap is then referenced in the SlimFaas StatefulSet.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/jobs.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: slimfaas-demo\n  labels:\n    name: slimfaas\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: slimfaas-config\n  namespace: slimfaas-demo\ndata:\n  SLIMFAAS_JOBS_CONFIGURATION: |\n    {\n      \"Configurations\": {\n        \"fibonacci\": {\n          \"Image\": \"axaguildev/fibonacci-batch:latest\",\n          \"ImagesWhitelist\": [],\n          \"Resources\": {\n            \"Requests\": {\n              \"cpu\": \"400m\",\n              \"memory\": \"400Mi\"\n            },\n            \"Limits\": {\n              \"cpu\": \"400m\",\n              \"memory\": \"400Mi\"\n            }\n          },\n          \"DependsOn\": [\"fibonacci1\"],\n          \"Environments\": [],\n          \"BackoffLimit\": 1,\n          \"Visibility\": \"Public\",\n          \"NumberParallelJob\": 2,\n          \"TtlSecondsAfterFinished\": 36000,\n          \"RestartPolicy\": \"Never\"\n        }\n      }\n    }\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: slimfaas\n  namespace: slimfaas-demo\nspec:\n  replicas: 1\n  podManagementPolicy: Parallel\n  serviceName: slimfaas\n  selector:\n    matchLabels:\n      app: slimfaas\n  template:\n    metadata:\n      labels:\n        app: slimfaas\n    spec:\n      volumes:\n        - name: slimfaas-volume\n          emptyDir:\n            sizeLimit: 10Mi\n      serviceAccountName: slimfaas\n      containers:\n        - name: slimfaas\n          image: axaguildev/slimfaas:latest\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: 5000\n            initialDelaySeconds: 3\n            periodSeconds: 10\n            timeoutSeconds: 8\n            terminationGracePeriodSeconds: 30\n          env:\n            - name: SLIMFAAS_JOBS_CONFIGURATION\n              valueFrom:\n                configMapKeyRef:\n                  name: slimfaas-config\n                  key: SLIMFAAS_JOBS_CONFIGURATION\n          resources:\n            limits:\n              memory: \"76Mi\"\n              cpu: \"400m\"\n            requests:\n              memory: \"76Mi\"\n              cpu: \"250m\"\n          ports:\n            - containerPort: 5000\n              name: slimfaas\n            - containerPort: 3262\n              name: slimdata\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: slimfaas\n  namespace: slimfaas-demo\nspec:\n  selector:\n    app: slimfaas\n  ports:\n    - name: \"http\"\n      port: 5000\n    - name: \"slimdata\"\n      port: 3262\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events using Annotations in SlimFaas (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to subscribe a function to events using the `SlimFaas/SubscribeEvents` annotation in the function's deployment metadata. It shows how to subscribe to public, private, and default visibility events.  The annotation value is a comma-separated list of event names, prefixed with `Public:` or `Private:` to indicate visibility. Omitting the prefix defaults to `SlimFaas/DefaultVisibility`.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/events.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    SlimFaas/SubscribeEvents: \"Public:my-event1,Private:my-event2,my-event3\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service Account YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes ServiceAccount, Role, and RoleBinding for SlimFaas. It grants SlimFaas permissions to manage Deployments and StatefulSets within a specific namespace (`slimfaas-demo`). It also allows SlimFaas to view endpoints and pods for monitoring and auto-scaling purposes. This configuration is crucial for enabling SlimFaas to dynamically manage function replicas.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/get-started.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n    name: slimfaas\n    namespace: slimfaas-demo\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n    name: deployment-statefulset-manager\n    namespace: slimfaas-demo\nrules:\n    # On ajoute ici le droit de lister/voir les pods dans ce namespace\n    - apiGroups: [\"\"]\n      resources: [\"pods\"]\n      verbs: [\"get\", \"list\", \"watch\"]\n    - apiGroups: [\"apps\"]\n      resources: [\"deployments\", \"statefulsets\"]\n      verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n    - apiGroups: [\"apps\"]\n      resources: [\"deployments/scale\", \"statefulsets/scale\"]\n      verbs: [\"get\", \"update\", \"patch\"]\n    - apiGroups: [\"batch\"]\n      resources: [\"jobs\"]\n      verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n    name: slimfaas-deployment-statefulset-manager\n    namespace: slimfaas-demo\nsubjects:\n    - kind: ServiceAccount\n      name: slimfaas\n      namespace: slimfaas-demo\nroleRef:\n    kind: Role\n    name: deployment-statefulset-manager\n    apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n    name: endpoints-viewer\n    namespace: slimfaas-demo\nrules:\n    - apiGroups: [\"\"]\n      resources: [\"endpoints\"]\n      verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n    name: slimfaas-endpoints-viewer\n    namespace: slimfaas-demo\nsubjects:\n    - kind: ServiceAccount\n      name: slimfaas\n      namespace: slimfaas-demo\nroleRef:\n    kind: Role\n    name: endpoints-viewer\n    apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Visibility - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the visibility of a SlimFaas function using annotations. It showcases setting a default visibility and defining visibility based on path prefixes. It also shows how to configure function trust.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/functions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n    annotations:\n        SlimFaas/DefaultVisibility: \"Private\"\n        # or define paths:\n        SlimFaas/PathsStartWithVisibility: \"Private:/mypath,Public:/otherpath\"\n        SlimFaas/DefaultTrusted: \"Trusted\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n    annotations:\n        SlimFaas/DefaultTrusted: \"Trusted\" # Trusted or Untrusted\n```\n\n----------------------------------------\n\nTITLE: SlimFaas Function Deployment YAML\nDESCRIPTION: This YAML snippet shows an example of annotations for a function deployment in Kubernetes. These annotations are used by SlimFaas to manage the function, including enabling autoscaling (`SlimFaas/Function: \"true\"`), setting minimum replicas (`SlimFaas/ReplicasMin: \"0\"`), and defining dependencies (`SlimFaas/DependsOn: \"mysql,fibonacci2\"`). These annotations configure how SlimFaas scales and routes requests to the function.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/get-started.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fibonacci1\n  namespace: slimfaas-demo\nspec:\n  template:\n    metadata:\n      annotations:\n        SlimFaas/Function: \"true\" # Enable SlimFaas\n        SlimFaas/ReplicasMin: \"0\"\n        SlimFaas/ReplicasAtStart: \"1\"\n        SlimFaas/TimeoutSecondBeforeSetReplicasMin: \"300\"\n        SlimFaas/NumberParallelRequest: \"10\"\n        SlimFaas/DependsOn: \"mysql,fibonacci2\"\n        SlimFaas/SubscribeEvents: \"Public:my-event-name1,Private:my-event-name2,my-event-name3\"\n        SlimFaas/DefaultVisibility: \"Public\"\n        # ...\n    spec:\n      containers:\n        - name: fibonacci1\n          image: axaguildev/fibonacci:latest\n          # ...\n```\n\n----------------------------------------\n\nTITLE: Defining Job Configuration in JSON\nDESCRIPTION: This snippet illustrates the JSON structure for defining a SlimFaas job configuration. It includes settings like the container image, resource requirements, dependencies, environment variables, backoff limit, visibility, number of parallel jobs, TTL after completion, and restart policy.  It resides within the SLIMFAAS_JOBS_CONFIGURATION ConfigMap.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/jobs.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Configurations\": {\n    \"fibonacci\": {\n      \"Image\": \"axaguildev/fibonacci-batch:latest\",\n      \"ImagesWhitelist\": [],\n      \"Resources\": {\n        \"Requests\": {\n          \"cpu\": \"400m\",\n          \"memory\": \"400Mi\"\n        },\n        \"Limits\": {\n          \"cpu\": \"400m\",\n          \"memory\": \"400Mi\"\n        }\n      },\n      \"DependsOn\": [\"fibonacci1\"],\n      \"Environments\": [],\n      \"BackoffLimit\": 1,\n      \"Visibility\": \"Public\",\n      \"NumberParallelJob\": 2,\n      \"TtlSecondsAfterFinished\": 36000,\n      \"RestartPolicy\": \"Never\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Dependency Configuration - YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify dependencies for a SlimFaas function using the `DependsOn` annotation.  The function will wait for the listed deployments/statefulsets to be in a ready state before scaling up.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/functions.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n    annotations:\n        SlimFaas/Function: \"true\"\n        SlimFaas/ReplicasMin: \"0\"\n        SlimFaas/ReplicasAtStart: \"1\"\n        # ...\n        SlimFaas/DependsOn: \"mysql,fibonacci2\"\n```\n\n----------------------------------------\n\nTITLE: Deploying SlimFaas with Docker Compose\nDESCRIPTION: This snippet shows how to deploy SlimFaas using Docker Compose.  It assumes Docker Compose is installed and configured. After cloning the repository and navigating to the `slimfaas` directory, it uses `docker-compose up` to start the SlimFaas services.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/get-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/AxaFrance/slimfaas.git\ncd slimfaas\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Function Scheduling Configuration - YAML\nDESCRIPTION: This YAML snippet shows how to configure a SlimFaas function's wake-up time and scale-down timeout based on a schedule using the `SlimFaas/Schedule` annotation. It uses a JSON configuration embedded in the annotation value to specify the timezone, wake-up times, and scale-down timeouts at different times of the day.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/functions.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  annotations:\n    SlimFaas/Schedule: >\n      {\n        \"TimeZoneID\": \"Europe/Paris\",\n        \"Default\": {\n          \"WakeUp\": [\"07:00\"],\n          \"ScaleDownTimeout\": [\n            { \"Time\": \"07:00\", \"Value\": 20 },\n            { \"Time\": \"21:00\", \"Value\": 10 }\n          ]\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Invoking SlimFaas Jobs via HTTP\nDESCRIPTION: This snippet demonstrates how to trigger a SlimFaas job using an HTTP POST request.  The URL structure includes the SlimFaas endpoint, the 'job' path, the job name as defined in the configuration, and an optional path segment. The job name must match a key under the \"Configurations\" section in the configuration.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/jobs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:30021/job/fibonacci/run-something\n```\n\n----------------------------------------\n\nTITLE: Function Configuration - JSON\nDESCRIPTION: This JSON snippet shows how to configure timeouts and retry policies for synchronous, asynchronous, and publish functions using the `SlimFaas/Configuration` annotation. It defines the HTTP timeout, retry intervals, and HTTP status codes to retry.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/functions.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DefaultSync\": {\n    \"HttpTimeout\": 120,\n    \"TimeoutRetries\": [2,4,8],\n    \"HttpStatusRetries\": [500,502,503]\n  },\n  \"DefaultAsync\": {\n    \"HttpTimeout\": 120,\n    \"TimeoutRetries\": [2,4,8],\n    \"HttpStatusRetries\": [500,502,503]\n  },\n  \"DefaultPublish\": {\n    \"HttpTimeout\": 120,\n    \"TimeoutRetries\": [2,4,8],\n    \"HttpStatusRetries\": [500,502,503]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Event via HTTP Request (Bash)\nDESCRIPTION: This bash command demonstrates how to publish an event using the `curl` command. It sends a POST request to the `/publish-event/<eventName>/<path>` endpoint with a JSON payload.  Replace `<slimfaas>` with the actual SlimFaas endpoint, `<eventName>` with the event name, and `<path>` with the desired path on the receiving function replicas.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/events.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" \\\n     -d '{\"data\":\"hello\"}' \\\n     http://localhost:30021/publish-event/my-event-name/hello\n```\n\n----------------------------------------\n\nTITLE: SlimFaas StatefulSet YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes StatefulSet for SlimFaas. It specifies the desired number of replicas, the selector for identifying SlimFaas pods, and the container image to use (`docker.io/axaguildev/slimfaas:latest`). It also defines the ports that SlimFaas listens on (5000 for the main SlimFaas port and 3262 for the SlimData port).\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/get-started.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: slimfaas\n  namespace: slimfaas-demo\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: slimfaas\n  serviceName: slimfaas\n  template:\n    metadata:\n      labels:\n        app: slimfaas\n    spec:\n      # ...\n      containers:\n        - name: slimfaas\n          image: docker.io/axaguildev/slimfaas:latest\n          ports:\n            - containerPort: 5000    # SlimFaas main port\n            - containerPort: 3262    # SlimData port\n          #env:\n          #  - name: SLIMDATA_CONFIGURATION # To start slimfaas with only 1 replica\n          #    value: |\n          #        {\"coldStart\":\"true\"}\n          # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Job Visibility to Public\nDESCRIPTION: This snippet shows how to set the visibility of a SlimFaas job to \"Public\". Public jobs can be triggered from anywhere, inside or outside the cluster. This configuration is part of the job definition within the SLIMFAAS_JOBS_CONFIGURATION ConfigMap.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/jobs.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Visibility\": \"Public\"\n}\n```\n\n----------------------------------------\n\nTITLE: React.js PlanetSaver Component\nDESCRIPTION: This React component wraps your application and checks if the SlimFaas environment is ready before rendering the children. It uses the SlimFaasPlanetSaver to monitor the environment and displays a loading state until the backend is ready. It requires React and @axa-fr/slimfaas-planet-saver as dependencies.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/planet-saver.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect, useRef } from 'react';\nimport { SlimFaasPlanetSaver } from '@axa-fr/slimfaas-planet-saver';\n\nconst PlanetSaver = ({ children, baseUrl, fetch, noActivityTimeout=60000, behavior={} }) => {\n    const [isFirstStart, setIsFirstStart] = useState(true);\n    const environmentStarterRef = useRef(null);\n\n    useEffect(() => {\n        if (!baseUrl) return;\n\n        if (environmentStarterRef.current) return;\n\n        const instance = new SlimFaasPlanetSaver(baseUrl, {\n            interval: 2000,\n            fetch,\n            behavior,\n            updateCallback: (data) => {\n                // Filter only the items that block the UI (WakeUp+BlockUI)\n                const blockingItems = data.filter(\n                    (item) => instance.getBehavior(item.Name) === 'WakeUp+BlockUI'\n                );\n\n                // If all blocking items are ready, set isFirstStart to false\n                const allBlockingReady = blockingItems.every(\n                    (item) => item.NumberReady >= 1\n                );\n                if (allBlockingReady && isFirstStart) {\n                    setIsFirstStart(false);\n                }\n            },\n            errorCallback: (error) => {\n                console.error('Error detected :', error);\n            },\n            overlayStartingMessage: '🌳 Starting the environment.... 🌳',\n            overlayNoActivityMessage: 'Waiting activity to start environment...',\n            overlayErrorMessage: 'An error occurred when starting environment. Please contact an administrator.',\n            overlaySecondaryMessage: 'Startup should be fast, but if no machines are available it can take several minutes.',\n            overlayLoadingIcon: '🌍',\n            overlayErrorSecondaryMessage: 'If the error persists, please contact an administrator.',\n            noActivityTimeout\n        });\n\n        environmentStarterRef.current = instance;\n\n        // Initialiser les effets de bord\n        instance.initialize();\n        instance.startPolling();\n\n        return () => {\n            instance.cleanup();\n            environmentStarterRef.current = null;\n        };\n    }, [baseUrl]);\n\n    if (isFirstStart) {\n        return null;\n    }\n\n    return <>{children}</>;\n};\n\nexport default PlanetSaver;\n```\n\n----------------------------------------\n\nTITLE: PlanetSaver Usage with React\nDESCRIPTION: This code demonstrates how to use the PlanetSaver component within a React application. It defines a behavior object that maps service names to their desired behavior (e.g., 'WakeUp', 'WakeUp+BlockUI', 'None'). The PlanetSaver component is then rendered, wrapping an App component, with the baseUrl, fetch, and behavior props passed in.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/src/SlimFaasPlanetSaver/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst behavior: {\n    \"api-speech-to-text\": \"WakeUp\",\n    \"heavy-pdf-service\": \"WakeUp+BlockUI\",\n    \"deprecated-service\": \"None\"\n}\n\n<PlanetSaver baseUrl=\"http://slimfaas.mycompany.com\" fetch={window.fetch} behavior={behavior}>\n  <App />\n</PlanetSaver>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage with Vanilla JS\nDESCRIPTION: This JavaScript code demonstrates the basic usage of the SlimFaasPlanetSaver class, including initialization, configuration of callbacks, and starting/stopping the polling mechanism.  It initializes a SlimFaasPlanetSaver instance with a base URL, configures callbacks for status updates and errors, and starts periodic polling to monitor environment readiness.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/planet-saver.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SlimFaasPlanetSaver } from '@axa-fr/slimfaas-planet-saver';\n\nconst planetSaver = new SlimFaasPlanetSaver('http://slimfaas.mycompany.com', {\n    interval: 2000,\n    fetch: window.fetch, // or any fetch polyfill\n    updateCallback: (data) => {\n        console.log('Update callback data:', data);\n    },\n    errorCallback: (error) => {\n        console.error('Error detected:', error);\n    },\n    overlayStartingMessage: '🌳 Starting the environment... 🌳',\n    overlayNoActivityMessage: 'No activity yet — environment is sleeping.',\n    overlayErrorMessage: 'An error occurred while starting the environment. Please try again later.',\n});\n\n// Initialize and begin polling\nplanetSaver.initialize();\nplanetSaver.startPolling();\n\n// When you no longer need it:\nplanetSaver.cleanup();\n```\n\n----------------------------------------\n\nTITLE: PlanetSaver React Component Example\nDESCRIPTION: This React component, PlanetSaver, uses the SlimFaasPlanetSaver library to manage the user experience while backend services are starting. It takes a baseUrl, fetch function, noActivityTimeout, and behavior object as props to configure the SlimFaasPlanetSaver instance. It also uses React hooks like useState, useEffect, and useRef to manage the component's state and lifecycle. The component initializes and starts polling the SlimFaas API, displaying a loading overlay until the specified services are ready.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/src/SlimFaasPlanetSaver/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect, useRef } from 'react';\nimport { SlimFaasPlanetSaver } from '@axa-fr/slimfaas-planet-saver';\n\nconst PlanetSaver = ({ children, baseUrl, fetch, noActivityTimeout=60000, behavior={} }) => {\n    const [isFirstStart, setIsFirstStart] = useState(true);\n    const environmentStarterRef = useRef(null);\n\n    useEffect(() => {\n        if (!baseUrl) return;\n\n        if (environmentStarterRef.current) return;\n\n        const instance = new SlimFaasPlanetSaver(baseUrl, {\n            interval: 2000,\n            fetch,\n            behavior,\n            updateCallback: (data) => {\n                // Filter only the items that block the UI (WakeUp+BlockUI)\n                const blockingItems = data.filter(\n                    (item) => instance.getBehavior(item.Name) === 'WakeUp+BlockUI'\n                );\n\n                // If all blocking items are ready, set isFirstStart to false\n                const allBlockingReady = blockingItems.every(\n                    (item) => item.NumberReady >= 1\n                );\n                if (allBlockingReady && isFirstStart) {\n                    setIsFirstStart(false);\n                }\n            },\n            errorCallback: (error) => {\n                console.error('Error detected :', error);\n            },\n            overlayStartingMessage: '🌳 Starting the environment.... 🌳',\n            overlayNoActivityMessage: 'Waiting activity to start environment...',\n            overlayErrorMessage: 'An error occurred when starting environment. Please contact an administrator.',\n            overlaySecondaryMessage: 'Startup should be fast, but if no machines are available it can take several minutes.',\n            overlayLoadingIcon: '🌍',\n            overlayErrorSecondaryMessage: 'If the error persists, please contact an administrator.',\n            noActivityTimeout\n        });\n\n        environmentStarterRef.current = instance;\n\n        // Initialiser les effets de bord\n        instance.initialize();\n        instance.startPolling();\n\n        return () => {\n            instance.cleanup();\n            environmentStarterRef.current = null;\n        };\n    }, [baseUrl]);\n\n    if (isFirstStart) {\n        return null;\n    }\n\n    return <>{children}</>;\n};\n\nexport default PlanetSaver;\n```\n\n----------------------------------------\n\nTITLE: Publishing Event Payload Format (JSON)\nDESCRIPTION: This JSON snippet represents the expected body format when publishing an event to SlimFaas. The event data should be placed within the `data` field.  The endpoint will return a `204 No Content` response upon successful publication.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/events.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": \"my-event-data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Functions Response Example - JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the response returned by the `/status-functions` endpoint. It provides details about registered functions, including the number of ready replicas, number of requested replicas, pod type, visibility, and name.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/functions.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n      \"NumberReady\": 1,\n      \"numberRequested\": 1,\n      \"PodType\": \"Deployment\",\n      \"Visibility\": \"Public\",\n      \"Name\": \"fibonacci1\"\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Running the SlimFaasPlanetSaver Demo\nDESCRIPTION: These commands clone the SlimFaas repository, navigate to the SlimFaasPlanetSaver directory, install the necessary dependencies, and start a local development server. This allows you to see SlimFaasPlanetSaver in action.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/src/SlimFaasPlanetSaver/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngit clone https://github.com/SlimPlanet/slimfaas.git\ncd slimfaas/src/SlimFaasPlanetSaver\nnpm i\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using the React PlanetSaver Component\nDESCRIPTION: This code shows how to use the PlanetSaver React component to wrap your application.  It sets the baseUrl, fetch, and behavior properties. The behavior prop allows you to define different behaviors for specific services.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/planet-saver.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst behavior: {\n    \"api-speech-to-text\": \"WakeUp\",\n    \"heavy-pdf-service\": \"WakeUp+BlockUI\",\n    \"deprecated-service\": \"None\"\n}\n\n<PlanetSaver baseUrl=\"http://slimfaas.mycompany.com\" fetch={window.fetch} behavior={behavior}>\n  <App />\n</PlanetSaver>\n```\n\n----------------------------------------\n\nTITLE: Installing @axa-fr/slimfaas-planet-saver\nDESCRIPTION: This command installs the @axa-fr/slimfaas-planet-saver package from npm. This package is required to use the SlimFaasPlanetSaver component in a Javascript project.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/src/SlimFaasPlanetSaver/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @axa-fr/slimfaas-planet-saver\n```\n\n----------------------------------------\n\nTITLE: Installing SlimFaas Planet Saver\nDESCRIPTION: This command installs the @axa-fr/slimfaas-planet-saver package using npm, allowing you to use it in your project.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/planet-saver.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @axa-fr/slimfaas-planet-saver\n```\n\n----------------------------------------\n\nTITLE: Example Function Status List\nDESCRIPTION: This JSON snippet provides an example of the output from the `/status-functions` endpoint of SlimFaas. It lists the status of several Fibonacci functions, including the number of ready replicas, the number of requested replicas, the pod type, the visibility, and the function name. This provides information about function health and availability.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/get-started.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"NumberReady\":1,\"numberRequested\":1,\"PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci1\"},\n  {\"NumberReady\":1,\"numberRequested\":1,\"PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci2\"},\n  {\"NumberReady\":1,\"numberRequested\":1,\"PodType\":\"Deployment\",\"Visibility\":\"Public\",\"Name\":\"fibonacci3\"},\n  {\"NumberReady\":2,\"numberRequested\":2,\"PodType\":\"Deployment\",\"Visibility\":\"Private\",\"Name\":\"fibonacci4\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Locally\nDESCRIPTION: These commands clone the SlimFaas repository, navigate to the SlimFaasPlanetSaver directory, install dependencies, and start the development server.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/documentation/planet-saver.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SlimPlanet/slimfaas.git\ncd slimfaas/src/SlimFaasPlanetSaver\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server (npm)\nDESCRIPTION: This command starts the Next.js development server using npm. It allows developers to preview and test their application locally during development.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/src/SlimFaasSite/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server (yarn)\nDESCRIPTION: This command starts the Next.js development server using yarn. It provides an alternative way to start the development server.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/src/SlimFaasSite/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server (pnpm)\nDESCRIPTION: This command starts the Next.js development server using pnpm. It's another package manager option for starting the development server.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/src/SlimFaasSite/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server (bun)\nDESCRIPTION: This command starts the Next.js development server using Bun. Bun is a new JavaScript runtime that can be used as an alternative to Node.js and other package managers.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/src/SlimFaasSite/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Cloning the SlimFaas repository\nDESCRIPTION: This command clones the SlimFaas repository from GitHub, allowing contributors to access the codebase and begin making changes. It requires Git to be installed on the user's machine.\nSOURCE: https://github.com/slimplanet/slimfaas/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/AxaFrance/SlimFaas.git\n```"
  }
]