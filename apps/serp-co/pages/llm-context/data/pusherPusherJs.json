[
  {
    "owner": "pusher",
    "repo": "pusher-js",
    "content": "TITLE: Initializing Pusher Channels Client in JavaScript\nDESCRIPTION: Shows how to initialize a Pusher Channels client instance with an app key and cluster configuration.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pusher = new Pusher(APP_KEY, {\n  cluster: APP_CLUSTER,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Pusher with Cluster Configuration in JavaScript\nDESCRIPTION: Creates a new Pusher instance with an app key and cluster configuration. This is the basic setup for connecting to Pusher Channels.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst pusher = new Pusher(APP_KEY, {\n  cluster: APP_CLUSTER,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pusher Channels Client in JavaScript\nDESCRIPTION: Demonstrates how to configure a Pusher Channels client with additional options, such as channel authorization endpoint.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pusher = new Pusher(APP_KEY, {\n  cluster: APP_CLUSTER,\n  channelAuthorization: {\n    endpoint: 'http://example.com/pusher/auth'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connection State Management\nDESCRIPTION: Handling connection state changes and binding to connection events in Pusher.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\npusher.connection.bind('state_change', function(states) {\n  // states = {previous: 'oldState', current: 'newState'}\n  $('div#status').text(\"Channels current state is \" + states.current);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\npusher.connection.bind('connected', callback);\n```\n\nLANGUAGE: javascript\nCODE:\n```\npusher.connection.bind('disconnected', callback);\n```\n\n----------------------------------------\n\nTITLE: Event Binding in Pusher\nDESCRIPTION: Examples of binding to events on channels, including handling message data and setting context.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.bind('new-message', function (data) {\n  console.log(data.message);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.bind('my-event', function () {\n  console.log(`hi ${this.name}`);\n}, { name: 'Pusher' });\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Public Channels in Pusher JavaScript\nDESCRIPTION: Shows how to subscribe to a public channel using the Pusher subscribe method.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = pusher.subscribe('my-channel');\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Private Channels in Pusher JavaScript\nDESCRIPTION: Demonstrates subscribing to a private channel in Pusher, which requires the 'private-' prefix.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = pusher.subscribe('private-my-channel');\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Encrypted Channels in Pusher JavaScript\nDESCRIPTION: Shows how to subscribe to an encrypted channel in Pusher, using the 'private-encrypted-' prefix.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = pusher.subscribe('private-encrypted-my-channel');\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Pusher Channels\nDESCRIPTION: Examples of unsubscribing from regular and private Pusher channels using the unsubscribe method.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\npusher.unsubscribe('my-channel');\n```\n\nLANGUAGE: javascript\nCODE:\n```\npusher.unsubscribe('private-my-channel');\n```\n\n----------------------------------------\n\nTITLE: Event Unbinding in Pusher\nDESCRIPTION: Various methods of unbinding event handlers from channels with different scoping options.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove just `handler` for the `new-comment` event\nchannel.unbind('new-comment', handler);\n\n// Remove all handlers for the `new-comment` event\nchannel.unbind('new-comment');\n\n// Remove `handler` for all events\nchannel.unbind(null, handler);\n\n// Remove all handlers for `context`\nchannel.unbind(null, null, context);\n\n// Remove all handlers on `channel`\nchannel.unbind();\n```\n\n----------------------------------------\n\nTITLE: Global Event Binding in Pusher\nDESCRIPTION: Implementation of global event binding and unbinding that works across all events on a channel.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.bind_global(function (event, data) {\n  console.log(`The event ${event} was triggered with data ${data}`);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// remove just `handler` from global bindings\nchannel.unbind_global(handler);\n\n// remove all global bindings\nchannel.unbind_global();\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Errors in Pusher JavaScript\nDESCRIPTION: Shows how to bind to the error event on the Pusher connection object to handle specific error cases, such as account limits being exceeded.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst pusher = new Pusher('app_key', { cluster: APP_CLUSTER });\npusher.connection.bind( 'error', function( err ) {\n  if( err.data.code === 4004 ) {\n    log('Over limit!');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing All Subscribed Channels in Pusher JavaScript\nDESCRIPTION: Shows how to iterate over all subscribed channels using the Pusher allChannels method.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\npusher.allChannels().forEach(channel => console.log(channel.name));\n```\n\n----------------------------------------\n\nTITLE: Accessing Channels by Name in Pusher JavaScript\nDESCRIPTION: Demonstrates how to access a specific channel by name using the Pusher channel method.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = pusher.channel('private-my-channel');\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Pusher in JavaScript\nDESCRIPTION: Demonstrates how to disconnect from the Pusher service using the disconnect method.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npusher.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Configuring Pusher with WebSocket Transport in JavaScript\nDESCRIPTION: Initializes Pusher with only WebSocket transport enabled. This configuration restricts the connection to use only WebSockets.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pusher = new Pusher(APP_KEY, {\n  cluster: APP_CLUSTER,\n  enabledTransports: ['ws']\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pusher with Secure WebSocket Transport in JavaScript\nDESCRIPTION: Sets up Pusher to use only secure WebSockets (WSS) by enabling WebSocket transport and forcing TLS.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst pusher = new Pusher(APP_KEY, {\n  cluster: APP_CLUSTER,\n  enabledTransports: ['ws'],\n  forceTLS: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pusher with Disabled Transports in JavaScript\nDESCRIPTION: Demonstrates how to disable specific transports in Pusher configuration. This example disables the SockJS transport.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst pusher = new Pusher(APP_KEY, {\n  cluster: APP_CLUSTER,\n  disabledTransports: ['sockjs']\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pusher with Enabled and Disabled Transports in JavaScript\nDESCRIPTION: Shows how to combine enabled and disabled transports in Pusher configuration, effectively allowing only WebSockets.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst pusher = new Pusher(APP_KEY, {\n  cluster: APP_CLUSTER,\n  enabledTransports: ['ws', 'xhr_streaming'],\n  disabledTransports: ['xhr_streaming']\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Handler for Pusher in JavaScript\nDESCRIPTION: Demonstrates how to set a custom log handler for Pusher-js, overriding the default logging behavior.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nPusher.log = (msg) => {\n  console.log(msg);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Pusher Channels with Yarn in JavaScript\nDESCRIPTION: Demonstrates how to install the Pusher Channels library using Yarn and import it in a JavaScript project. Also shows how to import the version with encryption support.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add pusher-js\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Pusher from 'pusher-js';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Pusher from 'pusher-js/with-encryption';\n```\n\n----------------------------------------\n\nTITLE: Installing Pusher Channels with CDN in HTML\nDESCRIPTION: Shows how to include the Pusher Channels library in an HTML file using a CDN link. Provides options for both standard and encryption-enabled versions.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://js.pusher.com/7.0/pusher.min.js\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://js.pusher.com/7.0/pusher-with-encryption.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing Pusher Channels in Web Workers\nDESCRIPTION: Demonstrates how to import the Pusher Channels library in a Web Worker context, including options for encryption support.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimportScripts('https://js.pusher.com/7.0/pusher.worker.min.js');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimportScripts('https://js.pusher.com/7.0/pusher-with-encryption.worker.min.js');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Pusher from 'pusher-js/worker'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Pusher from 'pusher-js/worker/with-encryption'\n```\n\n----------------------------------------\n\nTITLE: Using channel.members.me for local presence user in Pusher.js\nDESCRIPTION: Code example showing how to get the ID and info for the local presence user using channel.members.me. This was introduced in version 1.12.0.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.members.me\n```\n\n----------------------------------------\n\nTITLE: Triggering client events in Pusher.js\nDESCRIPTION: Example demonstrating how to trigger client events with custom data using the channel.trigger method. This feature was introduced in version 1.8.0.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.trigger('client-myeventname', {\n  some: 'data'\n})\n```\n\n----------------------------------------\n\nTITLE: Handling socket presence interface in Pusher.js\nDESCRIPTION: Example showing how to use the subscription_succeeded event with the presence channel members iterator object. This updated API was introduced in version 1.8.0.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npresence_channel.bind('pusher:subscription_succeeded', function(members) {\n members.each(function(member) {\n   console.log(member.id, member.info)\n })\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Pusher with Encryption in JavaScript\nDESCRIPTION: Creates a new Pusher instance with encryption enabled. This configuration ensures the connection uses SSL for security. Available from version 1.7.0.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pusher = new Pusher('your-key', {\n  encrypted: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONp Transport for Channel Authorization in JavaScript\nDESCRIPTION: Sets the channel authorization transport to use JSONp, enabling cross-domain authorization for channels. This is useful for embedded widgets that need to authorize with a different domain.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPusher.channel_auth_transport = 'jsonp';\n```\n\n----------------------------------------\n\nTITLE: Server-side JSONp Authentication Response in Ruby\nDESCRIPTION: Ruby code example for handling JSONp authentication requests from Pusher clients. It authenticates a user for a presence channel and wraps the response in the provided callback function.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nauth = Pusher[channel_name].authenticate(params[:socket_id], {\n  :user_id => current_user.id,\n  :user_info => {:name => current_user.name}\n})\n\nrender :text => params[:callback] + \"(\" + JSON.generate(auth) + \");\"\n```\n\n----------------------------------------\n\nTITLE: Channel-specific Event Binding in JavaScript\nDESCRIPTION: Demonstrates how to bind an event listener to a specific channel using the channel() method. This approach allows for better organization of event handlers when working with multiple channels.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = new Pusher(\"API_KEY\", \"my-channel\")\nserver.channel(\"my-channel\").bind(\"my-event\", function(data) {\n  // do something\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Channel Subscription in JavaScript\nDESCRIPTION: Shows how to subscribe to multiple channels and unsubscribe from channels using the Pusher client. This functionality was introduced in version 1.2.1.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = new Pusher(\"API_KEY\", \"my-channel\")\nserver.subscribe(\"another-channel\")\nserver.unsubscribe(\"my-channel\")\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands\nDESCRIPTION: Commands for setting up the development environment and installing dependencies.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/README.md#2025-04-18_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Example Unit Test Inclusion Pattern in Node.js\nDESCRIPTION: Shows how the core_with_runtime directory needs to be included in unit test entry points like unit/index.node.js after the specific runtime directory is loaded first.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/spec/javascripts/unit/core_with_runtime/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIn order for this to work, this directory `core_with_runtime` need to be included in `unit/index.node.js` and similar files after the proper runtime directory is included (ex. `unit/node`)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Channel Initialization in JavaScript\nDESCRIPTION: Demonstrates a deprecated method of initializing Pusher with a channel name as the second parameter. This approach no longer works from version 1.7.0.\nSOURCE: https://github.com/pusher/pusher-js/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar pusher = new Pusher('your-key', 'channel-name') # DOES NOT WORK\n```"
  }
]