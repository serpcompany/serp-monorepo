[
  {
    "owner": "vikparuchuri",
    "repo": "marker",
    "content": "TITLE: Creating and Manipulating Python Dictionaries\nDESCRIPTION: This snippet demonstrates how to create an empty dictionary, add key-value pairs, and perform basic operations like checking for keys and getting values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_137\n\nLANGUAGE: Python\nCODE:\n```\n>>> eng2sp = dict()\n>>> print eng2sp\n{}\n>>> eng2sp['one'] = 'uno'\n>>> print eng2sp\n{'one': 'uno'}\n>>> eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}\n>>> print eng2sp\n{'one': 'uno', 'three': 'tres', 'two': 'dos'}\n>>> print eng2sp['two']\n'dos'\n>>> len(eng2sp)\n3\n>>> 'one' in eng2sp\nTrue\n>>> 'uno' in eng2sp\nFalse\n>>> vals = eng2sp.values()\n>>> 'uno' in vals\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary's get Method in Python\nDESCRIPTION: Example demonstrating the dictionary get method, which retrieves a value for a given key and returns a default value if the key doesn't exist. Shows usage with both existing and non-existing keys.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_140\n\nLANGUAGE: python\nCODE:\n```\n>>> h = histogram('a')\n>>> print h\n{'a': 1}\n>>> h.get('a', 0)\n1\n>>> h.get('b', 0)\n0\n```\n\n----------------------------------------\n\nTITLE: List Methods in Python\nDESCRIPTION: Shows usage of common list methods like append(), extend(), and sort() for modifying lists.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_121\n\nLANGUAGE: Python\nCODE:\n```\n>>> t = ['a', 'b', 'c']\n>>> t.append('d')\n>>> print t\n['a', 'b', 'c', 'd']\n\n>>> t1 = ['a', 'b', 'c']\n>>> t2 = ['d', 'e']\n>>> t1.extend(t2)\n>>> print t1\n['a', 'b', 'c', 'd', 'e']\n\n>>> t = ['d', 'c', 'e', 'b', 'a']\n>>> t.sort()\n>>> print t\n['a', 'b', 'c', 'd', 'e']\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in Python\nDESCRIPTION: Shows how to create variables and assign values to them in Python. This example creates three variables: a string, an integer, and a floating-point number.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> message = 'And now for something completely different'\n>>> n = 17\n>>> pi = 3.1415926535897932\n```\n\n----------------------------------------\n\nTITLE: Implementing HashMap in Python\nDESCRIPTION: A full hashtable implementation that uses BetterMap and includes resizing functionality. It maintains constant-time performance by resizing the underlying BetterMap when necessary.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_293\n\nLANGUAGE: Python\nCODE:\n```\nclass HashMap(object):\n    def __init__(self):\n        self.maps = BetterMap(2)\n        self.num = 0\n    def get(self, k):\n        return self.maps.get(k)\n    def add(self, k, v):\n        if self.num == len(self.maps.maps):\n            self.resize()\n        self.maps.add(k, v)\n        self.num += 1\n    def resize(self):\n        new_maps = BetterMap(self.num * 2)\n        for m in self.maps.maps:\n            for k, v in m.items:\n                new_maps.add(k, v)\n        self.maps = new_maps\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Functions in Python\nDESCRIPTION: Shows how to use Python's built-in type conversion functions int(), float(), and str() to convert values between different data types.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> int('32')\n32\n>>> int('Hello')\nValueError: invalid literal for int(): Hello\n>>> int(3.99999)\n3\n>>> int(-2.3)\n-2\n>>> float(32)\n32.0\n>>> float('3.14159')\n3.14159\n>>> str(32)\n'32'\n>>> str(3.14159)\n'3.14159'\n```\n\n----------------------------------------\n\nTITLE: Inverting a Dictionary in Python\nDESCRIPTION: A function that inverts a dictionary, creating a new dictionary where values from the original become keys, and keys become values in a list. This handles cases where multiple keys may have the same value in the original dictionary.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_145\n\nLANGUAGE: python\nCODE:\n```\ndef invert_dict(d):\n    inverse = dict()\n    for key in d:\n        val = d[key]\n        if val not in inverse:\n            inverse[val] = [key]\n        else:\n            inverse[val].append(key)\n    return inverse\n```\n\n----------------------------------------\n\nTITLE: Implementing Memoization with Fibonacci Function in Python\nDESCRIPTION: This snippet demonstrates a memoized version of the Fibonacci function that stores previously computed values in a dictionary to avoid redundant calculations, significantly improving performance for large inputs.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_148\n\nLANGUAGE: python\nCODE:\n```\nknown = {0:0, 1:1}\ndef fibonacci(n):\n    if n in known:\n        return known[n]\n    res = fibonacci(n-1) + fibonacci(n-2)\n    known[n] = res\n    return res\n```\n\n----------------------------------------\n\nTITLE: Basic Python list operations and creation\nDESCRIPTION: Examples of creating and printing lists in Python, showing different types of elements including strings, numbers, nested lists, and empty lists.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_116\n\nLANGUAGE: python\nCODE:\n```\n>>> cheeses = ['Cheddar', 'Edam', 'Gouda']\n>>> numbers = [17, 123]\n>>> empty = []\n>>> print cheeses, numbers, empty\n['Cheddar', 'Edam', 'Gouda'] [17, 123] []\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in Python\nDESCRIPTION: This snippet demonstrates two ways of importing modules in Python: importing the entire module and importing specific objects from a module. It shows how to access module contents using dot notation and direct access.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> import math\n>>> print math\n<module 'math' (built-in)>\n>>> print math.pi\n3.14159265359\n\n>>> from math import pi\n>>> print pi\n3.14159265359\n\n>>> from math import *\n>>> cos(pi)\n-1.0\n```\n\n----------------------------------------\n\nTITLE: Complete Program with Multiple Function Definitions\nDESCRIPTION: This snippet shows a complete program with two function definitions (print_lyrics and repeat_lyrics) and a function call to demonstrate proper function organization.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef print_lyrics():\n    print \"I'm a lumberjack, and I'm okay.\"\n    print \"I sleep all night and I work all day.\"\ndef repeat_lyrics():\n    print_lyrics()\n    print_lyrics()\n```\n\nLANGUAGE: python\nCODE:\n```\nrepeat_lyrics()\n```\n\n----------------------------------------\n\nTITLE: Building Word Histogram from File in Python\nDESCRIPTION: This snippet reads a file and builds a histogram of words. It processes each line, removes punctuation, converts to lowercase, and counts word occurrences.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_176\n\nLANGUAGE: Python\nCODE:\n```\nimport string\ndef process_file(filename):\n    hist = dict()\n    fp = open(filename)\n    for line in fp:\n        process_line(line, hist)\n    return hist\ndef process_line(line, hist):\n    line = line.replace('-', ' ')\n    for word in line.split():\n        word = word.strip(string.punctuation + string.whitespace)\n        word = word.lower()\n        hist[word] = hist.get(word, 0) + 1\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Tuples in Python\nDESCRIPTION: Examples of creating tuples with parentheses, accessing elements with indexing, and demonstrating tuple immutability. Shows how to create single-element tuples and empty tuples using the tuple() function.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_159\n\nLANGUAGE: python\nCODE:\n```\n>>> t = ('a', 'b', 'c', 'd', 'e')\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> t1 = 'a',\n>>> type(t1)\n<type 'tuple'>\nA value in parentheses is not a tuple:\n>>> t2 = ('a')\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> type(t2)\n<type 'str'>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> t = tuple()\n>>> print t\n()\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> t = tuple('lupins')\n>>> print t\n('l', 'u', 'p', 'i', 'n', 's')\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> t = ('a', 'b', 'c', 'd', 'e')\n>>> print t[0]\n'a'\n```\n\n----------------------------------------\n\nTITLE: Checking Data Types in Python\nDESCRIPTION: Demonstrates how to use the type() function to check the data type of different values in Python. Shows that strings are of type 'str', integers are of type 'int', and floating-point numbers are of type 'float'.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> type('Hello, World!')\n<type 'str'>\n>>> type(17)\n<type 'int'>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reverse Lookup in a Dictionary in Python\nDESCRIPTION: A function that performs a reverse lookup in a dictionary, finding a key that maps to a given value. If no key is found, it raises a ValueError exception. This demonstrates the search pattern and exception handling.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_142\n\nLANGUAGE: python\nCODE:\n```\ndef reverse_lookup(d, v):\n    for k in d:\n        if d[k] == v:\n            return k\n    raise ValueError\n```\n\n----------------------------------------\n\nTITLE: Implementing Router for Switch Transformers in Mesh TensorFlow\nDESCRIPTION: This function implements the router mechanism for Switch Transformers. It handles token routing to experts, load balancing, and capacity management. The router produces dispatch and combine tensors for sending and receiving tokens from their highest probability expert.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nimport mesh_tensorflow as mtf\n\ndef router(inputs, capacity_factor):\n   \"\"\"Produce the combine and dispatch tensors used for sending and\n   receiving tokens from their highest probability expert. \"\"\"\n   # Core layout is split across num cores for all tensors and operations.\n   # inputs shape: [num cores, tokens per core, d model]\n   router_weights = mtf.Variable(shape=[d_model, num_experts])\n   # router logits shape: [num cores, tokens per core, num experts]\n   router_logits = mtf.einsum([inputs, router_weights], reduced_dim=d_model)\n   if is_training:\n      # Add noise for exploration across experts.\n      router_logits += mtf.random_uniform(shape=router_logits.shape, minval=1-eps, maxval=1+eps)\n   # Convert input to softmax operation from bfloat16 to float32 for stability.\n   router_logits = mtf.to_float32(router_logits)\n   # Probabilities for each token of what expert it should be sent to.\n   router_probs = mtf.softmax(router_logits, axis=-1)\n   # Get the top−1 expert for each token. expert gate is the top−1 probability\n   # from the router for each token. expert index is what expert each token\n   # is going to be routed to.\n   # expert gate shape: [num cores, tokens per core]\n   # expert index shape: [num cores, tokens per core]\n   expert_gate, expert_index = mtf.top_1(router_probs, reduced_dim=num_experts)\n   # expert mask shape: [num cores, tokens per core, num experts]\n   expert_mask = mtf.one_hot(expert_index, dimension=num_experts)\n   # Compute load balancing loss.\n   aux_loss = load_balance_loss(router_probs, expert_mask)\n   # Experts have a fixed capacity, ensure we do not exceed it. Construct\n   # the batch indices, to each expert, with position in expert\n   # make sure that not more that expert capacity examples can be routed to\n   # each expert.\n   position_in_expert = mtf.cumsum(expert_mask, dimension=tokens_per_core) * expert_mask\n   # Keep only tokens that fit within expert capacity.\n   expert_mask *= mtf.less(position_in_expert, expert_capacity)\n   expert_mask_flat = mtf.reduce_sum(expert_mask, reduced_dim=experts_dim)\n   # Mask out the experts that have overflowed the expert capacity.\n   expert_gate *= expert_mask_flat\n   # combine tensor used for combining expert outputs and scaling with router probability.\n   # combine tensor shape: [num cores, tokens per core, num experts, expert capacity]\n   combine_tensor = (\n      expert_gate * expert_mask_flat *\n      mtf.one_hot(expert_index, dimension=num_experts) *\n      mtf.one_hot(position_in_expert, dimension=expert_capacity))\n   # Cast back outputs to bfloat16 for the rest of the layer.\n   combine_tensor = mtf.to_bfloat16(combine_tensor)\n   # Create binary dispatch tensor that is 1 if the token gets routed to the corresponding expert.\n   # dispatch tensor shape: [num cores, tokens per core, num experts, expert capacity]\n   dispatch_tensor = mtf.cast(combine_tensor, tf.bool)\n   return dispatch_tensor, combine_tensor, aux_loss\n```\n\n----------------------------------------\n\nTITLE: Importing the Math Module in Python\nDESCRIPTION: This snippet demonstrates how to import Python's math module, which provides access to mathematical functions and constants.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> import math\n```\n\n----------------------------------------\n\nTITLE: Tuple Assignment in Python\nDESCRIPTION: Demonstrates how to use tuple assignment to swap variable values and unpack sequences into multiple variables. Shows how the right side can be any sequence type that gets unpacked into the variables on the left side.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_160\n\nLANGUAGE: python\nCODE:\n```\n>>> a, b = b, a\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> a, b = 1, 2, 3\nValueError: too many values to unpack\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> addr = 'monty@python.org'\n>>> uname, domain = addr.split('@')\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print uname\nmonty\n>>> print domain\npython.org\n```\n\n----------------------------------------\n\nTITLE: Using __name__ to create reusable modules in Python\nDESCRIPTION: Demonstrates the common idiom for making Python files work both as modules and as standalone scripts. The code checks the __name__ variable to determine if the file is being run directly or imported as a module.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_203\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    print linecount('wc.py')\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values Using Tuples in Python\nDESCRIPTION: Shows how to return multiple values from a function by returning a tuple. Demonstrates using the built-in divmod() function that returns a quotient and remainder as a tuple, and creating a custom function that returns multiple values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_161\n\nLANGUAGE: python\nCODE:\n```\n>>> t = divmod(7, 3)\n>>> print t\n(2, 1)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> quot, rem = divmod(7, 3)\n>>> print quot\n2\n>>> print rem\n1\n```\n\nLANGUAGE: python\nCODE:\n```\ndef min_max(t):\n    return min(t), max(t)\n```\n\n----------------------------------------\n\nTITLE: Simplifying Complex Expressions in Python\nDESCRIPTION: This snippet demonstrates how to break down a complex expression into multiple lines for better readability and debugging. It shows the transformation of a single line of code into three separate lines, making it easier to track intermediate values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_287\n\nLANGUAGE: Python\nCODE:\n```\nself.hands[i].addCard(self.hands[self.findNeighbor(i)].popCard())\n```\n\nLANGUAGE: Python\nCODE:\n```\nneighbor = self.findNeighbor(i)\npickedCard = self.hands[neighbor].popCard()\nself.hands[i].addCard(pickedCard)\n```\n\n----------------------------------------\n\nTITLE: Using Math Functions with Dot Notation in Python\nDESCRIPTION: This snippet demonstrates accessing math module functions using dot notation to calculate logarithms and trigonometric values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> ratio = signal_power / noise_power\n>>> decibels = 10 * math.log10(ratio)\n>>> radians = 0.7\n>>> height = math.sin(radians)\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram from a List\nDESCRIPTION: Example of creating a histogram (frequency dictionary) from a list of values, showing the frequency count of each unique element in the list.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_175\n\nLANGUAGE: python\nCODE:\n```\n>>> t = ['a', 'a', 'b']\n>>> hist = histogram(t)\n>>> print hist\n{'a': 2, 'b': 1}\n```\n\n----------------------------------------\n\nTITLE: Tracing Function Calls with Python Traceback\nDESCRIPTION: This snippet demonstrates a traceback in Python, which shows the sequence of function calls leading to an error. It's useful for debugging and understanding the flow of execution in a program.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nTraceback (innermost last):\n  File \"test.py\", line 13, in __main__\n    cat_twice(line1, line2)\n  File \"test.py\", line 5, in cat_twice\n    print_twice(cat)\n  File \"test.py\", line 9, in print_twice\n    print cat\nNameError: name 'cat' is not defined\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in Python\nDESCRIPTION: Demonstrates how to assign values to variables in Python, including different data types like integers, floats, and strings.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nwidth = 17\nheight = 12.0\ndelimiter = '.'\n```\n\n----------------------------------------\n\nTITLE: Implementing is_palindrome with dual indices in Python\nDESCRIPTION: A function to check if a word is a palindrome using a while loop with two indices that start at opposite ends and move toward the middle, comparing characters as they go.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_114\n\nLANGUAGE: python\nCODE:\n```\ndef is_palindrome(word):\n    i = 0\n    j = len(word)-1\n    while i<j:\n        if word[i] != word[j]:\n            return False\n        i = i+1\n        j = j-1\n    return True\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Assignment and Variable Updates in Python\nDESCRIPTION: This code snippet shows examples of multiple assignment and updating variables in Python. It illustrates how variables can be reassigned and updated based on their previous values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_85\n\nLANGUAGE: Python\nCODE:\n```\nbruce = 5\nprint bruce,\nbruce = 7\nprint bruce\n\na = 5\nb = a # a and b are now equal\na = 3 # a and b are no longer equal\n\nx = 0\nx = x+1\n```\n\n----------------------------------------\n\nTITLE: Opening and Writing to a Text File in Python\nDESCRIPTION: Demonstrates how to open a file in write mode, write strings to it, and close the file properly.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_183\n\nLANGUAGE: python\nCODE:\n```\n>>> fout = open('output.txt', 'w')\n>>> print fout\n<open file 'output.txt', mode 'w' at 0xb7eb2410>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Polymorphic Histogram Function in Python\nDESCRIPTION: This function creates a histogram (frequency count) and works with various sequence types like strings, lists, and tuples, demonstrating polymorphism.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_243\n\nLANGUAGE: Python\nCODE:\n```\ndef histogram(s):\n    d = dict()\n    for c in s:\n        if c not in d:\n             d[c] = 1\n        else:\n             d[c] = d[c]+1\n    return d\n```\n\n----------------------------------------\n\nTITLE: Using Fruitful Functions in Python\nDESCRIPTION: This snippet shows how to use fruitful functions (functions that return a value) in Python. It demonstrates assigning the return value to a variable and using it in expressions.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nx = math.cos(radians)\ngolden = (math.sqrt(5) + 1) / 2\n\n>>> math.sqrt(5)\n2.2360679774997898\n```\n\n----------------------------------------\n\nTITLE: Slicing Strings with Step Size in Python\nDESCRIPTION: Demonstrates how to use string slicing with a step size to extract every nth character from a string. Also shows how to reverse a string using slicing.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_104\n\nLANGUAGE: Python\nCODE:\n```\n>>> fruit = 'banana'\n>>> fruit[0:5:2]\n'bnn'\n```\n\n----------------------------------------\n\nTITLE: Converting User Input to Integer in Python\nDESCRIPTION: Example of getting a numeric input from the user with raw_input() and converting it to an integer using int(). This allows the program to perform numeric operations on the user input.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_64\n\nLANGUAGE: python\nCODE:\n```\n>>> prompt = 'What...is the airspeed velocity of an unladen swallow?\\n'\n>>> speed = raw_input(prompt)\nWhat...is the airspeed velocity of an unladen swallow?\n17\n>>> int(speed)\n17\n```\n\n----------------------------------------\n\nTITLE: Generating Random Floats Using random.random()\nDESCRIPTION: A loop that generates and prints 10 random floating-point numbers between 0.0 and 1.0 (inclusive of 0.0 but exclusive of 1.0) using Python's random.random() function.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_172\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(10):\n    x = random.random()\n    print x\n```\n\n----------------------------------------\n\nTITLE: Implementing a Histogram Function with Dictionaries in Python\nDESCRIPTION: A function that counts the frequency of each character in a string using a dictionary. It iterates through the string, creating a new key for each unique character or incrementing the count for existing characters.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_138\n\nLANGUAGE: python\nCODE:\n```\ndef histogram(s):\n    d = dict()\n    for c in s:\n        if c not in d:\n             d[c] = 1\n        else:\n             d[c] += 1\n    return d\n```\n\n----------------------------------------\n\nTITLE: Chained Conditional Statements in Python\nDESCRIPTION: Illustrates the use of chained conditionals with if, elif, and else statements for multiple condition handling.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nif x < y:\n    print 'x is less than y'\nelif x > y:\n    print 'x is greater than y'\nelse:\n    print 'x and y are equal'\n```\n\nLANGUAGE: python\nCODE:\n```\nif choice == 'a':\n    draw_a()\nelif choice == 'b':\n    draw_b()\nelif choice == 'c':\n    draw_c()\n```\n\n----------------------------------------\n\nTITLE: Traversing Lists in Python\nDESCRIPTION: Illustrates different ways to traverse a list, including using a for loop directly and using range() with len() to access indices.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_119\n\nLANGUAGE: Python\nCODE:\n```\nfor cheese in cheeses: print cheese\n\nfor i in range(len(numbers)):\n    numbers[i] = numbers[i] * 2\n\nfor x in []:\n    print 'This never happens.'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Factorial Function in Python using Recursion\nDESCRIPTION: A recursive implementation of the factorial function. It handles the base case (n=0) by returning 1, and recursively computes n! by multiplying n with the factorial of (n-1).\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_80\n\nLANGUAGE: python\nCODE:\n```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        recurse = factorial(n-1)\n        result = n * recurse\n        return result\n```\n\n----------------------------------------\n\nTITLE: Using a For Loop to Print 'Hello!' in Python\nDESCRIPTION: This example demonstrates a simple use of a for loop in Python to print 'Hello!' four times.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nfor i in range(4):\n    print 'Hello!'\n```\n\n----------------------------------------\n\nTITLE: Importing Python's Random Module\nDESCRIPTION: Demonstrates how to import the random module in Python, which provides functions for generating pseudorandom numbers.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_171\n\nLANGUAGE: python\nCODE:\n```\nimport random\n```\n\n----------------------------------------\n\nTITLE: List Modification vs Creation Operations in Python\nDESCRIPTION: Demonstrates the difference between operations that modify a list in-place (like append) and operations that create new lists (like +).\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_134\n\nLANGUAGE: python\nCODE:\n```\n>>> t1 = [1, 2]\n>>> t2 = t1.append(3)\n>>> print t1\n[1, 2, 3]\n>>> print t2\nNone\n>>> t3 = t1 + [4]\n>>> print t3\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Exception Handling for File Operations in Python\nDESCRIPTION: This snippet shows how to use a try-except block to catch and handle exceptions when performing file operations.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_193\n\nLANGUAGE: Python\nCODE:\n```\ntry:\n    fin = open('bad_file')\n    for line in fin:\n        print line\n    fin.close()\nexcept:\n    print 'Something went wrong.'\n```\n\n----------------------------------------\n\nTITLE: Defining a Time Class in Python\nDESCRIPTION: Code defining a Time class that represents the time of day with hour, minute, and second attributes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_220\n\nLANGUAGE: python\nCODE:\n```\nclass Time(object):\n    \"\"\"Represents the time of day.\n    attributes: hour, minute, second\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local Variable Scope in Python\nDESCRIPTION: This snippet shows that variables defined within a function are local and cannot be accessed outside the function. Attempting to print the local variable 'cat' outside its function results in a NameError.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> print cat\nNameError: name 'cat' is not defined\n```\n\n----------------------------------------\n\nTITLE: String Traversal with While Loop (Python)\nDESCRIPTION: Demonstrates how to traverse a string character by character using a while loop.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_92\n\nLANGUAGE: Python\nCODE:\n```\nindex = 0\nwhile index < len(fruit):\n    letter = fruit[index]\n    print letter\n    index = index + 1\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers with random.randint()\nDESCRIPTION: Examples of using random.randint() to generate random integers within a specified range (inclusive of both the low and high bounds).\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_173\n\nLANGUAGE: python\nCODE:\n```\n>>> random.randint(5, 10)\n5\n>>> random.randint(5, 10)\n9\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionary from Tuples\nDESCRIPTION: Demonstrates how to create a dictionary from a list of tuples and using zip with dict constructor.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_168\n\nLANGUAGE: python\nCODE:\n```\n>>> t = [('a', 0), ('c', 2), ('b', 1)]\n>>> d = dict(t)\n>>> print d\n{'a': 0, 'c': 2, 'b': 1}\n```\n\n----------------------------------------\n\nTITLE: Deleting Elements from Lists in Python\nDESCRIPTION: Demonstrates various methods to remove elements from a list, including pop(), del, and remove().\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_125\n\nLANGUAGE: Python\nCODE:\n```\n>>> t = ['a', 'b', 'c']\n>>> x = t.pop(1)\n>>> print t\n['a', 'c']\n>>> print x\nb\n\n>>> t = ['a', 'b', 'c']\n>>> del t[1]\n>>> print t\n['a', 'c']\n\n>>> t = ['a', 'b', 'c']\n>>> t.remove('b')\n>>> print t\n['a', 'c']\n\n>>> t = ['a', 'b', 'c', 'd', 'e', 'f']\n>>> del t[1:5]\n>>> print t\n['a', 'f']\n```\n\n----------------------------------------\n\nTITLE: Debugging Function for Printing Object Attributes in Python\nDESCRIPTION: This utility function prints all attributes and their values for a given object, useful for debugging purposes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_244\n\nLANGUAGE: Python\nCODE:\n```\ndef print_attributes(obj):\n    for attr in obj.__dict__:\n        print attr, getattr(obj, attr)\n```\n\n----------------------------------------\n\nTITLE: Debugging Object Attributes in Python\nDESCRIPTION: Code examples demonstrating how to handle AttributeError, check object types, and verify attribute existence in Python objects.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_218\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Point()\n>>> print p.z\nAttributeError: Point instance has no attribute 'z'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> type(p)\n<type '__main__.Point'>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> hasattr(p, 'x')\nTrue\n>>> hasattr(p, 'z')\nFalse\n```\n\n----------------------------------------\n\nTITLE: String Slicing (Python)\nDESCRIPTION: Explains how to use string slicing to extract portions of a string. Shows various slicing operations including omitting indices.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_95\n\nLANGUAGE: Python\nCODE:\n```\n>>> s = 'Monty Python'\n>>> print s[0:5]\nMonty\n>>> print s[6:12]\nPython\n>>> fruit = 'banana'\n>>> fruit[:3]\n'ban'\n>>> fruit[3:]\n'ana'\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Elements with random.choice()\nDESCRIPTION: Demonstrates how to use random.choice() to select a random element from a sequence, such as a list, with each element having equal probability of being chosen.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_174\n\nLANGUAGE: python\nCODE:\n```\n>>> t = [1, 2, 3]\n>>> random.choice(t)\n2\n>>> random.choice(t)\n3\n```\n\n----------------------------------------\n\nTITLE: Aliasing with Lists in Python\nDESCRIPTION: Shows how assignment creates references to the same list object, demonstrating that changes to one variable affect the other due to aliasing.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_131\n\nLANGUAGE: python\nCODE:\n```\n>>> a = [1, 2, 3]\n>>> b = a\n>>> b is a\nTrue\n```\n\n----------------------------------------\n\nTITLE: Object Serialization with Pickle in Python\nDESCRIPTION: This snippet shows how to use the pickle module to serialize and deserialize Python objects for storage or transmission.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_195\n\nLANGUAGE: Python\nCODE:\n```\n>>> import pickle\n>>> t = [1, 2, 3]\n>>> pickle.dumps(t)\n'(lp0\\nI1\\naI2\\naI3\\na.'\n>>> t1 = [1, 2, 3]\n>>> s = pickle.dumps(t1)\n>>> t2 = pickle.loads(s)\n>>> print t2\n[1, 2, 3]\n>>> t1 == t2\nTrue\n>>> t1 is t2\nFalse\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Void Functions in Python\nDESCRIPTION: This snippet illustrates the behavior of void functions in Python, which perform actions but don't return a value. It shows that assigning the result of a void function to a variable results in None.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> result = print_twice('Bing')\nBing\nBing\n>>> print result\nNone\n\n>>> print type(None)\n<type 'NoneType'>\n```\n\n----------------------------------------\n\nTITLE: Zipping Sequences in Python\nDESCRIPTION: Demonstrates how to use the zip function to combine a string and list into tuples. Shows basic zip functionality with simple sequences.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_163\n\nLANGUAGE: python\nCODE:\n```\n>>> s = 'abc'\n>>> t = [0, 1, 2]\n>>> zip(s, t)\n[('a', 0), ('b', 1), ('c', 2)]\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello, World!' in Python 2\nDESCRIPTION: Demonstrates how to print the classic 'Hello, World!' message using Python 2 syntax. This simple program displays the text on the screen.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint 'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Counting Total and Unique Words in Python\nDESCRIPTION: These functions count the total number of words and the number of unique words in a histogram.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_177\n\nLANGUAGE: Python\nCODE:\n```\ndef total_words(hist):\n    return sum(hist.values())\n\ndef different_words(hist):\n    return len(hist)\n```\n\n----------------------------------------\n\nTITLE: Converting String to List in Python\nDESCRIPTION: Demonstrates how to convert a string to a list of characters using the list() function, showing how each character becomes an element in the list.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_126\n\nLANGUAGE: python\nCODE:\n```\n>>> s = 'spam'\n>>> t = list(s)\n>>> print t\n['s', 'p', 'a', 'm']\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recursive Countdown Function in Python\nDESCRIPTION: A recursive function that counts down from a given number to zero. It demonstrates the basic structure of recursion with a base case (n <= 0) and a recursive case that calls itself with a decremented value.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ndef countdown(n):\n    if n <= 0:\n        print 'Blastoff!'\n    else:\n        print n\n        countdown(n-1)\n```\n\n----------------------------------------\n\nTITLE: Defining Card Class with Basic Attributes\nDESCRIPTION: Implementation of a Card class representing a standard playing card with suit and rank attributes. The default card is the 2 of Clubs, with suits encoded as integers from 0-3 and ranks from 2-14.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_246\n\nLANGUAGE: python\nCODE:\n```\nclass Card(object):\n    \"\"\"Represents a standard playing card.\"\"\"\n    def __init__(self, suit=0, rank=2):\n        self.suit = suit\n        self.rank = rank\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unhashable List Keys in Python Dictionaries\nDESCRIPTION: Example showing that lists cannot be used as dictionary keys because they are unhashable (mutable). Attempting to use a list as a key results in a TypeError, as Python dictionaries require hashable keys.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_147\n\nLANGUAGE: python\nCODE:\n```\n>>> t = [1, 2, 3]\n>>> d = dict()\n>>> d[t] = 'oops'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nTypeError: list objects are unhashable\n```\n\n----------------------------------------\n\nTITLE: Reading Words from a File in Python\nDESCRIPTION: Demonstrates how to open and read a file containing words, line by line. Includes examples of using file objects and the readline() method.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_106\n\nLANGUAGE: Python\nCODE:\n```\n>>> fin = open('words.txt')\n>>> print fin\n<open file 'words.txt', mode 'r' at 0xb7f4b380>\n>>> fin.readline()\n'aa\\r\\n'\n>>> fin.readline()\n'aah\\r\\n'\n>>> line = fin.readline()\n>>> word = line.strip()\n>>> print word\n```\n\n----------------------------------------\n\nTITLE: Interactive Mode Calculation Example\nDESCRIPTION: Shows how to perform calculations in Python's interactive mode. The example converts miles to kilometers and displays the result immediately when an expression is evaluated.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> miles = 26.2\n>>> miles * 1.61\n42.182\n```\n\n----------------------------------------\n\nTITLE: Finding Method Definition Class in Python Inheritance\nDESCRIPTION: A utility function that identifies which class in an inheritance hierarchy provides the definition of a specified method, using the method resolution order (MRO).\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_258\n\nLANGUAGE: python\nCODE:\n```\ndef find_defining_class(obj, meth_name):\n    for ty in type(obj).mro():\n        if meth_name in ty.__dict__:\n            return ty\n```\n\n----------------------------------------\n\nTITLE: Defining a Hand Class in Python\nDESCRIPTION: This snippet demonstrates inheritance by defining a Hand class that inherits from Deck. It overrides the __init__ method to create an empty hand with a label.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_256\n\nLANGUAGE: python\nCODE:\n```\nclass Hand(Deck):\n    \"\"\"Represents a hand of playing cards.\"\"\"\n\n    def __init__(self, label=''):\n        self.cards = []\n        self.label = label\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello, World!' in Python 3\nDESCRIPTION: Shows the updated syntax for printing 'Hello, World!' in Python 3. This version uses parentheses to indicate that print is a function.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint('Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Recursive Directory Traversal in Python\nDESCRIPTION: This function demonstrates how to recursively walk through directories and print file names using os.path and os.listdir.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_192\n\nLANGUAGE: Python\nCODE:\n```\ndef walk(dirname):\n    for name in os.listdir(dirname):\n        path = os.path.join(dirname, name)\n```\n\nLANGUAGE: Python\nCODE:\n```\nif os.path.isfile(path):\n    print path\nelse:\n    walk(path)\n```\n\n----------------------------------------\n\nTITLE: List Slicing in Python\nDESCRIPTION: Demonstrates how to use slice notation to extract portions of a list or create a copy of the entire list.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_120\n\nLANGUAGE: Python\nCODE:\n```\n>>> t = ['a', 'b', 'c', 'd', 'e', 'f']\n>>> t[1:3]\n['b', 'c']\n>>> t[:4]\n['a', 'b', 'c', 'd']\n>>> t[3:]\n['d', 'e', 'f']\n>>> t[:]\n['a', 'b', 'c', 'd', 'e', 'f']\n\n>>> t[1:3] = ['x', 'y']\n>>> print t\n['a', 'x', 'y', 'd', 'e', 'f']\n```\n\n----------------------------------------\n\nTITLE: Using raw_input() for Basic User Input in Python 2\nDESCRIPTION: Basic example of using raw_input() in Python 2 to get keyboard input from the user. The program waits for user input and then stores and displays what was typed.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_62\n\nLANGUAGE: python\nCODE:\n```\n>>> text = raw_input()\nWhat are you waiting for?\n>>> print text\nWhat are you waiting for?\n```\n\n----------------------------------------\n\nTITLE: Converting Time Objects to Integers in Python\nDESCRIPTION: Function that converts a Time object to an integer representing the total number of seconds. This simplifies arithmetic operations on time values by converting from base-60 to base-10.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_225\n\nLANGUAGE: python\nCODE:\n```\ndef time_to_int(time):\n    minutes = time.hour * 60 + time.minute\n    seconds = minutes * 60 + time.second\n    return seconds\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Reverse Lookup in Python\nDESCRIPTION: Example showing the error that occurs when the reverse_lookup function fails to find a key for a given value. The function raises a ValueError, resulting in a traceback and error message.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_144\n\nLANGUAGE: python\nCODE:\n```\n>>> k = reverse_lookup(h, 3)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\n  File \"<stdin>\", line 5, in reverse_lookup\nValueError\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Strings for File Writing in Python\nDESCRIPTION: Demonstrates how to convert non-string values to strings before writing them to a file using the str() function.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_185\n\nLANGUAGE: python\nCODE:\n```\n>>> x = 52\n>>> fout.write(str(x))\n```\n\n----------------------------------------\n\nTITLE: Using urllib to download content from the web in Python\nDESCRIPTION: Shows how to use the urllib module to open a URL connection and read a web page line by line. This example downloads and prints the contents of a web page from thinkpython.com.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_206\n\nLANGUAGE: python\nCODE:\n```\nimport urllib\n```\n\n----------------------------------------\n\nTITLE: Checking Object Identity in Python\nDESCRIPTION: Demonstrates using the 'is' operator to check if two variables refer to the same object in memory, showing how strings with the same value share an object.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_130\n\nLANGUAGE: python\nCODE:\n```\n>>> a = 'banana'\n>>> b = 'banana'\n>>> a is b\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using enumerate with Sequences\nDESCRIPTION: Demonstrates how to use enumerate to iterate over both indices and elements of a sequence simultaneously.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_166\n\nLANGUAGE: python\nCODE:\n```\nfor index, element in enumerate('abc'):\n    print index, element\n```\n\n----------------------------------------\n\nTITLE: Using raw_input() with a Prompt in Python 2\nDESCRIPTION: Example of using raw_input() with a prompt string to guide the user on what input is expected. The \\n at the end creates a line break after the prompt.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_63\n\nLANGUAGE: python\nCODE:\n```\n>>> name = raw_input('What...is your name?\\n')\nWhat...is your name?\nArthur, King of the Britons!\n>>> print name\nArthur, King of the Britons!\n```\n\n----------------------------------------\n\nTITLE: Converting Integers to Time Objects in Python\nDESCRIPTION: Function that converts an integer representing seconds back into a Time object with appropriate hour, minute, and second values using the divmod function to handle base-60 conversions.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_226\n\nLANGUAGE: python\nCODE:\n```\ndef int_to_time(seconds):\n    time = Time()\n    minutes, time.second = divmod(seconds, 60)\n    time.hour, time.minute = divmod(minutes, 60)\n    return time\n```\n\n----------------------------------------\n\nTITLE: Length-Based Word Sorting Implementation\nDESCRIPTION: Implements a DSU (Decorate-Sort-Undecorate) pattern to sort words by length in descending order.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_169\n\nLANGUAGE: python\nCODE:\n```\ndef sort_by_length(words):\n    t = []\n    for word in words:\n       t.append((len(word), word))\n    t.sort(reverse=True)\n    res = []\n    for length, word in t:\n        res.append(word)\n    return res\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Statement in Python\nDESCRIPTION: Shows the basic structure of an if statement in Python with a simple condition check.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nif x > 0:\n    print 'x is positive'\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Initializing a Rectangle Object in Python\nDESCRIPTION: Shows how to create a Rectangle instance and set its attributes, including the embedded Point object for the corner.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_213\n\nLANGUAGE: python\nCODE:\n```\nbox = Rectangle()\nbox.width = 100.0\nbox.height = 200.0\nbox.corner = Point()\nbox.corner.x = 0.0\nbox.corner.y = 0.0\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Variable Assignment in Python\nDESCRIPTION: This example demonstrates a common mistake when working with global variables in Python: trying to modify a global variable without declaring it as global, which creates a local variable instead.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_150\n\nLANGUAGE: python\nCODE:\n```\nbeen_called = False\ndef example2():\n   been_called = True # WRONG\n```\n\n----------------------------------------\n\nTITLE: String Find Method Examples\nDESCRIPTION: Multiple examples showing the usage of string find() method with different parameters for searching substrings.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_100\n\nLANGUAGE: python\nCODE:\n```\n>>> word = 'banana'\n>>> index = word.find('a')\n>>> print index\n1\n>>> word.find('na')\n2\n>>> word.find('na', 3)\n4\n>>> name = 'bob'\n>>> name.find('b', 1, 2)\n-1\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pure Function to Add Time Objects in Python\nDESCRIPTION: A pure function that adds two Time objects by creating a new Time object with the sum of hours, minutes, and seconds. Includes an improved version that handles carry operations.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_222\n\nLANGUAGE: python\nCODE:\n```\ndef add_time(t1, t2):\n    sum = Time()\n    sum.hour = t1.hour + t2.hour\n    sum.minute = t1.minute + t2.minute\n    sum.second = t1.second + t2.second\n    return sum\n```\n\nLANGUAGE: python\nCODE:\n```\ndef add_time(t1, t2):\n    sum = Time()\n    sum.hour = t1.hour + t2.hour\n    sum.minute = t1.minute + t2.minute\n    sum.second = t1.second + t2.second\n\n    if sum.second >= 60:\n        sum.second -= 60\n        sum.minute += 1\n    if sum.minute >= 60:\n        sum.minute -= 60\n        sum.hour += 1\nreturn sum\n```\n\n----------------------------------------\n\nTITLE: Using a Histogram Function to Count Character Frequencies in Python\nDESCRIPTION: Example usage of the histogram function, demonstrating how it counts character frequencies in the string 'brontosaurus' and returns a dictionary with characters as keys and their frequencies as values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_139\n\nLANGUAGE: python\nCODE:\n```\n>>> h = histogram('brontosaurus')\n>>> print h\n{'a': 1, 'b': 1, 'o': 2, 'n': 1, 's': 2, 'r': 2, 'u': 2, 't': 1}\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings with Custom Delimiters in Python\nDESCRIPTION: Demonstrates using split() with a custom delimiter character to separate a string into a list of substrings.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_128\n\nLANGUAGE: python\nCODE:\n```\n>>> s = 'spam-spam-spam'\n>>> delimiter = '-'\n>>> s.split(delimiter)\n['spam', 'spam', 'spam']\n```\n\n----------------------------------------\n\nTITLE: Implementing Addition for Time Objects in Python\nDESCRIPTION: This snippet shows how to overload the + operator for a Time class using the __add__ special method. It allows adding two Time objects together.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_239\n\nLANGUAGE: Python\nCODE:\n```\n# inside class Time:\n    def __add__(self, other):\n        seconds = self.time_to_int() + other.time_to_int()\n        return int_to_time(seconds)\n```\n\n----------------------------------------\n\nTITLE: Adding Time Objects with Value Validation in Python\nDESCRIPTION: Function that adds two Time objects with explicit validation using a ValueError exception. This demonstrates defensive programming by checking inputs before processing them.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_229\n\nLANGUAGE: python\nCODE:\n```\ndef add_time(t1, t2):\n    if not valid_time(t1) or not valid_time(t2):\n        raise ValueError('invalid Time object in add_time')\n    seconds = time_to_int(t1) + time_to_int(t2)\n    return int_to_time(seconds)\n```\n\n----------------------------------------\n\nTITLE: Reading a web page line by line with urllib in Python\nDESCRIPTION: Demonstrates how to open a connection to a URL using urllib.urlopen(), then iterate through the content line by line, removing whitespace with strip(). This approach is useful for processing web content.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_207\n\nLANGUAGE: python\nCODE:\n```\nconn = urllib.urlopen('http://thinkpython.com/secret.html')\nfor line in conn:\n    print line.strip()\n```\n\n----------------------------------------\n\nTITLE: Character Counter Implementation in Python\nDESCRIPTION: Basic implementation of a character counter that counts occurrences of letter 'a' in a string using a for loop.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nword = 'banana'\ncount = 0\nfor letter in word:\n    if letter == 'a':\n        count = count + 1\nprint count\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Tkinter GUI Window in Python\nDESCRIPTION: This code demonstrates how to create a simple GUI window using the Gui module from Swampy. It imports the Gui module, creates a Gui object, sets a title, and starts the event loop.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_263\n\nLANGUAGE: python\nCODE:\n```\ng = Gui()\ng.title('Gui')\ng.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram and Printing Key-Value Pairs in Python\nDESCRIPTION: Example showing how to traverse a dictionary in a for loop to print each key and its corresponding value. The example creates a histogram of the word 'parrot' and then prints each character and its frequency.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_141\n\nLANGUAGE: python\nCODE:\n```\n>>> h = histogram('parrot')\n>>> print_hist(h)\na 1\np 1\nr 2\nt 1\no 1\n```\n\n----------------------------------------\n\nTITLE: Checking List Membership in Python\nDESCRIPTION: Shows how to use the 'in' operator to check if an element exists in a list.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_118\n\nLANGUAGE: Python\nCODE:\n```\n>>> cheeses = ['Cheddar', 'Edam', 'Gouda']\n>>> 'Edam' in cheeses\nTrue\n>>> 'Brie' in cheeses\nFalse\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Images with Tkinter in Python\nDESCRIPTION: This snippet demonstrates how to use Tkinter to create a GUI, load an image file, and display it on a canvas. It also shows how to handle different image formats using the Python Imaging Library (PIL).\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_285\n\nLANGUAGE: Python\nCODE:\n```\ng = Gui()\ncanvas = g.ca(width=300)\nphoto = PhotoImage(file='danger.gif')\ncanvas.image([0,0], image=photo)\ng.mainloop()\n```\n\nLANGUAGE: Python\nCODE:\n```\ng.la(image=photo)\ng.bu(image=photo)\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport Image as PIL\nimport ImageTk\n\nimage = PIL.open('allen.png')\nphoto2 = ImageTk.PhotoImage(image)\ng.la(image=photo2)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Deck of Cards in Python\nDESCRIPTION: This __init__ method for the Deck class creates a standard deck of 52 cards by iterating through suits and ranks, creating Card objects, and appending them to the cards list.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_252\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self):\n    self.cards = []\n    for suit in range(4):\n        for rank in range(1, 14):\n            card = Card(suit, rank)\n            self.cards.append(card)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recursive Print Function in Python\nDESCRIPTION: A recursive function that prints a string n times by using a base case (n <= 0) to stop recursion and a recursive case that prints the string once and then calls itself to print n-1 more times.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_60\n\nLANGUAGE: python\nCODE:\n```\ndef print_n(s, n):\n    if n <= 0:\n        return\n    print s\n    print_n(s, n-1)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Circle on Tkinter Canvas in Python\nDESCRIPTION: This code demonstrates how to draw a filled circle on a Tkinter Canvas using the circle method, specifying center coordinates, radius, and fill color.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_266\n\nLANGUAGE: python\nCODE:\n```\nitem = canvas.circle([0,0], 100, fill='red')\n```\n\n----------------------------------------\n\nTITLE: Using Non-Destructive List Function in Python\nDESCRIPTION: Demonstrates how a function that returns a new list preserves the original list, contrasting with functions that modify lists in-place.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_136\n\nLANGUAGE: python\nCODE:\n```\n>>> letters = ['a', 'b', 'c']\n>>> rest = tail(letters)\n>>> print rest\n['b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings into Words in Python\nDESCRIPTION: Shows how to use the split() method to break a string into a list of words using whitespace as the default delimiter.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_127\n\nLANGUAGE: python\nCODE:\n```\n>>> s = 'pining for the fjords'\n>>> t = s.split()\n>>> print t\n['pining', 'for', 'the', 'fjords']\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Comparison Method\nDESCRIPTION: Implementation of the __cmp__ method for Card class to enable comparison between cards based on suit first, then rank. This allows card objects to be sorted, with spades being the highest suit followed by hearts, diamonds, and clubs.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_250\n\nLANGUAGE: python\nCODE:\n```\n# inside class Card:\n    def __cmp__(self, other):\n        # check the suits\n        if self.suit > other.suit: return 1\n        if self.suit < other.suit: return -1\n        # suits are the same... check ranks\n        if self.rank > other.rank: return 1\n        if self.rank < other.rank: return -1\n        # ranks are the same... it's a tie\n        return 0\n```\n\n----------------------------------------\n\nTITLE: Debugging whitespace issues with repr() in Python\nDESCRIPTION: Shows how to use the repr() function to debug whitespace issues in strings. The repr() function makes invisible characters like tabs and newlines visible by showing their escape sequences.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_204\n\nLANGUAGE: python\nCODE:\n```\n>>> s = '1 2\\t 3\\n 4'\n>>> print s\n1 2 3\n 4\n```\n\n----------------------------------------\n\nTITLE: Newton's Method Square Root Calculator in Python\nDESCRIPTION: Implementation of Newton's method for calculating square roots through iterative improvement, including versions with exact and approximate equality checking.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nwhile True:\n    print x\n    y = (x + a/x) / 2\n    if y == x:\n        break\n    x = y\n```\n\nLANGUAGE: python\nCODE:\n```\nif abs(y-x) < epsilon:\n    break\n```\n\n----------------------------------------\n\nTITLE: Implementing Countdown Timer with While Loop in Python\nDESCRIPTION: A function that counts down from a given number n to 0, printing each number and 'Blastoff!' at the end using a while loop.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_86\n\nLANGUAGE: python\nCODE:\n```\ndef countdown(n):\n    while n > 0:\n        print n\n        n = n-1\n    print 'Blastoff!'\n```\n\n----------------------------------------\n\nTITLE: Drawing Shapes on Tkinter Canvas in Python\nDESCRIPTION: This snippet shows how to draw various shapes (rectangle, oval, line, polygon) on a Tkinter Canvas, specifying coordinates, fill colors, and outline properties.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_267\n\nLANGUAGE: python\nCODE:\n```\ncanvas.rectangle([[0, 0], [200, 100]],\n                 fill='blue', outline='orange', width=10)\n```\n\n----------------------------------------\n\nTITLE: Reduce Operation on Lists in Python\nDESCRIPTION: Demonstrates how to perform a reduce operation (summing elements) on a list using a loop and the built-in sum() function.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_122\n\nLANGUAGE: Python\nCODE:\n```\ndef add_all(t):\n    total = 0\n    for x in t:\n        total += x\n    return total\n\n>>> t = [1, 2, 3]\n>>> sum(t)\n6\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements in Python\nDESCRIPTION: Demonstrates how to access elements of a list using indexing. Lists are mutable, so elements can be reassigned using the same syntax.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_117\n\nLANGUAGE: Python\nCODE:\n```\n>>> print cheeses[0]\nCheddar\n\n>>> numbers = [17, 123]\n>>> numbers[1] = 5\n>>> print numbers\n[17, 5]\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Python\nDESCRIPTION: Demonstrates string concatenation using the + operator in Python. The example shows how to join two strings together.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfirst = 'throat'\nsecond = 'warbler'\nprint first + second\n```\n\n----------------------------------------\n\nTITLE: Writing Strings to a File in Python\nDESCRIPTION: Shows how to write multiple lines of text to an open file. The code demonstrates that write operations append to the current position in the file.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_184\n\nLANGUAGE: python\nCODE:\n```\n>>> line1 = \"This here's the wattle,\\n\" >>> fout.write(line1)\n\n>>> line2 = \"the emblem of our land.\\n\" >>> fout.write(line2)\n\n>>> fout.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Distance Function - Final Version\nDESCRIPTION: Complete implementation of the distance function using the Pythagorean theorem.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_75\n\nLANGUAGE: python\nCODE:\n```\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    dsquared = dx**2 + dy**2\n    result = math.sqrt(dsquared)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Event Handler for Canvas Mouse Click\nDESCRIPTION: Implements an event handler that creates a circle at the position where the user clicked on the canvas. Converts pixel coordinates to canvas coordinates and draws a red circle.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_274\n\nLANGUAGE: python\nCODE:\n```\ndef make_circle(event):\n    pos = ca.canvas_coords([event.x, event.y])\n    item = ca.circle(pos, 5, fill='red')\n```\n\n----------------------------------------\n\nTITLE: Shuffling a Deck of Cards in Python\nDESCRIPTION: This shuffle method uses the random.shuffle function to randomly reorder the cards in the deck. It requires importing the random module.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_255\n\nLANGUAGE: python\nCODE:\n```\ndef shuffle(self):\n    random.shuffle(self.cards)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a File in Python\nDESCRIPTION: Shows how to use a for loop to iterate through a file object, reading and processing each line. Demonstrates stripping whitespace from each line.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_107\n\nLANGUAGE: Python\nCODE:\n```\nfin = open('words.txt')\nfor line in fin:\n    word = line.strip()\n    print word\n```\n\n----------------------------------------\n\nTITLE: Implementing a Modifier Function to Increment Time in Python\nDESCRIPTION: A modifier function that adds a given number of seconds to a Time object by directly modifying the object's attributes and handling carry operations.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_224\n\nLANGUAGE: python\nCODE:\n```\ndef increment(time, seconds):\n    time.second += seconds\n    if time.second >= 60:\n        time.second -= 60\n        time.minute += 1\n    if time.minute >= 60:\n        time.minute -= 60\n        time.hour += 1\n```\n\n----------------------------------------\n\nTITLE: Implementing is_after Method\nDESCRIPTION: Method to compare two Time objects to check if one is after another.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_236\n\nLANGUAGE: python\nCODE:\n```\ndef is_after(self, other):\n    return self.time_to_int() > other.time_to_int()\n```\n\n----------------------------------------\n\nTITLE: Implementing Right-Side Addition for Time Objects in Python\nDESCRIPTION: This code implements the __radd__ method to handle cases where a Time object is on the right side of the + operator when adding with an integer.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_242\n\nLANGUAGE: Python\nCODE:\n```\n# inside class Time:\n\ndef __radd__(self, other):\n    return self.__add__(other)\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle Area - Concise Version\nDESCRIPTION: Simplified version of circle area function using direct function composition.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_77\n\nLANGUAGE: python\nCODE:\n```\ndef circle_area(xc, yc, xp, yp):\n    return area(distance(xc, yc, xp, yp))\n```\n\n----------------------------------------\n\nTITLE: Binding Return Key to Entry Widget\nDESCRIPTION: Creates a button and entry widget, binding the Return key to the make_text function. This allows users to either click the button or press Enter after typing to execute the same action.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_275\n\nLANGUAGE: python\nCODE:\n```\nbu = g.bu('Make text item:', make_text)\nen = g.en()\nen.bind('<Return>', make_text)\n```\n\n----------------------------------------\n\nTITLE: Using Overloaded Addition with Time Objects in Python\nDESCRIPTION: This example demonstrates how to use the overloaded + operator with Time objects, showing how Python invokes __add__ and __str__ methods behind the scenes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_240\n\nLANGUAGE: Python\nCODE:\n```\n>>> start = Time(9, 45)\n>>> duration = Time(1, 35)\n>>> print start + duration\n11:20:00\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with a Parameter in Python\nDESCRIPTION: This snippet demonstrates defining a function print_twice that takes a parameter named bruce and prints it twice, regardless of the value provided.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef print_twice(bruce):\n    print bruce\n    print bruce\n```\n\n----------------------------------------\n\nTITLE: Debugging Return Values in Python Functions\nDESCRIPTION: This snippet illustrates a technique for debugging return values in Python functions. It shows how to use a temporary variable to store the return value before actually returning it, allowing for inspection or logging of the value.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_289\n\nLANGUAGE: Python\nCODE:\n```\nreturn self.hands[i].removeMatches()\n```\n\nLANGUAGE: Python\nCODE:\n```\ncount = self.hands[i].removeMatches()\nreturn count\n```\n\n----------------------------------------\n\nTITLE: Dictionary Subtraction in Python\nDESCRIPTION: This function performs set subtraction on dictionaries, returning a new dictionary with keys from d1 that are not in d2.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_180\n\nLANGUAGE: Python\nCODE:\n```\ndef subtract(d1, d2):\n    res = dict()\n    for key in d1:\n        if key not in d2:\n            res[key] = None\n    return res\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Division Check - Concise\nDESCRIPTION: Simplified version of divisibility check function that directly returns the boolean expression.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_79\n\nLANGUAGE: python\nCODE:\n```\ndef is_divisible(x, y):\n    return x % y == 0\n```\n\n----------------------------------------\n\nTITLE: Converting print_time to Method\nDESCRIPTION: Transforming the print_time function into a class method within Time class.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_233\n\nLANGUAGE: python\nCODE:\n```\nclass Time(object):\n    def print_time(time):\n        print '%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second)\n```\n\n----------------------------------------\n\nTITLE: Modifying Mutable Global Variable Contents in Python\nDESCRIPTION: Example showing that elements of a mutable global variable (like a dictionary) can be modified without declaring the variable as global.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_155\n\nLANGUAGE: python\nCODE:\n```\nknown = {0:0, 1:1}\ndef example4():\n    known[2] = 1\n```\n\n----------------------------------------\n\nTITLE: Using Logical Operators to Simplify Conditionals in Python\nDESCRIPTION: Simplified version of the nested conditionals using a logical AND operator to combine two conditions into a single conditional statement.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nif 0 < x and x < 10:\n    print 'x is a positive single-digit number.'\n```\n\n----------------------------------------\n\nTITLE: Joining Lists into Strings in Python\nDESCRIPTION: Shows how to use the join() method to concatenate a list of strings into a single string with a specified delimiter between elements.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_129\n\nLANGUAGE: python\nCODE:\n```\n>>> t = ['pining', 'for', 'the', 'fjords']\n>>> delimiter = ' '\n>>> delimiter.join(t)\n'pining for the fjords'\n```\n\n----------------------------------------\n\nTITLE: Using invert_dict with a Histogram in Python\nDESCRIPTION: Example demonstrating the invert_dict function with a histogram. It inverts the character frequency dictionary to create a dictionary mapping from frequencies to lists of characters that occur with that frequency.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_146\n\nLANGUAGE: python\nCODE:\n```\n>>> hist = histogram('parrot')\n>>> print hist\n{'a': 1, 'p': 1, 'r': 2, 't': 1, 'o': 1}\n>>> inverse = invert_dict(hist)\n>>> print inverse\n{1: ['a', 'p', 't', 'o'], 2: ['r']}\n```\n\n----------------------------------------\n\nTITLE: Using os.popen to execute shell commands in Python\nDESCRIPTION: Demonstrates how to use os.popen to run the 'ls -l' command, read its output, and check its status. Despite being deprecated in favor of the subprocess module, os.popen provides a simpler interface for basic shell command execution.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_196\n\nLANGUAGE: python\nCODE:\n```\n>>> cmd = 'ls -l'\n>>> fp = os.popen(cmd)\n```\n\n----------------------------------------\n\nTITLE: Polygon Drawing Function\nDESCRIPTION: Generalized function for drawing regular polygons with specified number of sides and length. Uses angle calculations to determine turning angle.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ndef polygon(t, n, length):\n    angle = 360.0 / n\n    for i in range(n):\n        fd(t, length)\n        lt(t, angle)\n```\n\n----------------------------------------\n\nTITLE: Printing a Deck of Cards in Python\nDESCRIPTION: This __str__ method for the Deck class creates a string representation of all cards in the deck, joining them with newline characters for readability.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_253\n\nLANGUAGE: python\nCODE:\n```\ndef __str__(self):\n    res = []\n    for card in self.cards:\n        res.append(str(card))\n    return '\\n'.join(res)\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables for Flags in Python\nDESCRIPTION: Example showing how to use a global boolean variable as a flag to control program behavior, specifically to determine whether detailed output should be displayed.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_149\n\nLANGUAGE: python\nCODE:\n```\nverbose = True\ndef example1():\n    if verbose:\n        print 'Running example1'\n```\n\n----------------------------------------\n\nTITLE: Implementing is_abecedarian with a for loop in Python\nDESCRIPTION: A function to check if the letters in a word appear in alphabetical order using a for loop to iterate through characters and compare each with the previous one.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_111\n\nLANGUAGE: python\nCODE:\n```\ndef is_abecedarian(word):\n    previous = word[0]\n    for c in word:\n        if c < previous:\n            return False\n        previous = c\n    return True\n```\n\n----------------------------------------\n\nTITLE: Creating a Label-generating Button with Tkinter\nDESCRIPTION: This code shows how to define a callback function that creates a label and then assign that function to a button's command option. When the button is pressed, the function executes and a new label appears.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_264\n\nLANGUAGE: python\nCODE:\n```\ndef make_label():\n    g.la(text='Thank you.')\n```\n\n----------------------------------------\n\nTITLE: Sequence Matching Function Implementation\nDESCRIPTION: Defines a function that checks if two sequences have matching elements at any index using zip and iteration.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_165\n\nLANGUAGE: python\nCODE:\n```\ndef has_match(t1, t2):\n    for x, y in zip(t1, t2):\n        if x == y:\n            return True\n    return False\n```\n\n----------------------------------------\n\nTITLE: Polyline Base Function\nDESCRIPTION: Fundamental function for drawing multiple connected line segments with specified length and angle. Used as a building block for other shape functions.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ndef polyline(t, n, length, angle):\n    \"\"\"Draws n line segments with the given length and\n    angle (in degrees) between them. t is a turtle.\n    \"\"\"\n    for i in range(n):\n        fd(t, length)\n        lt(t, angle)\n```\n\n----------------------------------------\n\nTITLE: Defining a Rectangle Class in Python\nDESCRIPTION: Creates a Rectangle class with width, height, and corner attributes. The corner attribute is a Point object.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_212\n\nLANGUAGE: python\nCODE:\n```\nclass Rectangle(object):\n    \"\"\"Represents a rectangle.\n    attributes: width, height, corner.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing is_palindrome using problem recognition in Python\nDESCRIPTION: A concise implementation of is_palindrome that leverages problem recognition by using a previously-defined is_reverse function to check if a word equals its reverse.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_115\n\nLANGUAGE: python\nCODE:\n```\ndef is_palindrome(word):\n    return is_reverse(word, word)\n```\n\n----------------------------------------\n\nTITLE: Using Modulus Operator in Python\nDESCRIPTION: Demonstrates how to use the modulus operator (%) to find remainders when dividing numbers. Shows basic arithmetic operations with quotient and remainder calculation.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n>>> quotient = 7 / 3\n>>> print quotient\n2\n>>> remainder = 7 % 3\n>>> print remainder\n1\n```\n\n----------------------------------------\n\nTITLE: Implementing BetterMap in Python\nDESCRIPTION: An improved map implementation using multiple LinearMaps. It uses a hash function to distribute items across multiple lists, reducing the average search time.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_292\n\nLANGUAGE: Python\nCODE:\n```\nclass BetterMap(object):\n\n    def __init__(self, n=100):\n        self.maps = []\n        for i in range(n):\n            self.maps.append(LinearMap())\n    def find_map(self, k):\n        index = hash(k) % len(self.maps)\n        return self.maps[index]\n    def add(self, k, v):\n        m = self.find_map(k)\n        m.add(k, v)\n    def get(self, k):\n        m = self.find_map(k)\n        return m.get(k)\n```\n\n----------------------------------------\n\nTITLE: Checking for Lowercase Letters in Python\nDESCRIPTION: Contains multiple function implementations to check if a string contains any lowercase letters. Some implementations are incorrect and are meant to be analyzed for their actual behavior.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_105\n\nLANGUAGE: Python\nCODE:\n```\ndef any_lowercase1(s):\n    for c in s:\n        if c.islower():\n            return True\n        else:\n            return False\ndef any_lowercase2(s):\n    for c in s:\n        if 'c'.islower():\n            return 'True'\nelse:\n            return 'False'\ndef any_lowercase3(s):\n    for c in s:\n        flag = c.islower()\n    return flag\ndef any_lowercase4(s):\n    flag = False\n    for c in s:\n        flag = flag or c.islower()\n    return flag\ndef any_lowercase5(s):\n    for c in s:\n        if not c.islower():\n            return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: User Input Loop with Break Statement in Python\nDESCRIPTION: A while loop that continuously accepts user input until 'done' is entered, demonstrating the use of the break statement for loop control.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nwhile True:\n    line = raw_input('> ')\n    if line == 'done':\n        break\n    print line\n```\n\n----------------------------------------\n\nTITLE: Initializing TurtleWorld and Creating a Turtle in Python\nDESCRIPTION: This snippet demonstrates how to import the TurtleWorld module, create a TurtleWorld instance, and initialize a Turtle object named 'bob'.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nfrom swampy.TurtleWorld import *\nworld = TurtleWorld()\nbob = Turtle()\nprint bob\nwait_for_user()\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Tuples Using For Loop\nDESCRIPTION: Shows how to use tuple assignment in a for loop to traverse a list of tuples, printing each element.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_164\n\nLANGUAGE: python\nCODE:\n```\nt = [('a', 0), ('b', 1), ('c', 2)]\nfor letter, number in t:\n    print number, letter\n```\n\n----------------------------------------\n\nTITLE: Implementing a Prefix Shift Function in Python for Markov Analysis\nDESCRIPTION: A function that creates a new prefix tuple by removing the first word and adding a new word to the end. This is a key operation in Markov text generation when using tuples to represent prefixes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_182\n\nLANGUAGE: python\nCODE:\n```\ndef shift(prefix, word):\n    return prefix[1:] + (word,)\n```\n\n----------------------------------------\n\nTITLE: Correct Global Variable Declaration in Python\nDESCRIPTION: Proper way to modify a global variable within a function by using the 'global' keyword to declare that the variable refers to the global scope rather than creating a local variable.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_151\n\nLANGUAGE: python\nCODE:\n```\nbeen_called = False\ndef example2():\n    global been_called\n    been_called = True\n```\n\n----------------------------------------\n\nTITLE: Implementing is_abecedarian with recursion in Python\nDESCRIPTION: A recursive implementation of the is_abecedarian function that checks if a word's letters appear in alphabetical order by comparing adjacent characters and making recursive calls.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_112\n\nLANGUAGE: python\nCODE:\n```\ndef is_abecedarian(word):\n    if len(word) <= 1:\n        return True\n    if word[0] > word[1]:\n        return False\n    return is_abecedarian(word[1:])\n```\n\n----------------------------------------\n\nTITLE: Creating a simple line counting module in Python\nDESCRIPTION: Defines a function linecount() that counts the number of lines in a file. The module includes a self-test that prints the line count of its own file when run directly.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_199\n\nLANGUAGE: python\nCODE:\n```\ndef linecount(filename):\n    count = 0\n    for line in open(filename):\n        count += 1\n    return count\n\nprint linecount('wc.py')\n```\n\n----------------------------------------\n\nTITLE: Defining a Point Class in Python\nDESCRIPTION: Creates a basic Point class to represent a point in 2D space. The class is defined with a docstring explaining its purpose.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_208\n\nLANGUAGE: python\nCODE:\n```\nclass Point(object):\n    \"\"\"Represents a point in 2-D space.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary Items Method Usage\nDESCRIPTION: Shows how to use the dictionary items() method to get key-value pairs as tuples.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_167\n\nLANGUAGE: python\nCODE:\n```\n>>> d = {'a':0, 'b':1, 'c':2}\n>>> t = d.items()\n>>> print t\n[('a', 0), ('c', 2), ('b', 1)]\n```\n\n----------------------------------------\n\nTITLE: Implementing __init__ Method\nDESCRIPTION: Initialization method for Time class with optional parameters.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_237\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, hour=0, minute=0, second=0):\n    self.hour = hour\n    self.minute = minute\n    self.second = second\n```\n\n----------------------------------------\n\nTITLE: Checking for Exclusive Use of Specific Letters in Python\nDESCRIPTION: Implements a function that checks if a word contains only letters from a given set of available letters. Uses a for loop and membership testing.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_109\n\nLANGUAGE: Python\nCODE:\n```\ndef uses_only(word, available):\n    for letter in word:\n        if letter not in available:\n            return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Drawing Koch Curve in Python using Turtle Graphics\nDESCRIPTION: A recursive function that draws a pattern using turtle graphics. Takes a turtle object, length and recursion depth n as parameters. Uses recursive calls to create complex geometric patterns.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_69\n\nLANGUAGE: python\nCODE:\n```\ndef draw(t, length, n):\n    if n == 0:\n        return\n    angle = 50\n    fd(t, length*n)\n    lt(t, angle)\n    draw(t, length, n-1)\n    rt(t, 2*angle)\n    draw(t, length, n-1)\n    lt(t, angle)\n    bk(t, length*n)\n```\n\n----------------------------------------\n\nTITLE: Implementing is_abecedarian with a while loop in Python\nDESCRIPTION: A function to check if the letters in a word appear in alphabetical order using a while loop with indices to compare adjacent characters.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_113\n\nLANGUAGE: python\nCODE:\n```\ndef is_abecedarian(word):\n    i = 0\n    while i < len(word)-1:\n        if word[i+1] < word[i]:\n            return False\n        i = i+1\n    return True\n```\n\n----------------------------------------\n\nTITLE: String Traversal with For Loop (Python)\nDESCRIPTION: Shows an alternative way to traverse a string using a for loop, which is more concise than the while loop method.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_93\n\nLANGUAGE: Python\nCODE:\n```\nfor char in fruit:\n    print char\n```\n\n----------------------------------------\n\nTITLE: Shallow Copying Objects in Python\nDESCRIPTION: Demonstrates how to create a shallow copy of a Point object using the copy module.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_216\n\nLANGUAGE: python\nCODE:\n```\n>>> import copy\n>>> p2 = copy.copy(p1)\n```\n\n----------------------------------------\n\nTITLE: String Comparison with in Operator\nDESCRIPTION: Examples of using the 'in' operator for substring checking and implementing a function to find common letters.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_101\n\nLANGUAGE: python\nCODE:\n```\n>>> 'a' in 'banana'\nTrue\n>>> 'seed' in 'banana'\nFalse\n\ndef in_both(word1, word2):\n    for letter in word1:\n        if letter in word2:\n            print letter\n```\n\n----------------------------------------\n\nTITLE: Output of Recursive Countdown Function in Python\nDESCRIPTION: The output produced by calling the countdown(3) function, showing the sequence of numbers as the function recursively calls itself with decremented values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n3\n2\n1\nBlastoff!\n```\n\n----------------------------------------\n\nTITLE: Using len() Function with Strings (Python)\nDESCRIPTION: Shows how to use the built-in len() function to get the length of a string and access the last character.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_91\n\nLANGUAGE: Python\nCODE:\n```\n>>> fruit = 'banana'\n>>> len(fruit)\n6\n>>> last = fruit[len(fruit)-1]\n>>> print last\na\n```\n\n----------------------------------------\n\nTITLE: Function Composition with Math Expressions in Python\nDESCRIPTION: This snippet demonstrates function composition in Python, where expressions can be used as arguments to functions.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nx = math.sin(degrees / 360.0 * 2 * math.pi)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Function in Python\nDESCRIPTION: This snippet shows how to define a new function named print_lyrics that prints two lines of text when called.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef print_lyrics():\n    print \"I'm a lumberjack, and I'm okay.\"\n    print \"I sleep all night and I work all day.\"\n```\n\n----------------------------------------\n\nTITLE: Deep Copying Objects in Python\nDESCRIPTION: Shows how to create a deep copy of a Rectangle object, including its embedded Point object, using the copy module.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_217\n\nLANGUAGE: python\nCODE:\n```\n>>> box3 = copy.deepcopy(box)\n>>> box3 is box\nFalse\n>>> box3.corner is box.corner\nFalse\n```\n\n----------------------------------------\n\nTITLE: String Method Usage - Upper Case Conversion\nDESCRIPTION: Demonstration of string method usage with the upper() method to convert a string to uppercase.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_99\n\nLANGUAGE: python\nCODE:\n```\n>>> word = 'banana'\n>>> new_word = word.upper()\n>>> print new_word\nBANANA\n```\n\n----------------------------------------\n\nTITLE: Testing the Time Addition Function in Python\nDESCRIPTION: Example of creating Time objects representing a movie start time and duration, then using add_time to calculate when the movie will end.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_223\n\nLANGUAGE: python\nCODE:\n```\n>>> start = Time()\n>>> start.hour = 9\n>>> start.minute = 45\n>>> start.second = 0\n>>> duration = Time()\n>>> duration.hour = 1\n>>> duration.minute = 35\n>>> duration.second = 0\n>>> done = add_time(start, duration)\n>>> print_time(done)\n10:80:00\n```\n\n----------------------------------------\n\nTITLE: Using repr() to visualize string escape sequences in Python\nDESCRIPTION: Demonstrates how repr() shows the raw string representation including escape sequences, which is helpful for debugging problems with whitespace and invisible characters.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_205\n\nLANGUAGE: python\nCODE:\n```\n>>> print repr(s)\n'1 2\\t 3\\n 4'\n```\n\n----------------------------------------\n\nTITLE: Using Reverse Lookup with a Histogram in Python\nDESCRIPTION: Examples of successful and unsuccessful reverse lookups using the reverse_lookup function. The successful lookup finds the key 'r' for value 2, while the unsuccessful attempt raises a ValueError for a non-existent value.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_143\n\nLANGUAGE: python\nCODE:\n```\n>>> h = histogram('parrot')\n>>> k = reverse_lookup(h, 2)\n>>> print k\nr\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Function in Python\nDESCRIPTION: This snippet demonstrates calling the previously defined print_lyrics function, which executes the statements in the function body.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> print_lyrics()\nI'm a lumberjack, and I'm okay.\nI sleep all night and I work all day.\n```\n\n----------------------------------------\n\nTITLE: Boolean Expressions and Comparison Operators\nDESCRIPTION: Shows the usage of boolean expressions and the equality operator (==) in Python, demonstrating true/false comparisons and type checking.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n>>> 5 == 5\nTrue\n>>> 5 == 6\nFalse\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> type(True)\n<type 'bool'>\n>>> type(False)\n<type 'bool'>\n```\n\n----------------------------------------\n\nTITLE: Moving Cards Between Decks or Hands in Python\nDESCRIPTION: This move_cards method allows transferring a specified number of cards from one Deck or Hand to another. It modifies both the source and destination objects.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_257\n\nLANGUAGE: python\nCODE:\n```\ndef move_cards(self, hand, num):\n    for i in range(num):\n        hand.add_card(self.pop_card())\n```\n\n----------------------------------------\n\nTITLE: String Search Function (Python)\nDESCRIPTION: Defines a function that searches for a specific character in a string and returns its index. If the character is not found, it returns -1.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_97\n\nLANGUAGE: Python\nCODE:\n```\ndef find(word, letter):\n    index = 0\n    while index < len(word):\n        if word[index] == letter:\n            return index\n        index = index + 1\n    return -1\n```\n\n----------------------------------------\n\nTITLE: Finding the Center of a Rectangle in Python\nDESCRIPTION: Defines a function that takes a Rectangle object and returns a new Point object representing its center.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_214\n\nLANGUAGE: python\nCODE:\n```\ndef find_center(rect):\n    p = Point()\n    p.x = rect.corner.x + rect.width/2.0\n    p.y = rect.corner.y + rect.height/2.0\n    return p\n```\n\n----------------------------------------\n\nTITLE: Map Operation on Lists in Python\nDESCRIPTION: Shows how to perform a map operation (capitalizing strings) on a list using a loop.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_123\n\nLANGUAGE: Python\nCODE:\n```\ndef capitalize_all(t):\n    res = []\n    for s in t:\n        res.append(s.capitalize())\n    return res\n```\n\n----------------------------------------\n\nTITLE: Printing Most Common Words with Optional Parameter in Python\nDESCRIPTION: This function prints the most common words in a histogram. It demonstrates the use of an optional parameter with a default value.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_179\n\nLANGUAGE: Python\nCODE:\n```\ndef print_most_common(hist, num=10):\n    t = most_common(hist)\n    print 'The most common words are:'\n    for freq, word in t[:num]:\n        print word, '\\t', freq\n```\n\n----------------------------------------\n\nTITLE: Defining a Function that Calls Another Function\nDESCRIPTION: This snippet defines a new function repeat_lyrics that calls the previously defined print_lyrics function twice.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef repeat_lyrics():\n    print_lyrics()\n    print_lyrics()\n```\n\n----------------------------------------\n\nTITLE: Implementing increment Method\nDESCRIPTION: Method to increment time by specified number of seconds.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_235\n\nLANGUAGE: python\nCODE:\n```\ndef increment(self, seconds):\n    seconds += self.time_to_int()\n    return int_to_time(seconds)\n```\n\n----------------------------------------\n\nTITLE: String Immutability Demonstration (Python)\nDESCRIPTION: Illustrates that strings in Python are immutable, meaning individual characters cannot be changed. Shows how to create a new string with modifications instead.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_96\n\nLANGUAGE: Python\nCODE:\n```\n>>> greeting = 'Hello, world!'\n>>> greeting[0] = 'J'\nTypeError: 'str' object does not support item assignment\n>>> new_greeting = 'J' + greeting[1:]\n>>> print new_greeting\nJello, world!\n```\n\n----------------------------------------\n\nTITLE: Defining Rectangle and Point Classes for Object Diagram in Python\nDESCRIPTION: Creates Rectangle and Point classes with object copying to demonstrate how Lumpy visualizes object relationships. This example sets up objects with attributes and embedded objects.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_302\n\nLANGUAGE: python\nCODE:\n```\nlumpy = Lumpy()\nlumpy.make_reference()\nbox = Rectangle()\nbox.width = 100.0\nbox.height = 200.0\nbox.corner = Point()\nbox.corner.x = 0.0\nbox.corner.y = 0.0\nbox2 = copy.copy(box)\n```\n\n----------------------------------------\n\nTITLE: Examining a Function Object in Python\nDESCRIPTION: This snippet shows how to print a function object and check its type to confirm it's recognized as a function.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> print print_lyrics\n<function print_lyrics at 0xb7e99e9c>\n>>> type(print_lyrics)\n<type 'function'>\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearMap in Python\nDESCRIPTION: A simple implementation of a map using a list of tuples. The add method appends key-value pairs, while the get method searches linearly through the list.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_291\n\nLANGUAGE: Python\nCODE:\n```\nclass LinearMap(object):\n\n    def __init__(self):\n        self.items = []\n    def add(self, k, v):\n        self.items.append((k, v))\n    def get(self, k):\n        for key, val in self.items:\n            if key == k:\n                return val\n        raise KeyError\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Local Variable in Python Function\nDESCRIPTION: This snippet demonstrates how to define a function with local variables and parameters, and how to use it. The function 'cat_twice' concatenates two strings and prints the result twice.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef cat_twice(part1, part2):\n    cat = part1 + part2\n    print_twice(cat)\n\n>>> line1 = 'Bing tiddle '\n>>> line2 = 'tiddle bang.'\n>>> cat_twice(line1, line2)\nBing tiddle tiddle bang.\nBing tiddle tiddle bang.\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Conditional Statements in Python\nDESCRIPTION: Example of nested conditional statements that check equality and less than relationships between variables x and y. The outer conditional contains two branches with the second branch containing another conditional.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nif x == y:\n    print 'x and y are equal'\nelse:\n    if x < y:\n```\n\n----------------------------------------\n\nTITLE: Getting Current Working Directory in Python\nDESCRIPTION: This snippet demonstrates how to use os.getcwd() to retrieve the current working directory in Python.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_190\n\nLANGUAGE: Python\nCODE:\n```\n>>> import os\n>>> cwd = os.getcwd()\n>>> print cwd\n/home/dinsdale\n```\n\n----------------------------------------\n\nTITLE: Accessing Characters in a String (Python)\nDESCRIPTION: Demonstrates how to access individual characters in a string using indexing. Shows that string indices start at 0 in Python.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_90\n\nLANGUAGE: Python\nCODE:\n```\n>>> fruit = 'banana'\n>>> letter = fruit[1]\n>>> print letter\na\n>>> letter = fruit[0]\n>>> print letter\nb\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Class Object with Function Parameter in Python\nDESCRIPTION: Calls the instantiate function with the Point class as a parameter. This generates an object diagram showing the relationship between class objects and instances, as well as the function call frame.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_304\n\nLANGUAGE: python\nCODE:\n```\npoint = instantiate(Point)\n```\n\n----------------------------------------\n\nTITLE: Calling a Recursive Countdown Function in Python\nDESCRIPTION: Example of calling the recursive countdown function with an argument of 3, which will print the countdown sequence from 3 to 1 followed by 'Blastoff!'.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_58\n\nLANGUAGE: python\nCODE:\n```\n>>> countdown(3)\n```\n\n----------------------------------------\n\nTITLE: Checking Number Range with Nested Conditionals in Python\nDESCRIPTION: Example of nested conditionals used to check if x is a positive single-digit number by first checking if it's positive and then checking if it's less than 10.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nif 0 < x:\n    if x < 10:\n        print 'x is a positive single-digit number.'\n```\n\n----------------------------------------\n\nTITLE: Checking String Representations of Numbers in Python\nDESCRIPTION: Demonstrates that numeric values enclosed in quotation marks are treated as strings, not as numeric types, regardless of their appearance.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> type('17')\n<type 'str'>\n>>> type('3.2')\n<type 'str'>\n```\n\n----------------------------------------\n\nTITLE: File Path Operations in Python\nDESCRIPTION: This snippet shows various file path operations using os.path functions, including getting absolute paths and checking file/directory existence.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_191\n\nLANGUAGE: Python\nCODE:\n```\n>>> os.path.abspath('memo.txt')\n'/home/dinsdale/memo.txt'\n>>> os.path.exists('memo.txt')\nTrue\n>>> os.path.isdir('memo.txt')\nFalse\n>>> os.path.isdir('music')\nTrue\n>>> os.listdir(cwd)\n['music', 'photos', 'memo.txt']\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Factorial Function with Debug Prints in Python\nDESCRIPTION: This code snippet demonstrates a recursive factorial function with added print statements for debugging. It shows the flow of execution by printing the function calls and return values with proper indentation.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_83\n\nLANGUAGE: Python\nCODE:\n```\ndef factorial(n):\n    space = ' ' * (4 * n)\n    print space, 'factorial', n\n    if n == 0:\n        print space, 'returning 1'\n        return 1\n    else:\n        recurse = factorial(n-1)\n        result = n * recurse\n        print space, 'returning', result\n        return result\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Printing a Point Object in Python\nDESCRIPTION: Demonstrates how to create an instance of the Point class and print it, showing the class name and memory address.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_209\n\nLANGUAGE: python\nCODE:\n```\n>>> blank = Point()\n>>> print blank\n<__main__.Point instance at 0xb7e9d3ac>\n```\n\n----------------------------------------\n\nTITLE: Using Parentheses for Explicit Order of Operations in Python\nDESCRIPTION: This example shows how to use parentheses to make the order of operations explicit in mathematical expressions. It demonstrates the difference between an ambiguous expression and one with clear precedence.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_288\n\nLANGUAGE: Python\nCODE:\n```\ny = x / 2 * math.pi\n```\n\nLANGUAGE: Python\nCODE:\n```\ny = x / (2 * math.pi)\n```\n\n----------------------------------------\n\nTITLE: Binding Mouse Events to Canvas in Tkinter\nDESCRIPTION: Creates an event binding for the left mouse button press on a canvas. When the user clicks on the canvas, the make_circle function will be called.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_273\n\nLANGUAGE: python\nCODE:\n```\nca.bind('<ButtonPress-1>', make_circle)\n```\n\n----------------------------------------\n\nTITLE: Creating a Recursive Function with Stack Diagram Visualization in Python\nDESCRIPTION: Defines a recursive countdown function that includes a call to Lumpy's object_diagram method. This generates a stack diagram showing each recursive call frame when the base case is reached.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_297\n\nLANGUAGE: python\nCODE:\n```\nfrom swampy.Lumpy import Lumpy\ndef countdown(n):\n    if n <= 0:\n        print 'Blastoff!'\n        lumpy.object_diagram()\n    else:\n        print n\n        countdown(n-1)\nlumpy = Lumpy()\nlumpy.make_reference()\n```\n\n----------------------------------------\n\nTITLE: Adding Time Objects Using Integer Conversion in Python\nDESCRIPTION: Reimplemented add_time function that uses the conversion functions time_to_int and int_to_time to simplify the addition of two Time objects by converting to seconds, adding, then converting back.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_227\n\nLANGUAGE: python\nCODE:\n```\ndef add_time(t1, t2):\n    seconds = time_to_int(t1) + time_to_int(t2)\n    return int_to_time(seconds)\n```\n\n----------------------------------------\n\nTITLE: Calling a function from an imported module in Python\nDESCRIPTION: Shows how to call a function from an imported module using dot notation. The example calls the linecount() function from the wc module to count lines in a file.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_202\n\nLANGUAGE: python\nCODE:\n```\n>>> wc.linecount('wc.py')\n7\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Sequence Function in Python using Recursion\nDESCRIPTION: A recursive implementation of the Fibonacci sequence function. It defines the base cases for n=0 and n=1, then recursively computes the nth Fibonacci number by adding the (n-1)th and (n-2)th numbers.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_81\n\nLANGUAGE: python\nCODE:\n```\ndef fibonacci (n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```\n\n----------------------------------------\n\nTITLE: Assigning and Accessing Point Attributes in Python\nDESCRIPTION: Shows how to assign values to Point attributes using dot notation and how to access these attributes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_210\n\nLANGUAGE: python\nCODE:\n```\n>>> blank.x = 3.0\n>>> blank.y = 4.0\n>>> print blank.y\n4.0\n>>> x = blank.x\n>>> print x\n3.0\n```\n\n----------------------------------------\n\nTITLE: Debugging Infinite Loop with Print Statements\nDESCRIPTION: Example showing how to debug an infinite loop by adding print statements to track variable values and loop conditions. This helps identify why loop variables aren't being updated correctly.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_286\n\nLANGUAGE: python\nCODE:\n```\nwhile x > 0 and y < 0 :\n    # do something to x\n    # do something to y\n    print \"x: \", x\n    print \"y: \", y\n    print \"condition: \", (x > 0 and y < 0)\n```\n\n----------------------------------------\n\nTITLE: Implementing List Element Deletion Function in Python\nDESCRIPTION: Defines a function that modifies a list by deleting its first element, demonstrating how list arguments are passed by reference.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_132\n\nLANGUAGE: python\nCODE:\n```\ndef delete_head(t):\n    del t[0]\n```\n\n----------------------------------------\n\nTITLE: Validating Time Objects in Python\nDESCRIPTION: Function that checks if a Time object meets the invariants: hours must be positive, and minutes and seconds must be between 0 and 60 (not including 60).\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_228\n\nLANGUAGE: python\nCODE:\n```\ndef valid_time(time):\n    if time.hour < 0 or time.minute < 0 or time.second < 0:\n        return False\n    if time.minute >= 60 or time.second >= 60:\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Using os.popen with md5sum to compute file checksums\nDESCRIPTION: Demonstrates how to calculate a file's MD5 checksum by executing the md5sum command through a pipe. This technique allows Python to leverage external command-line tools for file verification.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_198\n\nLANGUAGE: python\nCODE:\n```\n>>> filename = 'book.tex'\n>>> cmd = 'md5sum ' + filename\n>>> fp = os.popen(cmd)\n>>> res = fp.read()\n>>> stat = fp.close()\n>>> print res\n1e0033f0ed0656636de0d75144ba32e0 book.tex\n>>> print stat\nNone\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Division Check - Verbose\nDESCRIPTION: Function that checks if one number is divisible by another, using explicit if-else statement.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_78\n\nLANGUAGE: python\nCODE:\n```\ndef is_divisible(x, y):\n    if x % y == 0:\n        return True\n    else:\n        return False\n```\n\n----------------------------------------\n\nTITLE: Examining a module object in Python\nDESCRIPTION: Demonstrates how to print a module object to see its identity, including the module name and file path. This helps understand how Python represents imported modules.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_201\n\nLANGUAGE: python\nCODE:\n```\n>>> print wc\n<module 'wc' from 'wc.py'>\n```\n\n----------------------------------------\n\nTITLE: Invalid Variable Names in Python\nDESCRIPTION: Shows examples of invalid variable names in Python that cause syntax errors. Variable names cannot start with numbers, contain special characters (except underscore), or use Python keywords.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> 76trombones = 'big parade'\nSyntaxError: invalid syntax\n>>> more@ = 1000000\nSyntaxError: invalid syntax\n>>> class = 'Advanced Theoretical Zymurgy'\nSyntaxError: invalid syntax\n```\n\n----------------------------------------\n\nTITLE: Using Point Attributes in Expressions in Python\nDESCRIPTION: Demonstrates how to use Point attributes in string formatting and mathematical expressions.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_211\n\nLANGUAGE: python\nCODE:\n```\n>>> print '(%g, %g)' % (blank.x, blank.y)\n(3.0, 4.0)\n>>> distance = math.sqrt(blank.x**2 + blank.y**2)\n>>> print distance\n5.0\n```\n\n----------------------------------------\n\nTITLE: Examining the Math Module Object in Python\nDESCRIPTION: This snippet shows how to print the math module object to get information about it after importing.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> print math\n<module 'math' (built-in)>\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Word from Histogram in Python\nDESCRIPTION: This function chooses a random word from a histogram by building a list with multiple copies of each word according to its frequency.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_181\n\nLANGUAGE: Python\nCODE:\n```\ndef random_word(h):\n    t = []\n    for word, freq in h.items():\n        t.extend([word] * freq)\n    return random.choice(t)\n```\n\n----------------------------------------\n\nTITLE: Variable-Length Argument Tuples in Python\nDESCRIPTION: Explains how to use the * operator for gathering variable arguments into a tuple (args) and scattering a tuple into separate arguments. Shows implementation of a function that can take any number of arguments.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_162\n\nLANGUAGE: python\nCODE:\n```\ndef printall(*args):\n    print args\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> printall(1, 2.0, '3')\n(1, 2.0, '3')\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> t = (7, 3)\n>>> divmod(t)\nTypeError: divmod expected 2 arguments, got 1\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> max(1,2,3)\n3\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> sum(1,2,3)\nTypeError: sum expected at most 2 arguments, got 3\n```\n\n----------------------------------------\n\nTITLE: Implementing Distance Function - Square Sum\nDESCRIPTION: Third version that adds calculation of squared differences sum.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_74\n\nLANGUAGE: python\nCODE:\n```\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    dsquared = dx**2 + dy**2\n    print 'dsquared is: ', dsquared\n    return 0.0\n```\n\n----------------------------------------\n\nTITLE: Using Expressions as Function Arguments\nDESCRIPTION: This snippet demonstrates using expressions as arguments when calling a function, showing that expressions are evaluated before the function is called.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> print_twice('Spam '*4)\nSpam Spam Spam Spam\nSpam Spam Spam Spam\n>>> print_twice(math.cos(math.pi))\n-1.0\n-1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Time Class Base Structure\nDESCRIPTION: Basic class definition for representing time of day.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_231\n\nLANGUAGE: python\nCODE:\n```\nclass Time(object):\n    \"\"\"Represents the time of day.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians in Python Math\nDESCRIPTION: This snippet shows how to convert angle measurements from degrees to radians using the math.pi constant.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> degrees = 45\n>>> radians = degrees / 360.0 * 2 * math.pi\n>>> math.sin(radians)\n0.707106781187\n```\n\n----------------------------------------\n\nTITLE: Using Format Operator for Integer Formatting in Python\nDESCRIPTION: Shows how to use the % format operator to format an integer value as a string.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_186\n\nLANGUAGE: python\nCODE:\n```\n>>> camels = 42\n>>> '%d' % camels\n'42'\n```\n\n----------------------------------------\n\nTITLE: Correct Global Variable Update with Incrementing in Python\nDESCRIPTION: Proper way to update a global counter variable using the 'global' keyword and the += operator to increment its value.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_154\n\nLANGUAGE: python\nCODE:\n```\ndef example3():\n    global count\n    count += 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Distance Function - Initial Version\nDESCRIPTION: Basic structure of a distance function that takes coordinates of two points as parameters. This initial version returns a placeholder value of 0.0.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_72\n\nLANGUAGE: python\nCODE:\n```\ndef distance(x1, y1, x2, y2):\n    return 0.0\n```\n\n----------------------------------------\n\nTITLE: Model Performance Comparison Table\nDESCRIPTION: Markdown table comparing performance metrics between T5, MoE, and Switch Transformer models across different capacity factors, measuring quality, time to threshold, and processing speed.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Model        | Capacity<br>Factor | Quality after<br>100k steps (↑)<br>(Neg. Log Perp.) | Time to Quality<br>Threshold (↓)<br>(hours) | Speed (↑)<br>(examples/sec) |\n|--------------|--------------------|-----------------------------------------------------|---------------------------------------------|-----------------------------|\n```\n\n----------------------------------------\n\nTITLE: Implementing print_time Function\nDESCRIPTION: Function to print time in HH:MM:SS format as a standalone function.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_232\n\nLANGUAGE: python\nCODE:\n```\ndef print_time(time):\n    print '%.2d:%.2d:%.2d' % (time.hour, time.minute, time.second)\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Destructive List Function in Python\nDESCRIPTION: Defines a function that returns a new list containing all but the first element of the input list, leaving the original list unchanged.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_135\n\nLANGUAGE: python\nCODE:\n```\ndef tail(t):\n    return t[1:]\n```\n\n----------------------------------------\n\nTITLE: String Comparison with Relational Operators\nDESCRIPTION: Example showing string comparison using relational operators for alphabetical ordering.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_102\n\nLANGUAGE: python\nCODE:\n```\nif word < 'banana':\n    print 'Your word,' + word + ', comes before banana.'\nelif word > 'banana':\n    print 'Your word,' + word + ', comes after banana.'\nelse:\n    print 'All right, bananas.'\n```\n\n----------------------------------------\n\nTITLE: Using List Modification Function in Python\nDESCRIPTION: Shows how a function that modifies a list affects the original list due to pass-by-reference behavior in Python.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_133\n\nLANGUAGE: python\nCODE:\n```\n>>> letters = ['a', 'b', 'c']\n>>> delete_head(letters)\n>>> print letters\n['b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Finding Most Common Words in Python\nDESCRIPTION: This function takes a histogram and returns a list of word-frequency tuples, sorted in reverse order by frequency.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_178\n\nLANGUAGE: Python\nCODE:\n```\ndef most_common(hist):\n    t = []\n    for key, value in hist.items():\n        t.append((value, key))\n    t.sort(reverse=True)\n    return t\n```\n\n----------------------------------------\n\nTITLE: Computing Absolute Value in Python\nDESCRIPTION: Functions demonstrating conditional return statements to compute absolute value of a number. Shows both correct and incorrect implementations with multiple return paths.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_71\n\nLANGUAGE: python\nCODE:\n```\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n```\n\nLANGUAGE: python\nCODE:\n```\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    if x > 0:\n        return x\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Time Object in Python\nDESCRIPTION: Code demonstrating how to create a Time object and assign values to its hour, minute, and second attributes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_221\n\nLANGUAGE: python\nCODE:\n```\ntime = Time()\ntime.hour = 11\ntime.minute = 59\ntime.second = 30\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Circles on Canvas\nDESCRIPTION: Modified make_circle function that creates a circle at the mouse click position and then makes it draggable by wrapping it with the Draggable class.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_283\n\nLANGUAGE: python\nCODE:\n```\ndef make_circle(event):\n    pos = ca.canvas_coords([event.x, event.y])\n    item = ca.circle(pos, 5, fill='red')\n    item = Draggable(item)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python's Interactive Mode\nDESCRIPTION: This snippet shows how to use Python's interactive mode to perform a simple addition operation. The interpreter displays the result immediately after the input.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> 1 + 1\n2\n```\n\n----------------------------------------\n\nTITLE: Embedding Formatted Values in Strings using Format Operator in Python\nDESCRIPTION: Demonstrates embedding formatted values in strings using the % operator with format specifiers.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_187\n\nLANGUAGE: python\nCODE:\n```\n>>> camels = 42\n>>> 'I have spotted %d camels.' % camels\n'I have spotted 42 camels.'\n```\n\n----------------------------------------\n\nTITLE: Error Message for Math Domain Error in Python\nDESCRIPTION: The error message produced when trying to calculate the logarithm of zero, which is mathematically undefined. The traceback points to the log10 line but the actual error originated from the division in the previous line.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"snr.py\", line 5, in ?\n    decibels = 10 * math.log10(ratio)\nValueError: math domain error\n```\n\n----------------------------------------\n\nTITLE: Implementing print_time with self Convention\nDESCRIPTION: Updated print_time method following Python's self parameter convention.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_234\n\nLANGUAGE: python\nCODE:\n```\nclass Time(object):\n    def print_time(self):\n        print '%.2d:%.2d:%.2d' % (self.hour, self.minute, self.second)\n```\n\n----------------------------------------\n\nTITLE: Checking Float Type in Python\nDESCRIPTION: Shows how to verify that numbers with decimal points are classified as floating-point numbers (type 'float') in Python.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> type(3.2)\n<type 'float'>\n```\n\n----------------------------------------\n\nTITLE: Python Error Message for Incorrect Global Variable Usage\nDESCRIPTION: The error message that occurs when attempting to update a global variable without declaring it, showing that Python interprets the variable as local and tries to read it before assignment.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_153\n\nLANGUAGE: text\nCODE:\n```\nUnboundLocalError: local variable 'count' referenced before assignment\n```\n\n----------------------------------------\n\nTITLE: Filter Operation on Lists in Python\nDESCRIPTION: Illustrates how to perform a filter operation (selecting uppercase strings) on a list using a loop.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_124\n\nLANGUAGE: Python\nCODE:\n```\ndef only_upper(t):\n    res = []\n    for s in t:\n        if s.isupper():\n            res.append(s)\n    return res\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Format Specifiers with Tuple in Python\nDESCRIPTION: Shows how to format multiple values in a string using various format specifiers (%d, %g, %s) with a tuple of values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_188\n\nLANGUAGE: python\nCODE:\n```\n>>> 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')\n'In 3 years I have spotted 0.1 camels.'\n```\n\n----------------------------------------\n\nTITLE: Debugging Indentation Error in Python\nDESCRIPTION: Example of an indentation error in Python, where an unexpected indent on the second line leads to a syntax error. The error message points to the variable y but the real issue is the indentation.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_66\n\nLANGUAGE: python\nCODE:\n```\n>>> x = 5\n>>> y = 6\n  File \"<stdin>\", line 1\n    y = 6\n    ^\nIndentationError: unexpected indent\n```\n\n----------------------------------------\n\nTITLE: Adding Time Objects with Assert Validation in Python\nDESCRIPTION: Variant of the add_time function that uses assert statements to validate Time objects. This approach separates normal code from error-checking code for better readability.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_230\n\nLANGUAGE: python\nCODE:\n```\ndef add_time(t1, t2):\n    assert valid_time(t1) and valid_time(t2)\n    seconds = time_to_int(t1) + time_to_int(t2)\n    return int_to_time(seconds)\n```\n\n----------------------------------------\n\nTITLE: String Reverse Comparison Debug Example\nDESCRIPTION: Implementation of a function to check if one word is the reverse of another, including debugging steps.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_103\n\nLANGUAGE: python\nCODE:\n```\ndef is_reverse(word1, word2):\n    if len(word1) != len(word2):\n        return False\n    i = 0\n    j = len(word2)\n    while j > 0:\n        print i, j\n        if word1[i] != word2[j]:\n            return False\n        i = i+1\n        j = j-1\n    return True\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Variable Update in Python\nDESCRIPTION: Example showing an error that occurs when trying to update a global variable without declaring it first, resulting in an UnboundLocalError because Python assumes the variable is local.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_152\n\nLANGUAGE: python\nCODE:\n```\ncount = 0\ndef example3():\n   count = count + 1 # WRONG\n```\n\n----------------------------------------\n\nTITLE: Debugging Variable Name Errors in Python\nDESCRIPTION: Illustrates a common runtime error in Python where a variable is used before it's defined, often due to a spelling mistake.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> principal = 327.68\n>>> interest = principle * rate\nNameError: name 'principle' is not defined\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Integer Conversion in Python\nDESCRIPTION: Example showing what happens when a user enters a non-numeric string that cannot be converted to an integer. This results in a ValueError indicating the invalid input.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n>>> speed = raw_input(prompt)\nWhat...is the airspeed velocity of an unladen swallow?\nWhat do you mean, an African or a European swallow?\n>>> int(speed)\nValueError: invalid literal for int() with base 10\n```\n\n----------------------------------------\n\nTITLE: Implementing Card String Representation Method\nDESCRIPTION: Implementation of the __str__ method for Card class that returns a human-readable string representation using class attributes for suit and rank names. The method accesses lookup lists to convert numeric codes to text descriptions.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_248\n\nLANGUAGE: python\nCODE:\n```\nsuit_names = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\nrank_names = [None, 'Ace', '2', '3', '4', '5', '6', '7',\n          '8', '9', '10', 'Jack', 'Queen', 'King']\ndef __str__(self):\n    return '%s of %s' % (Card.rank_names[self.rank],\n                         Card.suit_names[self.suit])\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Multiple Turtles\nDESCRIPTION: Example showing how to create a new turtle instance and use it with the square function, demonstrating code reusability.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nray = Turtle()\nsquare(ray)\n```\n\n----------------------------------------\n\nTITLE: Checking for Use of All Required Letters in Python\nDESCRIPTION: Implements a function that checks if a word uses all the letters from a given set of required letters. Demonstrates problem recognition by reusing a previously implemented function.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_110\n\nLANGUAGE: Python\nCODE:\n```\ndef uses_all(word, required):\n    for letter in required:\n        if letter not in word:\n            return False\n    return True\n\ndef uses_all(word, required):\n    return uses_only(required, word)\n```\n\n----------------------------------------\n\nTITLE: Database Operations with anydbm in Python\nDESCRIPTION: This snippet demonstrates how to create, write to, and read from a simple database using the anydbm module in Python.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_194\n\nLANGUAGE: Python\nCODE:\n```\n>>> import anydbm\n>>> db = anydbm.open('captions.db', 'c')\n>>> db['cleese.png'] = 'Photo of John Cleese.'\n>>> print db['cleese.png']\nPhoto of John Cleese.\n>>> db['cleese.png'] = 'Photo of John Cleese doing a silly walk.'\n>>> print db['cleese.png']\nPhoto of John Cleese doing a silly walk.\n>>> db.close()\n```\n\n----------------------------------------\n\nTITLE: Error Message for Infinite Recursion in Python\nDESCRIPTION: Example of the error message Python generates when maximum recursion depth is exceeded due to infinite recursion. The traceback shows the recursive calls going through the same function line repeatedly.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nFile \"<stdin>\", line 2, in recurse\n  File \"<stdin>\", line 2, in recurse\n  File \"<stdin>\", line 2, in recurse\n                  .\n                  .\n                  .\n  File \"<stdin>\", line 2, in recurse\nRuntimeError: Maximum recursion depth exceeded\n```\n\n----------------------------------------\n\nTITLE: Circle Drawing Function Using Polygon Approximation\nDESCRIPTION: Function that draws a circle by approximating it with a many-sided polygon. Calculates segment length based on circumference.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndef circle(t, r):\n    circumference = 2 * math.pi * r\n    n = int(circumference / 3) + 1\n    length = circumference / n\n    polygon(t, n, length)\n```\n\n----------------------------------------\n\nTITLE: Creating and Printing Card Example\nDESCRIPTION: Example of creating a Card instance (Jack of Hearts) and printing it to demonstrate the string representation method in action.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_249\n\nLANGUAGE: python\nCODE:\n```\n>>> card1 = Card(2, 11)\n>>> print card1\nJack of Hearts\n```\n\n----------------------------------------\n\nTITLE: Checking for Absence of Letter 'e' in Python\nDESCRIPTION: Implements a function that checks if a given word does not contain the letter 'e'. Uses a for loop to iterate through the characters of the word.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_108\n\nLANGUAGE: Python\nCODE:\n```\ndef has_no_e(word):\n    for letter in word:\n        if letter == 'e':\n            return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Modifying Rectangle Dimensions in Python\nDESCRIPTION: Defines a function that takes a Rectangle object and modifies its width and height attributes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_215\n\nLANGUAGE: python\nCODE:\n```\ndef grow_rectangle(rect, dwidth, dheight):\n    rect.width += dwidth\n    rect.height += dheight\n```\n\n----------------------------------------\n\nTITLE: Debugging Division by Zero Error in Python 2\nDESCRIPTION: Example demonstrating a common runtime error in Python 2 when calculating a signal-to-noise ratio. The error occurs due to floor division between integers resulting in a zero value being passed to log10.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nimport math\nsignal_power = 9\nnoise_power = 10\nratio = signal_power / noise_power\ndecibels = 10 * math.log10(ratio)\nprint decibels\n```\n\n----------------------------------------\n\nTITLE: Basic Square Drawing Function in Python\nDESCRIPTION: Simple function definition that draws a square using turtle graphics. Takes a turtle object as parameter and draws a square with fixed side length of 100 units.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ndef square(t):\n    for i in range(4):\n        fd(t, 100)\n        lt(t)\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Based Dispatch for Time Addition in Python\nDESCRIPTION: This snippet shows how to implement type-based dispatch in the __add__ method of a Time class, allowing addition with both Time objects and integers.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_241\n\nLANGUAGE: Python\nCODE:\n```\n# inside class Time:\n\ndef __add__(self, other):\n    if isinstance(other, Time):\n        return self.add_time(other)\n    else:\n        return self.increment(other)\ndef add_time(self, other):\n    seconds = self.time_to_int() + other.time_to_int()\n    return int_to_time(seconds)\ndef increment(self, seconds):\n    seconds += self.time_to_int()\n    return int_to_time(seconds)\n```\n\n----------------------------------------\n\nTITLE: Creating a Class Hierarchy with Function Parameters in Python\nDESCRIPTION: Demonstrates how Lumpy can visualize class objects, function objects, and their relationships. This example defines classes and a function that creates instances, showing how objects are passed as parameters.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_303\n\nLANGUAGE: python\nCODE:\n```\nimport copy\nfrom swampy.Lumpy import Lumpy\nlumpy = Lumpy()\nlumpy.make_reference()\nclass Point(object):\n    \"\"\"Represents a point in 2-D space.\"\"\"\nclass Rectangle(object):\n    \"\"\"Represents a rectangle.\"\"\"\ndef instantiate(constructor):\n    \"\"\"Instantiates a new object.\"\"\"\n    obj = constructor()\n    lumpy.object_diagram()\n    return obj\n```\n\n----------------------------------------\n\nTITLE: Generating Complex Class Diagram\nDESCRIPTION: Generates a class diagram showing the relationships between Deck, Hand, and PokerHand classes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_309\n\nLANGUAGE: python\nCODE:\n```\nlumpy.class_diagram()\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Comparison in Python\nDESCRIPTION: This snippet defines the __cmp__ method for Card objects, allowing them to be compared based on suit and rank. It uses the built-in cmp function, which is not available in Python 3.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_251\n\nLANGUAGE: python\nCODE:\n```\ndef __cmp__(self, other):\n    t1 = self.suit, self.rank\n    t2 = other.suit, other.rank\n    return cmp(t1, t2)\n```\n\n----------------------------------------\n\nTITLE: Adding Type Checking to Factorial Function in Python\nDESCRIPTION: An improved factorial function with 'guardian' conditionals that check for invalid inputs. It verifies that the argument is an integer and non-negative before performing the recursion, returning None with an error message for invalid inputs.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_82\n\nLANGUAGE: python\nCODE:\n```\ndef factorial (n):\n    if not isinstance(n, int):\n        print 'Factorial is only defined for integers.'\n        return None\n    elif n < 0:\n        print 'Factorial is not defined for negative integers.'\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in Interactive Mode\nDESCRIPTION: This snippet demonstrates how to define a function in Python's interactive mode, where the interpreter uses ellipses to indicate that the definition isn't complete.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> def print_lyrics():\n... print \"I'm a lumberjack, and I'm okay.\"\n... print \"I sleep all night and I work all day.\"\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Turtle World GUI in Python with Tkinter\nDESCRIPTION: This code creates a simplified version of TurtleWorld GUI using Tkinter, demonstrating widget layout, button creation, and event handling.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_269\n\nLANGUAGE: python\nCODE:\n```\nclass SimpleTurtleWorld(TurtleWorld):\n    \"\"\"This class is identical to TurtleWorld, but the code that\n    lays out the GUI is simplified for explanatory purposes.\"\"\"\n    def setup(self):\n        self.row()\n        ...\n\n    self.canvas = self.ca(width=400, height=400, bg='white')\n    self.col()\n\n    self.gr(cols=2)\n    self.bu(text='Print canvas', command=self.canvas.dump)\n    self.bu(text='Quit', command=self.quit)\n    self.bu(text='Make Turtle', command=self.make_turtle)\n    self.bu(text='Clear', command=self.clear)\n    self.endgr()\n\n    self.row([0,1], pady=30)\n    self.bu(text='Run file', command=self.run_file)\n    self.en_file = self.en(text='snowflake.py', width=5)\n    self.endrow()\n\n    self.te_code = self.te(width=25, height=10)\n    self.te_code.insert(END, 'world.clear()\\n')\n    self.te_code.insert(END, 'bob = Turtle(world)\\n')\n\n    self.bu(text='Run code', command=self.run_text)\n\ndef run_file(self):\n    filename = self.en_file.get()\n    fp = open(filename)\n    source = fp.read()\n    self.inter.run_code(source, filename)\n\ndef run_text(self):\n    source = self.te_code.get(1.0, END)\n    self.inter.run_code(source, '<user-provided code>')\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Types in Python\nDESCRIPTION: Demonstrates how to check the data type of variables using the type() function. The type of a variable is determined by the value it holds.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> type(message)\n<type 'str'>\n>>> type(n)\n<type 'int'>\n>>> type(pi)\n<type 'float'>\n```\n\n----------------------------------------\n\nTITLE: Creating Card Instance Example\nDESCRIPTION: Example of instantiating a Card object by specifying suit and rank values. This creates a Queen of Diamonds card with suit 1 (Diamonds) and rank 12 (Queen).\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_247\n\nLANGUAGE: python\nCODE:\n```\nqueen_of_diamonds = Card(1, 12)\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Palindrome Check in Python\nDESCRIPTION: This code snippet defines two helper functions, 'first' and 'last', used in checking if a word is a palindrome. These functions return the first and last characters of a given word respectively.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_84\n\nLANGUAGE: Python\nCODE:\n```\ndef first(word):\n    return word[0]\n\ndef last(word):\n    return word[-1]\n```\n\n----------------------------------------\n\nTITLE: Importing a custom Python module\nDESCRIPTION: Shows how to import a custom module (wc.py) and access its functions. When imported, the module executes any code at the module level, including the print statement.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_200\n\nLANGUAGE: python\nCODE:\n```\n>>> import wc\n7\n```\n\n----------------------------------------\n\nTITLE: Initializing Markov Class for Text Analysis\nDESCRIPTION: Declaration of a Markov class that encapsulates the state for Markov chain text analysis, with suffix_map and prefix attributes that were previously global variables.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_260\n\nLANGUAGE: python\nCODE:\n```\nclass Markov(object):\n```\n\n----------------------------------------\n\nTITLE: Rectangle and Point Object Creation\nDESCRIPTION: Creates and initializes Rectangle and Point objects with specific dimensions and coordinates to demonstrate HAS-A relationship.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_306\n\nLANGUAGE: python\nCODE:\n```\nbox = Rectangle()\nbox.width = 100.0\nbox.height = 200.0\nbox.corner = Point()\nbox.corner.x = 0.0\nbox.corner.y = 0.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Menubutton in Tkinter\nDESCRIPTION: Code that creates a color selection Menubutton with a GUI wrapper. It initializes the GUI, adds a label, and creates a Menubutton with the default color 'red'.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_270\n\nLANGUAGE: python\nCODE:\n```\ng = Gui()\ng.la('Select a color:')\ncolors = ['red', 'green', 'blue']\nmb = g.mb(text=colors[0])\n```\n\n----------------------------------------\n\nTITLE: Removing a Card from a Deck in Python\nDESCRIPTION: This pop_card method removes and returns the last card from the deck using the list's pop method. It simulates dealing from the bottom of the deck.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_254\n\nLANGUAGE: python\nCODE:\n```\ndef pop_card(self):\n    return self.cards.pop()\n```\n\n----------------------------------------\n\nTITLE: Calculating Load Balancing Loss for Switch Transformers in Mesh TensorFlow\nDESCRIPTION: This function calculates the load balancing loss to ensure diverse expert routing in Switch Transformers. It computes the density of token routing and probability mass allocation for each expert across cores, aiming for uniform distribution.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nimport mesh_tensorflow as mtf\n\ndef load_balance_loss(router_probs, expert_mask):\n   \"\"\"Calculate load−balancing loss to ensure diverse expert routing.\"\"\"\n   # router probs is the probability assigned for each expert per token.\n   # router probs shape: [num cores, tokens per core, num experts]\n   # expert index contains the expert with the highest router probability in one−hot format.\n   # expert mask shape: [num cores, tokens per core, num experts]\n   # For each core, get the fraction of tokens routed to each expert.\n   # density 1 shape: [num cores, num experts]\n   density_1 = mtf.reduce_mean(expert_mask, reduced_dim=tokens_per_core)\n   # For each core, get fraction of probability mass assigned to each expert\n   # from the router across all tokens.\n   # density 1 proxy shape: [num cores, num experts]\n   density_1_proxy = mtf.reduce_mean(router_probs, reduced_dim=tokens_per_core)\n   # density l for a single core: vector of length num experts that sums to 1.\n   # density l proxy for a single core: vector of length num experts that sums to 1.\n   # Want both vectors to have uniform allocation (1/num experts) across all num expert elements.\n   # The two vectors will be pushed towards uniform allocation when the dot product is minimized.\n   loss = mtf.reduce_mean(density_1_proxy * density_1) * (num_experts ** 2)\n   return loss\n```\n\n----------------------------------------\n\nTITLE: Using structshape for Debugging\nDESCRIPTION: Shows how to use the structshape module to analyze and debug data structure shapes in Python.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_170\n\nLANGUAGE: python\nCODE:\n```\n>>> from structshape import structshape\n>>> t = [1,2,3]\n>>> print structshape(t)\nlist of 3 int\n>>> t2 = [[1,2], [3,4], [5,6]]\n>>> print structshape(t2)\nlist of 3 list of 2 int\n```\n\n----------------------------------------\n\nTITLE: Initializing Markov Class with Constructor\nDESCRIPTION: Constructor method for the Markov class that initializes the suffix_map dictionary and empty prefix tuple to store state for Markov chain text analysis.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_261\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self):\n    self.suffix_map = {}\n    self.prefix = ()\n```\n\n----------------------------------------\n\nTITLE: Computing Fibonacci Number with Long Integer Result in Python\nDESCRIPTION: Example showing the output of computing the 50th Fibonacci number, which returns a long integer (denoted by the 'L' suffix) due to its large size.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_157\n\nLANGUAGE: python\nCODE:\n```\n>>> fibonacci(50)\n12586269025L\n```\n\n----------------------------------------\n\nTITLE: Draggable Class Definition for Canvas Items\nDESCRIPTION: Defines a Draggable class that inherits from Item to add drag-and-drop capability to canvas items. Sets up the class structure for implementing draggable functionality.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_277\n\nLANGUAGE: python\nCODE:\n```\nclass Draggable(Item):\n```\n\n----------------------------------------\n\nTITLE: Load Balancing Loss Calculation\nDESCRIPTION: Formula for computing the auxiliary load balancing loss to ensure uniform routing across experts\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\text{loss} = \\alpha \\cdot N \\cdot \\sum_{i=1}^{N} f_i \\cdot P_i\n```\n\n----------------------------------------\n\nTITLE: Initializing Lumpy and Creating a Reference Point in Python\nDESCRIPTION: Creates a Lumpy object and establishes a reference point to track objects defined after this point. This is the first step in using Lumpy for diagram generation.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_294\n\nLANGUAGE: python\nCODE:\n```\nlumpy = Lumpy()\nlumpy.make_reference()\n```\n\n----------------------------------------\n\nTITLE: Integer vs Long Integer Arithmetic in Python\nDESCRIPTION: Examples showing how Python automatically converts the result to a long integer when a calculation produces a number too large to be represented as a regular integer.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_158\n\nLANGUAGE: python\nCODE:\n```\n>>> 1000 * 1000\n1000000\n>>> 100000 * 100000\n10000000000L\n```\n\n----------------------------------------\n\nTITLE: Running the Recursive Countdown Function in Python\nDESCRIPTION: Executes the countdown function with an initial value of 3, which will trigger recursive calls and eventually generate a stack diagram showing all recursion levels.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_298\n\nLANGUAGE: python\nCODE:\n```\ncountdown(3)\n```\n\n----------------------------------------\n\nTITLE: Handling Item Drop after Dragging\nDESCRIPTION: The drop method for Draggable items that restores the original fill color when the user releases the mouse button after dragging an item.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_282\n\nLANGUAGE: python\nCODE:\n```\ndef drop(self, event):\n    self.config(fill=self.fill)\n```\n\n----------------------------------------\n\nTITLE: Processing Words in Markov Analysis\nDESCRIPTION: Method to process words for Markov chain text generation, tracking prefixes of specified order and building a map of suffixes that follow each prefix.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_262\n\nLANGUAGE: python\nCODE:\n```\ndef process_word(self, word, order=2):\n    if len(self.prefix) < order:\n        self.prefix += (word,)\n        return\n    try:\n        self.suffix_map[self.prefix].append(word)\n    except KeyError:\n        # if there is no entry for this prefix, make one\n        self.suffix_map[self.prefix] = [word]\n    self.prefix = shift(self.prefix, word)\n```\n\n----------------------------------------\n\nTITLE: Calculating Router Computation Cost for Switch Transformer\nDESCRIPTION: This snippet shows the formula for calculating the computational cost of the router in a Switch Transformer model. The cost is proportional to the model dimension and number of experts.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nO(d_model * num_experts)\n```\n\n----------------------------------------\n\nTITLE: Generating Class Diagram\nDESCRIPTION: Calls the class_diagram method to generate a visual representation of the class relationships.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_307\n\nLANGUAGE: python\nCODE:\n```\nlumpy.class_diagram()\n```\n\n----------------------------------------\n\nTITLE: Calling a Function that Calls Another Function\nDESCRIPTION: This snippet shows the result of calling the repeat_lyrics function, which in turn calls print_lyrics twice.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> repeat_lyrics()\nI'm a lumberjack, and I'm okay.\nI sleep all night and I work all day.\nI'm a lumberjack, and I'm okay.\nI sleep all night and I work all day.\n```\n\n----------------------------------------\n\nTITLE: Handling Format Operator Errors in Python\nDESCRIPTION: Demonstrates common errors when using the format operator including mismatched number of arguments and incorrect argument types.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_189\n\nLANGUAGE: python\nCODE:\n```\n>>> '%d %d %d' % (1, 2)\nTypeError: not enough arguments for format string\n>>> '%d' % 'dollars'\nTypeError: illegal argument type for built-in operation\n```\n\n----------------------------------------\n\nTITLE: Callback Setup Error Example\nDESCRIPTION: Demonstrates a common error in GUI programming where a callback function is called during setup rather than being passed as a reference, causing immediate execution instead of waiting for user events.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_284\n\nLANGUAGE: python\nCODE:\n```\ndef the_callback():\n    print 'Called.'\n```\n\n----------------------------------------\n\nTITLE: Dropout Configuration Comparison Table\nDESCRIPTION: Markdown table comparing performance across different tasks with varying dropout configurations for T5-Base and Switch-Base models.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Model (dropout)             | GLUE        | CNNDM       | SQuAD       | SuperGLUE   |\n|-----------------------------|-------------|-------------|-------------|-------------|\n```\n\n----------------------------------------\n\nTITLE: Token Fraction Calculation\nDESCRIPTION: Formula for computing the fraction of tokens dispatched to each expert\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\nf_i = \\frac{1}{T} \\sum_{x \\in \\mathcal{B}} \\mathbb{1} \\{ \\operatorname*{argmax} \\, p(x) = i \\}\n```\n\n----------------------------------------\n\nTITLE: Menu Item Callback Handler\nDESCRIPTION: Defines the set_color function that handles menu item selections. It updates the Menubutton text to display the selected color and prints the color to the console.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_272\n\nLANGUAGE: python\nCODE:\n```\ndef set_color(color):\n    mb.config(text=color)\n    print color\n```\n\n----------------------------------------\n\nTITLE: Setting Up List Visualization with Lumpy in Python\nDESCRIPTION: Creates three different lists: one with string elements, one with integer elements, and an empty list. These will be displayed in an object diagram to show Lumpy's representation of lists.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_299\n\nLANGUAGE: python\nCODE:\n```\nlumpy = Lumpy()\nlumpy.make_reference()\ncheeses = ['Cheddar', 'Edam', 'Gouda']\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Cube of Spheres with Visual Python\nDESCRIPTION: Code that creates a 3D cube of spheres using Visual Python's 3D graphics capabilities. The nested loops generate spheres at grid positions with coordinates ranging from 0 to 255 in increments of 51.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_245\n\nLANGUAGE: python\nCODE:\n```\nt = range(0, 256, 51)\nfor x in t:\n    for y in t:\n        for z in t:\n            pos = x, y, z\n            sphere(pos=pos, radius=10, color=color)\n```\n\n----------------------------------------\n\nTITLE: Flexible Event Handler for Multiple Triggers\nDESCRIPTION: Defines a function that can be used both as a button command and as an event handler. Gets text from the entry widget and creates a text item on the canvas.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_276\n\nLANGUAGE: python\nCODE:\n```\ndef make_text(event=None):\n    text = en.get()\n    item = ca.text([0,0], text)\n```\n\n----------------------------------------\n\nTITLE: Model Distillation Results Table\nDESCRIPTION: Markdown table showing distillation technique comparisons between T5-Base and Switch-Base models, including parameter counts and quality metrics.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Technique                                 | Parameters | Quality (↑)  |\n|-------------------------------------------|------------|----------------|\n| T5-Base                                   | 223M       | -1.636       |\n| Switch-Base                               | 3,800M     | -1.444       |\n| Distillation                              | 223M       | (3%) -1.631  |\n| + Init. non-expert weights from teacher   | 223M       | (20%) -1.598 |\n| + 0.75 mix of hard and soft loss          | 223M       | (29%) -1.580 |\n| Initialization Baseline (no distillation) |            |              |\n| Init. non-expert weights from teacher     | 223M       | -1.639       |\n```\n\n----------------------------------------\n\nTITLE: Displaying Fine-Tuning Results Comparison Table in Markdown\nDESCRIPTION: A markdown table comparing fine-tuning performance of T5-Base, Switch-Base, T5-Large, and Switch-Large models across various NLP tasks including GLUE, SQuAD, SuperGLUE, and others. Bold values highlight the better-performing model within each size comparison.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Model        | GLUE        | SQuAD         | SuperGLUE    | Winogrande (XL) |\n|--------------|-------------|---------------|--------------|------------------|\n| T5-Base      | 84.3        | 85.5          | 75.1         | 66.6            |\n| Switch-Base  | <b>86.7</b> | <b>87.2</b>   | <b>79.5</b>  | <b>73.3</b>     |\n| T5-Large     | 87.8        | 88.1          | 82.7         | 79.1            |\n| Switch-Large | <b>88.5</b> | <b>88.6</b>   | <b>84.7</b>  | <b>83.0</b>     |\n| Model        | XSum        | ANLI (R3)     | ARC Easy     | ARC Chal.       |\n| T5-Base      | 18.7        | 51.8          | 56.7         | <b>35.5</b>     |\n| Switch-Base  | <b>20.3</b> | <b>54.0</b>   | <b>61.3</b>  | 32.8            |\n| T5-Large     | 20.9        | 56.6          | <b>68.8</b>  | <b>35.5</b>     |\n| Switch-Large | <b>22.3</b> | <b>58.6</b>   | 66.0         | <b>35.5</b>     |\n| Model        | CB Web QA   | CB Natural QA | CB Trivia QA |                 |\n| T5-Base      | 26.6        | 25.8          | 24.5         |                 |\n| Switch-Base  | <b>27.4</b> | <b>26.8</b>   | <b>30.7</b>  |                 |\n| T5-Large     | 27.7        | 27.6          | 29.5         |                 |\n| Switch-Large | <b>31.3</b> | <b>29.5</b>   | <b>36.9</b>  |                 |\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Functionality for Canvas Items\nDESCRIPTION: The drag method for Draggable items that calculates the distance moved since the last event, updates the stored coordinates, and moves the item accordingly.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_280\n\nLANGUAGE: python\nCODE:\n```\ndef drag(self, event):\n    dx = event.x - self.dragx\n```\n\n----------------------------------------\n\nTITLE: Integer Division in Python 2\nDESCRIPTION: Demonstrates how division works with integers in Python 2. When both operands are integers, Python 2 performs floor division, truncating the result to an integer.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> minute = 59\n>>> minute/60\n0\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Layer for Transformers in Mesh TensorFlow\nDESCRIPTION: This function implements the distributed Switch Transformer feed-forward layer. It handles token routing, expert capacity management, and all-to-all communication between cores. The layer applies expert computations and combines their outputs based on routing probabilities.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nimport mesh_tensorflow as mtf\n\ndef switch_layer(inputs, n, capacity_factor, num_experts):\n   \"\"\"Distributed switch transformer feed−forward layer.\"\"\"\n   # num cores (n) = total cores for training the model (scalar).\n   # d model = model hidden size (scalar).\n   # num experts = total number of experts.\n   # capacity factor = extra buffer for each expert.\n   # inputs shape: [batch, seq len, d model]\n   batch, seq_len, d_model = inputs.get_shape()\n   # Each core will route tokens per core tokens to the correct experts.\n   tokens_per_core = batch * seq_len / num_cores\n   # Each expert will have shape [num cores, expert capacity, d model].\n   # Each core is responsible for sending expert capacity tokens\n   # to each expert.\n   expert_capacity = tokens_per_core * capacity_factor / num_experts\n   # Reshape to setup per core expert dispatching.\n   # shape: [batch, seq len, d model] −> [num cores, tokens per core, d model]\n   # Core layout: [n, 1, 1] −> [n, 1, 1]\n   inputs = mtf.reshape(inputs, [num_cores, tokens_per_core, d_model])\n   # Core Layout: [n, 1, 1] −> [n, 1, 1, 1], [n, 1, 1, 1]\n   # dispatch tensor (boolean) shape: [num cores, tokens per core, num experts, expert capacity]\n   # dispatch tensor is used for routing tokens to the correct expert.\n   # combine tensor (float) shape: [num cores, tokens per core, num experts, expert capacity]\n   # combine tensor used for combining expert outputs and scaling with router\n   # probability.\n   dispatch_tensor, combine_tensor, aux_loss = router(inputs, expert_capacity)\n   # Matmul with large boolean tensor to assign tokens to the correct expert.\n   # Core Layout: [n, 1, 1], −> [1, n, 1, 1]\n   # expert inputs shape: [num experts, num cores, expert capacity, d model]\n   expert_inputs = mtf.einsum([inputs, dispatch_tensor], reduce_dims=[tokens_per_core])\n   # All−to−All communication. Cores split across num cores and now we want to split\n   # across num experts. This sends tokens, routed locally, to the correct expert now\n   # split across different cores.\n   # Core layout: [1, n, 1, 1] −> [n, 1, 1, 1]\n   expert_inputs = mtf.reshape(expert_inputs, [num_experts, num_cores, expert_capacity, d_model])\n   # Standard feed forward computation, where each expert will have its own\n   # unique set of parameters.\n   # Total unique parameters created: num experts * (d model * d ff * 2).\n   # expert outputs shape: [num experts, num cores, expert capacity, d model]\n   expert_outputs = feed_forward(expert_inputs)\n   # All−to−All communication. Cores are currently split across the experts\n   # dimension, which needs to be switched back to being split across num cores.\n   # Core Layout: [n, 1, 1, 1] −> [1, n, 1, 1]\n   expert_outputs = mtf.reshape(expert_outputs, [num_experts, num_cores, expert_capacity, d_model])\n   # Convert back to input shape and multiply outputs of experts by the routing probability.\n   # expert outputs shape: [num experts, num cores, tokens per core, d model]\n   # expert outputs combined shape: [num cores, tokens per core, d model]\n```\n\n----------------------------------------\n\nTITLE: SuperGLUE Fine-tuning Results Table\nDESCRIPTION: Markdown table showing performance comparison between base T5, Switch-Base, and distilled T5-Base models on SuperGLUE tasks.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Model             | Parameters | FLOPS | SuperGLUE (↑) |\n|-------------------|------------|-------|---------------|\n| T5-Base           | 223M       | 124B  | 74.6          |\n| Switch-Base       | 7410M      | 124B  | 81.3          |\n| Distilled T5-Base | 223M       | 124B  | (30%) 76.6    |\n```\n\n----------------------------------------\n\nTITLE: Tensor Multiplication for Expert Assignment in Switch Transformers\nDESCRIPTION: This mathematical formula demonstrates how tensor multiplication (einsum) is used to perform expert assignment in Switch Transformers. It shows how binary matrices from the router are multiplied with input tensors to create the final tensor for expert processing.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_15\n\nLANGUAGE: latex\nCODE:\n```\n\\text{einsum}([n, B/n, d_{model}], [n, B/n, E, C], \\text{dimension} = [B/n])\n```\n\n----------------------------------------\n\nTITLE: Continuation of Drag Method Implementation\nDESCRIPTION: The second part of the drag method that completes the implementation by updating the stored coordinates and moving the item by the calculated displacement.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_281\n\nLANGUAGE: python\nCODE:\n```\ndy = event.y - self.dragy\nself.dragx = event.x\nself.dragy = event.y\nself.move(dx, dy)\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Transformer Layer Operations in Mesh TensorFlow\nDESCRIPTION: This pseudo code demonstrates the final steps in a Switch Transformer layer, where expert outputs are combined using einsum and reshaped to match the input dimensions. It shows the core layout transformations from [1, n, 1, 1] to [n, 1, 1] and includes the return of outputs and auxiliary loss.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_19\n\nLANGUAGE: pseudo\nCODE:\n```\n# Core Layout: [1, n, 1, 1] −> [n, 1, 1]\nexpert outputs combined = mtf.einsum([expert outputs, combine tensor], reduce dims=[tokens per core])\n# Remove tokens per core shapes used for local routing dispatching to match input shape.\n# Core Layout: [n, 1, 1] −> [n, 1, 1]\noutputs = mtf.reshape(expert outputs combined, [batch, seq len, d model])\nreturn outputs, aux loss\n```\n\n----------------------------------------\n\nTITLE: Initializing Draggable Items with Event Bindings\nDESCRIPTION: The constructor for the Draggable class that copies the canvas and tag from the item and creates bindings for right mouse button events to implement drag-and-drop.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_278\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, item):\n    self.canvas = item.canvas\n    self.tag = item.tag\n    self.bind('<Button-3>', self.select)\n    self.bind('<B3-Motion>', self.drag)\n    self.bind('<Release-3>', self.drop)\n```\n\n----------------------------------------\n\nTITLE: Scaled Mean Absolute Error Loss Function\nDESCRIPTION: Mathematical definition of the loss function used for training the network. A scaled MAE is used for numerical stability, where γ is the scale factor (set to 255), and the output is scaled back during testing.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/multicolcnn/multicolcnn.md#2025-04-15_snippet_2\n\nLANGUAGE: mathematical notation\nCODE:\n```\nL = \\frac{1}{n} \\sum_{i=1}^{n} |\\hat{y}_i - \\gamma y_i|\n```\n\n----------------------------------------\n\nTITLE: Card Game Class Implementation\nDESCRIPTION: Demonstrates more complex class relationships by creating instances of Deck and PokerHand classes, and moving cards between them.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_308\n\nLANGUAGE: python\nCODE:\n```\nfrom swampy.Lumpy import Lumpy\nfrom PokerHand import *\nlumpy = Lumpy()\nlumpy.make_reference()\ndeck = Deck()\nhand = PokerHand()\ndeck.move_cards(hand, 7)\n```\n\n----------------------------------------\n\nTITLE: Expert Output Computation\nDESCRIPTION: Formula for computing the output of the expert layer by combining weighted expert computations\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\ny = \\sum_{i \\in \\mathcal{T}} p_i(x) E_i(x)\n```\n\n----------------------------------------\n\nTITLE: Generating a State Diagram with Lumpy in Python\nDESCRIPTION: Calls the object_diagram method to generate a state diagram showing all variables defined since the reference point. The diagram displays variable names and their values.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_296\n\nLANGUAGE: python\nCODE:\n```\nlumpy.object_diagram()\n```\n\n----------------------------------------\n\nTITLE: Handling Item Selection for Drag and Drop\nDESCRIPTION: The select method for Draggable items that stores the initial coordinates and original color of the item, then changes the item's color to yellow to indicate selection.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_279\n\nLANGUAGE: python\nCODE:\n```\ndef select(self, event):\n    self.dragx = event.x\n    self.dragy = event.y\n    self.fill = self.cget('fill')\n    self.config(fill='yellow')\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Lists for Visualization in Python\nDESCRIPTION: Defines two more lists: one containing integer values and an empty list. These will be included in the object diagram alongside the previously defined list of strings.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_300\n\nLANGUAGE: python\nCODE:\n```\nnumbers = [17, 123]\nempty = []\n```\n\n----------------------------------------\n\nTITLE: Generating an Object Diagram with Lists in Python\nDESCRIPTION: Calls the object_diagram method to visualize the three different lists created. The diagram will show how Lumpy represents lists with their indices and elements.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_301\n\nLANGUAGE: python\nCODE:\n```\nlumpy.object_diagram()\n```\n\n----------------------------------------\n\nTITLE: Linear Sum Operation in Python\nDESCRIPTION: Demonstrates a basic linear time operation that sums elements in a list using a for loop. This is an O(n) operation where n is the length of the list t.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_290\n\nLANGUAGE: python\nCODE:\n```\ntotal = 0\nfor x in t:\n    total += x\n```\n\n----------------------------------------\n\nTITLE: Importing Lumpy Library\nDESCRIPTION: Imports the Lumpy class from the swampy module for creating class diagrams.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_305\n\nLANGUAGE: python\nCODE:\n```\nfrom swampy.Lumpy import Lumpy\n```\n\n----------------------------------------\n\nTITLE: Results Table for TRANCOS Traffic Counting Dataset\nDESCRIPTION: Markdown table comparing GAME metric scores at different levels (L=0 to L=3) across various methods on the TRANCOS dataset, with AMDCN achieving best results across all levels.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/multicolcnn/multicolcnn.md#2025-04-15_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Method                                    | GAME<br>(L=0) | GAME<br>(L=1) | GAME<br>(L=2) | GAME<br>(L=3) |\n|-------------------------------------------|---------------|---------------|---------------|---------------|\n| AMDCN                                     | <b>9.77</b>   | <b>13.16</b>  | <b>15.00</b>  | <b>15.87</b>  |\n| [18]                                      | 10.99         | 13.75         | 16.69         | 19.32         |\n| [15] + SIFT<br>from [14]                  | 13.76         | 16.72         | 20.72         | 24.36         |\n| [13] + RGB<br>Norm + Filters<br>from [14] | 17.68         | 19.97         | 23.54         | 25.84         |\n| HOG-2<br>from [14]                        | 13.29         | 18.05         | 23.65         | 28.41         |\n```\n\n----------------------------------------\n\nTITLE: Using Variables as Function Arguments\nDESCRIPTION: This snippet shows how to use a variable as an argument to a function, demonstrating that the parameter name inside the function is independent of the variable name used when calling.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> michael = 'Eric, the half a bee.'\n>>> print_twice(michael)\nEric, the half a bee.\nEric, the half a bee.\n```\n\n----------------------------------------\n\nTITLE: Drawing a Right Angle with TurtleWorld in Python\nDESCRIPTION: This code snippet shows how to use the forward (fd) and left turn (lt) functions to draw a right angle with a turtle.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\nfd(bob, 100)\nlt(bob)\nfd(bob, 100)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Square with TurtleWorld Using a For Loop in Python\nDESCRIPTION: This snippet shows how to use a for loop to draw a square with TurtleWorld, repeating the forward and left turn commands four times.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nfor i in range(4):\n    fd(bob, 100)\n    lt(bob)\n```\n\n----------------------------------------\n\nTITLE: Generalized Square Function with Length Parameter\nDESCRIPTION: Enhanced version of square function that accepts a length parameter, making it more flexible for drawing squares of different sizes.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ndef square(t, length):\n    for i in range(4):\n        fd(t, length)\n        lt(t)\n```\n\n----------------------------------------\n\nTITLE: Arc Drawing Function\nDESCRIPTION: Function to draw an arc with specified radius and angle. Calculates appropriate segment length and angle for smooth rendering.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndef arc(t, r, angle):\n    arc_length = 2 * math.pi * r * angle / 360\n    n = int(arc_length / 3) + 1\n    step_length = arc_length / n\n    step_angle = float(angle) / n\n    for i in range(n):\n        fd(t, step_length)\n        lt(t, step_angle)\n```\n\n----------------------------------------\n\nTITLE: Logical Operators Example\nDESCRIPTION: Demonstrates the use of logical operators in Python with a simple boolean expression evaluation.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n>>> 17 and True\nTrue\n```\n\n----------------------------------------\n\nTITLE: Calculating Circle Area in Python\nDESCRIPTION: A function that calculates and returns the area of a circle given its radius. Uses math.pi constant and demonstrates basic return value usage.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_70\n\nLANGUAGE: python\nCODE:\n```\ndef area(radius):\n    temp = math.pi * radius**2\n    return temp\n```\n\nLANGUAGE: python\nCODE:\n```\ndef area(radius):\n    return math.pi * radius**2\n```\n\n----------------------------------------\n\nTITLE: Crowd Density Distribution Kernel Formula for WorldExpo Dataset\nDESCRIPTION: Mathematical formula representing the density contribution from a person in the WorldExpo dataset, which combines a symmetric Gaussian for the head and an ellipsoid Gaussian for the body, scaled by perspective map information.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/multicolcnn/multicolcnn.md#2025-04-15_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n$$D_{\\mathbf{x}} = \\frac{1}{||Z||} (\\mathcal{N}_h(\\mathbf{x}, \\sigma_h) + \\mathcal{N}_b(\\mathbf{x}_b, \\Sigma_b)) \\qquad (5)$$\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle Area Function\nDESCRIPTION: Function that calculates circle area using composition of distance and area functions.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_76\n\nLANGUAGE: python\nCODE:\n```\ndef circle_area(xc, yc, xp, yp):\n    radius = distance(xc, yc, xp, yp)\n    result = area(radius)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Number Sequence Generator using While Loop in Python\nDESCRIPTION: A function that generates a sequence of numbers using the Collatz conjecture, where even numbers are divided by 2 and odd numbers are multiplied by 3 and added to 1.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_87\n\nLANGUAGE: python\nCODE:\n```\ndef sequence(n):\nwhile n != 1:\n   print n,\n   if n%2 == 0: # n is even\n      n = n/2\n   else: # n is odd\n      n = n*3+1\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Loop (Python)\nDESCRIPTION: Demonstrates string concatenation within a loop to generate an alphabetical series of names.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_94\n\nLANGUAGE: Python\nCODE:\n```\nprefixes = 'JKLMNOPQ'\nsuffix = 'ack'\nfor letter in prefixes:\n    print letter + suffix\n```\n\n----------------------------------------\n\nTITLE: Reassigning a Global Dictionary in Python\nDESCRIPTION: Example demonstrating that to completely reassign a global variable (rather than just modifying its contents), the 'global' keyword must be used.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_156\n\nLANGUAGE: python\nCODE:\n```\ndef example5():\n    global known\n    known = dict()\n```\n\n----------------------------------------\n\nTITLE: Closing a pipe in Python and checking execution status\nDESCRIPTION: Shows how to close a pipe created with os.popen and check the command's execution status. The return value None indicates the command completed successfully without errors.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_197\n\nLANGUAGE: python\nCODE:\n```\n>>> stat = fp.close()\n>>> print stat\nNone\n```\n\n----------------------------------------\n\nTITLE: Expert Capacity Calculation\nDESCRIPTION: Formula for determining the expected capacity of each expert based on batch size and capacity factor\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\text{expected capacity} = \\left(\\frac{\\text{tokens per batch}}{\\text{number of experts}}\\right) \\times \\text{capacity factor}\n```\n\n----------------------------------------\n\nTITLE: Drawing Shapes Using Swampy's World Module in Python\nDESCRIPTION: Code for creating a canvas and drawing shapes using Swampy's World module. The example demonstrates how to create a rectangle and set its properties.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_219\n\nLANGUAGE: python\nCODE:\n```\ncanvas = world.ca(width=500, height=500, background='white')\nbbox = [[-150,-100], [150, 100]]\ncanvas.rectangle(bbox, outline='black', width=2, fill='green4')\n```\n\n----------------------------------------\n\nTITLE: Implementing Distance Function - Difference Calculation\nDESCRIPTION: Second version of the distance function that calculates and prints the differences between coordinates.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_73\n\nLANGUAGE: python\nCODE:\n```\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    print 'dx is', dx\n    print 'dy is', dy\n    return 0.0\n```\n\n----------------------------------------\n\nTITLE: Implementing __str__ Method\nDESCRIPTION: String representation method for Time class objects.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_238\n\nLANGUAGE: python\nCODE:\n```\ndef __str__(self):\n    return '%.2d:%.2d:%.2d' % (self.hour, self.minute, self.second)\n```\n\n----------------------------------------\n\nTITLE: Distillation Compression Rates Table\nDESCRIPTION: Markdown table comparing dense and sparse models with varying parameters, showing pre-trained and distilled performance metrics along with compression rates.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n|                                | Dense  | Sparse |        |        |        |        |\n|--------------------------------|--------|--------|--------|--------|--------|--------|\n| Parameters                     | 223M   | 1.1B   | 2.0B   | 3.8B   | 7.4B   | 14.7B  |\n| Pre-trained Neg. Log Perp. (↑) | -1.636 | -1.505 | -1.474 | -1.444 | -1.432 | -1.427 |\n| Distilled Neg. Log Perp. (↑)   | —      | -1.587 | -1.585 | -1.579 | -1.582 | -1.578 |\n| Percent of Teacher Performance | —      | 37%    | 32%    | 30 %   | 27 %   | 28 %   |\n| Compression Percent            | —      | 82 %   | 90 %   | 95 %   | 97 %   | 99 %   |\n```\n\n----------------------------------------\n\nTITLE: Using find_defining_class Function with Hand Object\nDESCRIPTION: Example demonstrating how to use the find_defining_class function to determine which class provides the shuffle method for a Hand instance.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_259\n\nLANGUAGE: python\nCODE:\n```\n>>> hand = Hand()\n>>> print find_defining_class(hand, 'shuffle')\n<class 'Card.Deck'>\n```\n\n----------------------------------------\n\nTITLE: Configuring Canvas Background Color in Python\nDESCRIPTION: This snippet shows how to change the background color of a Tkinter Canvas widget using the config method.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_265\n\nLANGUAGE: python\nCODE:\n```\ncanvas.config(bg='white')\n```\n\n----------------------------------------\n\nTITLE: GAME Metric Formula Definition for TRANCOS Dataset\nDESCRIPTION: Mathematical formula for the Grid Average Mean absolute Error (GAME) metric which evaluates density map accuracy by splitting the map into grids and calculating mean absolute error within each grid.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/multicolcnn/multicolcnn.md#2025-04-15_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n$$GAME(L) = \\frac{1}{N} \\cdot \\sum_{n=1}^{N} \\left( \\sum_{l=1}^{4^L} |e_n^l - t_n^l| \\right) \\qquad (4)$$\n```\n\n----------------------------------------\n\nTITLE: Manipulating Text in Tkinter Entry and Text Widgets in Python\nDESCRIPTION: These code snippets demonstrate how to insert, retrieve, and delete text in Tkinter Entry and Text widgets using methods like get, insert, and delete.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_268\n\nLANGUAGE: python\nCODE:\n```\n>>> entry.get()\n'Default text.'\n```\n\nLANGUAGE: python\nCODE:\n```\ntext.insert(END, 'A line of text.')\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> text.get(0.0, END)\n'Another line of text.\\n'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> text.delete(1.2, END)\n>>> text.get(0.0, END)\n'An\\n'\n```\n\n----------------------------------------\n\nTITLE: Router Probability Allocation\nDESCRIPTION: Formula for calculating the fraction of router probability allocated to each expert\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\nP_i = \\frac{1}{T} \\sum_{x \\in \\mathcal{B}} p_i(x)\n```\n\n----------------------------------------\n\nTITLE: Routing Probability Calculation\nDESCRIPTION: Mathematical formula for calculating the routing probability of a token to an expert using softmax normalization\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\np_i(x) = \\frac{e^{h(x)_i}}{\\sum_j^N e^{h(x)_j}}\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Items to a Menubutton with Callables\nDESCRIPTION: Creates menu items for each color and associates them with a Menubutton. Uses Callable objects to pass arguments to the callback function when a menu item is selected.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_271\n\nLANGUAGE: python\nCODE:\n```\nfor color in colors:\n    g.mi(mb, text=color, command=Callable(set_color, color))\n```\n\n----------------------------------------\n\nTITLE: Results Table for UCF Crowd Counting Dataset\nDESCRIPTION: Markdown table showing Mean Absolute Error (MAE) results of various crowd counting methods on the UCF dataset, with AMDCN achieving the lowest error rate of 290.82.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/multicolcnn/multicolcnn.md#2025-04-15_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Method       | MAE    |\n|--------------|--------|\n| AMDCN        | 290.82 |\n| Hydra2s [18] | 333.73 |\n| MCNN [28]    | 377.60 |\n| [27]         | 467.00 |\n| [23]         | 295.80 |\n| [3]          | 318.10 |\n```\n\n----------------------------------------\n\nTITLE: Definition of Traditional 2D Convolution in Mathematical Notation\nDESCRIPTION: Formal mathematical definition of a traditional 2D convolution operation as used in the paper's theoretical framework. It defines how a filter function is applied to an input to produce the convolution result.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/multicolcnn/multicolcnn.md#2025-04-15_snippet_0\n\nLANGUAGE: mathematical notation\nCODE:\n```\n(F*k)(\\mathbf{p}) = \\sum_{\\mathbf{s}+\\mathbf{t}=\\mathbf{p}} F(\\mathbf{s})k(\\mathbf{t}).\n```\n\n----------------------------------------\n\nTITLE: Defining Variables for State Diagram Visualization in Python\nDESCRIPTION: Creates sample variables including a string, an integer, and a floating-point number that will be displayed in a state diagram. These variables are defined after the reference point.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_295\n\nLANGUAGE: python\nCODE:\n```\nmessage = 'And now for something completely different'\nn = 17\npi = 3.1415926535897932\n```\n\n----------------------------------------\n\nTITLE: Definition of Dilated Convolution in Mathematical Notation\nDESCRIPTION: Formal mathematical definition of a dilated convolution that allows the operation to skip inputs, increasing the receptive field without losing resolution. The parameter l represents the dilation factor.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/multicolcnn/multicolcnn.md#2025-04-15_snippet_1\n\nLANGUAGE: mathematical notation\nCODE:\n```\n(F \\ast_l k)(\\mathbf{p}) = \\sum_{\\mathbf{s} + l\\mathbf{t} = \\mathbf{p}} F(\\mathbf{s}) k(\\mathbf{t})\n```\n\n----------------------------------------\n\nTITLE: Precision Comparison Table\nDESCRIPTION: Markdown table showing quality and speed metrics for different precision configurations in Switch-Base models, comparing float32, bfloat16, and selective precision approaches.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Model<br>(precision)              | Quality<br>(Neg. Log Perp.) (↑) | Speed<br>(Examples/sec) (↑) |\n|-----------------------------------|---------------------------------|-----------------------------|\n```\n\n----------------------------------------\n\nTITLE: Initialization Scale Comparison Table\nDESCRIPTION: Markdown table comparing model quality and stability metrics between different initialization scales for Switch-Base models.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md#2025-04-15_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Model (Initialization scale) | Average Quality<br>(Neg. Log Perp.) | Std. Dev. of Quality<br>(Neg. Log Perp.) |\n|------------------------------|-------------------------------------|------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Python\nDESCRIPTION: Shows how to add comments to Python code using the # symbol. Comments can be on their own line or at the end of a line of code.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# compute the percentage of the hour that has elapsed\npercentage = (minute * 100) / 60\n```\n\nLANGUAGE: python\nCODE:\n```\npercentage = (minute * 100) / 60 # percentage of an hour\n```\n\n----------------------------------------\n\nTITLE: Calling a Function with Different Argument Types\nDESCRIPTION: This snippet shows calling the print_twice function with different types of arguments: a string, an integer, and a floating-point number from the math module.\nSOURCE: https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md#2025-04-15_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> print_twice('Spam')\nSpam\nSpam\n>>> print_twice(17)\n17\n17\n>>> print_twice(math.pi)\n3.14159265359\n3.14159265359\n```"
  }
]