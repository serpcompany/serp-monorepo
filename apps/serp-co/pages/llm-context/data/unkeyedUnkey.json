[
  {
    "owner": "unkeyed",
    "repo": "unkey",
    "content": "TITLE: Creating a Protected Route with Unkey in Next.js\nDESCRIPTION: Code for implementing a protected API route that validates API keys using Unkey's Next.js integration. It returns a 403 error for invalid keys and provides access to the verification response for valid keys.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestWithUnkeyContext, withUnkey } from '@unkey/nextjs';\nimport { NextResponse } from 'next/server';\n\nexport const POST = withUnkey(async (req) => {\n  if (!req.unkey.valid) {\n    return new NextResponse('unauthorized', { status: 403 });\n  }\n\n  // Process the request here\n  // You have access to the verification response using `req.unkey`\n  console.log(req.unkey);\n  return new NextResponse('Your API key is valid!');\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Unkey API\nDESCRIPTION: Demonstrates how to properly check for and handle errors when using the Unkey API. The example shows verifying a key and handling both network errors and invalid keys.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { verifyKey } from \"@unkey/api\";\n\nconst { result, error } = await verifyKey(\"key_123\");\n\nif (error) {\n  // handle potential network or bad request error\n  // a link to our docs will be in the `error.docs` field\n  console.error(error.message);\n  return;\n}\n\nif (!result.valid) {\n  // do not grant access\n  return;\n}\n\n// process request\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Verifying API Keys with Unkey in TypeScript\nDESCRIPTION: Example showing how to verify a key using the Unkey API client. This code demonstrates proper error handling, validity checking, and response processing.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/verify.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyKey } from \"@unkey/api\";\n\nconst { result, error } = await verifyKey({ key: \"key_123\", apiId: \"api_123\" });\n\nif (error) {\n  // handle potential network or bad request error\n  // a link to our docs will be in the `error.docs` field\n  console.error(error.message);\n  return;\n}\n\nif (!result.valid) {\n  // do not grant access\n  return;\n}\n\n// process request\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiered Caches with @unkey/cache\nDESCRIPTION: Shows how to set up tiered caching using both memory and Cloudflare stores, demonstrating automatic checking of multiple stores in order.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCache, DefaultStatefulContext, Namespace } from \"@unkey/cache\";\nimport { CloudflareStore, MemoryStore } from \"@unkey/cache/stores\";\n\n/**\n * In serverless you'd get this from the request handler\n * See /docs/libraries/ts/cache/overview#context\n */\nconst ctx = new DefaultStatefulContext();\n\n/**\n * Define the type of your data, or perhaps generate the types from your database\n */\ntype User = {\n  id: string;\n  email: string;\n};\n\nconst memory = new MemoryStore({ persistentMap: new Map() });\n\nconst cloudflare = new CloudflareStore({\n  domain: \"cache.unkey.dev\",\n  zoneId: env.CLOUDFLARE_ZONE_ID!,\n  cloudflareApiKey: env.CLOUDFLARE_API_KEY!,\n});\n\n\nconst cache = createCache({\n  user: new Namespace<User>(ctx, {\n    /**\n     * Specifying first `memory`, then `cloudflare` will automatically check both stores\n     * in order.\n     * If a value is found in memory, it is returned, else it will check cloudflare,\n     * and if it's found in cloudflare, the value is backfilled to memory.\n     */\n    stores: [memory, cloudflare],\n    fresh: 60_000, // Data is fresh for 60 seconds\n    stale: 300_000, // Data is stale for 300 seconds\n  });\n});\n\nasync function main() {\n  await cache.user.set(\"userId\", { id: \"userId\", email: \"user@email.com\" });\n\n  const user = await cache.user.get(\"userId\");\n\n  console.info(user);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Getting Ratelimit Override Details with Unkey API in TypeScript\nDESCRIPTION: Retrieves a single ratelimit override configuration for a specific identifier within a namespace. Returns details including ID, identifier pattern, limit, duration, and async setting.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/ratelimiting/automated-overrides.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Unkey } from \"@unkey/api\";\n\nconst unkey = new Unkey({\n  rootKey: process.env.UNKEY_ROOT_KEY!,\n});\n\nconst override = await unkey.ratelimits.getOverride({\n  namespaceName: \"email.send\",\n  identifier: \"*@customer.com\",\n})\n\nconsole.log(override)\n\n{\n  \"result\": {\n    \"id\": \"rlor_123\",\n    \"identifier\": \"*@calendso.com\",\n    \"limit\": 10,\n    \"duration\": 60000,\n    \"async\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure for Key Verification\nDESCRIPTION: JSON structure showing the response format after verifying a key, including validity status, rate limiting information, permissions, and metadata.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/verify.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  result: {\n  \"keyId\": \"key_1234\",\n  \"valid\": true,\n  \"name\": \"Customer X\",\n  \"ownerId\": \"user_123\",\n  \"meta\": {\n    \"roles\": [\n      \"admin\",\n      \"user\"\n    ],\n    \"stripeCustomerId\": \"cus_1234\"\n  },\n  \"expires\": 123,\n  \"ratelimit\": {\n    \"limit\": 10,\n    \"remaining\": 9,\n    \"reset\": 3600000\n  },\n  \"remaining\": 1000,\n  \"code\": \"VALID\",\n  \"enabled\": true,\n  \"permissions\": [\n    \"dns.record.update\",\n    \"dns.record.delete\"\n  ],\n  \"environment\": \"test\",\n  \"identity\": {\n    \"id\": \"<string>\",\n    \"externalId\": \"<string>\",\n    \"meta\": {}\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic usage of withUnkey handler in Next.js\nDESCRIPTION: Demonstrates how to use the withUnkey handler to protect API routes in Next.js. It shows the basic setup for verifying API keys and accessing the verification response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/nextjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestWithUnkeyContext, withUnkey } from '@unkey/nextjs';\n\nexport const POST = withUnkey(async (req) => {\n\n  // Process the request here\n  // You have access to the verification response using `req.unkey`\n  console.log(req.unkey);\n\n  return new Response('Your API key is valid!');\n},{ apiId: process.env.UNKEY_API_ID! });\n```\n\n----------------------------------------\n\nTITLE: Verifying an API Key with Unkey\nDESCRIPTION: Example showing how to verify an API key using the verifyKey function. This pattern handles both error cases and invalid keys appropriately.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/api/README.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyKey } from \"@unkey/api\";\n\nconst { result, error } = await verifyKey(\"key_123\");\n\nif (error) {\n  console.error(error.message);\n  // Handle potential network or bad request error\n  // A link to our docs will be in the `error.docs` field\n  return;\n}\n\nif (!result.valid) {\n  // Do not grant access\n  return;\n}\n\n// Process request\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key Configuration in TypeScript\nDESCRIPTION: Demonstrates how to retrieve an API key's configuration using the Unkey client library. The code shows the basic pattern of calling unkey.keys.get() with a keyId parameter and handling the response object.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/get.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result, error } = await unkey.keys.get({ keyId: \"key_123\" });\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key with Unkey in TypeScript\nDESCRIPTION: This snippet demonstrates how to verify an API key using Unkey in a TypeScript application. It imports the verifyKey function from the @unkey/api package and checks the validity of the provided API key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/introduction.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyKey } from '@unkey/api';\n\nconst { result, error } = await verifyKey({\n  apiId: \"api_123\",\n  key: \"xyz_123\"\n})\n\nif ( error ) {\n  // handle network error\n}\n\nif ( !result.valid ) {\n  // reject unauthorized request\n}\n```\n\n----------------------------------------\n\nTITLE: Basic API Route Protection with Unkey in Next.js\nDESCRIPTION: Example of protecting an API route using the withUnkey handler. This implements basic API key verification with default configuration, giving access to the verification response via req.unkey.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/nextjs/README.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestWithUnkeyContext, withUnkey } from '@unkey/nextjs';\n\nexport const POST = withUnkey(async (req) => {\n\n  // Process the request here\n  // You have access to the verification response using `req.unkey`\n  console.log(req.unkey);\n\n  return new Response('Your API key is valid!');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating API Key with Unkey in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an API key using Unkey in TypeScript. It includes various options such as prefix, byte length, owner ID, metadata, expiration, rate limiting, remaining uses, and refill settings.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst created = await unkey.keys.create({\n\tapiId:\"api_7oKUUscTZy22jmVf9THxDA\",\n\tprefix:\"xyz\",\n\tbyteLength:16,\n\townerId:\"chronark\",\n\tmeta:{\n\t\thello: \"world\"\n\t},\n\texpires: 1686941966471,\n\tratelimit: {\n      type: \"async\",\n      duration: 1000,\n\t  limit: 10,\n\t},\n\tremaining: 1000,\n    refill: {\n      interval: \"monthly\",\n      amount: 100,\n      refillDay: 15,\n    },\n  enabled: true\n})\n\nconsole.log(created)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key Information with Unkey Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve information about a specific API key using the Unkey Python SDK. It requires the key_id as a parameter and returns the key details if successful.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.get(key_id=\"key_1234\")\n\nif res.key is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Middleware for API Key Verification with Unkey\nDESCRIPTION: An Express middleware function that verifies API keys by calling the Unkey API. It extracts the key from authorization headers, sends it to Unkey's verification endpoint, and handles the response appropriately, including rate limiting scenarios.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ocr-service.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Request, Response, NextFunction } from \"express\";\n\n// An Express Middleware\nconst verifyApiKey = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const authHeader = req.headers.authorization;\n  if (authHeader) {\n    // Get the token from request headers\n    const token = authHeader.split(\" \")[1].trim();\n\n    try {\n      const myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/json\");\n\n      const raw = JSON.stringify({\n        key: token,\n      });\n\n      const verifyKeyResponse = await fetch(\n        \"https://api.unkey.dev/v1/keys.verifyKey\",\n        {\n          method: \"POST\",\n          headers: myHeaders,\n          body: raw,\n          redirect: \"follow\",\n        }\n      );\n      const verifyKeyResponseJson = await verifyKeyResponse.json();\n\n      if (\n        !verifyKeyResponseJson.valid &&\n        verifyKeyResponseJson.code === \"RATE_LIMITED\"\n      )\n        return res.status(429).json({ message: \"RATE_LIMITED\" });\n\n      if (!verifyKeyResponseJson.valid)\n        return res.status(401).json({ message: \"Unauthorized\" });\n\n      next();\n    } catch (err) {\n      console.log(\"ERROR: \", err);\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n  } else {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n\nexport default verifyApiKey;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limits with Unkey Python SDK\nDESCRIPTION: Example showing how to implement rate limiting using the Unkey Python SDK. The code demonstrates setting up a rate limit with specific identifier, limit count, duration, namespace, and resource configuration. It includes authentication setup and basic response handling.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/ratelimits.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.ratelimits.limit(request={\n    \"identifier\": \"user_123\",\n    \"limit\": 10,\n    \"duration\": 60000,\n    \"namespace\": \"email.outbound\",\n    \"cost\": 2,\n    \"resources\": [\n        {\n            \"type\": \"organization\",\n            \"id\": \"org_123\",\n            \"name\": \"unkey\",\n        },\n    ],\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Server with Unkey Authentication\nDESCRIPTION: Complete TypeScript code for an Express server that includes a protected endpoint using Unkey for API key verification. The server has a public endpoint and a protected '/secret' endpoint that validates API keys against Unkey's service.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/express.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response, Application } from 'express';\nimport dotenv from 'dotenv';\nimport { verifyKey } from '@unkey/api';\n//For env File\ndotenv.config();\n\nconst app: Application = express();\nconst port = process.env.PORT || 8000;\nconst apiId = process.env.UNKEY_API_ID // copy this from the dashboard\n\napp.get('/', (req: Request, res: Response) => {\n  res.send('Welcome to Express & TypeScript Server');\n});\n\n// This endpoint is protected by Unkey\napp.get('/secret', async (req: Request, res: Response) => {\n  const authHeader = req.headers[\"authorization\"]\n  const key = authHeader?.toString().replace(\"Bearer \", \"\");\n  if (!key) {\n    return res.status(401).send(\"Unauthorized\")\n  }\n\n  const { result, error } = await verifyKey({ key, apiId });\n  if (error) {\n    // This may happen on network errors\n    // We already retry the request 5 times, but if it still fails, we return an error\n    console.error(error);\n    res.status(500);\n    return res.status(500).send(\"Internal Server Error\")\n  }\n\n  if (!result.valid) {\n    res.status(401);\n    return res.status(401).send(\"Unauthorized\")\n  }\n\n  return res.status(200).send(JSON.stringify(result));\n})\napp.listen(port, () => {\n  console.log(`Server is listening at http://localhost:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Unkey Client with Root Key\nDESCRIPTION: Creates a new instance of the Unkey client using a root key for authentication. The root key is required for creating, revoking, or updating resources.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Unkey } from \"@unkey/api\";\n\nconst unkey = new Unkey({ rootKey: \"<UNKEY_ROOT_KEY>\" });\n```\n\n----------------------------------------\n\nTITLE: Identifying Key Owner with Unkey Python SDK\nDESCRIPTION: This code snippet shows how to identify the owner of an API key using the Unkey Python SDK. It sends a request with the key and returns information about the key owner.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.whoami(request={\n    \"key\": \"sk_123\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI SDK with Unkey Semantic Caching\nDESCRIPTION: Code snippet showing how to initialize the OpenAI SDK with Unkey's semantic caching service by modifying the baseURL parameter. This enables automatic caching of similar LLM queries based on semantic similarity.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/semantic-caching.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  baseURL: \"https://<gateway>.llm.unkey.io\", // change the baseUrl parameter to your gateway name\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Unkey Client with Root Key\nDESCRIPTION: Code to initialize the Unkey client using a root key. The root key should be created in the Unkey settings and kept secure.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/api/README.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Unkey } from \"@unkey/api\";\n\nconst unkey = new Unkey({ rootKey: \"<UNKEY_ROOT_KEY>\" });\n```\n\n----------------------------------------\n\nTITLE: Deleting an API Key with Unkey Python SDK\nDESCRIPTION: This example demonstrates how to delete an API key using the Unkey Python SDK. It requires the key_id in the request body and returns the deletion result.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.delete(request={\n    \"key_id\": \"key_1234\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Getting Role Details with Python Unkey SDK\nDESCRIPTION: Example of retrieving details for a specific role using the Unkey Python SDK. The code demonstrates how to fetch role information using a role ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/permissions.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.permissions.get_role(role_id=\"role_123\")\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Server with Unkey Ratelimiting\nDESCRIPTION: Complete TypeScript implementation of an Express server with Unkey ratelimiting. Includes setting up the Express app, configuring the ratelimiter, and implementing a protected endpoint that checks ratelimits before responding.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/express.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response, Application } from 'express';\nimport dotenv from 'dotenv';\nimport { Ratelimit } from '@unkey/ratelimit';\n//For env File\ndotenv.config();\n\nconst app: Application = express();\nconst port = process.env.PORT || 8000;\n\n/**\nThis can be a seperate util for easy configurable ratelimiting across\nmultiple routes.\n\nnamespace = The route identifier you would like to ratelimit\nlimit = The amount of requests\nduration = amount of time to limit against for example \"30s\"\n\n**/\nconst limiter = new Ratelimit({\n    namespace: \"express-example\",\n    limit: 2,\n    duration: \"30s\",\n    rootKey: process.env.UNKEY_ROOT_KEY\n});\n\n\napp.get('/', (req: Request, res: Response) => {\n  res.send('Welcome to Express & TypeScript Server');\n});\n\n// This endpoint is protected by Unkey\napp.get('/secret', async (req: Request, res: Response) => {\n  const identifier = req.getUserId() // or ip or anything else you want\n\n  const ratelimit = await limiter.limit(identifier)\n  if (!ratelimit.success){\n    res.status(429).send(\"Please try again later\")\n  }\n\n  return res.status(200).send(\"ok\");\n})\napp.listen(port, () => {\n  console.log(`Server is listening at http://localhost:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated HTTP Server with Unkey in Bun\nDESCRIPTION: Creates a Bun HTTP server that protects routes using Unkey authentication. The server extracts the API key from the Authorization header, verifies it using Unkey's API, and returns appropriate responses based on the verification result.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/bun.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyKey } from \"@unkey/api\";\n\nconst server = Bun.serve({\n  async fetch(req) {\n    const key = req.headers.get(\"Authorization\")?.replace(\"Bearer \", \"\");\n    if (!key) {\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n\n    const { result, error } = await verifyKey(key);\n    if (error) {\n      // This may happen on network errors\n      // We already retry the request 5 times, but if it still fails, we return an error\n      console.error(error);\n      return Response.json(\"Internal Server Error\", { status: 500 });\n    }\n\n    if (!result.valid) {\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n\n    return Response.json(result);\n  },\n  port: 8000,\n});\nconsole.log(`Listening on ${server.url}`);\n```\n\n----------------------------------------\n\nTITLE: Basic Unkey Middleware Setup in Hono.js\nDESCRIPTION: Minimal setup for implementing Unkey API key authentication in a Hono.js application. The middleware verifies API keys from the Authorization header and stores the result in the context.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/hono.mdx#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from \"hono\"\nimport { type UnkeyContext, unkey } from \"@unkey/hono\";\n\nconst app = new Hono<{ Variables: { unkey: UnkeyContext } }>();\n\napp.use(\"*\", unkey({\n  apiId: \"<UNKEY_API_ID>\"\n}));\n\n\napp.get(\"/somewhere\", (c) => {\n  // access the unkey response here to get metadata of the key etc\n  const ... = c.get(\"unkey\")\n\n  return c.text(\"yo\")\n})\n```\n\n----------------------------------------\n\nTITLE: Custom error handling in withUnkey\nDESCRIPTION: Demonstrates how to implement custom error handling for withUnkey, including tracking errors with an analytics service and returning a custom error response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/nextjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GET = withUnkey(async (req) => {\n  // ...\n}, {\n\tonError: async (req, res) => {\n      await analytics.trackEvent(`Error ${res.code}: ${res.message}`)\n      return new NextResponse(\"Unkey error\", { status: 500 })\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting API Key with Unkey in TypeScript\nDESCRIPTION: Shows how to delete an API key using the Unkey client library. The operation requires a keyId parameter and returns no response on success.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/delete.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.keys.delete({ keyId: \"key_123\" });\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component for API Key Management in Next.js\nDESCRIPTION: This code snippet shows how to create a React component in Next.js for managing API keys. It includes functionality for creating a new key, displaying the key, and making authenticated requests to a protected API endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { create } from \"./create\";\nimport { useState } from \"react\";\n\nconst UnkeyElements = () => {\n  const [key, setKey] = useState<string>(\"\");\n  const [secret, setSecret] = useState<string>(\"\");\n  async function onCreate(formData: FormData) {\n    const res = await create(formData);\n    if (res) setKey(res.key?.key);\n  }\n  const getData = async () => {\n    const res = await fetch(`/api/secret`, {\n      headers: {\n        Authorization: `Bearer ${key}`,\n      },\n    });\n    const data = await res.json();\n    setSecret(data.result);\n  };\n  return (\n    <div className=\"mt-8\">\n      <Card className=\"w-[350px]\">\n        <CardHeader>\n          <CardTitle>Create API Key</CardTitle>\n          <CardDescription>\n            Create your API key so you can interact with our API.\n          </CardDescription>\n        </CardHeader>\n        <form action={onCreate}>\n          <CardContent>\n            <div className=\"grid w-full items-center gap-4\">\n              <div className=\"flex flex-col space-y-1.5\">\n                <Label htmlFor=\"name\">API Key Name</Label>\n                <Input name=\"name\" placeholder=\"My Awesome API \" />\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between\">\n            <Button type=\"submit\">Create Key</Button>\n          </CardFooter>\n        </form>\n      </Card>\n      {key && key.length > 0 && (\n        <>\n          <Card className=\"w-[350px] mt-8\">\n            <CardHeader>\n              <CardTitle>API Key</CardTitle>\n              <CardDescription>\n                Here is your API key. Keep it safe!\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid w-full items-center gap-4\">\n                <div className=\"flex flex-col space-y-1.5\">\n                  <Label htmlFor=\"name\">API Key</Label>\n                  <Input name=\"name\" value={key} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"w-[350px] mt-8\">\n            <CardHeader>\n              <CardTitle>Get Secret Data </CardTitle>\n              <CardDescription>Retrieve secret data from API </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button onClick={getData} variant=\"outline\">\n                Get Data\n              </Button>\n              <div className=\"grid w-full items-center gap-4\">\n                <div className=\"flex flex-col space-y-1.5\">\n                  <Label htmlFor=\"name\">Secret Data</Label>\n                  <Input name=\"name\" value={JSON.stringify(secret)} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport { UnkeyElements };\n```\n\n----------------------------------------\n\nTITLE: Complete SWR Implementation Example\nDESCRIPTION: Full example of SWR implementation with memory and Cloudflare stores, including context setup and error handling.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultStatefulContext, Namespace, createCache } from \"@unkey/cache\"\nimport { CloudflareStore, MemoryStore } from \"@unkey/cache/stores\";\n\nconst ctx = new DefaultStatefulContext();\n\ntype User = {\n  id: string;\n  email: string;\n};\n\nconst memory = new MemoryStore({ persistentMap: new Map() });\n\nconst cloudflare = new CloudflareStore({\n  domain: \"cache.unkey.dev\",\n  zoneId: env.CLOUDFLARE_ZONE_ID!,\n  cloudflareApiKey: env.CLOUDFLARE_API_KEY!,\n});\n\nconst userNamespace = new Namespace<User>(ctx, {\n  stores: [memory, cloudflare],\n  fresh: 60_000,\n  stale: 300_000,\n});\n\nconst cache = createCache({ user: userNamespace });\n\nasync function main() {\n  await cache.user.set(\"userId\", { id: \"userId\", email: \"user@email.com\" });\n\n  const user = await cache.user.swr(\"userId\", async (userId)=>{\n    return db.getUser(userId)\n  });\n\n  console.info(user);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating an API Key with UnkeyElixirSdk\nDESCRIPTION: Complete Elixir example showing how to create an API key with various options including prefix, byte length, owner ID, metadata, expiration, rate limiting, and usage limitation. The code is wrapped in a try/catch block for error handling.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/create_key.mdx#2025-04-10_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n   try do\n        expiry =\n          DateTime.utc_now()\n          |> DateTime.add(100_000)\n          |> DateTime.to_unix(:millisecond)\n\n        opts =\n          UnkeyElixirSdk.create_key(%{\n            \"apiId\" => \"api_7oKUUscTZy22jmVf9THxDA\",\n            \"prefix\" => \"xyz\",\n            \"byteLength\" => 16,\n            \"ownerId\" => \"glamboyosa\",\n            \"meta\" => %{\"hello\" => \"world\"},\n            \"expires\" => expiry,\n            \"ratelimit\" => %{\n              \"type\" => \"fast\",\n              \"limit\" => 10,\n              \"refillRate\" => 1,\n              \"refillInterval\" => 1000\n            },\n            \"remaining\" => 10\n          })\n\n        Logger.info(opts)\n      catch\n        err ->\n          Logger.error(err)\n      end\n```\n\n----------------------------------------\n\nTITLE: Configuring Ratelimit Instance\nDESCRIPTION: Basic configuration setup for the Ratelimit class including root key, namespace, limit settings, and async option\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/ratelimit/README.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@unkey/ratelimit\";\n\nconst unkey = new Ratelimit({\n  rootKey: process.env.UNKEY_ROOT_KEY,\n  namespace: \"my-app\",\n  limit: 10,\n  duration: \"30s\",\n  async: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Unkey Authentication\nDESCRIPTION: Complete implementation of Unkey authentication in Supabase function with error handling\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nserve(async (req) => {\n  try {\n    const token = req.headers.get(\"x-unkey-api-key\");\n    if (!token) {\n      return new Response(\"No API Key provided\", { status: 401 });\n    }\n    const { result, error } = await verifyKey(token);\n    if (error) {\n      console.error(error.message);\n      return new Response(JSON.stringify({ error: error.message }), {\n        status: 400,\n      });\n    }\n    if (!result.valid) {\n      return new Response(JSON.stringify({ error: \"API Key is not valid for this request\" }), {\n        status: 401,\n      });\n    }\n    return new Response(JSON.stringify({ result }), { status: 200 });\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Verification in Next.js API Route\nDESCRIPTION: This code snippet demonstrates how to create a Next.js API route that verifies an API key using Unkey. It checks the Authorization header, verifies the key, and returns appropriate responses based on the verification result.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyKey } from \"@unkey/api\";\nimport { NextResponse } from \"next/server\";\nexport async function GET(request: Request) {\n  const header = request.headers.get(\"Authorization\");\n  if (!header) {\n    return new Response(\"No Authorization header\", { status: 401 });\n  }\n  const token = header.replace(\"Bearer \", \"\");\n  const { result, error } = await verifyKey(token);\n\n  if (error) {\n    console.error(error.message);\n    return new Response(\"Internal Server Error\", { status: 500 });\n  }\n\n  if (!result.valid) {\n    // do not grant access\n    return new Response(\"Unauthorized\", { status: 401 });\n  }\n\n  // process request\n  return NextResponse.json({ result });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New API with Unkey in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a new API using the Unkey service. It uses the 'apis.create' method, passing the name of the API as a parameter. The response will include the newly created API's id.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/apis/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.apis.create({ name: \"Unkey production\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Base URL for Unkey Client\nDESCRIPTION: Sets a custom base URL for the Unkey client, allowing requests to be directed to your own instance of Unkey hosted on your infrastructure.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/overview.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst unkey = new Unkey({\n  //...\n  baseUrl: \"https://my.domain\"\n})\n```\n\n----------------------------------------\n\nTITLE: Synchronous API Usage with unkey.py\nDESCRIPTION: Demonstrates how to use the unkey_py client synchronously for a basic liveness check. Initializes the Unkey client with a bearer authentication token from environment variables and performs a synchronous liveness check.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/async.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous Example\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.liveness.check()\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Updating API Key with Unkey Python SDK\nDESCRIPTION: This example shows how to update an existing API key using the Unkey Python SDK. It includes setting various properties such as name, external ID, metadata, expiration, rate limits, and permissions.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport unkey\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.update(request={\n    \"key_id\": \"key_123\",\n    \"name\": \"Customer X\",\n    \"external_id\": \"user_123\",\n    \"meta\": {\n        \"roles\": [\n            \"admin\",\n            \"user\",\n        ],\n        \"stripeCustomerId\": \"cus_1234\",\n    },\n    \"expires\": 0,\n    \"ratelimit\": {\n        \"limit\": 10,\n        \"type\": unkey.UpdateKeyType.FAST,\n        \"refill_rate\": 1,\n        \"refill_interval\": 60,\n    },\n    \"remaining\": 1000,\n    \"refill\": {\n        \"interval\": unkey.UpdateKeyInterval.DAILY,\n        \"amount\": 100,\n    },\n    \"enabled\": True,\n    \"roles\": [\n        {\n            \"id\": \"perm_123\",\n        },\n        {\n            \"name\": \"dns.record.create\",\n        },\n        {\n            \"name\": \"dns.record.delete\",\n            \"create\": True,\n        },\n    ],\n    \"permissions\": [\n        {\n            \"id\": \"perm_123\",\n        },\n        {\n            \"name\": \"dns.record.create\",\n        },\n        {\n            \"name\": \"dns.record.delete\",\n            \"create\": True,\n        },\n    ],\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key with Unkey Python SDK\nDESCRIPTION: This snippet demonstrates how to verify an API key using the Unkey Python SDK. It includes setting up the client, specifying the key and API ID, and handling rate limits.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.verify(request={\n    \"key\": \"sk_1234\",\n    \"api_id\": \"api_1234\",\n    \"ratelimits\": [\n        {\n            \"name\": \"tokens\",\n            \"limit\": 500,\n            \"duration\": 3600000,\n        },\n        {\n            \"name\": \"tokens\",\n            \"limit\": 20000,\n            \"duration\": 86400000,\n        },\n    ],\n})\n\nif res.v1_keys_verify_key_response is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Base URL\nDESCRIPTION: Example of configuring a custom base URL for Unkey API requests. This allows directing API calls to a different endpoint than the default.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/api/README.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = new Unkey({\n  rootKey: \"<UNKEY_ROOT_KEY>\",\n  baseUrl: \"https://my.domain\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Behavior for Unkey Client\nDESCRIPTION: Sets the fetch cache behavior for the Unkey client. Note that as of October 2023, this option is not implemented in Cloudflare Workers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/overview.mdx#2025-04-10_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst unkey = new Unkey({\n  // ...\n  cache: \"no-cache\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Ratelimiter in TypeScript\nDESCRIPTION: Demonstrates how to configure the Ratelimit instance with various options such as root key, namespace, limit, and duration.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/ratelimit.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@unkey/ratelimit\"\n\nconst unkey = new Ratelimit({\n  rootKey: process.env.UNKEY_ROOT_KEY,\n  namespace: \"my-app\",\n  limit: 10,\n  duration: \"30s\",\n  async: true\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Unkey Elixir SDK with Supervision\nDESCRIPTION: This code demonstrates how to start the Unkey SDK under a supervision tree. It requires a configuration map with a required 'token' property (your Unkey root key) and an optional 'base_url' property.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n children = [\n      {UnkeyElixirSdk, %{token: \"yourunkeyrootkey\"}}\n    ]\n\n\n# Now we start the supervisor with the children and a strategy\n{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)\n\n# After started, we can query the supervisor for information\nSupervisor.count_children(pid)\n#=> %{active: 1, specs: 1, supervisors: 0, workers: 1}\n```\n\n----------------------------------------\n\nTITLE: Verifying an API Key with Unkey in Rust\nDESCRIPTION: Demonstrates how to use the Unkey client to verify an API key. It creates a client, constructs a verification request, and handles the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse unkey::models::VerifyKeyRequest;\nuse unkey::Client;\n\nasync fn verify_key() {\n    let c = Client::new(\"unkey_ABC\");\n    let req = VerifyKeyRequest::new(\"test_DEF\", \"api_JJJ\");\n\n    match c.verify_key(req).await {\n        Ok(res) => println!(\"{res:?}\"),\n        Err(err) => eprintln!(\"{err:?}\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Async Rate Limit Override with Namespace Name in Unkey\nDESCRIPTION: This code snippet shows how to set a rate limit override using a namespace name with async processing. It allows 10 requests within a 60-second window for a specific user and returns immediately for lower latency.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/set-override.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst override = await unkey.setOverride({\n    identifier: \"user_123\",\n    limit: 10,\n    duration: 60000,\n    namespaceName: \"email.outbound\",\n    async: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Behavior\nDESCRIPTION: Example showing how to configure retry behavior for network errors. This allows specifying the number of retry attempts and implementing a backoff strategy.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/api/README.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = new Unkey({\n  rootKey: \"<UNKEY_ROOT_KEY>\",\n  retry: {\n    attempts: 3,\n    backoff: (retryCount) => retryCount * 1000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling and Timeouts\nDESCRIPTION: Advanced configuration showing how to handle timeouts and errors with fallback responses for increased reliability\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/ratelimit/README.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@unkey/ratelimit\";\n\nconst fallback = (identifier: string) => ({\n  success: true,\n  limit: 0,\n  reset: 0,\n  remaining: 0,\n});\n\nconst unkey = new Ratelimit({\n  // ... standard configuration\n  timeout: {\n    ms: 3000, // only wait 3s at most before returning the fallback\n    fallback,\n  },\n  onError: (err, identifier) => {\n    console.error(`${identifier} - ${err.message}`);\n    return fallback(identifier);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an API Key with Unkey in Rust\nDESCRIPTION: Shows how to create a new API key using the Unkey client. It sets various properties like prefix, remaining uses, name, and owner ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse unkey::models::CreateKeyRequest;\nuse unkey::Client;\n\nasync fn create_key() {\n    let c = Client::new(\"unkey_ABC\");\n    let req = CreateKeyRequest::new(\"api_123\")\n        .set_prefix(\"test\")\n        .set_remaining(100)\n        .set_name(\"test_name\")\n        .set_owner_id(\"jonxslays\");\n\n    match c.create_key(req).await {\n        Ok(res) => println!(\"{res:?}\"),\n        Err(err) => eprintln!(\"{err:?}\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limit Override with namespaceId in Unkey\nDESCRIPTION: Sets a rate limit override for a specific user using namespaceId to identify the rate limit group. This example sets a limit of 10 requests per 60 seconds for user_123 in an asynchronous manner.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/set-override.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst override = await unkey.ratelimits.setOverride({\n    identifier: \"user_123\",\n    limit: 10,\n    duration: 60000,\n    namespaceId: \"rlns_1234\",\n    async: true\n})\n```\n\n----------------------------------------\n\nTITLE: KeyCreateRequest DTO Structure for Unkey API Key Creation\nDESCRIPTION: Data Transfer Object (DTO) that defines the request structure for creating an API key with Unkey. It includes fields for API ID, prefix, name, byte length, owner ID, metadata, expiration, remaining uses, and rate limiting configuration.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/functions/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class KeyCreateRequest {\n    @NonNull\n    private String apiId;\n    private String prefix;\n    private String name;\n    private Integer byteLength;\n    private String ownerId;\n    private Meta meta;\n    private Integer expires;\n    private Integer remaining;\n    private KeyRateLimit ratelimit;\n}\n```\n\n----------------------------------------\n\nTITLE: Unkey API Key Verification Response in JSON\nDESCRIPTION: This JSON response from Unkey's verify endpoint provides details on the key's validity, remaining total requests, and rate limit information. It allows for immediate decision-making on user access to AI resources.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/how-we-ai.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{\n   \"valid\":true,\n   \"remaining\":99,\n   \"ratelimit\":{\n      \"limit\":10,\n      \"remaining\":9,\n      \"reset\":1690065988700\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Caching with @unkey/cache in TypeScript\nDESCRIPTION: Demonstrates the simplified SWR (stale-while-revalidate) caching approach using @unkey/cache. This code uses the library's clean API to fetch data with automatic caching, eliminating boilerplate.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/announcing-unkey-cache-package.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await cache.user.swr(\"chronark\", async (id) => {\n  return await db.query.users.findFirst({\n    where: (table, { eq }) => eq(table.id, id),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Unkey Go SDK\nDESCRIPTION: This example shows comprehensive error handling for the Unkey Go SDK. It demonstrates how to check for specific error types and handle them accordingly.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/go/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\tunkey \"github.com/unkeyed/unkey/sdks/golang\"\n\t\"github.com/unkeyed/unkey/sdks/golang/models/components\"\n\t\"github.com/unkeyed/unkey/sdks/golang/models/operations\"\n\t\"github.com/unkeyed/unkey/sdks/golang/models/sdkerrors\"\n\t\"log\"\n)\n\nfunc main() {\n\ts := unkey.New(\n\t\tunkey.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n\t)\n\n\trequest := operations.CreateAPIRequestBody{\n\t\tName: \"my-api\",\n\t}\n\n\tctx := context.Background()\n\tres, err := s.CreateAPI(ctx, request)\n\tif err != nil {\n\n\t\tvar e *sdkerrors.ErrBadRequest\n\t\tif errors.As(err, &e) {\n\t\t\t// handle error\n\t\t\tlog.Fatal(e.Error())\n\t\t}\n\n\t\tvar e *sdkerrors.ErrUnauthorized\n\t\tif errors.As(err, &e) {\n\t\t\t// handle error\n\t\t\tlog.Fatal(e.Error())\n\t\t}\n\n\t\tvar e *sdkerrors.ErrForbidden\n\t\tif errors.As(err, &e) {\n\t\t\t// handle error\n\t\t\tlog.Fatal(e.Error())\n\t\t}\n\n\t\tvar e *sdkerrors.ErrNotFound\n\t\tif errors.As(err, &e) {\n\t\t\t// handle error\n\t\t\tlog.Fatal(e.Error())\n\t\t}\n\n\t\tvar e *sdkerrors.ErrConflict\n\t\tif errors.As(err, &e) {\n\t\t\t// handle error\n\t\t\tlog.Fatal(e.Error())\n\t\t}\n\n\t\tvar e *sdkerrors.ErrTooManyRequests\n\t\tif errors.As(err, &e) {\n\t\t\t// handle error\n\t\t\tlog.Fatal(e.Error())\n\t\t}\n\n\t\tvar e *sdkerrors.ErrInternalServerError\n\t\tif errors.As(err, &e) {\n\t\t\t// handle error\n\t\t\tlog.Fatal(e.Error())\n\t\t}\n\n\t\tvar e *sdkerrors.SDKError\n\t\tif errors.As(err, &e) {\n\t\t\t// handle error\n\t\t\tlog.Fatal(e.Error())\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Roles from a Key with Unkey Python SDK\nDESCRIPTION: This code demonstrates how to remove roles from a key using the Unkey Python SDK. It initializes the client with bearer authentication and removes specified roles from a key, either by referencing the role ID or name.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.remove_roles(request={\n    \"key_id\": \"<id>\",\n    \"roles\": [\n        {\n            \"id\": \"role_123\",\n        },\n        {\n            \"name\": \"dns.record.create\",\n        },\n    ],\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Synchronous Rate Limit Override with Namespace ID in Unkey\nDESCRIPTION: This code snippet demonstrates setting a synchronous rate limit override using a namespace ID. It configures a limit of 5 requests within a 50-second window for a specific user, waiting for confirmation before returning.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/set-override.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst override = await unkey.setOverride({\n    identifier: \"user_123\", \n    limit: 5, \n    duration: 50000, \n    namespaceId: \"rlns_1234\",\n    async: false\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AsyncHttpClient Wrapper for Unkey Python SDK\nDESCRIPTION: This snippet shows how to create a custom AsyncHttpClient class that wraps the standard httpx.AsyncClient with additional functionality. The CustomClient class adds a custom header to every request and delegates the actual request handling to the wrapped client.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom unkey_py import Unkey\nfrom unkey_py.httpclient import AsyncHttpClient\nimport httpx\n\nclass CustomClient(AsyncHttpClient):\n    client: AsyncHttpClient\n\n    def __init__(self, client: AsyncHttpClient):\n        self.client = client\n\n    async def send(\n        self,\n        request: httpx.Request,\n        *,\n        stream: bool = False,\n        auth: Union[\n            httpx._types.AuthTypes, httpx._client.UseClientDefault, None\n        ] = httpx.USE_CLIENT_DEFAULT,\n        follow_redirects: Union[\n            bool, httpx._client.UseClientDefault\n        ] = httpx.USE_CLIENT_DEFAULT,\n    ) -> httpx.Response:\n        request.headers[\"Client-Level-Header\"] = \"added by client\"\n\n        return await self.client.send(\n            request, stream=stream, auth=auth, follow_redirects=follow_redirects\n        )\n\n    def build_request(\n        self,\n        method: str,\n        url: httpx._types.URLTypes,\n        *,\n        content: Optional[httpx._types.RequestContent] = None,\n        data: Optional[httpx._types.RequestData] = None,\n        files: Optional[httpx._types.RequestFiles] = None,\n        json: Optional[Any] = None,\n        params: Optional[httpx._types.QueryParamTypes] = None,\n        headers: Optional[httpx._types.HeaderTypes] = None,\n        cookies: Optional[httpx._types.CookieTypes] = None,\n        timeout: Union[\n            httpx._types.TimeoutTypes, httpx._client.UseClientDefault\n        ] = httpx.USE_CLIENT_DEFAULT,\n        extensions: Optional[httpx._types.RequestExtensions] = None,\n    ) -> httpx.Request:\n        return self.client.build_request(\n            method,\n            url,\n            content=content,\n            data=data,\n            files=files,\n            json=json,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            timeout=timeout,\n            extensions=extensions,\n        )\n\ns = Unkey(async_client=CustomClient(httpx.AsyncClient()))\n```\n\n----------------------------------------\n\nTITLE: Creating a New API Key with Unkey Python SDK\nDESCRIPTION: This snippet illustrates the process of creating a new API key using the Unkey Python SDK. It includes various optional parameters such as name, roles, permissions, expiration, and rate limiting.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport unkey\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.create(request={\n    \"api_id\": \"api_123\",\n    \"name\": \"my key\",\n    \"external_id\": \"team_123\",\n    \"meta\": {\n        \"billingTier\": \"PRO\",\n        \"trialEnds\": \"2023-06-16T17:16:37.161Z\",\n    },\n    \"roles\": [\n        \"admin\",\n        \"finance\",\n    ],\n    \"permissions\": [\n        \"domains.create_record\",\n        \"say_hello\",\n    ],\n    \"expires\": 1623869797161,\n    \"remaining\": 1000,\n    \"refill\": {\n        \"interval\": unkey.CreateKeyInterval.DAILY,\n        \"amount\": 100,\n    },\n    \"ratelimit\": {\n        \"limit\": 10,\n        \"type\": unkey.CreateKeyType.FAST,\n        \"duration\": 60000,\n    },\n    \"enabled\": False,\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining ListKeysRequest DTO in Java\nDESCRIPTION: This code defines the ListKeysRequest DTO class used for requesting the list of API keys. It includes fields for apiId, limit, offset, and ownerId.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/api/list.mdx#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ListKeysRequest {\n    private String apiId;\n    private Integer limit;\n    private Integer offset;\n    private String ownerId;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Last Used UI Component\nDESCRIPTION: React component that displays a 'Last used' indicator for the authentication method.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/improve-auth-experience.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const LastUsed: React.FC = () => {\n  return <span className=\"absolute right-4 text-xs text-content-subtle\">Last used</span>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Unkey Ratelimiter in tRPC Procedure\nDESCRIPTION: Creates a new Ratelimit instance with configuration for root key, namespace, request limit (3), and duration (5 seconds) for a tRPC procedure.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimit-trpc-routes.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = new Ratelimit({\n  rootKey: env.UNKEY_ROOT_KEY,\n  namespace: \"posts.create\",\n  limit: 3,\n  duration: \"5s\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Example with Memory and Cloudflare Stores\nDESCRIPTION: Shows how to set up a tiered cache system using memory and Cloudflare stores with TypeScript. Demonstrates namespace creation, store configuration, and basic cache operations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultStatefulContext, Namespace, createCache } from \"@unkey/cache\";\nimport { CloudflareStore, MemoryStore } from \"@unkey/cache/stores\";\n\nconst ctx = new DefaultStatefulContext();\n\ntype User = {\n  id: string;\n  email: string;\n};\n\nconst memory = new MemoryStore({ persistentMap: new Map() });\n\nconst cloudflare = new CloudflareStore({\n  domain: \"cache.unkey.dev\",\n  zoneId: env.CLOUDFLARE_ZONE_ID!,\n  cloudflareApiKey: env.CLOUDFLARE_API_KEY!,\n});\n\nconst userNamespace = new Namespace<User>(ctx, {\n  stores: [memory, cloudflare],\n  fresh: 60_000,\n  stale: 300_000,\n});\n\nconst cache = createCache({ user: userNamespace });\n\nasync function main() {\n  await cache.user.set(\"userId\", { id: \"userId\", email: \"user@email.com\" });\n\n  const user = await cache.user.get(\"userId\");\n\n  console.log(user);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Basic Rate Limiting Implementation with Unkey\nDESCRIPTION: Example of how to use Unkey's rate limiting functionality. This snippet shows making a rate limit request with basic parameters including duration, identifier, limit, and namespace.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/limit.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.ratelimits.limit({\n    duration: 600,\n    identifier: \"userId\",\n    limit: 2000,\n    namespace: \"test\"\n  })\n```\n\n----------------------------------------\n\nTITLE: Setting Key Permissions with Unkey Python SDK\nDESCRIPTION: This code demonstrates how to set permissions for a key using the Unkey Python SDK. The example initializes the Unkey client with bearer authentication and then sets multiple permissions for a specified key ID, including both existing permissions and newly created ones.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.set_permissions(request={\n    \"key_id\": \"<id>\",\n    \"permissions\": [\n        {\n            \"id\": \"perm_123\",\n        },\n        {\n            \"name\": \"dns.record.create\",\n        },\n        {\n            \"name\": \"dns.record.delete\",\n            \"create\": True,\n        },\n    ],\n})\n\nif res.response_bodies is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining ListKeysResponse DTO in Java\nDESCRIPTION: This snippet shows the ListKeysResponse DTO class structure used for the response when listing API keys. It contains a list of KeyAttributes and a total count.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/api/list.mdx#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ListKeysResponse {\n    private List<KeyAttributes> keys;\n    private Integer total;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Bun Server\nDESCRIPTION: Executes the Bun server by running the TypeScript file that contains the server implementation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/bun.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Test API Key with Environment in Unkey\nDESCRIPTION: This snippet demonstrates how to create a test API key with the 'test' environment and 'sk_test' prefix using the Unkey API.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/environments.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"environment\": \"test\",\n    \"prefix\": \"sk_test\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Filtering Analytics by Tags\nDESCRIPTION: Queries verification data filtered by a specific tag. This endpoint returns the sum of all verifications in the selected time period where the specified tag was present.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&tag=myTag&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: User Signup Endpoint Implementation with Unkey\nDESCRIPTION: Express.js endpoint that handles user signup and provisions API keys using Unkey's API, including rate limiting and key expiration setup.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ocr-service.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/signUp\", async (req: Request, res: Response) => {\n  const { name = \"John Doe\", email = \"john@example.com\" } = req.body;\n\n  // Imaginary name and email validation\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Authorization\", `Bearer ${process.env.UNKEY_ROOT_KEY}`);\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const raw = JSON.stringify({\n    apiId: process.env.UNKEY_API_ID,\n    prefix: \"ocr\",\n    byteLength: 16,\n    ownerId: email,\n    meta: {\n      name: name,\n      email: email,\n    },\n    expires: Date.now() + 2592000000 // 30 days from now\n    ratelimit: {\n      duration: 1000,\n      limit: 1,\n    },\n  });\n\n\n  const createKeyResponse = await fetch(\n    \"https://api.unkey.dev/v1/keys.createKey\",\n    {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    },\n  );\n  const createKeyResponseJson = await createKeyResponse.json();\n\n  if (createKeyResponseJson.error)\n    return res\n      .status(400)\n      .json({ error: createKeyResponseJson.error, keys: null });\n\n  return res.status(200).json({ keys: [createKeyResponseJson], error: null });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ratelimit with Error Handling and Timeout\nDESCRIPTION: Demonstrates how to configure the Ratelimit instance with custom error handling and timeout options for improved resilience.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/ratelimit.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@unkey/ratelimit\"\n\n// In this example we decide to let requests pass, in case something goes wrong.\n// But you can of course also reject them if you want.\nconst fallback = (identifier: string) => ({ success: true, limit: 0, reset: 0, remaining: 0 })\n\nconst unkey = new Ratelimit({\n  // ... standard stuff\n  timeout: {\n    ms: 3000, // only wait 3s at most before returning the fallback\n    fallback\n  },\n  onError: (err, identifier) => {\n    console.error(`${identifier} - ${err.message}`)\n    return fallback(identifier)\n  }\n})\n\nconst { success } = await unkey.limit(identifier)\n```\n\n----------------------------------------\n\nTITLE: Migrating Hashed API Keys to Unkey in Node.js\nDESCRIPTION: This snippet demonstrates how to migrate hashed API keys to Unkey by creating a SHA-256 hash of the keys and sending them to the migrations.createKeys endpoint. It includes a hash function and shows how to structure the request with multiple keys and their metadata.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/migrations/keys.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createHash } = require(\"node:crypto\")\n\nfunction hash(key) {\n  return {\n    value: createHash(\"sha256\").update(key).digest(\"base64\"),\n    variant: \"sha256_base64\",\n  }\n}\n\nconst keys = [\n  {\n    hash: hash(\"my-secret-key\"),\n    ownerId: \"hello\",\n    apiId: \"<UNKEY_API_ID>\", // the id of the API you created\n    //... other settings\n  },\n  {\n    hash: hash(\"my-other-secret-key\"),\n    name: \"name\",\n    apiId: \"<UNKEY_API_ID>\", // the id of the API you created\n    //... other settings\n  },\n]\n\nfetch(\"https://api.unkey.dev/v1/migrations.createKeys\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: \"Bearer <UNKEY_ROOT_KEY>\",\n  },\n  body: JSON.stringify(keys)\n})\n.then(res=>res.json())\n.then(res=>{console.log(res)})\n```\n\n----------------------------------------\n\nTITLE: Creating an API Key with Unkey API using cURL\nDESCRIPTION: Complete cURL example demonstrating how to create a new API key by making a POST request to the Unkey API with proper authentication and JSON payload.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/authentication.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.unkey.dev/v1/keys.createKey\" \\\n  -H \"Authorization: Bearer unkey_1234567890\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"apiId\": \"api_1234\" }'\n```\n\n----------------------------------------\n\nTITLE: Synchronous API Request with Unkey SDK\nDESCRIPTION: Creates an Unkey client instance and makes a synchronous API request to check liveness. It requires an environment variable for authentication.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Synchronous Example\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.liveness.check()\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limits in Unkey JSON Configuration\nDESCRIPTION: Example of configuring rate limits for API keys using the ratelimits array. Shows the minimal required configuration with just the ratelimit name property.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/ratelimiting/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"ratelimits\": [\n    {\n      \"name\": \"my-ratelimit\",\n    }\n  ]\n\n```\n\n----------------------------------------\n\nTITLE: Meta DTO for Storing Key Metadata in Unkey\nDESCRIPTION: Data Transfer Object for holding metadata associated with an API key as a map of string key-value pairs.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/functions/create.mdx#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Meta {\n    private Map<String, String> meta;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Details with Unkey Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve details of an API using the Unkey Python SDK. It initializes the Unkey client with authentication and makes a GET request to fetch API information based on the provided API ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/apis.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.apis.get(api_id=\"api_1234\")\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rate Limit Override with Namespace ID in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a rate limit override using the Unkey API with a namespace ID. It uses the 'getOverride' method from the 'ratelimits' object.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/get-override.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst override = await unkey.ratelimits.getOverride({\n  identifier:\"user.example\",\n  nameSpaceId:\"rlns_12345\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an API Key with Edge Rate Limiting in Unkey\nDESCRIPTION: This curl command demonstrates how to create an API key with local edge rate limiting enabled. Edge rate limiting provides faster performance with lower latency by maintaining separate rate limits at each edge location, but may allow users to exceed limits across different edge locations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/ratelimiting/modes.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <UNKEY>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"apiId\":\"<API_ID>\",\n\t\"prefix\":\"xyz\",\n\t\"byteLength\":16,\n\t\"ownerId\":\"<USER_ID>\",\n\t\"ratelimit\":{\n\t\t\"async\": true, // edge rate limiting\n\t\t\"limit\": 10,\n\t\t\"duration\": 1000\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Scripts for TypeScript Express\nDESCRIPTION: Updates the package.json scripts section to include commands for starting the application with ts-node, building TypeScript, and serving the compiled JavaScript.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/express.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"start\": \"ts-node ./index.ts\",\n    \"build\": \"tsc\",\n    \"serve\": \"node dist/index.js\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Example Metadata for API Key Creation in JSON\nDESCRIPTION: This JSON snippet demonstrates how to structure metadata when creating an API key. It includes sample fields for billing tier and trial end date.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/create.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"billingTier\": \"PRO\",\n  \"trialEnds\": \"2023-06-16T17:16:37.161Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Store Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a Store that handles namespaced key-value pairs. The interface requires implementing methods for retrieving, storing, and removing entries, with built-in support for handling data expiration.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/interface/store.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A store is a common interface for storing, reading and deleting key-value pairs.\n *\n * The store implementation is responsible for cleaning up expired data on its own.\n */\nexport interface Store<TNamespace extends string, TValue> {\n  /**\n   * A name for metrics/tracing.\n   *\n   * @example: memory\n   */\n  name: string;\n\n  /**\n   * Return the cached value\n   *\n   * The response must be `undefined` for cache misses\n   */\n  get(namespace: TNamespace, key: string): Promise<Result<Entry<TValue> | undefined, CacheError>>;\n\n  /**\n   * Sets the value for the given key.\n   *\n   * You are responsible for evicting expired values in your store implementation.\n   * Use the `entry.staleUntil` (unix milli timestamp) field to configure expiration\n   */\n  set(namespace: TNamespace, key: string, value: Entry<TValue>): Promise<Result<void, CacheError>>;\n\n  /**\n   * Removes one or multiple keys from the store.\n   */\n  remove(namespace: TNamespace, keys: string | string[]): Promise<Result<void, CacheError>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Single Permission with Unkey API\nDESCRIPTION: Example of verifying an API key against a single permission requirement ('admin') using the Unkey verification endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/authorization/verifying.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"apiId\": \"api_1234\",\n    \"key\": \"sk_1234\",\n    \"authorization\": {\n      \"permissions\": \"admin\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Using delete_keys Method in the Unkey Python SDK\nDESCRIPTION: Example showing how to delete API keys using the Unkey Python SDK. The code initializes the Unkey client with authentication and makes a request to delete keys for a specific API ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/apis.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.apis.delete_keys(request={\n    \"api_id\": \"api_1234\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating API Key with Roles using Unkey API\nDESCRIPTION: HTTP request example showing how to create a new API key with multiple roles assigned using the Unkey API. The request requires a ROOT_KEY for authorization and accepts an API_ID along with an array of role names.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/authorization/roles-and-permissions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  -H \"Authorization: Bearer ${ROOT_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"apiId\": \"${API_ID}\",\n    \"roles\": [\n      \"role1\", \"role2\", \"role3\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-in with Clerk\nDESCRIPTION: A TypeScript React function that handles OAuth authentication using Clerk, including error handling and loading states.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/improve-auth-experience.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst oauthSignIn = async (provider: OAuthStrategy) => {\n    if (!signInLoaded) {\n      return null;\n    }\n    try {\n      setIsLoading(provider);\n      await signIn.authenticateWithRedirect({\n        strategy: provider,\n        redirectUrl: \"/auth/sso-callback\",\n        redirectUrlComplete: \"/apis\",\n      });\n    } catch (err) {\n      console.error(err);\n      setIsLoading(null);\n      toast.error((err as Error).message);\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Listing API Keys with TypeScript\nDESCRIPTION: Example showing how to retrieve a list of API keys using the Unkey client library. Demonstrates using the apiId parameter and limit option.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/apis/list-keys.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst listKeys = await unkey.apis.listKeys({\n  apiId: \"api_QUGih1EMtBy9eSSf3vujmF\",\n  limit: 100,\n})\n\nconsole.log(listKeys)\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Creation Controller in Java with Unkey SDK\nDESCRIPTION: A Spring REST controller implementation that handles API key creation requests using the Unkey SDK. The controller accepts key creation parameters and an authorization token, then delegates to the KeyService to create the key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/functions/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.unkey.unkeysdk.dto.KeyCreateResponse;\nimport com.unkey.unkeysdk.dto.KeyCreateRequest;\n\n@RestController\npublic class APIController {\n\n    private static IKeyService keyService = new KeyService();\n\n    @PostMapping(\"/createKey\")\n    public KeyCreateResponse createKey(\n            @RequestBody KeyCreateRequest keyCreateRequest,\n            @RequestHeader(\"Authorization\") String authToken) {\n        // Delegate the creation of the key to the KeyService from the SDK\n        return keyService.createKey(keyCreateRequest, authToken);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: API Key Creation Response Example\nDESCRIPTION: Example JSON response from the create_key function showing the generated API key and its unique identifier. The key ID can be used for updating or revoking the key later.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/create_key.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"key\": \"xyz_AS5HDkXXPot2MMoPHD8jnL\",\n     \"keyId\": \"key_cm9vdCBvZiBnb29kXa\",\n}\n```\n\n----------------------------------------\n\nTITLE: KeyDeleteRequest DTO for Unkey API in Java\nDESCRIPTION: This snippet defines the KeyDeleteRequest DTO used for deleting an API key. It contains a single field for the key ID to be deleted.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/functions/revoke.mdx#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class KeyDeleteRequest {\n    private String keyId;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Successful API Key Retrieval in TypeScript\nDESCRIPTION: Shows the complete pattern for retrieving an API key configuration including error handling and accessing the result object. The successful response contains key details like keyId, apiId, remaining requests, and expiration timestamp.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/get.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result, error } = await unkey.keys.get({ keyId: \"key_123\" });\n\nif (error){\n  // error will be undefined if the request was successful\n}\n\n\n// result\n{\n  keyId: \"key_123\",\n  apiId: \"api_123\",\n  remaining: 1024,\n  expires: 1630540800000,\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Handler for Key Revocation and User Notification\nDESCRIPTION: API handler function that processes Github secret scanning webhooks. It verifies the signature, hashes the exposed token, identifies the user and team, revokes the key, and sends notifications to the affected team.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0002-github-secret-scanning.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// /api/v1/github_secrets.ts\n\nexport async function handler(request: Request) {\n\ttry {\n\t\tconst payload = await extractPayload(request);\n\t\tlog(\"Github secret scanning webhook\", payload);\n\t\tawait verifySignature(payload);\n\t\tconst hash = await hash(payload.token);\n\t\tconst user = await getUserByKeyHash(hash);\n\t\tconst team = await getTeam(user);\n\t\tawait deleteKey(hash);\n\t\tawait notifyTeam(team);\n\t\tlog(\"User automatic key revocation event\", user);\n\t} catch (error) {\n\t\tlog(\"Github webhook verification error\", error)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to Keys with Unkey Python SDK\nDESCRIPTION: This code shows how to add permissions to an existing API key using the Unkey Python SDK. The method requires the key_id and an array of permission objects to be added to the key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.add_permissions(request={\n    \"key_id\": \"<id>\",\n    \"permissions\": [\n        {},\n    ],\n})\n\nif res.response_bodies is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/ratelimit with npm\nDESCRIPTION: Shows how to install the @unkey/ratelimit package using npm package manager.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/ratelimit.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Successful Response from Unkey update_key Function\nDESCRIPTION: This snippet shows the expected successful response from the update_key function. The function returns an atom :ok when the key configuration is updated successfully.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/update_key.mdx#2025-04-10_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n:ok\n```\n\n----------------------------------------\n\nTITLE: Cloning the Unkey Repository\nDESCRIPTION: Git commands to clone the Unkey repository and navigate to the Go codebase directory.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/api/config.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:unkeyed/unkey.git\ncd unkey/go\n```\n\n----------------------------------------\n\nTITLE: Unkey API URL Structure Example\nDESCRIPTION: Example of the URL schema format used by the Unkey API for service method calls.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.unkey.dev/{version}/{service}.{method}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definition for Key Limit Update\nDESCRIPTION: OpenAPI endpoint specification for updating an API key's remaining usage limit using POST method.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/keys/update-remaining.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Update a key's remaining limit\nopenapi: post /v1/keys.updateRemaining\n---\n```\n\n----------------------------------------\n\nTITLE: Creating an API with Unkey Python SDK\nDESCRIPTION: This code snippet shows how to create a new API using the Unkey Python SDK. It initializes the Unkey client with authentication and sends a POST request to create an API with the specified name.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/apis.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.apis.create(request={\n    \"name\": \"my-api\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Headers with httpx Client in Unkey Python SDK\nDESCRIPTION: This snippet demonstrates how to initialize the Unkey SDK with a custom httpx Client that includes custom headers for all requests. It creates an httpx Client instance with a specific header and passes it to the Unkey constructor.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom unkey_py import Unkey\nimport httpx\n\nhttp_client = httpx.Client(headers={\"x-custom-header\": \"someValue\"})\ns = Unkey(client=http_client)\n```\n\n----------------------------------------\n\nTITLE: Updating API Key in Unkey (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to update an API key using Unkey. It updates the owner ID, remaining usage, sets up monthly refill, and enables the key. The function returns the updated key and key ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/update.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.keys.update({\n  keyId: \"xyz_AS5HDkXXPot2MMoPHD8jnL\",\n  ownerId: \"new owner\",\n  remaining: 300,\n  refil: {\n    interval: \"monthly\",\n    amount: 100,\n    refillDay: 15,\n  },\n  enabled: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Ratelimit Error Handling in tRPC\nDESCRIPTION: Checks the success status from the ratelimiter and throws a TRPCError with TOO_MANY_REQUESTS code if the user has exceeded their rate limit.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimit-trpc-routes.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { success } = await unkey.limit(ctx.session.user.id);\n\nif (!success) {\n  throw new TRPCError({ code: \"TOO_MANY_REQUESTS\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Roles for API Keys in Unkey Python SDK\nDESCRIPTION: Example of using the Unkey Python SDK to set roles for an API key. The code demonstrates how to initialize the client with authentication and set multiple roles with different configurations including role IDs and permissions.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.set_roles(request={\n    \"key_id\": \"<id>\",\n    \"roles\": [\n        {\n            \"id\": \"role_123\",\n        },\n        {\n            \"name\": \"dns.record.create\",\n        },\n        {\n            \"name\": \"dns.record.delete\",\n            \"create\": True,\n        },\n    ],\n})\n\nif res.response_bodies is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Updating Key Remaining Usage with Unkey API\nDESCRIPTION: Example showing how to update the remaining usage count of an API key using the Unkey client. The operation sets the remaining usage to 300 for a specific key ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/update-remaining.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.keys.updateRemaining({\n  keyId: \"xyz_AS5HDkXXPot2MMoPHD8jnL\",\n  value: 300,\n  op: \"set\"\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n    \"remaining\": 300\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Usage-Limited API Key with Unkey\nDESCRIPTION: Example of creating a new API key with a usage limit of 100 verifications using the Unkey API. The request is sent to the keys.createKey endpoint with an API ID and the remaining verification count.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/remaining.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <UNKEY>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"apiId\":\"<API_ID>\",\n\t\"remaining\": 100\n}'\n```\n\n----------------------------------------\n\nTITLE: Deleting Permissions with Unkey Python Client\nDESCRIPTION: This snippet shows how to delete an existing permission using the Unkey Python client. It initializes the client with a bearer token and calls the delete method with the permission ID to be removed.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/permissions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.permissions.delete(request={\n    \"permission_id\": \"perm_123\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server with PNPM\nDESCRIPTION: Command to start the Next.js development server using PNPM.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: API Key Update Response Structure (TypeScript)\nDESCRIPTION: This code snippet shows the structure of the response returned after updating an API key with Unkey. It includes the updated key and key ID in the result object.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/update.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n    key: \"xyz_AS5HDkXXPot2MMoPHD8jnL\"\n    keyId: \"key_YALWkHZaA4neUa1JJoXTAw\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Permission Details with Unkey Python Client\nDESCRIPTION: This snippet illustrates how to retrieve details for a specific permission using the Unkey Python client. It initializes the client with a bearer token and calls the get method with the permission ID to fetch its information.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/permissions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.permissions.get(permission_id=\"perm_123\")\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Integrating Unkey Component into Next.js Home Page\nDESCRIPTION: Implementation of the home page in Next.js that includes the Unkey component for API key management along with descriptive text.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UnkeyElements } from \"./keys/client\";\n\nexport default function Home() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <div className=\"flex flex-col items-center justify-center\">\n        <h1 className=\"text-4xl font-bold\">\n          Welcome to the Unkey + Auth Provider\n        </h1>\n        <p className=\"text-xl mt-4\">\n          This is a demo of how you can use Unkey to secure your API with an\n          Auth Provider.\n        </p>\n        <UnkeyElements />\n      </div>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limited Route in Next.js\nDESCRIPTION: TypeScript implementation of a rate-limited API route using Unkey in Next.js. Sets up a rate limiter with a namespace, limit of 2 requests, and 30-second duration.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/nextjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server';\nimport { Ratelimit } from \"@unkey/ratelimit\";\n\nconst limiter = new Ratelimit({\n  namespace: \"next-example\",\n  limit: 2,\n  duration: \"30s\",\n  rootKey: process.env.UNKEY_ROOT_KEY\n});\n\nexport const POST = (async (req) => {\n  const identifier = getUserId(); // or ip or anything else you want\n  const ratelimit = await limiter.limit(identifier)\n  if (!ratelimit.success){\n   return new NextResponse(\"Please try again later\", {status: 429});\n  }\n\n  return new NextResponse('Hello!');\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key with Unkey using cURL\nDESCRIPTION: This cURL request demonstrates how to verify an API key using Unkey's verify endpoint. It's a crucial step in protecting AI projects by validating user access and checking usage limits.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/how-we-ai.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"key\":\"THE_NEW_KEY\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAPI Validation Middleware in Go\nDESCRIPTION: A middleware that validates incoming requests against an OpenAPI schema. It uses the validation package (which wraps pb33f/libopenapi-validator) to perform structural and semantic validation based on the OpenAPI spec.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// OpenAPI validation middleware\nfunc WithValidation(validator *validation.Validator) Middleware {\n    return func(next HandleFunc) HandleFunc {\n        return func(ctx context.Context, s *Session) error {\n            err, valid := validator.Validate(s.r)\n            if !valid {\n                err.RequestId = s.requestID\n                return s.JSON(err.Status, err)\n            }\n            return next(ctx, s)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Bearer Token in Unkey Python SDK\nDESCRIPTION: This snippet demonstrates how to authenticate with the Unkey API using a bearer token. It initializes the Unkey client with a bearer token retrieved from an environment variable and makes a simple liveness check request.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.liveness.check()\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Updating Remaining Value for API Keys in Elixir\nDESCRIPTION: This snippet demonstrates how to update the remaining value for a specified API key using the UnkeyElixirSdk. The operation can increment, decrement, or set the remaining count by a specific value. The example shows incrementing the remaining count by 1 for the key with ID 'key_123'.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/update_remaining.mdx#2025-04-10_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ntry do\n  opts = UnkeyElixirSdk.update_remaining(%{\n         \"keyId\": \"key_123\",\n         \"op\": \"increment\",\n         \"value\": 1\n         })\n\n catch\n     err ->\n       Logger.error(err)\n   end\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Identity by ID in Unkey Python SDK\nDESCRIPTION: Example of retrieving an identity using either identity_id or external_id with the Unkey Python SDK. The code initializes the Unkey client and makes a get request with both identity identifiers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/identities.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.identities.get(identity_id=\"id_1234\", external_id=\"id_1234\")\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Unkey Ratelimiter for OTP Sending\nDESCRIPTION: This snippet shows how to configure the Unkey ratelimiter for the OTP sending endpoint. It sets up a namespace named 'otp-send' with a limit of 2 requests per 60 seconds.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimiting-otp.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@unkey/ratelimit\";\nimport { headers } from \"next/headers\";\n\nconst unkey = new Ratelimit({\n  rootKey: process.env.UNKEY_ROOT_KEY,\n  namespace: \"otp-send\",\n  limit: 2,\n  duration: \"60s\",\n})\n\nexport async function sendOTP(formData: FormData) {\n  // sending OTP logic\n```\n\n----------------------------------------\n\nTITLE: Example Feature Implementation with Components, Hooks, and Actions (TypeScript)\nDESCRIPTION: Provides examples of how to implement different parts of a feature in the Unkey dashboard, including a component, a query hook, a server action, and type definitions. Each piece is placed in its appropriate directory within the feature structure.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/client-structure.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// /feature/components/feature-list/index.tsx\nexport function FeatureList() {\n  // Component implementation\n}\n\n// /feature/hooks/queries/use-features.ts\nexport function useFeatures() {\n  // Hook implementation\n}\n\n// /feature/actions/feature-actions.ts\nexport async function createFeature() {\n  // Server action implementation\n}\n\n// /feature/types/feature.ts\nexport interface Feature {\n  // Type definitions\n}\n```\n\n----------------------------------------\n\nTITLE: Handling invalid keys in withUnkey\nDESCRIPTION: Shows how to customize the response when Unkey reports an invalid API key, in this case returning a 401 Unauthorized response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GET = withUnkey(async (req) => {\n  // ...\n}, {\n\thandleInvalidKey: (req, res) => {\n      return new Response(\"Unauthorized\", { status: 401 })\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Unkey Root Key in Environment\nDESCRIPTION: Environment variable configuration for Unkey root key\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/nextjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUNKEY_ROOT_KEY=\"YOUR_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Verifying a Usage-Limited API Key with Unkey\nDESCRIPTION: Example of verifying an API key using the Unkey API. The verification request returns both the validity status and the remaining number of verifications for the key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/remaining.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n      \"apiId\":\"<API_ID>\",\n      \"key\": \"<NEW_KEY>\"\n\t}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Interface for Cache Monitoring\nDESCRIPTION: Definition of the Metrics interface that can be implemented to collect cache usage statistics. Includes methods for emitting metrics and flushing data to storage.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Metrics<TMetric extends Record<string, unknown> = Record<string, unknown>> {\n  /**\n   * Emit a new metric event\n   *\n   */\n  emit(metric: TMetric): void;\n\n  /**\n   * flush persists all metrics to durable storage.\n   * You must call this method before your application exits, metrics are not persisted automatically.\n   */\n  flush(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Response Structure from Unkey\nDESCRIPTION: Example response from a rate limiting request, showing success status, limit details, remaining requests, and reset timestamp.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/limit.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n    \"success\": true,\n    \"limit\": 2000,\n    \"reset\": 1630000000000,\n    \"remaining\": 300\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Unkey Authentication with cURL\nDESCRIPTION: cURL command to test the protected endpoint by sending a request with an API key in the Authorization header. The endpoint returns a success message for valid keys.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST 'http://localhost:3000/protected' \\\n  -H \"Authorization: Bearer <KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Custom Invalid Key Handling in Unkey Next.js SDK\nDESCRIPTION: Configuration for custom handling of invalid API keys using the handleInvalidKey option. This example returns a 401 Unauthorized response when an invalid key is detected.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/nextjs/README.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GET = withUnkey(async (req) => {\n  // ...\n}, {\n\thandleInvalidKey: (req, res) => {\n      return new Response(\"Unauthorized\", { status: 401 })\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Server Action for Unkey API Key Generation\nDESCRIPTION: Server-side action that creates a new Unkey API key associated with the authenticated user's ID, leveraging Clerk's auth context to identify the user.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\nimport { auth } from \"@clerk/nextjs\";\nimport { Unkey } from \"@unkey/api\";\nexport async function create(formData: FormData) {\n  \"use server\";\n  const { userId } = auth();\n  if (!userId) {\n    return null;\n  }\n  const token = process.env.UNKEY_ROOT_KEY;\n  const apiId = process.env.UNKEY_API_ID;\n\n  if (!token || !apiId) {\n    return null;\n  }\n\n  const name = (formData.get(\"name\") as string) ?? \"My Awesome API\";\n  const unkey = new Unkey({ token });\n  const key = await unkey.keys.create({\n    name: name,\n    ownerId: userId,\n    apiId,\n  });\n  return { key: key.result };\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Override with Namespace ID in TypeScript\nDESCRIPTION: Example showing how to delete a ratelimit override using a namespace ID and user identifier.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/delete-override.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.deleteOverride({\n    identifier: \"user_123\",\n    namespaceId:\"rlns_12345\", \n})\n```\n\n----------------------------------------\n\nTITLE: Tagging a Verification Request with Unkey\nDESCRIPTION: This snippet shows how to include tags when verifying API keys with Unkey. The example tags a specific endpoint path, which can later be used for filtering analytics data.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST 'https://api.unkey.dev/v1/keys.verifyKey' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"key\": \"<API_KEY>\",\n    \"apiId\": \"api_<API_ID>\",\n    \"tags\": [ \"path=/my/endpoint\" ],\n  }'\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Unkey Next.js SDK\nDESCRIPTION: Example of disabling anonymous telemetry data collection in the Unkey SDK using the disableTelemetry configuration flag. By default, Unkey collects anonymous usage data to improve the SDK.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/nextjs/README.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GET = withUnkey(async (req) => {\n  // ...\n}, { disableTelemetry: true });\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth 2.0 SSO in Python Flask\nDESCRIPTION: This Python code shows how to integrate OAuth 2.0 for SSO in a Flask application using Google as the identity provider. It registers Google OAuth, sets up login and authorization routes, and handles the OAuth flow to retrieve user information.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/single-sign-on.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Example using OAuth 2.0 with Flask and Authlib\nfrom authlib.integrations.flask_client import OAuth\n\napp = Flask(__name__)\noauth = OAuth(app)\n\ngoogle = oauth.register(\n    name='google',\n    client_id='YOUR_CLIENT_ID',\n    client_secret='YOUR_CLIENT_SECRET',\n    access_token_url='https://accounts.google.com/o/oauth2/token',\n    access_token_params=None,\n    authorize_url='https://accounts.google.com/o/oauth2/auth',\n    authorize_params=None,\n    api_base_url='https://www.googleapis.com/oauth2/v1/',\n    client_kwargs={'scope': 'openid email profile'},\n)\n\n@app.route('/login')\ndef login():\n    redirect_uri = url_for('authorize', _external=True)\n    return google.authorize_redirect(redirect_uri)\n\n@app.route('/authorize')\ndef authorize():\n    token = google.authorize_access_token()\n    resp = google.get('userinfo')\n    user_info = resp.json()\n    # Use user_info for your application logic\n    return user_info\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Verifying Nested Permissions with Unkey API\nDESCRIPTION: Example of verifying an API key against complex nested permission requirements using OR/AND logic combinations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/authorization/verifying.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"apiId\": \"api_1234\",\n    \"key\": \"sk_1234\",\n    \"authorization\": {\n      \"permissions\": {\n        \"or\": [\n          \"admin\",\n          {\n            \"and\": [\n              \"dns.record.read\",\n              \"dns.record.update\"\n            ]\n          }\n        ]\n      }\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating API Key with Daily Refill\nDESCRIPTION: Creates a new API key with 100 daily uses that automatically refills at midnight. The request specifies the initial remaining uses count and refill configuration including interval and amount.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/refill.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <UNKEY>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"apiId\":\"<API_ID>\",\n    \"remaining\": 100,\n    \"refill\": {\n      \"interval\": \"daily\",\n      \"amount\": 100\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Listing Identities with Pagination in Unkey Python SDK\nDESCRIPTION: Example of listing identities with pagination using the Unkey Python SDK. The code initializes the Unkey client, makes the initial list request with a limit parameter, and demonstrates how to handle pagination using the next() method.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/identities.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.identities.list(limit=100)\n\nif res.object is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key Details with Unkey in Rust\nDESCRIPTION: Demonstrates how to get details of a specific API key using the Unkey client. It creates a request for key information and handles the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse unkey::models::GetKeyRequest;\nuse unkey::Client;\n\nasync fn get_key() {\n    let c = Client::new(\"unkey_ABC\");\n    let req = GetKeyRequest::new(\"key_123\");\n\n    match c.get_key(req).await {\n        Ok(res) => println!(\"{res:?}\"),\n        Err(err) => eprintln!(\"{err:?}\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for a Single API Call\nDESCRIPTION: Shows how to override the default retry strategy for a single API call by providing a RetryConfig object with a backoff strategy.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey.utils import BackoffStrategy, RetryConfig\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.liveness.check(,\n    RetryConfig(\"backoff\", BackoffStrategy(1, 50, 1.1, 100), False))\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Request with Unkey SDK\nDESCRIPTION: Creates an Unkey client instance and makes an asynchronous API request using asyncio to check liveness. It requires an environment variable for authentication.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Asynchronous Example\nimport asyncio\nimport os\nfrom unkey_py import Unkey\n\nasync def main():\n    s = Unkey(\n        bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n    )\n    res = await s.liveness.check_async()\n    if res.object is not None:\n        # handle response\n        pass\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing Ratelimiting for OTP Verification in Next.js\nDESCRIPTION: This code snippet demonstrates how to implement ratelimiting for the OTP verification endpoint. It uses a separate namespace and more restrictive limits compared to the sending endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimiting-otp.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function verifyOTP(prevState: any, formData: FormData) {\n  try {\n    // check for forwarded\n    let forwardedIP = headers().get(\"x-forwarded-for\");\n    // check for real-ip\n    let realIP = headers().get(\"x-real-ip\");\n    if (forwardedIP) {\n      forwardedIP.split(/, /)[0];\n    }\n    if (realIP) {\n      realIP = realIP.trim();\n    }\n\n    const code = formData.get(\"code\") as string | null;\n\n    if (!code) {\n      return {\n        success: false,\n        error: \"Code was not supplied, please try again\",\n        statusCode: 400,\n      };\n    }\n\n    const { success, reset } = await unkey.limit(\n      forwardedIP || realIP || \"no-ip\",\n    );\n    const millis = reset - Date.now();\n    const timeToReset = Math.floor(millis / 1000);\n\n    if (!success) {\n      return {\n        success: false,\n        error: `You have been rate limited, please wait ${timeToReset} seconds and try entering a new code`,\n        statusCode: 429,\n      };\n    }\n    // Handle verification of your OTP\n```\n\n----------------------------------------\n\nTITLE: Creating an API using Unkey Go SDK\nDESCRIPTION: This example demonstrates how to use the Unkey Go SDK to create an API. It includes setting up the client with authentication, creating a request, and handling the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/go/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\tunkey \"github.com/unkeyed/unkey/sdks/golang\"\n\t\"github.com/unkeyed/unkey/sdks/golang/models/components\"\n\t\"github.com/unkeyed/unkey/sdks/golang/models/operations\"\n\t\"log\"\n)\n\nfunc main() {\n\ts := unkey.New(\n\t\tunkey.WithSecurity(\"<YOUR_BEARER_TOKEN_HERE>\"),\n\t)\n\n\trequest := operations.CreateAPIRequestBody{\n\t\tName: \"my-api\",\n\t}\n\n\tctx := context.Background()\n\tres, err := s.CreateAPI(ctx, request)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif res != nil {\n\t\t// handle response\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unkey Authentication in Hono\nDESCRIPTION: TypeScript code showing how to set up a basic Hono application with Unkey authentication middleware.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/hono.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { unkey, UnkeyContext } from \"@unkey/hono\";\n\nconst app = new Hono<{ Variables: { unkey: UnkeyContext } }>();\n\napp.use(\"*\", unkey());\n\napp.get(\"/\", (c) => {\n\treturn c.text(\"Hello Hono!\");\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Next.js SDK with npm\nDESCRIPTION: Command to install the @unkey/nextjs package using npm. This is the first step required before implementing API key verification in your Next.js application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/nextjs/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/nextjs\n```\n\n----------------------------------------\n\nTITLE: List Keys Response Structure\nDESCRIPTION: Example response showing the structure of returned data including key details, rate limits, and total count.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/apis/list-keys.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"id\": \"key_HPnfviesBEKHnZBFFiY4fg\",\n      \"apiId\": \"api_QUGih1EMtBy9eSSf3vujmF\",\n      \"workspaceId\": \"ws_o17fS1LvwtRswPdncAcUM\",\n      \"start\": \"key_Crg\",\n      \"createdAt\": 1687642066782,\n      \"expires\": null,\n      \"ratelimit\": {\n        \"type\": \"fast\",\n        \"limit\": 11,\n        \"refillRate\": 11,\n        \"refillInterval\": 11\n      }\n    },\n    ...\n  ],\n  \"total\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Circuit Breaker in Spring Boot REST Controller\nDESCRIPTION: This snippet demonstrates how to implement a circuit breaker in a Spring Boot application using the resilience4j library. The @CircuitBreaker annotation is applied to a REST endpoint to handle failures when calling external services.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/api-circuit-breaker.mdx#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;\n\n@RestController\npublic class ExampleController {\n\n    @GetMapping(\"/example\")\n    @CircuitBreaker\n    public String exampleEndpoint() {\n        // Call to external service\n        return \"Success Response\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Unkey Authentication with cURL\nDESCRIPTION: cURL command to test the protected endpoint by sending an API key in the Authorization header. This verifies that the Unkey integration is working correctly.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/express.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://localhost:8000/secret' \\\n  -H 'Authorization:Bearer <YOUR_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Creating Roles with Python Unkey SDK\nDESCRIPTION: Example of creating a new role using the Unkey Python SDK. The code demonstrates setting up the client with bearer authentication and creating a role with a name and description.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/permissions.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.permissions.create_role(request={\n    \"name\": \"dns.records.manager\",\n    \"description\": \"dns.records.manager can read and write dns records for our domains.\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Querying Top 10 Users by API Usage\nDESCRIPTION: Retrieves the top 10 users by total verification count for a specific API over the past 30 days. This is useful for internal dashboards to identify power users or unusual activity patterns.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&orderBy=total&order=desc&limit=10&groupBy=identity&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: Testing API Authentication\nDESCRIPTION: cURL command to test the API authentication with an Unkey bearer token.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/hono.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST 'http://localhost:8787/' \\\n  -H \"Authorization: Bearer <KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Verified API Key\nDESCRIPTION: This JSON object represents a typical response from the verify_key function when an API key is successfully verified. It includes the validity status, owner ID, and metadata.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/verify_key.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"valid\": true,\n\t\"ownerId\": \"glamboyosa\",\n\t\"meta\": {\n\t\t\"hello\": \"world\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Hono\nDESCRIPTION: TypeScript code showing how to implement rate limiting in a Hono application using the Unkey SDK.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/hono.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { Ratelimit } from \"@unkey/ratelimit\";\n\nconst app = new Hono();\n\nconst limiter = new Ratelimit({\n\tnamespace: \"hono-example\",\n \tlimit: 2,\n \tduration: \"30s\",\n \trootKey: process.env.UNKEY_ROOT_KEY\n});\n\napp.get(\"/\", (c) => {\n  const identifier = getUserId(); // or ip or anything else you want\n  const ratelimit = await limiter.limit(identifier)\n  if (!ratelimit.success){\n   return c.status(429).text(\"Please try again later\")\n  }\n\treturn c.text(\"Hello Hono!\");\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Aggregating Monthly Verifications in SQL\nDESCRIPTION: SQL query to aggregate total successful verifications per workspace and month. It filters out denied verifications and groups results by workspace, API, key, and time.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/high-frequency-usage-billing.mdx#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    workspaceId,\n    apiId,\n    keyId,\n    countState(*) AS total,\n    toStartOfMonth(fromUnixTimestamp64Milli(time)) AS time\nFROM key_verifications__v2\nWHERE deniedReason IS NULL\nGROUP BY\n    workspaceId,\n    apiId,\n    keyId,\n    time\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rate Limit Override Using Namespace Name in TypeScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a rate limit override using the namespace name. It uses the Unkey client to make an asynchronous API call with the user identifier and namespace name as parameters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/get-override.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst override = await unkey.getOverride({\n  identifier:\"user.example\", \n  namespaceName: \"email.outbound\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Upstash Redis Store for Unkey Cache\nDESCRIPTION: Sets up a cache store using Upstash Redis, a serverless database with Redis compatibility. Requires Upstash Redis REST URL and token for authentication.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UpstashRedisStore } from \"@unkey/cache/stores\";\nimport { Redis } from \"@upstash/redis\";\n\nconst redis = new Redis({\n  url: <UPSTASH_REDIS_REST_URL>,\n  token: <UPSTASH_REDIS_REST_TOKEN>,\n})\n\nconst redisStore = new UpstashRedisStore({\n  redis\n})\n```\n\n----------------------------------------\n\nTITLE: Testing the Authenticated Endpoint\nDESCRIPTION: Shows how to test the protected endpoint by making a cURL request with an API key obtained from the Unkey dashboard. The key is passed in the Authorization header as a Bearer token.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/bun.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8000 -H \"Authorization: Bearer <KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Listing API Keys with Unkey in Rust\nDESCRIPTION: Demonstrates how to list API keys for a specific API using the Unkey client. It creates a list request and handles the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse unkey::models::ListKeysRequest;\nuse unkey::Client;\n\nasync fn list_keys() {\n    let c = Client::new(\"unkey_ABC\");\n    let req = ListKeysRequest::new(\"api_123\");\n\n    match c.list_keys(req).await {\n        Ok(res) => println!(\"{res:?}\"),\n        Err(err) => eprintln!(\"{err:?}\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Store Implementation\nDESCRIPTION: Example of implementing a Cloudflare store using the CloudflareStore class with required configuration parameters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CloudflareStore } from \"@unkey/cache/stores\";\n\nconst cloudflare = new CloudflareStore({\n  cloudflareApiKey: \"<CLOUDFLARE_API_KEY>\",\n  zoneId: \"<CLOUDFLARE_ZONE_ID>\",\n  domain: \"<YOUR_CACHE_DOMAIN>\",\n  cacheBuster: \"<CACHE_STORE_VERSION>\",\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Ratelimit Package\nDESCRIPTION: Command to install the @unkey/ratelimit package which provides ratelimiting functionality for the Express application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/express.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Handling Unauthorized Authentication Error in JSON\nDESCRIPTION: Shows the JSON response structure for a 401 Unauthorized error when authentication fails. This includes a request ID, error title, detailed message, status code, and error type URL.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/auth.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"requestId\": \"req_abc123xyz789\"\n  },\n  \"error\": {\n    \"title\": \"Unauthorized\",\n    \"detail\": \"The provided root key is invalid or has been revoked\",\n    \"status\": 401,\n    \"type\": \"https://unkey.com/docs/errors/unauthorized\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limit Override with namespaceName in Unkey\nDESCRIPTION: Sets a rate limit override for a specific user using namespaceName to identify the rate limit group. This example sets a limit of 10 requests per 60 seconds for user_123 in the 'email.outbound' namespace.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/set-override.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst override = await unkey.ratelimits.setOverride({\n    identifier: \"user_123\",\n    limit: 10,\n    duration: 60000,\n    namespaceName: \"email.outbound\",\n    async: true\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying a Key in Unkey\nDESCRIPTION: Verify a key by making a POST request to the Unkey API. The response indicates whether the key is valid and provides information about the connected identity.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/identities/shared-ratelimits.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst verifyKeyResponse = await fetch(`https://api.unkey.dev/v1/keys.verifyKey`, {\n    method: \"POST\",\n    headers: {\n    \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n        apiId: apiId,\n        key: key.key,\n    }),\n});\n\nconst verified = await verifyKeyResponse.json<{\n    valid: boolean;\n    identity: {\n        id: string;\n        externalId: string;\n        meta: unknown;\n    };\n}>();\n```\n\n----------------------------------------\n\nTITLE: Response from Verifying a Disabled Key in JSON\nDESCRIPTION: This JSON response shows the result of verifying a disabled key. The response contains the keyId, a 'valid' flag set to false, an empty meta object, and an 'enabled' flag also set to false indicating the key is currently disabled.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/enabled.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keyId\": \"<KEY_ID>\",\n  \"valid\": false,\n  \"meta\": {},\n  \"enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Unkey Override Client\nDESCRIPTION: Shows how to initialize the Unkey Override client with a root API key. This setup is required before performing any override operations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Override } from \"@unkey/ratelimit\"\n\nconst unkey = new Override({\n  rootKey: process.env.UNKEY_ROOT_KEY,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Cache Table in libSQL/Turso\nDESCRIPTION: SQL command to create the required table structure for the libSQL cache store. Defines columns for key, value, freshUntil, and staleUntil to manage cache entries.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS cache (\n  key TEXT PRIMARY KEY,\n  value TEXT NOT NULL,\n  freshUntil INTEGER NOT NULL,\n  staleUntil INTEGER NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Verification in Server Route\nDESCRIPTION: Server-side route handler that checks for valid API keys using the Unkey context.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/nuxt/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  if (!event.context.unkey.valid) {\n    throw createError({ statusCode: 403, message: \"Invalid API key\" })\n  }\n\n  // return authorised information\n  return {\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable API Route Costs with Unkey in TypeScript\nDESCRIPTION: An improved implementation using Unkey to handle API key verification and usage tracking. This code demonstrates how Unkey simplifies the process by eliminating the need for a separate database and handling various error conditions.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/cost-per-api-route.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { serve } from '@hono/node-server'\nimport { createMiddleware } from \"hono/factory\";\nimport { verifyKey } from \"@unkey/api\";\n\nconst app = new Hono();\n\ntype UnkeyResult = Awaited<ReturnType<typeof verifyKey>>[\"result\"];\n\ndeclare module \"hono\" {\n  interface ContextVariableMap {\n    unkey: UnkeyResult;\n  }\n}\n\n// Middleware to verify API key with specified cost\nconst verifyKeyWithCost = (cost: number) => createMiddleware(async (c, next) => {\n  const key = c.req.header(\"X-API-Key\");\n  if (!key) {\n    return c.json({ error: \"No API key provided\" }, 401);\n  }\n\n  const { result, error } = await verifyKey({\n    key,\n    remaining: {\n      cost,\n    },\n    apiId: \"API_ID_FROM_UNKEY\",\n  });\n\n  /**\n  * Handle Unkey Errors\n  * We have others but not important for this example\n  */\n  if (error) {\n    switch (error.code) {\n      case \"TOO_MANY_REQUESTS\":\n        return c.json({ error: \"Rate limit exceeded\" }, 429);\n      case \"BAD_REQUEST\":\n        return c.json({ error: \"Bad request\" }, 400);\n      case \"INTERNAL_SERVER_ERROR\":\n        return c.json({ error: \"Internal server error\" }, 500);\n      default:\n        return c.json({ error: \"Internal server error\" }, 500);\n    }\n  }\n  /** Handle Unkey Result if it's not valid such as\n  * Ratelimited, disabled, expired or no remaining credits\n  * There are other errors but they're not needed for this example\n  **/\n  if (!result.valid) {\n    switch (result.code) {\n      case \"DISABLED\":\n        return c.json({ error: \"API key is disabled\" }, 401);\n      case \"USAGE_EXCEEDED\":\n        return c.json({ error: \"API key usage exceeded\" }, 429);\n      case \"NOT_FOUND\":\n        return c.json({ error: \"API key not found\" }, 404);\n      default:\n        return c.json({ error: \"Internal server error\" }, 500);\n    }\n  }\n  /** Add verification result to context for this example to show how Unkey works\n  * This can also be used in a route handler for additional business logic\n  **/\n  c.set(\"unkey\", result);\n  await next();\n});\n\n// Cheap endpoint - costs 1 credit\napp.get(\"/cheap-endpoint\", verifyKeyWithCost(1), (c) => {\n  return c.json({\n    message: \"Accessed cheap endpoint\",\n    cost: 1,\n    verificationResult: c.get(\"unkey\")\n  });\n});\n\n// Expensive endpoint - costs 5 credits\napp.get(\"/expensive-endpoint\", verifyKeyWithCost(5), (c) => {\n  return c.json({\n    message: \"Accessed expensive endpoint\",\n    cost: 5,\n    verificationResult: c.get(\"unkey\")\n  });\n});\n\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Creating an Identity with Rate Limits in Unkey Python SDK\nDESCRIPTION: Example of creating a new identity with external ID and rate limits using the Unkey Python SDK. The code initializes the Unkey client using an environment variable for authentication and sends a create request with rate limit configurations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/identities.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.identities.create(request={\n    \"external_id\": \"user_123\",\n    \"ratelimits\": [\n        {\n            \"name\": \"tokens\",\n            \"limit\": 10,\n            \"duration\": 1000,\n        },\n        {\n            \"name\": \"tokens\",\n            \"limit\": 10,\n            \"duration\": 1000,\n        },\n    ],\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @unkey/ratelimit in TypeScript\nDESCRIPTION: Demonstrates the basic usage of the ratelimit library to check if a request should be allowed or rejected based on the ratelimit.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/ratelimit.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { success } = await unkey.limit(\"my-user-id\")\nif (!success){\n  // reject request\n}\n// handle request\n```\n\n----------------------------------------\n\nTITLE: Creating a Zod schema for form validation with React Hook Form\nDESCRIPTION: A TypeScript example showing how to define a Zod validation schema for a form that captures project details, including validation for text fields and file uploads.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/learn-by-building.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst formSchema = z.object({\n\tprojectName: z.string().min(2).max(50),\n\tcategory: z.string().min(2).max(50),\n\tprojectDescription: z\n\t\t.string()\n\t\t.min(10, { message: \"Must be 10 or more characters long\" })\n\t\t.max(500, { message: \"Must be less than 500 characters long\" }),\n\tprojectImage: z\n\t\t.instanceof(File)\n\t\t.refine(\n\t\t\t(file) => !ACCEPTED_IMAGE_TYPES.includes(file?.type),\n\t\t\t\"Only .jpg, .jpeg and .png formats are supported.\",\n\t\t)\n\t\t.optional(),\n});\n```\n\n----------------------------------------\n\nTITLE: Response Structure for API Configuration Retrieval\nDESCRIPTION: Example of the response structure when retrieving an API configuration. The response includes the API's ID, name, and the workspace ID it belongs to.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/apis/get.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n    id: 'api_123',\n    name: 'My API',\n    workspaceId: 'ws_123'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/ratelimit with pnpm\nDESCRIPTION: Shows how to install the @unkey/ratelimit package using pnpm package manager.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/ratelimit.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Caching with @unkey/cache\nDESCRIPTION: Shows a more complex setup with multiple namespaces, different store configurations, and type-safe usage of the cache.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Namespace, createCache } from \"@unkey/cache\";\nimport { MemoryStore, CloudflareStore} from \"@unkey/cache/stores\";\n\n/**\n* Define your data types.\n* You can hopefully reuse some of these from your database models.\n*/\ntype User = {\n  email: string;\n};\n\ntype Account = {\n  name: string;\n};\n\n/**\n* Configure the swr cache defaults.\n*/\nconst fresh = 60_000; // fresh for 1 minute\nconst stale = 900_000; // stale for 15 minutes\n\n/**\n* Create your store instances\n*/\nconst memory = new MemoryStore({\n    persistentMap: new Map()\n});\nconst cloudflare = new CloudflareStore({\n  cloudflareApiKey: \"<CLOUDFLARE_API_KEY>\",\n  zoneId: \"<CLOUDFLARE_ZONE_ID>\",\n  domain: \"<YOUR_CACHE_DOMAIN>\",\n})\n\n/**\n* Create your cache instance\n*/\nconst cache = createCache({\n  account: new Namespace<Account>(ctx, {\n    stores: [memory],\n    fresh, // use the defaults defined above or a custom value\n    stale,\n  }),\n  user: new Namespace<User>(ctx, {\n    // tiered cache, checking memory first, then cloudflare\n    stores: [memory, cloudflare],\n    fresh,\n    stale,\n  }),\n});\n\nawait cache.account.set(\"key\", { name: \"x\" });\n\nconst user = await cache.user.get(\"user_123\");\n\n// typescript error, because `email` is not a key of `Account`\nawait cache.account.set(\"key\", { email: \"x\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Ratelimiting for Faster Response\nDESCRIPTION: Shows two ways to enable asynchronous ratelimiting, which offers 98% accuracy with faster response times - either in the initial configuration or on individual limit calls.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimit-trpc-routes.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = new Ratelimit({\n  rootKey: env.UNKEY_ROOT_KEY,\n  namespace: \"posts.create\",\n  limit: 3,\n  duration: \"5s\",\n  async: true,\n});\n\n// or\n\nconst { success } = await unkey.limit(ctx.session.user.id, {\n  async: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Rate Limit Override in Unkey\nDESCRIPTION: This snippet shows the expected response structure when setting a rate limit override in Unkey. The response includes an overrideId that uniquely identifies the created override.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/set-override.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ \n  result: {\n     overrideId: 'rlor_12345' \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote libSQL/Turso Store for Unkey Cache\nDESCRIPTION: Initializes a libSQL store with a remote Turso database connection. Requires a libSQL client configured with a URL and authentication token.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LibSQLStore } from \"@unkey/cache/stores\";\nimport { createClient } from \"@libsql/client\";\n\nconst client = createClient({\n  url: \"libsql://...\",\n  authToken: \"...\",\n});\n\nconst store = new LibSQLStore({\n  client,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Ratelimit Override with Unkey API in TypeScript\nDESCRIPTION: Creates a ratelimit override for all users with a specific domain, setting a custom limit and duration. The example demonstrates how to give higher quotas to enterprise customers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/ratelimiting/automated-overrides.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Unkey } from \"@unkey/api\";\n\nconst unkey = new Unkey({\n  rootKey: process.env.UNKEY_ROOT_KEY!,\n});\n\nawait unkey.ratelimits.setOverride({\n  namespaceName: \"email.send\",\n  // set the override for all users with this domain\n  identifier: \"*@calendso.com\",\n  limit: 10,\n  duration: 60_000, // 1 minute\n  async: true\n})\n```\n\n----------------------------------------\n\nTITLE: API Key Creation Response in TypeScript\nDESCRIPTION: This snippet shows the expected response format when successfully creating an API key with Unkey. It includes the generated key and a unique key identifier.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  result: {\n    key: \"xyz_AS5HDkXXPot2MMoPHD8jnL\"\n    keyId: \"key_YALWkHZaA4neUa1JJoXTAw\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ratelimit in a Request Handler\nDESCRIPTION: Shows how to use the configured Ratelimit instance in a request handler function to limit requests based on a user identifier.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/ratelimit.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handler(request) {\n\nconst identifier = request.getUserId() // or ip or anything else you want\n\nconst ratelimit = await unkey.limit(identifier)\nif (!ratelimit.success){\n  return new Response(\"try again later\", { status: 429 })\n}\n\n// handle the request here\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing RPC Endpoint Format in Unkey API\nDESCRIPTION: Example of the standardized RPC method format used in the Unkey API after migration to Cloudflare Workers. The format follows a structured pattern that makes versioning easier and more consistent.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-12-15.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.unkey.dev/{version}/{service}.{method}\n```\n\n----------------------------------------\n\nTITLE: Handling API Key Retrieval Errors in TypeScript\nDESCRIPTION: Demonstrates how to handle errors when retrieving an API key configuration. The example shows how to check for an error object and access the error message when a key is not found.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/get.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result, error } = await unkey.keys.get({ keyId: \"key_123\" });\n\nif (error){\n  console.log(error.message);\n  // => \"Key not found\"\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Updating Key Configuration with Unkey Elixir SDK\nDESCRIPTION: This snippet demonstrates how to use the UnkeyElixirSdk.update_key function to modify a key's configuration. It updates the key's name, sets a rate limit, and adjusts the remaining uses. The function is wrapped in a try-catch block for error handling.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/update_key.mdx#2025-04-10_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n   try do\n     :ok = UnkeyElixirSdk.update_key(\"key_cm9vdCBvZiBnb29kXa\", %{\n                \"name\" => \"my_new_key\",\n                \"ratelimit\" => %{\n                \"type\" => \"fast\",\n                \"limit\" => 15,\n                \"refillRate\" => 2,\n                \"refillInterval\" => 500\n                },\n                \"remaining\" => 3\n            })\n\n    catch\n        err ->\n          Logger.error(err)\n      end\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Ratelimit Package\nDESCRIPTION: Command to install the @unkey/ratelimit package using npm package manager\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/ratelimit/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Update Endpoint in Java with Spring\nDESCRIPTION: This snippet demonstrates how to create a REST controller endpoint for updating API keys using Unkey. It sets up a PUT mapping that accepts a key ID, update request parameters as a JSON body, and an authorization token, then delegates the update operation to a KeyService.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/functions/update.mdx#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\n@RestController\npublic class APIController {\n\n    private static IKeyService keyService = new KeyService();\n\n    @PutMapping(\"/update\")\n    public ResponseEntity<String> updateKey(\n            @RequestParam String keyId,\n            @RequestBody Map<String, Object> keyUpdateRequest,\n            @RequestHeader(\"Authorization\") String authToken\n    ) {\n        // Delegate the creation of the key to the KeyService\n        return keyService.updateKey(keyUpdateRequest, authToken, keyId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rate Limit Override Using Namespace ID in TypeScript\nDESCRIPTION: This code snippet shows how to retrieve a rate limit override using the namespace ID. It uses the Unkey client to make an asynchronous API call with the user identifier and namespace ID as parameters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/get-override.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst override = await unkey.getOverride({\n  identifier:\"user.example\", \n  namespaceId: \"rlns_1234\",  \n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Unkey SDK\nDESCRIPTION: Demonstrates how to handle paginated results using the Unkey SDK by repeatedly calling the next() method until there are no more pages to fetch.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.identities.list(limit=100)\n\nif res.object is not None:\n    while True:\n        # handle items\n\n        res = res.next()\n        if res is None:\n            break\n```\n\n----------------------------------------\n\nTITLE: Listing All Ratelimit Overrides with Unkey API in TypeScript\nDESCRIPTION: Lists all configured ratelimit overrides for a specific namespace. The response includes an array of overrides with their configurations, a pagination cursor, and the total count.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/ratelimiting/automated-overrides.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Unkey } from \"@unkey/api\";\n\nconst unkey = new Unkey({\n  rootKey: process.env.UNKEY_ROOT_KEY!,\n});\n\nconst res = await unkey.ratelimits.listOverrides({\n  namespaceName: \"email.send\",\n})\n\nconsole.log(res)\n\n{\n  \"result\": {\n    \"overrides\": [\n      {\n        \"id\": \"rlor_123\",\n        \"identifier\": \"*@calendso.com\",\n        \"limit\": 10,\n        \"duration\": 60000,\n        \"async\": true\n      }\n    ],\n    \"cursor\": \"eyJrZXkiOiJrZXlfMTIzNCJ9\",\n    \"total\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Get Override API Call in TypeScript\nDESCRIPTION: This code snippet illustrates the structure of the response received from a successful 'Get Override' API call. It includes details such as the override ID, identifier, limit, duration, and async flag.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/get-override.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n    id: \"rlor_4567\",\n    identifier: \"user.example\",\n    limit: 10,\n    duration: 60000,\n    async: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Method Signatures\nDESCRIPTION: TypeScript method signatures showing the constructor and limit method definitions\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/ratelimit/README.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew Ratelimit(config: RatelimitConfig)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n.limit(identifier: string, opts: LimitOptions): Promise<RatelimitResponse>\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Token Usage Limits\nDESCRIPTION: Configuration example for limiting both request counts and token usage across different LLM models.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/identities-beta.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ratelimits: [\n    // baseline ratelimit of 100 requests per second\n    {\n      name: \"requests::api\",\n      limit: 100,\n      duration: 1000,\n    },\n\n    // llama-v3p1-405b-instruct\n    {\n      // Limit the number of requests to 100 per minute\n      name: \"requests::llama-v3p1-405b-instruct\",\n      limit: 100,\n      duration: 60000,\n    },\n    {\n      // Limit the number of tokens consumed to 100k per hour\n      name: \"tokens::llama-v3p1-405b-instruct\",\n      limit: 100000,\n      duration: 60000,\n    },\n\n    // mixtral-8x22b-instruct\n    // Assuming this one is cheaper, we can set higher limits\n    {\n      // Limit the number of requests to 1000 per minute\n      name: \"requests::mixtral-8x22b-instruct\",\n      limit: 1000,\n      duration: 60000,\n    },\n    {\n      // Limit the number of tokens consumed to 20mil per hour\n      name: \"tokens::mixtral-8x22b-instruct\",\n      limit: 20_000_000,\n      duration: 60000,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Key with Unkey API in Bash\nDESCRIPTION: This snippet demonstrates how to disable a key using the Unkey API's keys.updateKey endpoint. The request requires an authorization token and sends a JSON payload with 'enabled' set to false and the specific keyId to be disabled.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/enabled.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.updateKey \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"enabled\": false,\n  \"keyId\": \"<keyId>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Using Ratelimiter in Request Handler with TypeScript\nDESCRIPTION: This code shows how to use the configured ratelimiter in a request handler. It checks if the request is within the rate limit and responds with a 429 status if the limit is exceeded.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/introducing-ratelimiting.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handler(request) {\n  const identifier = request.getUserId();\n\n  const ratelimit = await unkey.limit(identifier);\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n  // handle the request here\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/hono Package\nDESCRIPTION: Commands for installing the @unkey/hono package using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/hono.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/hono\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/hono\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/hono\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/hono\n```\n\n----------------------------------------\n\nTITLE: Migrating Plaintext API Keys to Unkey in Node.js\nDESCRIPTION: This snippet shows how to migrate plaintext API keys to Unkey by sending them directly to the migrations.createKeys endpoint. It demonstrates the structure for the request body including multiple keys with their associated metadata and requires a root key with encryption permissions.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/migrations/keys.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst keys = [\n  {\n    plaintext: \"my_plaintext_key\",\n    ownerId: \"hello\",\n    apiId: \"<UNKEY_API_ID>\", // the id of the API you created\n    //... other settings\n  },\n  {\n    plaintext: \"my_other_plaintext_key\",\n    name: \"name\",\n    apiId: \"<UNKEY_API_ID>\", // the id of the API you created\n    //... other settings\n  },\n]\n\nfetch(\"https://api.unkey.dev/v1/migrations.createKeys\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: \"Bearer <UNKEY_ROOT_KEY>\", // requires `api.*.encrypt_key` permissions\n  },\n  body: JSON.stringify(keys)\n})\n.then(res=>res.json())\n.then(res=>{console.log(res)})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rate Limit Override with Namespace Name in TypeScript\nDESCRIPTION: This snippet shows how to retrieve a rate limit override using the Unkey API with a namespace name. It uses the 'getOverride' method from the 'ratelimits' object.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/get-override.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst override = await unkey.ratelimits.getOverride({\n  identifier:\"user.example\",\n  namespaceName: \"email.outbound\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing tRPC route with Zod validation for category-based project queries\nDESCRIPTION: A TypeScript implementation of a tRPC procedure that retrieves projects filtered by category. It uses Zod for input validation and Drizzle ORM for database queries.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/learn-by-building.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n getProjectsByCategory: publicProcedure\n    .input(\n      z.object({\n        category: z.string().min(3),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const project = await ctx.db.query.projects.findMany({\n        where: eq(projects.category, input.category.toUpperCase()),\n        orderBy: (projects, { desc }) => [desc(projects.createdAt)],\n        limit: 50,\n        with: { steps: true },\n      });\n      return project;\n    }),\n```\n\n----------------------------------------\n\nTITLE: Deleting Ratelimit Override with Unkey API in TypeScript\nDESCRIPTION: Removes a ratelimit override for a specific identifier in a namespace. This is useful for scenarios like customer plan downgrades where special quotas should be revoked.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/ratelimiting/automated-overrides.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Unkey } from \"@unkey/api\";\n\nconst unkey = new Unkey({\n  rootKey: process.env.UNKEY_ROOT_KEY!,\n});\n\nawait unkey.ratelimits.deleteOverride({\n  namespaceName: \"email.send\",\n  identifier: \"*@customer.com\",\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Unkey SDK\nDESCRIPTION: Shows how to implement comprehensive error handling with the Unkey SDK by catching specific exception types for different HTTP status codes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey, models\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = None\ntry:\n    res = s.liveness.check()\n\n    if res.object is not None:\n        # handle response\n        pass\n\nexcept models.ErrBadRequest as e:\n    # handle e.data: models.ErrBadRequestData\n    raise(e)\nexcept models.ErrUnauthorized as e:\n    # handle e.data: models.ErrUnauthorizedData\n    raise(e)\nexcept models.ErrForbidden as e:\n    # handle e.data: models.ErrForbiddenData\n    raise(e)\nexcept models.ErrNotFound as e:\n    # handle e.data: models.ErrNotFoundData\n    raise(e)\nexcept models.ErrConflict as e:\n    # handle e.data: models.ErrConflictData\n    raise(e)\nexcept models.ErrTooManyRequests as e:\n    # handle e.data: models.ErrTooManyRequestsData\n    raise(e)\nexcept models.ErrInternalServerError as e:\n    # handle e.data: models.ErrInternalServerErrorData\n    raise(e)\nexcept models.SDKError as e:\n    # handle exception\n    raise(e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unkey Ratelimiter for OTP Verification\nDESCRIPTION: This snippet shows how to configure the Unkey ratelimiter specifically for the OTP verification endpoint. It uses a separate namespace and more restrictive limits compared to the sending endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimiting-otp.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = new Ratelimit({\n  rootKey: process.env.UNKEY_ROOT_KEY!,\n  namespace: \"otp-verify\",\n  limit: 2,\n  duration: \"30s\",\n});\n```\n\n----------------------------------------\n\nTITLE: Proposed 2025 Pricing Structure Table - Markdown\nDESCRIPTION: Markdown table detailing the proposed new pricing structure with multiple pro tiers based on request volumes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0009-pricing-updates.mdx#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Free | Pro Tier 1 | Pro Tier 2 | Pro Tier 3 | Pro Tier 4 | Pro Tier 5 | Pro Tier 6 | Pro Tier 7 | Enterprise  |\n| --- | --- | --- | --- | --- | --- | --- | ---| --- |\n| 150k Requests | Up To 250,000 Requests | Up To 500,000 Requests | UP To 1M Requests | Up To 2,000,000 Requests | Up to 10M Requests | Up to 50M Requests | Up 100M Requests | XM requests |\n| 7 Days Logs | 90 Days Logs | 90 Days Logs | 90 Days Logs | 90 Days Logs | 90 Days Logs | 90 Days Logs | 90 Days Logs | X Days Logs |\n| 30 days Audit | 90 Days Audit | 90 Days Audit | 90 Days Audit | 90 Days Audit | 90 Days Audit | 90 Days Audit | 90 Days Audit | X Days Audit |\n| 1k API keys | 1M API Keys | 1M API Keys | 1M API Keys | 1M API Keys | 1M API Keys | 1M API Keys | 1M API Keys | 1M API Keys |\n| Unlimited APIs | Unlimited APIs | Unlimited APIs | Unlimited APIs | Unlimited APIs | Unlimited APIs | Unlimited APIs | Unlimited APIs | Unlimited APIs |\n| $0 | $25 | $50 | $75 | $100 | $250 | $500 | $1000 | $? |\n```\n\n----------------------------------------\n\nTITLE: Enhancing Unkey Client Component with State and Server Action\nDESCRIPTION: Updated client component that imports the server action for API key creation and adds state management to handle the returned key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { create } from \"./create\";\nimport { useState } from \"react\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Debug Logging in Unkey Python SDK\nDESCRIPTION: This snippet shows how to enable debug logging for the Unkey SDK by passing a custom logger. It configures a standard Python logger and sets it to DEBUG level before passing it to the Unkey constructor as the debug_logger parameter.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom unkey_py import Unkey\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\ns = Unkey(debug_logger=logging.getLogger(\"unkey_py\"))\n```\n\n----------------------------------------\n\nTITLE: Testing the rate-limited endpoint\nDESCRIPTION: Command to test the rate-limited endpoint using curl. After a few requests, the rate limit will be reached and return an error.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/bun.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Tracking Key Usage Over Time in ClickHouse\nDESCRIPTION: Query implementation for tracking key usage statistics over a time period.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/clickhouse.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst dailyUsage = await ch.verifications.timeseries.perDay({\n  workspaceId: \"ws_123\",\n  keyspaceId: \"ks_123\",\n  startTime: startOfMonth.getTime(),\n  endTime: endOfMonth.getTime()\n});\n\n// dailyUsage will contain points with total verifications and valid verifications\n// [{x: timestamp, y: {total: 100, valid: 95}}, ...]\n```\n\n----------------------------------------\n\nTITLE: List Overrides by Namespace Name\nDESCRIPTION: Makes an API request to list rate limit overrides using a namespace name for filtering. Returns an array of override objects with their configurations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/list-overrides.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst overrides = await unkey.listOverrides({ \n    namespaceName: \"email.outbound\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid API Keys\nDESCRIPTION: Example of handling invalid API keys by implementing the handleInvalidKey function which allows custom responses when key verification fails.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/hono.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\napp.use(\n  \"*\",\n  unkey({\n    handleInvalidKey: (c, result) => {\n      return c.json({\n          error: \"unauthorized\",\n          reason: result.code,\n        }, 401);\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Key Verifications in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Unkey SDK to retrieve verification data for a specific API key. It shows the request syntax and how to handle both successful and error responses.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/verifications.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result, error } = await unkey.keys.getVerifications({ keyId: \"key_123\" });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result, error } = await unkey.keys.getVerifications({ keyId: \"key_123\" });\n\nif (error){\n  // error will be undefined if the request was successful\n}\n\n\n// result\n{\n  verifications: [\n    {\n      time: 1620000000000,\n      success: 100,\n      rateLimited: 0,\n      usageExceeded: 0\n    },\n    {\n      time: 1640000000000,\n      success: 142,\n      rateLimited: 11,\n      usageExceeded: 20\n    },\n    // ...\n  ]\n\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result, error } = await unkey.keys.getVerifications({ keyId: \"key_123\" });\n\nif (error){\n  console.log(error.message);\n  // => \"Key not found\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing All Roles with Python Unkey SDK\nDESCRIPTION: Example of listing all available roles using the Unkey Python SDK. The code shows how to retrieve a list of all roles in the system.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/permissions.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.permissions.list_roles()\n\nif res.response_bodies is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Querying Billable Workspaces in TypeScript\nDESCRIPTION: TypeScript function to query billable workspaces from a database. It filters workspaces based on Stripe customer ID, subscriptions, plan type, and deletion status.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/high-frequency-usage-billing.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst workspaces = await io.runTask(\"list workspaces\", async () =>\n    db.query.workspaces.findMany({\n    where: (table, { isNotNull, isNull, not, eq, and }) =>\n        and(\n            isNotNull(table.stripeCustomerId),\n            isNotNull(table.subscriptions),\n            not(eq(table.plan, \"free\")),\n            isNull(table.deletedAtM),\n        ),\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access Rules in robots.txt\nDESCRIPTION: Defines access rules for web crawlers and bots. Sets a global rule for all user agents (*) to disallow access to all paths (/). This configuration prevents search engines and other bots from crawling any content on the site.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/dashboard/app/robots.txt#2025-04-10_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-Agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Creating a temporary API key using cURL in Unkey\nDESCRIPTION: This cURL command demonstrates how to create a temporary API key by making a POST request to the Unkey API. The request includes parameters such as API ID, prefix, byte length, owner ID, and an expiration timestamp in milliseconds.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/temp-keys.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <UNKEY>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"apiId\":\"<API_ID>\",\n\t\"prefix\":\"xyz\",\n\t\"byteLength\":16,\n\t\"ownerId\":\"USER_ID\",\n\t\"expires\": 1718718673000,\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Listing in Java Spring Controller\nDESCRIPTION: This snippet demonstrates how to create a REST endpoint for listing API keys using the Unkey SDK in a Java Spring controller. It shows the proper use of request parameters, request body, and authorization header.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/api/list.mdx#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.unkey.unkeysdk.dto.GetAPIResponse;\n\n@RestController\npublic class APIController {\n\n    private static IAPIService apiService = new APIService();\n\n    @GetMapping(\"/keys\")\n    public ListKeysResponse listKeys(\n            @RequestParam String apiId,\n            @RequestBody(required = false) ListKeysRequest listKeyRquest,\n            @RequestHeader(\"Authorization\") String authToken) {\n        // Delegate the creation of the key to the IAPIService from the SDK\n        return iapiService.listKeys(listKeyRquest, apiId, authToken);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Usage Over 24 Hours with Unkey Analytics API\nDESCRIPTION: Retrieves hourly verification data for a specific user and API over the past 24 hours. This endpoint returns counts of valid and invalid verifications grouped by hour, allowing you to track recent usage patterns.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1736673687000&end=1736760087000&externalId=user_123&groupBy=hour&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: Rendering Error Color Palette Grid in React with Tailwind CSS\nDESCRIPTION: This code snippet creates a 12-column grid of square divs, each representing a different shade of an error color palette. It uses Tailwind CSS classes for responsive layout, rounded corners, and background colors.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-errorA-1\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-2\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-3\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-4\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-5\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-6\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-7\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-8\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-9\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-10\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-11\"/>\n  <div className=\"rounded-lg aspect-square bg-errorA-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fetching Rate Limit Overrides by Namespace Name in TypeScript\nDESCRIPTION: Lists all rate limit overrides for a specified namespace using its name. This approach allows targeting namespaces by their semantic names instead of IDs.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/list-overrides.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst overrides = await unkey.ratelimits.listOverrides({\n    namespaceName: \"email.outbound\"\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Missing API Key Response\nDESCRIPTION: Demonstrates how to customize the response when an API key is missing by handling it directly in the getKey function rather than using the default 401 error.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/hono.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\napp.use(\n  \"*\",\n  unkey({\n    getKey: (c) => {\n      const key = c.req.header(\"x-api-key\");\n      if (!key) {\n        return c.text(\"missing api key\", 401);\n      }\n      return key;\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Authentication with Unkey API\nDESCRIPTION: Example of the HTTP Bearer authentication header format used with Unkey API. The root key is provided as a bearer token in the Authorization header.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/authentication.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAuthorization: Bearer unkey_1234567890\n```\n\n----------------------------------------\n\nTITLE: Verification Response Structure\nDESCRIPTION: Example JSON response structure from the verification endpoint showing the format of returned permissions.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/authorization/verifying.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  valid: true,\n  permissions: [\"permission1\", \"permission2\", ...]\n  //... omited for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Usage in Current Billing Period\nDESCRIPTION: Retrieves daily verification data for a specific user and API within the current billing period. This is useful for displaying consumption gauges or charts to users about their current usage.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&externalId=user_123&groupBy=day&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Caching in TypeScript\nDESCRIPTION: Demonstrates a common but suboptimal caching implementation, highlighting issues like manual type casting and lack of stale-while-revalidate support.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cache = new Some3rdPartyCache(...)\n\ntype User = { email: string };\n\nlet user = await cache.get(\"userId\") as User | undefined | null;\nif (!user){\n  user = await database.get(...)\n  await cache.set(\"userId\", user, Date.now() + 60_000)\n}\n\n// use user\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Namespaces with @unkey/cache\nDESCRIPTION: Demonstrates how to create and use multiple namespaces within a single cache instance, each with its own data type and caching settings.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCache, DefaultStatefulContext, Namespace } from \"@unkey/cache\";\nimport { CloudflareStore, MemoryStore } from \"@unkey/cache/stores\";\n\n/**\n * In serverless you'd get this from the request handler\n * See /docs/libraries/ts/cache/overview#context\n */\nconst ctx = new DefaultStatefulContext();\n\n/**\n * Define the type of your data, or perhaps generate the types from your database\n */\ntype User = {\n  id: string;\n  email: string;\n};\n\nconst memory = new MemoryStore({ persistentMap: new Map() });\n\nconst cloudflare = new CloudflareStore({\n  domain: \"cache.unkey.dev\",\n  zoneId: env.CLOUDFLARE_ZONE_ID!,\n  cloudflareApiKey: env.CLOUDFLARE_API_KEY!,\n});\n\n\ntype ApiKey = {\n  hash: string;\n  ownerId: string;\n  permissions: string[];\n};\n\nconst cache = createCache({\n  user: new Namespace<User>(ctx, {\n    stores: [memory, cloudflare],\n    fresh: 60_000, // Data is fresh for 60 seconds\n    stale: 300_000, // Data is stale for 300 seconds\n  }),\n  apiKey:new Namespace<ApiKey>(ctx, {\n    stores: [memory],\n    fresh: 10_000, // Data is fresh for 10 seconds\n    stale: 60_000, // Data is stale for 60 seconds\n  }),\n});\n\nasync function main() {\n  await cache.user.set(\"userId\", { id: \"userId\", email: \"user@email.com\" });\n  const user = await cache.user.get(\"userId\");\n  console.info(user);\n\n\n\n  await cache.apiKey.set(\"hash\", {hash:\"hash\", ownerId: \"me\", permissions: [\"do_many_things\"]})\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Adding Rate Limits to an Identity in Unkey\nDESCRIPTION: Update an identity to add rate limits by making a POST request to the Unkey API. This example adds two rate limits: one that allows 10 requests per day and another that allows 1000 tokens per minute.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/identities/shared-ratelimits.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst updateRes = await fetch(\"https://api.unkey.dev/v1/identities.updateIdentity\", {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${rootKey}`,\n    },\n    body: JSON.stringify({\n        identityId: identity.id,\n        ratelimits: [\n        /**\n         * We define a limit that allows 10 requests per day\n         */\n        {\n            name: \"requests\",\n            limit: 10,\n            duration: 24 * 60 * 60 * 1000, // 24h\n        },\n        /**\n         * And a second limit that allows 1000 tokens per minute\n         */\n        {\n            name: \"tokens\",\n            limit: 1000,\n            duration: 60 * 1000, // 1 minute\n        },\n        ],\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Unkey Analytics API for Verifications Grouped by Tag\nDESCRIPTION: This curl command retrieves verification metrics from the Unkey Analytics API, grouped by individual tags. It specifies a time range using start and end timestamps, includes the groupBy=tag parameter to get per-tag breakdowns, and requires authentication via an Unkey bearer token.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&groupBy=tag&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Retries in Unkey SDK\nDESCRIPTION: Shows how to initialize the Unkey SDK with custom retry logic, including configuring the number of retry attempts and custom backoff timing calculations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-08-25.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Unkey } from \"@unkey/api\";\n\nconst unkey = new Unkey({\n  token: \"<UNKEY_TOKEN>\",\n  retry: {\n    attempts: 10,\n    backoff: (previousAttempts) => previousAttempts * 1000, // 0s, 1s, 2s, 3s etc\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: List Overrides by Namespace ID\nDESCRIPTION: Makes an API request to list rate limit overrides using a namespace ID for filtering. Returns an array of override objects with their configurations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/list-overrides.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst overrides = await unkey.listOverrides({  \n    nameSpaceId:\"rlns_12345\",  \n});\n```\n\n----------------------------------------\n\nTITLE: Defining Identity Data Model in Unkey\nDESCRIPTION: Describes the structure of an identity in Unkey, including its unique identifier, external ID, and metadata. This model is used to represent users, organizations, or machine-users in the Unkey system.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/concepts/identities/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<ParamField body=\"id\" type string required>\n  The unique identifier of the identity in Unkey. You may use this to reference the identity in other API calls.\n</ParamField>\n\n<ParamField body=\"externalId\" type=\"string\" required>\n  The id of the identity in your system. This is used to link the identity in Unkey to your system.\n  For example your user id, or organization id if you are linking an organization.\n\n\n  If you are using a 3rd party auth provider like Clerk, WorkOS, or Auth0, they will provide you a unique id for users and organizations. This is what you should use as the externalId.\n\n  We want to build deeper integrations with them, so if you are using one of these, please let us know so we can prioritize it.\n</ParamField>\n\n\n<ParamField body=\"meta\" type=\"json\">\n  A JSON object that can store any additional information about the identity. \n  We do not make assumptions about this data, it's entirely up to you to decide what to store here.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Defining Specific API Permissions in Unkey RBAC\nDESCRIPTION: Examples of API-specific permissions in Unkey's RBAC system. These permission strings define read and update access for a specific API identified by api_1234.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/authentication.mdx#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\napi.api_1234.read_api\napi.api_1234.update_api\n```\n\n----------------------------------------\n\nTITLE: Setting Ratelimit Override Handler\nDESCRIPTION: Demonstrates how to implement a request handler that sets a ratelimit override for a specific user. The example shows setting a limit of 10 requests per 60 seconds with error handling and async execution.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handler(request) {\n\n  const identifier = request.getUserId() // or ip or anything else you want\n\n  const override = await unkey.setOverride({\n      identifier: identifier,\n      limit: 10,\n      duration: 60000,\n      namespaceName: \"email.outbound\",\n      async: true\n  })\n  if (override.error){\n    // handle the error here\n    console.error(override.error.message);\n    return;\n  }\n  // handle the request here\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking an API Key with Unkey in Rust\nDESCRIPTION: Shows how to revoke an API key using the Unkey client. It creates a revocation request for a specific key and handles the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse unkey::models::RevokeKeyRequest;\nuse unkey::Client;\n\nasync fn revoke_key() {\n    let c = Client::new(\"unkey_ABC\");\n    let req = RevokeKeyRequest::new(\"key_XYZ\");\n\n    match c.revoke_key(req).await {\n        Ok(_) => println!(\"Success\"), // Nothing on success\n        Err(err) => eprintln!(\"{err:?}\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unkey Analytics Complete Response\nDESCRIPTION: This JSON represents a complete analytics response from Unkey showing the top 5 users by verification count. Each entry includes detailed breakdown of verification outcomes and identity information for each user.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"valid\": 186,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 184,\n    \"unauthorized\": 0,\n    \"disabled\": 182,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 552,\n    \"apiId\": \"api_262b3iR7gkmP7aUyZ24uihcijsCe\",\n    \"identity\": {\n      \"id\": \"test_2ipPuAgat7xuVNGpK6AuPQ2Lbk11\",\n      \"externalId\": \"user_2rNBR4YXxKwzM8bzVrCR5q6dFlc\"\n    }\n  },\n  {\n    \"valid\": 190,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 161,\n    \"unauthorized\": 0,\n    \"disabled\": 200,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 551,\n    \"apiId\": \"api_262b3iR7gkmP7aUyZ24uihcijsCe\",\n    \"identity\": {\n      \"id\": \"test_2ipPuAiGJ3L3TUNKA6gp5eLeuyj7\",\n      \"externalId\": \"user_2rLz6cM63ZQ2v3IU0mryKbHetjK\"\n    }\n  },\n  {\n    \"valid\": 197,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 154,\n    \"unauthorized\": 0,\n    \"disabled\": 200,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 551,\n    \"apiId\": \"api_262b3iR7gkmP7aUyZ24uihcijsCe\",\n    \"identity\": {\n      \"id\": \"test_2ipPuAwJVE4Hdet3dyEpYreP8ob7\",\n      \"externalId\": \"user_2rLwFchrbyIDb4LUfFp4CpTG0L3\"\n    }\n  },\n  {\n    \"valid\": 191,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 184,\n    \"unauthorized\": 0,\n    \"disabled\": 171,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 546,\n    \"apiId\": \"api_262b3iR7gkmP7aUyZ24uihcijsCe\",\n    \"identity\": {\n      \"id\": \"test_2ipPuB23PVchmbkt9mMjjcpvLM8N\",\n      \"externalId\": \"user_2rLwCGvQKtnfnemH8HTL4cxWBFo\"\n    }\n  },\n  {\n    \"valid\": 207,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 171,\n    \"unauthorized\": 0,\n    \"disabled\": 162,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 540,\n    \"apiId\": \"api_262b3iR7gkmP7aUyZ24uihcijsCe\",\n    \"identity\": {\n      \"id\": \"test_2ipPuApEvEAXJo9UParPL6inHLLJ\",\n      \"externalId\": \"user_2rLDPPVfeNB2hn1ARMh2808CdwG\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Async Ratelimiting in Request Handler with TypeScript\nDESCRIPTION: This code demonstrates how to use async ratelimiting in a request handler. It sets the async option when calling the limit method.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/introducing-ratelimiting.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handler(request: NextApiRequest) {\n  const identifier = request.getUserId();\n\n  const ratelimit = await unkey.limit(identifier, {\n    async: true,\n  });\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n  // handle the request here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Remaining Key Uses Example in JSON\nDESCRIPTION: Example of limiting the number of times an API key can be used by setting the 'remaining' parameter. When this count reaches zero, the key becomes invalid.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/create_key.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"remaining\": 10\n```\n\n----------------------------------------\n\nTITLE: Creating Keys with Unkey Python SDK\nDESCRIPTION: Example of using the official Python SDK to create a key with various configurations including API ID, name, roles, permissions, rate limits, and more. Requires installation via pip and authentication token.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-12-06.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport unkey\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.create(request={\n    \"api_id\": \"api_123\",\n    \"name\": \"my key\",\n    \"external_id\": \"team_123\",\n    \"meta\": {\n        \"billingTier\": \"PRO\",\n        \"trialEnds\": \"2023-06-16T17:16:37.161Z\",\n    },\n    \"roles\": [\n        \"admin\",\n        \"finance\",\n    ],\n    \"permissions\": [\n        \"domains.create_record\",\n        \"say_hello\",\n    ],\n    \"expires\": 1623869797161,\n    \"remaining\": 1000,\n    \"refill\": {\n        \"interval\": unkey.CreateKeyInterval.DAILY,\n        \"amount\": 100,\n    },\n    \"ratelimit\": {\n        \"limit\": 10,\n        \"type\": unkey.CreateKeyType.FAST,\n        \"duration\": 60000,\n    },\n    \"enabled\": False,\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Identity from Unkey\nDESCRIPTION: Fetch an identity's details by making a GET request to the Unkey API with the identity ID. The response includes the identity's ID, external ID, metadata, and rate limits.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/identities/shared-ratelimits.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst getIdentityResponse = await fetch(`https://api.unkey.dev/v1/identities.getIdentity?identityId=${identityId}`, {\n    method: \"GET\",\n    headers: {\n        Authorization: `Bearer ${rootKey}`,\n    }\n});\n\nconst identity = await getIdentityResponse.json<{\n    id: string;\n    externalId: string;\n    meta: unknown;\n    ratelimits: Array<{ name: string; limit: number; duration: number }>;\n}>();\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Override Response Structure in TypeScript\nDESCRIPTION: This snippet illustrates the structure of the response when retrieving a rate limit override. It includes the override's ID, identifier, limit, duration, and async flag.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/get-override.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n    id: \"rlor_4567\",\n    identifier: \"user.example\",\n    limit: 10,\n    duration: 60000,\n    async: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Roles with Python Unkey SDK\nDESCRIPTION: Example of deleting an existing role using the Unkey Python SDK. The code shows how to delete a role by providing its role ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/permissions.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.permissions.delete_role(request={\n    \"role_id\": \"role_123\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Cost Parameter for Rate Limiting with Unkey\nDESCRIPTION: Example showing how to specify a cost for rate-limited requests. The cost parameter deducts multiple tokens from the rate limit window, useful for expensive operations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/limit.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await rl.limit(\"identifier\", { cost: 4 })\n```\n\n----------------------------------------\n\nTITLE: Displaying Verification Status in Vue Component\nDESCRIPTION: Vue component template showing how to access and display the Unkey verification status.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/nuxt/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <pre>Was verified: {{ wasVerified }}</pre>\n  </div>\n</template>\n\n<script setup>\nconst wasVerified = useState(() => ({ unkey: useRequestEvent()?.context?.unkey.valid }))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Verifying a Key's Environment in Unkey\nDESCRIPTION: This code shows how to verify an API key using the Unkey API, which returns the environment (test/live) the key belongs to in the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/environments.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"apiId\": \"api_1234\",\n    \"key\": \"sk_1234\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing the Next.js SDK with npm\nDESCRIPTION: Command to install the Unkey Next.js SDK package from npm, which provides a type-safe way to verify API keys in Next.js applications.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-01-19.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n npm install @unkey/nextjs\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v0.5.5\nDESCRIPTION: Documents the patch update to version 0.5.5 with dependency update to @unkey/api@0.33.1\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/ratelimit/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.5\n\n### Patch Changes\n\n- Updated dependencies [10120e0]\n  - @unkey/api@0.33.1\n```\n\n----------------------------------------\n\nTITLE: Running the Bun server\nDESCRIPTION: Command to start the Bun server with the implemented rate limiting functionality.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/bun.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Verification with Next.js SDK\nDESCRIPTION: Example of using the Unkey Next.js SDK to verify API keys in a Next.js route handler. The withUnkey wrapper provides access to the verification response through the req.unkey property.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-01-19.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextRequestWithUnkeyContext, withUnkey } from '@unkey/nextjs';\n\nexport const POST = withUnkey(async (req) => {\n\n  // Process the request here\n  // You have access to the verification response using `req.unkey`\n  console.log(req.unkey);\n\n  return new Response('Your API key is valid!');\n});\n```\n\n----------------------------------------\n\nTITLE: Partial Generation Test Case in TypeScript\nDESCRIPTION: This test case verifies the ability to generate specific fields of takeaways content. It requests only the tldr, specific elements of definitionAndStructure, and description within usageInAPIs for the term \"MIME types\".\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/generate-takeaways.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"partialGenerationTest\",\n  input: {\n    term: \"MIME types\",\n    fields: {\n      tldr: true,\n      definitionAndStructure: [0, 1],\n      usageInAPIs: {\n        description: true\n      }\n    }\n  },\n  expectedTaskRunResult: {\n    ok: true,\n    output: {\n      term: \"MIME types\",\n      takeaways: {\n        // Will be inferred from takeawaysSchema and FieldSelection\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Ratelimit Overrides via API\nDESCRIPTION: Example of using the API to create custom rate limit overrides for specific users or identifiers. This feature allows adjusting rate limits without deploying code changes, now available programmatically for integration with support tools.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-12-06.mdx#2025-04-10_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/ratelimits.setOverride \\\n  --header 'Authorization: Bearer unkey-root-key' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"namespaceName\": \"email.outbound\",\n    \"identifier\": \"user_123\",\n    \"limit\": 10,\n    \"duration\": 60000,\n    \"async\": true\n}'\n```\n\n----------------------------------------\n\nTITLE: Verifying a Key with Rate Limits in Unkey\nDESCRIPTION: Verify a key while enforcing rate limits by making a POST request to the Unkey API. This example checks against two rate limits: 'requests' and 'tokens', with the tokens request costing 200 of the available limit.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/identities/shared-ratelimits.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst verifiedWithRatelimitsResponse = await fetch(`https://api.unkey.dev/v1/keys.verifyKey`, {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n        apiId: apiId,\n        key: key.key,\n        ratelimits: [\n            {\n                name: \"requests\",\n            },\n            {\n                name: \"tokens\",\n                cost: 200,\n            },\n        ],\n    }),\n});\n\nconst verifiedWithRatelimits = await verifiedWithRatelimitsResponse.json<{\n    valid: boolean;\n    identity: {\n        id: string;\n        externalId: string;\n        meta: unknown;\n    };\n}>();\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key Usage\nDESCRIPTION: Verifies an API key and returns the remaining verification count. The response includes the key's validity status and number of remaining uses.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/refill.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\t\"key\": \"<NEW_KEY>\"\n\t}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keyId\": \"<KEY_ID>\",\n  \"valid\": true,\n  \"meta\": {},\n  \"remaining\": 99\n}\n```\n\n----------------------------------------\n\nTITLE: GetAPIResponse DTO for Unkey API Information\nDESCRIPTION: This code snippet defines the GetAPIResponse DTO class that represents the structure of the response when retrieving API information. It contains fields for the API's ID, name, and workspace ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/api/get.mdx#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class GetAPIResponse {\n    private String id;\n    private String name;\n    private String workspaceId;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key with UnkeyElixirSdk in Elixir\nDESCRIPTION: This snippet demonstrates how to use the verify_key function from UnkeyElixirSdk to verify an API key. It includes error handling with a try-catch block and logging.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/verify_key.mdx#2025-04-10_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n   try do\n     is_verified = UnkeyElixirSdk.verify_key(\"xyz_AS5HDkXXPot2MMoPHD8jnL\", %{\n      \"apiId\" => \"api_7oKUUscTZy22jmVf9THxDA\"\n     })\n\n    catch\n        err ->\n          Logger.error(err)\n      end\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with Unkey Hono Middleware\nDESCRIPTION: This code demonstrates how to set up authentication middleware using the @unkey/hono package. The middleware reads from the Authorization header and makes the verification result available in the request context.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-09-29.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\"\nimport { UnkeyContext, unkey } from \"@unkey/hono\";\n\nconst app = new Hono<{ Variables: { unkey: UnkeyContext } }>();\n\napp.use(\"*\", unkey());\n\n\napp.get(\"/somewhere\", (c) => {\n  // access the unkey response here to get metadata of the key etc\n  const ... = c.get(\"unkey\")\n\n  return c.text(\"yo\")\n})\n```\n\n----------------------------------------\n\nTITLE: Traditional Caching Approach in TypeScript\nDESCRIPTION: Shows a typical caching implementation with explicit cache checking, fetching from database on miss, and manual cache setting. This example illustrates the boilerplate and complexity that developers often face when implementing caching.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/announcing-unkey-cache-package.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cache = new Some3rdPartyCache(...)\n\ntype User = { email: string };\n\nlet user = await cache.get(\"chronark\") as User | undefined | null;\nif (!user) {\n  user = await db.query.users.findFirst({\n    where: (table, { eq }) => eq(table.id, \"chronark\"),\n  });\n  await cache.set(\"chronark\", user, Date.now() + 60_000)\n}\n\n// use user\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Request Handler\nDESCRIPTION: Example of implementing rate limiting in an async request handler function, checking limits and returning appropriate responses\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/ratelimit/README.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handler(request) {\n  const identifier = request.getUserId(); // or IP or anything else you want\n\n  const ratelimit = await unkey.limit(identifier);\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n\n  // handle the request here\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Unkey Middleware in Hono.js Application (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up a Hono.js application with the Unkey middleware for API key authentication. It shows the import of necessary modules, creation of a Hono app instance with type definition, application of the Unkey middleware, and a sample route that accesses the Unkey context.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/hono/README.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\"\nimport { UnkeyContext, unkey } from \"@unkey/hono\";\n\nconst app = new Hono<{ Variables: { unkey: UnkeyContext } }>();\n\napp.use(\"*\", unkey());\n\n\napp.get(\"/somewhere\", (c) => {\n  // access the unkey response here to get metadata of the key etc\n  const ... = c.get(\"unkey\")\n\n  return c.text(\"yo\")\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/cache with npm\nDESCRIPTION: Command to install the @unkey/cache package using npm.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/cache/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/cache\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys with Unkey SDK in Java Spring Controller\nDESCRIPTION: This snippet shows a Spring RestController method for deleting an API key using the Unkey SDK. It uses the KeyService to handle the deletion process and requires the key ID in the request body and an authorization token in the header.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/functions/revoke.mdx#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.unkey.unkeysdk.dto.KeyDeleteRequest;\n\n@RestController\npublic class APIController {\n\n    private static IKeyService keyService = new KeyService();\n\n    @DeleteMapping(\"/delete\")\n    public ResponseEntity<String> updateKey(\n            @RequestBody KeyDeleteRequest keyId,\n            @RequestHeader(\"Authorization\") String authToken) {\n        // Delegate the creation of the key to the KeyService\n        return keyService.deleteKey(authToken, keyId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Identity in Unkey\nDESCRIPTION: Create an identity by making a POST request to the Unkey API. The request includes an external ID (must be unique) and optional metadata. The response provides the generated identity ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/identities/shared-ratelimits.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst externalId = \"user_1234abc\";\n\nconst createIdentityResponse = await fetch(\"https://api.unkey.dev/v1/identities.createIdentity\", {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${rootKey}`,\n    },\n    body: JSON.stringify({\n        externalId,\n        meta: {\n        stripeCustomerId: \"cus_123\",\n        },\n    }),\n});\n\nconst { identityId } = await createIdentityResponse.json<{\n    identityId: string;\n}>();\n```\n\n----------------------------------------\n\nTITLE: Disabling telemetry in withUnkey\nDESCRIPTION: Demonstrates how to disable the anonymous telemetry data collection in the Unkey SDK by passing a boolean flag to the constructor.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/nextjs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GET = withUnkey(async (req) => {\n  // ...\n}, { disableTelemetry: true });\n```\n\n----------------------------------------\n\nTITLE: Fetching Rate Limit Overrides by Namespace ID in TypeScript\nDESCRIPTION: Lists all rate limit overrides for a specified namespace using its ID. Returns an array of override objects containing identifiers, limits, durations, and async settings.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/list-overrides.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst overrides = await unkey.ratelimits.listOverrides({\n    nameSpaceId:\"rlns_12345\",\n});\n```\n\n----------------------------------------\n\nTITLE: Performing GET Requests for Reading Data in Unkey API\nDESCRIPTION: Example of using a GET request to retrieve a key by ID. GET methods are used for reading data, with filtering, sorting, or pagination done via query parameters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl \"https://api.unkey.dev/v1/keys.getKey?keyId=key_123\" \\\n  -H \"Authorization: Bearer <ROOT_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Adding the Unkey root key to the environment configuration file.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/hono.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUNKEY_ROOT_KEY=\"YOUR_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Generating API Key Configuration in JSON\nDESCRIPTION: Example of JSON configuration that can be included in the meta field when creating an API key. This allows for storing custom metadata with the key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/create_key.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"billingTier\": \"PRO\",\n  \"trialEnds\": \"2023-06-16T17:16:37.161Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for API Creation in TypeScript\nDESCRIPTION: This code snippet shows the expected response structure when creating a new API with Unkey. The response includes a 'result' object containing the 'apiId' of the newly created API.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/apis/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n    apiId : \"api_123\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key Verification History with Unkey Python SDK\nDESCRIPTION: This example demonstrates how to retrieve verification history for a specific key using the Unkey Python SDK. The method requires key_id, owner_id, and date range parameters, along with a granularity specification for the returned data.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport unkey\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.get_verifications(request={\n    \"key_id\": \"key_1234\",\n    \"owner_id\": \"chronark\",\n    \"start\": 1620000000000,\n    \"end\": 1620000000000,\n    \"granularity\": unkey.Granularity.DAY,\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Hono Project - Package Manager Commands\nDESCRIPTION: Commands to create a new Hono project using different package managers (npm, pnpm, yarn, bun).\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/hono.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create hono@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create hono@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create hono@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun create hono@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Application with Yarn\nDESCRIPTION: Command to create a new Next.js application using Yarn.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Unkey API Credentials\nDESCRIPTION: Define the API ID and root key required for Unkey API authentication. These credentials can be found in the Unkey dashboard.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/identities/shared-ratelimits.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiId = \"api_XXX\";\nconst rootKey = \"unkey_XXX\";\n```\n\n----------------------------------------\n\nTITLE: Removing Permissions from Keys with Unkey Python SDK\nDESCRIPTION: This example demonstrates how to remove permissions from an API key using the Unkey Python SDK. Permissions can be removed by either specifying their ID or name in the permissions array.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.remove_permissions(request={\n    \"key_id\": \"<id>\",\n    \"permissions\": [\n        {\n            \"id\": \"perm_123\",\n        },\n        {\n            \"name\": \"dns.record.create\",\n        },\n    ],\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Deleting a Rate Limit Override with Namespace Name in TypeScript\nDESCRIPTION: This snippet shows how to delete a rate limit override for a specific user by providing the user identifier and namespace name. This approach uses the namespace name to identify the rate limit group.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/delete-override.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.ratelimits.deleteOverride({\n    identifier: \"user_123\",\n    namespaceName: \"email.outbound\",\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Retry Strategy\nDESCRIPTION: Demonstrates how to set a global retry strategy for all API operations by providing a RetryConfig object when initializing the SDK client.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey.utils import BackoffStrategy, RetryConfig\nfrom unkey_py import Unkey\n\ns = Unkey(\n    retry_config=RetryConfig(\"backoff\", BackoffStrategy(1, 50, 1.1, 100), False),\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.liveness.check()\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Bearer Token in Bash\nDESCRIPTION: Demonstrates how to use HTTP Bearer authentication with the Unkey API. The example shows a curl command to create a key using a root key for authentication.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/auth.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.unkey.dev/v1/keys.createKey\" \\\n  -H \"Authorization: Bearer unkey_1234567890\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"apiId\": \"api_1234\" }'\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Middleware in Go\nDESCRIPTION: A logging middleware that captures request details including method, path, status code, and latency. It demonstrates how middleware can wrap handlers to execute logic both before and after the main request processing.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc WithLogging(logger logging.Logger) Middleware {\n    return func(next HandleFunc) HandleFunc {\n        return func(ctx context.Context, s *Session) error {\n            start := time.Now()\n\n            // Call the next handler in the chain\n            err := next(ctx, s)\n\n            // Log after handling is complete\n            logger.InfoContext(ctx, \"request\",\n                slog.String(\"method\", s.r.Method),\n                slog.String(\"path\", s.r.URL.Path),\n                slog.Int(\"status\", s.responseStatus), // Captured from response\n                slog.String(\"latency\", time.Since(start).String()),\n            )\n\n            return err\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing key retrieval in withUnkey\nDESCRIPTION: Shows how to customize the way withUnkey retrieves the API key from the request, in this case from a URL search parameter instead of the default authorization header.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/nextjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GET = withUnkey(async (req) => {\n  // ...\n}, {\n\tgetKey: (req) => new URL(req.url).searchParams.get(\"key\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in JavaScript with Unkey API\nDESCRIPTION: Demonstrates how to handle errors when making requests to the Unkey API in JavaScript. It shows how to extract error details, handle validation errors specifically, and includes proper logging of requestId for support purposes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/errors.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const response = await fetch('https://api.unkey.com/v2/keys.create', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${rootKey}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(keyData)\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    // Extract and handle the error\n    const { meta, error } = data;\n    console.error(`Error ${error.status}: ${error.title}`, {\n      requestId: meta.requestId,\n      detail: error.detail,\n      docs: error.type\n    });\n\n    // Handle validation errors specifically\n    if (error.errors) {\n      error.errors.forEach(err => {\n        console.error(`- ${err.location}: ${err.message}`);\n      });\n    }\n\n    throw new Error(`API Error: ${error.detail}`);\n  }\n\n  return data.data; // Return just the data portion on success\n} catch (err) {\n  // Handle network errors or other exceptions\n  console.error('Request failed:', err);\n  throw err;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable API Route Costs with Redis in TypeScript\nDESCRIPTION: A basic implementation of API endpoint cost tracking using Redis to store and update user credits. This code includes middleware that verifies API keys, checks available credits, and deducts the appropriate cost for each endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/cost-per-api-route.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from '@hono/node-server'\nimport { Hono } from 'hono'\nimport { createClient } from 'redis'\nimport { createMiddleware } from 'hono/factory'\n\nconst app = new Hono()\n\n\nconst client = createClient();\n\nconst verifyKeyWithCost = (cost: number) => createMiddleware(async (c, next) => {\n  const key = c.req.header('X-API-Key');\n  if (!key) {\n    return c.json({ error: \"No API key provided\" }, 401);\n  }\n\n  const credits = await client.get(key);\n  if (credits === null) {\n    c.json({ error: \"Internal server error\" }, 500);\n  }\n\n  const remainingCredits = parseInt(credits) - cost;\n  if (remainingCredits < 0) {\n    c.json({ error: \"API key usage exceeded\" }, 429);\n  }\n\n  await client.set(key, remainingCredits.toString());\n  await next();\n});\n\n// Cheap endpoint (costs 1 credit)\napp.get('/cheap-endpoint', verifyKeyWithCost(1), (c) => {\n  return c.json({\n    message: \"Accessed cheap endpoint\",\n    cost: 1,\n  });\n});\n\n// Expensive endpoint (costs 5 credits)\napp.get('/expensive-endpoint', verifyKeyWithCost(5), (c) => {\n  return c.json({\n    message: \"Accessed expensive endpoint\",\n    cost: 5,\n  });\n});\n\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Deleting an API with Unkey Python SDK\nDESCRIPTION: This snippet shows how to delete an API using the Unkey Python SDK. It initializes the Unkey client with authentication and sends a DELETE request to remove the specified API based on its ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/apis.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.apis.delete(request={\n    \"api_id\": \"api_1234\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Response Format Examples for Unkey API\nDESCRIPTION: Demonstrates the two possible response formats from the Unkey API: success responses with a result field and error responses with detailed error information.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n{\n  result: T // the result depends on what method you called\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n{\n  error: {\n    // A machine readable error code\n    code: ErrorCode;\n\n    // A link to our documentation explaining this error in more detail\n    docs: string;\n\n    // A human readable short explanation\n    message: string;\n\n    // The request id for easy support lookup\n    requestId: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in Unkey Next.js SDK\nDESCRIPTION: Implementation of custom error handling for Unkey verification using the onError configuration option. This allows for tracking errors and customizing the error response returned to the client.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/nextjs/README.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GET = withUnkey(async (req) => {\n  // ...\n}, {\n\tonError: async (req, res) => {\n      await analytics.trackEvent(`Error ${res.code}: ${res.message}`)\n      return new NextResponse(\"Unkey error\", { status: 500 })\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Rate Limit Override with Namespace ID in TypeScript\nDESCRIPTION: This snippet demonstrates how to delete a rate limit override by using the namespace ID instead of the name. This approach uses the unique ID of the namespace to identify the rate limit group.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/delete-override.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.ratelimits.deleteOverride({\n    identifier: \"user_123\",\n    namespaceId: \"rlns_1234\",\n})\n```\n\n----------------------------------------\n\nTITLE: API Key Verification with Tags using cURL\nDESCRIPTION: Example of how to verify an API key while including tags in the request body using cURL. Shows the structure of the POST request to the Unkey API endpoint with custom tags.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/analytics.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"apiId\": \"api_1234\",\n  \"key\": \"sk_1234\",\n  \"tags\": [\n    \"tag1\",\n    \"path=/v1/my-resource/123\"\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Structured Error Response Format in Unkey API\nDESCRIPTION: This JSON snippet demonstrates the standard error response format returned by the Unkey API. It includes a machine-readable error code, human-readable error message, link to documentation, and a unique request ID for troubleshooting.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/errors/introduction.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  error: {\n    code: \"UNAUTHORIZED\",\n    message: \"We were unable to authorize your request. Either your key was missing, malformed or does not have the required permissions.\",\n    docs: \"https://unkey.api/docs/api-reference/errors/code/BAD_REQUEST\",\n    requestId: \"req_1234567890\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration\nDESCRIPTION: CORS headers configuration for Supabase function\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\":\n    \"authorization, x-client-info, x-unkey-api-key, content-type\",\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Unkey root key to environment variables\nDESCRIPTION: Adding the Unkey root key to the .env file for authentication with the Unkey service.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/bun.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUNKEY_ROOT_KEY=\"YOUR_KEY\"\n```\n\n----------------------------------------\n\nTITLE: AWS ECS Production Deployment for Unkey API\nDESCRIPTION: Command-line configuration for deploying Unkey API in an AWS ECS production environment. This setup includes comprehensive configuration for platform, region, database connections (primary and read replicas), Redis, ClickHouse analytics, and monitoring with OpenTelemetry and Prometheus.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/api/config.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nunkey api \\\n  --platform=\"aws\" \\\n  --region=\"us-east-1\" \\\n  --image=\"ghcr.io/unkeyed/unkey:latest\" \\\n  --redis-url=\"redis://user:password@redis.example.com:6379\" \\\n  --database-primary=\"mysql://user:password@primary.mysql.example.com:3306/unkey?parseTime=true\" \\\n  --database-readonly-replica=\"mysql://readonly:password@replica.mysql.example.com:3306/unkey?parseTime=true\" \\\n  --clickhouse-url=\"clickhouse://user:password@clickhouse.example.com:9000/unkey\" \\\n  --otel=true \\\n  --prometheus-port=9090\n```\n\n----------------------------------------\n\nTITLE: Initial Function Implementation\nDESCRIPTION: Basic Supabase function implementation that returns a greeting message\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\n\nconsole.log(\"Hello from Functions!\");\n\nserve(async (req) => {\n  const { name } = await req.json();\n  const data = {\n    message: `Hello ${name}!`,\n  };\n\n  return new Response(JSON.stringify(data), {\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Callout Component in Markdown\nDESCRIPTION: This snippet demonstrates the use of a custom Callout component in Markdown to emphasize important information about meeting necessity and time management.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/company/meetings.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Callout>\n  Always question if a meeting is necessary. Can the same information be shared in a document or a slack message? If so, do that instead.\n\n Fight for your time and the time of others.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Implementing API Information Retrieval with Unkey SDK in Spring Controller\nDESCRIPTION: This code snippet demonstrates how to create a REST endpoint that retrieves API information using the Unkey SDK. It uses a Spring controller with a GET mapping that accepts an API ID parameter and authorization header, then delegates to the Unkey SDK's APIService.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/api/get.mdx#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.myapp;\n\nimport com.unkey.unkeysdk.dto.GetAPIResponse;\n\n@RestController\npublic class APIController {\n\n    private static IAPIService apiService = new APIService();\n\n    @GetMapping(\"/get-api\")\n    public GetAPIResponse getAPI(\n            @RequestParam String apiId,\n            @RequestHeader(\"Authorization\") String authToken) {\n        // Delegate the creation of the key to the IAPIService from the SDK\n        return apiService.getAPI(apiId, authToken);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Remaining Verifications for an API Key with Unkey in Rust\nDESCRIPTION: Shows how to update the remaining verifications for an API key using the Unkey client. It creates an update request with a new value and operation type.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse unkey::models::{UpdateOp, UpdateRemainingRequest};\nuse unkey::Client;\n\nasync fn update_remaining() {\n    let c = Client::new(\"unkey_ABC\");\n    let req = UpdateRemainingRequest::new(\"key_123\", Some(100), UpdateOp::Set);\n\n    match c.update_remaining(req).await {\n        Ok(res) => println!(\"{res:?}\"),\n        Err(err) => eprintln!(\"{err:?}\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Daily Usage Per Key\nDESCRIPTION: JSON response showing daily verification stats for each key. Each element includes the key ID and verification outcome counts for a specific day.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  // ...\n  {\n    \"time\": 1736726400000,\n    \"valid\": 13,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 10,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 23,\n    \"keyId\": \"key_2zeYsLbpULnEUsvYeFGMeJzACp4j\"\n  },\n  {\n    \"time\": 1736726400000,\n    \"valid\": 5,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 6,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 11,\n    \"keyId\": \"key_2zeViCGkJpu5zQ8G12jcBoXWy4KH\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Response Structure for List Overrides API in TypeScript\nDESCRIPTION: Example response from the List Overrides API showing the structure of returned data. Includes an array of override objects, total count, and pagination cursor.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/list-overrides.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n    overrides: [\n       {\n        id: 'rlor_1234',\n        identifier: 'customer_123',\n        limit: 10,\n        duration: 50000,\n        async: false\n      }\n    ],\n    total: 1,\n    cursor: 'rlor_1234'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Supabase Function\nDESCRIPTION: cURL command to test the Supabase function locally\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i --location --request POST 'http://localhost:54321/functions/v1/' \\\n--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \\\n--header 'Content-Type: application/json' \\\n--data '{\"name\":\"hello-world\"}'\n```\n\n----------------------------------------\n\nTITLE: File Structure Overview - Shell\nDESCRIPTION: Shows the directory structure of the update workflow implementation, including the main update task, cleanup task, and test files located in the apps/billing/src/trigger/glossary/update/ directory.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/update-workflow/update-workflow.plan.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\napps/billing/src/trigger/glossary/update/\n├── update-content.ts # Core task for updating glossary content\n├── update-content-cleanup.ts # Task for cleaning up PRs and branches\n└── update-content.test.ts # Test harness for the update content task\n```\n\n----------------------------------------\n\nTITLE: Unkey Verification Response Example\nDESCRIPTION: Example JSON response from a successful key verification showing the validity status and remaining verifications. In this case, the key is valid and has 99 verifications remaining.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/remaining.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"valid\": true,\n\t\"remaining\": 99\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Protected Function\nDESCRIPTION: cURL command to test the Supabase function with Unkey authentication\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST -H 'Authorization: Bearer <SUPBASE_BEARER_TOKEN>' \\\n-H 'x-unkey-api-key: <UNKEY_API_KEY>' \\\n-H \"Content-type: application/json\" 'http://localhost:54321/functions/v1/hello-world'\n```\n\n----------------------------------------\n\nTITLE: Implementing SWR (Stale-While-Revalidate) Cache Pattern\nDESCRIPTION: Example of implementing SWR caching pattern to fetch data from origin while serving stale data. Shows database integration and async revalidation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await cache.user.swr(\"userId\", async (userId) => {\n  return database.exec(\"SELECT * FROM users WHERE id = ?\", userId)\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Keys with Ratelimits using cURL\nDESCRIPTION: cURL request example for verifying keys with specified ratelimits and costs.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/identities-beta.mdx#2025-04-10_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"apiId\": \"api_1234\",\n  \"key\": \"sk_1234\",\n  \"ratelimits\": [\n    { \"name\": \"requests::api\" },\n    { \"name\": \"requests::llama-v3p1-405b-instruct\" },\n    { \"name\": \"tokens::llama-v3p1-405b-instruct\", \"cost\": 8152 }\n  ]}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Configuration with Unkey in TypeScript\nDESCRIPTION: Example of retrieving an API's configuration using the Unkey client. The code makes a request with the API ID and logs the response which contains the API's details including ID, name, and workspace ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/apis/get.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = await unkey.apis.get({\n  apiId: \"api_123\",\n});\n\nconsole.log(api);\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Information with Unkey in Rust\nDESCRIPTION: Shows how to retrieve information about a specific API using the Unkey client. It creates a request for API details and handles the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse unkey::models::GetApiRequest;\nuse unkey::Client;\n\nasync fn get_api() {\n    let c = Client::new(\"unkey_ABC\");\n    let req = GetApiRequest::new(\"api_123\");\n\n    match c.get_api(req).await {\n        Ok(res) => println!(\"{res:?}\"),\n        Err(err) => eprintln!(\"{err:?}\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Monthly Usage\nDESCRIPTION: JSON response showing verification stats for each month. Each element contains the aggregate counts for all verification outcomes during that month.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"time\": 1733011200000,\n    \"valid\": 1356136098,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 925255,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 1357061353\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Go SDK\nDESCRIPTION: This snippet shows how to install the Unkey Go SDK using the go get command.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/go/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/unkeyed/unkey/sdks/golang\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Application with Unkey\nDESCRIPTION: Command to initialize a new Next.js application for the Unkey with authentication provider demo.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest unkey-with-auth\n```\n\n----------------------------------------\n\nTITLE: KeyCreateResponse DTO for Unkey API Key Creation Results\nDESCRIPTION: Data Transfer Object that contains the response data after successfully creating an API key, including the generated key and its unique identifier.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/functions/create.mdx#2025-04-10_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class KeyCreateResponse {\n    @NonNull\n    private String key;\n    @NonNull\n    private String keyId;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Identity API Endpoint Definition\nDESCRIPTION: OpenAPI endpoint definition for retrieving identity information. The endpoint accepts either identityId or externalId as parameters and returns identity details with rate limit configurations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/identities/get-identity.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nget /v1/identities.getIdentity\n```\n\n----------------------------------------\n\nTITLE: Checking Ratelimit Status for User\nDESCRIPTION: Makes a call to Unkey's ratelimit service using the current user's ID as the identifier, returning a success boolean that indicates if the request should be allowed.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimit-trpc-routes.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { success } = await unkey.limit(ctx.session.user.id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Authentication Middleware for Route Protection\nDESCRIPTION: Middleware configuration for Clerk that protects all routes except the specified public ones, ensuring users are authenticated before accessing protected content.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authMiddleware } from \"@clerk/nextjs\";\n\nexport default authMiddleware({\n  publicRoutes: \"/api/secret\",\n});\n\nexport const config = {\n  matcher: [\"/((?!.+\\\\.[\\\\w]+$|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Aggregating Monthly Active Keys in SQL\nDESCRIPTION: SQL query to aggregate active keys per workspace and month. It groups data by workspace, API, key, and time to create a materialized view for efficient querying.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/high-frequency-usage-billing.mdx#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    workspaceId,\n    apiId,\n    keyId,\n    toStartOfMonth(fromUnixTimestamp64Milli(time)) AS time\nFROM key_verifications__v2\nGROUP BY\n    workspaceId,\n    apiId,\n    keyId,\n    time\n```\n\n----------------------------------------\n\nTITLE: Deleting an API using the Unkey TypeScript Client\nDESCRIPTION: This code snippet demonstrates how to delete an API using the Unkey TypeScript client. It requires specifying the API ID as a parameter. When executed successfully, it permanently deletes the API and revokes all associated keys.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/apis/delete.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.apis.delete({ apiId: \"api_123\" });\n```\n\n----------------------------------------\n\nTITLE: HATEOAS REST API Example in JSON\nDESCRIPTION: This example shows a typical JSON response that follows HATEOAS principles by including hypermedia links. The response contains an entity with an ID and type, along with links that inform the client about possible actions it can take, such as viewing or editing the resource.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/hateoas.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"1\",\n  \"type\": \"Example\",\n  \"links\": [\n    {\n      \"rel\": \"self\",\n      \"href\": \"http://api.example.com/examples/1\"\n    },\n    {\n      \"rel\": \"edit\",\n      \"href\": \"http://api.example.com/examples/1/edit\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Hourly User Usage\nDESCRIPTION: JSON response showing verification stats grouped by hour. Each element contains counts for different verification outcomes (valid, notFound, etc.) and the total for that hour.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"time\": 1736672400000,\n    \"valid\": 15125,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 1225,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 16350\n  },\n  {\n    \"time\": 1736676000000,\n    \"valid\": 765,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 765\n  },\n  ... 21 elements omited\n  {\n    \"time\": 1736755200000,\n    \"valid\": 20016,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 51,\n    \"total\": 20067\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key with Unkey in Python\nDESCRIPTION: This snippet shows how to verify an API key using Unkey in a Python application. It uses the unkey library to create a client, start it asynchronously, and verify the provided API key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/introduction.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nimport unkey\n\nasync def main() -> None:\n  client = unkey.Client(api_key=os.environ[\"API_KEY\"])\n  await client.start()\n\n  result = await client.keys.verify_key(\"prefix_abc123\")\n\n  if result.is_ok:\n    print(data.valid)\n  else:\n    print(result.unwrap_err())\n```\n\n----------------------------------------\n\nTITLE: Setting up a new project with T3 Stack\nDESCRIPTION: Command to create a new project using the T3 stack, which provides a good starting point for building TypeScript-powered web applications with NextJS.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/learn-by-building.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm create t3-app@latest\n```\n\n----------------------------------------\n\nTITLE: Shared Code Directory Structure for Unkey Dashboard (Directory Tree)\nDESCRIPTION: Shows the organization of global shared code that's used across multiple features in the Unkey dashboard. This structure helps maintain consistency and prevents duplication of common components and utilities.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/client-structure.mdx#2025-04-10_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/components          # Shared React components\n/hooks               # Shared custom hooks\n/utils               # Shared utilities\n/types               # Shared TypeScript types\n/constants           # Global constants\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key with Unkey in Go\nDESCRIPTION: This snippet demonstrates how to verify an API key using Unkey in a Go application. It imports the unkey package from GitHub and uses the KeyVerify function to check the validity of the provided API key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/introduction.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport (\n\t\"fmt\"\n\tunkey \"github.com/WilfredAlmeida/unkey-go/features\"\n)\nfunc main() {\n\tapiKey := \"key_3ZZ7faUrkfv1YAhffAcnKW74\"\n\tresponse, err := unkey.KeyVerify(apiKey)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tif response.Valid {\n\t\tfmt.Println(\"Key is valid\")\n\t} else {\n\t\tfmt.Println(\"Key is invalid\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiered Caching with Memory and Cloudflare Stores\nDESCRIPTION: Example of setting up a tiered caching system using @unkey/cache with both memory and Cloudflare stores. It demonstrates creating a stateful context, defining typed caches for different entities, and setting cache TTL values.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/cache/README.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createCache, DefaultStatefulContext } from \"@unkey/cache\";\nimport { MemoryStore, CloudflareStore } from \"@unkey/cache/stores\";\n\n\n// Only required in stateful environments.\n// Cloudflare workers or Vercel provide an executionContext for you.\nconst ctx = new DefaultStatefulContext();\n\ntype User = {\n  id: string;\n  email: string;\n};\n\ntype Post = {\n  slug: string;\n  title: string;\n  content: string;\n  publishedAt: Date;\n};\n\nconst fresh = 60_000;\nconst stale = 900_000;\n\nconst ctx = new DefaultStatefulContext();\n\nconst memory = new MemoryStore({\n  persistentMap: new Map(),\n});\n\nconst cloudflare = new CloudflareStore({\n  cloudflareApiKey: \"CLOUDFLARE_API_KEY\",\n  zoneId: \"CLOUDFLARE_ZONE_ID\",\n  domain: \"my-domain-on-cloudflare\",\n});\nconst cache = createCache({\n  account: new Namespace<Account>(ctx, {\n    stores: [memory],\n    fresh,\n    stale,\n  }),\n  user: new Namespace<User>(ctx, {\n    stores: [memory, cloudflare],\n    fresh,\n    stale,\n  }),\n});\n\nawait cache.user.set(\"chronark\", { id: \"chronark\", email: \"iykyk\" });\n\n// This is fully typesafe and will check the stores in the above defined order.\nconst user = await cache.user.get(\"chronark\");\n```\n\n----------------------------------------\n\nTITLE: Listing All Permissions with Unkey Python Client\nDESCRIPTION: This snippet demonstrates how to list all available permissions using the Unkey Python client. It initializes the client with a bearer token and calls the list method to retrieve all permissions associated with the account.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/permissions.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.permissions.list()\n\nif res.response_bodies is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Visualizing Vault Encryption Flow with Mermaid Sequence Diagram\nDESCRIPTION: This diagram illustrates the flow of encrypting a new secret using Vault. It shows the interaction between the User, API, Vault, and Database in the process of generating, encrypting, and storing a secret.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/vault.mdx#2025-04-10_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    User->>API: request new key\n    API->>API: generate secret\n    API->>Vault: request encryption\n    Vault->>API: return encrypted\n    API->>Database: store encrypted\n    API->>User: return secret\n```\n\n----------------------------------------\n\nTITLE: Deleting an API Key with UnkeyElixirSdk in Elixir\nDESCRIPTION: This snippet demonstrates how to delete an API key using the UnkeyElixirSdk.delete_key function. It includes error handling with a try-catch block and logs any errors that occur. The function takes a key ID as a string parameter and returns :ok on success.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/delete_key.mdx#2025-04-10_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n   try do\n     :ok = UnkeyElixirSdk.delete_key(\"xyz_AS5HDkXXPot2MMoPHD8jnL\")\n\n    catch\n        err ->\n          Logger.error(err)\n      end\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Function\nDESCRIPTION: Command to create a new Supabase function named hello-world\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new hello-world\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Tag-Based Verification Analytics\nDESCRIPTION: Sample JSON response from the Unkey Analytics API when grouping by tag. Each object in the array represents metrics for a single unique tag, showing counts for different verification outcomes (valid, notFound, etc.) and a total count of verifications for that tag.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"valid\": 1,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 1,\n    \"tag\": \"b\"\n  },\n  {\n    \"valid\": 2,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 2,\n    \"tag\": \"c\"\n  },\n  {\n    \"valid\": 5,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 5,\n    \"tag\": \"a\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Server for CLI Authentication\nDESCRIPTION: TypeScript code that creates a promise and sets up an HTTP server to handle the authentication request and receive the API key from the web application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/cli-auth.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst authPromise = new Promise<ParsedUrlQuery>((resolve, reject) => {\n  server.on(\"request\", (req, res) => {\n    // Set CORS headers for all responses\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET, OPTIONS\");\n    res.setHeader(\n      \"Access-Control-Allow-Headers\",\n      \"Content-Type, Authorization\",\n    );\n\n    if (req.method === \"OPTIONS\") {\n      res.writeHead(200);\n      res.end();\n    } else if (req.method === \"GET\") {\n      const parsedUrl = url.parse(req.url as string, true);\n      const queryParams = parsedUrl.query;\n      if (queryParams.cancelled) {\n        res.writeHead(200);\n        res.end();\n        reject(new UserCancellationError(\"Login process cancelled by user.\"));\n      } else {\n        res.writeHead(200);\n        res.end();\n        resolve(queryParams);\n      }\n    } else {\n      res.writeHead(405);\n      res.end();\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Stale-While-Revalidate Pattern with Database Origin\nDESCRIPTION: Example of using the stale-while-revalidate pattern with @unkey/cache. This pattern returns cached data while refreshing it in the background using a database query.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/cache/README.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await cache.user.swr(\"chronark\", async (id) => {\n  return await db.query.users.findFirst({\n    where: (table, { eq }) => eq(table.id, id),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Global Tables + Dedicated Cache Layer\nDESCRIPTION: ASCII diagram showing a DynamoDB-based architecture with multiple gateways, load balancer, and dedicated cache nodes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0008-dataplane.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ascii\nCODE:\n```\n┌─────────────────┐\n│ Gateway 1       │───┐\n└─────────────────┘   │\n                      │    ┌────────────┐\n┌─────────────────┐   │    │   Load     │    ┌────────────┐\n│ Gateway 2       │───┼───►│  Balancer  │───►│ Cache      │──┐\n└─────────────────┘   │    │            │    │ Node 1     │  │    ┌──────────────┐\n                      │    │            │    └────────────┘  ├───►│  DynamoDB    │\n                      │    │            │                    │    │  Global      │\n                      │    │            │    ┌────────────┐  │    │  Tables      │\n┌─────────────────┐   │    │            │───►│ Cache      │──┘    └──────────────┘\n│ Gateway n       │───┘    └────────────┘    │ Node 2     │\n└─────────────────┘                          └────────────┘\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: Structure of an error response from the Unkey API. When a request fails, it returns an error object containing a message and a link to relevant documentation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/api/README.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  error: {\n    message: string;\n    docs: string; // URL to relevant documentation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cost for Expensive Requests\nDESCRIPTION: Specifies a higher cost (3) for a single request, useful for limiting resource-intensive operations like AI routes more aggressively than standard requests.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimit-trpc-routes.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { success } = await unkey.limit(ctx.session.user.id, {\n  cost: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiered Caching with @unkey/cache in TypeScript\nDESCRIPTION: Example of setting up tiered caching using both memory and Cloudflare stores. This demonstrates how to chain multiple caches together, where faster stores are checked first before falling back to slower but more persistent stores.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/announcing-unkey-cache-package.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCache, DefaultStatefulContext, Namespace } from \"@unkey/cache\";\nimport { CloudflareStore, MemoryStore } from \"@unkey/cache/stores\";\n\ntype User = { id: string; email: string };\n\nconst memory = new MemoryStore({ persistentMap: new Map() });\nconst cloudflare = new CloudflareStore({\n  domain: \"cache.unkey.dev\",\n  zoneId: process.env.CLOUDFLARE_ZONE_ID!,\n  cloudflareApiKey: process.env.CLOUDFLARE_API_KEY!,\n});\n\nconst cache = createCache({\n  user: new Namespace<User>(ctx, {\n    // memory is checked first, then cloudflare if memory misses\n    stores: [memory, cloudflare],\n    fresh: 60_000,\n    stale: 300_000,\n  })\n});\n\nawait cache.user.set(\"userId\", { id: \"userId\", email: \"user@email.com\" });\nconst user = await cache.user.get(\"userId\");\nconsole.log(user);\n```\n\n----------------------------------------\n\nTITLE: Next.js Layout CSS Import Configuration\nDESCRIPTION: Demonstrates how to import @unkey/ui CSS styles in a Next.js application layout file.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// In your app/layout.tsx or equivalent entry file\nimport \"@unkey/ui/css\"; // This is critical for the UI components to work properly\n```\n\n----------------------------------------\n\nTITLE: Listing API Keys with Unkey Python SDK\nDESCRIPTION: This example demonstrates how to list API keys using the Unkey Python SDK. It initializes the Unkey client with authentication and makes a request to list keys for a specific API, with an optional limit on the number of results.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/apis.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.apis.list_keys(request={\n    \"api_id\": \"api_1234\",\n    \"limit\": 100,\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Project with npm\nDESCRIPTION: Initial commands to create an Express project directory, initialize npm, and install the required dependencies for an Express server with TypeScript support.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/express.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir unkey-with-express\nnpm init -y\nnpm install cors dotenv express ts-node\nnpm install -D @types/cors @types/express ts-node-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Querying Total Monthly Usage for an Identity\nDESCRIPTION: Retrieves total monthly verification data for a specific identity and API. This query is useful for billing purposes or monitoring overall monthly consumption patterns.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&externalId=user_123&groupBy=month&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Decrypted Key with cURL in Unkey's API\nDESCRIPTION: This code snippet demonstrates how to recover an encrypted key using the Unkey API's getKey endpoint with cURL. The request includes the keyId parameter and sets decrypt=true to retrieve the plaintext version of the key in the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/vault.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n  --url https://api.unkey.dev/v1/keys.getKey?keyId={KEY_ID}&decrypt=true \\\n  --header 'Authorization: Bearer {ROOT_KEY}'\n\n{\n  \"ownerId\": \"ACME\",\n  \"plaintext\": \"your-key-here\",\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Encryption Middleware for Unkey Cache\nDESCRIPTION: Demonstrates how to wrap a cache store with encryption middleware to protect sensitive data at rest. Uses AES-256-GCM encryption with a base64 encoded key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withEncryption } from \"@unkey/cache/middleware\";\n\nconst encryptionKey = \"<BASE64_KEY>\"\nconst encryptionMiddleware = await withEncryption(encryptionKey)\n\nconst memory = new Memory({..}) // or any other store\n\nconst store = encryptionMiddleware.wrap(memory);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Usage with unkey.py\nDESCRIPTION: Shows how to use the unkey_py client asynchronously with asyncio. Creates an async main function that initializes the Unkey client and performs an asynchronous liveness check using the _async method suffix.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/async.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Asynchronous Example\nimport asyncio\nimport os\nfrom unkey_py import Unkey\n\nasync def main():\n    s = Unkey(\n        bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n    )\n    res = await s.liveness.check_async()\n    if res.object is not None:\n        # handle response\n        pass\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating a Role in Unkey API using curl\nDESCRIPTION: This endpoint allows you to create a new role by providing a name and description. The role name can be customized to fit your needs. Your root key must have the 'rbac.*.create_role' permission to use this endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-07-12.mdx#2025-04-10_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/permissions.createRole \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"name\": \"dns.records.manager\",\n  \"description\": \"dns.records.manager can read and write dns records for our domains.\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Go HTTP Server with Zen Framework\nDESCRIPTION: This snippet demonstrates how to create a basic HTTP server using the Zen framework. It includes setting up routes, handling requests, validating input, and implementing middleware for logging, error handling, and OpenAPI validation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/go/pkg/zen/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"log/slog\"\n\t\"net/http\"\n\n\t\"github.com/unkeyed/unkey/go/pkg/zen\"\n\t\"github.com/unkeyed/unkey/go/pkg/otel/logging\"\n\t\"github.com/unkeyed/unkey/go/pkg/zen/validation\"\n\t\"github.com/unkeyed/unkey/go/pkg/fault\"\n)\n\n// Request struct for our create user endpoint\ntype CreateUserRequest struct {\n\tName     string `json:\"name\"`\n\tEmail    string `json:\"email\"`\n\tPassword string `json:\"password\"`\n}\n\n// Response for successful user creation\ntype CreateUserResponse struct {\n\tID    string `json:\"id\"`\n\tName  string `json:\"name\"`\n\tEmail string `json:\"email\"`\n}\n\nfunc main() {\n\t// Initialize logger\n\tlogger := logging.New()\n\n\t// Create a new server\n\tserver, err := zen.New(zen.Config{\n\t\tNodeID: \"quickstart-server\",\n\t\tLogger: logger,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create server: %v\", err)\n\t}\n\n\t// Initialize OpenAPI validator\n\t// see the validation package how we pass in the openapi spec\n\tvalidator, err := validation.New()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create validator: %v\", err)\n\t}\n\n\t// Simple hello world route\n\thelloRoute := zen.NewRoute(\"GET\", \"/hello\", func(ctx context.Context, s *zen.Session) error {\n\t\treturn s.JSON(http.StatusOK, map[string]string{\n\t\t\t\"message\": \"Hello, world!\",\n\t\t})\n\t})\n\n\t// POST endpoint with request validation and error handling\n\tcreateUserRoute := zen.NewRoute(\"POST\", \"/users\", func(ctx context.Context, s *zen.Session) error {\n\t\t// Parse request body\n\t\tvar req CreateUserRequest\n\t\tif err := s.BindBody(&req); err != nil {\n\t\t\treturn err // This will be handled by error middleware\n\t\t}\n\n\t\t// Additional validation logic\n\t\tif len(req.Password) < 8 {\n\t\t\treturn fault.New(\"password too short\",\n\t\t\t\tfault.WithTag(fault.BAD_REQUEST),\n\t\t\t\tfault.WithDesc(\n\t\t\t\t\t\"password must be at least 8 characters\", // Internal description\n\t\t\t\t\t\"Password must be at least 8 characters long\" // User-facing message\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\n\t\t// Process the request (in a real app, you'd save to database etc.)\n\t\tuserID := \"user_pretendthisisrandom\"\n\n\t\t// Return response\n\t\treturn s.JSON(http.StatusCreated, CreateUserResponse{\n\t\t\tID:    userID,\n\t\t\tName:  req.Name,\n\t\t\tEmail: req.Email,\n\t\t})\n\t})\n\n\t// Register routes with middleware\n\tserver.RegisterRoute(\n\t\t[]zen.Middleware{\n\t\t\tzen.WithLogging(logger),\n\t\t\tzen.WithErrorHandling(logger),\n\t\t},\n\t\thelloRoute,\n\t)\n\n\tserver.RegisterRoute(\n\t\t[]zen.Middleware{\n\t\t\tzen.WithTracing(),\n\t\t\tzen.WithLogging(logger),\n\t\t\tzen.WithErrorHandling(logger),\n\t\t\tzen.WithValidation(validator),\n\t\t},\n\t\tcreateUserRoute,\n\t)\n\n\t// Start the server\n\tlogger.Info(\"starting server\",\n\t\t\"address\", \":8080\",\n\t)\n\terr = server.Listen(context.Background(), \":8080\")\n\tif err != nil {\n\t\tlogger.Error(\"server error\", slog.String(\"error\", err.Error()))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Zen Server in Go\nDESCRIPTION: Example showing how to initialize a Zen server, register routes with middleware, and start listening for HTTP requests. The server handles graceful shutdown and session management automatically.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Initialize a server\nserver, err := zen.New(zen.Config{\n    Logger: logger,\n    // ...\n})\nif err != nil {\n    log.Fatalf(\"failed to create server: %v\", err)\n}\n\n// Register routes\nserver.RegisterRoute([]zen.Middleware{...}, route)\n\n// Start the server\nerr = server.Listen(ctx, \":8080\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address for Ratelimiting in Next.js\nDESCRIPTION: This code snippet demonstrates how to retrieve the IP address of the requester from the headers in a Next.js application. It checks for both forwarded IP and real IP.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimiting-otp.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function sendOTP(formData: FormData) {\n  try {\n    // check for forwarded\n    let forwardedIP = headers().get(\"x-forwarded-for\");\n    // check for real-ip\n    let realIP = headers().get(\"x-real-ip\");\n    if(forwardedIP){\n      forwardedIP = forwardedIP.split(/, /)[0]\n    }\n    if (realIP) realIP = realIP.trim();\n    // sending logic below\n```\n\n----------------------------------------\n\nTITLE: Unkey API Error Response Structure in JSON\nDESCRIPTION: Shows the standard format of error responses from the Unkey API. The structure includes a meta object with a requestId and an error object containing details about the error including title, detail, status, type, and specific validation errors.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/errors.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"requestId\": \"req_abc123xyz789\"\n  },\n  \"error\": {\n    \"title\": \"Validation Error\",\n    \"detail\": \"You must provide a valid API ID.\",\n    \"status\": 400,\n    \"type\": \"https://unkey.com/docs/errors/validation-error\",\n    \"errors\": [\n      {\n        \"location\": \"body.apiId\",\n        \"message\": \"API not found\",\n        \"fix\": \"Provide a valid API ID or create a new API\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Express Application with npm\nDESCRIPTION: Commands for creating a new Express project directory and installing the required dependencies for a TypeScript-based Express application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/express.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir unkey-with-express\nnpm init -y\nnpm install cors dotenv express ts-node\nnpm install -D @types/cors @types/express ts-node-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Top Users Query\nDESCRIPTION: JSON response showing the top users by verification count. Each element includes the identity details and verification outcome counts, ordered from most total verifications to least.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"identity\": { \"id\": \"id_123\", \"externalId\": \"user_123\"},\n    \"valid\": 54,\n    \"notFound\": 0,\n    \"forbidden\": 3,\n    \"usageExceeded\": 6,\n    \"rateLimited\": 10,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 73\n  },\n  {\n    \"identity\": { \"id\": \"id_456\", \"externalId\": \"user_6dg\"},\n    \"valid\": 24,\n    \"notFound\": 0,\n    \"forbidden\": 1,\n    \"usageExceeded\": 32,\n    \"rateLimited\": 10,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 67\n  },\n  ...\n]\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Permission in Unkey API using curl\nDESCRIPTION: This endpoint allows you to create a new permission by providing a name and description. The permission name can be customized to your needs. Your root key must have the 'rbac.*.create_permission' permission to use this endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-07-12.mdx#2025-04-10_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/permissions.createPermission \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"name\": \"record.write\",\n  \"description\": \"record.write can create new dns records for our domains.\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Zen in Go\nDESCRIPTION: Demonstrates how to create a new route using Zen's Session type for request handling. The Session encapsulates HTTP request and response context, providing utility methods for common operations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nroute := zen.NewRoute(\"GET\", \"/v2/liveness\",\n\tfunc(ctx context.Context, s *zen.Session) error {\n\t\tres := Response{\n\t\t\tMessage: \"we're cooking\",\n\t\t}\n\t\treturn s.JSON(http.StatusOK, res)\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Elixir SDK via Hex PM in mix.exs\nDESCRIPTION: This snippet shows how to add the unkey_elixir_sdk package to your dependencies in mix.exs. The SDK requires Elixir version 1.13 or higher.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:unkey_elixir_sdk, \"~> 0.2.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Unkey API Key Verification Response Structure\nDESCRIPTION: JSON schema showing the response structure from Unkey's API key verification endpoint, including validity status, owner information, expiration time, and rate limiting details.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ocr-service.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"valid\": true,\n    \"ownerId\": \"john@example.com\",\n    \"meta\": {\n        \"email\": \"john@example.com\",\n        \"name\": \"John Doe\"\n    },\n    \"expires\": Date.now() + 2592000000 // 30 days from now\n    \"ratelimit\": {\n        \"limit\": 1,\n        \"remaining\": 0,\n        \"reset\": 1690350175693\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key with Unkey using cURL\nDESCRIPTION: This snippet shows how to verify an API key using Unkey via a cURL command. It sends a POST request to the Unkey API endpoint with the apiId and key in the request body.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/introduction.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"apiId\": \"api_1234\",\n    \"key\": \"sk_1234\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Registering a Route with Middleware in Zen\nDESCRIPTION: Shows how to create a route and register it with a chain of middleware in Zen. This example demonstrates the flexibility of middleware composition, including tracing, metrics, logging, error handling, and validation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main(){\n\t// ...\n\n\t// Create a route\n\troute := zen.NewRoute(\"POST\", \"/v2/ratelimit.limit\", handler)\n\n\t// Register with middleware\n\tserver.RegisterRoute(\n\t    []zen.Middleware{\n\t      zen.WithTracing(),\n\t      zen.WithMetrics(eventBuffer),\n\t      zen.WithLogging(logger),\n\t      zen.WithErrorHandling(logger),\n\t      zen.WithValidation(validator),\n\t    },\n\t    route,\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded libSQL/Turso Store for Unkey Cache\nDESCRIPTION: Sets up a libSQL store with an embedded SQLite database that can synchronize with a remote Turso database. Uses both a local file and remote connection details.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LibSQLStore } from \"@unkey/cache/stores\";\nimport { createClient } from \"@libsql/client\";\n\nconst client = createClient({\n  url: \"file:dev.db\",\n  syncUrl: \"libsql://...\",\n  authToken: \"...\",\n});\n\nconst store = new LibSQLStore({\n  client,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated API Response Structure in JSON\nDESCRIPTION: Shows the structure of paginated API responses including metadata, data array, and pagination information with cursor-based navigation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"requestId\": \"req_abc123xyz789\",\n    \"timestamp\": \"2023-11-08T15:22:30Z\"\n  },\n  \"data\": [\n    // Array of items\n  ],\n  \"pagination\": {\n    \"cursor\": \"cursor_xyz123\",\n    \"hasMore\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Application with Package Managers\nDESCRIPTION: Commands to initialize a new Next.js project using different package managers (npm, pnpm, yarn, bun)\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create-next-app@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app\n```\n\n----------------------------------------\n\nTITLE: Unkey Analytics First Row Response\nDESCRIPTION: This JSON sample shows the first entry of an analytics response from Unkey. It displays verification outcomes (valid, rateLimited, etc.) for a specific user identity, including total verification count and identity information.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"valid\": 186,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 184,\n    \"unauthorized\": 0,\n    \"disabled\": 182,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 552,\n    \"apiId\": \"api_262b3iR7gkmP7aUyZ24uihcijsCe\",\n    \"identity\": {\n      \"id\": \"test_2ipPuAgat7xuVNGpK6AuPQ2Lbk11\",\n      \"externalId\": \"user_2rNBR4YXxKwzM8bzVrCR5q6dFlc\"\n    }\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Ratelimit Package\nDESCRIPTION: Command to install the @unkey/ratelimit package via npm, which provides type-safe access to Unkey's API for ratelimiting functionality.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimit-trpc-routes.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual-Message Pattern in Go with Fault\nDESCRIPTION: Demonstrates how to maintain separate internal and public error messages using the Fault package. This pattern helps keep detailed error information for debugging while providing appropriate user-facing messages.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/go/pkg/fault/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfault.Wrap(err,\n    fault.WithDesc(\n        \"database error: connection timeout\", // internal message\n        \"Service temporarily unavailable.\"     // public message\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Google Workspace and AWS Integration\nDESCRIPTION: Structured markdown documentation outlining the complete setup process for Google Workspace SAML integration with AWS IAM Identity Center. Includes steps for custom attributes, SAML configuration, app setup, and permission management.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/infrastructure/aws/google-idp.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Google as an Identity Provider for AWS\ndescription: Step-by-step guide for configuring Google Workspace as a SAML 2.0 Identity Provider (IdP) for AWS Single Sign-On\n---\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Bun Project\nDESCRIPTION: Creates a new directory for the Unkey-Bun project and initializes it with Bun. This sets up the basic project structure needed for the authentication server.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/bun.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir unkey-with-bun\ncd unkey-with-bun\nbun init -y\n```\n\n----------------------------------------\n\nTITLE: Using Error Classification with Tags in Go Fault Package\nDESCRIPTION: Shows how to tag errors for consistent classification and handling. This approach allows for systematic error management based on error types rather than message content.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/go/pkg/fault/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar DATABASE_ERROR = fault.Tag(\"DATABASE_ERROR\")\n\nerr := fault.New(\"connection failed\",\n    fault.WithTag(DATABASE_ERROR),\n)\n\nswitch fault.GetTag(err) {\n\tcase DATABASE_ERROR:\n\t\t// handle\n\tdefault:\n\t\t// handle\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Application with PNPM\nDESCRIPTION: Command to create a new Next.js application using PNPM.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app@latest\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Unkey Key Verification\nDESCRIPTION: This JSON snippet shows the expected response format from the Unkey API after verifying an API key. It includes the validity status and the associated user ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valid\": true,\n  \"ownerId\": \"user_2Vi5Z5c9tcZd6dfbgV6tEWDQYVf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Paginated API Requests in JavaScript\nDESCRIPTION: Example code showing how to make paginated requests to the API, including initial request and follow-up requests using cursor-based pagination.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// First request\nconst response = await fetch('https://api.unkey.com/v2/keys.listKeys', {\n  method: 'POST',\n  headers: { Authorization: `Bearer ${rootKey}` },\n  body: JSON.stringify({ apiId: 'api_123' })\n});\n\n// Follow-up request with cursor\nif (response.pagination?.hasMore) {\n  const nextPage = await fetch('https://api.unkey.com/v2/keys.listKeys', {\n    method: 'POST',\n    headers: { Authorization: `Bearer ${rootKey}` },\n    body: JSON.stringify({\n      apiId: 'api_123',\n      cursor: response.pagination.cursor\n    })\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: KeyRateLimit DTO for Configuring Rate Limits in Unkey\nDESCRIPTION: Data Transfer Object that defines the rate limiting configuration for an API key, including the type of limit, maximum limit, refill rate, and refill interval.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/functions/create.mdx#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class KeyRateLimit {\n    private String type;\n    private Integer limit;\n    private Integer refillRate;\n    private Integer refillInterval;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Tag Filtering\nDESCRIPTION: JSON response showing aggregated verification stats for requests with the specified tag. The response includes counts for different verification outcomes and the total for that tag.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"valid\": 5,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 5\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Unkey Telemetry\nDESCRIPTION: Configuration option to disable anonymous telemetry data collection in Unkey.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/nuxt/overview.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = useUnkey({ disableTelemetry: true })\n```\n\n----------------------------------------\n\nTITLE: Automatic Location Tracking in Go with Fault\nDESCRIPTION: Demonstrates automatic capture of error locations in the code. This feature helps in debugging by tracking where errors originate and how they propagate through the application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/go/pkg/fault/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := fault.New(\"initial error\")         \t\t  // captures location\nerr = fault.Wrap(err, fault.WithDesc(...))      // captures new location\n```\n\n----------------------------------------\n\nTITLE: Implementing typed prefixes for consistent ID generation at Unkey\nDESCRIPTION: Unkey's implementation for generating consistent IDs with typed prefixes. This ensures that each resource type always uses the correct prefix format, enhancing code safety and readability.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/uuid-ux.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { customAlphabet } from \"nanoid\";\nexport const nanoid = customAlphabet(\n  \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\",\n);\n\nconst prefixes = {\n  key: \"key\",\n  api: \"api\",\n  policy: \"pol\",\n  request: \"req\",\n  workspace: \"ws\",\n  keyAuth: \"key_auth\", // <-- this is internal and does not need to be short or pretty\n  vercelBinding: \"vb\",\n  test: \"test\", // <-- for tests only\n} as const;\n\nexport function newId(prefix: keyof typeof prefixes): string {\n  return [prefixes[prefix], nanoid(16)].join(\"_\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Regular Expression Pattern for Unkey Root Keys\nDESCRIPTION: JSON configuration that defines the pattern for Unkey root keys that Github will scan for in public repositories. The regex pattern identifies keys that start with 'unkey_' followed by alphanumeric characters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0002-github-secret-scanning.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\" : \"Unkey\",\n\t\"regex\": \"^unkey_[a-zA-Z0-9]+$\",\n\t\"webhook_endpoint\": \"https://secrets.unkey.dev/api/v1/github_secrets\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verification Response with Environment Data\nDESCRIPTION: This JSON response example shows what the API returns after key verification, including the 'environment' field that indicates whether the key is a test or live key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/environments.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valid\": true,\n  \"environment\": \"test\",\n  // ... omited\n}\n```\n\n----------------------------------------\n\nTITLE: Direct S3 + In-Memory Cache Architecture Diagram\nDESCRIPTION: ASCII diagram showing the architecture of a simple gateway with memory cache connecting to S3 storage.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0008-dataplane.mdx#2025-04-10_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n┌─────────────────────┐     ┌─────────┐\n│ Gateway             │     │         │\n│ ┌───────────────┐   │────►│   S3    │\n│ │ Memory Cache  │   │     │         │\n│ └───────────────┘   │     │         │\n└─────────────────────┘     └─────────┘\n```\n\n----------------------------------------\n\nTITLE: Updating an API Key with Unkey in Rust\nDESCRIPTION: Demonstrates updating an existing API key's properties such as name, rate limit, expiration, and refill settings using the Unkey client.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse unkey::models::{Refill, RefillInterval, UpdateKeyRequest};\nuse unkey::Client;\n\nasync fn update_key() {\n    let c = Client::new(\"unkey_ABC\");\n    let req = UpdateKeyRequest::new(\"key_XYZ\")\n        .set_name(Some(\"new_name\")) // Update the keys name\n        .set_ratelimit(None) // Remove any ratelimit on the key\n        .set_expires(None) // Remove any expiration date\n        .set_refill(Some(Refill::new(100, RefillInterval::Daily)));\n\n    match c.update_key(req).await {\n        Ok(_) => println!(\"Success\"), // Nothing on success\n        Err(err) => eprintln!(\"{err:?}\"),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating API Endpoint Structure in RPC-Style for Unkey\nDESCRIPTION: This snippet shows the general structure of Unkey's API endpoints, which follow an RPC-style approach focusing on actions rather than resources.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/rpc.mdx#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.unkey.com/v2/{service}.{procedure}\n```\n\n----------------------------------------\n\nTITLE: Installing Hono Project with Package Managers\nDESCRIPTION: Commands to create a new Hono project using different package managers (npm, pnpm, yarn, bun).\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/hono.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create hono@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create hono@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create hono@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun create hono@latest\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Key Filtering\nDESCRIPTION: JSON response showing aggregated verification stats for the specified key. The response includes counts for different verification outcomes and the total for that key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"valid\": 14,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 10,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 24\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating API keys with custom prefixes and byte length using Unkey\nDESCRIPTION: Using Unkey's API to create an API key with a custom prefix and specified byte length. This demonstrates how to apply the principles of good ID design to API key generation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/uuid-ux.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = await unkey.key.create({\n  apiId: \"api_dzeBEZDwJ18WyD7b\",\n  prefix: \"blog\",\n  byteLength: 16,\n  // ... omitted for brevity\n});\n\n// Created key:\n// blog_cLsvCvmY35kCfchi\n```\n\n----------------------------------------\n\nTITLE: S3 + In-Memory Cache with Gossip Protocol Architecture\nDESCRIPTION: ASCII diagram illustrating a distributed system with multiple gateways using gossip protocol for cache invalidation and S3 for storage.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0008-dataplane.mdx#2025-04-10_snippet_1\n\nLANGUAGE: ascii\nCODE:\n```\n┌─────────────────────┐\n│ Gateway             │\n│ ┌───────────────┐   │──┐\n│ │ Memory Cache  │   │  │\n│ └───────────────┘   │  │\n└─────────────────────┘  │\n         ▲               │\n         │ Gossip        │    ┌─────────┐\n         ▼               ├───►│         │\n┌─────────────────────┐  │    │   S3    │\n│ Gateway             │  │    │         │\n│ ┌───────────────┐   │──┘    └─────────┘\n│ │ Memory Cache  │   │\n│ └───────────────┘   │\n└─────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Creating API Key with Rate Limiting in Unkey using cURL\nDESCRIPTION: This cURL request creates an API key with rate limiting of 10 requests, refilling at 1 request per second, and a total limit of 100 requests. It demonstrates how to set up usage restrictions for an AI service.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/how-we-ai.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <UNKEY>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"apiId\":\"<API_ID>\",\n\t\"ratelimit\":{\n\t\t\"type\":\"fast\",\n\t\t\"limit\":10,\n\t\t\"refillRate\": 1,\n\t\t\"refillInterval\": 1000\n\t},\n\t\"remaining\": 100\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Cost Configuration in Ratelimiter with TypeScript\nDESCRIPTION: This snippet shows how to set a cost for a request in the ratelimiter. It allows for handling expensive resources by deducting a higher cost from the rate limit.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/introducing-ratelimiting.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handler(request: NextApiRequest) {\n  const identifier = request.getUserId();\n\n  const ratelimit = await unkey.limit(identifier, {\n    cost: 4,\n  });\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n  // handle the request here\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running ClickHouse Proxy with Go\nDESCRIPTION: Instructions for compiling and running the ClickHouse Proxy service from source code using Go. This involves navigating to the app directory, building the binary, and then executing it.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/clickhouse-proxy.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /apps/chproxy\ngo build -o chproxy .\n./chproxy\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Application with Bun\nDESCRIPTION: Command to create a new Next.js application using Bun.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-next-app\n```\n\n----------------------------------------\n\nTITLE: API Key Verification Response in Unkey\nDESCRIPTION: This JSON snippet shows the response format when verifying a key with usage limits. The response includes a 'valid' boolean and a 'remaining' integer that shows how many verifications are left after the current one.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-07-21.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valid\": true,\n  \"remaining\": 99\n}\n```\n\n----------------------------------------\n\nTITLE: Performing POST Requests for Data Modification in Unkey API\nDESCRIPTION: Example of using a POST request to create a new key. POST methods are used for creating, updating, and deleting data, with an application/json request body.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: http\nCODE:\n```\ncurl -XPOST \"https://api.unkey.dev/v1/keys.createKey\" \\\n  -H \"Authorization: Bearer <ROOT_KEY>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"apiId\": \"api_123\", \"name\": \"My Key\"}'\n```\n\n----------------------------------------\n\nTITLE: Testing the Ratelimited Endpoint\nDESCRIPTION: Command to test the protected endpoint using curl. Multiple requests within the configured time window will demonstrate the ratelimiting behavior.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/express.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://localhost:8000/secret'\n```\n\n----------------------------------------\n\nTITLE: Querying User's Daily Usage Per Key for a Month\nDESCRIPTION: Retrieves verification data grouped by key and day for a specific user and API over the last month. This query helps track usage patterns across different API keys over time, identifying which keys are most active.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&externalId=user_123&groupBy=key&groupBy=day&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Requests for Ratelimiter in TypeScript\nDESCRIPTION: This snippet shows how to enable async requests in the ratelimiter configuration. Async requests improve latency at the cost of slight accuracy reduction.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/introducing-ratelimiting.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = new Ratelimit({\n  // ...\n  async: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Unkey Seed Service via CLI\nDESCRIPTION: Commands to run the seed service for generating test data in your Unkey dashboard. The service can be run with default parameters or with a specific workspace ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/seeding-db-and-clickhouse.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm local --service=seed\n# With specific workspace\npnpm local --service=seed --ws=your_workspace_id\n```\n\n----------------------------------------\n\nTITLE: Deleting an Identity with Unkey Python SDK\nDESCRIPTION: This snippet shows how to delete an identity using the Unkey Python SDK. It includes setting up the client, specifying the identity to delete, and handling the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/identities.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.identities.delete(request={\n    \"identity_id\": \"id_1234\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission for API Key Creation\nDESCRIPTION: Enhanced UnkeyElements component with form submission handler that calls the server action and stores the returned API key in state.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst UnkeyElements = () => {\n    const [key, setKey] = useState<string>('')\n    async function onCreate(formData: FormData) {\n        const res = await create(formData)\n        if(res) setKey(res.key?.key);\n    }\n    ...\n    <form action={onCreate}>\n          <CardContent>\n            <div className=\"grid w-full items-center gap-4\">\n              <div className=\"flex flex-col space-y-1.5\">\n                <Label htmlFor=\"name\">Give your key a name</Label>\n                <Input name=\"name\" placeholder=\"Key for next big thing\" />\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between\">\n            <Button type=\"submit\">Create Key</Button>\n          </CardFooter>\n        </form>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining KeyAttributes DTO in Java\nDESCRIPTION: This code defines the KeyAttributes DTO class, which represents the attributes of an individual API key in the response. It includes various fields such as id, apiId, workspaceId, and more.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/api/list.mdx#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class KeyAttributes {\n    private String id;\n    private String apiId;\n    private String workspaceId;\n    private String start;\n    private String name;\n    private String ownerId;\n    private Meta meta;\n    private Long createdAt;\n    private Long expires;\n    private Integer remaining;\n    private KeyRateLimit ratelimit;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing COSS Starter Project with NPX\nDESCRIPTION: Command to create a new COSS (Commercial Open Source Software) application using NPX. This command would set up the entire project structure including the web app, API, and documentation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0004-coss-starter.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-coss-app\n```\n\n----------------------------------------\n\nTITLE: Ghost Button Implementation in React\nDESCRIPTION: Implementation of the ghost button variant with no background or border until interaction. Demonstrates various states and themes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-wrap items-center gap-4\">\n  <Button variant=\"ghost\">Default</Button>\n  <Button variant=\"ghost\" className=\"!bg-grayA-4\">Hover</Button>\n  <Button variant=\"ghost\" className=\"!ring-4 !ring-gray-7 !border-grayA-12\">Focus</Button>\n  <Button variant=\"ghost\" loading>Loading</Button>\n  <Button variant=\"ghost\" disabled>Disabled</Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Keys with Unkey Helper\nDESCRIPTION: Example of using the Unkey helper to create new API keys with custom configuration.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/nuxt/overview.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = useUnkey();\n\nconst created = await unkey.keys.create({\n  apiId: \"api_7oKUUscTZy22jmVf9THxDA\",\n  prefix: \"xyz\",\n  byteLength: 16,\n  ownerId: \"chronark\",\n  meta: {\n    hello: \"world\",\n  },\n  expires: 1686941966471,\n  ratelimit: {\n    async: true,\n    duration: 1000,\n    limit: 10,\n    refillRate: 1,\n    refillInterval: 1000,\n  },\n});\n\nconsole.log(created.key);\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Next.js Package with Bun\nDESCRIPTION: Command to install the Unkey Next.js package using Bun.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/nextjs\n```\n\n----------------------------------------\n\nTITLE: Updating API Key Remaining Usage with Unkey Python SDK\nDESCRIPTION: This snippet demonstrates how to update the remaining usage for an API key using the Unkey Python SDK. It shows setting the operation type and value for the update.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/keys.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport unkey\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.keys.update_remaining(request={\n    \"key_id\": \"key_123\",\n    \"op\": unkey.Op.SET,\n    \"value\": 1,\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Root Layout with Clerk Authentication\nDESCRIPTION: Next.js Root Layout setup that wraps the application with Clerk authentication provider to enable user authentication throughout the app.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\">\n        <body>{children}</body>\n      </html>\n    </ClerkProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Checkly CLI with Advanced Project Template\nDESCRIPTION: Command to create a new Checkly project using the advanced project template. This sets up a complete monitoring-as-code project structure with example checks.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/internal/checkly/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create checkly -- --template advanced-project\n```\n\n----------------------------------------\n\nTITLE: Rendering DateTime Example Component\nDESCRIPTION: JSX code that renders the DateTimeExample component as part of the documentation page. This displays an example of the DateTime component to showcase its functionality.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/date-time.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DateTimeExample/>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Key with POST Request using RPC Method\nDESCRIPTION: Example of a POST request using the new RPC method format to create a new key in the Unkey API. The request includes authentication, content type specification, and a JSON payload with key creation parameters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-12-15.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST \"https://api.unkey.dev/v1/keys.createKey\" \\\n  -H \"Authorization: Bearer <ROOT_KEY>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"apiId\": \"api_123\", \"name\": \"My Key\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Cleanup Task in Trigger.dev - TypeScript\nDESCRIPTION: Cleanup task implementation that reverses actions performed by the core task, such as closing PRs and deleting branches created during testing.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/update-workflow/update-workflow.test.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cleanupGlossaryUpdateTask = task({\n  id: \"cleanup_glossary_update\",\n  run: async ({ prNumber, branch }) => {\n    // Close PR and delete branch\n    return {\n      prClosed: true,\n      branchDeleted: true,\n      prNumber,\n      branch,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Recent Key Verifications\nDESCRIPTION: Implementation for retrieving recent key verification logs.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/clickhouse.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst recentVerifications = await ch.verifications.logs({\n  workspaceId: \"ws_123\",\n  keySpaceId: \"ks_123\",\n  keyId: \"key_123\"\n});\n\n// Returns the 50 most recent verifications for this key\n```\n\n----------------------------------------\n\nTITLE: Applying rate limiting to a tRPC create procedure\nDESCRIPTION: Example of how to use the custom rate-limited procedure to protect a project creation endpoint with Unkey rate limiting. It limits users to 3 requests per 5 seconds.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/learn-by-building.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n create: rateLimitedProcedure({ limit: 3, duration: 5 })\n    .input(\n      z.object({\n        projectName: z.string().min(3),\n        projectDescription: z.string(),\n        category: z.string(),\n        projectImage: z.string().optional(),\n      }),\n    )\n```\n\n----------------------------------------\n\nTITLE: Verifying a Disabled Key with Unkey API in Bash\nDESCRIPTION: This snippet shows how to verify a key using the Unkey API's keys.verifyKey endpoint. When used with a disabled key, the response will indicate that the key is not valid by setting 'valid' to false.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/enabled.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\t\"key\": \"<NEW_KEY>\"\n\t}'\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Next.js Package with Yarn\nDESCRIPTION: Command to install the Unkey Next.js package using Yarn.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/nextjs\n```\n\n----------------------------------------\n\nTITLE: Creating Permissions with Unkey Python Client\nDESCRIPTION: This snippet demonstrates how to create a new permission using the Unkey Python client. It initializes the client with a bearer token and calls the create method with a name and description for the permission.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/permissions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.permissions.create(request={\n    \"name\": \"record.write\",\n    \"description\": \"record.write can create new dns records for our domains.\",\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting API Handler in Go with Zen Framework\nDESCRIPTION: A complete handler for rate limiting API that verifies root keys, binds request body, checks permissions, and inserts rate limit overrides into the database. The handler shows how dependencies are injected and how error handling is managed.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage handler\n\nimport (...)\n\n// Reexporting to reuse in tests\ntype Request = spec.V2RatelimitSetOverrideRequestBody\ntype Response = spec.V2RatelimitSetOverrideResponseBody\n\n\n// Define the dependencies for this route. These are injected during route registration\ntype Services struct {\n\tLogger      logging.Logger\n\tDB          db.Database\n\tKeys        keys.KeyService\n\tPermissions permissions.PermissionService\n}\n\nfunc New(svc Services) zen.Route {\n\treturn zen.NewRoute(\"POST\", \"/v2/ratelimit.setOverride\", func(ctx context.Context, s *zen.Session) error {\n\n\t\tauth, err := svc.Keys.VerifyRootKey(ctx, s)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq := Request{}\n\t\terr = s.BindBody(&req)\n\t\tif err != nil {\n\t\t\treturn err // already tagged\n\t\t}\n\n\t\tnamespace, err := getNamespace(ctx, svc, auth.AuthorizedWorkspaceID, req)\n\t\tif err != nil {\n\t\t\tif errors.Is(err, sql.ErrNoRows) {\n\t\t\t\treturn fault.Wrap(err,\n\t\t\t\t\tfault.WithTag(fault.NOT_FOUND),\n\t\t\t\t\tfault.WithDesc(\"namespace not found\", \"This namespace does not exist.\"),\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif namespace.WorkspaceID != auth.AuthorizedWorkspaceID {\n\t\t\treturn fault.New(\"namespace not found\",\n\t\t\t\tfault.WithTag(fault.NOT_FOUND),\n\t\t\t\tfault.WithDesc(\"wrong workspace, masking as 404\", \"This namespace does not exist.\"),\n\t\t\t)\n\t\t}\n\n\t\tpermissions, err := svc.Permissions.Check(\n\t\t\tctx,\n\t\t\tauth.KeyID,\n\t\t\trbac.Or(\n\t\t\t\trbac.T(rbac.Tuple{\n\t\t\t\t\tResourceType: rbac.Ratelimit,\n\t\t\t\t\tResourceID:   namespace.ID,\n\t\t\t\t\tAction:       rbac.SetOverride,\n\t\t\t\t}),\n\t\t\t\trbac.T(rbac.Tuple{\n\t\t\t\t\tResourceType: rbac.Ratelimit,\n\t\t\t\t\tResourceID:   \"*\",\n\t\t\t\t\tAction:       rbac.SetOverride,\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n\t\tif err != nil {\n\t\t\treturn fault.Wrap(err,\n\t\t\t\tfault.WithTag(fault.INTERNAL_SERVER_ERROR),\n\t\t\t\tfault.WithDesc(\"unable to check permissions\", \"We're unable to check the permissions of your key.\"),\n\t\t\t)\n\t\t}\n\n\t\tif !permissions.Valid {\n\t\t\treturn fault.New(\"insufficient permissions\",\n\t\t\t\tfault.WithTag(fault.INSUFFICIENT_PERMISSIONS),\n\t\t\t\tfault.WithDesc(permissions.Message, permissions.Message),\n\t\t\t)\n\t\t}\n\n\t\toverrideID := uid.New(uid.RatelimitOverridePrefix)\n\t\terr = db.Query.InsertRatelimitOverride(ctx, svc.DB.RW(), db.InsertRatelimitOverrideParams{\n\t\t\tID:          overrideID,\n\t\t\tWorkspaceID: auth.AuthorizedWorkspaceID,\n\t\t\tNamespaceID: namespace.ID,\n\t\t\tIdentifier:  req.Identifier,\n\t\t\tLimit:       int32(req.Limit),    // nolint:gosec\n\t\t\tDuration:    int32(req.Duration), //nolint:gosec\n\t\t\tCreatedAt:   time.Now().UnixMilli(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn fault.Wrap(err,\n\t\t\t\tfault.WithTag(fault.DATABASE_ERROR),\n\t\t\t\tfault.WithDesc(\"database failed\", \"The database is unavailable.\"),\n\t\t\t)\n\t\t}\n\n\t\treturn s.JSON(http.StatusOK, Response{\n\t\t\tOverrideId: overrideID,\n\t\t})\n\t})\n}\n\nfunc getNamespace(ctx context.Context, svc Services, workspaceID string, req Request) (db.RatelimitNamespace, error) {\n\n\tswitch {\n\tcase req.NamespaceId != nil:\n\t\t{\n\t\t\treturn db.Query.FindRatelimitNamespaceByID(ctx, svc.DB.RO(), *req.NamespaceId)\n\t\t}\n\tcase req.NamespaceName != nil:\n\t\t{\n\t\t\treturn db.Query.FindRatelimitNamespaceByName(ctx, svc.DB.RO(), db.FindRatelimitNamespaceByNameParams{\n\t\t\t\tWorkspaceID: workspaceID,\n\t\t\t\tName:        *req.NamespaceName,\n\t\t\t})\n\t\t}\n\t}\n\n\treturn db.RatelimitNamespace{}, fault.New(\"missing namespace id or name\",\n\t\tfault.WithTag(fault.BAD_REQUEST),\n\t\tfault.WithDesc(\"missing namespace id or name\", \"You must provide either a namespace ID or name.\"),\n\t)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example REST API Response for User Details\nDESCRIPTION: Example of a GET request to retrieve user details and its JSON response format. The example shows how a RESTful API would typically return user information when accessing a specific user resource by ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/restful-api.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nGET /users/123\nResponse:\n{\n  \"id\": \"123\",\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration Setup\nDESCRIPTION: Configuration example for setting up Tailwind CSS to work with the @unkey/ui package, including content paths and theme extensions.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example tailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // Your app's content paths\n    \"./app/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n    // Also include Unkey UI package contents\n    \"../../internal/ui/src/**/*.tsx\",\n    \"../../internal/icons/src/**/*.tsx\",\n  ],\n  theme: {\n    extend: {\n      // Your theme extensions\n    },\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Error Handling Example with Fault in Go\nDESCRIPTION: A practical example showing how Fault integrates with existing Go code in a database operation context. This snippet demonstrates error wrapping, tagging, and dual-message pattern in a realistic scenario.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/go/pkg/fault/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc ProcessOrder(id string) error {\n    order, err := db.FindOrder(id)\n    if err != nil {\n        return fault.Wrap(err,\n            fault.WithTag(DATABASE_ERROR),\n            fault.WithDesc(\n                fmt.Sprintf(\"failed to find order %s\", id),\n                \"Order not found\",\n            ),\n        )\n    }\n\n    // ... process order ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unkey Client Component for API Key Management\nDESCRIPTION: A React client component that provides a form for creating API keys with Unkey, using Shadcn UI components for the interface.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Caching in Java with Spring\nDESCRIPTION: This snippet demonstrates how to use the @Cacheable annotation in Spring to cache product data in a Java service class. It caches the result of the getProductById method, reducing database queries for subsequent requests.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/api-caching.mdx#2025-04-10_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class ProductService {\n    @Cacheable(\"products\")\n    public Product getProductById(String id) {\n        // Code to fetch product from database\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Key Verification Response Structure\nDESCRIPTION: Example TypeScript response structure showing identity metadata in key verification response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/identities-beta.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // ...\n  \"valid\": true,\n  \"identity\": {\n    \"id\": \"id_123\",\n    \"externalId\": \"user_123\",\n    \"meta\": {\n      \"stripeCustomerId\": \"cus_123\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Live API Key with Environment in Unkey\nDESCRIPTION: This snippet demonstrates how to create a live API key with the 'live' environment and 'sk_live' prefix using the Unkey API.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/environments.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"environment\": \"live\",\n    \"prefix\": \"sk_live\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Adding Unkey Dependency to Cargo.toml\nDESCRIPTION: Manual method to add the Unkey SDK as a dependency in the project's Cargo.toml file.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nunkey = \"0.4\"\n```\n\n----------------------------------------\n\nTITLE: Updating an Identity with Unkey Python SDK\nDESCRIPTION: This snippet demonstrates how to update an identity using the Unkey Python SDK. It includes setting up the client, specifying identity details and rate limits, and handling the response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/services/identities.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.identities.update(request={\n    \"identity_id\": \"id_1234\",\n    \"external_id\": \"user_1234\",\n    \"ratelimits\": [\n        {\n            \"name\": \"tokens\",\n            \"limit\": 10,\n            \"duration\": 1000,\n        },\n        {\n            \"name\": \"tokens\",\n            \"limit\": 10,\n            \"duration\": 1000,\n        },\n        {\n            \"name\": \"tokens\",\n            \"limit\": 10,\n            \"duration\": 1000,\n        },\n    ],\n})\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Tagged Errors for Domain Error Handling in Go\nDESCRIPTION: Examples of creating descriptive, tagged errors using the fault package. This approach separates internal details from user-facing messages and adds categorization tags that determine how errors are handled in responses.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// When a database query returns no results\nif errors.Is(err, sql.ErrNoRows) {\n    return fault.Wrap(err,\n        fault.WithTag(fault.NOT_FOUND),\n        fault.WithDesc(\n            fmt.Sprintf(\"namespace '%s' not found in database\", namespaceName),  // Internal details for logs\n            \"This namespace does not exist\"                                      // User-facing message\n        )\n    )\n}\n\n// When handling permission checks\nif !permissions.Valid {\n    return fault.New(\"insufficient permissions\",\n        fault.WithTag(fault.INSUFFICIENT_PERMISSIONS),\n        fault.WithDesc(\n            fmt.Sprintf(\"key '%s' lacks permission on resource '%s'\", auth.KeyID, namespace.ID),\n            permissions.Message  // User-friendly message from the permission system\n        )\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a difficult-to-copy UUID\nDESCRIPTION: A demonstration of a standard UUID format that's difficult to copy with double-clicking due to the hyphens breaking the selection.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/uuid-ux.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nc6b10dd3-1dcf-416c-8ed8-ae561807fcaf\n```\n\n----------------------------------------\n\nTITLE: Displaying Feature Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the feature color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-feature-1\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-2\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-3\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-4\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-5\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-6\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-7\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-8\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-9\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-10\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-11\"/>\n  <div className=\"rounded-lg aspect-square bg-feature-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware Type in Go\nDESCRIPTION: The core middleware definition in Zen, represented as a function type that wraps handler functions. This simple functional approach enables powerful composition patterns.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Middleware func(handler HandleFunc) HandleFunc\n```\n\n----------------------------------------\n\nTITLE: Creating a UUID without hyphens for easier copying\nDESCRIPTION: Removing hyphens from UUIDs to make them easier to copy with double-clicking, which improves user experience when working with identifiers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/uuid-ux.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst id = crypto.randomUUID().replace(/-/g, \"\");\n// fe4723eab07f408384a2c0f051696083\n```\n\n----------------------------------------\n\nTITLE: Unkey Verification Response Example\nDESCRIPTION: Example JSON response from Unkey's verifyKey function\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"valid\": true,\n    \"ownerId\": \"james\",\n    \"meta\": {\n      \"hello\": \"world\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling Middleware in Go\nDESCRIPTION: Middleware that converts domain-specific errors (tagged with fault.WithTag) into appropriate HTTP responses. It uses the fault package to extract error tags and user-facing messages while maintaining proper HTTP status codes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/zen.mdx#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc WithErrorHandling(logger logging.Logger) Middleware {\n    return func(next HandleFunc) HandleFunc {\n        return func(ctx context.Context, s *Session) error {\n            err := next(ctx, s)\n            if err == nil {\n                return nil\n            }\n\n            // Convert domain errors to HTTP responses\n            switch fault.GetTag(err) {\n            case fault.NOT_FOUND:\n                return s.JSON(http.StatusNotFound, api.NotFoundError{\n                    Title:     \"Not Found\",\n                    Type:      \"https://unkey.com/docs/errors/not_found\",\n                    Detail:    fault.UserFacingMessage(err),\n                    RequestId: s.requestID,\n                    Status:    http.StatusNotFound,\n                    Instance:  nil,\n                })\n            case fault.BAD_REQUEST:\n                return s.JSON(http.StatusBadRequest, api.BadRequestError{\n                    Title:     \"Bad Request\",\n                    Type:      \"https://unkey.com/docs/errors/bad_request\",\n                    Detail:    fault.UserFacingMessage(err),\n                    RequestId: s.requestID,\n                    Status:    http.StatusBadRequest,\n                    Instance:  nil,\n                    Errors:    []api.ValidationError{...},\n                })\n            // Additional cases...\n            }\n\n            // Default to 500 Internal Server Error\n            return s.JSON(http.StatusInternalServerError, api.InternalServerError{\n                Title:     \"Internal Server Error\",\n                Type:      \"https://unkey.com/docs/errors/internal_server_error\",\n                Detail:    fault.UserFacingMessage(err),\n                RequestId: s.requestID,\n                Status:    http.StatusInternalServerError,\n                Instance:  nil,\n            })\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Verification Cost in Unkey\nDESCRIPTION: Example of verifying an API key with a custom cost setting. This request deducts 4 verifications instead of the default 1. If a key has fewer than 4 remaining verifications, the request would be rejected.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/remaining.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.verifyKey \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"apiId\":\"<API_ID>\",\n    \"key\": \"<NEW_KEY>\",\n    \"remaining\": {\n      \"cost\": 4\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey SDK with Cargo\nDESCRIPTION: Command to add the Unkey SDK to a Rust project using Cargo package manager.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/rs/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo add unkey\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World with @unkey/cache\nDESCRIPTION: Demonstrates basic usage of @unkey/cache, including creating a cache instance, defining a namespace, and performing set and get operations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCache, DefaultStatefulContext, Namespace } from \"@unkey/cache\";\nimport { MemoryStore } from \"@unkey/cache/stores\";\n\n/**\n * Define the type of your data,\n * or perhaps generate the types from your database\n */\ntype User = {\n    id: string;\n    email: string;\n};\n\n/**\n * In serverless you'd get this from the request handler\n * See /docs/libraries/ts/cache/overview#context\n */\nconst ctx = new DefaultStatefulContext();\n\nconst memory = new MemoryStore({ persistentMap: new Map() });\n\nconst cache = createCache({\n    user: new Namespace<User>(ctx, {\n      stores: [memory],\n      fresh: 60_000, // Data is fresh for 60 seconds\n      stale: 300_000, // Data is stale for 300 seconds\n    })\n});\n\nawait cache.user.set(\"userId\", { id: \"userId\", email: \"user@email.com\" });\nconst user = await cache.user.get(\"userId\")\nconsole.log(user)\n```\n\n----------------------------------------\n\nTITLE: Rendering Warning Primary Button Variants in React\nDESCRIPTION: Displays a collection of warning primary buttons in different states (default, hover, focus, loading, disabled) for both light and dark themes using the Button component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button variant=\"primary\" color=\"warning\">\n        Default\n      </Button>\n      <Button\n        variant=\"primary\"\n        color=\"warning\"\n        className=\"!bg-warning-8/90\"\n      >\n        Hover\n      </Button>\n      <Button\n        variant=\"primary\"\n        color=\"warning\"\n        className=\"!ring-4 !ring-warning-6 !border-warning-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"primary\" color=\"warning\" loading>\n        Loading\n      </Button>\n      <Button variant=\"primary\" color=\"warning\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex flex-wrap items-center gap-4 dark\">\n      <Button variant=\"primary\" color=\"warning\">\n        Default\n      </Button>\n      <Button\n        variant=\"primary\"\n        color=\"warning\"\n        className=\"!bg-warning-8/90\"\n      >\n        Hover\n      </Button>\n      <Button\n        variant=\"primary\"\n        color=\"warning\"\n        className=\"!ring-4 !ring-warning-6 !border-warning-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"primary\" color=\"warning\" loading>\n        Loading\n      </Button>\n      <Button variant=\"primary\" color=\"warning\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using base58 encoding with nanoid for more efficient IDs\nDESCRIPTION: Implementing base58 encoding with the nanoid library to create shorter, more readable identifiers while maintaining high collision resistance. This approach uses a larger character set and avoids ambiguous characters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/uuid-ux.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { customAlphabet } from \"nanoid\";\nexport const nanoid = customAlphabet(\n  \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\",\n);\n\nconst id = `prefix_${nanoid(22)}`;\n// prefix_KSPKGySWPqJWWWa37RqGaX\n```\n\n----------------------------------------\n\nTITLE: Creating a Key Connected to an Identity in Unkey\nDESCRIPTION: Create a key that's connected to an identity by making a POST request to the Unkey API. The request includes API ID, key prefix, and the same external ID as the identity to establish the connection.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/identities/shared-ratelimits.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst createKeyResponse = await fetch(`https://api.unkey.dev/v1/keys.createKey`, {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${rootKey}`,\n    },\n    body: JSON.stringify({\n        apiId: apiId,\n        prefix: \"acme\",\n        // by providing the same externalId as the identity, we connect the key to the identity\n        externalId: externalId, \n    }),\n});\n\nconst key = await createKeyResponse.json<{\n    keyId: string;\n    key: string;\n}>();\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Appearance in React\nDESCRIPTION: Example showing how to customize Unkey icons by applying different text colors and sizes using className props. Demonstrates using error and warning colors as well as custom sizing.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/icons.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Row>\n    <Nodes className=\"text-error-9\"/>\n    <Sparkle3 className=\"text-warning-9 size-16\"/>\n    <TaskUnchecked className=\"size-[12px]\"/>\n</Row>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ClickHouse Client in TypeScript\nDESCRIPTION: Example showing basic ClickHouse client initialization and operations for verification events and queries.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/clickhouse.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the client\nconst ch = new ClickHouse({ url: process.env.CLICKHOUSE_URL });\n\n// Insert verification events\nawait ch.verifications.insert({\n  request_id: \"req_123\",\n  time: Date.now(),\n  workspace_id: \"ws_123\",\n  key_space_id: \"ks_123\",\n  key_id: \"key_123\",\n  outcome: \"VALID\",\n  region: \"us-east-1\",\n  tags: [\"prod\", \"api\"]\n});\n\n// Query verification statistics\nconst stats = await ch.verifications.perDay({\n  workspaceId: \"ws_123\",\n  keySpaceId: \"ks_123\",\n  start: yesterdayTimestamp,\n  end: nowTimestamp\n});\n\n// Get billable usage for a month\nconst usage = await ch.billing.billableVerifications({\n  workspaceId: \"ws_123\",\n  year: 2023,\n  month: 7\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Unkey UI Component Implementation\nDESCRIPTION: Example of implementing basic Unkey UI components including FormInput and Button in a React component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/index.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, FormInput } from \"@unkey/ui\";\n\nfunction MyComponent() {\n  return (\n    <div>\n      <FormInput\n        label=\"API Key Name\"\n        description=\"Give your key a descriptive name\"\n        required\n      />\n\n      <Button>Create Key</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response Format\nDESCRIPTION: Structure of a successful response from the Unkey API. When a request succeeds, it returns a result object with data specific to the method called.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/api/README.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: T; // The result depends on what method you called\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Keys with Usage Limits in Unkey\nDESCRIPTION: This snippet demonstrates how to create an API key with a usage limit using Unkey's API. The request includes an API ID and sets a 'remaining' value of 100, which defines how many times the key can be used before invalidation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-07-21.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://api.unkey.dev/v1/keys.createKey \\\n--header 'Authorization: Bearer <UNKEY>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\"apiId\":\"<API_ID>\",\n\"remaining\": 100\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Unkey Environment Variables\nDESCRIPTION: Environment variable configuration for the Unkey API token.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/nuxt/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nNUXT_UNKEY_TOKEN=<your api key>\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace with @unkey/cache\nDESCRIPTION: Demonstrates how to create a namespace with multiple stores, including memory and Cloudflare, and configure cache settings.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Namespace, DefaultStatefulContext, MemoryStore, CloudflareStore } from \"@unkey/cache\";\n\ntype User = {\n  email: string;\n}\n\nconst memory = new MemoryStore({\n  persistentMap: new Map(),\n});\n\nconst cloudflare = new CloudflareStore({\n  cloudflareApiKey: c.env.CLOUDFLARE_API_KEY,\n  zoneId: c.env.CLOUDFLARE_ZONE_ID,\n  domain: \"cache.unkey.dev\",\n})\n\nconst ctx = new DefaultStatefulContext()\n\nconst namespace = new Namespace<User>(ctx, {\n  stores: [memory, cloudflare],\n  fresh: 60_000,\n  stale: 900_000,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Empty Component in React\nDESCRIPTION: This snippet shows how to import the Empty component and other related components and icons for use in a React application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/empty.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Empty } from \"@unkey/ui\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { BookBookmark, ShieldCheck } from \"@unkey/icons\";\nimport { Button } from \"@unkey/ui\";\n```\n\n----------------------------------------\n\nTITLE: Primary Button Implementation in React\nDESCRIPTION: Basic implementation of the primary button variant showing different states in both light and dark modes. Includes default, hover, focus, loading, and disabled states.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button>Default</Button>\n      <Button className=\"!bg-accent-12/90\">Hover</Button>\n      <Button className=\"!ring-4 !ring-gray-7\">Focus</Button>\n      <Button loading>Loading</Button>\n      <Button disabled>Disabled</Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Grouping by Tags\nDESCRIPTION: JSON response showing verification stats grouped by tag combinations. Each element represents one unique tag combination and includes the verification outcome counts and the tags used in that combination.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"valid\": 50,\n    \"notFound\": 0,\n    \"forbidden\": 3,\n    \"usageExceeded\": 6,\n    \"rateLimited\": 10,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 69,\n    \"tags\": [] // these did not have tags specified\n  },\n  {\n    \"valid\": 1,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 1,\n    \"tags\": [\n      \"a\",\n      \"b\"\n    ]\n  },\n  {\n    \"valid\": 2,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 2,\n    \"tags\": [\n      \"a\",\n      \"c\"\n    ]\n  },\n  {\n    \"valid\": 2,\n    \"notFound\": 0,\n    \"forbidden\": 0,\n    \"usageExceeded\": 0,\n    \"rateLimited\": 0,\n    \"unauthorized\": 0,\n    \"disabled\": 0,\n    \"insufficientPermissions\": 0,\n    \"expired\": 0,\n    \"total\": 2,\n    \"tags\": [\n      \"a\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing DateTime Component Dependencies\nDESCRIPTION: Importing necessary components for the DateTime documentation page, including Button from Unkey UI, custom rendering components, and the DateTimeExample component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/date-time.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@unkey/ui\"\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\nimport { Row } from \"@/app/components/row\"\nimport { DateTimeExample } from \"./date-time.example\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Warning Outline Button Variants in React\nDESCRIPTION: Displays a collection of warning outline buttons in different states (default, hover, focus, loading, disabled) for both light and dark themes using the Button component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button variant=\"outline\" color=\"warning\">\n        Default\n      </Button>\n      <Button variant=\"outline\" color=\"warning\" className=\"!bg-grayA-2\">\n        Hover\n      </Button>\n      <Button\n        variant=\"outline\"\n        color=\"warning\"\n        className=\"!ring-4 !ring-warning-6 !border-warning-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"outline\" color=\"warning\" loading>\n        Loading\n      </Button>\n      <Button variant=\"outline\" color=\"warning\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex flex-wrap items-center gap-4 dark\">\n      <Button variant=\"outline\" color=\"warning\">\n        Default\n      </Button>\n      <Button variant=\"outline\" color=\"warning\" className=\"!bg-grayA-2\">\n        Hover\n      </Button>\n      <Button\n        variant=\"outline\"\n        color=\"warning\"\n        className=\"!ring-4 !ring-warning-6 !border-warning-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"outline\" color=\"warning\" loading>\n        Loading\n      </Button>\n      <Button variant=\"outline\" color=\"warning\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a rate-limited Bun HTTP server\nDESCRIPTION: Complete TypeScript implementation of a Bun HTTP server with Unkey rate limiting. The code creates a rate limiter configured to allow 2 requests per 30 seconds and applies it to incoming requests.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/bun.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@unkey/ratelimit\";\n\n/**\nThis can be a seperate util for easy configurable ratelimiting across\nmultiple routes.\n\nnamespace = The route identifier you would like to ratelimit\nlimit = The amount of requests\nduration = amount of time to limit against for example \"30s\"\n\n**/\nconst limiter = new Ratelimit({\n  namespace: \"bun-example\",\n  limit: 2,\n  duration: \"30s\",\n  rootKey: process.env.UNKEY_ROOT_KEY\n})\n\nconst server = Bun.serve({\n  async fetch(req) {\n    const identifier = req.getUserId() // or ip or anything else you want\n\n    const ratelimit = await limiter.limit(identifier)\n    if (!ratelimit.success){\n      return Response(\"try again later\", { status: 429 })\n    }\n    return return new Response(\"Success\", { status: 200 });\n  },\n  port: 8000,\n});\nconsole.log(`Listening on ${server.url}`);\n```\n\n----------------------------------------\n\nTITLE: Memory Store Implementation\nDESCRIPTION: Example of implementing an in-memory store using the MemoryStore class.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemoryStore } from \"@unkey/cache/stores\";\n\nconst memory = new MemoryStore({\n  persistentMap: new Map(),\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling API Keys with cURL\nDESCRIPTION: API request example using cURL to disable an API key. This functionality allows temporarily preventing access to the key without deleting it, useful for scenarios like handling unpaid accounts.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-01-19.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.updateKey \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"enabled\": false,\n  \"keyId\": \"<keyId>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/api Package\nDESCRIPTION: Various package manager commands to install the @unkey/api TypeScript client.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n npm install @unkey/api\n```\n\nLANGUAGE: bash\nCODE:\n```\n pnpm add @unkey/api\n```\n\nLANGUAGE: bash\nCODE:\n```\n yarn add @unkey/api\n```\n\nLANGUAGE: bash\nCODE:\n```\n bun install @unkey/api\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Behavior for Unkey Client\nDESCRIPTION: Customizes the retry behavior for network errors, including the number of attempts and backoff strategy between retries.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/overview.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst unkey = new Unkey({\n  // ...\n  retry: {\n    attempts: 3,\n    backoff: (retryCount) => retryCount * 1000\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Alpha Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the success alpha color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-successA-1\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-2\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-3\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-4\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-5\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-6\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-7\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-8\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-9\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-10\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-11\"/>\n  <div className=\"rounded-lg aspect-square bg-successA-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Warning Ghost Button Variants in React\nDESCRIPTION: Displays a collection of warning ghost buttons in different states (default, hover, focus, loading, disabled) for both light and dark themes using the Button component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button variant=\"ghost\" color=\"warning\">\n        Default\n      </Button>\n      <Button variant=\"ghost\" color=\"warning\" className=\"!bg-warning-3\">\n        Hover\n      </Button>\n      <Button\n        variant=\"ghost\"\n        color=\"warning\"\n        className=\"!ring-4 !ring-warning-6 !border-warning-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"ghost\" color=\"warning\" loading>\n        Loading\n      </Button>\n      <Button variant=\"ghost\" color=\"warning\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex flex-wrap items-center gap-4 dark\">\n      <Button variant=\"ghost\" color=\"warning\">\n        Default\n      </Button>\n      <Button variant=\"ghost\" color=\"warning\" className=\"!bg-warning-3\">\n        Hover\n      </Button>\n      <Button\n        variant=\"ghost\"\n        color=\"warning\"\n        className=\"!ring-4 !ring-warning-6 !border-warning-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"ghost\" color=\"warning\" loading>\n        Loading\n      </Button>\n      <Button variant=\"ghost\" color=\"warning\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for tRPC Router with Ratelimiting\nDESCRIPTION: Imports necessary dependencies for a tRPC router including the Ratelimit class from @unkey/ratelimit, TRPCError for error handling, and environment variables.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimit-trpc-routes.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\n\nimport {\n  createTRPCRouter,\n  protectedProcedure,\n  publicProcedure,\n} from \"~/server/api/trpc\";\nimport { posts } from \"~/server/db/schema\";\nimport { env } from \"~/env\";\nimport { TRPCError } from \"@trpc/server\";\nimport { Ratelimit } from \"@unkey/ratelimit\";\n```\n\n----------------------------------------\n\nTITLE: Running Unkey Local Development Setup Command\nDESCRIPTION: This command sets up the local development environment for Unkey. It accepts options to specify the service to develop and whether to skip the environment setup prompt.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/tools/local/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm local [options]\n```\n\n----------------------------------------\n\nTITLE: Cache Metrics Type Definition\nDESCRIPTION: Defines the structure of metrics collected by the metrics middleware, including read, write, and remove operations with their associated metadata and performance metrics.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype Metric =\n  | {\n      metric: \"metric.cache.read\";\n      key: string;\n      hit: boolean;\n      status?: \"fresh\" | \"stale\";\n      latency: number;\n      tier: string;\n      namespace: string;\n    }\n  | {\n      metric: \"metric.cache.write\";\n      key: string;\n      latency: number;\n      tier: string;\n      namespace: string;\n    }\n  | {\n      metric: \"metric.cache.remove\";\n      key: string;\n      latency: number;\n      tier: string;\n      namespace: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Rendering Success Outline Button Variants in React\nDESCRIPTION: Displays a collection of success outline buttons in different states (default, hover, focus, loading, disabled) for both light and dark themes using the Button component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button variant=\"outline\" color=\"success\">\n        Default\n      </Button>\n      <Button variant=\"outline\" color=\"success\" className=\"!bg-grayA-2\">\n        Hover\n      </Button>\n      <Button\n        variant=\"outline\"\n        color=\"success\"\n        className=\"!ring-4 !ring-success-6 !border-success-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"outline\" color=\"success\" loading>\n        Loading\n      </Button>\n      <Button variant=\"outline\" color=\"success\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex flex-wrap items-center gap-4 dark\">\n      <Button variant=\"outline\" color=\"success\">\n        Default\n      </Button>\n      <Button variant=\"outline\" color=\"success\" className=\"!bg-grayA-2\">\n        Hover\n      </Button>\n      <Button\n        variant=\"outline\"\n        color=\"success\"\n        className=\"!ring-4 !ring-success-6 !border-success-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"outline\" color=\"success\" loading>\n        Loading\n      </Button>\n      <Button variant=\"outline\" color=\"success\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing usehook-ts Package\nDESCRIPTION: NPM command to install the usehook-ts package for TypeScript-safe hooks.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/improve-auth-experience.mdx#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install usehook-ts\n```\n\n----------------------------------------\n\nTITLE: Unkey API Key Creation Response in JSON\nDESCRIPTION: This JSON response from Unkey provides the newly created API key and its associated keyId. The key should be passed to the user, while the keyId can be used for future key management operations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/how-we-ai.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  \"key\": \"prefix_5AkwpYpIHntGBpTHLqKg\",\n  \"keyId\": \"key_123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Rate Limit Package\nDESCRIPTION: Commands to install the @unkey/ratelimit package using different package managers\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/nextjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/ratelimit\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/ratelimit\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/ratelimit\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Example Unkey Local Development Setup Command\nDESCRIPTION: An example command that sets up the local development environment for the dashboard service while skipping the environment setup prompt.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/tools/local/README.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm local --service=dashboard --skip-env\n```\n\n----------------------------------------\n\nTITLE: Implementing Square-Shaped Buttons with Icons in React\nDESCRIPTION: Code demonstrating how to create square-shaped icon buttons with different variants in both light and dark themes using the shape prop with the Button component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex items-center gap-4\">\n      <Button shape=\"square\">\n        <PlusIcon />\n      </Button>\n      <Button shape=\"square\" variant=\"outline\">\n        <SearchIcon />\n      </Button>\n      <Button shape=\"square\" variant=\"ghost\" color=\"danger\">\n        <TrashIcon />\n      </Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex items-center gap-4 dark\">\n      <Button shape=\"square\">\n        <PlusIcon />\n      </Button>\n      <Button shape=\"square\" variant=\"outline\">\n        <SearchIcon />\n      </Button>\n      <Button shape=\"square\" variant=\"ghost\" color=\"danger\">\n        <TrashIcon />\n      </Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Unkey Authentication Errors\nDESCRIPTION: Shows how to implement custom error handling for Unkey authentication failures using the onError parameter. This provides more control over error responses.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/hono.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\napp.use(\n  \"*\",\n  unkey({\n    onError: (c, err) => {\n      // handle error\n      return c.text(\"unauthorized\", 401);\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using various package managers. This allows developers to start the local development environment.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/play/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Using AutoTypeTable Component for Props Documentation\nDESCRIPTION: Example of using the AutoTypeTable component to dynamically generate a table of props documentation for the FormInput component from its TypeScript types.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/form-input.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoTypeTable\n    name=\"DocumentedFormInputProps\"\n    path=\"../../internal/ui/src/components/form/index.tsx\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Users to Specific AWS IAM Identity Center Groups\nDESCRIPTION: This command demonstrates how to add a user to a specific AWS group by providing both the username and group name parameters. The example shows adding 'john.doe@unkey.com' to the 'aws-administrators' group.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/infrastructure/aws/user-group-management.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PROFILE=unkey-root-admin \\\nAWS_REGION=us-east-1 \\\nbash unkeyed/infra/contrib/add-aws-user-to-aws-group.sh john.doe@unkey.com aws-administrators\n```\n\n----------------------------------------\n\nTITLE: Recovering Plaintext Keys with Unkey API in Shell\nDESCRIPTION: This code shows how to retrieve a plaintext key using Unkey's getKey endpoint with the decrypt parameter set to true. The request requires a root key with decrypt_key permission to access the encrypted keys.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/security/recovering-keys.mdx#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n  --url https://api.unkey.dev/v1/keys.getKey?keyId={KEY_ID}&decrypt=true \\\n  --header 'Authorization: Bearer {ROOT_KEY}'\n```\n\n----------------------------------------\n\nTITLE: Sample Response from WHOAMI Endpoint\nDESCRIPTION: The JSON response structure returned by the WHOAMI endpoint, showing key details including ID, name, remaining uses, identity information, metadata, creation timestamp, status, and environment.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-12-06.mdx#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"key_123\",\n  \"name\": \"API Key 1\",\n  \"remaining\": 1000,\n  \"identity\": {\n    \"id\": \"id_123\",\n    \"externalId\": \"ext123\"\n  },\n  \"meta\": {\n    \"role\": \"admin\",\n    \"plan\": \"premium\"\n  },\n  \"createdAt\": 1620000000000,\n  \"enabled\": true,\n  \"environment\": \"production\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Rate Limit Package\nDESCRIPTION: Commands to install the @unkey/ratelimit package using different package managers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/hono.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/ratelimit\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/ratelimit\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/ratelimit\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun for Unkeyed Unkey Project\nDESCRIPTION: This command installs the project dependencies using Bun package manager. It should be run in the project root directory to set up all required packages.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/logdrain/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Importing Icons from Unkey Library\nDESCRIPTION: Basic import syntax for Unkey icons, showing how to import a specific icon from the @unkey/icons package.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/icons.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IconName } from \"@unkey/icons\";\n```\n\n----------------------------------------\n\nTITLE: Querying Unkey Analytics API\nDESCRIPTION: This code demonstrates how to query Unkey's analytics API to get verification data. The request includes parameters for time range, grouping by identity, ordering by total verifications, and limiting results to the top 5 users.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1733749385000&end=1736431397000&apiId=api_262b3iR7gkmP7aUyZ24uihcijsCe&groupBy=identity&orderBy=total&order=desc&limit=5' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <UNKEY_ROOT_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Running Unkeyed Unkey Project with Bun\nDESCRIPTION: This command runs the project using Bun runtime. It executes the 'index.ts' file, which is likely the entry point of the application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/logdrain/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Applying Metrics Middleware to Unkey Cache Store\nDESCRIPTION: Shows how to wrap a cache store with metrics middleware to collect usage statistics. Uses a custom metrics sink implementation and a memory store as an example.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withMetrics } from \"@unkey/cache/middleware\";\n\nconst metricsSink = // your metrics sink\nconst metricsMiddleware = withMetrics(metricsSink);\n\nconst memory = new MemoryStore({ persistentMap: new Map() });\n\nnew Namespace<User>(ctx, {\n  // Wrap the store with the metrics middleware\n  stores: [metricsMiddleware.wrap(memory)],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Id Component Props in TypeScript\nDESCRIPTION: This snippet defines the prop types for the Id component using a TypeTable. It includes props for value, truncate, and className with their descriptions and types.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/id.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeTable\n  type={{\n    value: {\n      description:\n        'The identifier to display.',\n      type: 'string',\n    },\n    truncate: {\n      description:\n        'Number of characters to show before truncating.',\n      type: 'number | undefined',\n      default: undefined\n    },\n    className: {\n      description:\n        'A className applied to the component to override the styling.',\n      type: 'string | undefined',\n      default: undefined\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Local Command with Options\nDESCRIPTION: Example of the pnpm local command with options to specify which service to develop and skip environment setup prompts.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/index.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm local [options]\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry for Unkey Client\nDESCRIPTION: Disables the collection of anonymous telemetry data by the Unkey client, which is enabled by default to help understand SDK usage.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/overview.mdx#2025-04-10_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst unkey = new Unkey({\n  disableTelemetry: true\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Hono Package\nDESCRIPTION: Commands to install the @unkey/hono package using different package managers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/hono.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/hono\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/hono\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/hono\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/hono\n```\n\n----------------------------------------\n\nTITLE: Deleting Override with Namespace Name in TypeScript\nDESCRIPTION: Example showing how to delete a ratelimit override using a namespace name and user identifier.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/override/delete-override.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait unkey.deleteOverride({\n    identifier: \"user_123\",\n    namespaceName: \"email.outbound\",\n})\n```\n\n----------------------------------------\n\nTITLE: Proposing New File Structure for Authorization Feature\nDESCRIPTION: Demonstrates the proposed feature-based architecture for the authorization feature, with clear separation of components, actions, hooks, and other related files.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0007-client-file-structure.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n├── authorization/\n│   ├── permissions/\n│   │   ├── [permissionId]/\n│   │   │   ├── components/\n│   │   │   │   └── permission-details.tsx\n│   │   │   ├── actions/\n│   │   │   │   └── delete-permission.ts\n│   │   │   ├── hooks/                     # Page-specific query hooks\n│   │   │   │   └── use-permission.ts      # Single permission queries\n│   │   │   └── page.tsx\n│   │   ├── components/\n│   │   │   ├── create-new-permission/\n│   │   │   │   ├── index.tsx\n│   │   │   │   └── permission-form.tsx\n│   │   ├── schemas/                       # New validation schemas folder\n│   │   │   ├── permission-form.schema.ts  # .schema or -schema suffix are both fine.\n│   │   │   └── permission.schema.ts\n│   │   ├── types/\n│   │   │   └── permission.ts\n│   │   ├── utils/\n│   │   │   └── permission-validator.ts\n│   │   ├── hooks/\n│   │   │   ├── use-permission-form.ts\n│   │   │   └── queries/                   # Shared permission query hooks\n│   │   │       ├── use-permissions-list.ts\n│   │   │       ├── use-create-permission.ts\n│   │   │       └── use-update-permission.ts\n│   │   ├── constants.ts                   # Permission wide constants\n│   │   └── page.tsx\n├── constants/\n│   └── shared.ts                          # Authorization wide constants\n```\n\n----------------------------------------\n\nTITLE: Displaying Gray Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the gray color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-gray-1\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-2\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-3\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-4\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-5\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-6\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-7\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-8\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-9\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-10\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-11\"/>\n  <div className=\"rounded-lg aspect-square bg-gray-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a rate-limited tRPC procedure middleware with Unkey\nDESCRIPTION: A TypeScript implementation of a middleware for tRPC that adds rate limiting functionality using Unkey. It extends protected procedures with configurable rate limits.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/learn-by-building.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const rateLimitedProcedure = ({\n  limit,\n  duration,\n}: {\n  limit: number;\n  duration: number;\n}) =>\n  protectedProcedure.use(async (opts) => {\n    const unkey = new Ratelimit({\n      rootKey: env.UNKEY_ROOT_KEY,\n      namespace: `trpc_${opts.path}`,\n      limit: limit ?? 3,\n      duration: duration ? `${duration}s` : `${5}s`,\n    });\n\n    const ratelimit = await unkey.limit(opts.ctx.session.user.id);\n\n    if (!ratelimit.success) {\n      throw new TRPCError({\n        code: \"TOO_MANY_REQUESTS\",\n        message: JSON.stringify(ratelimit),\n      });\n    }\n\n    return opts.next({\n      ctx: {\n        ...opts.ctx,\n        remaining: ratelimit.remaining,\n      },\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Structuring Verification Event Data in JSON\nDESCRIPTION: Defines the structure of a verification event JSON object, including workspaceId, keyId, timestamp, and denial reason. This data is ingested into Tinybird for analytics and billing purposes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/high-frequency-usage-billing.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"workspaceId\": \"ws_123\",\n    \"keyId\": \"key_123\",\n    \"time\": 1709119218743,\n    \"deniedReason\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the success color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-success-1\"/>\n  <div className=\"rounded-lg aspect-square bg-success-2\"/>\n  <div className=\"rounded-lg aspect-square bg-success-3\"/>\n  <div className=\"rounded-lg aspect-square bg-success-4\"/>\n  <div className=\"rounded-lg aspect-square bg-success-5\"/>\n  <div className=\"rounded-lg aspect-square bg-success-6\"/>\n  <div className=\"rounded-lg aspect-square bg-success-7\"/>\n  <div className=\"rounded-lg aspect-square bg-success-8\"/>\n  <div className=\"rounded-lg aspect-square bg-success-9\"/>\n  <div className=\"rounded-lg aspect-square bg-success-10\"/>\n  <div className=\"rounded-lg aspect-square bg-success-11\"/>\n  <div className=\"rounded-lg aspect-square bg-success-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Unkey Internal Role Schema in TypeScript\nDESCRIPTION: This code snippet demonstrates the schema for Unkey's internal roles. It uses a specific format to represent different permissions for root keys and APIs, including create, read, update, and delete operations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0001-rbac.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nroot_key::*::read_root_key\nroot_key::*::create_root_key // a root key MUST NOT be allowed to create another key with more permissions than itself\nroot_key::*::delete_root_key\nroot_key::*::update_root_key\napi::*::create_api\napi::*::delete_api // either wildcard or a specific id -> api::api_123::delete_api\napi::*::read_api\napi::*::update_api\napi::*::read_key\napi::*::create_key\napi::*::update_key\napi::*::delete_key\n```\n\n----------------------------------------\n\nTITLE: Sending OTP without Ratelimiting in Next.js\nDESCRIPTION: This snippet demonstrates an insecure implementation of sending a One-Time Password (OTP) via email using a Next.js server action. It generates a random 6-digit code and sends it to the user's email.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimiting-otp.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\nimport { randomInt } from \"crypto\";\n\nexport async function sendOTP(formData: FormData) {\n  try {\n    const email = formData.get(\"email\") as string | null;\n    if (!email) {\n      return {\n        success: false,\n        error: \"Email was not supplied, please try again\",\n        statusCode: 400,\n      };\n    }\n    const otp = randomInt(100000, 999999).toString();\n\n    const { data, error } = await emails.send({\n      from: \"james@unkey.com\",\n      to: email,\n      subject: \"OTP code\",\n      text: `Your OTP code is ${otp}`\n    });\n    // handled error\n    if (error) {\n      console.error(error);\n      return { success: false, error: \"Failed to send email\", statusCode: 500 };\n    }\n    return {\n      success: true,\n      statusCode: 201,\n    };\n    //catch\n  } catch (e) {\n    return { success: false, error: \"Failed to send email\", statusCode: 500 };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Implementation with @unkey/cache in TypeScript\nDESCRIPTION: Comprehensive example showing how to create and use a basic cache with @unkey/cache. It demonstrates defining types, creating a memory store, configuring cache namespaces with fresh and stale times, and using both basic and SWR caching methods.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/announcing-unkey-cache-package.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCache, DefaultStatefulContext, Namespace } from \"@unkey/cache\";\nimport { MemoryStore } from \"@unkey/cache/stores\";\n\n/**\n * Let's say we have two types, `User` and `Project`:\n */\ntype User = { id: string; email: string };\ntype Project = { name: string; description: string };\n\n/**\n * Next we'll be creating a store. A store is really just a small abstraction\n * over a key-value database.\n */\nconst memory = new MemoryStore({ persistentMap: new Map() });\n\n/**\n * We'll create a cache instance with our two types, `User` and `Project`, and\n * configure the cache to use the memory store. We'll also set the `fresh` and\n * `stale` times for each type.\n * The `ctx` object is provided in the request handler and allows us to do some\n * background work without blocking the request.\n */\nconst cache = createCache({\n    user: new Namespace<User>(ctx, {\n      stores: [memory],\n      fresh: 60_000,\n      stale: 300_000,\n    }),\n    project: new Namespace<Project>(ctx, {\n      stores: [memory],\n      fresh: 300_000,\n      stale: 900_000,\n    })\n});\n\n/**\n * That's it! Now we can use the cache like this:\n */\nawait cache.user.set(\"userId\", { id: \"userId\", email: \"user@email.com\" });\nconst user = await cache.user.get(\"userId\");\nconsole.log(user);\n\n\n/**\n * To make full use of the SWR capabilities, we can use the `swr` method, which\n * will automatically handle the cache misses and cache updates for us.\n * This will check all stores for the value, and if it's not found, it will\n * call the provided function to get the value and cache it automatically.\n */\nconst user = await cache.user.swr(\"userId\", async () => {\n  return await database.get(...)\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey and Clerk Dependencies\nDESCRIPTION: Command to install the Unkey TypeScript library and Clerk Next.js package for authentication integration.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/api @clerk/nextjs\n```\n\n----------------------------------------\n\nTITLE: Customizing API Key Header in Unkey Middleware\nDESCRIPTION: Example of customizing the header where the API key is expected. By default, the middleware uses the Authorization header, but this can be changed to any custom header.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/hono.mdx#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\napp.use(\n  \"*\",\n  unkey({\n    getKey: (c) => c.req.header(\"x-api-key\"),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Tinybird Query via cURL\nDESCRIPTION: Example cURL command to query the Tinybird endpoint for verifications by workspace. It demonstrates how to pass workspaceId, year, and month as parameters to the endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/high-frequency-usage-billing.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl .../endpoint?workspaceId=ws_123&year=2024&month=2\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the info color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-info-1\"/>\n  <div className=\"rounded-lg aspect-square bg-info-2\"/>\n  <div className=\"rounded-lg aspect-square bg-info-3\"/>\n  <div className=\"rounded-lg aspect-square bg-info-4\"/>\n  <div className=\"rounded-lg aspect-square bg-info-5\"/>\n  <div className=\"rounded-lg aspect-square bg-info-6\"/>\n  <div className=\"rounded-lg aspect-square bg-info-7\"/>\n  <div className=\"rounded-lg aspect-square bg-info-8\"/>\n  <div className=\"rounded-lg aspect-square bg-info-9\"/>\n  <div className=\"rounded-lg aspect-square bg-info-10\"/>\n  <div className=\"rounded-lg aspect-square bg-info-11\"/>\n  <div className=\"rounded-lg aspect-square bg-info-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/nextjs package\nDESCRIPTION: Commands to install the @unkey/nextjs package using various package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/nextjs\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/nextjs\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/nextjs\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/nextjs\n```\n\n----------------------------------------\n\nTITLE: Querying Verifications by Workspace in SQL\nDESCRIPTION: SQL query to retrieve total verifications for a specific workspace and month. It uses a materialized view and accepts workspaceId, year, and month as parameters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/high-frequency-usage-billing.mdx#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    countMerge(total) as total\nFROM mv__monthly_verifications__v2\nWHERE\n    workspaceId = {{ String(workspaceId, required=True) }}\n    AND time = makeDate({{ Int64(year) }}, {{ Int64(month) }}, 1)\nGROUP BY time\n```\n\n----------------------------------------\n\nTITLE: Creating an Identity with Rate Limits in Unkey\nDESCRIPTION: Example of creating an identity with custom rate limits using the Unkey API. This allows grouping keys together and sharing metadata and rate limits across them, useful for enterprise tiers with specific usage limits.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-12-06.mdx#2025-04-10_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/identities.createIdentity \\\n  --header 'Authorization: Bearer unkey_root_key' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"ratelimits\": [\n    {\n      \"name\": \"enterprise_tier\",\n      \"limit\": 50000,\n      \"duration\": 3600000\n    },\n    {\n      \"name\": \"tokens\",\n      \"limit\": 86400000,\n      \"duration\": 10\n    }\n  ],\n  \"externalId\": \"acme_corp\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the warning color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-warning-1\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-2\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-3\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-4\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-5\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-6\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-7\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-8\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-9\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-10\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-11\"/>\n  <div className=\"rounded-lg aspect-square bg-warning-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unkey Form Component for API Key Creation\nDESCRIPTION: React component that renders a card with a form for creating an API key, allowing users to name their key before submission.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst UnkeyElements = () => {\n  return (\n    <div className=\"mt-8\">\n      <Card className=\"w-[350px]\">\n        <CardHeader>\n          <CardTitle>Create API Key</CardTitle>\n          <CardDescription>\n            Create your API key so you can interact with our API.\n          </CardDescription>\n        </CardHeader>\n\n        <form>\n          <CardContent>\n            <div className=\"grid w-full items-center gap-4\">\n              <div className=\"flex flex-col space-y-1.5\">\n                <Label htmlFor=\"name\">Give your key a name</Label>\n                <Input name=\"name\" placeholder=\"Key for next big thing\" />\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between\">\n            <Button type=\"submit\">Create Key</Button>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n};\nexport { UnkeyElements };\n```\n\n----------------------------------------\n\nTITLE: Verifying User Code and Generating API Key\nDESCRIPTION: TypeScript function in the web application that verifies the user's code, generates a new API key using Unkey, and sends it back to the CLI.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/cli-auth.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function verify(opts: { code: string | null; redirect: string | null }) {\n  setLoading(true);\n  try {\n    const req = await fetch(\"/api/unkey\", {\n      method: \"POST\",\n      body: JSON.stringify(opts),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (!req.ok) {\n      throw new Error(`HTTP error! status: ${req.status}`);\n    }\n\n    const res = await req.json();\n\n    try {\n      const redirectUrl = new URL(res.redirect);\n      redirectUrl.searchParams.append(\"code\", res.code);\n      redirectUrl.searchParams.append(\"key\", res.key);\n\n      await fetch(redirectUrl.toString());\n\n      setLoading(false);\n      setSuccess(true);\n    } catch (_error) {\n      console.error(_error);\n      setLoading(false);\n      toast.error(\"Error redirecting back to local CLI. Is your CLI running?\");\n    }\n  } catch (_error) {\n    setLoading(false);\n    toast.error(\"Error creating Unkey API key.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for WorkOS Integration\nDESCRIPTION: Required environment variables to set in the dashboard .env file for WorkOS integration. Includes AUTH_PROVIDER, redirect URI, cookie password, client ID, and API key configuration.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/workos.mdx#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_PROVIDER=\"workos\"\nNEXT_PUBLIC_WORKOS_REDIRECT_URI=\"http://localhost:3000/auth/sso-callback\"\nWORKOS_COOKIE_PASSWORD=\nWORKOS_CLIENT_ID=\nWORKOS_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Next.js Package with PNPM\nDESCRIPTION: Command to install the Unkey Next.js package using PNPM.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/nextjs\n```\n\n----------------------------------------\n\nTITLE: Defining ClickHouse Schema for Analytics Events\nDESCRIPTION: SQL schema definition showing the structure of verification events stored in ClickHouse, including fields like request_id, time, workspace_id, and outcome.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0005-analytics-api.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n`request_id`    String,\n`time`          Int64,\n`workspace_id`  String,\n`key_space_id`  String,\n`key_id`        String,\n`region`        LowCardinality(String),\n`outcome`       LowCardinality(String),\n`identity_id`   String\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/nuxt Package\nDESCRIPTION: Various package manager commands to install the @unkey/nuxt module.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/nuxt/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/nuxt\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/nuxt\n```\n\n----------------------------------------\n\nTITLE: Debugging ClickHouse Queries\nDESCRIPTION: Examples of executing custom queries and query optimization using EXPLAIN.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/clickhouse.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await ch.querier.query({\n  query: `SELECT count() FROM verifications.raw_key_verifications_v1 WHERE workspace_id = {workspaceId: String}`,\n  params: z.object({ workspaceId: z.string() }),\n  schema: z.object({ count: z.number() })\n})({ workspaceId: \"ws_123\" });\n\nconst explain = await ch.querier.query({\n  query: `EXPLAIN SELECT * FROM verifications.raw_key_verifications_v1 WHERE workspace_id = {workspaceId: String}`,\n  params: z.object({ workspaceId: z.string() }),\n  schema: z.object({ explain: z.string() })\n})({ workspaceId: \"ws_123\" });\n```\n\n----------------------------------------\n\nTITLE: Monthly Invoice Query\nDESCRIPTION: Example bash request for retrieving monthly usage data for invoice generation\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0005-analytics-api.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n?start={timestamp_start_of_month}&end={timestamp_end_of_month}&granularity=month&externalId={user_123}\n\n[\n  // one element for the single month\n  { time: 123, valid: 10, ..., total: 30 }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey API Client with npm\nDESCRIPTION: Command to install the @unkey/api package using npm. This is the first step to integrate Unkey API into your TypeScript application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/api/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/api\n```\n\n----------------------------------------\n\nTITLE: Displaying Current File Structure for Authorization Feature\nDESCRIPTION: Shows the current flat directory structure for the authorization feature, highlighting issues with code organization and discoverability.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0007-client-file-structure.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── authorization/\n│   ├── permissions/\n│   │   ├── [permissionId]/\n│   │   │   ├── client.tsx\n│   │   │   ├── delete-permission.tsx\n│   │   │   └── page.tsx\n│   │   ├── create-new-permission.tsx\n│   │   └── page.tsx\n│   └── roles/\n│       ├── [roleId]/\n│       │   ├── delete-role.tsx\n│       │   ├── page.tsx\n│       │   ├── permission-toggle.tsx\n│       │   ├── tree.tsx\n│       │   └── update-role.tsx\n│       ├── create-new-role.tsx\n│       └── page.tsx\n├── constants.ts\n└── layout.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Verification in TypeScript with Unkey SDK\nDESCRIPTION: Demonstrates how to verify an API key using the @unkey/api package and handle the verification response. The code checks key validity and handles potential errors.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-08-25.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { verifyKey } from \"@unkey/api\";\n\nconst { result, error } = await verifyKey(\"key_123\");\n\nif (error) {\n  console.error(error.message);\n  return;\n}\n\nif (!result.valid) {\n  // Key isn't valid so don't allow access to resource\n  return;\n}\n\n// process request\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: System Prompt for OpenAI Query Conversion in TypeScript\nDESCRIPTION: A system prompt template that instructs the AI on how to convert natural language queries into structured filters. It includes guidance on handling multiple conditions and specific formats for status codes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ai-search-for-logs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nYou are an expert at converting natural language queries into filters. For queries with multiple conditions, output all relevant filters. We will process them in sequence to build the complete filter. For status codes, always return one for each variant like 200,400 or 500 instead of 200,201, etc... - the application will handle status code grouping internally. Always use this ${usersReferenceMS} timestamp when dealing with time related queries.\n\nQuery: \"path should start with /api/oz and method should be POST\"\nResult: [\n  {\n    \"field\": \"paths\",\n    \"filters\": [\n      {\n        \"operator\": \"startsWith\",\n        \"value\": \"/api/oz\"\n      }\n    ]\n  },\n  {\n    \"field\": \"methods\",\n    \"filters\": [\n      {\n        \"operator\": \"is\",\n        \"value\": \"POST\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sending Telemetry Headers with cURL in Bash\nDESCRIPTION: This example demonstrates how to send Unkey telemetry headers in a key verification API request using cURL. The request includes three telemetry headers for SDK version, platform, and runtime information.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/sdk-development.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST 'https://api.unkey.dev/v1/keys.verifyKey' \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Unkey-Telemetry-SDK: @unkey/api@1.10.0\" \\\n  -H \"Unkey-Telemetry-Platform: Vercel\" \\\n  -H \"Unkey-Telemetry-Runtime: edge-light\" \\\n  -d '{ \"key\": \"<...>\" }'\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey API Package\nDESCRIPTION: Command to install the Unkey API package for implementing API key authentication in the Express server.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/express.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/api\n```\n\n----------------------------------------\n\nTITLE: Daily Usage Breakdown Query\nDESCRIPTION: Example bash request demonstrating how to get a daily usage breakdown for a user per key in the current month\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0005-analytics-api.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n?start={timestamp_start_of_month}&end={timestamp_now}&granularity=day&externalId={user_123}&groupBy=key\n\n[\n  // One row per keyId and time\n  { keyId: \"key_1\", time: 123, valid: 10, ..., total: 30 },\n  { keyId: \"key_1\", time: 456, valid: 20, ..., total: 52 },\n  ...\n\n  { keyId: \"key_2\", time: 123, valid: 0, ..., total: 10 },\n  { keyId: \"key_2\", time: 456, valid: 1, ..., total: 2 },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry\nDESCRIPTION: Example of disabling anonymous telemetry data collection when using the Unkey API client. This is an opt-out option for users concerned about data collection.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/api/README.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst unkey = new Unkey({\n  rootKey: \"<UNKEY_ROOT_KEY>\",\n  disableTelemetry: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Dependencies\nDESCRIPTION: Series of commands to navigate to the Unkey directory, enable corepack, and install dependencies using pnpm.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd unkey\ncorepack enable\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard API Response Structure in JSON\nDESCRIPTION: Demonstrates the basic structure of API responses with metadata and operation-specific data. Includes requestId for traceability and debugging purposes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"requestId\": \"req_abc123xyz789\"\n  },\n  \"data\": {\n    // Operation-specific response data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API Key Properties in Unkey\nDESCRIPTION: This snippet demonstrates how to update properties of an existing API key using Unkey's update endpoint. The example shows updating the 'remaining' usage count to 200 for a specific key ID.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-07-21.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.updateLey \\\n  --header 'Authorization: Bearer <UNKEY>' \\\n  --header 'Content-Type: application/json' \\\n  -d '{\n    \"keyId\": \"<KEY_ID>\",\n    \"remaining\": 200,\n  }'\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Application with NPM\nDESCRIPTION: Command to create a new Next.js application using NPM.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameter Structure in Bash\nDESCRIPTION: Demonstrates the syntax pattern used for query parameters that bridges natural language and code. The format allows chaining multiple conditions while maintaining readability.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ai-search-for-logs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\noperator:value,operator:value (e.g., \"is:200,is:404\")\n\nExample -> status=is:200,is:400\n           path=startsWith:foo,endsWith:bar\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated API Key to User\nDESCRIPTION: Card component that conditionally displays the generated API key after successful creation, providing users with their key information.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{key && key.length > 0 && (\n                <>\n                <Card className=\"w-[350px] mt-8\">\n                <CardHeader>\n                    <CardTitle>API Key</CardTitle>\n                    <CardDescription>Here is your API key. Keep it safe!</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"grid w-full items-center gap-4\">\n                        <div className=\"flex flex-col space-y-1.5\">\n                            <Label htmlFor=\"name\">API Key</Label>\n                            <Input name=\"name\" value={key} />\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Setting Key Permissions in Markdown\nDESCRIPTION: This code snippet defines the API endpoint for setting key permissions in Markdown format. It includes the title, HTTP method, endpoint path, and a brief description of the endpoint's functionality.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/keys/set-permissions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Set Permissions\nopenapi: post /v1/keys.setPermissions\ndescription: Overwrite the permissions of a key with a new set of permissions.\n---\n```\n\n----------------------------------------\n\nTITLE: Generating a standard UUID in TypeScript\nDESCRIPTION: Using the built-in crypto module to generate a standard UUID with hyphens. This demonstrates the baseline approach to creating unique identifiers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/uuid-ux.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst id = crypto.randomUUID();\n// '5727a4a4-9bba-41ae-b7fe-e69cf60bb0ab'\n```\n\n----------------------------------------\n\nTITLE: Installing Shadcn UI Components\nDESCRIPTION: Commands to set up Shadcn UI for styling the application interface, including initializing and adding specific components.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest init\n\nnpx shadcn-ui@latest add button input label card\n```\n\n----------------------------------------\n\nTITLE: Basic Key Count Query\nDESCRIPTION: SQL query to count all keys for a specific key_space.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/approximating-row-counts.mdx#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM keys WHERE key_space_id = ?\n```\n\n----------------------------------------\n\nTITLE: Root Key Required Permissions for Unkey API\nDESCRIPTION: The permissions required for the root key to perform identity and key operations in the Unkey API.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/identities/shared-ratelimits.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"identity.*.create_identity\"\n\"identity.*.read_identity\"\n\"identity.*.update_identity\"\n\"api.*.create_key\"\n```\n\n----------------------------------------\n\nTITLE: Creating an API Key with Global Consensus Rate Limiting in Unkey\nDESCRIPTION: This curl command shows how to create an API key with global consensus rate limiting. This approach ensures strict rate limiting across all regions but comes with higher latency compared to edge rate limiting, making it suitable for scenarios requiring absolute consistency.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/ratelimiting/modes.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <UNKEY>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"apiId\":\"<API_ID>\",\n\t\"prefix\":\"xyz\",\n\t\"byteLength\":16,\n\t\"ownerId\":\"<USER_ID>\",\n\t\"ratelimit\":{\n\t\t\"async\": false, // origin rate limiting\n\t\t\"limit\":10,\n\t\t\"duration\": 1000\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles for Specific API Access in TypeScript\nDESCRIPTION: This example demonstrates how to assign roles that provide update access to one specific API and its keys, while granting read access to all APIs and their keys. It uses the internal role schema with both wildcard and specific API identifiers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0001-rbac.mdx#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\napi::api_123::update\napi::api_123::update_key\napi::*::read_api\napi::*::read_key\n```\n\n----------------------------------------\n\nTITLE: Organizing Feature Directory Structure in Unkey Dashboard (Directory Tree)\nDESCRIPTION: Illustrates the recommended directory structure for feature modules in the Unkey dashboard, showing how to organize components, hooks, actions, types, schemas, and utilities within a feature-specific directory.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/client-structure.mdx#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfeature-name/\n├── components/              # Feature-specific React components\n│   ├── component-name/      # Complex components get their own directory\n│   │   ├── index.tsx\n│   │   └── sub-component.tsx\n│   └── simple-component.tsx\n├── hooks/                   # Custom hooks for the feature\n│   ├── queries/             # API query hooks\n│   │   ├── use-feature-list.ts\n│   │   └── use-feature-details.ts\n│   └── use-feature-logic.ts\n├── actions/                 # Server actions and API calls\n│   └── feature-actions.ts\n├── types/                   # TypeScript types and interfaces\n│   └── feature.ts\n├── schemas/                 # Validation schemas\n│   └── feature.ts\n├── utils/                   # Helper functions\n│   └── feature-helpers.ts\n├── constants.ts             # Feature-specific constants\n└── page.tsx                 # Main page component\n```\n\n----------------------------------------\n\nTITLE: Response Example for Successful API Key Deletion in Elixir\nDESCRIPTION: This snippet shows the expected response from a successful API key deletion operation using UnkeyElixirSdk.delete_key. The function returns an atom :ok to indicate success.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/delete_key.mdx#2025-04-10_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n:ok\n```\n\n----------------------------------------\n\nTITLE: Process Flow Diagram for AI-Powered Log Queries in Bash\nDESCRIPTION: A diagram that illustrates the complete process flow of the AI-powered log query system, from user input to displaying filtered results. It shows how the query is processed through various system components.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ai-search-for-logs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUser\n  |\n  | \"Show me failed requests from last hour\"\n  v\nFrontend\n  |\n  | {query: \"show me failed requests from last hour\"}\n  v\ntRPC Route\n  |\n  | {model, messages with system prompt, schema}\n  v\nOpenAI\n  |\n  | {structured JSON matching our schema}\n  v\ntRPC Route\n  |\n  | status=is:400,since:1h\n  v\nFrontend\n  |\n  | /logs?status=is:400&since=is:1h\n  v\nURL\n  |\n  | trigger fetch with new params\n  v\nLogs tRPC Query\n  |\n  | return filtered logs\n  v\nFrontend\n  |\n  | display filtered results\n  v\nUser\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for AI Response Validation in TypeScript\nDESCRIPTION: Zod schema that defines the structure of the AI's response. This schema ensures that the AI outputs can be directly mapped to the application's filtering system, with support for various fields and operators.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ai-search-for-logs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const filterOutputSchema = z.object({\n  filters: z.array(\n    z.object({\n      field: z.enum([\n        \"host\",\n        \"requestId\",\n        \"methods\",\n        \"paths\",\n        \"status\",\n        \"startTime\",\n        \"endTime\",\n        \"since\",\n      ]),\n      filters: z.array(\n        z.object({\n          operator: z.enum([\"is\", \"contains\", \"startsWith\", \"endsWith\"]),\n          value: z.union([z.string(), z.number()]),\n        })\n      ),\n    })\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Refactored Audit Page Component in TypeScript\nDESCRIPTION: Shows an example of a refactored Audit page component using the proposed feature-based architecture. It demonstrates clear separation of concerns and improved code organization.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0007-client-file-structure.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Navbar } from \"@/components/navbar\";\nimport { PageContent } from \"@/components/page-content\";\nimport { getOrgId } from \"@/lib/auth\";\nimport { InputSearch } from \"@unkey/icons\";\nimport { type SearchParams, getWorkspace, parseFilterParams } from \"./actions\";\nimport { Filters } from \"./components/filters\";\nimport { AuditLogTableClient } from \"./components/table/audit-log-table-client\";\n\ntype Props = {\n  params: {\n    bucket: string;\n  };\n  searchParams: SearchParams;\n};\n\nexport default async function AuditPage(props: Props) {\n  const orgId = await getOrgId();\n  const workspace = await getWorkspace(orgId);\n  const parsedParams = parseFilterParams({\n    ...props.searchParams,\n    bucket: props.params.bucket,\n  });\n\n  return (\n    <div>\n      <Navbar>\n        <Navbar.Breadcrumbs icon={<InputSearch />}>\n          <Navbar.Breadcrumbs.Link href=\"/audit/unkey_mutations\">Audit</Navbar.Breadcrumbs.Link>\n          <Navbar.Breadcrumbs.Link href={`/audit/${props.params.bucket}`} active isIdentifier>\n            {workspace.ratelimitNamespaces.find((ratelimit) => ratelimit.id === props.params.bucket)\n              ?.name ?? props.params.bucket}\n          </Navbar.Breadcrumbs.Link>\n        </Navbar.Breadcrumbs>\n      </Navbar>\n      <PageContent>\n        <main className=\"mb-5\">\n          <Filters workspace={workspace} parsedParams={parsedParams} bucket={parsedParams.bucket} />\n          <AuditLogTableClient />\n        </main>\n      </PageContent>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles for API Creation and Key Management in TypeScript\nDESCRIPTION: This example shows how to assign roles to a key that allow it to create new APIs, modify them, and perform all actions on keys. It uses the internal role schema defined earlier.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0001-rbac.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\napi::*::create_api\napi::*::update_api\napi::*::read_key\napi::*::create_key\napi::*::update_key\napi::*::delete_key\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Performance Indexes\nDESCRIPTION: SQL commands for creating composite and single-column indexes to optimize query performance in ClickHouse tables.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/pull-request-checks.mdx#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Composite index for workspace + time filtering\n-- Most effective when filtering workspace_id first, then time\n-- MINMAX type creates a sparse index with min/max values\nALTER TABLE ratelimits.raw_ratelimits_v1\n    ADD INDEX idx_workspace_time (workspace_id, time) TYPE minmax GRANULARITY 1;\n\n-- Single-column index for JOIN operations\n-- Speeds up request_id matching between tables\n-- GRANULARITY 1 means finest possible index precision\nALTER TABLE ratelimits.raw_ratelimits_v1\n    ADD INDEX idx_request_id (request_id) TYPE minmax GRANULARITY 1;\n\n-- Same indexes on metrics table to optimize both sides of JOIN\nALTER TABLE metrics.raw_api_requests_v1\n    ADD INDEX idx_workspace_time (workspace_id, time) TYPE minmax GRANULARITY 1;\nALTER TABLE metrics.raw_api_requests_v1\n    ADD INDEX idx_request_id (request_id) TYPE minmax GRANULARITY 1;\n```\n\n----------------------------------------\n\nTITLE: Overriding Server URL with Unkey SDK\nDESCRIPTION: Shows how to override the default server URL globally by providing a custom URL when initializing the SDK client.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    server_url=\"https://api.unkey.dev\",\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.liveness.check()\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Response Format for update_remaining Operation in Elixir\nDESCRIPTION: This snippet shows the expected response format when using the update_remaining operation. The response is a map containing the updated 'remaining' value after the operation has been applied.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/update_remaining.mdx#2025-04-10_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n%{\"remaining\"=> 100}\n```\n\n----------------------------------------\n\nTITLE: Sample Github POST Request for Secret Detection\nDESCRIPTION: Example of a POST request that Github sends when a secret is detected. It includes headers with the public key identifier and signature, along with the payload containing information about the detected secret.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0002-github-secret-scanning.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nPOST / HTTP/2\nHost: HOST\nAccept: */*\nContent-Length: 104\nContent-Type: application/json\nGithub-Public-Key-Identifier: bcb53661c06b4728e59d897fb6165d5c9cda0fd9cdf9d09ead458168deb7518c\nGithub-Public-Key-Signature: MEQCIQDaMKqrGnE27S0kgMrEK0eYBmyG0LeZismAEz/BgZyt7AIfXt9fErtRS4XaeSt/AO1RtBY66YcAdjxji410VQV4xg==\n\n[{\"source\":\"commit\",\"token\":\"some_token\",\"type\":\"some_type\",\"url\":\"https://example.com/base-repo-url/\"}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Buttons with Icons in React\nDESCRIPTION: Code showing how to add icons to buttons in different positions (before or after text) with various button variants in both light and dark modes using Lucide icons.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button>\n        <span>Create</span>\n        <PlusIcon />\n      </Button>\n      <Button variant=\"outline\">\n        <SearchIcon />\n        <span>Search</span>\n      </Button>\n      <Button variant=\"ghost\" color=\"danger\">\n        <TrashIcon />\n        <span>Delete</span>\n      </Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex flex-wrap items-center gap-4 dark\">\n      <Button>\n        <span>Create</span>\n        <PlusIcon />\n      </Button>\n      <Button variant=\"outline\">\n        <SearchIcon />\n        <span>Search</span>\n      </Button>\n      <Button variant=\"ghost\" color=\"danger\">\n        <TrashIcon />\n        <span>Delete</span>\n      </Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Response for Recovered Key in JSON\nDESCRIPTION: This snippet shows the JSON response format when retrieving a recovered key, demonstrating how the plaintext key is included in the response. The plaintext field contains the decrypted API key value.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/security/recovering-keys.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"plaintext\": \"your-key-here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Metadata Structure in Key Response\nDESCRIPTION: Sample JSON showing how metadata is structured in a key verification response. This demonstrates custom metadata fields that can be associated with keys.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/keys/verify.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"billingTier\": \"PRO\",\n  \"trialEnds\": \"2023-06-16T17:16:37.161Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Future Key Structure in TypeScript\nDESCRIPTION: A proposed structure for future Unkey API keys that would place metadata at the end rather than the beginning. The format includes a prefix, base58 randomness, metadata, version, and checksum. This structure aims to improve key uniqueness and compatibility with security scanning tools.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0003-key-shape.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{prefix}_{base58_randomness}{meta}{version}_{checksum}\n```\n\n----------------------------------------\n\nTITLE: Handling Forbidden Authentication Error in JSON\nDESCRIPTION: Illustrates the JSON response structure for a 403 Forbidden error when a key lacks sufficient permissions. It includes a request ID, error title, detailed message with the missing permission, status code, and error type URL.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/auth.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"requestId\": \"req_abc123xyz789\"\n  },\n  \"error\": {\n    \"title\": \"Forbidden\",\n    \"detail\": \"Your key does not have the required 'api.api_1234.update_api' permission\",\n    \"status\": 403,\n    \"type\": \"https://unkey.com/docs/errors/forbidden\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key for Cache Data\nDESCRIPTION: Bash command to generate a secure 32-byte base64 encoded encryption key for use with the encryption middleware. Uses OpenSSL for secure random generation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Disabling Unkey Telemetry\nDESCRIPTION: Shows how to disable the anonymous telemetry data collection that Unkey uses to understand SDK usage patterns.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/hono.mdx#2025-04-10_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\napp.use(\n  \"*\",\n  unkey({ disableTelemetry: true })\n)\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Global Tables + Direct Gateway Cache\nDESCRIPTION: ASCII diagram depicting a multi-region architecture using DynamoDB Global Tables with gateway memory caching.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0008-dataplane.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ascii\nCODE:\n```\n┌─────────────────────┐     ┌──────────────────┐\n│ Gateway (US)        │     │  DynamoDB        │\n│ ┌───────────────┐   │────►│  (US-WEST-1)     │\n│ │ Memory Cache  │   │     │                  │\n│ └───────────────┘   │     └──────────────────┘\n└─────────────────────┘            ▲\n                                   │\n                                   │ Replication\n                                   │\n┌─────────────────────┐            ▼\n│ Gateway (EU)        │     ┌──────────────────┐\n│ ┌───────────────┐   │────►│  DynamoDB        │\n│ │ Memory Cache  │   │     │  (EU-WEST-1)     │\n│ └───────────────┘   │     │                  │\n└─────────────────────┘     └──────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Grouping Analytics by Tags\nDESCRIPTION: Queries verification data grouped by tag combinations. This endpoint breaks down all verifications and sums them up per unique tag combination, allowing you to analyze usage patterns across different tag groups.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&groupBy=tags&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: Implementing Signature Verification for Github Webhooks\nDESCRIPTION: Function to verify the signature of webhook requests from Github. It fetches Github's public keys, finds the matching key for the provided keyID, and verifies that the signature matches the payload using SHA256.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0002-github-secret-scanning.mdx#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst crypto = require(\"crypto\");\nconst GITHUB_KEYS_URI = 'https://api.github.com/meta/public_keys/secret_scanning';\n\nasync function verifySignature(payload: string, signature: string, keyID: string): Promise<void> {\n  if (!payload) {\n    throw new Error('Invalid payload');\n  }\n  if (!signature) {\n    throw new Error('Invalid signature');\n  }\n  if (!keyID) {\n    throw new Error('Invalid keyID');\n  }\n\n  const response = await fetch(GITHUB_KEYS_URI);\n  const data = await response.json();\n  const keys = data.public_keys;\n\n  if (!(keys instanceof Array) || keys.length === 0) {\n    throw new Error('No public keys found');\n  }\n\n  const publicKey = keys.find((k: { key_identifier: string }) => k.key_identifier === keyID) ?? null;\n  if (!publicKey) {\n    throw new Error('No public key found matching key identifier');\n  }\n\n  const verifier = crypto.createVerify('SHA256').update(payload);\n  if (!verifier.verify(publicKey.key, Buffer.from(signature, 'base64'))) {\n    throw new Error('Signature does not match payload');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Meta Data in TypeScript\nDESCRIPTION: This JSON object shows an example of the meta data that can be set when creating an API key. It includes properties like billingTier and trialEnds.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/functions/verify_key.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"billingTier\": \"PRO\",\n  \"trialEnds\": \"2023-06-16T17:16:37.161Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Database Schema in TypeScript\nDESCRIPTION: TypeScript schema definition for workspaces, including fields for Stripe integration, tier information, and quota settings. This schema stores subscription details and usage limits for each workspace.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/infrastructure/stripe/subscriptions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nworkspaces {\n  id: string\n  orgId: string\n  stripeCustomerId: string | null\n  stripeSubscriptionId: string | null\n  tier: string\n  subscriptions: object | null  // Legacy\n  quotas: {\n    requestsPerMonth: number\n    logsRetentionDays: number\n    auditLogsRetentionDays: number\n    team: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Analytics by Key\nDESCRIPTION: Queries verification data for a specific API key. This endpoint returns aggregated statistics for all verifications involving the specified key within the time period.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.unkey.dev/v1/analytics.getVerifications?start=1734168087000&end=1736760087000&keyId=key_123&apiId=api_123' \\\n -H 'Authorization: Bearer unkey_XXX'\n```\n\n----------------------------------------\n\nTITLE: Executing Integration Tests for Unkey API\nDESCRIPTION: This code demonstrates how to run integration tests for the Unkey API. It requires setting environment variables for the base URL and root key before running the tests. The tests are executed in the apps/api directory.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/testing.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd apps/api\n\nUNKEY_BASE_URL=\nUNKEY_ROOT_KEY=\npnpm test:integration\n```\n\n----------------------------------------\n\nTITLE: Creating Recoverable Keys with Unkey API in Shell\nDESCRIPTION: This code demonstrates how to create a recoverable API key using Unkey's API. The request sets the 'recoverable' field to true which enables later retrieval of the plaintext key. The request requires a root key with encrypt_key permission.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/security/recovering-keys.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer {ROOT_KEY}' \\\n  --header 'Content-Type: application/json' \\\n  -d '{\n    \"apiId\": \"{API_ID}\",\n    \"recoverable\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Adding Users to AWS IAM Identity Center Groups with Bash Script\nDESCRIPTION: This script facilitates mapping Google Workspace users to AWS IAM Identity Center groups. It requires AWS credentials with appropriate permissions and can be used to add users to specific access groups like administrators or standard users.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/infrastructure/aws/user-group-management.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PROFILE=unkey-root-admin \\\nAWS_REGION=us-east-1 \\\nbash unkeyed/infra/contrib/add-aws-user-to-aws-group.sh [username]\n```\n\n----------------------------------------\n\nTITLE: Handling Unauthorized Authentication Error in Unkey API\nDESCRIPTION: Example JSON response for a 401 Unauthorized error from the Unkey API. This occurs when the provided root key is invalid or has been revoked.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/authentication.mdx#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"requestId\": \"req_abc123xyz789\"\n  },\n  \"error\": {\n    \"title\": \"Unauthorized\",\n    \"detail\": \"The provided root key is invalid or has been revoked\",\n    \"status\": 401,\n    \"type\": \"https://unkey.com/docs/errors/unauthorized\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rate Limit Data\nDESCRIPTION: Implementation for retrieving rate limit statistics over time.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/clickhouse.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ratelimitStats = await ch.ratelimits.timeseries.perHour({\n  workspaceId: \"ws_123\",\n  namespaceId: \"ns_123\",\n  startTime: yesterday.getTime(),\n  endTime: now.getTime(),\n  identifiers: [{operator: \"is\", value: \"user_123\"}]\n});\n\n// Returns hourly rate limit stats for a specific identifier\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to a Key in Unkey API using curl\nDESCRIPTION: This endpoint allows you to attach permissions to an existing key. You need to provide the key ID and an array of permission IDs that you want to associate with the key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-07-12.mdx#2025-04-10_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.addPermissions \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"keyId\": \"<string>\",\n  \"permissions\": [\n    {\n      \"id\": \"<string>\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server with NPM\nDESCRIPTION: Command to start the Next.js development server using NPM.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Creating Permissions in Unkey\nDESCRIPTION: Specifies the OpenAPI endpoint for creating a new permission. The endpoint is a POST request to /v1/permissions.createPermission. To use this endpoint, the root key must have the 'rbac.*.create_permission' permission.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/permissions/create-permission.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Create A Permission\nopenapi: post /v1/permissions.createPermission\n---\n```\n\n----------------------------------------\n\nTITLE: Querying User Usage Example\nDESCRIPTION: Example bash request showing how to query a user's API usage over 24 hours with hourly granularity\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0005-analytics-api.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n?start={timestamp_24h_ago}&end={timestamp_now}&externalId=user_123&granularity=hour\n\n[\n  // 24 elements, one per hour\n  { time: 123, valid: 10, ratelimited: 2, ..., total: 30 },\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Forbidden Permission Error in Unkey API\nDESCRIPTION: Example JSON response for a 403 Forbidden error from the Unkey API. This occurs when the provided key lacks the specific permission required for the requested operation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/authentication.mdx#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"requestId\": \"req_abc123xyz789\"\n  },\n  \"error\": {\n    \"title\": \"Forbidden\",\n    \"detail\": \"Your key does not have the required 'api.api_1234.update_api' permission\",\n    \"status\": 403,\n    \"type\": \"https://unkey.com/docs/errors/forbidden\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server with Bun\nDESCRIPTION: Command to start the Next.js development server using Bun.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Tag Structure Example in JSON\nDESCRIPTION: Example showing the structure of tags for a fictional blog API, demonstrating key-value pair format with various metadata like path, postId, region, and apiVersion.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/analytics.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"path=/v1/posts.createPost\",\n  \"postId=post_1asofijqknslkfqWF\",\n  \"region=us-east-1\",\n  \"apiVersion=f8ad21bd\", // a git sha of your deployment or semver\n]\n```\n\n----------------------------------------\n\nTITLE: API Response Type Definition\nDESCRIPTION: TypeScript interface defining the structure of the analytics API response data points\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0005-analytics-api.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Datapoint = {\n  /**\n  * Unix timestamp in milliseconds of the start of the current time slice.\n  */\n  time: number\n\n\n  /**\n   * For brevity, I will not explain every outcome here.\n   * There will be one key and count for every possible outcome, so you may\n   * choose what to display or not.\n   */\n  valid: number\n  rateLimited: number\n  usageExceeded: number\n  // ...\n\n  /**\n   * Total number of verifications in the current time slice, regardless of outcome.\n   */\n  total: number\n\n  /**\n   * Only available when specifying groupBy in the query.\n   * In this case there would be one datapoint per time and groupBy target.\n   */\n  keyId?: string\n  apiId?: string\n  identity?: {\n    id: string\n    externalId: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unkey Root Key to Environment Variables\nDESCRIPTION: Sets up the Unkey root key in a .env file, which will be used to authenticate with the Unkey service for ratelimiting.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/express.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUNKEY_ROOT_KEY=\"YOUR_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Express Server\nDESCRIPTION: Command to start the Express server using the npm script defined in package.json.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/express.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Creating API Key with Roles Using Unkey API in Bash\nDESCRIPTION: This curl command creates a new API key with specified roles using Unkey's API. It requires a ROOT_KEY for authorization and specifies the API_ID and an array of role names to assign to the key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/apis/features/authorization/example.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  -H \"Authorization: Bearer ${ROOT_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"apiId\": \"${API_ID}\",\n    \"roles\": [\n      \"role1\", \"role2\", \"role3\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: SQL Query Performance Optimization in ClickHouse\nDESCRIPTION: Examples of optimizing ClickHouse queries through proper filtering and join operations, showing both unoptimized and optimized versions of the same query.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/pull-request-checks.mdx#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n      WITH filtered_requests AS (\n          SELECT\n            r.request_id,\n            r.time,\n            r.workspace_id,\n            r.namespace_id,\n            r.identifier,\n            r.passed,\n            m.host,\n          FROM ratelimits.raw_ratelimits_v1 r\n          LEFT JOIN metrics.raw_api_requests_v1 m ON\n            r.request_id = m.request_id\n          WHERE r.workspace_id = {workspaceId: String}\n            AND r.namespace_id = {namespaceId: String}\n            AND r.time BETWEEN {startTime: UInt64} AND {endTime: UInt64}\n        )\n        -- * used for the sake brevity\n        SELECT *\n        FROM filtered_requests\n        ORDER BY time DESC, request_id DESC\n        LIMIT {limit: Int}\n```\n\nLANGUAGE: sql\nCODE:\n```\nWITH filtered_ratelimits AS (\n    SELECT\n        request_id,\n        time,\n        workspace_id,\n        namespace_id,\n        identifier,\n        toUInt8(passed) as status\n    FROM ratelimits.raw_ratelimits_v1 r\n    WHERE workspace_id = {workspaceId: String}\n        AND namespace_id = {namespaceId: String}\n        AND time BETWEEN {startTime: UInt64} AND {endTime: UInt64}\n        ${hasRequestIds ? \"AND request_id IN {requestIds: Array(String)}\" : \"\"}\n        AND (${identifierConditions})\n        AND (${statusCondition})\n        AND (({cursorTime: Nullable(UInt64)} IS NULL AND {cursorRequestId: Nullable(String)} IS NULL)\n             OR (time, request_id) < ({cursorTime: Nullable(UInt64)}, {cursorRequestId: Nullable(String)}))\n)\nSELECT\n    fr.request_id,\n    fr.time,\n    fr.workspace_id,\n    fr.namespace_id,\n    fr.identifier,\n    fr.passed,\n    m.host,\nFROM filtered_ratelimits fr\nLEFT JOIN (\n    SELECT * FROM metrics.raw_api_requests_v1\n    -- Those two filters are doing the heavy lifting now\n    WHERE workspace_id = {workspaceId: String}\n    AND time BETWEEN {startTime: UInt64} AND {endTime: UInt64}\n    -------------------------------------------------------\n) m ON fr.request_id = m.request_id\nORDER BY fr.time DESC, fr.request_id DESC\nLIMIT {limit: Int}\n```\n\n----------------------------------------\n\nTITLE: Defining Wildcard Rate Limit Permissions in Unkey RBAC\nDESCRIPTION: Examples of wildcard permissions for rate limiting in Unkey's RBAC system. These permission strings allow creation and reading of all rate limit namespaces.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/authentication.mdx#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nratelimit.*.create_namespace\nratelimit.*.read_namespace\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Commands to start the development server using different package managers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/hono.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining the Entry Type for Store Values\nDESCRIPTION: TypeScript type definition for entries stored in the Store. Each entry includes the actual value and two timestamp fields for freshness and staleness, allowing implementations to handle data expiration strategies.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/interface/store.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Entry<TValue> = {\n  value: TValue;\n\n  // Before this time the entry is considered fresh and valid\n  // UnixMilli\n  freshUntil: number;\n\n  /**\n   * Unix timestamp in milliseconds.\n   *\n   * Do not use data after this point as it is considered no longer valid.\n   *\n   * You can use this field to configure automatic eviction in your store implementation.   *\n   */\n  staleUntil: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Logs with TypeScript and TRPC - Unsafe Implementation\nDESCRIPTION: Demonstrates an unsafe implementation that directly uses client-provided workspaceId without verification. This creates a security vulnerability where any authenticated user could access logs from any workspace.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/pull-request-checks.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// UNSAFE: Using client-provided workspaceId\nexport const queryLogs = rateLimitedProcedure(ratelimit.update)\n  .input(queryLogsPayload)\n  .output(LogsResponse)\n  .query(async ({ input }) => {\n    const result = await clickhouse.api.logs({\n      ...transformedInputs,\n      workspaceId: input.workspaceId, // Security vulnerability\n      cursorRequestId: input.cursor?.requestId ?? null,\n      cursorTime: input.cursor?.time ?? null,\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Unkey and Clerk\nDESCRIPTION: Example of environment variables needed for the application, including Clerk authentication keys and Unkey API credentials.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/using-unkey-with-auth.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxx\nCLERK_SECRET_KEY=sk_test_xxxxxxxxxxxxxx\nUNKEY_API_ID=api_xxxxxxxxxxxxxx\nUNKEY_ROOT_KEY=unkey_xxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Context Interface Definition\nDESCRIPTION: Interface definition for Context implementation required by the cache library for managing async operations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Context {\n  waitUntil: (p: Promise<unknown>) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Unkey API Binary\nDESCRIPTION: Command to build the Unkey API binary from source code using Go.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/api/config.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o unkey .\n```\n\n----------------------------------------\n\nTITLE: Starting Unkey Elixir SDK Directly with start_link\nDESCRIPTION: This snippet shows how to initialize the Unkey SDK directly using the start_link function, without a supervision tree. It accepts the same configuration map with token and optional base_url parameters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ex/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, _pid} = UnkeyElixirSdk.start_link(%{token: \"yourunkeyrootkey\", base_url: \"https://api.unkey.dev/v1/keys\"})\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Commands to start the development server using different package managers.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/hono.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Render Component\nDESCRIPTION: Import statement for the RenderComponentWithSnippet utility used to display component examples with their corresponding code snippets.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/textarea.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RenderComponentWithSnippet } from \"@/app/components/render\"\n```\n\n----------------------------------------\n\nTITLE: Running the Unkey API Server\nDESCRIPTION: Command to start the Unkey API server with a MySQL database connection.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/api/config.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nunkey api --database-primary=\"mysql://unkey:password@tcp(localhost:3306)/unkey?parseTime=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build for Unkey Spring Boot SDK\nDESCRIPTION: Gradle build configuration that sets up Spring Boot project with Unkey SDK dependency. Includes Java 8 compatibility, Maven Central and GitHub Packages repositories, and required plugin declarations.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/springboot-java/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id 'java'\n    id 'org.springframework.boot' version '2.5.4'\n    id 'io.spring.dependency-management' version '1.0.11.RELEASE'\n}\n\ngroup = 'com.example'\nversion = '0.0.1-SNAPSHOT'\n\njava {\n    sourceCompatibility = 1.8\n}\n\nrepositories {\n    mavenCentral()\n    maven {\n        name = \"GitHubPackages\"\n        url = uri(\"https://maven.pkg.github.com/shreyanshtomar/my-registry\")\n    }\n}\n\ndependencies {\n    //..other dependencies\n    implementation 'com.unkey:unkey-springboot-sdk:0.0.1-SNAPSHOT'\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limiting\nDESCRIPTION: Command to test the rate limiting functionality using curl.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/hono.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST 'http://localhost:8787/'\n```\n\n----------------------------------------\n\nTITLE: Importing Unkey UI Components\nDESCRIPTION: Shows how to import specific components from the @unkey/ui package.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/index.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, FormInput, Id } from \"@unkey/ui\";\n```\n\n----------------------------------------\n\nTITLE: Single-Node Unkey API Deployment Configuration\nDESCRIPTION: Command-line configuration for deploying Unkey API on a single node. This setup specifies a MySQL database connection, enables colored logs, sets the HTTP port to 8080, and defines the region as dev-local.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/api/config.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nunkey api \\\n  --database-primary=\"mysql://root:password@localhost:3306/unkey?parseTime=true\" \\\n  --color=true \\\n  --http-port=8080 \\\n  --region=dev-local\n```\n\n----------------------------------------\n\nTITLE: Selecting Server by Index with Unkey SDK\nDESCRIPTION: Demonstrates how to select a specific server by providing a server index when initializing the SDK client.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom unkey_py import Unkey\n\ns = Unkey(\n    server_idx=0,\n    bearer_auth=os.getenv(\"UNKEY_BEARER_AUTH\", \"\"),\n)\n\nres = s.liveness.check()\n\nif res.object is not None:\n    # handle response\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running the Express Server\nDESCRIPTION: Command to start the Express server using the npm start script defined in package.json, which runs the TypeScript file with ts-node.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/express.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Burst Ratelimiting in TypeScript\nDESCRIPTION: Example of setting up multiple ratelimits for burst control with a per-minute burst limit and daily base limit.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/identities-beta.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ratelimits: [\n    {\n      name: \"burst\"\n      limit: 100,\n      duration: 60000 // 1 minute\n    },\n    {\n      name: \"base\"\n      limit: 10000,\n      duration: 86400000 // 1 day\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Setup for Unkey API\nDESCRIPTION: Docker Compose configuration for deploying the Unkey API with multiple replicas. This setup includes dependencies on MySQL, Redis, and ClickHouse, and configures the API with environment variables for database connections, monitoring, and platform settings.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/api/config.mdx#2025-04-10_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  api:\n    deploy:\n      replicas: 3\n      endpoint_mode: vip\n    command: [\"api\"]\n    image: ghcr.io/unkeyed/unkey:latest\n    depends_on:\n      - mysql\n      - redis\n      - clickhouse\n    environment:\n      UNKEY_HTTP_PORT: 7070\n      UNKEY_PLATFORM: \"docker\"\n      UNKEY_IMAGE: \"ghcr.io/unkeyed/unkey:latest\"\n      UNKEY_REDIS_URL: \"redis://redis:6379\"\n      UNKEY_DATABASE_PRIMARY_DSN: \"mysql://unkey:password@tcp(mysql:3900)/unkey?parseTime=true\"\n      UNKEY_CLICKHOUSE_URL: \"clickhouse://default:password@clickhouse:9000\"\n      UNKEY_PROMETHEUS_PORT: 9090\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Scripts for TypeScript\nDESCRIPTION: Script configuration in package.json for starting the server with ts-node, building TypeScript to JavaScript, and serving the compiled JavaScript.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/express.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"start\": \"ts-node ./index.ts\",\n    \"build\": \"tsc\",\n    \"serve\": \"node dist/index.js\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Creating a new Bun project with bash commands\nDESCRIPTION: Commands to create a new directory for the Bun project and initialize it with default settings.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/bun.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir unkey-with-bun\ncd unkey-with-bun\nbun init -y\n```\n\n----------------------------------------\n\nTITLE: Implementing OCR Processing Function in TypeScript\nDESCRIPTION: Function that performs OCR on input images using tesseract.js library, supporting both English and Spanish language detection.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ocr-service.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst doOcr = async (image) => {\n  try {\n    // It detects English and Spanish\n    const { data } = await Tesseract.recognize(image, \"spa+eng\", {\n      logger: (m) => console.log(m),\n    });\n\n    return { data: data, error: null };\n  } catch (error) {\n    console.log(error);\n    return { data: null, error: error };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Key with Identity Assignment\nDESCRIPTION: Example JSON for creating a key with identity assignment using identityId or externalId.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/identities-beta.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identityId\": \"id_123\",\n  \"externalId\": \"user_123\"\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/cache Package\nDESCRIPTION: Shows installation commands for @unkey/cache using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/cache/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/cache\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unkey/cache\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/cache\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/cache\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/ratelimit with yarn\nDESCRIPTION: Shows how to install the @unkey/ratelimit package using yarn package manager.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/ratelimit.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Implementing Ratelimiting for OTP Sending in Next.js\nDESCRIPTION: This snippet shows how to implement ratelimiting for the OTP sending endpoint using Unkey. It checks the ratelimit status and returns an error with a reset time if the limit is exceeded.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ratelimiting-otp.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { success, reset } = await unkey.limit(\n      forwardedIP || realIP || \"no-ip\",\n    );\n    const millis = reset - Date.now();\n    const timeToReset = Math.floor(millis / 1000);\n\t\t// if this is unsuccesful return a time to reset to the user so they know how long to wait\n    if (!success) {\n      return {\n        success: false,\n        error: `You can request a new code in ${timeToReset} seconds`,\n        statusCode: 429,\n      };\n    }\n\n    const email = formData.get(\"email\") as string | null;\n    //shortened for tutorial.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parser for URL Query Parameters in TypeScript\nDESCRIPTION: Custom parser implementation for handling filter-based URL query parameters. The code includes a parse function that converts string inputs into structured filter arrays and a serialize function that converts the filter objects back to URL parameter strings.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ai-search-for-logs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const parseAsFilterValueArray: Parser<FilterUrlValue[]> = {\n  parse: (str: string | null) => {\n    if (!str) {\n      return [];\n    }\n    try {\n      // Format: operator:value,operator:value (e.g., \"is:200,is:404\")\n      return str.split(\",\").map((item) => {\n        const [operator, val] = item.split(/:(.+)/);\n        if (![\"is\", \"contains\", \"startsWith\", \"endsWith\"].includes(operator)) {\n          throw new Error(\"Invalid operator\");\n        }\n        return {\n          operator: operator as FilterOperator,\n          value: val,\n        };\n      });\n    } catch {\n      return [];\n    }\n  },\n  // In our app we pass a valid type but for brevity it's omitted\n  serialize: (value: any[]) => {\n    if (!value?.length) {\n      return \"\";\n    }\n    return value.map((v) => `${v.operator}:${v.value}`).join(\",\");\n  },\n};\n\nexport const queryParamsPayload = {\n  requestId: parseAsFilterValueArray,\n  host: parseAsFilterValueArray,\n  methods: parseAsFilterValueArray,\n  paths: parseAsFilterValueArray,\n  status: parseAsFilterValueArray,\n  startTime: parseAsInteger,\n  endTime: parseAsInteger,\n  since: parseAsRelativeTime,\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey SDK with Poetry\nDESCRIPTION: Installs the Unkey Python SDK using Poetry, a modern Python dependency management tool.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add unkey.py\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/ratelimit with bun\nDESCRIPTION: Shows how to install the @unkey/ratelimit package using bun package manager.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/ratelimit/ratelimit.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Querying API Keys with ownerId Filter in Unkey API using Bash\nDESCRIPTION: A curl command that demonstrates how to retrieve API keys from the Unkey API with the newly added ownerId filter. This filter allows users to fetch only keys associated with a specific owner, which helps with key management and organization.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-06-25.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --url https://api.unkey.dev/v1/apis/api_123/keys?ownerId=chronark \\\n  --header 'Authorization: Bearer <UNKEY>'\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API for Structured Output in TypeScript\nDESCRIPTION: Configuration for the OpenAI API call that processes natural language queries. It includes parameters for tuning the AI's behavior and integrates the Zod schema validation to ensure structured outputs.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ai-search-for-logs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst completion = await openai.beta.chat.completions.parse({\n  model: \"gpt-4o-mini\",\n  temperature: 0.2, // Lower temperature for more deterministic outputs\n  top_p: 0.1, // Focus on highest probability tokens\n  frequency_penalty: 0.5, // Maintain natural language variety\n  presence_penalty: 0.5, // Encourage diverse responses\n  n: 1, // Single, confident response\n  messages: [\n    {\n      role: \"system\",\n      content: systemPrompt,\n    },\n    {\n      role: \"user\",\n      content: userQuery,\n    },\n  ],\n  response_format: zodResponseFormat(filterOutputSchema, \"searchQuery\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey Next.js Package with NPM\nDESCRIPTION: Command to install the Unkey Next.js package using NPM.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/nextjs\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey SDK with PIP\nDESCRIPTION: Installs the Unkey Python SDK using PIP, the default package installer for Python.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/py/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install unkey.py\n```\n\n----------------------------------------\n\nTITLE: Verifying API Keys with Unkey\nDESCRIPTION: This snippet shows how to verify an API key using Unkey's verification endpoint. The request only requires the key to be verified, and the response will include validation status and remaining usage count.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-07-21.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://api.unkey.dev/v1/keys.verifyKey \\\n--header 'Content-Type: application/json' \\\n--data '{\n\"key\": \"<NEW_KEY>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Ratelimiter in TypeScript with Unkey\nDESCRIPTION: This snippet demonstrates how to configure the Unkey ratelimiter with a namespace, limit, and duration. It uses the @unkey/ratelimit package and requires a root key from the environment.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/introducing-ratelimiting.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@unkey/ratelimit\"\n\nconst unkey = new Ratelimit({\n  rootKey: process.env.UNKEY_ROOT_KEY,\n  namespace: \"ai.generate\",\n  limit: 10,\n  duration: \"30s\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey API Package\nDESCRIPTION: Installs the @unkey/api package which provides the key verification functionality needed for authentication.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/bun.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/api\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Current Billing Period Usage\nDESCRIPTION: JSON response showing daily verification stats. Each element represents one day with counts for different verification outcomes, which can be displayed in a chart or summed for total usage.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/analytics/quickstarts.mdx#2025-04-10_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  // ...\n {\n   \"time\": 1736553600000,\n   \"valid\": 98267,\n   \"notFound\": 0,\n   \"forbidden\": 0,\n   \"usageExceeded\": 0,\n   \"rateLimited\": 6816,\n   \"unauthorized\": 0,\n   \"disabled\": 0,\n   \"insufficientPermissions\": 0,\n   \"expired\": 0,\n   \"total\": 105083\n },\n {\n   \"time\": 1736640000000,\n   \"valid\": 20125,\n   \"notFound\": 0,\n   \"forbidden\": 0,\n   \"usageExceeded\": 0,\n   \"rateLimited\": 2525,\n   \"unauthorized\": 0,\n   \"disabled\": 6261,\n   \"insufficientPermissions\": 0,\n   \"expired\": 0,\n   \"total\": 28911\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key Data with GET Request using RPC Method\nDESCRIPTION: Example of a GET request using the new RPC method format to retrieve key information from the Unkey API. The request includes authentication via a Bearer token in the header.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-12-15.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://api.unkey.dev/v1/keys.getKey?keyId=key_123\" \\\n  -H \"Authorization: Bearer <ROOT_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading User API Rate Limits with Unkey\nDESCRIPTION: Express endpoint for updating a user's API key rate limit after subscription upgrade. The function takes transaction information, updates the key's rate limit using Unkey's updateKey endpoint, and returns a success response.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/ocr-service.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/upgradeUser\", async (req: Request, res: Response) => {\n  const { transactionId, email, apiKeyId } = req.body;\n\n  // Imaginary transactionId and email validation.\n  // Let's imagine the user upgraded to a paid plan.\n  // Now we have to increase the usage quota of the user.\n  // We can do that by updating the key.\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Authorization\", `Bearer ${process.env.UNKEY_ROOT_KEY}`);\n\n  const raw = JSON.stringify({\n    keyId: apiKeyId,\n    ratelimit: {\n      async: true, // Fast rate limiting\n      duration: 1000, // Rate limit duration\n      limit: 100, // Maximum allowed requests for the user\n    },\n  });\n\n  const updateKeyRequest = await fetch(\n    \"https://api.unkey.dev/v1/keys.updateKey\",\n    {\n      keyId: \"example_key\"\n      method: \"PUT\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    }\n  );\n\n  if (updateKeyRequest.status !== 200)\n    return res.status(400).json({ message: \"Something went wrong\" });\n\n  return res.status(200).json({ message: \"User upgraded successfully\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the Unkey ratelimit package\nDESCRIPTION: Command to install the @unkey/ratelimit package for implementing rate limiting in the Bun application.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/bun.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun install @unkey/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPS Server with TLS in Node.js\nDESCRIPTION: This code snippet demonstrates how to create a secure HTTPS server in Node.js using TLS. It loads server key and certificate files, creates an HTTPS server that listens on port 443, and responds with a simple message. This implementation ensures all communications with the API are encrypted using TLS.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/transport-layer-security.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Hello secure world!\\n');\n}).listen(443);\n```\n\n----------------------------------------\n\nTITLE: Creating Refillable API Key with Daily Limits using Unkey API\nDESCRIPTION: Example of creating an API key with automatic daily refills using the Unkey API. The key is configured to have 100 uses per day with automatic refill at midnight UTC.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-01-05.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer <UNKEY>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"apiId\":\"<API_ID>\",\n  \"remaining\": 100,\n  \"refill\": {\n      \"interval\": \"daily\",\n      \"amount\": 100\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Generating Unkey API Key in Next.js API Route\nDESCRIPTION: TypeScript code for a Next.js API route that generates a new Unkey API key associated with the user's account.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/cli-auth.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(request: Request) {\n  const { id, redirect, code } = await request.json();\n  if (!process.env.UNKEY_ROOT_KEY || !process.env.UNKEY_API_ID) {\n    return NextResponse.json({\n      statusCode: 500,\n      message: \"Unkey root key and API ID must be provided.\",\n    });\n  }\n  const unkey = new Unkey({ rootKey: process.env.UNKEY_ROOT_KEY });\n\n  const { result, error } = await unkey.keys.create({\n    apiId: process.env.UNKEY_API_ID,\n    prefix: \"cli_demo\",\n    ownerId: id,\n  });\n\n  if (error) {\n    return NextResponse.json({\n      statusCode: 500,\n      message: \"Error creating key – please ensure apiId is valid.\",\n    });\n  }\n\n  return NextResponse.json({ ...result, code, redirect });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @unkey/cache with npm\nDESCRIPTION: Command for installing the @unkey/cache package using npm. This is the first step to start using the library in a project.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/announcing-unkey-cache-package.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unkey/cache\n```\n\n----------------------------------------\n\nTITLE: Implementing API Caching in Python with Flask-Caching\nDESCRIPTION: This Python example uses Flask-Caching to implement caching for a Flask route. It caches the result of the get_product function for 50 seconds, reducing the load on the backend for frequent requests.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/api-caching.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_caching import Cache\nfrom flask import Flask\n\napp = Flask(__name__)\ncache = Cache(app, config={'CACHE_TYPE': 'simple'})\n\n@app.route('/product/<id>')\n@cache.cached(timeout=50, key_prefix='product_')\ndef get_product(id):\n    # Code to fetch product\n    return product\n```\n\n----------------------------------------\n\nTITLE: Creating a Key with Identity Association in Unkey\nDESCRIPTION: Example of creating a key that is associated with an identity by referencing the external_id. This connects the key to the identity's rate limits and metadata.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-12-06.mdx#2025-04-10_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.createKey \\\n  --header 'Authorization: Bearer unkey_root_key' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"externalId\": \"acme_corp\",\n  \"apiId\": \"api_123\",\n  \"byteLength\": 16\n}'\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Demo Login Command\nDESCRIPTION: Command to run the Unkey CLI demo for authentication.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/cli-auth.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @unkey/cli-demo login\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Limited Endpoint\nDESCRIPTION: Command to test the rate-limited endpoint using curl\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/ratelimiting/nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XPOST 'http://localhost:3000/protected'\n```\n\n----------------------------------------\n\nTITLE: Querying Active Keys by Workspace in SQL\nDESCRIPTION: SQL query to count distinct active keys for a specific workspace and month. It uses a materialized view and accepts workspaceId, year, and month as parameters.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/high-frequency-usage-billing.mdx#2025-04-10_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(DISTINCT keyId) as keys\nFROM mv__monthly_active_keys__v1\nWHERE\n    workspaceId = {{ String(workspaceId, required=True) }}\n    AND time = makeDate({{ Int64(year) }}, {{ Int64(month) }}, 1)\nGROUP BY time\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting in Spring Cloud API Gateway\nDESCRIPTION: This YAML configuration shows how to set up rate limiting in Spring Cloud Gateway using the Token Bucket algorithm. It defines rate limiting parameters for an example route, including replenish rate and burst capacity, using Redis for counter management.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/api-circuit-breaker.mdx#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: example_route\n          uri: http://example.com\n          filters:\n            - name: RequestRateLimiter\n              args:\n                redis-rate-limiter.replenishRate: 10\n                redis-rate-limiter.burstCapacity: 20\n```\n\n----------------------------------------\n\nTITLE: Structuring a Page Component in Next.js for Unkey Dashboard (TypeScript)\nDESCRIPTION: Shows how to implement a typical page component in the Unkey dashboard, demonstrating the pattern of importing global shared components and feature-specific components. This structure enables proper separation of concerns and server-side data fetching.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/client-structure.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Navbar } from \"@/components/navbar\"; // Global shared component\nimport { PageContent } from \"@/components/page-content\";\nimport { FeatureComponent } from \"./components/feature-component\";\n\nexport default function FeaturePage() {\n  // Page implementation\n  // This is also we where we do our server side data fetching.\n  return (\n    <div>\n      <Navbar>{/* Navigation content */}</Navbar>\n      <PageContent>\n        {/* Entry to our actual component. This one is usually a client-side component */}\n        <FeatureComponent />\n      </PageContent>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the WHOAMI Endpoint to Verify Key Details\nDESCRIPTION: Example of using the new WHOAMI endpoint to retrieve details about an API key by sending the actual key. This is useful when the key ID is unavailable and you need to verify usage, limits, or associated identities.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-12-06.mdx#2025-04-10_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.whoami \\\n  --header 'Authorization: Bearer unkey_root_key' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"key\": \"sk_123\"}'\n```\n\n----------------------------------------\n\nTITLE: Adding Approximate Count Columns\nDESCRIPTION: SQL alter table statement to add columns for storing approximate counts and last update timestamp.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/approximating-row-counts.mdx#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `key_space`\n  ADD COLUMN `size_approx` int NOT NULL DEFAULT '0',\n  ADD COLUMN `size_last_updated_at` bigint NOT NULL DEFAULT '0'\n```\n\n----------------------------------------\n\nTITLE: Implementing SSO with AWS Cognito in Python\nDESCRIPTION: This Python code demonstrates how to authenticate a user using AWS Cognito, which can be integrated into an SSO system. It initializes a Cognito Identity Provider client and initiates authentication with user credentials.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/single-sign-on.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example of implementing SSO with AWS Cognito\nimport boto3\n\n# Initialize a Cognito Identity Provider client\nclient = boto3.client('cognito-idp')\n\n# Replace 'USER_POOL_ID' and 'CLIENT_ID' with your actual IDs\nresponse = client.initiate_auth(\n    ClientId='CLIENT_ID',\n    AuthFlow='USER_SRP_AUTH',\n    AuthParameters={\n        'USERNAME': 'example_username',\n        'PASSWORD': 'example_password'\n    }\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: S3 + Dedicated Cache Layer Architecture\nDESCRIPTION: ASCII diagram showing a scalable architecture with multiple gateways, load balancer, dedicated cache nodes, and S3 storage.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0008-dataplane.mdx#2025-04-10_snippet_2\n\nLANGUAGE: ascii\nCODE:\n```\n┌─────────────────┐\n│ Gateway 1       │───┐\n└─────────────────┘   │\n                      │\n┌─────────────────┐   │    ┌────────────┐\n│ Gateway 2       │───┼───►│   Load     │    ┌────────────┐\n└─────────────────┘   │    │  Balancer  │───►│ Cache      │──┐\n                      │    │            │    │ Node 1     │  │\n┌─────────────────┐   │    │            │    └────────────┘  │    ┌─────────┐\n│ Gateway 3       │───┤    │            │                    │    │   S3    │\n└─────────────────┘   │    │            │                    ├───►│         │\n                      ├───►│            │    ┌────────────┐  │    └─────────┘\n┌─────────────────┐   │    │            │───►│ Cache      │──┘\n│ Gateway 4       │───┤    │            │    │ Node 2     │\n└─────────────────┘   │    └────────────┘    └────────────┘\n                      │\n┌─────────────────┐   │\n│ Gateway n       │───┘\n└─────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Querying Logs with TypeScript and TRPC - Secure Implementation\nDESCRIPTION: Shows the secure way to implement log querying by verifying workspace ownership through the server context. Includes database query to check workspace ownership and proper error handling.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/pull-request-checks.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// SAFE: Check workspace ownership via context\nexport const queryLogs = rateLimitedProcedure(ratelimit.update)\n  .input(queryLogsPayload)\n  .output(LogsResponse)\n  .query(async ({ ctx, input }) => {\n    const workspace = await db.query.workspaces.findFirst({\n      where: (table, { and, eq, isNull }) =>\n        and(eq(table.orgId, ctx.tenant.id), isNull(table.deletedAtM)),\n    });\n    if (!workspace) {\n      throw new TRPCError({\n        code: \"NOT_FOUND\",\n        message: \"Workspace not found\",\n      });\n    }\n    const result = await clickhouse.api.logs({\n      ...transformedInputs,\n      workspaceId: workspace.id, // Safe: verified ownership\n      cursorRequestId: input.cursor?.requestId ?? null,\n      cursorTime: input.cursor?.time ?? null,\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Fire-and-Forget Event Ingestion in Cloudflare Workers\nDESCRIPTION: A code snippet showing how to emit events to Tinybird from a Cloudflare Worker using the waitUntil method to handle asynchronous processing. This demonstrates the individual event ingestion approach that led to hitting Tinybird's request limits.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/fixing-serverless-with-a-vps.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutionContext.waitUntil(tinybird.ingestKeyVerification({ ... }))\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenID Connect SSO in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to implement SSO using OpenID Connect with Google as the identity provider. It discovers the Google issuer, creates a client with appropriate credentials, and generates an authorization URL for login.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/single-sign-on.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example using OpenID Connect with a JavaScript application\nconst { Issuer } = require('openid-client');\n\nasync function ssoLogin() {\n  const googleIssuer = await Issuer.discover('https://accounts.google.com');\n  const client = new googleIssuer.Client({\n    client_id: 'YOUR_CLIENT_ID',\n    client_secret: 'YOUR_CLIENT_SECRET',\n    redirect_uris: ['http://localhost/callback'],\n    response_types: ['code'],\n  });\n\n  const authorizationUrl = client.authorizationUrl({\n    scope: 'openid email profile',\n  });\n\n  console.log('Visit this URL to log in:', authorizationUrl);\n}\n\nssoLogin();\n```\n\n----------------------------------------\n\nTITLE: Running Vitest for Unit and Integration Tests in Unkey Project\nDESCRIPTION: This snippet shows how to install dependencies and run tests using pnpm and vitest for the Unkey project. It includes commands for installation and test execution.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/testing.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition for Key Management\nDESCRIPTION: SQL schema showing the structure of key_space and keys tables with their relationships.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/approximating-row-counts.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `key_space` (\n\t`id` varchar(256) NOT NULL,\n\t`workspace_id` varchar(256) NOT NULL,\n\t# ... omitted\n)\n\nCREATE TABLE `keys` (\n\t`id` varchar(256) NOT NULL,\n\t`hash` varchar(256) NOT NULL,\n\t`workspace_id` varchar(256) NOT NULL,\n\t`key_space_id` varchar(256) NOT NULL,\n\t# ... omitted\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tinybird Proxy with Docker\nDESCRIPTION: A Docker command to run the Tinybird proxy server locally, exposing port 8000 and configuring the required Tinybird token as an environment variable. This represents the solution implemented to batch events before sending them to Tinybird.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/fixing-serverless-with-a-vps.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8000:8000 -e TINYBIRD_TOKEN=\"abc\" ghcr.io/unkeyed/tinybird-proxy:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Approximate Count Updates in TypeScript\nDESCRIPTION: TypeScript implementation using Drizzle ORM to manage approximate counts with async updates when data is stale.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/approximating-row-counts.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst keySpace = await db.query.keySpace.findFirst({where: ...})\nif (keySpace.sizeLastUpdatedAt < Date.now() - 60_000) {\n  const count = await db\n    .select({ count: sql<string>`count(*)` })\n    .from(schema.keys)\n    .where(and(eq(schema.keys.keySpaceId, keySpace.id), isNull(schema.keys.deletedAtM)));\n\n  keySpace.sizeApprox = Number.parseInt(count?.at(0)?.count ?? \"0\");\n  keySpace.sizeLastUpdatedAt = Date.now();\n\n  c.executionCtx.waitUntil(\n    db.primary\n      .update(schema.keySpace)\n      .set({\n        sizeApprox: keySpace.sizeApprox,\n        sizeLastUpdatedAt: keySpace.sizeLastUpdatedAt,\n      })\n      .where(eq(schema.keySpace.id, keySpace.id)),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Unkey Repository\nDESCRIPTION: Command to clone the Unkey repository from GitHub to start contributing to the project.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unkeyed/unkey\n```\n\n----------------------------------------\n\nTITLE: Rendering OAuth Button with Last Used Indicator\nDESCRIPTION: React component that renders an OAuth button with loading state and last used indicator.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/improve-auth-experience.mdx#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<OAuthButton onClick={() => oauthSignIn(\"oauth_google\")}>\n  {isLoading === \"oauth_google\" ? (\n    <Loading className=\"w-6 h-6\" />\n    ) : (\n       <Google className=\"w-6 h-6\" />\n    )}\n  Google {lastUsed === \"google\" ? <LastUsed /> : null}\n</OAuthButton>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Artillery Load Tests with Bun\nDESCRIPTION: This snippet shows the environment variables that need to be set and the command to run the main script for Artillery load testing. It requires setting up API keys for Fly.io, Artillery Cloud, and Unkey before execution.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/tools/artillery/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFLY_API_KEY=\nARTILLERY_CLOUD_API_KEY=\nUNKEY_KEY=\nbun run main.ts\n```\n\n----------------------------------------\n\nTITLE: Viewing Hidden Files in Home Directory\nDESCRIPTION: Command to list all files, including hidden ones, in the user's home directory to find the .unkey file containing the API key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/cli-auth.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nls -a ~/\n```\n\n----------------------------------------\n\nTITLE: Installing Unkey ratelimit SDK\nDESCRIPTION: Shell command to add Unkey's ratelimit SDK to the project using pnpm package manager.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/learn-by-building.mdx#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @unkey/ratelimit\n\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-in with Last Used Tracking\nDESCRIPTION: Enhanced OAuth sign-in function that includes last used authentication method tracking.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/improve-auth-experience.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst [lastUsed, setLastUsed] = useLastUsed();\n\nconst oauthSignIn = async (provider: OAuthStrategy) => {\n    if (!signInLoaded) {\n      return null;\n    }\n    try {\n      setIsLoading(provider);\n      await signIn.authenticateWithRedirect({\n        strategy: provider,\n        redirectUrl: \"/auth/sso-callback\",\n        redirectUrlComplete: \"/apis\",\n      });\n      setLastUsed(provider === \"oauth_google\" ? \"google\" : \"github\");\n    } catch (err) {\n      console.error(err);\n      setIsLoading(null);\n      toast.error((err as Error).message);\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloudflare Workflows Project Using npm\nDESCRIPTION: Command to create a new Cloudflare Workflows project using the starter template. This uses npm create to clone the repository, install dependencies, and set up the project structure.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/workflows/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare@latest workflows-starter -- --template \"cloudflare/workflows-starter\"\n```\n\n----------------------------------------\n\nTITLE: Creating Last Used Authentication Hook\nDESCRIPTION: Custom React hook using local storage to track the last authentication method used.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/improve-auth-experience.mdx#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useLocalStorage } from \"usehook-ts\";\n\nexport function useLastUsed() {\n  return useLocalStorage<\"github\" | \"google\" | \"email\" | undefined>(\"last_unkey_login\", undefined);\n}\n```\n\n----------------------------------------\n\nTITLE: Using typed ID generation in Unkey's codebase\nDESCRIPTION: Example of using the typed ID generation function in Unkey's codebase. This approach ensures that only valid prefix types can be used, preventing mistakes at compile time.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/uuid-ux.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { newId } from \"@unkey/id\";\n\nconst id = newId(\"workspace\");\n// ws_dYuyGV3qMKvebjML\n\nconst id = newId(\"keyy\");\n// invalid because `keyy` is not a valid prefix name\n```\n\n----------------------------------------\n\nTITLE: Example Github Secret Scanning Payload Structure\nDESCRIPTION: Sample JSON structure that Github sends to the webhook endpoint when a secret is detected. It includes the token value, type, URL where it was found, and the source (such as code or PR title).\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0002-github-secret-scanning.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n[\n  {\n    \"token\":\"NMIfyYncKcRALEXAMPLE\",\n    \"type\":\"mycompany_api_token\",\n    \"url\":\"https://github.com/octocat/Hello-World/blob/12345600b9cbe38a219f39a9941c9319b600c002/foo/bar.txt\",\n    \"source\":\"content\" // where it was found on Github: code, PR title, etc\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Detailed version history documenting changes to the @unkey/cache package including feature additions, dependency updates, and bug fixes across multiple releases.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/cache/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @unkey/cache\n\n## 1.5.0\n\n### Minor Changes\n\n- 28e7800: feat: allow removing multiple entries at once\n\n## 1.4.0\n\n### Minor Changes\n\n- e3231e3: Add turso\n- b5b6b98: add upstash-redis store implementation\n\n## 1.3.0\n\n### Minor Changes\n\n- cf4cf63: add upstash-redis store implementation\n\n## 1.2.0\n\n### Minor Changes\n\n- 53a1df1: Update licenses in package.json\n\n### Patch Changes\n\n- Updated dependencies [53a1df1]\n  - @unkey/error@0.2.0\n\n## 1.1.0\n\n### Minor Changes\n\n- 9dab761: Updating licenses\n\n### Patch Changes\n\n- Updated dependencies [9dab761]\n  - @unkey/error@0.1.0\n\n## 1.0.2\n\n### Patch Changes\n\n- 9b80f19: Await fallthrough case\n\n## 1.0.1\n\n### Patch Changes\n\n- a2578ed: Await revalidation before cleanup\n\n## 1.0.0\n\n### Major Changes\n\n- 1262b44: release\n\n## 0.0.3\n\n### Patch Changes\n\n- fdd625f: more customization\n- Updated dependencies [fdd625f]\n  - @unkey/error@0.0.2\n\n## 0.0.2\n\n### Patch Changes\n\n- a8c0238: canary\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Audit Logging to Ratelimiter in TypeScript\nDESCRIPTION: This code demonstrates how to add resource details for audit logging in the ratelimiter. It provides a way to create a paper trail for specific resources being rate limited.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/introducing-ratelimiting.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handler(request: NextApiRequest) {\n  const identifier = request.getUserId();\n\n  const ratelimit = await unkey.limit(identifier, {\n    resources: [\n      {\n        id: \"id_123\",\n        name: \"unkey\",\n        type: \"ai.generate\",\n      },\n    ],\n  });\n  if (!ratelimit.success) {\n    return new Response(\"try again later\", { status: 429 });\n  }\n  // handle the request here\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing User Flow Diagram for Unkey Subscription Process\nDESCRIPTION: ASCII diagram illustrating the high-level user flow from signup through WorkOS authentication to creating a workspace, starting on the free tier, and upgrading through payment method addition and trial activation.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/infrastructure/stripe/subscriptions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌────────────┐     ┌────────────┐     ┌────────────┐     ┌────────────┐\n│            │     │            │     │            │     │            │\n│   Signup   │────►│  WorkOS    │────►│  Create    │────►│ Free Tier  │\n│            │     │ Auth & Org │     │ Workspace  │     │            │\n└────────────┘     └────────────┘     └────────────┘     └────────────┘\n                                                                │\n                                                                │\n                                                                ▼\n┌────────────┐     ┌────────────┐     ┌────────────┐     ┌────────────┐\n│            │     │            │     │            │     │            │\n│ Active Plan│◄────│ Start Trial│◄────│ Add Payment│◄────│  User      │\n│            │     │            │     │ Method     │     │  Action    │\n└────────────┘     └────────────┘     └────────────┘     └────────────┘\n```\n\n----------------------------------------\n\nTITLE: Testing the Unkey API Server\nDESCRIPTION: Example curl command to verify the Unkey API server is running correctly by checking the liveness endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/architecture/services/api/config.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:7070/v2/liveness\n{\"message\":\"we're cooking\"}%\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog for @unkey/rbac in Markdown\nDESCRIPTION: This changelog details version updates for the @unkey/rbac package. It includes minor and patch changes, dependency updates, and brief descriptions of modifications made in each version.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/rbac/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @unkey/rbac\n\n## 0.3.1\n\n### Patch Changes\n\n- 6e386ad: Fix infinite type recursion\n\n## 0.3.0\n\n### Minor Changes\n\n- 53a1df1: Update licenses in package.json\n\n### Patch Changes\n\n- Updated dependencies [53a1df1]\n  - @unkey/error@0.2.0\n\n## 0.2.0\n\n### Minor Changes\n\n- 9dab761: Updating licenses\n\n### Patch Changes\n\n- Updated dependencies [9dab761]\n  - @unkey/error@0.1.0\n\n## 0.1.13\n\n### Patch Changes\n\n- fc2b651: update\n\n## 0.1.12\n\n### Patch Changes\n\n- Updated dependencies [fdd625f]\n  - @unkey/error@0.0.2\n\n## 0.1.11\n\n### Patch Changes\n\n- 04b1785: Export cjs properly\n\n## 0.1.10\n\n### Patch Changes\n\n- d561b57: Release rbac as separate package\n```\n\n----------------------------------------\n\nTITLE: Adding a meaningful prefix to UUIDs\nDESCRIPTION: Adding a descriptive prefix to identifiers helps users distinguish between different environments or resource types, reducing confusion in complex systems.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/uuid-ux.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst id = `hello_${crypto.randomUUID().replace(/-/g, \"\")}`;\\n// hello_1559debea64142f3b2d29f8b0f126041\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Unkey Documentation\nDESCRIPTION: Simple markdown header defining the documentation title for the Unkey project.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Unkey Docs\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Caching in C++ with Unordered Map\nDESCRIPTION: This C++ example uses an unordered_map to implement a simple in-memory cache for product data. It checks the cache before fetching from the database and stores new results in the cache.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/api-caching.mdx#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <unordered_map>\nstd::unordered_map<std::string, Product> productCache;\n\nProduct getProductById(const std::string& id) {\n    if (productCache.find(id) != productCache.end()) {\n        return productCache[id]; // Return cached data\n    } else {\n        Product product = fetchProductById(id); // Fetch from DB or API\n        productCache[id] = product; // Cache it\n        return product;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Shared tsconfig Structure in Markdown\nDESCRIPTION: This Markdown snippet explains the purpose of the tsconfig files in the project. It indicates that these are base configurations from which all other tsconfig.json files inherit, promoting code reuse and consistency across the project.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/internal/tsconfig/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `tsconfig`\n\nThese are base shared `tsconfig.json`s from which all other `tsconfig.json`'s\ninherit from.\n```\n\n----------------------------------------\n\nTITLE: Sample API Key Metadata Structure in JSON\nDESCRIPTION: Example of metadata that can be attached to API keys in Unkey, demonstrating how to include billing tier and trial expiration information.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/why-we-built-unkey.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"billingTier\": \"PRO\",\n  \"trialEnds\": \"2023-06-16T17:16:37.161Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Caching in C# with IMemoryCache\nDESCRIPTION: This C# example uses IMemoryCache to implement in-memory caching for a ProductService. It checks the cache before fetching product data and stores new results in the cache for 10 minutes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/glossary/api-caching.mdx#2025-04-10_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Caching.Memory;\n\npublic class ProductService {\n    private readonly IMemoryCache _cache;\n\n    public ProductService(IMemoryCache cache) {\n        _cache = cache;\n    }\n\n    public Product GetProductById(string id) {\n        Product product;\n        if (!_cache.TryGetValue(id, out product)) {\n            product = FetchProductById(id); // Fetch from DB or API\n            _cache.Set(id, product, TimeSpan.FromMinutes(10)); // Cache it\n        }\n        return product;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment\nDESCRIPTION: Command to run the Unkey CLI for setting up the local development environment, which will prompt for Clerk authentication keys and create necessary .env files.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm local\n```\n\n----------------------------------------\n\nTITLE: Initializing Unkey Toolbox CLI for API Creation\nDESCRIPTION: This command uses npx to run the Unkey Toolbox CLI, which guides users through the process of creating a new API project with pre-configured tools and technologies.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/toolbox.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @unkey/create-api\n```\n\n----------------------------------------\n\nTITLE: Full Generation Test Case in TypeScript\nDESCRIPTION: This test case verifies the generation of complete takeaways for a given term (\"MIME types\"). It expects a successful task run with properly structured output containing all takeaway sections for the term.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/generate-takeaways.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"fullGenerationTest\",\n  input: {\n    term: \"MIME types\"\n  },\n  expectedTaskRunResult: {\n    ok: true,\n    output: {\n      term: \"MIME types\",\n      takeaways: {\n        // Will be inferred from takeawaysSchema\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Minor Change Entry for v0.5.0\nDESCRIPTION: Documents the minor update to version 0.5.0 adding ratelimit override API functionality to SDK\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/ratelimit/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.0\n\n### Minor Changes\n\n- 3f8d078: Adding ratelimit override API to SDK\n\n### Patch Changes\n\n- Updated dependencies [3f8d078]\n  - @unkey/api@0.29.0\n```\n\n----------------------------------------\n\nTITLE: Embedding Second YouTube Video in HTML\nDESCRIPTION: Another HTML iframe implementation for embedding a different YouTube video with similar configuration but different video ID. Uses the same responsive flex container approach as the first video.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-11-03.mdx#2025-04-10_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"flex justify-left align-left\">\n  <iframe\n    width=\"560\"\n    height=\"315\"\n    src=\"https://www.youtube-nocookie.com/embed/il8hfqhlsxM?si=fT50_TclYXPKdVDa\"\n    title=\"YouTube video player\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Commands to initialize and start Supabase services locally\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\n```\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Command to create and navigate to the project directory for Supabase functions\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/blog/secure-supabase-functions-using-unkey.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir unkey-supabase && cd unkey-supabase\n```\n\n----------------------------------------\n\nTITLE: Adding Roles to a Key in Unkey API using curl\nDESCRIPTION: This endpoint allows you to attach roles to an existing key. You need to provide the key ID and an array of role IDs that you want to associate with the key.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2024-07-12.mdx#2025-04-10_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n  --url https://api.unkey.dev/v1/keys.addRoles \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"keyId\": \"<string>\",\n  \"roles\": [\n    {\n      \"id\": \"<string>\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Command options for starting the Next.js development server using different package managers including npm, yarn, pnpm, and bun. After running these commands, the development server will be available at http://localhost:3000.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Describing Database Structure for Marketing Data in Plaintext\nDESCRIPTION: This snippet outlines the structure of the marketing database, including the central entities, key tables, and relationships between different data models. It covers aspects such as keyword management, search data capture, and content crawling results storage.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/src/lib/db-marketing/data-instructions.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n→ I/O & Data Models [lib/db-marketing]\nData is persisted with drizzle into our planetscale marketing instance. Types are inferred from data schemas with drizzle-zod (reused in workflows).\nRelationships:\n- The central entity is the an inputTerm to which most models are connected & which is unique (relations ideally directly as a fk but sometimes through some relation in between as I went through iterations)\n- Core tables track search queries and entries (search_queries, entries)\n- Keyword management with m2m relationships (keywords, sections_to_keywords)\n- Search data capture (serper tables for organic results, top stories & related searches from Google SERP)\n- Content crawling results storage (firecrawl_responses)\nAPI response structures from Serper and Firecrawl are modeled relationally to enable caching and data reuse (i wasn't sure if JSON storage isn't better but wasn't familiar with mysql's json storage as it doesn't support jsonb)\nNotably, I decided to link serper & firecrawl response tables on the returned URL per page to keep track of URLs we've scraped\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog in Markdown Table Format\nDESCRIPTION: This code snippet shows how to create a changelog table in Markdown format. It includes the date and description of changes made to the endpoint.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/api-reference/keys/set-permissions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Changelog\n\n| Date        | Changes             |\n|-------------|---------------------|\n| Jul 08 2024 | Introduced endpoint |\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, or pnpm). The server will run on localhost:3000 with hot-reload functionality.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/dashboard/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to Create an API Key in Unkey\nDESCRIPTION: This curl command demonstrates how to make a POST request to create a new API key using Unkey's RPC-style API. It includes the necessary headers and JSON payload.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/docs/api-design/rpc.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.unkey.com/v2/keys.createKey\" \\\n  -H \"Authorization: Bearer root_1234567890\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"apiId\": \"api_1234\",\n    \"name\": \"Production API Key\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Markdown Minor Change Entry for v0.4.0\nDESCRIPTION: Documents the minor update to version 0.4.0 adding dynamic error functionality\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/ratelimit/CHANGELOG.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.0\n\n### Minor Changes\n\n- 5610357: feat: dynamic error\n```\n\n----------------------------------------\n\nTITLE: Current Pricing Structure Table - Markdown\nDESCRIPTION: Markdown table showing the current pricing tiers (Free, Pro, Enterprise) with their respective features and pricing.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/rfcs/0009-pricing-updates.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Free | Pro | Enterprise\n| --- | --- | --- |\n| 2.5k Valid Verifications | 150k Valid Verifications  | XM Valid Verifications |\n| 100k Valid Ratelimits | 2.5M Valid Ratelimits | XM Valid Ratelimits |\n| 7 days Logs | 90 Days Logs | X Days Logs |\n| 30 days Audit | 90 Days Audit | X Days Audit |\n| 1k API keys | 1M API Keys | 1M API Keys |\n| Unlimited APIs| Unlimited APIs | Unlimited APIs |\n| $0 | $25 | $? |\n```\n\n----------------------------------------\n\nTITLE: Documenting API Changelog in Markdown\nDESCRIPTION: A structured changelog using Markdown to document version updates, including minor changes, patch changes, and dependency updates for an API project.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/api/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# api\n\n## 0.3.0\n\n### Minor Changes\n\n- 8b69b15: feat: return requestId\n\n## 0.2.0\n\n### Minor Changes\n\n- 18c12c2: feat: permanently delete keys & identity migration\n\n## 0.1.0\n\n### Minor Changes\n\n- 09d36ad: add /v1/keys.whoami route\n\n## 0.0.14\n\n### Patch Changes\n\n- Updated dependencies [28e7800]\n  - @unkey/cache@1.5.0\n\n## 0.0.13\n\n### Patch Changes\n\n- Updated dependencies [e3231e3]\n- Updated dependencies [b5b6b98]\n  - @unkey/cache@1.4.0\n\n## 0.0.12\n\n### Patch Changes\n\n- Updated dependencies [cf4cf63]\n  - @unkey/cache@1.3.0\n\n## 0.0.11\n\n### Patch Changes\n\n- Updated dependencies [6e386ad]\n  - @unkey/rbac@0.3.1\n\n## 0.0.10\n\n### Patch Changes\n\n- Updated dependencies [53a1df1]\n  - @unkey/cache@1.2.0\n  - @unkey/error@0.2.0\n  - @unkey/rbac@0.3.0\n\n## 0.0.9\n\n### Patch Changes\n\n- Updated dependencies [9dab761]\n  - @unkey/cache@1.1.0\n  - @unkey/error@0.1.0\n  - @unkey/rbac@0.2.0\n\n## 0.0.8\n\n### Patch Changes\n\n- Updated dependencies [9b80f19]\n  - @unkey/cache@1.0.2\n\n## 0.0.7\n\n### Patch Changes\n\n- Updated dependencies [a2578ed]\n  - @unkey/cache@1.0.1\n\n## 0.0.6\n\n### Patch Changes\n\n- Updated dependencies [1262b44]\n  - @unkey/cache@1.0.0\n\n## 0.0.5\n\n### Patch Changes\n\n- Updated dependencies [fc2b651]\n  - @unkey/rbac@0.1.13\n\n## 0.0.4\n\n### Patch Changes\n\n- Updated dependencies [fdd625f]\n  - @unkey/cache@0.0.3\n  - @unkey/error@0.0.2\n  - @unkey/rbac@0.1.12\n\n## 0.0.3\n\n### Patch Changes\n\n- Updated dependencies [a8c0238]\n  - @unkey/cache@0.0.2\n\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies [04b1785]\n  - @unkey/rbac@0.1.11\n\n## 0.0.1\n\n### Patch Changes\n\n- Updated dependencies [d561b57]\n  - @unkey/rbac@0.1.10\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version updates, dependency changes and feature modifications for the @unkey/nextjs package.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/nextjs/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @unkey/nextjs\n\n## 0.18.9\n\n### Patch Changes\n\n- Updated dependencies [f73fc7e]\n  - @unkey/api@0.35.0\n\n## 0.18.8\n\n### Patch Changes\n\n- Updated dependencies [10120e0]\n  - @unkey/api@0.33.1\n\n## 0.18.7\n\n### Patch Changes\n\n- Updated dependencies [98bbb16]\n  - @unkey/api@0.33.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Task in Trigger.dev - TypeScript\nDESCRIPTION: Example of a core task implementation that updates glossary content by creating a GitHub PR. The task takes input parameters for the term and content to be updated.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/update-workflow/update-workflow.test.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const updateGlossaryContentTask = task({\n  id: \"update_glossary_content\",\n  run: async ({ inputTerm, content }) => {\n    // Implementation that creates a PR with the content\n    return {\n      inputTerm,\n      updated: true,\n      prUrl,\n      branch,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Version history documentation showing updates, changes and dependency version bumps for the @unkey/hono package\nSOURCE: https://github.com/unkeyed/unkey/blob/main/packages/hono/CHANGELOG.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @unkey/hono\n\n## 1.4.16\n\n### Patch Changes\n\n- Updated dependencies [f73fc7e]\n  - @unkey/api@0.35.0\n\n## 1.4.15\n\n### Patch Changes\n\n- Updated dependencies [10120e0]\n  - @unkey/api@0.33.1\n```\n\n----------------------------------------\n\nTITLE: Defining Web Crawler Rules in robots.txt for Unkey Project\nDESCRIPTION: This robots.txt configuration allows all user agents to access the entire website and specifies the location of the sitemap for improved crawling efficiency.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/app/robots.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-Agent: *\nAllow: /\nSitemap: https://unkey.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Implementing ClickHouse Query with SQL Injection Vulnerability\nDESCRIPTION: Example showing a vulnerable implementation of ClickHouse query construction with direct string interpolation, demonstrating how SQL injection could occur through path filtering.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/pull-request-checks.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getLogsClickhousePayload = z.object({\n  workspaceId: z.string(),\n  paths: z\n    .array(\n      z.object({\n        operator: z.enum([\"is\", \"startsWith\", \"endsWith\", \"contains\"]),\n        value: z.string(),\n      }),\n    )\n    .nullable(),\n});\n\nexport type GetLogsClickhousePayload = z.infer<typeof getLogsClickhousePayload>;\n\nexport function getLogs(ch: Querier) {\n  return async (args: GetLogsClickhousePayload) => {\n    const pathConditions =\n      args.paths\n        ?.map((p) => {\n          switch (p.operator) {\n            case \"is\":\n              return `path = '${p.value}'`;\n            case \"startsWith\":\n              return `startsWith(path, '${p.value}')`;\n            case \"endsWith\":\n              return `endsWith(path, '${p.value}')`;\n            case \"contains\":\n              return `like(path, '%${p.value}%')`;\n            default:\n              return null;\n          }\n        })\n        .filter(Boolean)\n        .join(\" OR \") || \"TRUE\";\n\n    const query = ch.query({\n      query: `\n        WITH filtered_requests AS (\n          SELECT *\n          FROM metrics.raw_api_requests_v1\n          WHERE workspace_id = {workspaceId: String}\n            AND time BETWEEN {startTime: UInt64} AND {endTime: UInt64}\n            ---------- Apply path filter using pre-generated conditions\n            AND (${pathConditions})\n                  )\n\n        SELECT\n          request_id,\n          time,\n          workspace_id,\n          host,\n          method,\n          path,\n          request_headers,\n          request_body,\n          response_status,\n          response_headers,\n          response_body,\n          error,\n          service_latency\n        FROM filtered_requests\n        ORDER BY time DESC, request_id DESC\n        LIMIT {limit: Int}`,\n      params: getLogsClickhousePayload,\n      schema: log,\n    });\n\n    return query(args);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server with Yarn\nDESCRIPTION: Command to start the Next.js development server using Yarn.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/quickstart/apis/nextjs.mdx#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Unkey Agent with Self-Hosting Configuration Options in Bash\nDESCRIPTION: This snippet shows the command-line interface for running the Unkey agent with various flags for self-hosting. It demonstrates how to enable specific analytics providers, logging services, and event bus options when running Unkey in a self-hosted environment.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-08-10.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ unkey agent --help\n\nRun the Unkey agent\n\nUsage:\n  unkey agent [flags]\n\nFlags:\n      --analytics string   Send analytics to a backend, available: ['tinybird']\n      --enable-axiom       Send logs and traces to axiom\n      --event-bus string   Use a message bus for communication between nodes, available: ['kafka']\n  -h, --help               help for agent\n\nGlobal Flags:\n  -e, --env string   Path to a .env file\n```\n\n----------------------------------------\n\nTITLE: Running Local Command for Dashboard with Skip Environment\nDESCRIPTION: Specific example of using the pnpm local command to develop the dashboard service while skipping environment setup prompts.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/index.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm local --service=dashboard --skip-env\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Rate Limit Override Operation\nDESCRIPTION: Shows the structure of the response returned when setting a rate limit override in Unkey. The response includes the unique override ID that can be used for reference.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/docs/libraries/ts/sdk/ratelimits/overrides/set-override.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result: {\n     overrideId: 'rlor_12345'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: HTML iframe code for embedding YouTube videos in a responsive layout with flex container styling. The code includes proper attributes for security (youtube-nocookie.com domain) and various player permissions.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/www/content/changelog/2023-11-03.mdx#2025-04-10_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"flex justify-left align-left my-8\">\n  <iframe\n    width=\"560\"\n    height=\"315\"\n    src=\"https://www.youtube-nocookie.com/embed/31u3g2Uelfg?si=v9rDjVd89mBsoJ01\"\n    title=\"YouTube video player\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Goose for ClickHouse Tests in Unkey Project\nDESCRIPTION: This snippet provides instructions for installing goose, a database migration tool, which is required for running ClickHouse tests in the Unkey project. It uses the go install command to install the latest version of goose.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/contributing/testing.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/pressly/goose/v4/cmd/goose@latest\n```\n\n----------------------------------------\n\nTITLE: Rendering Full Empty Component Example in React\nDESCRIPTION: This code demonstrates a complete example of the Empty component usage, including all subcomponents: Icon, Title, Description, and Actions. It shows how to structure the component and include a button with an icon.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/empty.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RenderComponentWithSnippet>\n  <Row>\n    <Empty>\n      <Empty.Icon />\n      <Empty.Title>Example Title Text</Empty.Title>\n      <Empty.Description>Example of Description Text.</Empty.Description>\n      <Empty.Actions>\n        <Button>\n            <BookBookmark /> \n            Submit\n        </Button>\n      </Empty.Actions>\n    </Empty>\n  </Row>\n</RenderComponentWithSnippet>\n```\n\n----------------------------------------\n\nTITLE: Defining Field Selection Schema and Types with Zod in TypeScript\nDESCRIPTION: This code defines the type structure for a takeaways generation system using Zod schemas. It includes field selection schemas allowing partial content generation, test case interfaces, and metadata tracking schemas. The approach emphasizes type inference from Zod schemas rather than explicit type definitions.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/generate-takeaways.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the source of truth\nimport { takeawaysSchema } from //...\n\n// We'll use the existing takeawaysSchema as source of truth and create the field selection schema:\nconst fieldSelectionSchema = z.object({\n  tldr: z.boolean().optional(),\n  definitionAndStructure: z.union([z.boolean(), z.array(z.number())]).optional(),\n  historicalContext: z.union([z.boolean(), z.array(z.number())]).optional(),\n  usageInAPIs: z.union([\n    z.boolean(),\n    z.object({\n      tags: z.boolean().optional(),\n      description: z.boolean().optional()\n    })\n  ]).optional(),\n  bestPractices: z.union([z.boolean(), z.array(z.number())]).optional(),\n  recommendedReading: z.union([z.boolean(), z.array(z.number())]).optional(),\n  didYouKnow: z.boolean().optional()\n});\n\n// Field Selection - Similar to Prisma's select API\n// Type is inferred from the schema above\ntype FieldSelection = z.infer<typeof fieldSelectionSchema>;\n\n// Test Case Interface - Using inferred types\ninterface TestCase {\n  name: string;\n  input: {\n    term: string;\n    fields?: FieldSelection;\n  };\n  // Use the actual task result type\n  expectedTaskRunResult: TaskRunResult<typeof generateTakeawaysTask>;\n  validate?: (result: TaskRunResult<typeof generateTakeawaysTask>) => boolean;\n  cleanup?: (result: TaskRunResult<typeof generateTakeawaysTask>) => Promise<void>;\n}\n\n// Metadata Schema\n// IMPORTANT: Follow the type safety pattern from the Trigger rule using Zod\nconst TestMetadataSchema = z.object({\n  totalTests: z.number(),\n  completedTests: z.number(),\n  passedTests: z.number(),\n  failedTests: z.number(),\n  currentTest: z.string().optional(),\n  results: z.array(z.object({\n    testCase: z.string(),\n    status: z.enum([\"passed\", \"failed\"]),\n    duration: z.number(),\n    error: z.string().optional(),\n    output: z.any().optional()\n  })),\n  cleanupResults: z.array(z.object({\n    testCase: z.string(),\n    status: z.enum([\"success\", \"failed\"]),\n    prClosed: z.boolean().optional(),\n    branchDeleted: z.boolean().optional(),\n    error: z.string().optional()\n  }))\n});\n\n// Type is inferred from schema\ntype TestMetadata = z.infer<typeof TestMetadataSchema>;}\n```\n\n----------------------------------------\n\nTITLE: Implementing Success Ghost Button Variants in React\nDESCRIPTION: Code showing how to create success ghost button variants with different states (default, hover, focus, loading, disabled) in both light and dark modes using the Button component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button variant=\"ghost\" color=\"success\">\n        Default\n      </Button>\n      <Button variant=\"ghost\" color=\"success\" className=\"!bg-success-3\">\n        Hover\n      </Button>\n      <Button\n        variant=\"ghost\"\n        color=\"success\"\n        className=\"!ring-4 !ring-success-6 !border-success-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"ghost\" color=\"success\" loading>\n        Loading\n      </Button>\n      <Button variant=\"ghost\" color=\"success\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex flex-wrap items-center gap-4 dark\">\n      <Button variant=\"ghost\" color=\"success\">\n        Default\n      </Button>\n      <Button variant=\"ghost\" color=\"success\" className=\"!bg-success-3\">\n        Hover\n      </Button>\n      <Button\n        variant=\"ghost\"\n        color=\"success\"\n        className=\"!ring-4 !ring-success-6 !border-success-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"ghost\" color=\"success\" loading>\n        Loading\n      </Button>\n      <Button variant=\"ghost\" color=\"success\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles in TypeScript\nDESCRIPTION: Shows how to import the required CSS styles from the @unkey/ui package in a TypeScript environment.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@unkey/ui/css\";\n```\n\n----------------------------------------\n\nTITLE: Example Metadata Structure for Test Run Tracking in TypeScript\nDESCRIPTION: This code demonstrates the structure for tracking test execution metadata. It includes tracking of test totals, statuses, individual test results, and cleanup operations. The structure follows the TestMetadataSchema defined earlier.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/generate-takeaways.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Example metadata during test run - type is inferred from TestMetadataSchema\n{\n  totalTests: 5,\n  completedTests: 3,\n  passedTests: 2,\n  failedTests: 1,\n  currentTest: \"partialGenerationTest\",\n  results: [\n    {\n      testCase: \"fullGenerationTest\",\n      status: \"passed\",\n      duration: 1234,\n      output: { ... }\n    }\n  ],\n  cleanupResults: [\n    {\n      testCase: \"fullGenerationTest\",\n      status: \"success\",\n      prClosed: true,\n      branchDeleted: true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error Case Test in TypeScript\nDESCRIPTION: This test case verifies error handling when an invalid (empty) term is provided. It expects the task to fail with a specific error message and code, testing the input validation logic.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/generate-takeaways.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"invalidTermTest\",\n  input: {\n    term: \"\"\n  },\n  expectedTaskRunResult: {\n    ok: false,\n    error: {\n      message: \"Term is required\",\n      code: \"INVALID_INPUT\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Console Output Format for Test Results\nDESCRIPTION: This snippet shows the expected format for displaying test results in the console. It includes a summary of test counts, details of failed tests, cleanup operation results, and total test duration.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/generate-takeaways.md#2025-04-10_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n========== TEST RESULTS ==========\nTotal Tests: 5\n✓ Passed: 4\n✗ Failed: 1\n\nFailed Tests:\n- invalidTermTest\n  Error: Term is required\n  Code: INVALID_INPUT\n\nCleanup Results:\n✓ Closed 3 PRs\n✓ Deleted 3 branches\n✗ Failed to cleanup 1 PR (invalidTermTest)\n\nDuration: 1234ms\n===============================\n```\n\n----------------------------------------\n\nTITLE: Displaying Gray Alpha Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the gray alpha color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-grayA-1\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-2\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-3\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-4\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-5\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-6\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-7\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-8\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-9\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-10\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-11\"/>\n  <div className=\"rounded-lg aspect-square bg-grayA-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Orange Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the orange color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-orange-1\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-2\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-3\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-4\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-5\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-6\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-7\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-8\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-9\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-10\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-11\"/>\n  <div className=\"rounded-lg aspect-square bg-orange-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Task in Trigger.dev - TypeScript\nDESCRIPTION: Test task implementation that defines test cases and executes them against the core task. Includes test case definition structure and execution logic.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/billing/todos/update-workflow/update-workflow.test.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst testCases = [\n  {\n    name: \"basicUpdateTest\",\n    input: { inputTerm: \"MIME types\", content: \"...\" },\n    expectedSuccess: true,\n    validate: (result) => { /* validation logic */ }\n  },\n  // More test cases...\n];\n\nexport const runAllTests = task({\n  id: \"glossary-update-content-test-all\",\n  run: async () => {\n    // Run all test cases without requiring input\n    for (const testCase of testCases) {\n      // Run the test case and collect results\n    }\n    return { /* test results */ };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Test for Local Debugging\nDESCRIPTION: Command to install @playwright/test for local debugging and code completion. This example uses version 1.38.1 which matches a specific Checkly runtime.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/internal/checkly/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @playwright/test@1.38.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Alpha Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the warning alpha color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-warningA-1\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-2\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-3\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-4\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-5\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-6\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-7\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-8\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-9\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-10\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-11\"/>\n  <div className=\"rounded-lg aspect-square bg-warningA-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Icon License Header Template\nDESCRIPTION: Required license block to include when adding new icons to the Unkey icon library. Includes copyright information and usage restrictions from Nucleo.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/icons.mdx#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n* Copyright © Nucleo\n* Version 1.3, January 3, 2024\n* Nucleo Icons\n* https://nucleoapp.com/\n* - Redistribution of icons is prohibited.\n* - Icons are restricted for use only within the product they are bundled with.\n*\n* For more details:\n* https://nucleoapp.com/license\n*/\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the error color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-error-1\"/>\n  <div className=\"rounded-lg aspect-square bg-error-2\"/>\n  <div className=\"rounded-lg aspect-square bg-error-3\"/>\n  <div className=\"rounded-lg aspect-square bg-error-4\"/>\n  <div className=\"rounded-lg aspect-square bg-error-5\"/>\n  <div className=\"rounded-lg aspect-square bg-error-6\"/>\n  <div className=\"rounded-lg aspect-square bg-error-7\"/>\n  <div className=\"rounded-lg aspect-square bg-error-8\"/>\n  <div className=\"rounded-lg aspect-square bg-error-9\"/>\n  <div className=\"rounded-lg aspect-square bg-error-10\"/>\n  <div className=\"rounded-lg aspect-square bg-error-11\"/>\n  <div className=\"rounded-lg aspect-square bg-error-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Outline Button Implementation in React\nDESCRIPTION: Implementation of the outline button variant with transparent background and visible border. Shows different states in both themes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-wrap items-center gap-4\">\n  <Button variant=\"outline\">Default</Button>\n  <Button variant=\"outline\" className=\"!bg-grayA-2\">Hover</Button>\n  <Button variant=\"outline\" className=\"!ring-4 !ring-gray-7 !border-grayA-12\">Focus</Button>\n  <Button variant=\"outline\" loading>Loading</Button>\n  <Button variant=\"outline\" disabled>Disabled</Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using OnHoverExample Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the imported OnHoverExample component within JSX. It's a self-closing tag, suggesting that the component encapsulates all necessary functionality for the on-hover tooltip example.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/tooltip.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OnHoverExample />\n```\n\n----------------------------------------\n\nTITLE: Rendering Success Primary Button Variants in React\nDESCRIPTION: Displays a collection of success primary buttons in different states (default, hover, focus, loading, disabled) for both light and dark themes using the Button component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button variant=\"primary\" color=\"success\">\n        Default\n      </Button>\n      <Button\n        variant=\"primary\"\n        color=\"success\"\n        className=\"!bg-success-9/90\"\n      >\n        Hover\n      </Button>\n      <Button\n        variant=\"primary\"\n        color=\"success\"\n        className=\"!ring-4 !ring-success-6 !border-success-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"primary\" color=\"success\" loading>\n        Loading\n      </Button>\n      <Button variant=\"primary\" color=\"success\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex flex-wrap items-center gap-4 dark\">\n      <Button variant=\"primary\" color=\"success\">\n        Default\n      </Button>\n      <Button\n        variant=\"primary\"\n        color=\"success\"\n        className=\"!bg-success-9/90\"\n      >\n        Hover\n      </Button>\n      <Button\n        variant=\"primary\"\n        color=\"success\"\n        className=\"!ring-4 !ring-success-6 !border-success-11\"\n      >\n        Focus\n      </Button>\n      <Button variant=\"primary\" color=\"success\" loading>\n        Loading\n      </Button>\n      <Button variant=\"primary\" color=\"success\" disabled>\n        Disabled\n      </Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Accent Color Scale in HTML/CSS\nDESCRIPTION: This snippet creates a grid of divs to display the accent color scale from 1 to 12. Each div is styled with rounded corners and a square aspect ratio, using Tailwind CSS classes.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/colors.mdx#2025-04-10_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-12 gap-2\">\n  <div className=\"rounded-lg aspect-square bg-accent-1\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-2\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-3\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-4\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-5\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-6\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-7\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-8\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-9\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-10\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-11\"/>\n  <div className=\"rounded-lg aspect-square bg-accent-12\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Size Variants in React\nDESCRIPTION: Code demonstrating different button size variants (small, medium, large, extra large, 2x large) in both light and dark themes using the Button component.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/button.mdx#2025-04-10_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex flex-col gap-6\">\n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Light</h4>\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button size=\"sm\">Small</Button>\n      <Button size=\"md\">Medium</Button>\n      <Button size=\"lg\">Large</Button>\n      <Button size=\"xlg\">Extra Large</Button>\n      <Button size=\"2xlg\">2X Large</Button>\n    </div>\n  </div>\n  \n  <div>\n    <h4 className=\"text-sm font-medium mb-2\">Dark</h4>\n    <div className=\"bg-black p-4 rounded-md flex flex-wrap items-center gap-4 dark\">\n      <Button size=\"sm\">Small</Button>\n      <Button size=\"md\">Medium</Button>\n      <Button size=\"lg\">Large</Button>\n      <Button size=\"xlg\">Extra Large</Button>\n      <Button size=\"2xlg\">2X Large</Button>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing FormInput Variants in React\nDESCRIPTION: Import statement for various FormInput component variants used in the documentation examples.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/form-input.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  DefaultFormInputVariant,\n  RequiredFormInputVariant,\n  RequiredWithErrorFormInputVariant,\n  OptionalFormInputVariant,\n  SuccessFormInputVariant,\n  WarningFormInputVariant,\n  ErrorFormInputVariant,\n  DisabledFormInputVariant,\n  DefaultValueFormInputVariant,\n  ReadonlyFormInputVariant,\n  ComplexFormInputVariant\n} from \"./form/form-input.variants\"\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component Variants\nDESCRIPTION: Import statements for different textarea component variants including default, success, warning, error, disabled states and special features like character count and icon support.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/textarea.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  TextareaDefaultVariant,\n  TextareaSuccessVariant,\n  TextareaWarningVariant,\n  TextareaErrorVariant,\n  TextareaDisabledVariant,\n  TextareaWithDefaultValue,\n  TextareaWithCharacterCount,\n  TextareaWithBothIcons\n} from \"./textarea/textarea.variants.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Importing OnHoverExample Component for Tooltip in JSX\nDESCRIPTION: This snippet shows how to import a specific example component for the Tooltip. It imports the OnHoverExample from a local file named 'tooltip.onHover'.\nSOURCE: https://github.com/unkeyed/unkey/blob/main/apps/engineering/content/design/components/tooltip.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OnHoverExample } from \"./tooltip.onHover\"\n```"
  }
]