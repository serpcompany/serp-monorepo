[
  {
    "owner": "terricain",
    "repo": "aioboto3",
    "content": "TITLE: Initializing AWS S3 Resource with Async Context Manager\nDESCRIPTION: Example showing how to create an S3 resource using the new async context manager pattern in aioboto3. Demonstrates bucket object iteration.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    session = aioboto3.Session()\n    async with session.resource(\"s3\") as s3:\n        bucket = await s3.Bucket('mybucket')  # <----------------\n        async for s3_object in bucket.objects.all():\n            print(s3_object)\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Async Operations Example\nDESCRIPTION: Comprehensive example demonstrating DynamoDB operations including put_item, query, and batch writing using async context managers and boto3 conditions.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport aioboto3\nfrom boto3.dynamodb.conditions import Key\n\n\nasync def main():\n    session = aioboto3.Session()\n    async with session.resource('dynamodb', region_name='eu-central-1') as dynamo_resource:\n        table = await dynamo_resource.Table('test_table')\n\n        await table.put_item(\n            Item={'pk': 'test1', 'col1': 'some_data'}\n        )\n\n        result = await table.query(\n            KeyConditionExpression=Key('pk').eq('test1')\n        )\n\n        # Example batch write\n        more_items = [{'pk': 't2', 'col1': 'c1'}, \\\n                      {'pk': 't3', 'col1': 'c3'}]\n        async with table.batch_writer() as batch:\n            for item_ in more_items:\n                await batch.put_item(Item=item_)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Query Operation with aioboto3\nDESCRIPTION: Example showing how to put an item into DynamoDB and query it using Key conditions with async/await syntax.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport aioboto3\nfrom boto3.dynamodb.conditions import Key\n\n\nasync def main():\n    session = aioboto3.Session()\n    async with session.resource('dynamodb', region_name='eu-central-1') as dynamo_resource:\n        table = await dynamo_resource.Table('test_table')\n\n        await table.put_item(\n            Item={'pk': 'test1', 'col1': 'some_data'}\n        )\n\n        result = await table.query(\n            KeyConditionExpression=Key('pk').eq('test1')\n        )\n\n        print(result['Items'])\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Batch Writer Operations\nDESCRIPTION: Demonstrates using batch_writer context manager for efficient batch writes to DynamoDB with automatic retry handling.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport aioboto3\nfrom boto3.dynamodb.conditions import Key\n\n\nasync def main():\n    session = aioboto3.Session()\n    async with session.resource('dynamodb', region_name='eu-central-1') as dynamo_resource:\n        table = await dynamo_resource.Table('test_table')\n\n        async with table.batch_writer() as dynamo_writer:\n            await dynamo_writer.put_item(Item={'pk': 'test1', 'col1': 'some_data'})\n            await dynamo_writer.put_item(Item={'pk': 'test2', 'col1': 'some_data'})\n            await dynamo_writer.put_item(Item={'pk': 'test3', 'col1': 'some_data'})\n            await dynamo_writer.put_item(Item={'pk': 'test4', 'col1': 'some_data'})\n            await dynamo_writer.put_item(Item={'pk': 'test5', 'col1': 'some_data'})\n\n        result = await table.scan()\n\n        print(result['Count'])\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: S3 Streaming Download with aiohttp\nDESCRIPTION: Demonstrates streaming download from S3 and serving via aiohttp web response with chunked transfer.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\nfrom multidict import MultiDict\n\n\nasync def serve_blob(\n    suite: str,\n    release: str,\n    filename: str,\n    bucket: str,\n    request: web.Request,\n    chunk_size: int = 69 * 1024\n) -> web.StreamResponse:\n    blob_s3_key = f\"{suite}/{release}/{filename}\"\n\n    session = aioboto3.Session()\n    async with session.client(\"s3\") as s3:\n        LOG.info(f\"Serving {bucket} {blob_s3_key}\")\n        s3_ob = await s3.get_object(Bucket=bucket, Key=blob_s3_key)\n\n        ob_info = s3_ob[\"ResponseMetadata\"][\"HTTPHeaders\"]\n        resp = web.StreamResponse(\n            headers=MultiDict(\n                {\n                    \"CONTENT-DISPOSITION\": (\n                        f\"attachment; filename='{filename}'\"\n                    ),\n                    \"Content-Type\": ob_info[\"content-type\"],\n                }\n            )\n        )\n        resp.content_type = ob_info[\"content-type\"]\n        resp.content_length = ob_info[\"content-length\"]\n        await resp.prepare(request)\n\n        stream = s3_ob[\"Body\"]\n        while file_data := await stream.read(chunk_size):\n            await resp.write(file_data)\n\n    return resp\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 Client-side Encryption with KMS using aioboto3\nDESCRIPTION: Example demonstrating how to use aioboto3 to perform client-side encryption with AWS KMS. Shows both encryption and decryption of data using KMSCryptoContext, including proper async/await usage and S3CSE initialization.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/cse.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport aioboto3\nfrom aioboto3.s3.cse import S3CSE, KMSCryptoContext\n\nasync def main():\n    ctx = KMSCryptoContext(keyid='alias/someKey', kms_client_args={'region_name': 'eu-central-1'})\n\n    some_data = b'Some sensitive data for S3'\n\n    async with S3CSE(crypto_context=ctx, s3_client_args={'region_name': 'eu-central-1'}) as s3_cse:\n        # Upload some binary data\n        await s3_cse.put_object(\n            Body=some_data,\n            Bucket='some-bucket',\n            Key='encrypted_file',\n        )\n\n        response = await s3_cse.get_object(\n            Bucket='some-bucket',\n            Key='encrypted_file'\n        )\n        data = await response['Body'].read()\n        print(data)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n\n# Outputs:\n#  b'Some sensitive data for S3'\n```\n\n----------------------------------------\n\nTITLE: S3 File Upload Operation\nDESCRIPTION: Shows how to upload a file to S3 using aioboto3 with file object streaming.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def upload(\n    suite: str,\n    release: str,\n    filename: str,\n    staging_path: Path,\n    bucket: str,\n) -> str:\n    blob_s3_key = f\"{suite}/{release}/{filename}\"\n\n    session = aioboto3.Session()\n    async with session.client(\"s3\") as s3:\n        try:\n            with staging_path.open(\"rb\") as spfp:\n                LOG.info(f\"Uploading {blob_s3_key} to s3\")\n                await s3.upload_fileobj(spfp, bucket, blob_s3_key)\n                LOG.info(f\"Finished Uploading {blob_s3_key} to s3\")\n        except Exception as e:\n            LOG.error(f\"Unable to s3 upload {staging_path} to {blob_s3_key}: {e} ({type(e)})\")\n            return \"\"\n\n    return f\"s3://{blob_s3_key}\"\n```\n\n----------------------------------------\n\nTITLE: S3 Resource Object Operations\nDESCRIPTION: Shows usage of S3 bucket operations using the resource interface with async iteration and bulk delete operations.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport aioboto3\n\n\nasync def main():\n    session = aioboto3.Session()\n    async with session.resource(\"s3\") as s3:\n\n        bucket = await s3.Bucket('mybucket')\n        async for s3_object in bucket.objects.all():\n            print(s3_object)\n\n        async for s3_object in bucket.objects.filter(Prefix='someprefix/'):\n            print(s3_object)\n\n        await bucket.objects.all().delete()\n\n        # or\n        await bucket.objects.filter(Prefix='test/').delete()\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Chalice Application with aioboto3\nDESCRIPTION: This example demonstrates how to create an async Chalice application using aioboto3's experimental AsyncChalice class. It shows two route handlers: one that simply returns a greeting with a name parameter, and another that asynchronously lists S3 buckets using the integrated aioboto3 session.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/chalice.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aioboto3.experimental.async_chalice import AsyncChalice\n\napp = AsyncChalice(app_name='testclient')\n\n\n@app.route('/hello/{name}')\nasync def hello(name):\n    return {'hello': name}\n\n\n@app.route('/list_buckets')\nasync def get_list_buckets():\n    async with app.aioboto3.client(\"s3\") as s3:\n        resp = await s3.list_buckets()\n\n    return {\"buckets\": [bucket['Name'] for bucket in resp['Buckets']]}\n```\n\n----------------------------------------\n\nTITLE: AioHTTP Server with DynamoDB Integration\nDESCRIPTION: Shows how to properly integrate aioboto3 with an aiohttp web server using AsyncExitStack for resource cleanup.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\n\nimport aioboto3\nfrom boto3.dynamodb.conditions import Key\nfrom aiohttp import web\n\nroutes = web.RouteTableDef()\nsession = aioboto3.Session()\n\n\n@routes.get('/')\nasync def hello(request):\n\n    # request.app['table'] == Table object from boto3 docs\n    response = await request.app['table'].query(\n        KeyConditionExpression=Key('id').eq('lalalala')\n    )\n\n    return web.Response(text=str(response))\n\n\nasync def startup_tasks(app: web.Application) -> None:\n    context_stack = contextlib.AsyncExitStack()\n    app['context_stack'] = context_stack\n\n    app['dynamo_resource'] = await context_stack.enter_async_context(\n        session.resource('dynamodb', region_name='eu-west-1')\n```\n\n----------------------------------------\n\nTITLE: Initializing DynamoDB Resource in aiohttp Startup Task\nDESCRIPTION: Defines an async startup function that initializes aioboto3 context and DynamoDB resources for an aiohttp application. In aioboto3 v8.0.0+, service resources like Table() need to be awaited.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def startup_tasks(app: web.Application) -> None:\n    app['context_stack'] = await aioboto3.resource('dynamodb')\n    app['dynamo_resource'] = app['context_stack']\n    # By now, app['dynamo_resource'] will have methods like .Table() and list_tables() etc...\n\n    # aioboto3 v8.0.0+ all service resources (aka Table(), Bucket() etc...) need to be awaited\n    app['table'] = await app['dynamo_resource'].Table('somedynamodbtablename')\n```\n\n----------------------------------------\n\nTITLE: Implementing aiohttp Application Shutdown Handler\nDESCRIPTION: Defines an async shutdown function that properly closes the aioboto3 context stack when the aiohttp application is shutting down. This ensures proper cleanup of AWS resources.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def shutdown_tasks(app: web.Application) -> None:\n    await app['context_stack'].aclose()\n    # By now, app['dynamo_resource'] would be closed\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running aiohttp Application with aioboto3 Integration\nDESCRIPTION: Sets up an aiohttp web application with route configuration and lifecycle event handlers. Registers the startup and shutdown tasks that manage the aioboto3 resources, then starts the web server on port 8000.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n_app = web.Application()\n_app.add_routes(routes)\n_app.on_startup.append(startup_tasks)\n_app.on_shutdown.append(shutdown_tasks)\nweb.run_app(_app, port=8000)\n```\n\n----------------------------------------\n\nTITLE: AWS SSM Client Operations\nDESCRIPTION: Example of using the standard AWS client interface with aioboto3 for SSM parameter operations.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport aioboto3\n\n\nasync def main():\n    session = aioboto3.Session()\n    async with session.client('ssm', region_name='eu-central-1') as ssm_client:\n        result = await ssm_client.describe_parameters()\n\n        print(result['Parameters'])\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n----------------------------------------\n\nTITLE: AWS Organizations with Retries\nDESCRIPTION: Demonstrates retry configuration using AioConfig for handling throttled API requests to AWS Organizations.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/usage.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom aioboto3 import Session\nfrom aiobotocore.config import AioConfig\n\ntry_hard = AioConfig(retries={\"max_attempts\": 100})\n\nasync def main():\n    coro = Session().client(\"organizations\", config=try_hard)\n    async with coro as client:\n        resp_list = await asyncio.gather(\n            *[client.list_roots() for _ in range(20)]\n        )\n        print([r[\"ResponseMetadata\"][\"RetryAttempts\"] for r in resp_list])\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Installing aioboto3 via pip\nDESCRIPTION: This command installs the most recent stable release of aioboto3 using pip. It's the preferred method for installation.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install aioboto3\n```\n\n----------------------------------------\n\nTITLE: Implementing KMS Encryption for S3 Client-Side Encryption\nDESCRIPTION: Command to use the KMS encryption type with the S3 Client-Side Encryption tool. This specifies a bucket name, key name, AWS region, KMS key ID, and enables authenticated crypto.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/resources/S3-CSE/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar build/libs/s3cse-1.0.jar --crypto-type kms --bucket-name bucket1 --key-name test-cse-kms \\\n                                   --region eu-west-1 --kms-key-id alias/someKey --authenticated-crypto\n```\n\n----------------------------------------\n\nTITLE: Implementing Symmetric Encryption for S3 Client-Side Encryption\nDESCRIPTION: Command to use the symmetric encryption type with the S3 Client-Side Encryption tool. This specifies a bucket name, key name, AWS region, and the directory containing encryption keys.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/resources/S3-CSE/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -jar build/libs/s3cse-1.0.jar --crypto-type symmetric --bucket-name bucket1 --key-name test-cse-symmetric \\\n                                   --region eu-west-1 --key-dir ./keys\n```\n\n----------------------------------------\n\nTITLE: Implementing Asymmetric Encryption for S3 Client-Side Encryption\nDESCRIPTION: Command to use the asymmetric encryption type with the S3 Client-Side Encryption tool. This specifies a bucket name, key name, AWS region, and the directory containing encryption keys.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/resources/S3-CSE/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -jar build/libs/s3cse-1.0.jar --crypto-type asymmetric --bucket-name bucket1 --key-name test-cse-asymmetric \\\n                                   --region eu-west-1 --key-dir ./keys\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with pytest and Poetry\nDESCRIPTION: Commands to run specific tests using pytest and Poetry. These examples show how to run a specific test module or a specific test function.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npoetry run pytest tests/test_basic.py\npoetry run pytest tests/test_basic.py::test_getting_client\n```\n\n----------------------------------------\n\nTITLE: Running Linting and Tests with Make\nDESCRIPTION: Commands to run linting and tests on your changes using Make. These commands check that your changes pass flake8 and the tests across multiple Python versions using tox.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake lint\nmake test\n```\n\n----------------------------------------\n\nTITLE: Installing aioboto3 from source\nDESCRIPTION: This command installs aioboto3 from the source code after it has been downloaded or cloned from GitHub.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/installation.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Cloning aioboto3 GitHub repository\nDESCRIPTION: This command clones the public GitHub repository of aioboto3 for installation from source.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git://github.com/terrycain/aioboto3\n```\n\n----------------------------------------\n\nTITLE: Downloading aioboto3 source tarball\nDESCRIPTION: This command downloads the tarball of the aioboto3 source code from GitHub for installation from source.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/installation.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl  -OL https://github.com/terrycain/aioboto3/tarball/master\n```\n\n----------------------------------------\n\nTITLE: Installing aioboto3 in Development Mode using Poetry\nDESCRIPTION: Commands to navigate to the project directory and install the local copy of aioboto3 into a virtualenv using Poetry. This is step 3 in the local development setup process.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd aioboto3/\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Cloning the aioboto3 Repository in Shell\nDESCRIPTION: Command to clone the forked aioboto3 repository to your local machine. This is step 2 in the local development setup process.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:your_name_here/aioboto3.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Local Development in Git\nDESCRIPTION: Command to create and checkout a new Git branch for your feature or bugfix. This is step 4 in the local development setup process.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub\nDESCRIPTION: Git commands to add, commit, and push your changes to your forked repository on GitHub. This is step 6 in the contribution workflow.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options for S3 Client-Side Encryption Tool\nDESCRIPTION: Command to display the available options for the S3 Client-Side Encryption Java tool. This runs the compiled JAR file with the help flag.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/resources/S3-CSE/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -jar build/libs/s3cse-1.0.jar -h\n```\n\n----------------------------------------\n\nTITLE: Including External RST File in Sphinx Documentation\nDESCRIPTION: A Sphinx directive that includes the CHANGELOG.rst file from the parent directory. This allows the changelog to be maintained in a single file while being displayed in the documentation.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/changelog.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Including External RST Contributing Guidelines\nDESCRIPTION: RST include directive that references the CONTRIBUTING.rst file located in the parent directory. This allows the contributing guidelines to be reused across multiple documentation files.\nSOURCE: https://github.com/terricain/aioboto3/blob/main/docs/contributing.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CONTRIBUTING.rst\n```"
  }
]