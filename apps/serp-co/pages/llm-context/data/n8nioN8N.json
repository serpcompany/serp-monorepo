[
  {
    "owner": "n8n-io",
    "repo": "n8n",
    "content": "TITLE: Starting n8n in Docker with Local Data Persistence\nDESCRIPTION: This command creates a Docker volume for n8n data and starts an n8n container with the volume mounted. It exposes port 5678 for web access.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create n8n_data\n\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -v n8n_data:/home/node/.n8n \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Deploying n8n with PostgreSQL Database\nDESCRIPTION: This command demonstrates how to start n8n using PostgreSQL as the database backend instead of the default SQLite. It includes environment variables for database configuration.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create n8n_data\n\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -e DB_TYPE=postgresdb \\\n -e DB_POSTGRESDB_DATABASE=<POSTGRES_DATABASE> \\\n -e DB_POSTGRESDB_HOST=<POSTGRES_HOST> \\\n -e DB_POSTGRESDB_PORT=<POSTGRES_PORT> \\\n -e DB_POSTGRESDB_USER=<POSTGRES_USER> \\\n -e DB_POSTGRESDB_SCHEMA=<POSTGRES_SCHEMA> \\\n -e DB_POSTGRESDB_PASSWORD=<POSTGRES_PASSWORD> \\\n -v n8n_data:/home/node/.n8n \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Starting n8n with NPX\nDESCRIPTION: Command to install and run n8n instantly using npx, which requires Node.js to be installed on the system. This is the quickest way to try out n8n locally.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx n8n\n```\n\n----------------------------------------\n\nTITLE: Importing Workflows and Credentials after MongoDB Migration\nDESCRIPTION: Commands to import previously backed up workflows and credentials using the n8n CLI after upgrading to a supported database.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nn8n import:workflow --separate --input=backups/latest/\nn8n import:credentials --separate --input=backups/latest/\n```\n\n----------------------------------------\n\nTITLE: Exporting Workflows and Credentials during MongoDB Migration\nDESCRIPTION: Commands to export workflows and credentials to a backup folder using the n8n CLI before upgrading from MongoDB to a supported database.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:workflow --backup --output=backups/latest/\nn8n export:credentials --backup --output=backups/latest/\n```\n\n----------------------------------------\n\nTITLE: Installing N8N Plugin SDK Package\nDESCRIPTION: Command to install the @n8n/plugin-sdk package using npm. This package is essential for developing plugins for N8N.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/extension-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @n8n/plugin-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing n8n Globally with npm\nDESCRIPTION: Command to install n8n globally on your system using npm package manager.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install n8n -g\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple n8n Node in TypeScript\nDESCRIPTION: A complete example of a simple n8n node implementation that adds a custom string property to all input items. This demonstrates the basic structure including imports, class definition, node description, and execute method.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/node-dev/README.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\n\nexport class MyNode implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'My Node',\n\t\tname: 'myNode',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Adds \"myString\" on all items to defined value.',\n\t\tdefaults: {\n\t\t\tname: 'My Node',\n\t\t\tcolor: '#772244',\n\t\t},\n\t\tinputs: ['main'],\n\t\toutputs: ['main'],\n\t\tproperties: [\n\t\t\t// Node properties which the user gets displayed and\n\t\t\t// can change on the node.\n\t\t\t{\n\t\t\t\tdisplayName: 'My String',\n\t\t\t\tname: 'myString',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'Placeholder value',\n\t\t\t\tdescription: 'The description text',\n\t\t\t}\n\t\t]\n\t};\n\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\n\t\tconst items = this.getInputData();\n\n\t\tlet item: INodeExecutionData;\n\t\tlet myString: string;\n\n\t\t// Itterates over all input items and add the key \"myString\" with the\n\t\t// value the parameter \"myString\" resolves to.\n\t\t// (This could be a different value for each item in case it contains an expression)\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\tmyString = this.getNodeParameter('myString', itemIndex, '') as string;\n\t\t\titem = items[itemIndex];\n\n\t\t\titem.json['myString'] = myString;\n\t\t}\n\n\t\treturn [items];\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing n8n Chat via CDN in HTML\nDESCRIPTION: This snippet shows how to embed the n8n Chat widget using CDN links in an HTML page. It links the CSS stylesheet and imports the JavaScript module to create the chat interface.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/chat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://cdn.jsdelivr.net/npm/@n8n/chat/dist/style.css\" rel=\"stylesheet\" />\n<script type=\"module\">\n\timport { createChat } from 'https://cdn.jsdelivr.net/npm/@n8n/chat/dist/chat.bundle.es.js';\n\n\tcreateChat({\n\t\twebhookUrl: 'YOUR_PRODUCTION_WEBHOOK_URL'\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection with @n8n/di in TypeScript\nDESCRIPTION: Demonstrates how to use the @n8n/di library for dependency injection in TypeScript. The example shows defining service classes with the @Service decorator and retrieving instances from the Container.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/di/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// from https://github.com/typestack/typedi/blob/develop/README.md\nimport { Container, Service } from 'typedi';\n\n@Service()\nclass ExampleInjectedService {\n  printMessage() {\n    console.log('I am alive!');\n  }\n}\n\n@Service()\nclass ExampleService {\n  constructor(\n    // because we annotated ExampleInjectedService with the @Service()\n    // decorator TypeDI will automatically inject an instance of\n    // ExampleInjectedService here when the ExampleService class is requested\n    // from TypeDI.\n    public injectedService: ExampleInjectedService\n  ) {}\n}\n\nconst serviceInstance = Container.get(ExampleService);\n// we request an instance of ExampleService from TypeDI\n\nserviceInstance.injectedService.printMessage();\n// logs \"I am alive!\" to the console\n```\n\n----------------------------------------\n\nTITLE: Starting n8n via New Binary Path - Updated Method\nDESCRIPTION: The new recommended method for starting n8n using the updated binary path location, addressing security vulnerabilities from the previous CLI library.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n/usr/local/bin/node bin/n8n start\n```\n\n----------------------------------------\n\nTITLE: Updating Binary Data Access Method in Custom n8n Nodes\nDESCRIPTION: Example of updating binary data access in custom n8n nodes as required from version 0.135.0. Direct buffer access is replaced with the getBinaryDataBuffer helper method.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst items = this.getInputData();\n\nfor (const i = 0; i < items.length; i++) {\n\tconst item = items[i].binary as IBinaryKeyData;\n\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i);\n\tconst binaryData = item[binaryPropertyName] as IBinaryData;\n\t// Before 0.135.0:\n\tconst binaryDataBuffer = Buffer.from(binaryData.data, BINARY_ENCODING);\n\t// From 0.135.0:\n\tconst binaryDataBuffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getBinaryStream Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to update the usage of this.helpers.getBinaryStream() method which became asynchronous in n8n 1.9.0. This requires adding the 'await' keyword when calling the method.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst binaryStream = this.helpers.getBinaryStream(id); // until 1.9.0\nconst binaryStream = await this.helpers.getBinaryStream(id); // since 1.9.0\n```\n\n----------------------------------------\n\nTITLE: Updating n8n with Docker Compose\nDESCRIPTION: This set of commands shows how to update n8n when using Docker Compose, including pulling the latest image, stopping the old container, and starting the new one.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Pull latest version\ndocker compose pull\n\n# Stop and remove older version\ndocker compose down\n\n# Start the container\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Deploying n8n with Docker\nDESCRIPTION: Commands to deploy n8n using Docker. The first command creates a Docker volume to persist data, and the second runs the n8n container, mapping port 5678 to the host and mounting the created volume.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create n8n_data\ndocker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific n8n Version\nDESCRIPTION: This command demonstrates how to pull a specific version of the n8n Docker image, using version 0.220.1 as an example.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull docker.n8n.io/n8nio/n8n:0.220.1\n```\n\n----------------------------------------\n\nTITLE: Installing n8n-node-dev CLI using npm\nDESCRIPTION: Command to install the n8n-node-dev CLI tool globally using npm. This makes the CLI available system-wide for creating and building n8n nodes.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/node-dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install n8n-node-dev -g\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest n8n Docker Image\nDESCRIPTION: This command pulls the latest stable version of the n8n Docker image from the official repository.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for n8n Docker Container\nDESCRIPTION: This command demonstrates how to set both the n8n application timezone and the system timezone when starting the n8n Docker container.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -e GENERIC_TIMEZONE=\"Europe/Berlin\" \\\n -e TZ=\"Europe/Berlin\" \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Starting n8n with Tunnel for External Webhook Access\nDESCRIPTION: This command starts n8n with a tunnel service, allowing external services to trigger workflows via webhooks. It's intended for local development and testing only.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create n8n_data\n\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -v n8n_data:/home/node/.n8n \\\n docker.n8n.io/n8nio/n8n \\\n start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Starting n8n Development Server\nDESCRIPTION: Commands to start n8n in different modes including with tunnel\nSOURCE: https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n./packages/cli/bin/n8n start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Basic n8n Setup Commands\nDESCRIPTION: Series of commands to clone, setup dependencies and build n8n locally\nSOURCE: https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your_github_username>/n8n.git\ncd n8n\ngit remote add upstream https://github.com/n8n-io/n8n.git\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Importing n8n Chat in TypeScript\nDESCRIPTION: Basic implementation of n8n Chat in TypeScript. This snippet imports the CSS styles and the createChat function, then initializes the chat with a webhook URL.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/chat/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@n8n/chat/style.css';\nimport { createChat } from '@n8n/chat';\n\ncreateChat({\n\twebhookUrl: 'YOUR_PRODUCTION_WEBHOOK_URL'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up n8n-editor-ui Project Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all project dependencies using the PNPM package manager.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/design-system/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Development and Testing Commands\nDESCRIPTION: Common commands used during n8n development cycle including testing\nSOURCE: https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\npnpm build\npnpm start\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Implementing n8n Chat in React\nDESCRIPTION: React component implementation of n8n Chat. This snippet demonstrates how to initialize the chat using the useEffect hook.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/chat/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// App.tsx\nimport { useEffect } from 'react';\nimport '@n8n/chat/style.css';\nimport { createChat } from '@n8n/chat';\n\nexport const App = () => {\n\tuseEffect(() => {\n\t\tcreateChat({\n\t\t\twebhookUrl: 'YOUR_PRODUCTION_WEBHOOK_URL'\n\t\t});\n\t}, []);\n\n\treturn (<div></div>);\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook Development Server\nDESCRIPTION: Command to compile and run Storybook in development mode with hot-reloading enabled.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/design-system/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm storybook\n```\n\n----------------------------------------\n\nTITLE: Document Processing and Resource Management in Vector Store Operations\nDESCRIPTION: Code examples showing document processing and proper resource management with try-finally blocks to ensure connections are released even when errors occur. This is crucial for database-backed vector stores to prevent resource leaks.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/nodes-langchain/nodes/vector_store/shared/createVectorStoreNode/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { processedDocuments, serializedDocuments } = await processDocument(\n  documentInput,\n  itemData,\n  itemIndex\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  // Operation logic\n} finally {\n  // Release resources even if an error occurs\n  args.releaseVectorStoreClient?.(vectorStore);\n}\n```\n\n----------------------------------------\n\nTITLE: n8n Chat Default Configuration Options\nDESCRIPTION: Complete example of all available configuration options for n8n Chat with their default values. This includes webhook settings, UI modes, i18n options, and session management parameters.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/chat/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreateChat({\n\twebhookUrl: '',\n\twebhookConfig: {\n\t\tmethod: 'POST',\n\t\theaders: {}\n\t},\n\ttarget: '#n8n-chat',\n\tmode: 'window',\n\tchatInputKey: 'chatInput',\n\tchatSessionKey: 'sessionId',\n\tloadPreviousSession: true,\n\tmetadata: {},\n\tshowWelcomeScreen: false,\n\tdefaultLanguage: 'en',\n\tinitialMessages: [\n\t\t'Hi there! 👋',\n\t\t'My name is Nathan. How can I assist you today?'\n\t],\n\ti18n: {\n\t\ten: {\n\t\t\ttitle: 'Hi there! 👋',\n\t\t\tsubtitle: \"Start a chat. We're here to help you 24/7.\",\n\t\t\tfooter: '',\n\t\t\tgetStarted: 'New Conversation',\n\t\t\tinputPlaceholder: 'Type your question..',\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Asynchronous Credential Method in Custom n8n Nodes\nDESCRIPTION: Example of updating getCredentials method calls in custom n8n nodes to use async/await syntax as required from version 0.135.0. The method now returns a Promise that must be awaited.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Before 0.135.0:\nconst credentials = this.getCredentials(credentialTypeName);\n\n// From 0.135.0:\nconst credentials = await this.getCredentials(myNodeCredentials);\n```\n\n----------------------------------------\n\nTITLE: Building n8n Docker Image\nDESCRIPTION: This command shows how to build a custom n8n Docker image for multiple platforms, specifying a particular version of n8n to use.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --platform linux/amd64,linux/arm64 --build-arg N8N_VERSION=<VERSION> -t n8n:<VERSION> .\n\n# For example:\ndocker buildx build --platform linux/amd64,linux/arm64 --build-arg N8N_VERSION=1.30.1 -t n8n:1.30.1 .\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Schema to Zod Schema in TypeScript\nDESCRIPTION: This example demonstrates how to use the jsonSchemaToZod function to convert a simple JSON schema object into a Zod schema. It imports the function, defines a JSON schema, and then converts it to a Zod schema.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/json-schema-to-zod/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { jsonSchemaToZod } from \"json-schema-to-zod\";\n\nconst jsonSchema = {\n  type: \"object\",\n  properties: {\n    hello: {\n      type: \"string\",\n    },\n  },\n};\n\nconst zodSchema = jsonSchemaToZod(myObject);\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Hot-Reloading\nDESCRIPTION: Command to start a development server with hot-reloading for working on the n8n-editor-ui.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm serve\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation in Translation Strings\nDESCRIPTION: Shows how to implement variable interpolation in translation strings using curly braces syntax.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/ADDENDUM.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"stopExecution.message\": \"The execution with the ID {activeExecutionId} got stopped!\",\n\t\"stopExecution.title\": \"Execution stopped\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for @n8n/di\nDESCRIPTION: Required TypeScript compiler options that must be enabled in tsconfig.json to use the @n8n/di library. The experimental decorators and decorator metadata emission must be turned on.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/di/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting n8n via JavaScript Path - Legacy Method\nDESCRIPTION: The legacy method of starting n8n directly via its JavaScript file path. This approach is no longer recommended due to security vulnerabilities in the CLI library.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/usr/local/bin/node ./dist/index.js start\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Store Node Implementation Example\nDESCRIPTION: Example showing how to use the createVectorStoreNode factory function to implement a custom vector store node. The example demonstrates configuring metadata, fields for different operations, and implementing required callback functions.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/nodes-langchain/nodes/vector_store/shared/createVectorStoreNode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createVectorStoreNode } from './createVectorStoreNode';\n\nexport class MyVectorStoreNode {\n  static description = createVectorStoreNode({\n    meta: {\n      displayName: 'My Vector Store',\n      name: 'myVectorStore',\n      description: 'Operations for My Vector Store',\n      docsUrl: 'https://docs.example.com/my-vector-store',\n      icon: 'file:myIcon.svg',\n      // Optional: specify which operations this vector store supports\n      operationModes: ['load', 'insert', 'update','retrieve', 'retrieve-as-tool'],\n    },\n    sharedFields: [\n      // Fields shown in all operation modes\n    ],\n    loadFields: [\n      // Fields specific to 'load' operation\n    ],\n    insertFields: [\n      // Fields specific to 'insert' operation\n    ],\n    retrieveFields: [\n      // Fields specific to 'retrieve' operation\n    ],\n    // Functions to implement\n    getVectorStoreClient: async (context, filter, embeddings, itemIndex) => {\n      // Create and return vector store instance\n    },\n    populateVectorStore: async (context, embeddings, documents, itemIndex) => {\n      // Insert documents into vector store\n    },\n    // Optional: cleanup function - called in finally blocks after operations\n    releaseVectorStoreClient: (vectorStore) => {\n      // Release resources such as database connections or external clients\n      // For example, in PGVector: vectorStore.client?.release();\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Locale in n8n\nDESCRIPTION: Example of how to set the N8N_DEFAULT_LOCALE environment variable to run n8n in a different language (German in this case) and the expected console output.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_DEFAULT_LOCALE=de\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Pluralization in n8n i18n\nDESCRIPTION: Demonstrates how to handle singular and plural text versions using the pipe character separator for translation strings.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/ADDENDUM.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"tagsView.inUse\": \"{count} workflow | {count} workflows\"\n}\n```\n\n----------------------------------------\n\nTITLE: NodeConstructorArgs Interface Definition for Vector Store Nodes\nDESCRIPTION: The TypeScript interface defining the configuration and callbacks that specific vector store implementations must provide, including metadata, field configurations for different operation modes, and core implementation functions.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/nodes-langchain/nodes/vector_store/shared/createVectorStoreNode/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VectorStoreNodeConstructorArgs<T extends VectorStore> {\n  meta: NodeMeta;                    // Node metadata (name, description, etc.)\n  methods?: { ... };                 // Optional methods for list searches\n  sharedFields: INodeProperties[];   // Fields shown in all modes\n  insertFields?: INodeProperties[];  // Fields specific to insert mode\n  loadFields?: INodeProperties[];    // Fields specific to load mode\n  retrieveFields?: INodeProperties[]; // Fields specific to retrieve mode\n  updateFields?: INodeProperties[];  // Fields specific to update mode\n  \n  // Core implementation functions\n  populateVectorStore: Function;     // Store documents in vector store (accepts batches in v1.1+)\n  getVectorStoreClient: Function;    // Get vector store instance\n  releaseVectorStoreClient?: Function; // Clean up resources\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing n8n Chat in Vue.js\nDESCRIPTION: Vue.js component implementation of n8n Chat. This snippet shows how to initialize the chat in the onMounted lifecycle hook.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/chat/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\" setup>\n// App.vue\nimport { onMounted } from 'vue';\nimport '@n8n/chat/style.css';\nimport { createChat } from '@n8n/chat';\n\nonMounted(() => {\n\tcreateChat({\n\t\twebhookUrl: 'YOUR_PRODUCTION_WEBHOOK_URL'\n\t});\n});\n</script>\n<template>\n\t<div></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running Flaky E2E Tests Debug Command in Bash\nDESCRIPTION: This command is used to debug flaky end-to-end tests. It allows filtering tests and specifying the number of test runs. The command uses pnpm and accepts optional grep filter and burn count parameters.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/cypress/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run debug:flaky:e2e -- <grep_filter> <burn_count>\n```\n\n----------------------------------------\n\nTITLE: Translating collection Parameters in n8n Nodes\nDESCRIPTION: Example of a collection parameter that allows multiple values (labels for issues), along with the corresponding JSON translation object that includes displayName, multipleValueButtonText, and options fields.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tdisplayName: 'Labels',\n\tname: 'labels', // key to use in translation\n\ttype: 'collection',\n\ttypeOptions: {\n\t\tmultipleValues: true,\n\t\tmultipleValueButtonText: 'Add Label',\n\t},\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\toperation: [\n\t\t\t\t'create',\n\t\t\t],\n\t\t\tresource: [\n\t\t\t\t'issue',\n\t\t\t],\n\t\t},\n\t},\n\tdefault: { 'label': '' },\n\toptions: [\n\t\t{\n\t\t\tdisplayName: 'Label',\n\t\t\tname: 'label', // key to use in translation\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tdescription: 'Label to add to issue',\n\t\t},\n\t],\n},\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeView.labels.displayName\": \"🇩🇪 Labels\",\n\t\"nodeView.labels.multipleValueButtonText\": \"🇩🇪 Add Label\",\n\t\"nodeView.labels.options.label.displayName\": \"🇩🇪 Label\",\n\t\"nodeView.labels.options.label.description\": \"🇩🇪 Label to add to issue\",\n\t\"nodeView.labels.options.label.placeholder\": \"🇩🇪 Some placeholder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom n8n Docker Image\nDESCRIPTION: Command to build a custom Docker image named 'n8n-custom' using the local n8n source code. Must be executed from the n8n root directory using a specific Dockerfile located in the docker/images/n8n-custom directory.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/docker/images/n8n-custom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t n8n-custom -f docker/images/n8n-custom/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: String Parameter Translation Example\nDESCRIPTION: JSON example showing how to translate a node's string parameter with display name, placeholder, and description.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeView.owner.displayName\": \"🇩🇪 Repository Owner\",\n\t\"nodeView.owner.placeholder\": \"🇩🇪 n8n-io\",\n\t\"nodeView.owner.description\": \"🇩🇪 Owner of the repository\"\n}\n```\n\n----------------------------------------\n\nTITLE: String Parameter Definition Example\nDESCRIPTION: TypeScript code showing a string parameter definition with properties that can be translated.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Repository Owner',\n\tname: 'owner', // key to use in translation\n\ttype: 'string',\n\trequired: true,\n\tplaceholder: 'n8n-io',\n\tdescription: 'Owner of the repository.',\n},\n```\n\n----------------------------------------\n\nTITLE: Node Header Translation Example\nDESCRIPTION: JSON example showing how to translate a node's display name and description in the header section.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"header\": {\n\t\t\"displayName\": \"🇩🇪 GitHub\",\n\t\t\"description\": \"🇩🇪 Consume GitHub API\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to compile and minify the n8n-editor-ui project for production deployment.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Building Dynamic Text Translations in n8n\nDESCRIPTION: Terminal commands to build and test dynamic text translations for specific nodes in n8n. This shows how to generate translation files, watch for changes, and test translations in the browser.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nexport N8N_DEFAULT_LOCALE=de\npnpm start\n```\n\nLANGUAGE: sh\nCODE:\n```\nexport N8N_DEFAULT_LOCALE=de\ncd packages/nodes-base\npnpm n8n-generate-translations\npnpm watch\n```\n\n----------------------------------------\n\nTITLE: Implementing n8n Expression Language Support in CodeMirror\nDESCRIPTION: This code shows how to create a language support extension for CodeMirror that enables n8n expression language parsing. It configures a mixed parser that combines the n8n parser with JavaScript parser capabilities, specifically for 'Resolvable' nodes, and exports a function to create a LanguageSupport instance.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/src/expressions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parserWithMetaData as n8nParser } from '@n8n/codemirror-lang';\nimport { LanguageSupport, LRLanguage } from '@codemirror/language';\nimport { parseMixed } from '@lezer/common';\nimport { parser as jsParser } from '@lezer/javascript';\n\nconst n8nPlusJsParser = n8nParser.configure({\n\twrap: parseMixed((node) => {\n\t\tif (node.type.isTop) return null;\n\n\t\treturn node.name === 'Resolvable'\n\t\t\t? { parser: jsParser, overlay: (node) => node.type.name === 'Resolvable' }\n\t\t\t: null;\n\t}),\n});\n\nconst n8nLanguage = LRLanguage.define({ parser: n8nPlusJsParser });\n\nexport function n8nExpressionLanguageSupport() {\n\treturn new LanguageSupport(n8nLanguage);\n}\n```\n\n----------------------------------------\n\nTITLE: Translating fixedCollection Parameters in n8n Nodes\nDESCRIPTION: Example of a fixedCollection parameter for additional parameters with nested values for author information, along with the corresponding JSON translation object showing the hierarchical structure.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tdisplayName: 'Additional Parameters',\n\tname: 'additionalParameters',\n\tplaceholder: 'Add Parameter',\n\tdescription: 'Additional fields to add.',\n\ttype: 'fixedCollection',\n\tdefault: {},\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\toperation: [\n\t\t\t\t'create',\n\t\t\t\t'delete',\n\t\t\t\t'edit',\n\t\t\t],\n\t\t\tresource: [\n\t\t\t\t'file',\n\t\t\t],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tname: 'author',\n\t\t\tdisplayName: 'Author',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\tname: 'name',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'Name of the author of the commit',\n\t\t\t\t\tplaceholder: 'John',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Email',\n\t\t\t\t\tname: 'email',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'Email of the author of the commit',\n\t\t\t\t\tplaceholder: 'john@email.com',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeView.additionalParameters.displayName\": \"🇩🇪 Additional Parameters\",\n\t\"nodeView.additionalParameters.placeholder\": \"🇩🇪 Add Field\",\n\t\"nodeView.additionalParameters.options.author.displayName\": \"🇩🇪 Author\",\n\t\"nodeView.additionalParameters.options.author.values.name.displayName\": \"🇩🇪 Name\",\n\t\"nodeView.additionalParameters.options.author.values.name.description\": \"🇩🇪 Name of the author of the commit\",\n\t\"nodeView.additionalParameters.options.author.values.name.placeholder\": \"🇩🇪 Jan\",\n\t\"nodeView.additionalParameters.options.author.values.email.displayName\": \"🇩🇪 Email\",\n\t\"nodeView.additionalParameters.options.author.values.email.description\": \"🇩🇪 Email of the author of the commit\",\n\t\"nodeView.additionalParameters.options.author.values.email.placeholder\": \"🇩🇪 jan@n8n.io\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Base Text Translation JSON\nDESCRIPTION: Example of a base text translation file showing German translations for node category names.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeCreator.categoryNames.analytics\": \"🇩🇪 Analytics\",\n\t\"nodeCreator.categoryNames.communication\": \"🇩🇪 Communication\",\n\t\"nodeCreator.categoryNames.coreNodes\": \"🇩🇪 Core Nodes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing n8n-nodes-base Package Globally via npm\nDESCRIPTION: Command to install the n8n-nodes-base package globally using npm. This package contains all the default nodes included in the n8n workflow automation platform.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install n8n-nodes-base -g\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Dynamic Text\nDESCRIPTION: Shows how to implement reusable dynamic text for OAuth credentials using the _reusableDynamicText special key.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/ADDENDUM.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_reusableDynamicText.oauth2.clientId\": \"🇩🇪 Client ID\",\n\t\"_reusableDynamicText.oauth2.clientSecret\": \"🇩🇪 Client Secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Text Filter in Bash\nDESCRIPTION: This example shows how to run all tests containing the word 'login' five times using the debug command. It specifies only the grep filter, using the default burn count.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/cypress/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run debug:flaky:e2e login\n```\n\n----------------------------------------\n\nTITLE: Credential Translation File Example\nDESCRIPTION: JSON example of a credential translation file for German locale, showing translations for display names, descriptions, and placeholders.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"server.displayName\": \"🇩🇪 Github Server\",\n\t\"server.description\": \"🇩🇪 The server to connect to. Only has to be set if Github Enterprise is used.\",\n\t\"user.placeholder\": \"🇩🇪 Hans\",\n\t\"accessToken.placeholder\": \"🇩🇪 123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Operation Handler Function Signatures for Vector Store Operations\nDESCRIPTION: Example type signatures for vector store operation handlers, showing the structure of functions that process load and insert operations. Each handler receives context, configuration arguments, embeddings, and returns execution data.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/nodes-langchain/nodes/vector_store/shared/createVectorStoreNode/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: loadOperation.ts\nexport async function handleLoadOperation<T extends VectorStore>(\n  context: IExecuteFunctions,\n  args: VectorStoreNodeConstructorArgs<T>,\n  embeddings: Embeddings,\n  itemIndex: number\n): Promise<INodeExecutionData[]>\n\n// Example: insertOperation.ts (v1.1+)\nexport async function handleInsertOperation<T extends VectorStore>(\n  context: IExecuteFunctions,\n  args: VectorStoreNodeConstructorArgs<T>,\n  embeddings: Embeddings\n): Promise<INodeExecutionData[]>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tool Creation for Vector Store Retrieval as Tool\nDESCRIPTION: Example showing how a DynamicTool is created to expose vector store functionality as a tool for AI agents. This allows LLMs to use the vector store for retrieving information during reasoning.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/nodes-langchain/nodes/vector_store/shared/createVectorStoreNode/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst vectorStoreTool = new DynamicTool({\n  name: toolName,\n  description: toolDescription,\n  func: async (input) => {\n    // Search vector store with input\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Translation with Preserved Variable Interpolation\nDESCRIPTION: Example of translating text while maintaining the original interpolation variable unchanged.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/ADDENDUM.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"stopExecution.message\": \"Die Ausführung mit der ID {activeExecutionId} wurde gestoppt\",\n\t\"stopExecution.title\": \"Execution stopped\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Base Text\nDESCRIPTION: Demonstrates how to define and reference reusable text strings using the _reusableBaseText special key.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/ADDENDUM.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_reusableBaseText.save\": \"🇩🇪 Save\",\n\t\"duplicateWorkflowDialog.enterWorkflowName\": \"🇩🇪 Enter workflow name\",\n\t\"duplicateWorkflowDialog.save\": \"@:_reusableBaseText.save\",\n\t\"saveButton.save\": \"@:_reusableBaseText.save\",\n\t\"saveButton.saving\": \"🇩🇪 Saving\",\n\t\"saveButton.saved\": \"🇩🇪 Saved\"\n}\n```\n\n----------------------------------------\n\nTITLE: Translating options Parameters in n8n Nodes\nDESCRIPTION: Example of an options parameter in a node definition with resource selection, along with the corresponding JSON translation object. This defines how dropdown selection options appear in the UI.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tdisplayName: 'Resource',\n\tname: 'resource',\n\ttype: 'options',\n\toptions: [\n\t\t{\n\t\t\tname: 'File',\n\t\t\tvalue: 'file', // key to use in translation\n\t\t},\n\t\t{\n\t\t\tname: 'Issue',\n\t\t\tvalue: 'issue', // key to use in translation\n\t\t},\n\t],\n\tdefault: 'issue',\n\tdescription: 'Resource to operate on',\n},\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeView.resource.displayName\": \"🇩🇪 Resource\",\n\t\"nodeView.resource.description\": \"🇩🇪 Resource to operate on\",\n\t\"nodeView.resource.options.file.name\": \"🇩🇪 File\",\n\t\"nodeView.resource.options.issue.name\": \"🇩🇪 Issue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Node Resource Parameter Translation\nDESCRIPTION: JSON example showing how to translate a node's resource parameter display name.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeView.resource.displayName\": \"🇩🇪 Resource\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linting and Fixing Code\nDESCRIPTION: Command to run the linter and automatically fix code style issues in the project.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Webhook Node Event Trigger Translation\nDESCRIPTION: Example of translating dynamic node properties for the Webhook node's event trigger description.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/ADDENDUM.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeView.eventTriggerDescription\": \"🇩🇪 Waiting for you to call the Test URL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing n8n Chat with CSS Variables\nDESCRIPTION: CSS variables for customizing the appearance of the n8n Chat widget. This includes colors, spacing, borders, font sizes, and other styling parameters for different parts of the chat interface.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/chat/README.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n:root {\n\t--chat--color-primary: #e74266;\n\t--chat--color-primary-shade-50: #db4061;\n\t--chat--color-primary-shade-100: #cf3c5c;\n\t--chat--color-secondary: #20b69e;\n\t--chat--color-secondary-shade-50: #1ca08a;\n\t--chat--color-white: #ffffff;\n\t--chat--color-light: #f2f4f8;\n\t--chat--color-light-shade-50: #e6e9f1;\n\t--chat--color-light-shade-100: #c2c5cc;\n\t--chat--color-medium: #d2d4d9;\n\t--chat--color-dark: #101330;\n\t--chat--color-disabled: #777980;\n\t--chat--color-typing: #404040;\n\n\t--chat--spacing: 1rem;\n\t--chat--border-radius: 0.25rem;\n\t--chat--transition-duration: 0.15s;\n\n\t--chat--window--width: 400px;\n\t--chat--window--height: 600px;\n\n\t--chat--header-height: auto;\n\t--chat--header--padding: var(--chat--spacing);\n\t--chat--header--background: var(--chat--color-dark);\n\t--chat--header--color: var(--chat--color-light);\n\t--chat--header--border-top: none;\n\t--chat--header--border-bottom: none;\n\t--chat--header--border-bottom: none;\n\t--chat--header--border-bottom: none;\n\t--chat--heading--font-size: 2em;\n\t--chat--header--color: var(--chat--color-light);\n\t--chat--subtitle--font-size: inherit;\n\t--chat--subtitle--line-height: 1.8;\n\n\t--chat--textarea--height: 50px;\n\n\t--chat--message--font-size: 1rem;\n\t--chat--message--padding: var(--chat--spacing);\n\t--chat--message--border-radius: var(--chat--border-radius);\n\t--chat--message-line-height: 1.8;\n\t--chat--message--bot--background: var(--chat--color-white);\n\t--chat--message--bot--color: var(--chat--color-dark);\n\t--chat--message--bot--border: none;\n\t--chat--message--user--background: var(--chat--color-secondary);\n\t--chat--message--user--color: var(--chat--color-white);\n\t--chat--message--user--border: none;\n\t--chat--message--pre--background: rgba(0, 0, 0, 0.05);\n\n\t--chat--toggle--background: var(--chat--color-primary);\n\t--chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n\t--chat--toggle--active--background: var(--chat--color-primary-shade-100);\n\t--chat--toggle--color: var(--chat--color-white);\n\t--chat--toggle--size: 64px;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests for the n8n-editor-ui project.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:unit\n```\n\n----------------------------------------\n\nTITLE: Translating Custom API Call Options in n8n Nodes\nDESCRIPTION: JSON translation examples for nodes that can be used in HTTP Request nodes, showing how to translate the injected 'Custom API Call' option using the special __CUSTOM_API_CALL__ key.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeView.resource.options.file.name\": \"🇩🇪 File\",\n\t\"nodeView.resource.options.issue.name\": \"🇩🇪 Issue\",\n\t\"nodeView.resource.options.__CUSTOM_API_CALL__.name\": \"🇩🇪 Custom API Call\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to run the test suite for the n8n-editor-ui project.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Building Base Text Translations in n8n\nDESCRIPTION: Terminal commands to build and test base text translations in n8n. This example demonstrates how to set the locale to German and run the development environment to view translated UI elements.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nexport N8N_DEFAULT_LOCALE=de\npnpm start\n```\n\nLANGUAGE: sh\nCODE:\n```\nexport N8N_DEFAULT_LOCALE=de\ncd packages/frontend/editor-ui\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: GitHub Node Properties Definition\nDESCRIPTION: TypeScript code showing the node properties that can be translated in the nodeView section.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Github implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'GitHub',\n\t\tname: 'github',\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Resource',\n\t\t\t\tname: 'resource', // key to use in translation\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [],\n\t\t\t\tdefault: 'issue',\n\t\t\t\tdescription: 'The resource to operate on.',\n\t\t\t},\n```\n\n----------------------------------------\n\nTITLE: Cron Node Activation Message Translation\nDESCRIPTION: Example of translating dynamic node properties for the Cron node's activation message.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/ADDENDUM.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodeView.activationMessage\": \"🇩🇪 'Your cron trigger will now trigger executions on the schedule you have defined.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linting and Fixing Code\nDESCRIPTION: Command to run linting checks and automatically fix issues where possible.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/design-system/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the project's unit tests.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/design-system/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:unit\n```\n\n----------------------------------------\n\nTITLE: GitHub Node Type Definition\nDESCRIPTION: TypeScript code showing the GitHub node type definition with elements that can be translated in the header section.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Github implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'GitHub', // key to use in translation\n\t\tdescription: 'Consume GitHub API', // key to use in translation\n\t\tname: 'github',\n\t\ticon: 'file:github.svg',\n\t\tgroup: ['input'],\n\t\tversion: 1,\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests for the n8n-editor-ui project.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Creating a New Base Text Translation File\nDESCRIPTION: Command to copy the English base text file to create a new translation file for German locale.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp ./packages/frontend/editor-ui/src/plugins/i18n/locales/en.json ./packages/frontend/editor-ui/src/plugins/i18n/locales/de.json\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Debian/Ubuntu\nDESCRIPTION: Command to install required build tools and Python on Debian/Ubuntu systems\nSOURCE: https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install -y build-essential python\n```\n\n----------------------------------------\n\nTITLE: GitHub API Credential Type Definition\nDESCRIPTION: TypeScript code showing the GitHub API credential type definition with properties that can be translated.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class GithubApi implements ICredentialType {\n\tname = 'githubApi'; // to use for credential translation file\n\tdisplayName = 'Github API';\n\tdocumentationUrl = 'github';\n\tproperties: INodeProperties[] = [\n```\n\n----------------------------------------\n\nTITLE: GitHub API Credential Properties\nDESCRIPTION: TypeScript code showing the properties of the GitHub API credential that can be translated, including display names and descriptions.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class GithubApi implements ICredentialType {\n\tname = 'githubApi';\n\tdisplayName = 'Github API';\n\tdocumentationUrl = 'github';\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'Github Server',\n\t\t\tname: 'server', // key to use in translation\n\t\t\ttype: 'string',\n\t\t\tdefault: 'https://api.github.com',\n\t\t\tdescription: 'The server to connect to. Only has to be set if Github Enterprise is used.',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'User',\n\t\t\tname: 'user', // key to use in translation\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Access Token',\n\t\t\tname: 'accessToken', // key to use in translation\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Scenarios Docker Command\nDESCRIPTION: Command to run custom benchmark scenarios by mounting a local scenarios directory into the Docker container.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/benchmark/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v ./scenarios:/scenarios ghcr.io/n8n-io/n8n-benchmark:latest run \\\n\t--n8nBaseUrl=https://instance.url \\\n\t--n8nUserEmail=InstanceOwner@email.com \\\n\t--n8nUserPassword=InstanceOwnerPassword \\\n\t--vus=5 \\\n\t--duration=1m \\\n\t--testScenariosPath=/scenarios\n```\n\n----------------------------------------\n\nTITLE: Installing n8n-workflow Package via npm\nDESCRIPTION: Command to install the n8n-workflow package from npm registry. This package provides the workflow base code for n8n automation platform.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/workflow/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install n8n-workflow\n```\n\n----------------------------------------\n\nTITLE: Installing n8n-core via npm\nDESCRIPTION: Command to install the n8n-core package using npm package manager. This package contains the core components required for n8n workflow automation platform.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install n8n-core\n```\n\n----------------------------------------\n\nTITLE: Installing n8n Chat via npm Package\nDESCRIPTION: Command to install the n8n Chat package as a production dependency using npm.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/chat/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @n8n/chat\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Schema to Zod Converter via npm\nDESCRIPTION: This command installs the @n8n/json-schema-to-zod package using npm. This package is required to use the JSON schema to Zod conversion functionality.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/json-schema-to-zod/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @n8n/json-schema-to-zod\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on CentOS\nDESCRIPTION: Command to install required gcc compilers and make tools on CentOS systems\nSOURCE: https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum install gcc gcc-c++ make\n```\n\n----------------------------------------\n\nTITLE: CSS for Fullscreen Mode in n8n Chat\nDESCRIPTION: CSS rules needed for proper implementation of fullscreen mode in n8n Chat. This ensures the chat widget takes up the entire width and height of its container.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/chat/README.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nhtml,\nbody,\n#n8n-chat {\n\twidth: 100%;\n\theight: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Local Benchmark Command\nDESCRIPTION: Simple command to run benchmarks locally using pnpm.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/benchmark/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm benchmark-locally\n```\n\n----------------------------------------\n\nTITLE: Watching Theme Files for Changes\nDESCRIPTION: Command to monitor theme files and automatically rebuild when changes are detected.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/design-system/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm watch:theme\n```\n\n----------------------------------------\n\nTITLE: Building Theme CSS Files\nDESCRIPTION: Command to compile the theme's source files into CSS for use in the design system.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/design-system/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:theme\n```\n\n----------------------------------------\n\nTITLE: Building Static Storybook Pages\nDESCRIPTION: Command to build the Storybook as static web pages for deployment.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/@n8n/design-system/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:storybook\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Windows\nDESCRIPTION: Command to install Windows build tools globally via npm\nSOURCE: https://github.com/n8n-io/n8n/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm add -g windows-build-tools\n```\n\n----------------------------------------\n\nTITLE: Implementing File Constructor and Static Methods in JavaScript\nDESCRIPTION: This code snippet defines a File class that maintains a collection of file references. It includes the constructor and static methods for finding and indexing files in the collection based on different search criteria.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/cypress/fixtures/Dummy_javascript.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar File = function(url, object){\n\tFile.list = Array.isArray(File.list)? File.list : [];\n\tFile.progress = File.progress || 0;\n\tthis.progress = 0;\n\tthis.object = object;\n\tthis.url = url;\n};\n\nFile.indexOf = function(term){\n\tfor(var index in File.list){\n\t\tvar file = File.list[index];\n\t\tif (file.equals(term) || file.url === term || file.object === term) {\n\t\t\treturn index;\n\t\t}\n\t}\n\treturn -1;\n};\n\nFile.find = function(term){\n\tvar index = File.indexOf(term);\n\treturn ~index && File.list[index];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Employee Database Tables in SQL\nDESCRIPTION: This SQL script creates an 'emp' table with employee details and a 'dept' table with department information, then populates both tables with sample data. The script establishes a relational database structure commonly used in database tutorials and examples.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/cypress/fixtures/Dummy_sql.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE emp (\nempno INT PRIMARY KEY,\nename VARCHAR(10),\njob VARCHAR(9),\nmgr INT NULL,\nhiredate DATETIME,\nsal NUMERIC(7,2),\ncomm NUMERIC(7,2) NULL,\ndept INT)\nbegin\ninsert into emp values\n    (1,'JOHNSON','ADMIN',6,'12-17-1990',18000,NULL,4)\ninsert into emp values\n    (2,'HARDING','MANAGER',9,'02-02-1998',52000,300,3)\ninsert into emp values\n    (3,'TAFT','SALES I',2,'01-02-1996',25000,500,3)\ninsert into emp values\n    (4,'HOOVER','SALES I',2,'04-02-1990',27000,NULL,3)\ninsert into emp values\n    (5,'LINCOLN','TECH',6,'06-23-1994',22500,1400,4)\ninsert into emp values\n    (6,'GARFIELD','MANAGER',9,'05-01-1993',54000,NULL,4)\ninsert into emp values\n    (7,'POLK','TECH',6,'09-22-1997',25000,NULL,4)\ninsert into emp values\n    (8,'GRANT','ENGINEER',10,'03-30-1997',32000,NULL,2)\ninsert into emp values\n    (9,'JACKSON','CEO',NULL,'01-01-1990',75000,NULL,4)\ninsert into emp values\n    (10,'FILLMORE','MANAGER',9,'08-09-1994',56000,NULL,2)\ninsert into emp values\n    (11,'ADAMS','ENGINEER',10,'03-15-1996',34000,NULL,2)\ninsert into emp values\n    (12,'WASHINGTON','ADMIN',6,'04-16-1998',18000,NULL,4)\ninsert into emp values\n    (13,'MONROE','ENGINEER',10,'12-03-2000',30000,NULL,2)\ninsert into emp values\n    (14,'ROOSEVELT','CPA',9,'10-12-1995',35000,NULL,1)\nend\nCREATE TABLE dept (\ndeptno INT NOT NULL,\ndname VARCHAR(14),\nloc VARCHAR(13))\nbegin\ninsert into dept values (1,'ACCOUNTING','ST LOUIS')\ninsert into dept values (2,'RESEARCH','NEW YORK')\ninsert into dept values (3,'SALES','ATLANTA')\ninsert into dept values (4, 'OPERATIONS','SEATTLE')\nend\n```\n\n----------------------------------------\n\nTITLE: Local Benchmark Execution Command\nDESCRIPTION: Commands to build and run the benchmark tool locally without Docker, using environment variables for configuration.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/benchmark/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n\n# Run tests against http://localhost:5678 with specified email and password\nN8N_USER_EMAIL=user@n8n.io N8N_USER_PASSWORD=password ./bin/n8n-benchmark run\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command for n8n Benchmark\nDESCRIPTION: Command to build the Docker image for n8n benchmark tool, specifically for linux/amd64 platform.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/benchmark/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker build --platform linux/amd64 -t n8n-benchmark -f packages/@n8n/benchmark/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Docker Run Configuration\nDESCRIPTION: Command to run the n8n benchmark Docker image with environment variables for user credentials and base URL.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/benchmark/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n  -e N8N_USER_EMAIL=user@n8n.io \\\n  -e N8N_USER_PASSWORD=password \\\n  # For macos, n8n running outside docker\n  -e N8N_BASE_URL=http://host.docker.internal:5678 \\\n  n8n-benchmark\n```\n\n----------------------------------------\n\nTITLE: Docker Pull and Run Commands for n8n Benchmark\nDESCRIPTION: Commands to pull and run the n8n benchmark docker image with various configuration options including base URL, user credentials, and concurrent request settings.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/benchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull ghcr.io/n8n-io/n8n-benchmark:latest\n# Print the help to list all available flags\ndocker run ghcr.io/n8n-io/n8n-benchmark:latest run --help\n# Run all available benchmark scenarios for 1 minute with 5 concurrent requests\ndocker run ghcr.io/n8n-io/n8n-benchmark:latest run \\\n\t--n8nBaseUrl=https://instance.url \\\n\t--n8nUserEmail=InstanceOwner@email.com \\\n\t--n8nUserPassword=InstanceOwnerPassword \\\n\t--vus=5 \\\n\t--duration=1m \\\n\t--scenarioFilter=single-webhook\n```\n\n----------------------------------------\n\nTITLE: Cloud Benchmark Command\nDESCRIPTION: Simple command to run benchmarks in the cloud using pnpm.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/benchmark/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm benchmark-in-cloud\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview in Text Format\nDESCRIPTION: Shows the main directory structure of the n8n benchmark tool, including locations of scenarios, source code, Dockerfile, and scripts.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npackages/@n8n/benchmark\n├── scenarios        Benchmark scenarios\n├── src              Source code for the n8n-benchmark cli\n├── Dockerfile       Dockerfile for the n8n-benchmark cli\n├── scripts          Orchestration scripts\n```\n\n----------------------------------------\n\nTITLE: Scraping Stripe Webhook Events using JavaScript\nDESCRIPTION: This JavaScript code snippet scrapes Stripe webhook event types from the Stripe documentation webpage. It selects all list items containing event types, extracts the event name and description, formats the name, and creates an array of objects with this information. The result is then copied to the clipboard.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/nodes-base/nodes/Stripe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntypes = [];\n$$('ul#event-types li').forEach((el) => {\n\tconst value = el.querySelector('.method-list-item-label-name').innerText;\n\n\ttypes.push({\n\t\tname: value\n\t\t\t.replace(/(\\.|_)/, ' ')\n\t\t\t.split(' ')\n\t\t\t.map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n\t\t\t.join(' '),\n\t\tvalue,\n\t\tdescription: el.querySelector('.method-list-item-description').innerText,\n\t});\n});\ncopy(types);\n```\n\n----------------------------------------\n\nTITLE: Implementing File Instance Methods in JavaScript\nDESCRIPTION: This code snippet defines instance methods for the File class to support equality comparison and saving to the collection. The save method handles duplicate detection and optional updating, maintaining the integrity of the file list.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/cypress/fixtures/Dummy_javascript.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFile.prototype.equals = function(file){\n\tvar isFileType = file instanceof File;\n\treturn isFileType && this.url === file.url && this.object === file.object;\n};\n\nFile.prototype.save = function(update){\n\tupdate = typeof update === 'undefined'? true : update;\n\tif(Array.isArray(File.list)){\n\t\tvar index = File.indexOf(this);\n\t\tif(~index && update) {\n\t\t\tFile.list[index] = this;\n\t\t\tconsole.warn('File `%s` has been loaded before and updated now for: %O.', this.url, this);\n\t\t}else File.list.push(this);\n\t\tconsole.log(File.list)\n\t}else{\n\t\tFile.list = [this];\n\t}\n\treturn this;\n};\n```\n\n----------------------------------------\n\nTITLE: Running All E2E Tests with Default Parameters in Bash\nDESCRIPTION: This example demonstrates how to run all E2E tests five times using the debug command. It uses default values for both grep filter and burn count parameters.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/cypress/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run debug:flaky:e2e\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Tag Filter in Bash\nDESCRIPTION: This example demonstrates how to run all tests tagged with 'CAT-726' ten times using the debug command. It specifies both the grep filter and burn count parameters.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/cypress/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run debug:flaky:e2e CAT-726 10\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable-Plaintext-Resolvable Pattern in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression followed by plaintext then another resolvable expression, which should identify all three components correctly.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n{{ 1 + 1 }} text {{ 1 + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Resolvable Expression in n8n\nDESCRIPTION: Tests the parsing of a simple mathematical expression inside double braces, which should be identified as a resolvable expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{ 1 + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with New Emoji Range in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing an emoji from a newer Unicode range, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n{{ '🟢' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Double-Bracket-Wrapped Text in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing text wrapped in double brackets, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n{{ he [[ abc ]] llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Plaintext-Resolvable-Plaintext-Resolvable Pattern in n8n\nDESCRIPTION: Tests the parsing of alternating plaintext and resolvable expressions (four components), which should identify all components correctly.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ntext {{ 1 + 1 }} text {{ 1 + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Double Left Brace in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a double left brace, which should not affect the recognition of the overall expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n{{ he {{ llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Plaintext-Resolvable-Plaintext Pattern in n8n\nDESCRIPTION: Tests the parsing of plaintext followed by a resolvable expression then more plaintext, which should identify all three components correctly.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ntext {{ 1 + 1 }} text\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression Followed by Plaintext in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression followed by plaintext, which should identify both components correctly.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n{{ 1 + 1 }} Plaintext\n```\n\n----------------------------------------\n\nTITLE: Testing Plaintext Followed by Resolvable Expression in n8n\nDESCRIPTION: Tests the parsing of plaintext followed by a resolvable expression, which should identify both components correctly.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ntext {{ 1 + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Emoticon in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing an emoticon emoji, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n{{ '😎' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Non-ASCII Characters in n8n\nDESCRIPTION: Tests the parsing of a pattern with plaintext, a resolvable expression containing non-ASCII characters, and more plaintext, which should identify all components correctly.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_26\n\nLANGUAGE: text\nCODE:\n```\na {{ 'áßи' }} a\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Superscript Character in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a superscript character, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n{{ '⁷' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Single-Bracket-Wrapped Text in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing text wrapped in single brackets, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n{{ he [ abc ] llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with CJK Character in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a CJK (Chinese/Japanese/Korean) character, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n{{ '漢' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Cyrillic Character in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a Cyrillic character, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n{{ 'л' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Double-Brace-Wrapped Text in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing text wrapped in double braces with escaping, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n{{ he {{ abc \\}} llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Escaped Triple Right Brace in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing an escaped triple right brace, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n{{ he \\}}} llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Triple-Brace-Wrapped Text in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing text wrapped in triple braces with escaping, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n{{ he {{{ abc \\}}} llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable-Plaintext-Resolvable-Plaintext Pattern in n8n\nDESCRIPTION: Tests the parsing of alternating resolvable expressions and plaintext (four components), which should identify all components correctly.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n{{ 1 + 1 }} text {{ 1 + 1 }} text\n```\n\n----------------------------------------\n\nTITLE: Testing Whitespace-only Resolvable Expression in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing only whitespace, which should be identified as a resolvable expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{ }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Special Characters in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing various special characters, which should still be identified as a single resolvable expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n{{ he ()[]{<>~`!@#$%^&*-_+=|\\;:'\",./?\\{ llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Empty Resolvable Expression in n8n\nDESCRIPTION: Tests the parsing of an empty expression inside double braces, which should still be identified as a resolvable expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{}}\n```\n\n----------------------------------------\n\nTITLE: Testing Single-Brace-Wrapped Text in n8n\nDESCRIPTION: Tests the parsing of text wrapped in single braces, which should be identified as plaintext rather than a resolvable expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{text}\n```\n\n----------------------------------------\n\nTITLE: Testing Plaintext with Unbalanced Braces in n8n\nDESCRIPTION: Tests the parsing of plaintext containing one opening brace and two closing braces, which should be identified as plaintext rather than a resolvable expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n{ }}\n```\n\n----------------------------------------\n\nTITLE: Testing Plaintext Content in n8n\nDESCRIPTION: Tests the parsing of simple text content, which should be identified as plaintext.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ntext\n```\n\n----------------------------------------\n\nTITLE: Testing Plaintext with Single Opening Brace in n8n\nDESCRIPTION: Tests the parsing of plaintext containing only a single opening brace, which should be identified as plaintext rather than a resolvable expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n{\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Currency Symbol in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a currency symbol (Euro), which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n{{ '€' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Triple-Bracket-Wrapped Text in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing text wrapped in triple brackets, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n{{ he [[[ abc ]]] llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with General Punctuation Character in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a general punctuation character (dagger), which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n{{ '†' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with End-of-Range Emoji in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing an emoji from the end of a Unicode range, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n{{ '🫸' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Pictograph in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a pictograph emoji, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n{{ '🎉' }}\n```\n\n----------------------------------------\n\nTITLE: n8n Startup Output with Custom Locale\nDESCRIPTION: The console output displayed when starting n8n with a custom locale, showing version information and access instructions.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/frontend/editor-ui/src/plugins/i18n/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nInitializing n8n process\nn8n ready on 0.0.0.0, port 5678\nVersion: 0.156.0\nLocale: de\n\nEditor is now accessible via:\nhttp://localhost:5678/\n\nPress \"o\" to open in Browser.\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Escaped Double Right Brace in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing an escaped double right brace, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n{{ he \\}} llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Single Left Brace in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a single left brace, which should not affect the recognition of the overall expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n{{ he { llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Single Right Brace in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a single right brace, which should not affect the recognition of the overall expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n{{ he } llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Triple Left Brace in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing a triple left brace, which should not affect the recognition of the overall expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n{{ he {{{ llo }}\n```\n\n----------------------------------------\n\nTITLE: Testing Resolvable Expression with Single-Brace-Wrapped Text in n8n\nDESCRIPTION: Tests the parsing of a resolvable expression containing text wrapped in single braces, which should be correctly handled as part of the expression.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/codemirror-lang/test/expressions/cases.txt#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n{{ he { abc } llo }}\n```\n\n----------------------------------------\n\nTITLE: Architecture Structure for Vector Store Node Factory\nDESCRIPTION: The directory structure of the createVectorStoreNode implementation, showing the organization of source files including constants, types, utilities, and operation-specific logic.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/@n8n/nodes-langchain/nodes/vector_store/shared/createVectorStoreNode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/createVectorStoreNode/\t\t\t\t\t # Create Vector Store Node\n/constants.ts                    # Constants like operation modes and descriptions\n/types.ts                        # TypeScript interfaces and types\n/utils.ts                        # Utility functions for node configuration\n/createVectorStoreNode.ts        # Main factory function\n/processDocuments.ts             # Document processing helpers\n/operations/                     # Operation-specific logic\n  /loadOperation.ts              # Handles 'load' mode\n  /insertOperation.ts            # Handles 'insert' mode\n  /updateOperation.ts            # Handles 'update' mode\n  /retrieveOperation.ts          # Handles 'retrieve' mode\n  /retrieveAsToolOperation.ts    # Handles 'retrieve-as-tool' mode\n```\n\n----------------------------------------\n\nTITLE: Defining n8n Extension Insights Module in Markdown\nDESCRIPTION: Markdown heading that defines the module name for the n8n extension insights package.\nSOURCE: https://github.com/n8n-io/n8n/blob/master/packages/extensions/insights/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @n8n/n8n-extension-insights\n```"
  }
]