[
  {
    "owner": "mdx-js",
    "repo": "mdx",
    "content": "TITLE: Rendering MDX with Custom Components in React\nDESCRIPTION: This snippet shows how to render an MDX file with custom components for links in React, demonstrating the difference between markdown syntax, lowercase JSX, and capitalized JSX.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Example from './example.mdx'\n\nconsole.log(\n  <Example\n    components={{\n      a(props) {\n        return <a {...props} style={{borderTop: '1px dotted', color: 'violet'}} />\n      },\n      Link(props) {\n        return <a href={props.to} children={props.children} style={{borderTop: '1px dashed', color: 'tomato'}} />\n      }\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MDX Syntax with Component Import and Variable Export\nDESCRIPTION: This example shows the basic syntax of MDX files, including importing a Chart component, exporting a constant, and embedding the component within markdown content. It demonstrates how JSX components can be integrated with standard markdown text.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport {Chart} from './snowfall.js'\nexport const year = 2013\n\n# Last year's snowfall\n\nIn {year}, the snowfall was above average.\nIt was followed by a warm spring which caused\nflood conditions in many of the nearby rivers.\n\n<Chart year={year} color=\"#fcb32c\" />\n```\n\n----------------------------------------\n\nTITLE: Next.js MDX Integration\nDESCRIPTION: Complete example showing how to integrate MDX compilation and rendering in a Next.js page component. Includes both server-side compilation via getStaticProps and client-side rendering with React hooks.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/mdx-on-demand.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @import {MDXModule} from 'mdx/types.js'\n * @import {Dispatch, ReactElement, SetStateAction} from 'react'\n */\n\nimport {compile, run} from '@mdx-js/mdx'\nimport {Fragment, useEffect, useState} from 'react'\nimport * as runtime from 'react/jsx-runtime'\n\n/**\n * @param {{code: string}} props\n * @returns {ReactElement}\n */\nexport default function Page({code}) {\n  /** @type {[MDXModule | undefined, Dispatch<SetStateAction<MDXModule | undefined>>]} */\n  const [mdxModule, setMdxModule] = useState()\n  const Content = mdxModule ? mdxModule.default : Fragment\n\n  useEffect(\n    function () {\n      ;(async function () {\n        setMdxModule(await run(code, {...runtime, baseUrl: import.meta.url}))\n      })()\n    },\n    [code]\n  )\n\n  return <Content />\n}\n\nexport async function getStaticProps() {\n  const code = String(\n    await compile('# hi', {\n      outputFormat: 'function-body'\n      /* …otherOptions */\n    })\n  )\n  return {props: {code}}\n}\n```\n\n----------------------------------------\n\nTITLE: Actual Compiled MDX Output (JavaScript)\nDESCRIPTION: This snippet shows the actual JavaScript output after MDX compilation. It includes the compiled JSX and demonstrates how the MDX content is transformed into React components.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n\nexport function Thing() {\n  return _jsx(_Fragment, {children: 'World'})\n}\n\nfunction _createMdxContent(props) {\n  const _components = {h1: 'h1', ...props.components}\n  return _jsxs(_components.h1, {children: ['Hello ', _jsx(Thing, {})]})\n}\n\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || {}\n  return MDXLayout\n    ? _jsx(MDXLayout, {...props, children: _jsx(_createMdxContent, {...props})})\n    : _createMdxContent(props)\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side MDX Compilation\nDESCRIPTION: Shows how to compile MDX content on the server using @mdx-js/mdx compile function. The code transforms MDX content into executable JavaScript with function-body output format.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/mdx-on-demand.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst code = String(await compile('# hi', {\n  outputFormat: 'function-body',\n  /* …otherOptions */\n}))\n// To do: send `code` to the client somehow.\n```\n\n----------------------------------------\n\nTITLE: Compiled MDX Output (JSX)\nDESCRIPTION: This snippet illustrates how the MDX compiler roughly transforms the MDX input into JSX. It shows the exported function and the default export of the MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/* @jsxRuntime automatic */\n/* @jsxImportSource react */\n\nexport function Thing() {\n  return <>World</>\n}\n\nexport default function MDXContent() {\n  return <h1>Hello <Thing /></h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX with esbuild\nDESCRIPTION: Example showing how to configure esbuild with the MDX plugin\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport mdx from '@mdx-js/esbuild'\nimport esbuild from 'esbuild'\n\nawait esbuild.build({\n  entryPoints: ['index.mdx'],\n  format: 'esm',\n  outfile: 'output.js',\n  plugins: [mdx({/* jsxImportSource: …, otherOptions… */})]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom MDX Components Provider Implementation\nDESCRIPTION: Implementation of a custom components provider using the useMDXComponents function\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/injecting-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n */\n\n/** @returns {MDXComponents} */\nexport function useMDXComponents() {\n  return {\n    Planet() {\n      return 'Pluto'\n    },\n    h1(properties) {\n      return <h2 {...properties} />\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Components to MDX in React\nDESCRIPTION: This snippet demonstrates how to pass components to an MDX file in React, including HTML equivalents, custom components, and nested components.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(\n  <Example\n    components={{\n      // Map `h1` (`# heading`) to use `h2`s.\n      h1: 'h2',\n      // Rewrite `em`s (`*like so*`) to `i` with a goldenrod foreground color.\n      em(props) {\n        return <i style={{color: 'goldenrod'}} {...props} />\n      },\n      // Pass a layout (using the special `'wrapper'` key).\n      wrapper({components, ...rest}) {\n        return <main {...rest} />\n      },\n      // Pass a component.\n      Planet() {\n        return 'Neptune'\n      },\n      // This nested component can be used as `<theme.text>hi</theme.text>`\n      theme: {\n        text(props) {\n          return <span style={{color: 'grey'}} {...props} />\n        }\n      }\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Content (JavaScript)\nDESCRIPTION: This snippet shows different ways to import content from an MDX file, including namespace imports, default exports, and named imports. It demonstrates the flexibility of working with MDX exports.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// A namespace import to get everything:\nimport * as everything from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\nconsole.log(everything) // {Thing: [Function: Thing], default: [Function: MDXContent]}\n\n// Default export shortcut and a named import specifier:\nimport Content, {Thing} from './example.mdx'\nconsole.log(Content) // [Function: MDXContent]\nconsole.log(Thing) // [Function: Thing]\n\n// Import specifier with another local name:\nimport {Thing as AnotherName} from './example.mdx'\nconsole.log(AnotherName) // [Function: Thing]\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX to JavaScript (MDX)\nDESCRIPTION: This snippet shows an example MDX file that exports a function and uses it in JSX. It demonstrates how MDX combines markdown and JSX syntax.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nexport function Thing() {\n  return <>World</>\n}\n\n# Hello <Thing />\n```\n\n----------------------------------------\n\nTITLE: Using MDX Plugins with Compile Function in TypeScript\nDESCRIPTION: Demonstrates how to pass various plugins to the MDX compiler with different configuration patterns. Shows examples of single plugins, plugins with options, and combining multiple remark and rehype plugins.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/extending-mdx.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\nimport rehypeKatex from 'rehype-katex' // Render math with KaTeX.\nimport remarkFrontmatter from 'remark-frontmatter' // YAML and such.\nimport remarkGfm from 'remark-gfm' // Tables, footnotes, strikethrough, task lists, literal URLs.\nimport remarkMath from 'remark-math' // Support math like `$so$`.\n\nconst file = '# hi'\n\n// One plugin:\nawait compile(file, {remarkPlugins: [remarkGfm]})\n\n// A plugin with options:\nawait compile(file, {remarkPlugins: [[remarkFrontmatter, 'toml']]})\n\n// Two plugins:\nawait compile(file, {remarkPlugins: [remarkGfm, remarkFrontmatter]})\n\n// Two plugins, first w/ options:\nawait compile(file, {remarkPlugins: [[remarkGfm, {singleTilde: false}], remarkFrontmatter]})\n\n// remark and rehype plugins:\nawait compile(file, {rehypePlugins: [rehypeKatex], remarkPlugins: [remarkMath]})\n\n// remark and rehype plugins, last w/ options:\nawait compile(file, {\n  // A plugin with options:\n  rehypePlugins: [[rehypeKatex, {strict: true, throwOnError: true}]],\n  remarkPlugins: [remarkMath]\n})\n```\n\n----------------------------------------\n\nTITLE: Evaluating MDX with JSX Runtime (TSX)\nDESCRIPTION: Demonstrates how to evaluate compiled MDX content using a JSX runtime, specifically React's jsx-runtime.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as runtime from 'react/jsx-runtime'\n\nconst {default: Content} = await evaluate('# hi', {...runtime, baseUrl: import.meta.url, ...otherOptions})\n```\n\n----------------------------------------\n\nTITLE: Passing Props to MDX Content (JSX)\nDESCRIPTION: This snippet illustrates how to pass props to an MDX component. It shows both the createElement method and JSX syntax for passing props to the MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport Example from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\n\n// Use a `createElement` call:\nconsole.log(React.createElement(Example, {name: 'Venus', year: 2021}))\n\n// Use JSX:\nconsole.log(<Example name=\"Mars\" year={2022} />)\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX to JavaScript\nDESCRIPTION: Node.js script demonstrating how to compile an MDX file to JavaScript using the compile function.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {compile} from '@mdx-js/mdx'\n\nconst compiled = await compile(await fs.readFile('example.mdx'))\n\nconsole.log(String(compiled))\n```\n\n----------------------------------------\n\nTITLE: Using MDXProvider with Custom Components in React\nDESCRIPTION: Complete example showing how to use MDXProvider to provide custom components to MDX content in a React application. Demonstrates context-based component overriding for MDX elements.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/react/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n */\n\nimport {MDXProvider} from '@mdx-js/react'\nimport Post from './post.mdx'\n// ^-- Assumes an integration is used to compile MDX to JS, such as\n// `@mdx-js/esbuild`, `@mdx-js/loader`, `@mdx-js/node-loader`, or\n// `@mdx-js/rollup`, and that it is configured with\n// `options.providerImportSource: '@mdx-js/react'`.\n\n/** @type {MDXComponents} */\nconst components = {\n  em(properties) {\n    return <i {...properties} />\n  }\n}\n\nconsole.log(\n  <MDXProvider components={components}>\n    <Post />\n  </MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX with Rollup\nDESCRIPTION: Example configuration for using MDX with Rollup bundler, including optional Babel configuration\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @import {RollupOptions} from 'rollup'\n */\n\nimport mdx from '@mdx-js/rollup'\nimport {babel} from '@rollup/plugin-babel'\n\n/** @type {RollupOptions} */\nconst config = {\n  // …\n  plugins: [\n    // …\n    mdx({/* jsxImportSource: …, otherOptions… */}),\n    // Babel is optional:\n    babel({\n      // Also run on what used to be `.mdx` (but is now JS):\n      extensions: ['.js', '.jsx', '.cjs', '.mjs', '.md', '.mdx'],\n      // Other options…\n    })\n  ]\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Using MDXProvider in React Application\nDESCRIPTION: This snippet demonstrates how to use MDXProvider to wrap the top-level MDX component, allowing for easier component passing in nested MDX files.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport {MDXProvider} from '@mdx-js/react'\nimport {createRoot} from 'react-dom/client'\nimport {Heading, /* … */ Table} from './components/index.js'\nimport Post from './post.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nconst components = {\n  h1: Heading.H1,\n  // …\n  table: Table\n}\n\nconst container = document.getElementById('root')\nif (!container) throw new Error('Expected `root`')\nconst root = createRoot(container)\nroot.render(\n  <MDXProvider components={components}>\n    <Post />\n  </MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Rehype Plugins in MDX Compilation (TSX)\nDESCRIPTION: This example shows how to use rehype plugins when compiling MDX content. It demonstrates using rehypeKatex for rendering math and remarkMath for supporting math syntax.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport rehypeKatex from 'rehype-katex' // Render math with KaTeX.\nimport remarkMath from 'remark-math' // Support math like `$so$`.\n\nawait compile(file, {rehypePlugins: [rehypeKatex], remarkPlugins: [remarkMath]})\n\nawait compile(file, {\n  // A plugin with options:\n  rehypePlugins: [[rehypeKatex, {strict: true, throwOnError: true}]],\n  remarkPlugins: [remarkMath]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Structure Example\nDESCRIPTION: Shows a simple MDX example combining Markdown headings with JSX div elements.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/what-is-mdx.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n# Hello, world!\n\n<div className=\"note\">\n  > Some notable things in a block quote!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX with Next.js\nDESCRIPTION: This code configures MDX support in a Next.js project using @next/mdx. It sets up file extensions for MDX and enables MDX files to be used as pages.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport nextMdx from '@next/mdx'\n\nconst withMdx = nextMdx({\n  extension: /\\.mdx?$/,\n  options: {/* otherOptions… */}\n})\n\nconst nextConfig = withMdx({\n  pageExtensions: ['md', 'mdx', 'tsx', 'ts', 'jsx', 'js'],\n})\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: MDXProvider Usage Example with Custom Components\nDESCRIPTION: Complete example showing how to import and use MDXProvider to provide custom components to MDX content. Includes type definition for MDX components and demonstrates wrapping an MDX component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/preact/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n */\n\nimport {MDXProvider} from '@mdx-js/preact'\nimport Post from './post.mdx'\n// ^-- Assumes an integration is used to compile MDX to JS, such as\n// `@mdx-js/esbuild`, `@mdx-js/loader`, `@mdx-js/node-loader`, or\n// `@mdx-js/rollup`, and that it is configured with\n// `options.providerImportSource: '@mdx-js/preact'`.\n\n/** @type {MDXComponents} */\nconst components = {\n  em(properties) {\n    return <i {...properties} />\n  }\n}\n\nconsole.log(\n  <MDXProvider components={components}>\n    <Post />\n  </MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Using MDX in React Application (JSX)\nDESCRIPTION: This snippet demonstrates how to import and use an MDX file as a component in a React application. It shows how to render the MDX content in a React DOM root.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createRoot} from 'react-dom/client'\nimport Example from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nconst container = document.getElementById('root')\nif (!container) throw new Error('Expected `root`')\nconst root = createRoot(container)\nroot.render(<Example />)\n```\n\n----------------------------------------\n\nTITLE: Client-Side MDX Execution\nDESCRIPTION: Demonstrates how to run compiled MDX code on the client using @mdx-js/mdx run function with React JSX runtime. Returns an MDXContent component for rendering.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/mdx-on-demand.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {run} from '@mdx-js/mdx'\nimport * as runtime from 'react/jsx-runtime'\n\nconst code = '' // To do: get `code` from server somehow.\n\nconst {default: Content} = await run(code, {...runtime, baseUrl: import.meta.url})\n```\n\n----------------------------------------\n\nTITLE: Development Mode with Enhanced Error Messages in MDX\nDESCRIPTION: Examples demonstrating the development option which adds extra information to error messages and uses the development JSX runtime. This helps with debugging by providing more context about missing components.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_11\n\nLANGUAGE: mdx\nCODE:\n```\n**Note**<NoteIcon />: some stuff.\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {evaluate} from '@mdx-js/mdx'\nimport * as runtime from 'react/jsx-runtime'\n\nconst path = 'example.mdx'\nconst value = await fs.readFile(path)\nconst MDXContent = (await evaluate({path, value}, {...runtime, baseUrl: import.meta.url})).default\n\nconsole.log(MDXContent({}))\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport * as runtime from 'react/jsx-dev-runtime'\nimport {evaluate} from '@mdx-js/mdx'\n\nconst path = 'example.mdx'\nconst value = await fs.readFile(path)\nconst MDXContent = (await evaluate({path, value}, {development: true, ...runtime, baseUrl: import.meta.url})).default\n\nconsole.log(MDXContent({}))\n```\n\n----------------------------------------\n\nTITLE: Configuring ESBuild with MDX Plugin\nDESCRIPTION: Example showing how to set up ESBuild with the MDX plugin using the ESBuild API. Demonstrates basic configuration including entry points, output format, and plugin initialization with optional JSX settings.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/esbuild.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport mdx from '@mdx-js/esbuild'\nimport esbuild from 'esbuild'\n\nawait esbuild.build({\n  // Replace `index.js` with your entry point that imports MDX files:\n  entryPoints: ['index.js'],\n  format: 'esm',\n  outfile: 'output.js',\n  plugins: [mdx({/* jsxImportSource: …, otherOptions… */})]\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Components to MDX Content (JSX)\nDESCRIPTION: This snippet demonstrates how to pass custom components to MDX content using the special 'components' prop. It shows how to override or provide components that can be used within the MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Example from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nconsole.log(\n  <Example\n    components={{\n      Planet() {\n        return <span style={{color: 'tomato'}}>Pluto</span>\n      }\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating from MDX v1 to v2 Core Compiler Usage\nDESCRIPTION: Comparison of code examples showing the changes required when migrating from MDX v1 to v2 core compiler usage, including new API methods and options structure.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Before:\nimport mdx from '@mdx-js/mdx'\n\nconst result = await mdx('# hi')\n\nconsole.log(result)\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// After:\nimport {compile} from '@mdx-js/mdx'\nimport remarkGfm from 'remark-gfm'\n\nconst result = await compile('# hi', {\n  providerImportSource: '@mdx-js/react',\n  remarkPlugins: [remarkGfm]\n})\n\nconsole.log(String(result))\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Usage in React Application\nDESCRIPTION: This example shows how to use an MDX file in a React application, passing components directly to the MDX component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createRoot} from 'react-dom/client'\nimport {Heading, /* … */ Table} from './components.js'\nimport Post from './post.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nconst components = {\n  h1: Heading.H1,\n  // …\n  table: Table\n}\n\nconst container = document.getElementById('root')\nif (!container) throw new Error('Expected `root`')\nconst root = createRoot(container)\nroot.render(<Post components={components} />)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Import Source in MDX\nDESCRIPTION: Example showing how to use the jsxImportSource option to specify where automatic JSX runtimes are imported from. This allows using different libraries like Preact instead of React.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {jsxImportSource: 'preact'})\n```\n\n----------------------------------------\n\nTITLE: Setting Output Format for MDX Compilation\nDESCRIPTION: Shows how to specify the output format for MDX compilation, choosing between a complete program or a function body that can be used with run(). This is useful for server/client separation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst code = 'export const no = 3.14\\n\\n# hi {no}'\n\nconsole.log(String(await compile(code, {outputFormat: 'program'}))) // Default.\nconsole.log(String(await compile(code, {outputFormat: 'function-body'})))\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\nexport const no = 3.14\nfunction _createMdxContent(props) { /* … */ }\nexport default function MDXContent(props = {}) { /* … */ }\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use strict'\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0]\nconst no = 3.14\nfunction _createMdxContent(props) { /* … */ }\nfunction MDXContent(props = {}) { /* … */ }\nreturn {no, default: MDXContent}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX with Vite and React\nDESCRIPTION: This snippet shows how to configure MDX with Vite when also using @vitejs/plugin-react. It demonstrates the correct plugin order and enforces the MDX plugin to run in the 'pre' phase.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport mdx from '@mdx-js/rollup'\nimport react from '@vitejs/plugin-react'\nimport {defineConfig} from 'vite'\n// …\nconst viteConfig = defineConfig({\n  plugins: [\n    {enforce: 'pre', ...mdx({/* jsxImportSource: …, otherOptions… */})},\n    react({include: /\\.(jsx|js|mdx|md|tsx|ts)$/})\n  ]\n})\n// …\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for MDX\nDESCRIPTION: Example webpack configuration to use @mdx-js/loader. This snippet shows how to add the loader to the webpack rules for processing .mdx files.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/loader.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @import {Options} from '@mdx-js/loader'\n * @import {Configuration} from 'webpack'\n */\n\n/** @type {Configuration} */\nconst webpackConfig = {\n  module: {\n    // …\n    rules: [\n      // …\n      {\n        test: /\\.mdx?$/,\n        use: [\n          {\n            loader: '@mdx-js/loader',\n            /** @type {Options} */\n            options: {/* jsxImportSource: …, otherOptions… */}\n          }\n        ]\n      }\n    ]\n  }\n}\n\nexport default webpackConfig\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX for Vue\nDESCRIPTION: This example shows how to compile MDX content for use with Vue by setting the jsxImportSource option to 'vue'.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst js = String(await compile('# hi', {jsxImportSource: 'vue', /* otherOptions… */}))\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX for Svelte\nDESCRIPTION: This snippet demonstrates how to compile MDX content for use with Svelte by setting the jsxImportSource option to 'svelte-jsx'.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst js = String(await compile('# hi', {jsxImportSource: 'svelte-jsx', /* otherOptions… */}))\n```\n\n----------------------------------------\n\nTITLE: Using MDXProvider with Vue\nDESCRIPTION: Example showing how to use MDXProvider with Vue to provide custom components for MDX content. This example creates a Vue app with MDXProvider wrapping an imported MDX component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/vue/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MDXProvider} from '@mdx-js/vue'\nimport {createApp} from 'vue'\nimport Post from './post.mdx'\n// ^-- Assumes an integration is used to compile MDX to JS, such as\n// `@mdx-js/esbuild`, `@mdx-js/loader`, `@mdx-js/node-loader`, or\n// `@mdx-js/rollup`, and that it is configured with\n// `options.providerImportSource: '@mdx-js/vue'`.\n\ncreateApp({\n  data() {\n    return {components: {h1: 'h2'}}\n  },\n  template: '<MDXProvider v-bind:components=\"components\"><Post /></MDXProvider>',\n  components: {MDXProvider, Post}\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX with Vite\nDESCRIPTION: This snippet demonstrates how to set up MDX in a Vite project using the @mdx-js/rollup plugin. It includes configuration for the Vite config file and notes on JSX runtime setup.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport mdx from '@mdx-js/rollup'\nimport {defineConfig} from 'vite'\n\nconst viteConfig = defineConfig({\n  plugins: [\n    mdx(/* jsxImportSource: …, otherOptions… */)\n  ]\n})\n\nexport default viteConfig\n```\n\n----------------------------------------\n\nTITLE: ESM Import/Export in MDX\nDESCRIPTION: Shows how to use ES Modules import and export statements within MDX files.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/what-is-mdx.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nimport {External} from './some/place.js'\n\nexport const Local = properties => <span style={{color: 'red'}} {...properties} />\n\nAn <External>external</External> component and a <Local>local one</Local>.\n```\n\n----------------------------------------\n\nTITLE: MDXProvider Usage Example\nDESCRIPTION: Complete example showing how to use MDXProvider with custom components and MDX content\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/react.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n */\n\nimport {MDXProvider} from '@mdx-js/react'\nimport Post from './post.mdx'\n// ^-- Assumes an integration is used to compile MDX to JS, such as\n// `@mdx-js/esbuild`, `@mdx-js/loader`, `@mdx-js/node-loader`, or\n// `@mdx-js/rollup`, and that it is configured with\n// `options.providerImportSource: '@mdx-js/react'`.\n\n/** @type {MDXComponents} */\nconst components = {\n  em(properties) {\n    return <i {...properties} />\n  }\n}\n\nconsole.log(\n  <MDXProvider components={components}>\n    <Post />\n  </MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with MDX Plugin\nDESCRIPTION: Example configuration for using the MDX plugin in a Rollup config file. It demonstrates how to import and add the plugin to the Rollup configuration.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/rollup.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @import {RollupOptions} from 'rollup'\n */\n\nimport mdx from '@mdx-js/rollup'\n\n/** @type {RollupOptions} */\nconst config = {\n  // …\n  plugins: [\n    // …\n    mdx({/* jsxImportSource: …, otherOptions… */})\n  ]\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX with Emotion\nDESCRIPTION: This snippet shows how to compile an MDX file using Emotion as the JSX runtime. It sets the jsxImportSource option to '@emotion/react'.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst js = String(await compile('# hi', {jsxImportSource: '@emotion/react', /* otherOptions… */}))\n```\n\n----------------------------------------\n\nTITLE: JSX Component Examples in MDX\nDESCRIPTION: Shows how to use JSX components with props and expressions within MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/what-is-mdx.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<MyComponent id=\"123\" />\n\nYou can also use objects with components, such as the `thisOne` component on\nthe `myComponents` object: <myComponents.thisOne />\n\n<Component\n  open\n  x={1}\n  label={'this is a string, *not* markdown!'}\n  icon={<Icon />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Standard Markdown Syntax Examples\nDESCRIPTION: Comprehensive example of standard Markdown syntax supported in MDX, including headings, lists, code blocks, and inline formatting.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/what-is-mdx.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Heading (rank 1)\n## Heading 2\n### 3\n#### 4\n##### 5\n###### 6\n\n> Block quote\n\n* Unordered\n* List\n\n1. Ordered\n2. List\n\nA paragraph, introducing a thematic break:\n\n---\n\n```js\nsome.code()\n```\n\na [link](https://example.com), an ![image](./image.png), some *emphasis*,\nsomething **strong**, and finally a little `code()`.\n```\n\n----------------------------------------\n\nTITLE: Using remark-mdx to process MDX content\nDESCRIPTION: Example of using the remark-mdx plugin with remark to process MDX content containing imports, JSX, and expressions. The code shows how to transform MDX and output the result.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/remark-mdx/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {remark} from 'remark'\nimport remarkMdx from 'remark-mdx'\n\nconst file = await remark()\n  .use(remarkMdx)\n  .process('import a from \"b\"\\n\\na <b /> c {1 + 1} d')\n\nconsole.log(String(file))\n```\n\n----------------------------------------\n\nTITLE: Accessing MDX Exports with TypeScript React\nDESCRIPTION: Demonstrates how to access both default and named exports from an MDX file in TypeScript React. This pattern shows how to pass exported values to layouts after the MDX v2 changes.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as everything from './example.mdx'\nconst {default: Content, ...exported} = everything\n<Content {...exported} />\n```\n\n----------------------------------------\n\nTITLE: MDX Compilation Example\nDESCRIPTION: Node.js code demonstrating how to compile an MDX file to JavaScript.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {compile} from '@mdx-js/mdx'\n\nconst compiled = await compile(await fs.readFile('example.mdx'))\n\nconsole.log(String(compiled))\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX with Webpack\nDESCRIPTION: Example webpack configuration for MDX, including loader setup and optional Babel integration\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @import {Options} from '@mdx-js/loader'\n * @import {Configuration} from 'webpack'\n */\n\n/** @type {Configuration} */\nconst webpackConfig = {\n  module: {\n    // …\n    rules: [\n      // …\n      {\n        test: /\\.mdx?$/,\n        use: [\n          // Babel is optional:\n          {loader: 'babel-loader', options: {}},\n          {\n            loader: '@mdx-js/loader',\n            /** @type {Options} */\n            options: {/* jsxImportSource: …, otherOptions… */}\n          }\n        ]\n      }\n    ]\n  }\n}\n\nexport default webpackConfig\n```\n\n----------------------------------------\n\nTITLE: JavaScript Expressions in MDX\nDESCRIPTION: Demonstrates how to use JavaScript expressions and IIFEs within MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/what-is-mdx.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nTwo 🍰 is: {Math.PI * 2}\n\n{(function () {\n  const guess = Math.random()\n\n  if (guess > 0.66) {\n    return <span style={{color: 'tomato'}}>Look at us.</span>\n  }\n\n  if (guess > 0.33) {\n    return <span style={{color: 'violet'}}>Who would have guessed?!</span>\n  }\n\n  return <span style={{color: 'goldenrod'}}>Not me.</span>\n})()}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Component in MDX\nDESCRIPTION: Demonstrates how to import an MDX file and override the default 'a' tag component with a custom FancyLink component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/table-of-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Readme from './readme.md' // Assumes an integration is used to compile MDX -> JS.\nimport {FancyLink} from './components/fancy-link.js'\n\n<Readme components={{a: FancyLink}} />\n```\n\n----------------------------------------\n\nTITLE: Extracting Frontmatter Data Using vfile-matter\nDESCRIPTION: Demonstrates how to extract frontmatter data from an MDX file using the to-vfile and vfile-matter packages without compiling or evaluating the MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/frontmatter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {read} from 'to-vfile'\nimport {matter} from 'vfile-matter'\n\nconst file = await read('example.mdx')\nmatter(file)\n\nconsole.log(file.data.matter)\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX with Recma Plugins (TSX)\nDESCRIPTION: Shows how to compile MDX with recma plugins, which are used to transform the estree AST.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport recmaMdxIsMdxComponent from 'recma-mdx-is-mdx-component'\n\nawait compile(file, {recmaPlugins: [recmaMdxIsMdxComponent]})\n```\n\n----------------------------------------\n\nTITLE: MDX Component Provider Implementation\nDESCRIPTION: Shows the differences in MDX compilation output when using a provider import source for component injection\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/injecting-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n@@ -1,7 +1,13 @@\n import {jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+import {useMDXComponents as _provideComponents} from 'xxx'\n\n function _createMdxContent(props) {\n-  const _components = {em: 'em', h1: 'h1', ...props.components}\n+  const _components = {\n+    em: 'em',\n+    h1: 'h1',\n+    ..._provideComponents(),\n+    ...props.components\n+  }\n   const {Planet} = _components\n   if (!Planet) _missingMdxReference('Planet', true)\n   return _jsxs(_components.h1, {\n@@ -10,7 +16,7 @@\n }\n\n export default function MDXContent(props = {}) {\n-  const {wrapper: MDXLayout} = props.components || {}\n+  const {wrapper: MDXLayout} = {..._provideComponents(), ...props.components}\n   return MDXLayout\n     ? _jsx(MDXLayout, {...props, children: _jsx(_createMdxContent, {...props})})\n     : _createMdxContent(props)\n```\n\n----------------------------------------\n\nTITLE: MDX Example with GFM Features\nDESCRIPTION: Example MDX file demonstrating various GitHub Flavored Markdown features including autolinks, footnotes, strikethrough, tables, and task lists.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/gfm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n# GFM\n\n## Autolink literals\n\nwww.example.com, https://example.com, and contact@example.com.\n\n## Footnote\n\nA note[^1]\n\n[^1]: Big note.\n\n## Strikethrough\n\n~one~ or ~~two~~ tildes.\n\n## Table\n\n| a | b  |  c |  d  |\n| - | :- | -: | :-: |\n\n## Tasklist\n\n* [ ] to do\n* [x] done\n```\n\n----------------------------------------\n\nTITLE: Combining MDX Loader with Babel Loader in Webpack\nDESCRIPTION: Advanced webpack configuration that demonstrates how to combine @mdx-js/loader with babel-loader to support modern JavaScript features in MDX files that need to be transpiled for older browsers.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/loader/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @import {Options} from '@mdx-js/loader'\n * @import {Configuration} from 'webpack'\n */\n\n/** @type {Configuration} */\nconst webpackConfig = {\n  module: {\n    // …\n    rules: [\n      // …\n      {\n        test: /\\.mdx?$/,\n        use: [\n          // Note that Webpack runs right-to-left: `@mdx-js/loader` is used first, then\n          // `babel-loader`.\n          {loader: 'babel-loader', options: {}},\n          {\n            loader: '@mdx-js/loader',\n            /** @type {Options} */\n            options: {}\n          }\n        ]\n      }\n    ]\n  }\n}\n\nexport default webpackConfig\n```\n\n----------------------------------------\n\nTITLE: Using Development Mode for Enhanced Error Messages\nDESCRIPTION: Demonstrates enabling development mode for MDX, which adds extra information to error messages and uses the development JSX runtime for improved debugging.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_10\n\nLANGUAGE: mdx\nCODE:\n```\n**Note**<NoteIcon />: some stuff.\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {evaluate} from '@mdx-js/mdx'\nimport * as runtime from 'react/jsx-runtime'\n\nconst path = 'example.mdx'\nconst value = await fs.readFile(path)\nconst MDXContent = (await evaluate({path, value}, {...runtime, baseUrl: import.meta.url})).default\n\nconsole.log(MDXContent({}))\n```\n\nLANGUAGE: text\nCODE:\n```\nError: Expected component `NoteIcon` to be defined: you likely forgot to import, pass, or provide it.\n    at _missingMdxReference (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:27:9)\n    at _createMdxContent (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:15:20)\n    at MDXContent (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:9:9)\n    at main (…/example.js:11:15)\n```\n\nLANGUAGE: diff\nCODE:\n```\n@@ -7,6 +7,6 @@\nimport fs from 'node:fs/promises'\n-import * as runtime from 'react/jsx-runtime'\n+import * as runtime from 'react/jsx-dev-runtime'\nimport {evaluate} from '@mdx-js/mdx'\n\nconst path = 'example.mdx'\nconst value = await fs.readFile(path)\n-const MDXContent = (await evaluate({path, value}, {...runtime, baseUrl: import.meta.url})).default\n+const MDXContent = (await evaluate({path, value}, {development: true, ...runtime, baseUrl: import.meta.url})).default\n\nconsole.log(MDXContent({}))\n```\n\nLANGUAGE: text\nCODE:\n```\nError: Expected component `NoteIcon` to be defined: you likely forgot to import, pass, or provide it.\nIt's referenced in your code at `1:9-1:21` in `example.mdx`\nprovide it.\n    at _missingMdxReference (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:27:9)\n    at _createMdxContent (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:15:20)\n    at MDXContent (eval at run (…/@mdx-js/mdx/lib/run.js:18:10), <anonymous>:9:9)\n    at main (…/example.js:11:15)\n```\n\n----------------------------------------\n\nTITLE: Using ESM Exports as Alternative to Frontmatter in MDX\nDESCRIPTION: Demonstrates using ECMAScript Module exports as a dynamic alternative to frontmatter in MDX. This approach allows for variable definition and interpolation within the MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/frontmatter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nexport const name = 'World'\nexport const title = 'Hi, ' + name + '!'\n\n# {title}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for MDX Processing\nDESCRIPTION: Basic webpack configuration that sets up the @mdx-js/loader to process .mdx files. It shows how to add the loader to webpack's module rules with options for customization.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/loader/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @import {Options} from '@mdx-js/loader'\n * @import {Configuration} from 'webpack'\n */\n\n/** @type {Configuration} */\nconst webpackConfig = {\n  module: {\n    // …\n    rules: [\n      // …\n      {\n        test: /\\.mdx?$/,\n        use: [\n          {\n            loader: '@mdx-js/loader',\n            /** @type {Options} */\n            options: {/* jsxImportSource: …, otherOptions… */}\n          }\n        ]\n      }\n    ]\n  }\n}\n\nexport default webpackConfig\n```\n\n----------------------------------------\n\nTITLE: Nesting MDXProvider Components\nDESCRIPTION: This example shows how nested MDXProvider components merge their provided components, with inner providers taking precedence.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(\n  <MDXProvider components={{h1: Component1, h2: Component2}}>\n    <MDXProvider components={{h2: Component3, h3: Component4}}>\n      <Content />\n    </MDXProvider>\n  </MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: JSX Equivalent of MDX with JavaScript Expressions\nDESCRIPTION: The JSX output equivalent of an MDX file with JavaScript expressions, showing how the expressions are evaluated and rendered.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v2.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <p>Written by: Jane and John.</p>\n  <p>Published on: February 1, 2022.</p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Using SourceMapGenerator with MDX Compilation\nDESCRIPTION: Demonstrates how to generate source maps when compiling MDX files by providing the SourceMapGenerator from the source-map package.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {compile} from '@mdx-js/mdx'\nimport {SourceMapGenerator} from 'source-map'\n\nconst file = await compile(\n  {path: 'example.mdx', value: await fs.readFile('example.mdx')},\n  {SourceMapGenerator}\n)\n\nconsole.log(file.map)\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  file: 'example.mdx',\n  mappings: ';;aAAaA,QAAQ;YAAQ;;;;;;;;iBAE3B',\n  names: ['Thing'],\n  sources: ['example.mdx'],\n  version: 3\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating MDX with JSX Runtime Options (TSX)\nDESCRIPTION: These snippets demonstrate how to evaluate compiled MDX code with different JSX runtime options. They show examples for production and development modes, as well as using a provider.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as runtime from 'react/jsx-runtime'\n\nconst {default: Content} = await evaluate('# hi', {...runtime, baseUrl: import.meta.url, ...otherOptions})\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as runtime from 'react/jsx-dev-runtime'\n\nconst {default: Content} = await evaluate('# hi', {development: true, baseUrl: import.meta.url, ...runtime, ...otherOptions})\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as provider from '@mdx-js/react'\nimport * as runtime from 'react/jsx-runtime'\n\nconst {default: Content} = await evaluate('# hi', {...provider, ...runtime, baseUrl: import.meta.url, ...otherOptions})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with MDX Plugin\nDESCRIPTION: Example configuration for using the MDX plugin with Rollup. This shows how to add the plugin to a rollup.config.js file with TypeScript annotations.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/rollup/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @import {RollupOptions} from 'rollup'\n */\n\nimport mdx from '@mdx-js/rollup'\n\n/** @type {RollupOptions} */\nconst config = {\n  // …\n  plugins: [\n    // …\n    mdx({/* jsxImportSource: …, otherOptions… */})\n  ]\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Compiled MDX Output\nDESCRIPTION: Example of the JavaScript output generated from compiling an MDX document, showing React JSX runtime usage.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n\nexport function Thing() {\n  return _jsx(_Fragment, {children: 'World!'})\n}\n\nfunction _createMdxContent(props) {\n  const _components = {h1: 'h1', ...props.components}\n  return _jsxs(_components.h1, {children: ['Hello, ', _jsx(Thing, {})]})\n}\n\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || {}\n  return MDXLayout\n    ? _jsx(MDXLayout, {...props, children: _jsx(_createMdxContent, {...props})})\n    : _createMdxContent(props)\n}\n```\n\n----------------------------------------\n\nTITLE: Using BaseUrl for Import Resolution in MDX\nDESCRIPTION: Example showing how to use the baseUrl option to resolve imports relative to a specific URL. This is useful for ensuring consistent import paths in MDX files.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst code = 'export {number} from \"./data.js\"\\n\\n# hi'\nconst baseUrl = 'https://a.full/url' // Typically `import.meta.url`\n\nconsole.log(String(await compile(code, {baseUrl})))\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {jsx as _jsx} from 'react/jsx-runtime'\nexport {number} from 'https://a.full/data.js'\nfunction _createMdxContent(props) { /* … */ }\nexport default function MDXContent(props = {}) { /* … */ }\n```\n\n----------------------------------------\n\nTITLE: Combining @mdx-js/loader with Babel\nDESCRIPTION: Example webpack configuration that combines @mdx-js/loader with babel-loader. This setup allows using modern JavaScript features while maintaining compatibility with older browsers.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/loader.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @import {Options} from '@mdx-js/loader'\n * @import {Configuration} from 'webpack'\n */\n\n/** @type {Configuration} */\nconst webpackConfig = {\n  module: {\n    // …\n    rules: [\n      // …\n      {\n        test: /\\.mdx?$/,\n        use: [\n          // Note that Webpack runs right-to-left: `@mdx-js/loader` is used first, then\n          // `babel-loader`.\n          {loader: 'babel-loader', options: {}},\n          {\n            loader: '@mdx-js/loader',\n            /** @type {Options} */\n            options: {}\n          }\n        ]\n      }\n    ]\n  }\n}\n\nexport default webpackConfig\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack Configuration from MDX v1 to v2\nDESCRIPTION: Comparison of webpack configuration for MDX loader between v1 and v2, showing the addition of remark-gfm plugin and providerImportSource option required in v2.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Before:\n// …\n{\n  test: /\\.mdx?$/,\n  use: [\n    {\n      loader: 'babel-loader',\n      options: {\n        presets: [\n          '@babel/preset-env',\n          '@babel/preset-react'\n        ]\n      }\n    },\n    {\n      loader: '@mdx-js/loader',\n      /** @type {import('@mdx-js/loader').Options} */\n      options: {}\n    }\n  ]\n}\n// …\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// After:\nimport remarkGfm from 'remark-gfm'\n\n// …\n{\n  test: /\\.mdx?$/,\n  use: [\n    {\n      loader: 'babel-loader',\n      options: {\n        presets: [\n          '@babel/preset-env'\n        ]\n      }\n    },\n    {\n      loader: '@mdx-js/loader',\n      /** @type {import('@mdx-js/loader').Options} */\n      options: {\n        providerImportSource: '@mdx-js/react',\n        remarkPlugins: [remarkGfm]\n      }\n    }\n  ]\n}\n// …\n```\n\n----------------------------------------\n\nTITLE: Using MDX plugin with esbuild API\nDESCRIPTION: Example showing how to integrate the MDX plugin with esbuild's JavaScript API. This configures esbuild to process MDX files during the build process, with the option to specify JSX import source and other options.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/esbuild/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport mdx from '@mdx-js/esbuild'\nimport esbuild from 'esbuild'\n\nawait esbuild.build({\n  // Replace `index.js` with your entry point that imports MDX files:\n  entryPoints: ['index.js'],\n  format: 'esm',\n  outfile: 'output.js',\n  plugins: [mdx({/* jsxImportSource: …, otherOptions… */})]\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Content with Ink in Node.js\nDESCRIPTION: This snippet demonstrates how to render MDX content using Ink, a React-based CLI framework. It shows the MDX content, the JavaScript code to render it, and the command to run the example.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_10\n\nLANGUAGE: mdx\nCODE:\n```\n# Hi!\n```\n\nLANGUAGE: js\nCODE:\n```\n// @filename: types.d.ts\nimport type {} from 'mdx'\n// @filename: example.js\n// @errors: 2769 -- something with Ink/twoslash/react getting different versions of React?\n// ---cut---\nimport React from 'react'\nimport {Text, render} from 'ink'\nimport Content from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nrender(\n  React.createElement(Content, {\n    components: {\n      h1(properties) {\n        return React.createElement(Text, {bold: true, ...properties})\n      },\n      p: Text\n    }\n  })\n)\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode --loader=@mdx-js/node-loader example.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Format for MDX Compilation\nDESCRIPTION: Example demonstrating different output formats: 'program' for a complete module with imports/exports, and 'function-body' for code that can be passed to the run function. This is useful for different execution environments.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst code = 'export const no = 3.14\\n\\n# hi {no}'\n\nconsole.log(String(await compile(code, {outputFormat: 'program'}))) // Default.\nconsole.log(String(await compile(code, {outputFormat: 'function-body'})))\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\nexport const no = 3.14\nfunction _createMdxContent(props) { /* … */ }\nexport default function MDXContent(props = {}) { /* … */ }\n```\n\nLANGUAGE: tsx\nCODE:\n```\n'use strict'\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0]\nconst no = 3.14\nfunction _createMdxContent(props) { /* … */ }\nfunction MDXContent(props = {}) { /* … */ }\nreturn {no, default: MDXContent}\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX with Custom JSX Runtime Options (TSX)\nDESCRIPTION: This snippet demonstrates how to compile MDX content with custom JSX runtime options, including pragma, pragmaFrag, and pragmaImportSource. It shows the differences in the compiled output when using these options.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {\n  jsxRuntime: 'classic',\n  pragma: 'preact.createElement',\n  pragmaFrag: 'preact.Fragment',\n  pragmaImportSource: 'preact/compat'\n})\n```\n\nLANGUAGE: diff\nCODE:\n```\n-import React from 'react'\n+import preact from 'preact/compat'\n\nexport function Thing() {\n-  return React.createElement(React.Fragment, null, 'World!')\n+  return preact.createElement(preact.Fragment, null, 'World!')\n}\n…\n```\n\n----------------------------------------\n\nTITLE: Combining MDX with Babel in Rollup\nDESCRIPTION: Example of combining the MDX plugin with Babel in a Rollup configuration. This setup allows for using modern JavaScript features with MDX files.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/rollup.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @import {RollupOptions} from 'rollup'\n */\n\nimport mdx from '@mdx-js/rollup'\nimport {babel} from '@rollup/plugin-babel'\n\n/** @type {RollupOptions} */\nconst config = {\n  // …\n  plugins: [\n    // …\n    mdx({/* jsxImportSource: …, otherOptions… */}),\n    babel({\n      // Also run on what used to be `.mdx` (but is now JS):\n      extensions: ['.js', '.jsx', '.cjs', '.mjs', '.md', '.mdx']\n      // Other options…\n    })\n  ]\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Defining a Layout in MDX\nDESCRIPTION: This example shows how to define a layout component directly within an MDX file using a default export.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_10\n\nLANGUAGE: mdx\nCODE:\n```\nexport default function Layout({children}) {\n  return <main>{children}</main>;\n}\n\nAll the things.\n```\n\n----------------------------------------\n\nTITLE: Using Note Component with MDX\nDESCRIPTION: Demonstrates how to use a custom React component (Note) within MDX content, passing a type prop and containing markdown content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/projects.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Note type=\"info\">\n  **Note**: have another project built with MDX?\n  Please send a PR to add it here!\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Using Remark Plugins in MDX Compilation (TSX)\nDESCRIPTION: This snippet demonstrates how to use remark plugins when compiling MDX content. It shows examples of using remarkGfm and remarkFrontmatter plugins with various configurations.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport remarkFrontmatter from 'remark-frontmatter' // YAML and such.\nimport remarkGfm from 'remark-gfm' // Tables, footnotes, strikethrough, task lists, literal URLs.\n\nawait compile(file, {remarkPlugins: [remarkGfm]}) // One plugin.\nawait compile(file, {remarkPlugins: [[remarkFrontmatter, 'toml']]}) // A plugin with options.\nawait compile(file, {remarkPlugins: [remarkGfm, remarkFrontmatter]}) // Two plugins.\nawait compile(file, {remarkPlugins: [[remarkGfm, {singleTilde: false}], remarkFrontmatter]}) // Two plugins, first w/ options.\n```\n\n----------------------------------------\n\nTITLE: Creating a Register File for Modern Node.js\nDESCRIPTION: JavaScript module that registers the MDX loader using the modern Node.js module register API. This is the recommended approach for Node 20 and higher.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {register} from 'node:module'\n\nregister('@mdx-js/node-loader', import.meta.url)\n```\n\n----------------------------------------\n\nTITLE: Setting MDX Format Option\nDESCRIPTION: Shows how to specify the format option to control whether content should be processed as MDX or standard markdown.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ncompile('…') // Seen as MDX.\ncompile('…', {format: 'mdx'}) // Seen as MDX.\ncompile('…', {format: 'md'}) // Seen as markdown.\n```\n\n----------------------------------------\n\nTITLE: Setting up MDXProvider with Shortcodes in React\nDESCRIPTION: This code snippet demonstrates how to set up global shortcodes in a React application using MDXProvider from @mdx-js/react. It imports custom components and makes them available as shortcodes to all MDX documents wrapped by this provider.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/shortcodes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {MDXProvider} from '@mdx-js/react'\nimport {TomatoBox, Twitter, YouTube} from './ui'\n\nconst shortcodes = {TomatoBox, Twitter, YouTube}\n\nexport default ({children}) => (\n  <MDXProvider components={shortcodes}>{children}</MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating from @mdx-js/runtime to @mdx-js/mdx\nDESCRIPTION: Shows the code before and after migrating from the deprecated @mdx-js/runtime to the recommended @mdx-js/mdx package with evaluate function.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport MDX from '@mdx-js/runtime'\n\nconst components = {/* … */}\nconst value = '# hi'\n\nexport default function () {\n  return <MDX components={components}>\n    {value}\n  </MDX>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as runtime from 'react/jsx-runtime'\nimport * as provider from '@mdx-js/react'\nimport {evaluate} from '@mdx-js/mdx'\n\nconst components = {/* … */}\nconst value = '# hi'\nconst {default: Content} = await evaluate(value, {...provider, ...runtime})\n\nexport default function () {\n  return <Content components={components} />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in MDX Blog Post\nDESCRIPTION: This code shows how to import React components into an MDX file and set metadata for a blog post. It imports a Note component and defines author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/shortcodes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\n\nexport const info = {\n  author: [\n    {github: 'johno', name: 'John Otander'}\n  ],\n  modified: new Date('2021-11-01'),\n  published: new Date('2019-05-14')\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating MDX with JSX Dev Runtime (TSX)\nDESCRIPTION: Shows how to evaluate compiled MDX content using a JSX development runtime, specifically React's jsx-dev-runtime.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as runtime from 'react/jsx-dev-runtime'\n\nconst {default: Content} = await evaluate('# hi', {development: true, baseUrl: import.meta.url, ...runtime, ...otherOptions})\n```\n\n----------------------------------------\n\nTITLE: React Component Using MDX Import\nDESCRIPTION: JavaScript module demonstrating how to import and render MDX content using React\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/node-loader.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderToStaticMarkup} from 'react-dom/server'\nimport React from 'react'\nimport Content from './example.mdx'\n\nconsole.log(renderToStaticMarkup(React.createElement(Content)))\n```\n\n----------------------------------------\n\nTITLE: Using Classic JSX Runtime with MDX\nDESCRIPTION: Demonstrates using the classic JSX runtime instead of the automatic runtime, which compiles JSX to React.createElement calls instead of imports from jsx-runtime.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {jsxRuntime: 'classic'})\n```\n\nLANGUAGE: diff\nCODE:\n```\n-import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+import React from 'react'\n\nexport function Thing() {\n-  return _jsx(_Fragment, {children: 'World'})\n+  return React.createElement(React.Fragment, null, 'World!')\n}\n…\n```\n\n----------------------------------------\n\nTITLE: Processing MDX Math with Node.js\nDESCRIPTION: Node.js script that uses @mdx-js/mdx to compile an MDX file with math notation. It utilizes remark-math and rehype-katex plugins to properly transform LaTeX expressions into HTML.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/math.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {compile} from '@mdx-js/mdx'\nimport rehypeKatex from 'rehype-katex'\nimport remarkMath from 'remark-math'\n\nconsole.log(\n  String(\n    await compile(await fs.readFile('example.mdx'), {\n      rehypePlugins: [rehypeKatex],\n      remarkPlugins: [remarkMath]\n    })\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Using MDXEmbedProvider for Automatic Component Injection\nDESCRIPTION: Shows how to use MDXEmbedProvider to automatically inject MDX Embed components into MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/embed.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport {MDXEmbedProvider} from 'mdx-embed'\nimport Example from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nconsole.log(\n  <MDXEmbedProvider>\n    <Example />\n  </MDXEmbedProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Source Maps with MDX Compiler\nDESCRIPTION: Example of using the SourceMapGenerator option to generate source maps during MDX compilation. This demonstrates importing the generator from the source-map package and passing it to the compile function.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {compile} from '@mdx-js/mdx'\nimport {SourceMapGenerator} from 'source-map'\n\nconst file = await compile(\n  {path: 'example.mdx', value: await fs.readFile('example.mdx')},\n  {SourceMapGenerator}\n)\n\nconsole.log(file.map)\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  file: 'example.mdx',\n  mappings: ';;aAAaA,QAAQ;YAAQ;;;;;;;;iBAE3B',\n  names: ['Thing'],\n  sources: ['example.mdx'],\n  version: 3\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving JSX in MDX Compilation\nDESCRIPTION: Demonstrates using the jsx option to keep JSX in the output rather than compiling it away, which is useful for specific build pipelines that handle JSX separately.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {jsx: true})\n```\n\nLANGUAGE: diff\nCODE:\n```\n-import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+/*@jsxRuntime automatic*/\n+/*@jsxImportSource react*/\n\nexport function Thing() {\n-  return _jsx(_Fragment, {children: 'World'})\n+  return <>World!</>\n}\n\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: 'h1',\n    ...props.components\n  }\n-  return _jsxs(_components.h1, {children: ['Hello ', _jsx(Thing, {})]})\n+  return <_components.h1>{\"Hello \"}<Thing /></_components.h1>\n}\n\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || {}\n  return MDXLayout\n-    ? _jsx(MDXLayout, {\n-        ...props,\n-        children: _jsx(_createMdxContent, props)\n-      })\n+    ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout>\n    : _createMdxContent(props)\n}\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Injection via Props\nDESCRIPTION: Demonstrates how to pass custom components to an MDX file through React props, including component overrides\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/injecting-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Example from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nconsole.log(\n  <Example\n    components={{\n      Planet() {\n        return 'Pluto'\n      },\n      h1(properties) {\n        return <h2 {...properties} />\n      }\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Components in MDX\nDESCRIPTION: This snippet shows how to import components from relative paths and export default components and metadata in an MDX file. It defines project authors, publication dates, and schema.org data.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Chart} from './_component/snowfall.jsx'\n\nexport {Home as default} from './_component/home.jsx'\nexport const info = {\n  author: [\n    {github: 'johno', name: 'John Otander'},\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2017-12-23'),\n  schemaOrg: {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"SoftwareApplication\",\n    \"additionalType\": \"ComputerLanguage\",\n    \"applicationCategory\": \"DeveloperApplication\",\n    \"description\": \"an authorable format for writing JSX in markdown documents\",\n    \"name\": \"MDX\",\n    \"offers\": {\n      \"@type\": \"Offer\",\n      \"price\": \"0.00\",\n      \"priceCurrency\": \"USD\"\n    },\n    \"operatingSystem\": \"Windows, MacOS, Linux\",\n    \"sameAs\": [\n      \"https://www.wikidata.org/wiki/Q95971592\",\n      \"https://www.wikidata.org/wiki/Q27966906\",\n      \"https://www.wikidata.org/wiki/Q95961071\",\n      \"https://en.wikipedia.org/wiki/MDX_(markup_language)\",\n      \"https://github.com/mdx-js/mdx\"\n    ],\n    \"url\": \"https://mdxjs.com\"\n  }\n}\nexport const year = 2023\n```\n\n----------------------------------------\n\nTITLE: Using Frontmatter Data Within MDX Content\nDESCRIPTION: Example of an MDX file that uses frontmatter data within the MDX content itself, requiring the remark-mdx-frontmatter plugin to make frontmatter values available for interpolation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/frontmatter.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Hi, World!\n---\n\n# {title}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX with Bun\nDESCRIPTION: This example shows how to configure MDX for use with Bun, a JavaScript runtime and toolkit. It includes both the TOML configuration and TypeScript setup.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\npreload = [\"./bun-mdx.ts\"]\n```\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"bun-types\" />\n// ---cut---\nimport mdx from '@mdx-js/esbuild'\nimport {type BunPlugin, plugin} from 'bun'\n\nawait plugin(mdx() as unknown as BunPlugin)\n```\n\n----------------------------------------\n\nTITLE: Basic usage of remark-mdx with the remark processor\nDESCRIPTION: Example showing how to process MDX content using the remark-mdx plugin with the remark processor, demonstrating transformation of MDX syntax.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/remark-mdx.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {remark} from 'remark'\nimport remarkMdx from 'remark-mdx'\n\nconst file = await remark()\n  .use(remarkMdx)\n  .process('import a from \"b\"\\n\\na <b /> c {1 + 1} d')\n\nconsole.log(String(file))\n```\n\n----------------------------------------\n\nTITLE: MDX Example with JavaScript Expressions\nDESCRIPTION: Example MDX file demonstrating JavaScript expressions support in MDX v2, including exporting variables and using expressions to format dates and lists.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v2.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const authors = [\n  {name: 'Jane', email: 'hi@jane.com'},\n  {name: 'John', github: '@johno'}\n]\nexport const published = new Date('2022-02-01')\n\nWritten by: {new Intl.ListFormat('en').format(authors.map(d => d.name))}.\n\nPublished on: {new Intl.DateTimeFormat('en', {dateStyle: 'long'}).format(published)}.\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX with Provider Import Source (TSX)\nDESCRIPTION: This example shows how to compile MDX content with a custom provider import source. It demonstrates the differences in the compiled output when using the providerImportSource option.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {providerImportSource: '@mdx-js/react'})\n```\n\nLANGUAGE: diff\nCODE:\n```\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+import {useMDXComponents as _provideComponents} from '@mdx-js/react'\n\nexport function Thing() {\n  return _jsx(_Fragment, {children: 'World'})\n}\n\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: 'h1',\n+    ..._provideComponents(),\n    ...props.components\n  }\n  return _jsxs(_components.h1, {children: ['Hello ', _jsx(Thing, {})]})\n}\n\nexport default function MDXContent(props = {}) {\n-  const {wrapper: MDXLayout} = props.components || {}\n+  const {wrapper: MDXLayout} = {\n+    ..._provideComponents(),\n+    ...props.components\n+  }\n\n  return MDXLayout\n    ? _jsx(MDXLayout, {...props, children: _jsx(_createMdxContent, {})})\n    : _createMdxContent()\n```\n\n----------------------------------------\n\nTITLE: Using MDXProvider with Vue\nDESCRIPTION: Example showing how to use the MDXProvider component with Vue to provide custom components to MDX content. This demonstrates the context-based approach for component customization.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/vue.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MDXProvider} from '@mdx-js/vue'\nimport {createApp} from 'vue'\nimport Post from './post.mdx'\n// ^-- Assumes an integration is used to compile MDX to JS, such as\n// `@mdx-js/esbuild`, `@mdx-js/loader`, `@mdx-js/node-loader`, or\n// `@mdx-js/rollup`, and that it is configured with\n// `options.providerImportSource: '@mdx-js/vue'`.\n\ncreateApp({\n  data() {\n    return {components: {h1: 'h2'}}\n  },\n  template: '<MDXProvider v-bind:components=\"components\"><Post /></MDXProvider>',\n  components: {MDXProvider, Post}\n})\n```\n\n----------------------------------------\n\nTITLE: MDX v2 Inline Markdown in JSX\nDESCRIPTION: Example of using markdown inline elements inside JSX when the text and tags are on the same line in MDX v2.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_14\n\nLANGUAGE: mdx\nCODE:\n```\n<div># this is not a heading but *this* is emphasis</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Content at Compile Time with remark-embedder\nDESCRIPTION: Demonstrates how to use @remark-embedder/core and @remark-embedder/transformer-oembed to embed a YouTube video in MDX at compile time.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/embed.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n// Note: `@remark-embedder` is currently using faux-esm.\nimport fauxRemarkEmbedder from '@remark-embedder/core'\nimport fauxOembedTransformer from '@remark-embedder/transformer-oembed'\n\nconst remarkEmbedder = fauxRemarkEmbedder.default\nconst oembedTransformer = fauxOembedTransformer.default\n\nconst code = `\nCheck out this video:\n\nhttps://www.youtube.com/watch?v=dQw4w9WgXcQ\n`\n\nconsole.log(\n  String(\n    await compile(code, {\n      remarkPlugins: [\n        [\n          // @ts-expect-error: `remarkEmbedder` types are wrong.\n          remarkEmbedder,\n          {transformers: [oembedTransformer]}\n        ]\n      ]\n    })\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX with Remark Plugins (TSX)\nDESCRIPTION: Illustrates how to compile MDX with remark plugins, which are used to transform markdown. The example includes plugins for frontmatter and GitHub Flavored Markdown.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport remarkFrontmatter from 'remark-frontmatter' // YAML and such.\nimport remarkGfm from 'remark-gfm' // Tables, footnotes, strikethrough, task lists, literal URLs.\n\nawait compile(file, {remarkPlugins: [remarkGfm]}) // One plugin.\nawait compile(file, {remarkPlugins: [[remarkFrontmatter, 'toml']]}) // A plugin with options.\nawait compile(file, {remarkPlugins: [remarkGfm, remarkFrontmatter]}) // Two plugins.\nawait compile(file, {remarkPlugins: [[remarkGfm, {singleTilde: false}], remarkFrontmatter]}) // Two plugins, first w/ options.\n```\n\n----------------------------------------\n\nTITLE: Setting File Format for MDX Compilation\nDESCRIPTION: Example showing how to specify the format option to treat input as either markdown or MDX. This affects how the content is parsed and processed during compilation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ncompile('…') // Seen as MDX.\ncompile('…', {format: 'mdx'}) // Seen as MDX.\ncompile('…', {format: 'md'}) // Seen as markdown.\n```\n\n----------------------------------------\n\nTITLE: Evaluating MDX with Provider and JSX Runtime (TSX)\nDESCRIPTION: Illustrates how to evaluate compiled MDX content using both a provider (for component context) and a JSX runtime.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as provider from '@mdx-js/react'\nimport * as runtime from 'react/jsx-runtime'\n\nconst {default: Content} = await evaluate('# hi', {...provider, ...runtime, baseUrl: import.meta.url, ...otherOptions})\n```\n\n----------------------------------------\n\nTITLE: Using MDXProvider with Custom Components\nDESCRIPTION: Example of using MDXProvider to wrap an MDX component with custom components in a Preact application.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/preact.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @import {MDXComponents} from 'mdx/types.js'\n */\n\nimport {MDXProvider} from '@mdx-js/preact'\nimport Post from './post.mdx'\n// ^-- Assumes an integration is used to compile MDX to JS, such as\n// `@mdx-js/esbuild`, `@mdx-js/loader`, `@mdx-js/node-loader`, or\n// `@mdx-js/rollup`, and that it is configured with\n// `options.providerImportSource: '@mdx-js/preact'`.\n\n/** @type {MDXComponents} */\nconst components = {\n  em(properties) {\n    return <i {...properties} />\n  }\n}\n\nconsole.log(\n  <MDXProvider components={components}>\n    <Post />\n  </MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Custom createElement Implementation\nDESCRIPTION: Implementation of a custom createElement function for MDX that handles both standard React elements and MDX-specific components.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/custom-pragma.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function (type, props) {\n  const args = arguments\n  const mdxType = props && props.mdxType\n\n  if (typeof type === 'string' || mdxType) {\n    const argsLength = args.length\n\n    const createElementArgArray = new Array(argsLength)\n    createElementArgArray[0] = MDXCreateElement\n\n    const newProps = {}\n    for (let key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key]\n      }\n    }\n    newProps.originalType = type\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType\n\n    createElementArgArray[1] = newProps\n\n    for (let i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i]\n    }\n\n    return React.createElement.apply(null, createElementArgArray)\n  }\n\n  return React.createElement.apply(null, args)\n}\n```\n\n----------------------------------------\n\nTITLE: Passing baseUrl to evaluate and run functions in MDX\nDESCRIPTION: This snippet demonstrates how to pass the baseUrl option when using the evaluate or run functions in MDX. The baseUrl is typically set to import.meta.url to provide context for where the code is running.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as runtime from 'react/jsx-runtime'\n\nconst result = await run('# hi', {...runtime, baseUrl: import.meta.url})\n```\n\n----------------------------------------\n\nTITLE: Using Classic JSX Runtime in MDX\nDESCRIPTION: Example showing how to use the jsxRuntime option to switch from the default 'automatic' runtime to the 'classic' runtime. This changes how JSX is compiled in the output.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {jsxRuntime: 'classic'})\n```\n\n----------------------------------------\n\nTITLE: Configuring Preact Support in MDX v2 Webpack Loader\nDESCRIPTION: Example of configuring @mdx-js/loader with Preact instead of React, setting jsxImportSource to 'preact' and optionally using the Preact provider for component passing.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// …\n{\n  loader: '@mdx-js/loader',\n  /** @type {import('@mdx-js/loader').Options} */\n  options: {\n    jsxImportSource: 'preact',\n    // Optional: either remove the following line or install `@mdx-js/preact`.\n    providerImportSource: '@mdx-js/preact'\n  }\n}\n// …\n```\n\n----------------------------------------\n\nTITLE: Preserving JSX in MDX Compilation Output\nDESCRIPTION: Example demonstrating the jsx option which preserves JSX in the output instead of compiling it away. This shows the difference in output when keeping JSX syntax intact.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {jsx: true})\n```\n\n----------------------------------------\n\nTITLE: Using Shortcodes in MDX Documents\nDESCRIPTION: This example shows how to use globally defined shortcodes in an MDX document. It demonstrates using the YouTube component directly and nesting it inside the TomatoBox component, showcasing the flexibility of MDX's JSX integration.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/shortcodes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n# Hello world!\n\nHere's a YouTube shortcode:\n\n<YouTube tweetId=\"1234\" />\n\nHere's a YouTube shortcode wrapped in TomatoBox:\n\n<TomatoBox>\n  <YouTube videoId=\"1234\" />\n</TomatoBox>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Exports in JavaScript\nDESCRIPTION: Shows how to import and access exported variables from an MDX file in JavaScript. This example assumes an integration is used to compile MDX to JS and includes TypeScript type definitions.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/frontmatter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as Post from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nconsole.log(Post.title) // Prints 'Hi, World!'\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin for MDX Parsing\nDESCRIPTION: This code defines a Babel plugin that allows parsing of MDX files. It includes a custom parser that uses @mdx-js/mdx for MDX files and falls back to the standard Babel parser for other files.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport parser from '@babel/parser'\nimport {compileSync} from '@mdx-js/mdx'\nimport estreeToBabel from 'estree-to-babel'\n\nexport function babelPluginSyntaxMdx() {\n  return {parserOverride: babelParserWithMdx}\n}\n\nfunction babelParserWithMdx(value, options) {\n  const filename = options.sourceFilename || options.sourceFileName\n\n  if (filename && /\\.mdx?$/.test(filename)) {\n    const file = compileSync(\n      {value, path: options.sourceFilename},\n      {recmaPlugins: [recmaBabel] /* jsxImportSource: …, otherOptions… */}\n    )\n    return /** @type {ParseResult<File>} */ (file.result)\n  }\n\n  return parser.parse(value, options)\n}\n\nfunction recmaBabel() {\n  this.compiler = compiler\n\n  function compiler(tree) {\n    return estreeToBabel(tree)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting MDXProvider Components in React (TSX)\nDESCRIPTION: This example demonstrates how to nest MDXProvider components while customizing the component merging behavior to maintain backwards compatibility with v0.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v1.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXProvider components={components}>\n  <MDXProvider components={outerComponents => newComponents}>\n    {children}\n  </MDXProvider>\n</MDXProvider>\n```\n\n----------------------------------------\n\nTITLE: Combining MDX with Babel in Rollup\nDESCRIPTION: Example configuration showing how to use MDX with Babel through @rollup/plugin-babel to compile modern JavaScript features to backward-compatible code.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/rollup/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @import {RollupOptions} from 'rollup'\n */\n\nimport mdx from '@mdx-js/rollup'\nimport {babel} from '@rollup/plugin-babel'\n\n/** @type {RollupOptions} */\nconst config = {\n  // …\n  plugins: [\n    // …\n    mdx({/* jsxImportSource: …, otherOptions… */}),\n    babel({\n      // Also run on what used to be `.mdx` (but is now JS):\n      extensions: ['.js', '.jsx', '.cjs', '.mjs', '.md', '.mdx']\n      // Other options…\n    })\n  ]\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Alternative Usage Without MDXProvider\nDESCRIPTION: Code diff showing how to pass components directly to an MDX component without using MDXProvider, demonstrating a simpler approach for some use cases.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/preact/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n-<MDXProvider components={components}>\n-  <Post />\n-</MDXProvider>\n+<Post components={components} />\n```\n\n----------------------------------------\n\nTITLE: MDX Utils Pre to CodeBlock Transformation\nDESCRIPTION: Function that transforms preProps into a code block by extracting relevant properties from MDXTag elements.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/custom-pragma.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexports.preToCodeBlock = preProps => {\n  if (\n    // children is MDXTag\n    preProps.children &&\n    // MDXTag props\n    preProps.children.props &&\n    // if MDXTag is going to render a <code>\n    preProps.children.props.name === 'code'\n  ) {\n    // we have a <pre><code> situation\n    const {\n      children: codeString,\n      props: {className, ...props}\n    } = preProps.children.props\n\n    return {\n      codeString: codeString.trim(),\n      language: className && className.split('-')[1],\n      ...props\n    }\n  }\n  return undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Setting baseUrl for Import Resolution in MDX\nDESCRIPTION: Shows how to use the baseUrl option to resolve imports relative to a specific URL. This is useful for handling relative imports in MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst code = 'export {number} from \"./data.js\"\\n\\n# hi'\nconst baseUrl = 'https://a.full/url' // Typically `import.meta.url`\n\nconsole.log(String(await compile(code, {baseUrl})))\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {jsx as _jsx} from 'react/jsx-runtime'\nexport {number} from 'https://a.full/data.js'\nfunction _createMdxContent(props) { /* … */ }\nexport default function MDXContent(props = {}) { /* … */ }\n```\n\n----------------------------------------\n\nTITLE: Custom Merging of MDXProvider Components\nDESCRIPTION: This snippet demonstrates how to use a function to customize the merging of components in nested MDXProvider instances, in this case discarding the outer context.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(\n  <MDXProvider components={{h1: Component1, h2: Component2}}>\n    <MDXProvider\n      components={\n        function () {\n          return {h2: Component3, h3: Component4}\n        }\n      }\n    >\n      <Content />\n    </MDXProvider>\n  </MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Compiled MDX Output\nDESCRIPTION: Example of compiled JavaScript output from MDX compilation process.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n\nexport function Thing() {\n  return _jsx(_Fragment, {children: 'World!'})\n}\n\nfunction _createMdxContent(props) {\n  const _components = {h1: 'h1', ...props.components}\n  return _jsxs(_components.h1, {children: ['Hello, ', _jsx(Thing, {})]})\n}\n\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || {}\n  return MDXLayout\n    ? _jsx(MDXLayout, {...props, children: _jsx(_createMdxContent, {...props})})\n    : _createMdxContent(props)\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX for Preact\nDESCRIPTION: This example shows how to compile MDX content for use with Preact by setting the jsxImportSource option to 'preact'.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst js = String(await compile('# hi', {jsxImportSource: 'preact', /* otherOptions… */}))\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX with Remark-Rehype Options (TSX)\nDESCRIPTION: Shows how to compile MDX with custom options for remark-rehype, which is used to transform markdown to HTML.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ncompile({value: '…'}, {remarkRehypeOptions: {clobberPrefix: 'comment-1'}})\n```\n\n----------------------------------------\n\nTITLE: Example MDX Document\nDESCRIPTION: Sample MDX document showing component export and usage within markdown.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nexport function Thing() {\n  return <>World!</>\n}\n\n# Hello, <Thing />\n```\n\n----------------------------------------\n\nTITLE: Configuring jsxImportSource for MDX Compilation\nDESCRIPTION: Shows how to set a custom import source for automatic JSX runtime, allowing use of alternative JSX implementations like Preact instead of React.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {jsxImportSource: 'preact'})\n```\n\nLANGUAGE: diff\nCODE:\n```\n-import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+import {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from 'preact/jsx-runtime'\n```\n\n----------------------------------------\n\nTITLE: Example MDX Document\nDESCRIPTION: Sample MDX document showing component export and usage.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nexport function Thing() {\n  return <>World!</>\n}\n\n# Hello, <Thing />\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Types Package\nDESCRIPTION: Shell command to install TypeScript types for MDX\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @types/mdx\n```\n\n----------------------------------------\n\nTITLE: MDX v2 Indented JSX and Markdown Example\nDESCRIPTION: Shows how MDX v2 supports indentation of JSX and markdown content, which wasn't possible in MDX v1.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_13\n\nLANGUAGE: mdx\nCODE:\n```\n<article>\n  <hgroup>\n    # This is a heading now, not code or plain text\n  </hgroup>\n  <section>\n    ```js\n    // if you do want code blocks, use fenced code\n    ```\n  </section>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Enabling Frontmatter in MDX with remark-frontmatter\nDESCRIPTION: Shows how to enable YAML frontmatter support in MDX compilation using the remark-frontmatter plugin with @mdx-js/mdx compiler.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/frontmatter.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {compile} from '@mdx-js/mdx'\nimport remarkFrontmatter from 'remark-frontmatter'\n\nconst file = await compile(await fs.readFile('example.mdx'), {\n  remarkPlugins: [remarkFrontmatter]\n})\n\nconsole.log(file)\n```\n\n----------------------------------------\n\nTITLE: Adjacent Block JSX and Expressions Example\nDESCRIPTION: Demonstrates the new MDX v3 feature that allows block expressions directly next to block JSX tags, showing CSS styling within a style tag.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<style>{`\n\n  h1 {\n    color: blue;\n  }\n\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: MDX Example with Different Component Types\nDESCRIPTION: This example shows how different types of components (markdown syntax, lowercase JSX, and capitalized JSX) are rendered in MDX.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n* [markdown syntax](#alpha)\n* <a href=\"#bravo\">JSX with a lowercase name</a>\n* <Link to=\"#charlie\">JSX with a capitalized name</Link>\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX with Rehype Plugins (TSX)\nDESCRIPTION: Demonstrates how to compile MDX with rehype plugins, which are used to transform HTML. The example includes plugins for math rendering.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport rehypeKatex from 'rehype-katex' // Render math with KaTeX.\nimport remarkMath from 'remark-math' // Support math like `$so$`.\n\nawait compile(file, {rehypePlugins: [rehypeKatex], remarkPlugins: [remarkMath]})\n\nawait compile(file, {\n  // A plugin with options:\n  rehypePlugins: [[rehypeKatex, {strict: true, throwOnError: true}]],\n  remarkPlugins: [remarkMath]\n})\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX for Solid\nDESCRIPTION: This snippet demonstrates how to compile MDX content for use with Solid by setting the jsxImportSource option to 'solid-js/h'.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst js = String(await compile('# hi', {jsxImportSource: 'solid-js/h', /* otherOptions… */}))\n```\n\n----------------------------------------\n\nTITLE: Using MDX Embed Components without Explicit Imports\nDESCRIPTION: Shows how to use MDX Embed components in an MDX file without explicit imports.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/embed.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nHere's a codepen, and some other blog post text.\n\n<CodePen codePenId=\"PNaGbb\" />\n```\n\n----------------------------------------\n\nTITLE: MDX v2 Paragraph Creation in JSX\nDESCRIPTION: Demonstrates how text on separate lines from JSX tags creates paragraph elements in MDX v2.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_15\n\nLANGUAGE: mdx\nCODE:\n```\n<div>\n  This is a `p`.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Unclosed Expression in MDX\nDESCRIPTION: Shows an example of an unclosed curly brace expression.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\na { b\n```\n\n----------------------------------------\n\nTITLE: Implementing MDX Playground Layout\nDESCRIPTION: JSX markup defining the layout of the MDX playground, including a full-bleed container for the editor component and links to documentation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/playground.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"full-bleed\">\n  <div id=\"js-editor\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Babel MDX Plugin\nDESCRIPTION: This snippet demonstrates how to use the custom Babel MDX plugin with the Babel API. It shows how to transform an MDX document using the plugin.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/getting-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport babel from '@babel/core'\nimport {babelPluginSyntaxMdx} from './plugin.js'\n\nconst document = '# Hello, world!'\n\nconst result = await babel.transformAsync(document, {\n  filename: 'example.mdx',\n  plugins: [babelPluginSyntaxMdx]\n})\n\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: MDX v2 Component Definition with Blank Lines\nDESCRIPTION: Shows how MDX v2 allows defining components with blank lines in the export statement, which wasn't possible in MDX v1.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_19\n\nLANGUAGE: mdx\nCODE:\n```\nexport function Button(props) {\n  const style = {color: 'red'}\n\n  return <button style={style} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Including KaTeX CSS Stylesheet\nDESCRIPTION: HTML link tag for including the required KaTeX CSS stylesheet when using rehype-katex. This stylesheet is necessary for properly styling mathematical expressions.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/math.mdx#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Get the latest one from: https://katex.org/docs/browser -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.css\" integrity=\"sha384-nB0miv6/jRmo5UMMR1wu3Gz6NLsoTkbqJghGIsx//Rlm+ZU03BU6SQNC66uf4l5+\" crossorigin=\"anonymous\">\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX with Provider Import Source (TSX)\nDESCRIPTION: Illustrates how to compile MDX with a custom provider import source, which is used for runtimes that support context like React or Preact.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {providerImportSource: '@mdx-js/react'})\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Navigation with Self-Executing Function in MDX\nDESCRIPTION: A self-executing function that renders the blog navigation. It retrieves the blog category from the navigation tree, validates its existence with assert, and renders a navigation component with sorted blog items.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  (function () {\n    const navigationTree = props.navigationTree\n    const category = navigationTree.children.find(function (item) {\n      return item.name === '/blog/'\n    })\n    assert(category)\n\n    return (\n      <nav>\n        <BlogGroup items={category.children} sort={navigationSortItems} />\n      </nav>\n    )\n  })()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Note Component with Important Message in MDX\nDESCRIPTION: This MDX code snippet uses the imported Note component to display an important message about the code of conduct for the MDX community. It includes Markdown formatting within the component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/support.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Note type=\"important\">\n  **Important**: before participating in our community, please read our\n  [code of conduct][coc].\n  By interacting with this repository, organization, or community you agree to\n  abide by its terms.\n</Note>\n```\n\n----------------------------------------\n\nTITLE: HTML vs Markdown Comparison - Blockquote\nDESCRIPTION: Demonstrates the difference between HTML and Markdown syntax for creating a blockquote with emphasis.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/what-is-mdx.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<blockquote>\n  <p>A blockquote with <em>some</em> emphasis.</p>\n</blockquote>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n> A blockquote with *some* emphasis.\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/react with npm in Node.js\nDESCRIPTION: Command for installing the @mdx-js/react package using npm in a Node.js environment. This package is ESM only and requires Node.js version 16 or higher.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/react/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Blog Components in MDX\nDESCRIPTION: Imports the necessary modules for the blog page, including Node.js assert and the BlogGroup component. It also defines metadata for the blog page such as author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport assert from 'node:assert/strict'\nimport {BlogGroup} from '../_component/blog.jsx'\n\nexport const info = {\n  author: [{name: 'MDX Contributors'}],\n  modified: new Date('2024-07-04'),\n  published: new Date('2021-11-01')\n}\nexport const navExcludeGroup = true\nexport const navigationSortItems = 'navSortSelf,meta.published:desc'\nexport const navSortSelf = 7\n```\n\n----------------------------------------\n\nTITLE: ESM Webpack Configuration Example for MDX\nDESCRIPTION: Example of a webpack.config.js file in ESM format that works with @mdx-js/loader v1.6.22, showing the complete configuration including context, entry points, module rules, and output settings.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {fileURLToPath} from 'node:url'\nimport webpack from 'webpack'\n\nconst config = {\n  context: fileURLToPath(new URL('src/', import.meta.url)),\n  entry: ['./index.js'],\n  mode: 'none',\n  module: {\n    rules: [\n      {\n        test: /\\.mdx?$/,\n        use: [\n          {\n            loader: 'babel-loader',\n            options: {presets: ['@babel/preset-env', '@babel/preset-react']}\n          },\n          {\n            loader: '@mdx-js/loader',\n            /** @type {import('@mdx-js/loader').Options} */\n            options: {}\n          }\n        ]\n      }\n    ]\n  },\n  output: {\n    filename: 'bundle.js',\n    path: fileURLToPath(new URL('dest/', import.meta.url))\n  }\n};\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Rendering navigation menu dynamically in MDX with embedded JavaScript\nDESCRIPTION: Generates a navigation menu by finding and rendering documentation categories. Uses an immediately invoked function expression (IIFE) to process the navigation tree and render the appropriate components.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  (function () {\n    const navigationTree = props.navigationTree\n    const category = navigationTree.children.find(function (item) {\n      return item.name === '/docs/'\n    })\n    assert(category)\n\n    return (\n      <nav>\n        <NavigationGroup items={category.children} includeDescription />\n      </nav>\n    )\n  })()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/vue with npm\nDESCRIPTION: Command to install the @mdx-js/vue package using npm. This package is ESM only and requires Node.js version 16 or later.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/vue.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/vue\n```\n\n----------------------------------------\n\nTITLE: Using Emotion JSX Runtime with MDX\nDESCRIPTION: Example of configuring MDX v2 to work with Emotion's JSX runtime instead of React's default runtime.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// …\nimport * as runtime from '@emotion/react/jsx-runtime'\n// …\n```\n\n----------------------------------------\n\nTITLE: Compiling MDX with Custom JSX Runtime (TSX)\nDESCRIPTION: Demonstrates how to compile MDX content with custom JSX runtime settings, including pragma and pragmaFrag options for Preact.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ncompile(file, {\n  jsxRuntime: 'classic',\n  pragma: 'preact.createElement',\n  pragmaFrag: 'preact.Fragment',\n  pragmaImportSource: 'preact/compat'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing MDX v2 and Required Packages\nDESCRIPTION: Command to install MDX version 2 core packages including the loader, React integration, and remark-gfm plugin for GitHub Flavored Markdown support.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/loader @mdx-js/react remark-gfm\n```\n\n----------------------------------------\n\nTITLE: Equivalent JSX Output for Runtime Embed\nDESCRIPTION: Displays the equivalent JSX output for the MDX file with the CodePen embed.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/embed.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <p>Here's a codepen, and some other blog post text.</p>\n  <CodePen codePenId=\"PNaGbb\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Invalid Export Statement in MDX\nDESCRIPTION: Demonstrates incorrect usage of JavaScript statements without proper exports.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nexport const a = 1\nconst b = 2\n```\n\n----------------------------------------\n\nTITLE: MDX v1 JSX Output Comparison\nDESCRIPTION: The JSX output from MDX v1 for a given MDX input, showing how v1 handled markdown within JSX elements.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v2.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <div>*hi*?</div>\n  <div>\n    # hi?\n  </div>\n  <main>\n    <div>\n      <pre><code># hi?</code></pre>\n    </div>\n  </main>\n</>\n```\n\n----------------------------------------\n\nTITLE: Installing MDX v2 Framework Integration\nDESCRIPTION: Command to install the framework-specific MDX v2 integration package, which provides support for context-based component passing for React, Preact, or Vue.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/react # Change `react` to `preact` or `vue` if needed\n```\n\n----------------------------------------\n\nTITLE: Using Remark-Rehype Options in MDX Compilation (TSX)\nDESCRIPTION: This example shows how to pass options to remark-rehype when compiling MDX content. It demonstrates setting the clobberPrefix option.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\ncompile({value: '…'}, {remarkRehypeOptions: {clobberPrefix: 'comment-1'}})\n```\n\n----------------------------------------\n\nTITLE: Lazy Line Expressions in MDX\nDESCRIPTION: Demonstrates incorrect usage of expressions in containers with lazy lines.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n* {1 +\n2}\n\n> {1 +\n2}\n```\n\n----------------------------------------\n\nTITLE: Importing remark-mdx in Deno\nDESCRIPTION: Code example showing how to import the remark-mdx package in a Deno environment using the esm.sh CDN.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/remark-mdx.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport remarkMdx from 'https://esm.sh/remark-mdx@3'\n```\n\n----------------------------------------\n\nTITLE: Registering MDX node types with TypeScript\nDESCRIPTION: TypeScript example showing how to register MDX node types and create a custom remark plugin that can properly type MDX nodes in the syntax tree.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/remark-mdx/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Register MDX nodes in mdast:\n/// <reference types=\"remark-mdx\" />\n\n/**\n * @import {Root} from 'mdast'\n */\n\nimport {visit} from 'unist-util-visit'\n\nfunction myRemarkPlugin() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, function (node) {\n      console.log(node) // `node` can now be one of the MDX nodes.\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Recma Plugins in MDX Compilation (TSX)\nDESCRIPTION: This snippet demonstrates how to use recma plugins when compiling MDX content. It shows an example of using the recmaMdxIsMdxComponent plugin.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport recmaMdxIsMdxComponent from 'recma-mdx-is-mdx-component'\n\nawait compile(file, {recmaPlugins: [recmaMdxIsMdxComponent]})\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Loader with npm\nDESCRIPTION: Command to install the @mdx-js/loader package via npm. This package is ESM only and requires Node.js version 16 or higher.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/loader/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/loader\n```\n\n----------------------------------------\n\nTITLE: EvaluateOptions TypeScript Type Definition\nDESCRIPTION: Defines the EvaluateOptions type which is used for the evaluate function. It extends CompileOptions but omits certain JSX-related properties while including RunOptions.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * Configuration for `evaluate`.\n */\ntype EvaluateOptions = Omit<\n  CompileOptions,\n  | 'baseUrl' // Note that this is also in `RunOptions`.\n  | 'jsx'\n  | 'jsxImportSource'\n  | 'jsxRuntime'\n  | 'outputFormat'\n  | 'pragma'\n  | 'pragmaFrag'\n  | 'pragmaImportSource'\n  | 'providerImportSource'\n> &\n  RunOptions\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/loader with npm\nDESCRIPTION: Command to install the @mdx-js/loader package using npm. This package is ESM only and requires Node.js version 16 or higher.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/loader.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mdx-js/loader\n```\n\n----------------------------------------\n\nTITLE: Importing MDXProvider in browsers using esm.sh\nDESCRIPTION: Example showing how to import the MDXProvider component from @mdx-js/vue using esm.sh in a browser environment with a script tag.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/vue/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {MDXProvider} from 'https://esm.sh/@mdx-js/vue@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Compiler via NPM\nDESCRIPTION: Command to install the @mdx-js/mdx package using npm package manager.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/mdx\n```\n\n----------------------------------------\n\nTITLE: Defining EvaluateOptions Type in TypeScript for MDX.js\nDESCRIPTION: TypeScript type definition for the EvaluateOptions configuration interface. It extends CompileOptions while omitting certain JSX-related properties that are not allowed for evaluation, and incorporates RunOptions.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * Configuration for `evaluate`.\n */\ntype EvaluateOptions = Omit<\n  CompileOptions,\n  | 'baseUrl' // Note that this is also in `RunOptions`.\n  | 'jsx'\n  | 'jsxImportSource'\n  | 'jsxRuntime'\n  | 'outputFormat'\n  | 'pragma'\n  | 'pragmaFrag'\n  | 'pragmaImportSource'\n  | 'providerImportSource'\n> &\n  RunOptions\n```\n\n----------------------------------------\n\nTITLE: Installing remark-mdx with npm in Node.js\nDESCRIPTION: Command to install the remark-mdx package using npm in a Node.js environment (version 16+). The package is ESM only.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/remark-mdx.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install remark-mdx\n```\n\n----------------------------------------\n\nTITLE: Using MDXProvider in Browser with esm.sh\nDESCRIPTION: HTML script tag example showing how to import the MDXProvider component from @mdx-js/preact in a browser environment using the esm.sh CDN with bundling.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/preact/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"module\">\n  import {MDXProvider} from 'https://esm.sh/@mdx-js/preact@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Example MDX File with YAML Frontmatter\nDESCRIPTION: An example of an MDX file with traditional YAML frontmatter syntax. This format allows for metadata to be extracted before compiling the MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/frontmatter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Hi, World!\n---\n\n# Hi, World!\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MDX in Node.js\nDESCRIPTION: JavaScript module that imports an MDX file and renders its content to static HTML using React. This example demonstrates how to use imported MDX content in a Node.js application.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderToStaticMarkup} from 'react-dom/server'\nimport React from 'react'\nimport Content from './example.mdx'\n\nconsole.log(renderToStaticMarkup(React.createElement(Content)))\n```\n\n----------------------------------------\n\nTITLE: Importing MDX in Deno\nDESCRIPTION: Example of importing MDX compiler in Deno using esm.sh.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from 'https://esm.sh/@mdx-js/mdx@3'\n```\n\n----------------------------------------\n\nTITLE: Compiled JSX Output\nDESCRIPTION: The resulting JSX output after compiling the MDX content with GFM features, showing how markdown elements are transformed into React components.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/gfm.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <h1>GFM</h1>\n  <h2>Autolink literals</h2>\n  <p>\n    <a href=\"http://www.example.com\">www.example.com</a>,{' '}\n    <a href=\"https://example.com\">https://example.com</a>, and{' '}\n    <a href=\"mailto:contact@example.com\">contact@example.com</a>.\n  </p>\n  <h2>Footnote</h2>\n  <p>\n    A note\n    <sup>\n      <a\n        href=\"#user-content-fn-1\"\n        id=\"user-content-fnref-1\"\n        data-footnote-ref=\"true\"\n        aria-describedby=\"footnote-label\"\n      >\n        1\n      </a>\n    </sup>\n  </p>\n  <h2>Strikethrough</h2>\n  <p>\n    <del>one</del> or <del>two</del> tildes.\n  </p>\n  <h2>Table</h2>\n  <table>\n    <thead>\n      <tr>\n        <th>a</th>\n        <th style={{textAlign: 'left'}}>b</th>\n        <th style={{textAlign: 'right'}}>c</th>\n        <th style={{textAlign: 'center'}}>d</th>\n      </tr>\n    </thead>\n  </table>\n  <h2>Tasklist</h2>\n  <ul className=\"contains-task-list\">\n    <li className=\"task-list-item\">\n      <input type=\"checkbox\" disabled /> to do\n    </li>\n    <li className=\"task-list-item\">\n      <input type=\"checkbox\" disabled checked />\n      done\n    </li>\n  </ul>\n  <section data-footnotes=\"true\" className=\"footnotes\">\n    <h2 className=\"sr-only\" id=\"footnote-label\">\n      Footnotes\n    </h2>\n    <ol>\n      <li id=\"user-content-fn-1\">\n        <p>\n          Big note.{' '}\n          <a\n            href=\"#user-content-fnref-1\"\n            data-footnote-backref=\"\"\n            aria-label=\"Back to reference 1\"\n            className=\"data-footnote-backref\"\n          >\n            ↩\n          </a>\n        </p>\n      </li>\n    </ol>\n  </section>\n</>\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/esbuild with npm\nDESCRIPTION: Command to install the @mdx-js/esbuild package using npm. This package is ESM only and requires Node.js version 16 or higher.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/esbuild/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/esbuild\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Navigation Components in MDX\nDESCRIPTION: Defines TypeScript types for the navigation components used in the blog. It imports an Item type from a sort component and defines a Props interface that includes a navigationTree property.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * @import {Item} from '../_component/sort.js'\n   */\n\n  /**\n   * @typedef Props\n   * @property {Item} navigationTree\n   */\n}\n```\n\n----------------------------------------\n\nTITLE: Example MDX Document Structure\nDESCRIPTION: A sample MDX document that exports a React component called 'Thing' and uses it within Markdown content. This demonstrates the JSX-in-Markdown capability of MDX.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport function Thing() {\n  return <>World!</>\n}\n\n# Hello, <Thing />\n```\n\n----------------------------------------\n\nTITLE: Installing remark-mdx v2\nDESCRIPTION: Command to install version 2 of the remark-mdx package for use with MDX v2.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpm install remark-mdx\n```\n\n----------------------------------------\n\nTITLE: Passing All MDX Embed Components to MDX Content\nDESCRIPTION: Demonstrates how to pass all MDX Embed components to MDX content when rendering.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/embed.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as embeds from 'mdx-embed'\nimport Example from './example.mdx' // Assumes an integration is used to compile MDX -> JS.\n\nconsole.log(<Example components={...embeds} />)\n```\n\n----------------------------------------\n\nTITLE: MDX Compilation with GFM Plugin\nDESCRIPTION: JavaScript code showing how to compile MDX content with the remark-gfm plugin enabled to support GitHub Flavored Markdown features.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/gfm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'node:fs/promises'\nimport {compile} from '@mdx-js/mdx'\nimport remarkGfm from 'remark-gfm'\n\nconsole.log(\n  String(\n    await compile(await fs.readFile('example.mdx'), {remarkPlugins: [remarkGfm]})\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Browser Import of MDX\nDESCRIPTION: HTML script tag for importing MDX compiler in browser environment.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {compile} from 'https://esm.sh/@mdx-js/mdx@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: MDX Comment Syntax\nDESCRIPTION: Shows how to write a comment in MDX using JSX comment syntax. This is used for the \"more\" marker which likely indicates a read-more breakpoint.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/projects.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{/* more */}\n```\n\n----------------------------------------\n\nTITLE: Loading MDX in Browser\nDESCRIPTION: HTML script tag to import MDX compiler in browser environment using esm.sh.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {compile} from 'https://esm.sh/@mdx-js/mdx@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Metadata Export for MDX Blog Post\nDESCRIPTION: Exports metadata for the blog post including author information and publication dates. This pattern is commonly used in MDX files to provide structured metadata for the content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'johno', name: 'John Otander'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2019-04-11')\n}\n```\n\n----------------------------------------\n\nTITLE: MDX v2 Block Wrapping Limitations\nDESCRIPTION: Illustrates a limitation in MDX v2 where you cannot wrap markdown blocks when opening and closing tags are on different lines.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_17\n\nLANGUAGE: mdx\nCODE:\n```\nWelcome! <a href=\"about.html\">\n\nThis is home of...\n\n# The Falcons!</a>\n```\n\n----------------------------------------\n\nTITLE: Importing MDXProvider in Deno\nDESCRIPTION: Example showing how to import the MDXProvider component in Deno using esm.sh\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/react.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MDXProvider} from 'https://esm.sh/@mdx-js/react@3'\n```\n\n----------------------------------------\n\nTITLE: Await Syntax in MDX\nDESCRIPTION: Shows the new await syntax support in MDX v3, demonstrating Promise resolution directly in MDX content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n{await Promise.resolve(42)}\n```\n\n----------------------------------------\n\nTITLE: Configuring Preact with MDX v2 Core Compiler\nDESCRIPTION: Example of using the MDX v2 core compiler with Preact instead of React by setting the jsxImportSource option.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from '@mdx-js/mdx'\n\nconst result = await compile('# hi', {jsxImportSource: 'preact'})\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata and Navigation Configuration for MDX Document\nDESCRIPTION: Exports metadata information including authors, modification date, and publication date. Also sets the navigation sort order for this document in the navigation tree.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [{name: 'MDX Contributors'}],\n  modified: new Date('2024-07-04'),\n  published: new Date('2021-11-01')\n}\nexport const navSortSelf = 2\n```\n\n----------------------------------------\n\nTITLE: Expected output from remark-mdx processing\nDESCRIPTION: The result of processing MDX content with remark-mdx, showing the normalized MDX syntax in the output.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/remark-mdx.md#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nimport a from \"b\"\n\na <b/> c {1 + 1} d\n```\n\n----------------------------------------\n\nTITLE: Using @mdx-js/vue in Browsers with esm.sh\nDESCRIPTION: HTML snippet showing how to import the MDXProvider component from @mdx-js/vue in a browser environment using esm.sh with bundle parameter.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/vue.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {MDXProvider} from 'https://esm.sh/@mdx-js/vue@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Navigation Props\nDESCRIPTION: Type definitions for the navigation tree property using JSDoc syntax, importing Item type from sort.js component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @import {Item} from '../_component/sort.js'\n */\n\n/**\n * @typedef Props\n * @property {Item} navigationTree\n */\n```\n\n----------------------------------------\n\nTITLE: Using remark-mdx in browsers\nDESCRIPTION: HTML script tag example demonstrating how to import remark-mdx in a browser environment using the esm.sh CDN with bundling.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/remark-mdx.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import remarkMdx from 'https://esm.sh/remark-mdx@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Metadata\nDESCRIPTION: Initial configuration code that sets up author information and navigation sorting order for the MDX documentation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/gfm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2021-10-06')\n}\nexport const navSortSelf = 1\n```\n\n----------------------------------------\n\nTITLE: Including remark-mdx in a browser environment\nDESCRIPTION: HTML script tag example showing how to import remark-mdx in a browser environment using the esm.sh CDN with bundle option.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/remark-mdx/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import remarkMdx from 'https://esm.sh/remark-mdx@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: MDX Link Component Examples\nDESCRIPTION: Shows the markdown syntax for links and its equivalent JSX output.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/table-of-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n[MDX](https://mdxjs.com \"title\")\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <p><a href=\"https://mdxjs.com\" title=\"title\">MDX</a></p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Generated JSX Output for Math Notation\nDESCRIPTION: The equivalent JSX output generated from the MDX math example. Shows how the LaTeX expression is transformed into HTML with KaTeX classes for rendering.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/math.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <h1>\n    <span className=\"katex\">\n      <span className=\"katex-mathml\">\n        <math xmlns=\"http://www.w3.org/1998/Math/MathML\">…</math>\n      </span>\n      <span className=\"katex-html\" aria-hidden=\"true\">\n        …\n      </span>\n    </span>\n  </h1>\n</>\n```\n\n----------------------------------------\n\nTITLE: Installing remark-mdx with npm in Node.js\nDESCRIPTION: Command to install the remark-mdx package using npm in a Node.js environment (version 16+). This package is ESM only.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/remark-mdx/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install remark-mdx\n```\n\n----------------------------------------\n\nTITLE: Installing MDX v2 Core Compiler Package\nDESCRIPTION: Command to install the MDX v2 core compiler package along with React integration and GitHub Flavored Markdown support.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/mdx @mdx-js/react remark-gfm\n```\n\n----------------------------------------\n\nTITLE: MDX Comment for Content Splitting\nDESCRIPTION: An MDX-specific comment that serves as a marker for content splitting. This is commonly used to indicate where to truncate content for previews in blog systems.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v1.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{/* more */}\n```\n\n----------------------------------------\n\nTITLE: Importing remark-mdx in Deno\nDESCRIPTION: Example of importing the remark-mdx package in a Deno environment using the esm.sh CDN.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/remark-mdx/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport remarkMdx from 'https://esm.sh/remark-mdx@3'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Navigation Props\nDESCRIPTION: Defines TypeScript types for navigation tree props used in the page, importing Item type from sort component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @import {Item} from '../_component/sort.js'\n */\n\n/**\n * @typedef Props\n * @property {Item} navigationTree\n */\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for MDX Navigation Component\nDESCRIPTION: Imports the assert module from Node.js and the NavigationGroup component from a local nav component file. These dependencies are required for validation and rendering the navigation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport assert from 'node:assert/strict'\nimport {NavigationGroup} from '../_component/nav.jsx'\n```\n\n----------------------------------------\n\nTITLE: Equivalent JSX Output for Compiled Embed\nDESCRIPTION: Shows the equivalent JSX output after compiling the MDX with the embedded YouTube video.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/embed.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <p>Check out this video:</p>\n  <iframe\n    width=\"200\"\n    height=\"113\"\n    src=\"https://www.youtube.com/embed/dQw4w9WgXcQ?feature=oembed\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n    allowFullScreen\n    title=\"Rick Astley - Never Gonna Give You Up (Official Music Video)\"\n  ></iframe>\n</>\n```\n\n----------------------------------------\n\nTITLE: Embedding Content at Runtime with MDX Embed\nDESCRIPTION: Illustrates how to use MDX Embed to include a CodePen embed in an MDX file at runtime.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/embed.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport {CodePen} from 'mdx-embed'\n\nHere's a codepen, and some other blog post text.\n\n<CodePen codePenId=\"PNaGbb\" />\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Node Loader via NPM\nDESCRIPTION: Command to install the @mdx-js/node-loader package using npm. This package is ESM only and requires Node.js version 16 or higher.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/node-loader\n```\n\n----------------------------------------\n\nTITLE: Node.js Register Module\nDESCRIPTION: Module for registering the MDX loader in Node.js version 20 and higher\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/node-loader.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {register} from 'node:module'\n\nregister('@mdx-js/node-loader', import.meta.url)\n```\n\n----------------------------------------\n\nTITLE: Importing and defining TypeScript types for navigation components in MDX\nDESCRIPTION: Defines TypeScript interfaces for navigation components and imports types from external files. This code block uses JSX comment syntax to define the types needed for the navigation system.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * @import {Item} from '../_component/sort.js'\n   */\n\n  /**\n   * @typedef Props\n   * @property {Item} navigationTree\n   */\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Version Command for MDX Monorepo\nDESCRIPTION: Command for updating version numbers across all workspace packages in the MDX monorepo without creating a git tag.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/contribute.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm version minor --workspaces --no-git-tag-version\n```\n\n----------------------------------------\n\nTITLE: Installing MDX v2 Dependencies\nDESCRIPTION: Uninstalls the deprecated @mdx-js/runtime package and installs the recommended @mdx-js/mdx and @mdx-js/react packages for MDX v2.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm uninstall @mdx-js/runtime\nnpm install @mdx-js/mdx @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Fragment TypeScript Type Definition\nDESCRIPTION: Defines the Fragment type which represents children in JSX. It is typed as unknown to maintain flexibility.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ntype Fragment = unknown\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Component Usage\nDESCRIPTION: Simple example showing MDX syntax with a custom Planet component\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/injecting-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n# Hello *<Planet />*\n```\n\n----------------------------------------\n\nTITLE: MDXTag Component Implementation\nDESCRIPTION: React component that handles rendering of MDX elements with support for custom components and layouts.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/custom-pragma.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {Component} from 'react'\n\nimport {withMDXComponents} from './mdx-provider'\n\nconst defaults = {\n  inlineCode: 'code',\n  wrapper: 'div'\n}\n\nclass MDXTag extends Component {\n  render() {\n    const {\n      name,\n      parentName,\n      props: childProps = {},\n      children,\n      components = {},\n      Layout,\n      layoutProps\n    } = this.props\n\n    const Component =\n      components[`${parentName}.${name}`] ||\n      components[name] ||\n      defaults[name] ||\n      name\n\n    if (Layout) {\n      return (\n        <Layout components={components} {...layoutProps}>\n          <Component {...childProps}>{children}</Component>\n        </Layout>\n      )\n    }\n\n    return <Component {...childProps}>{children}</Component>\n  }\n}\n\nexport default withMDXComponents(MDXTag)\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/preact with npm\nDESCRIPTION: Command for installing the @mdx-js/preact package using npm in a Node.js environment (version 16+). This package is ESM only.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/preact/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @mdx-js/preact\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Documentation Metadata\nDESCRIPTION: Exports configuration metadata for the MDX documentation page, including author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/about.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2021-10-06')\n}\nexport const navSortSelf = 4\n```\n\n----------------------------------------\n\nTITLE: Initializing MDX Component Import and Metadata\nDESCRIPTION: Setup code for MDX documentation page showing component import and metadata configuration including author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\nexport const info = {\n  author: [\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2023-10-24')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Component in MDX Blog Post\nDESCRIPTION: An import statement for a Note component from a relative path, commonly used in MDX files to include React components.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\n```\n\n----------------------------------------\n\nTITLE: Importing MDXProvider in Deno\nDESCRIPTION: Example of importing the MDXProvider from @mdx-js/preact in Deno using esm.sh.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/preact.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MDXProvider} from 'https://esm.sh/@mdx-js/preact@3'\n```\n\n----------------------------------------\n\nTITLE: Importing Note Component in JavaScript/JSX\nDESCRIPTION: Imports the Note component from a relative path for use in the 404 page.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/404.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Note} from './_component/note.jsx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for MDX Page\nDESCRIPTION: Sets up metadata for the MDX page, including author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/embed.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2021-10-06')\n}\nexport const navSortSelf = 5\n```\n\n----------------------------------------\n\nTITLE: MDX v2 JSX Output Comparison\nDESCRIPTION: The JSX output from MDX v2 for a given MDX input, showing the improved handling of markdown within JSX elements in v2.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v2.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <div><em>hi</em>?</div>\n  <div>\n    <h1>hi?</h1>\n  </div>\n  <main>\n    <div>\n      <h1>hi?</h1>\n    </div>\n  </main>\n</>\n```\n\n----------------------------------------\n\nTITLE: Provider Import Source Path Update\nDESCRIPTION: Shows how to update the provider import source to use a local components file\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/injecting-components.mdx#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n@@ -1,5 +1,5 @@\n import {jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n-import {useMDXComponents as _provideComponents} from 'xxx'\n+import {useMDXComponents as _provideComponents} from 'file:///Users/tilde/…/mdx-components.js'\n```\n\n----------------------------------------\n\nTITLE: Importing @mdx-js/vue in Deno\nDESCRIPTION: Example of importing the MDXProvider component from @mdx-js/vue in a Deno environment using esm.sh.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/vue.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MDXProvider} from 'https://esm.sh/@mdx-js/vue@3'\n```\n\n----------------------------------------\n\nTITLE: Importing MDXProvider in Deno with esm.sh\nDESCRIPTION: Example of importing the MDXProvider from @mdx-js/react in a Deno environment using the esm.sh CDN.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/react/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MDXProvider} from 'https://esm.sh/@mdx-js/react@3'\n```\n\n----------------------------------------\n\nTITLE: Component Imports and Page Metadata\nDESCRIPTION: Imports required dependencies and defines page metadata including author, modification and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport assert from 'node:assert/strict'\nimport {NavigationGroup} from '../_component/nav.jsx'\n\nexport const info = {\n  author: [{name: 'MDX Contributors'}],\n  modified: new Date('2024-07-04'),\n  published: new Date('2021-11-01')\n}\nexport const navSortSelf = 3\n```\n\n----------------------------------------\n\nTITLE: Importing Note Component and Setting Page Metadata in JSX\nDESCRIPTION: Imports a Note component from a relative path and defines page metadata including author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/conf.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\n\nexport const info = {\n  author: [\n    {github: 'johno', name: 'John Otander'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2020-07-31')\n}\n```\n\n----------------------------------------\n\nTITLE: Using MDXProvider in browsers with esm.sh\nDESCRIPTION: Example of importing the MDXProvider in a browser environment using a script tag with the esm.sh CDN.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/react/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {MDXProvider} from 'https://esm.sh/@mdx-js/react@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Navigation Component Imports and Metadata Configuration\nDESCRIPTION: Imports required dependencies and defines page metadata including author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport assert from 'node:assert/strict'\nimport {NavigationGroup} from '../_component/nav.jsx'\n\nexport const info = {\n  author: [{name: 'MDX Contributors'}],\n  modified: new Date('2024-07-04'),\n  published: new Date('2021-11-01')\n}\nexport const navSortSelf = 6\n```\n\n----------------------------------------\n\nTITLE: MDX v1 vs v2 Comparison Example\nDESCRIPTION: An MDX example showing how HTML and markdown combinations are handled differently in MDX v1 versus v2.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v2.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<div>*hi*?</div>\n\n<div>\n  # hi?\n</div>\n\n<main>\n  <div>\n\n    # hi?\n\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting a Layout in MDX\nDESCRIPTION: This snippet demonstrates how to import a layout component and then export it as the default in an MDX file.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/using-mdx.mdx#2025-04-23_snippet_11\n\nLANGUAGE: mdx\nCODE:\n```\nexport {Layout as default} from './components.js'\n```\n\n----------------------------------------\n\nTITLE: Node.js Experimental Warning for Custom ESM Loaders\nDESCRIPTION: Warning message displayed when using custom ESM loaders in Node 18 and lower, indicating that this is an experimental feature that might change.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n(node:20718) ExperimentalWarning: Custom ESM Loaders is an experimental feature and might change at any > time\n(Use `node --trace-warnings ...` to show where the warning was created)\n```\n\n----------------------------------------\n\nTITLE: MDX Metadata Configuration\nDESCRIPTION: Exports configuration data including author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/table-of-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'johno', name: 'John Otander'},\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2020-03-11')\n}\nexport const navSortSelf = 4\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for MDX Page\nDESCRIPTION: Imports the Note component from a relative path to be used in the MDX document.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/projects.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Node Loader\nDESCRIPTION: Command to install the @mdx-js/node-loader package using npm\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/node-loader.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/node-loader\n```\n\n----------------------------------------\n\nTITLE: Creating MDX Heading with Vite\nDESCRIPTION: Simple MDX heading component using H1 syntax. This demonstrates the basic structure of an MDX file that can be processed by Vite.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/rollup/test/vite-entry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n# Hello Vite\n```\n\n----------------------------------------\n\nTITLE: Exporting Page Metadata for MDX\nDESCRIPTION: Exports page metadata including author information and publication dates. This information is likely used for displaying authorship details and timestamps on the rendered page.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/projects.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'johno', name: 'John Otander'}\n  ],\n  modified: new Date('2021-11-01'),\n  published: new Date('2018-08-11')\n}\n```\n\n----------------------------------------\n\nTITLE: MDX v2 Incorrect vs Correct JSX Usage\nDESCRIPTION: Shows incorrect and correct ways to use heading elements with markdown in MDX v2, based on line breaks rather than HTML semantics.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_16\n\nLANGUAGE: mdx\nCODE:\n```\n<h1 className=\"main\">\n  Don't do this: it's a `p` in an `h1`\n</h1>\n\n<h1 className=\"main\">Do this: an `h1` with `code`</h1>\n```\n\n----------------------------------------\n\nTITLE: MDX Example with Component Import and Usage\nDESCRIPTION: This code example demonstrates a typical MDX file that imports a Chart component and uses a year variable. It combines markdown syntax with JSX components to create interactive content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport {Chart} from './snowfall.js'\nexport const year = 2023\n\n# Last year's snowfall\n\nIn {year}, the snowfall was above average.\nIt was followed by a warm spring which caused\nflood conditions in many of the nearby rivers.\n\n<Chart color=\"#fcb32c\" year={year} />\n```\n\n----------------------------------------\n\nTITLE: NPM Publish Command for MDX Workspaces\nDESCRIPTION: Command to publish all packages in the MDX monorepo workspaces to the npm registry.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/contribute.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish --workspaces\n```\n\n----------------------------------------\n\nTITLE: Exporting Home Component as Default in JavaScript/JSX\nDESCRIPTION: Sets the Home component as the default export for this module and excludes it from navigation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/404.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport {Home as default} from './_component/home.jsx'\nexport const navExclude = true\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Page Metadata\nDESCRIPTION: Exports configuration objects containing author information, modification dates, and navigation sorting parameters for the MDX playground page.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/playground.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'johno', name: 'John Otander'},\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2023-12-24'),\n  published: new Date('2021-09-13')\n}\nexport const navSortSelf = 5\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Releases Page\nDESCRIPTION: Command to open the GitHub releases page to add a changelog entry for the new MDX release.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/contribute.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopen https://github.com/mdx-js/mdx/releases\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Metadata in JavaScript\nDESCRIPTION: This snippet defines metadata for the page, including author information and publication dates. It also sets a navigation sort order.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/sponsor.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2021-10-06'),\n}\nexport const navSortSelf = 3\n```\n\n----------------------------------------\n\nTITLE: MDX v2 JSX Without Blank Lines Example\nDESCRIPTION: Demonstrates how MDX v2 allows JSX and markdown to be used without requiring blank lines between them.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_12\n\nLANGUAGE: mdx\nCODE:\n```\n<hgroup>\n# This is a heading now\n</hgroup>\n```\n\n----------------------------------------\n\nTITLE: Basic MDX File with Math Notation\nDESCRIPTION: Example MDX file containing a mathematical expression (square root of a^2 + b^2) using LaTeX notation within a heading.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/math.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n# $$\\sqrt{a^2 + b^2}$$\n```\n\n----------------------------------------\n\nTITLE: Running Node with Register Import\nDESCRIPTION: Command to run a Node.js application using the modern import approach with a register file instead of the --loader flag.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnode --import ./register.js example.js\n```\n\n----------------------------------------\n\nTITLE: TypeScript CompileOptions Interface\nDESCRIPTION: TypeScript type definition for the CompileOptions configuration object used in the compile function.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * Configuration for `compile`\n */\ntype CompileOptions = Omit<ProcessorOptions, 'format'> & {\n  /**\n   * Format of `file` (default: `'detect'`).\n   */\n  format?: 'detect' | 'md' | 'mdx' | null | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Rendered MDX\nDESCRIPTION: The HTML output generated when rendering the example MDX file. The JSX component is rendered and integrated into the Markdown heading.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h1>Hello, World!</h1>\n```\n\n----------------------------------------\n\nTITLE: Importing MDXProvider in Browser\nDESCRIPTION: HTML script tag to import MDXProvider from @mdx-js/preact in browsers using esm.sh.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/preact.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {MDXProvider} from 'https://esm.sh/@mdx-js/preact@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Bundling ESM Package as CJS with esbuild\nDESCRIPTION: This shell command demonstrates how to use esbuild to bundle the ESM package @mdx-js/mdx as CommonJS in a vendor directory. This provides a solution for tools that don't support ESM, such as Electron.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx esbuild @mdx-js/mdx --bundle --platform=node --outfile=vendor/mdx.js\n```\n\n----------------------------------------\n\nTITLE: Alternative Direct Component Usage in Vue\nDESCRIPTION: Example showing how to pass components directly to an MDX component without using MDXProvider. This demonstrates a simplified approach for providing custom components.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/vue/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ncreateApp(Post, {components: {h1: 'h2'}})\n```\n\n----------------------------------------\n\nTITLE: Browser Import Using ESM\nDESCRIPTION: HTML script tag showing how to import MDXProvider in browser using esm.sh\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/react.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {MDXProvider} from 'https://esm.sh/@mdx-js/react@3?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Diff of Compiled MDX Output with Custom JSX Runtime\nDESCRIPTION: Shows the difference in compiled output when using custom JSX runtime settings, replacing React with Preact.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-import React from 'react'\n+import preact from 'preact/compat'\n\nexport function Thing() {\n-  return React.createElement(React.Fragment, null, 'World!')\n+  return preact.createElement(preact.Fragment, null, 'World!')\n}\n…\n```\n\n----------------------------------------\n\nTITLE: Importing MDXProvider in Deno using esm.sh\nDESCRIPTION: Example showing how to import the MDXProvider component from @mdx-js/vue using esm.sh in a Deno environment.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/vue/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MDXProvider} from 'https://esm.sh/@mdx-js/vue@3'\n```\n\n----------------------------------------\n\nTITLE: Diff of Compiled MDX Output with Provider Import Source\nDESCRIPTION: Demonstrates the changes in compiled output when using a custom provider import source, including the addition of useMDXComponents.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from 'react/jsx-runtime'\n+import {useMDXComponents as _provideComponents} from '@mdx-js/react'\n\nexport function Thing() {\n  return _jsx(_Fragment, {children: 'World'})\n}\n\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: 'h1',\n+    ..._provideComponents(),\n    ...props.components\n  }\n  return _jsxs(_components.h1, {children: ['Hello ', _jsx(Thing, {})]})\n}\n\nexport default function MDXContent(props = {}) {\n-  const {wrapper: MDXLayout} = props.components || {}\n+  const {wrapper: MDXLayout} = {\n+    ..._provideComponents(),\n+    ...props.components\n+  }\n\n  return MDXLayout\n    ? _jsx(MDXLayout, {...props, children: _jsx(_createMdxContent, {})})\n    : _createMdxContent()\n```\n\n----------------------------------------\n\nTITLE: Loading MDX in Deno\nDESCRIPTION: Example of importing the compile function from MDX in Deno using esm.sh.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from 'https://esm.sh/@mdx-js/mdx@3'\n```\n\n----------------------------------------\n\nTITLE: MDX v2 JavaScript Expressions\nDESCRIPTION: Demonstrates using JavaScript expressions in MDX v2 as an escape hatch for direct JSX or strings without markdown processing.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v2.mdx#2025-04-23_snippet_18\n\nLANGUAGE: mdx\nCODE:\n```\n{\n  <h1>\n    This just JSX, these *asterisks* have no meaning.\n  </h1>\n}\n\nThis is just {'`text`'}, not code.\n```\n\n----------------------------------------\n\nTITLE: MDX Note Component with Legacy Warning\nDESCRIPTION: A React component usage example in MDX that displays a legacy notice with Markdown formatting inside. This demonstrates how JSX components can contain Markdown content in MDX.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v1.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Note type=\"legacy\">\n  **Note**: This is an old blog post.\n  [ZEIT is now Vercel](https://rauchg.com/2020/vercel).\n  An \"`@mdx` pragma\" is no longer needed.\n  The below is kept as is for historical purposes.\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Importing React Component and Defining Metadata in MDX\nDESCRIPTION: Front matter setup for an MDX blog post that imports a Note component and exports author information and publication dates.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/v2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\nexport const info = {\n  author: [\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2022-02-01')\n}\n```\n\n----------------------------------------\n\nTITLE: Using Note Component in JSX/Markdown\nDESCRIPTION: Utilizes the imported Note component to display additional information on the 404 page, with Markdown content inside.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/404.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Note type=\"info\">\n  **Note**: Did you come here from a website linking to it?\n  Pretty sure this page used to exist?\n  Please [open an issue](https://github.com/mdx-js/mdx/issues/new) to let us\n  know so we can fix it!\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Importing navigation components and setting page metadata for MDX documentation\nDESCRIPTION: Imports the necessary components for navigation and defines metadata for the documentation page including author information and publication dates. This establishes the structure for the documentation content.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport assert from 'node:assert/strict'\nimport {NavigationGroup} from '../_component/nav.jsx'\n\nexport const info = {\n  author: [{name: 'MDX Contributors'}],\n  modified: new Date('2024-07-04'),\n  published: new Date('2021-11-01')\n}\nexport const navSortSelf = 1\n```\n\n----------------------------------------\n\nTITLE: Legacy Note Component Usage in JSX\nDESCRIPTION: Demonstrates usage of the Note component with markdown content to display a legacy notice.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/conf.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Note type=\"legacy\">\n  **Note**: This is an old blog post.\n  The below is kept as is for historical purposes.\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Importing React Component in MDX Document\nDESCRIPTION: Imports a Note component from a relative path for use in the MDX documentation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/contribute.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Navigation with Self-Executing Function in MDX\nDESCRIPTION: A self-executing function that extracts the guides category from the navigation tree, validates its existence with assert, and renders a NavigationGroup component with the guide items. Includes descriptions for each navigation item.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  (function () {\n    const navigationTree = props.navigationTree\n    const category = navigationTree.children.find(function (item) {\n      return item.name === '/guides/'\n    })\n    assert(category)\n\n    return (\n      <nav>\n        <NavigationGroup items={category.children} includeDescription />\n      </nav>\n    )\n  })()\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Tree Rendering Function\nDESCRIPTION: JSX function that processes the navigation tree to render package documentation links, filtering for the packages directory and rendering using NavigationGroup component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n(function () {\n    const navigationTree = props.navigationTree\n    const category = navigationTree.children.find(function (item) {\n      return item.name === '/packages/'\n    })\n    assert(category)\n\n    return (\n      <nav>\n        <NavigationGroup items={category.children} includeDescription />\n      </nav>\n    )\n  })()\n```\n\n----------------------------------------\n\nTITLE: Importing Note Component and Setting Page Metadata in MDX\nDESCRIPTION: This code snippet imports a custom Note component and sets page metadata including author information and publication dates. It also configures navigation sorting for the page in the MDX documentation site.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/support.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\n\nexport const info = {\n  author: [\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2019-07-03')\n}\nexport const navSortSelf = 1\n```\n\n----------------------------------------\n\nTITLE: Running Node with MDX Loader\nDESCRIPTION: Command to run a Node.js application with the MDX loader enabled using the --loader flag. This allows Node to process and import MDX files.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode --loader=@mdx-js/node-loader example.js\n```\n\n----------------------------------------\n\nTITLE: Defining MDX Document Metadata\nDESCRIPTION: Sets up metadata for the MDX document, including author information and publication dates. This metadata is exported for use by the documentation framework.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/contribute.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const info = {\n  author: [\n    {github: 'wooorm', name: 'Titus Wormer'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2018-11-04')\n}\nexport const navSortSelf = 2\n```\n\n----------------------------------------\n\nTITLE: Invalid JSX Tag Content\nDESCRIPTION: Shows various examples of invalid JSX tag syntax.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<\n<.>\n</\n</.>\n<a\n<a?>\n<a:\n<a:+>\n<a.\n<a./>\n<a b\n<a b!>\n<a b:\n<a b:1>\n<a b=\n<a b=>\n<a b=\"\n<a b='\n<a b={\n<a/\n<a/->\n```\n\n----------------------------------------\n\nTITLE: Using JSX Note Component in MDX\nDESCRIPTION: Demonstrates how to use a custom Note component within MDX content with a specific type and Markdown content inside.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/contribute.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Note type=\"important\">\n  **Important**: before participating in our community, please read our\n  [code of conduct][coc].\n  By interacting with this repository, organization, or community you agree to\n  abide by its terms.\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Multiple Values in Expression\nDESCRIPTION: Shows an example of multiple values in a single expression context.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\na {'b' 'c'} d\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/rollup with npm\nDESCRIPTION: Command to install the @mdx-js/rollup package using npm. This package is ESM only and requires Node.js version 16+.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/rollup/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mdx-js/rollup\n```\n\n----------------------------------------\n\nTITLE: Missing BaseUrl Error in MDX\nDESCRIPTION: Demonstrates the error when options.baseUrl is missing while using export, import, or import.meta.url with function-body output format.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nUnexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/react with npm\nDESCRIPTION: Command to install the @mdx-js/react package using npm package manager\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/react.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type Imports for MDX Component\nDESCRIPTION: Imports the Item type from a sort component and defines Props interface for the navigation tree structure. This establishes the type system for the navigation component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/guides/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * @import {Item} from '../_component/sort.js'\n   */\n\n  /**\n   * @typedef Props\n   * @property {Item} navigationTree\n   */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDXProvider in Deno with esm.sh\nDESCRIPTION: Example of importing the MDXProvider component from @mdx-js/preact in a Deno environment using the esm.sh CDN.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/preact/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {MDXProvider} from 'https://esm.sh/@mdx-js/preact@3'\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Package with npm\nDESCRIPTION: Command to install @mdx-js/mdx package using npm package manager.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/mdx.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/mdx\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsor Table in JSX\nDESCRIPTION: This code snippet creates a table displaying sponsor logos and links. It includes major sponsors like Vercel, Motif, HashiCorp, GitBook, and Gatsby, along with smaller sponsors.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/sponsor.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\n  <table>\n    <tr valign=\"middle\">\n      <td width=\"20%\" align=\"center\" rowSpan={2} colSpan={2}>\n        <a href=\"https://vercel.com\" rel=\"sponsored nofollow\">Vercel</a><br /><br />\n        <a href=\"https://vercel.com\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"20%\" align=\"center\" rowSpan={2} colSpan={2}>\n        <a href=\"https://motif.land\" rel=\"sponsored nofollow\">Motif</a><br /><br />\n        <a href=\"https://motif.land\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/74457950?s=256&v=4\" width=\"128\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"20%\" align=\"center\" rowSpan={2} colSpan={2}>\n        <a href=\"https://www.hashicorp.com\" rel=\"sponsored nofollow\">HashiCorp</a><br /><br />\n        <a href=\"https://www.hashicorp.com\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/761456?s=256&v=4\" width=\"128\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"20%\" align=\"center\" rowSpan={2} colSpan={2}>\n        <a href=\"https://www.gitbook.com\" rel=\"sponsored nofollow\">GitBook</a><br /><br />\n        <a href=\"https://www.gitbook.com\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/7111340?s=256&v=4\" width=\"128\" /></a>\n      </td>\n      <td width=\"20%\" align=\"center\" rowSpan={2} colSpan={2}>\n        <a href=\"https://www.gatsbyjs.org\" rel=\"sponsored nofollow\">Gatsby</a><br /><br />\n        <a href=\"https://www.gatsbyjs.org\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n    </tr>\n    <tr valign=\"middle\" />\n    <tr valign=\"middle\">\n      <td width=\"20%\" align=\"center\" rowSpan={2} colSpan={2}>\n        <a href=\"https://www.netlify.com\" rel=\"sponsored nofollow\">Netlify</a><br /><br />\n        {/* OC has a sharper image */}\n        <a href=\"https://www.netlify.com\" rel=\"sponsored nofollow\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"10%\" align=\"center\">\n        <a href=\"https://www.coinbase.com\" rel=\"sponsored nofollow\">Coinbase</a><br /><br />\n        <a href=\"https://www.coinbase.com\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/1885080?s=256&v=4\" width=\"64\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"10%\" align=\"center\">\n        <a href=\"https://themeisle.com\" rel=\"sponsored nofollow\">ThemeIsle</a><br /><br />\n        <a href=\"https://themeisle.com\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"10%\" align=\"center\">\n        <a href=\"https://expo.io\" rel=\"sponsored nofollow\">Expo</a><br /><br />\n        <a href=\"https://expo.io\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"10%\" align=\"center\">\n        <a href=\"https://boostnote.io\" rel=\"sponsored nofollow\">Boost Note</a><br /><br />\n        <a href=\"https://boostnote.io\" rel=\"sponsored nofollow\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"10%\" align=\"center\">\n        <a href=\"https://markdown.space\" rel=\"sponsored nofollow\">Markdown Space</a><br /><br />\n        <a href=\"https://markdown.space\" rel=\"sponsored nofollow\"><img src=\"https://images.opencollective.com/markdown-space/e1038ed/logo/128.png\" width=\"64\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"10%\" align=\"center\">\n        <a href=\"https://www.holloway.com\" rel=\"sponsored nofollow\">Holloway</a><br /><br />\n        <a href=\"https://www.holloway.com\" rel=\"sponsored nofollow\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\" style={{display: 'block', maxWidth: '100%'}} /></a>\n      </td>\n      <td width=\"10%\" />\n      <td width=\"10%\" />\n    </tr>\n    <tr valign=\"middle\">\n      <td width=\"100%\" align=\"center\" colSpan={8}>\n        <br />\n        <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n        <br /><br />\n      </td>\n    </tr>\n  </table>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/esbuild Package\nDESCRIPTION: Command to install the @mdx-js/esbuild package using npm. Requires Node.js version 16 or higher. The package is ESM only.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/esbuild.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/esbuild\n```\n\n----------------------------------------\n\nTITLE: Navigation Tree Rendering Function\nDESCRIPTION: Self-executing function that processes the navigation tree to find and render the community section navigation using the NavigationGroup component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n(function () {\n    const navigationTree = props.navigationTree\n    const category = navigationTree.children.find(function (item) {\n      return item.name === '/community/'\n    })\n    assert(category)\n\n    return (\n      <nav>\n        <NavigationGroup items={category.children} includeDescription />\n      </nav>\n    )\n  })()\n```\n\n----------------------------------------\n\nTITLE: Invalid Expression Syntax in MDX\nDESCRIPTION: Shows examples of invalid JavaScript expressions within curly braces.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\na {const b = 'c'} d\n```\n\nLANGUAGE: mdx\nCODE:\n```\na {!} d\n```\n\n----------------------------------------\n\nTITLE: Invalid JSX Spread Syntax\nDESCRIPTION: Demonstrates incorrect usage of multiple spreads in JSX attributes.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<div {...a, ...b} />\n```\n\n----------------------------------------\n\nTITLE: TypeScript reference for using MDX node types\nDESCRIPTION: TypeScript setup showing how to register MDX node types with @types/mdast when working with the syntax tree in a remark plugin.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/remark-mdx.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Register MDX nodes in mdast:\n/// <reference types=\"remark-mdx\" />\n\n/**\n * @import {Root} from 'mdast'\n */\n\nimport {visit} from 'unist-util-visit'\n\nfunction myRemarkPlugin() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, function (node) {\n      console.log(node) // `node` can now be one of the MDX nodes.\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Type in TypeScript for MDX.js\nDESCRIPTION: Simple TypeScript type definition for Fragment, which represents child elements in JSX. It's defined as an unknown type to maintain flexibility across different frameworks.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/mdx/readme.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ntype Fragment = unknown\n```\n\n----------------------------------------\n\nTITLE: Invalid Import Syntax in MDX\nDESCRIPTION: Shows an example of invalid import syntax that triggers a parsing error.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/docs/troubleshooting-mdx.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport 1/1\n```\n\n----------------------------------------\n\nTITLE: Exporting Navigation Sort Order\nDESCRIPTION: Exports a constant that determines the sort order of this page in the navigation structure.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/projects.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const navSortSelf = 5\n```\n\n----------------------------------------\n\nTITLE: Importing Note Component in MDX (JSX)\nDESCRIPTION: This snippet imports a Note component from a relative path and exports metadata for the MDX file.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\n\nexport const info = {\n  author: [\n    {github: 'johno', name: 'John Otander'}\n  ],\n  modified: new Date('2025-01-27'),\n  published: new Date('2019-04-04')\n}\nexport const navExclude = true\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Versioning and Releasing MDX\nDESCRIPTION: Series of git commands to commit changes, create a tag for the new version, and push changes to the remote repository.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/contribute.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --all --message 1.2.3 && git tag 1.2.3 && git push && git push --tags\n```\n\n----------------------------------------\n\nTITLE: MDXTag Template String Generation\nDESCRIPTION: Code snippet showing how MDXTag elements are generated in the hast to estree conversion process.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/blog/custom-pragma.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nreturn `<MDXTag name=\"${node.tagName}\" components={components}${\n  parentNode.tagName ? ` parentName=\"${parentNode.tagName}\"` : ''\n}${props ? ` props={${props}}` : ''}>${children}</MDXTag>`\n```\n\n----------------------------------------\n\nTITLE: Importing Note Component\nDESCRIPTION: Imports the Note component from a relative path for use in the MDX documentation.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/community/about.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Note} from '../_component/note.jsx'\n```\n\n----------------------------------------\n\nTITLE: Node.js 20+ Warning for Experimental Loader Usage\nDESCRIPTION: Warning message displayed in Node 20 and higher, suggesting the use of register() instead of --experimental-loader flag for loading custom modules.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/node-loader/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n(node:20908) ExperimentalWarning: `--experimental-loader` may be removed in the future; instead use > `register()`:\n--import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from > \"node:url\"; register(\"%40mdx-js/node-loader\", pathToFileURL(\"./\"));'\n```\n\n----------------------------------------\n\nTITLE: Example MDX Component Definition\nDESCRIPTION: Sample MDX file showing component export and usage within markdown\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/node-loader.md#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport function Thing() {\n  return <>World!</>\n}\n\n# Hello, <Thing />\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for MDX v1 (Bash)\nDESCRIPTION: This command removes @mdx-js/tag and adds @mdx-js/react, which is necessary for upgrading to MDX v1.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/migrating/v1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @mdx-js/tag\nyarn add @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/vue with npm in Node.js\nDESCRIPTION: Command to install the @mdx-js/vue package using npm in a Node.js environment (version 16+).\nSOURCE: https://github.com/mdx-js/mdx/blob/main/packages/vue/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/vue\n```\n\n----------------------------------------\n\nTITLE: Alternative Direct Component Passing in Vue\nDESCRIPTION: A simplified approach to provide custom components directly to MDX content in Vue without using the MDXProvider wrapper component.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/vue.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ncreateApp(Post, {components: {h1: 'h2'}})\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/preact with npm\nDESCRIPTION: Command to install the @mdx-js/preact package using npm in Node.js (version 16+).\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/preact.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mdx-js/preact\n```\n\n----------------------------------------\n\nTITLE: Installing @mdx-js/rollup with npm\nDESCRIPTION: Command to install the @mdx-js/rollup package using npm. This package is ESM only and requires Node.js version 16 or higher.\nSOURCE: https://github.com/mdx-js/mdx/blob/main/docs/packages/rollup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mdx-js/rollup\n```"
  }
]