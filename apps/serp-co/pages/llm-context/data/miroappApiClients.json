[
  {
    "owner": "miroapp",
    "repo": "api-clients",
    "content": "TITLE: Miro API Express Example\nDESCRIPTION: This code snippet showcases a complete integration of the Miro API within an Express.js application. It handles user authentication using OAuth 2.0, retrieves a list of boards accessible to the authenticated team, and displays them in a basic HTML format. The snippet depends on the `@mirohq/miro-api`, `express`, and `express-session` packages. It uses `express-session` to maintain user sessions and stores the Miro API access token. The `Miro` object is instantiated, and its methods `isAuthorized`, `getAuthUrl`, and `exchangeCodeForAccessToken` are used for authentication flow. The snippet also uses the `MiroApi` object to retrieve boards. Note that the placeholder `<RANDOMLY-GENERATED-SECRET-STRING>` should be replaced with a secure, randomly generated string for production.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst {Miro} = require('@mirohq/miro-api')\nconst session = require('express-session')\n\nconst miro = new Miro()\n\nconst app = express()\napp.use(\n  session({\n    secret: '<RANDOMLY-GENERATED-SECRET-STRING>',\n    resave: false,\n    saveUninitialized: true,\n  }),\n)\n\napp.get('/', async (req, res) => {\n  if (!(await miro.isAuthorized(req.session.id))) {\n    res.redirect(miro.getAuthUrl())\n    return\n  }\n\n  res.contentType('html')\n  res.write('List of boards available to the team:')\n  res.write('<ul>')\n\n  const api = miro.as(req.session.id)\n\n  for await (const board of api.getAllBoards()) {\n    res.write(`<li><a href=\"${board.viewLink}\">${board.name}</a></li>`)\n  }\n  res.write('</ul>')\n  res.send()\n})\n\napp.get('/auth/miro/callback', async (req, res) => {\n  await miro.exchangeCodeForAccessToken(req.session.id, req.query.code)\n  res.redirect('/')\n})\n\napp.listen(4000, () => console.log('Started server on http://127.0.0.1:4000'))\n```\n\n----------------------------------------\n\nTITLE: Express Session Storage Implementation in Javascript\nDESCRIPTION: This snippet demonstrates how to implement the Storage interface using express-session middleware. It creates a new Miro instance for each request, loads the Miro state from the session storage, and saves the Miro state back to the session storage. Requires express and express-session to be installed and configured.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/implement-storage.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up session middleware before: 'app.use(session({...}))'\napp.use((req, res, next) => {\n  // Create a separate 'Miro' instance for each request\n  req.miro = new Miro({\n    // Define the storage implementation inline\n    storage: {\n      // Load the 'Miro' state from the session object, if it exists\n      get(_userId) {\n        return req.session.state\n      },\n\n      // Store the 'Miro' state in the session object\n      set(_userId, state) {\n        req.session.state = state\n      },\n    },\n  })\n\n  next()\n})\n```\n\n----------------------------------------\n\nTITLE: Fastify App with Miro Integration\nDESCRIPTION: This example demonstrates a simple app using the Fastify framework with Miro integration. It handles user authorization, access token exchange, and retrieving board details.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Miro} from '@mirohq/miro-api'\nimport Fastify from 'fastify'\nimport fastifyCookie from '@fastify/cookie'\n\nconst miro = new Miro()\n\nconst app = Fastify()\napp.register(fastifyCookie)\n\n// Generate user IDs for new sessions\napp.addHook('preHandler', (request, reply, next) => {\n  if (!request.cookies.userId) {\n    const userId = Math.random()\n    reply.setCookie('userId', userId)\n    request.cookies.userId = userId\n  }\n  next()\n})\n\n// Exchange the temp code for an access token in the OAuth2 redirect handler\napp.get('/auth/miro/callback', async (req, reply) => {\n  await miro.exchangeCodeForAccessToken(req.cookies.userId, req.query.code)\n  reply.redirect('/')\n})\n\napp.get('/', async (req, reply) => {\n  // If user did not authorize the app, then redirect them to auth url\n  if (!(await miro.isAuthorized(req.cookies.userId))) {\n    reply.redirect(miro.getAuthUrl())\n    return\n  }\n\n  // Initialize the API for the current user\n  const api = miro.as(req.cookies.userId)\n\n  // Print the detail about first returned board\n  for await (const board of api.getAllBoards()) {\n    return board\n  }\n})\n\nawait app.listen({port: 4000})\n```\n\n----------------------------------------\n\nTITLE: Set Up Callback Route\nDESCRIPTION: This code snippet sets up a route handler for the `/auth/miro/callback` endpoint.  It exchanges the authorization code received from Miro for an access token using `miro.exchangeCodeForAccessToken()`, associating the token with the user's session ID. It then redirects the user back to the application's root.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/auth/miro/callback', async (req, res) => {\n  await miro.exchangeCodeForAccessToken(req.session.id, req.query.code)\n  res.redirect('/')\n})\n```\n\n----------------------------------------\n\nTITLE: Redis Storage Implementation in Javascript\nDESCRIPTION: This snippet demonstrates how to implement the Storage interface using Redis as a backend. It defines a RedisStorage class that handles connecting to a Redis instance, fetching state, saving state, and deleting state from Redis. Requires the 'redis' package.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/implement-storage.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst redis = require('redis')\n\nclass RedisStorage {\n  // Initiate a connection to the Redis instance.\n  // On subsequent calls, it returns the same Redis connection\n  async _getClient() {\n    if (!this.redisClient) {\n      const client = redis.createClient()\n      await client.connect()\n      this.redisClient = client\n    }\n    return this.redisClient\n  }\n\n  // Return the state from Redis, if this data exists\n  async get(userId) {\n    const client = await this._getClient()\n    const value = await client.get(userId.toString())\n    if (!value) return undefined\n    return JSON.parse(value)\n  }\n\n  // Store the state in Redis.\n  // If the state is undefined, the corresponding Redis key is deleted\n  async set(userId, state) {\n    const client = await this._getClient()\n\n    // Delete the state, if it's undefined\n    if (!state) return await client.del(userId.toString())\n\n    // Store the state in Redis\n    await client.set(userId.toString(), JSON.stringify(state))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginate Boards using AsyncGenerator\nDESCRIPTION: This code shows how to use an `AsyncGenerator` to paginate through all boards using the `getAllBoards` method. It iterates through each board and logs its view link, stopping if a condition is met.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfor await (const board of api.getAllBoards()) {\n  console.log(board.viewLink)\n  if (shouldStop()) {\n    // Stop requesting additional pages from the API\n    break\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Render List of Boards\nDESCRIPTION: This code fetches a list of boards available to the team via the Miro API. It uses the `miro.as()` method to get an API client authenticated for the current user, then iterates through the boards and generates an HTML list with links to each board. The list is then sent as the response.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Inside the `app.get('/', ...` handler\n\nres.contentType('html')\nres.write('List of boards available to the team:')\nres.write('<ul>')\n\nconst api = miro.as(req.session.id)\n\nfor await (const board of api.getAllBoards()) {\n  res.write(`<li><a href=\"${board.viewLink}\">${board.name}</a></li>`)\n}\n\nres.write('</ul>')\nres.send()\n```\n\n----------------------------------------\n\nTITLE: Retrieve Miro Boards - JavaScript\nDESCRIPTION: This JavaScript code snippet retrieves a list of all boards accessible to the user in the team where the app is installed using the Miro API client. It requires the `@mirohq/miro-api` package to be installed. Replace `<YOUR_APP_ACCESS_TOKEN>` with the actual access token obtained during app installation.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {MiroApi} = require('@mirohq/miro-api')\nconst api = new MiroApi('<YOUR_APP_ACCESS_TOKEN>')\n\nconst app = (async function () {\n  for await (const board of await api.getAllBoards()) {\n    console.log(board)\n  }\n})()\n```\n\n----------------------------------------\n\nTITLE: Implement Miro Storage Interface\nDESCRIPTION: This code snippet defines the interface for custom storage implementations. It requires `get` and `set` methods for retrieving and storing state information for a given user ID.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Storage {\n  get(userId: ExternalUserId): Promise<State | undefined>\n  set(userId: ExternalUserId, state: State): Awaitable<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Miro with Client Credentials\nDESCRIPTION: This code snippet shows how to initialize the Miro client with client ID, client secret, and redirect URL.  These values are used for OAuth authorization.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Miro} from '@mirohq/miro-api'\n\nconst miro = new Miro({\n  clientId: '<your_app_client_id>>',\n  clientSecret: '<your_app_client_secret>',\n  redirectUrl: 'https://example.com/miro_redirect_url',\n})\n```\n\n----------------------------------------\n\nTITLE: Miro API Usage with Express Session in Javascript\nDESCRIPTION: This snippet demonstrates how to use the Miro API with the express-session storage. It checks if the user is authorized and redirects to the Miro auth URL if not. It relies on the Miro instance being attached to the request object as req.miro, which should happen in middleware.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/implement-storage.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/', async (req, res) => {\n  if (!await req.miro.isAuthorized(req.session.id)) {\n    res.redirect(req.miro.getAuthUrl())\n    return\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Miro Board Response - Typescript\nDESCRIPTION: This Typescript snippet displays the structure and information contained within the `Board` object as it will be returned from the Miro API. The response contains metadata such as the board's ID, creation and modification timestamps, owner, team, and policy settings.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nBoard {\n  _api: MiroApi {\n    accessToken: '<YOUR_APP_ACCESS_TOKEN>',\n    basePath: 'https://api.miro.com',\n    logger: undefined,\n    httpTimeout: undefined\n  },\n  id: 'uZyVOJkVFXk=',\n  createdAt: 2022-09-08T15:04:41.000Z,\n  createdBy: UserInfoShort {\n    id: '3074457351234567890',\n    name: 'Keyser Söze',\n    type: 'user'\n  },\n  currentUserMembership: BoardMember {\n    id: '3074457351234567890',\n    name: 'Keyser Söze',\n    role: 'owner',\n    type: 'board_member'\n  },\n  description: 'Public board to test vague plans for world domination',\n  modifiedAt: 2022-09-08T15:05:54.000Z,\n  modifiedBy: UserInfoShort {\n    id: '3074457351234567890',\n    name: 'Keyser Söze',\n    type: 'user'\n  },\n  name: 'A very secret public board',\n  owner: UserInfoShort {\n    id: '3074457351234567890',\n    name: 'Keyser Söze',\n    type: 'user'\n  },\n  picture: undefined,\n  policy: BoardPolicy {\n    permissionsPolicy: BoardPermissionsPolicy {\n      collaborationToolsStartAccess: 'all_editors',\n      copyAccess: 'team_editors',\n      sharingAccess: 'team_members_with_editing_rights'\n    },\n    sharingPolicy: BoardSharingPolicy {\n      inviteToAccountAndBoardLinkAccess: 'editor',\n      organizationAccess: 'private',\n      access: 'view',\n      teamAccess: 'private'\n    }\n  },\n  team: Team {\n    id: '3074457359876543210',\n    name: 'The usual suspects',\n    picture: undefined,\n    type: 'team'\n  },\n  type: 'board',\n  viewLink: 'https://miro.com/app/board/uZyVOJkVFXk='\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect to Authorization Page\nDESCRIPTION: This code snippet sets up a route handler for the app's entry point (`/`). It checks if the user is authorized. If not, it redirects the user to the Miro authorization URL generated by `miro.getAuthUrl()`.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/', async (req, res) => {\n  if (!(await miro.isAuthorized(req.session.id))) {\n    res.redirect(miro.getAuthUrl())\n    return\n  }\n\n  // TODO: see step 7.\n})\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate Low-Level MiroApi Client\nDESCRIPTION: This code snippet demonstrates how to import the low-level `MiroApi` client in TypeScript and create a new instance of it.  The `MiroApi` object is used for backend-to-backend communication and automation scripts, requiring an OAuth access token.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Import the 'MiroApi' object\nimport {MiroApi} from './index.ts'\n\n// Create a new instance of the 'MiroApi' object,\n// and pass the OAuth access token as a parameter\nconst api = new MiroApi('<access_token>')\n\n// Use the 'MiroApi' instance to send a request to the Miro REST API,\n// and to create a new board in the team where the App is installed\nconst boards = await api.createBoard()\n```\n\n----------------------------------------\n\nTITLE: Initialize Miro API Client in JavaScript\nDESCRIPTION: Initializes the Miro API client using the `Miro` constructor. This instance is used to interact with the Miro API and manage OAuth 2.0 authentication flows. It relies on environment variables for configuration.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst miro = new Miro()\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Miro Storage\nDESCRIPTION: This code snippet shows how to configure custom storage for the Miro client by passing a `CustomMiroStorage` instance to the `Miro` constructor. This allows for persistent storage of user access and refresh tokens.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst miro = new Miro({\n  storage: new CustomMiroStorage(),\n})\n```\n\n----------------------------------------\n\nTITLE: Import Dependencies in JavaScript\nDESCRIPTION: Imports the necessary modules for the application: the Miro API client from `@mirohq/miro-api`, the Express web framework, and the express-session middleware.  These are assigned to constant variables for later use.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {Miro} = require('@mirohq/miro-api')\nconst express = require('express')\nconst session = require('express-session')\n```\n\n----------------------------------------\n\nTITLE: Storage Interface implementation\nDESCRIPTION: This code snippet illustrates the abstract Storage class and its abstract methods `set` and `get`. These methods should be implemented for managing state in the Miro client.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Storage(ABC):\n    \"\"\"Abstract class used by the stateful client to set and get State.\"\"\"\n\n    @abstractmethod\n    def set(self, state: Optional[State]) -> None:\n        pass\n\n    @abstractmethod\n    def get(self) -> Optional[State]:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate High-Level Miro Client\nDESCRIPTION: This code snippet demonstrates how to import the high-level `Miro` client in TypeScript and create a new instance of it. The `Miro` object is used for authorization and access token management.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Import the 'Miro' object\nimport {Miro} from \"@mirohq/miro-api\"\n\n// Create a new instance of the Miro object\nconst miro = new Miro()\n\n/*\n * The 'as' method returns a high-level instance of\n * 'Api' for a specific user.\n * This makes all the methods that enable interacting with\n * boards and board items available to the specified user\n */\nmiro.as(userId: ExternalUserId): MiroApi\n```\n\n----------------------------------------\n\nTITLE: Initializing Miro client with custom config\nDESCRIPTION: This snippet demonstrates initializing the high-level Miro client with custom client ID, client secret, and redirect URL. It prints the authorization URL.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport miro_api\n\nmiro = miro_api.Miro(\n  client_id='<your_app_client_id>>',\n  client_secret='<your_app_client_secret>',\n  redirect_url='https://example.com/miro/redirect/url',\n)\n\nprint(miro.auth_url)\n```\n\n----------------------------------------\n\nTITLE: Initializing MiroApi client\nDESCRIPTION: This snippet shows how to initialize the low-level MiroApi client with an access token and calls get_boards() method. It prints the result of `get_boards()`.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport miro_api\n\napi = miro_api.MiroApi('<access_token>')\n\nprint(api.get_boards())\n```\n\n----------------------------------------\n\nTITLE: Initializing Miro client\nDESCRIPTION: This snippet demonstrates how to initialize the high-level Miro client without any custom configuration. It prints the authorization URL.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport miro_api\n\nmiro = miro_api.Miro()\n\nprint(miro.auth_url)\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables\nDESCRIPTION: Defines the environment variables required for the Miro application.  `MIRO_CLIENT_ID` and `MIRO_CLIENT_SECRET` are used for authentication with the Miro API. `MIRO_REDIRECT_URL` specifies the URL where the user is redirected after authentication.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/example/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nMIRO_CLIENT_ID='123456789'\nMIRO_CLIENT_SECRET='abcdefghijklmnopqrstuvwxyz'\nMIRO_REDIRECT_URL='http://localhost:5000'\n```\n\n----------------------------------------\n\nTITLE: Initialize Express and Session Middleware\nDESCRIPTION: Initializes an Express application and configures the `express-session` middleware for managing user sessions.  The `secret` option should be a randomly generated string in production environments.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = express()\napp.use(\n  session({\n    secret: '<RANDOMLY-GENERATED-SECRET-STRING>',\n    resave: false,\n    saveUninitialized: true,\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Flask app\nDESCRIPTION: Starts the Flask development server.  This command uses the `flask` command-line tool to run the application defined in the `app` file.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/example/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nflask --app app run\n```\n\n----------------------------------------\n\nTITLE: Listen to Server Port\nDESCRIPTION: Configures the Express application to listen for incoming requests on port 4000. A message is printed to the console when the server starts, indicating the URL where the app can be accessed.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.listen(4000, () => console.log('Started server on http://127.0.0.1:4000'))\n```\n\n----------------------------------------\n\nTITLE: Run Node.js Application\nDESCRIPTION: Executes the `index.js` file using Node.js, which starts the application.  It assumes that the environment variables (MIRO_CLIENT_ID, MIRO_CLIENT_SECRET, MIRO_REDIRECT_URL) have already been set.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Run Node.js Application - Bash\nDESCRIPTION: This command executes the `index.js` file using Node.js.  It assumes that `index.js` contains the application's main logic, including the Miro API calls.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Configure Environment Variables (Bash)\nDESCRIPTION: These commands configure environment variables needed for running the Miro app. They set the `MIRO_CLIENT_ID`, `MIRO_CLIENT_SECRET`, and `MIRO_REDIRECT_URL` variables, using placeholder values that should be replaced with the actual app credentials.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport MIRO_CLIENT_ID=\"<APP-CLIENT-ID>\"\nexport MIRO_CLIENT_SECRET=\"<APP-CLIENT-SECRET>\"\nexport MIRO_REDIRECT_URL=\"http://127.0.0.1:4000/auth/miro/callback\"\n```\n\n----------------------------------------\n\nTITLE: Install Miro Node.js Client - Bash\nDESCRIPTION: This command installs the `@mirohq/miro-api` package, which is the Miro Node.js client library.  This library provides convenient methods for interacting with the Miro REST API.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mirohq/miro-api\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: This command installs project dependencies and starts the development server. `yarn` is used as the package manager, triggering the `dev` script defined in `package.json`. The server will auto-reload on code changes.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/apps/client-test-app/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn && yarn dev\n```\n\n----------------------------------------\n\nTITLE: Running localtunnel for Miro OAuth\nDESCRIPTION: This command establishes a secure tunnel from localhost port 3000 to a publicly accessible URL using localtunnel, enabling OAuth 2.0 authentication with Miro. Replace `mettins-node-test-app` with your preferred subdomain. Ensure the generated URL is added as a Redirect URI in the Miro app settings.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/apps/client-test-app/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx localtunnel --port 3000 --subdomain mettins-node-test-app\n```\n\n----------------------------------------\n\nTITLE: Initialize Node.js Project\nDESCRIPTION: Initializes a new Node.js project in the current directory using `npm init -y`. The `-y` flag automatically accepts the default configurations for the new project, skipping interactive prompts.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs the necessary dependencies for the project using the Yarn package manager. It ensures that all required packages are present in the `node_modules` directory.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests in Python\nDESCRIPTION: This command executes the project's unit tests using the Python unittest module. Poetry is used to ensure the correct virtual environment is activated before running the tests.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python -m unittest\n```\n\n----------------------------------------\n\nTITLE: Install Git Commit Hooks\nDESCRIPTION: This command installs Git commit hooks using Yarn. These hooks can be used to enforce code quality and style guidelines before committing changes.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn prepare\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using pip\nDESCRIPTION: Installs the `miro_api`, `flask`, and `python-dotenv` packages using pip. These packages are required to run the Flask application and interact with the Miro API.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/example/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install miro_api flask python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Install Miro API Client and Dependencies\nDESCRIPTION: Installs the Miro Node.js client library (`@mirohq/miro-api`), the Express web framework (`express`), and the `express-session` middleware using npm. These packages are required for interacting with the Miro API and managing user sessions.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mirohq/miro-api express express-session\n```\n\n----------------------------------------\n\nTITLE: Generate Miro API Client\nDESCRIPTION: This command generates the Miro API client using `@openapitools/openapi-generator-cli`. It processes the API specifications defined in `spec.json` and generates low-level and high-level client methods and models.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Create and Change Directory in Bash\nDESCRIPTION: Creates a directory named `my-miro-app` if it doesn't exist, then navigates into that directory using the `cd` command. This prepares the environment for a new project.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart-auth.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-miro-app\ncd my-miro-app\n```\n\n----------------------------------------\n\nTITLE: Build Documentation with TypeDoc\nDESCRIPTION: This command builds the API client documentation using TypeDoc. The generated static HTML files are placed in the `docs-out` directory.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:docs\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using poetry\nDESCRIPTION: Installs the `miro_api`, `flask`, and `python-dotenv` packages using poetry. These packages are required to run the Flask application and interact with the Miro API.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/example/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npoetry add miro_api flask python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Install Miro Node.js API Client\nDESCRIPTION: This command installs the Miro Node.js API client library and its dependencies using npm. It should be run in the root directory of your Node.js project.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @mirohq/miro-api\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Poetry\nDESCRIPTION: This command uses Poetry to install the project's dependencies as defined in the pyproject.toml file.  It is a prerequisite to run tests and other operations within the project.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Install Miro API using poetry\nDESCRIPTION: This command installs the miro_api package using poetry, a dependency management tool for Python.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add miro_api\n```\n\n----------------------------------------\n\nTITLE: Install Miro API using pip\nDESCRIPTION: This command installs the miro_api package using pip, allowing you to integrate the Miro API into your Python project.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api-python/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install miro_api\n```\n\n----------------------------------------\n\nTITLE: Mermaid Class Diagram for Miro API Clients\nDESCRIPTION: This Mermaid diagram visualizes the class structure and relationships within the Miro API clients. It includes classes like Api, Board, Organization, Team, and various Item types, illustrating their methods and dependencies. The diagram uses annotations to specify 'MUST' and 'NICE' functionalities.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/MODELS.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nclassDiagram\n  direction TB\n\n  %% Relationships\n  Api ..> Board\n  Api ..> Organization\n  Board ..> BoardMember\n  Board ..> Connector\n  Board ..> Item\n  Board ..> Tag\n  Board ..> AppCardItem\n  Board ..> CardItem\n  Board ..> DocumentItem\n  Board ..> EmbedItem\n  Board ..> FrameItem\n  Board ..> ImageItem\n  Board ..> ShapeItem\n  Board ..> StickyNoteItem\n  Board ..> TextItem\n  AppCardItem ..> Tag\n  CardItem ..> Tag\n  DocumentItem ..> Tag\n  EmbedItem ..> Tag\n  FrameItem ..> Tag\n  ImageItem ..> Tag\n  Item ..> Tag\n  Item ..> Connector\n  ShapeItem ..> Tag\n  StickyNoteItem ..> Tag\n  Tag ..> Item\n  Team ..> Board\n  Team ..> TeamMember\n  TextItem ..> Tag\n  Organization ..> Team\n\n  %% Items extend generic item\n  Item <|--  AppCardItem\n  Item <|--  CardItem\n  Item <|--  DocumentItem\n  Item <|--  EmbedItem\n  Item <|--  ImageItem\n  Item <|--  ShapeItem\n  Item <|--  StickyNoteItem\n  Item <|--  TextItem\n\n  %% MUST\n  class Api {\n    createBoard() Board\n    getBoard() Board\n    getOrganization() Organization\n    getAllBoards() Board[]\n  }\n\n  %% MUST\n  class Organization {\n    createTeam() Team\n    getTeam() Team\n    getAllTeams() Team[]\n  }\n\n  %% NICE\n  class Organization {\n    getDataClassification() DataClassification\n    getDefaultTeamSettings() TeamSettings\n    getOrganizationMember() OrganizationMember\n    getOrganizationMembers() OrganizationMember[]\n  }\n\n  %% MUST\n  class Team {\n    updateTeam() void\n    inviteTeamMember() void\n    deleteTeam() void\n    deleteTeamMember() void\n    getTeamMember() TeamMember\n    getAllTeamMembers() TeamMember[]\n  }\n\n  %% NICE\n  class Team {\n    getBoardDataClassification() BoardDataClassification\n    setBoardDataClassification() void\n    setBoardDataClassificationBulk() void\n    getDataClassification() DataClassification\n    setDataClassification() void\n    getTeamSettings() TeamSettings\n    updateTeamSettings() void\n  }\n\n  %% NICE\n  class TeamMember {\n    update() void\n  }\n\n  %% MUST\n  class Board {\n    createAppCard() AppCardItem\n    createCard() CardItem\n    createConnector() Connector\n    createDocument() DocumentItem\n    createEmbed() EmbedItem\n    createFrame() FrameItem\n    createImage() ImageItem\n    createShape() ShapeItem\n    createStickyNote() StickyNoteItem\n    createText() TextItem\n    getAppCard() AppCardItem\n    getCard() CardItem\n    getConnector() Connector\n    getAllConnectors() Connector[]\n    getDocument() DocumentItem\n    getEmbed() EmbedItem\n    getFrame() FrameItem\n    getImage() ImageItem\n    getShape() ShapeItem\n    getStickyNote() StickyNoteItem\n    getText() TextItem\n    getItem() Item\n  }\n\n  %% NICE\n  class Board {\n    createTag() Tag\n    getTag() Tag\n    getAllTags() Tag[]\n    getAllItems() Item[]\n    getMember() BoardMember\n    getAllMembers() BoardMember[]\n    copy() Board\n    share() void\n    update() void\n    delete() void\n    removeMember() void\n    removeTag() void\n    findItem() Item\n  }\n\n  %% NICE\n  class BoardMember {\n    update() void\n  }\n\n  %% MUST\n  class Item {\n    update() void\n    delete() void\n  }\n\n  %% NICE\n  class Item {\n    connectTo() Connector\n  }\n\n  %% MUST\n  class AppCardItem {\n    getAllTags() Tag[]\n    removeTag() void\n    attachTag() void\n  }\n\n  %% MUST\n  class CardItem {\n    getAllTags() Tag[]\n    removeTag() void\n    attachTag() void\n  }\n\n  %% MUST\n  class DocumentItem {\n  }\n\n  %% MUST\n  class EmbedItem {\n  }\n\n  %% MUST\n  class FrameItem {\n  }\n\n  %% NICE\n  class FrameItem {\n    createAppCard() AppCardItem\n    createCard() CardItem\n    createDocument() DocumentItem\n    createEmbed() EmbedItem\n    createImage() ImageItem\n    createShape() ShapeItem\n    createStickyNote() StickyNoteItem\n    createText() TextItem\n\n    getAllItems() Item[]\n  }\n\n  %% MUST\n  class ImageItem {\n  }\n\n  %% MUST\n  class ShapeItem {\n  }\n\n  %% MUST\n  class StickyNoteItem {\n    getAllTags() Tag[]\n    removeTag() void\n    attachTag() void\n  }\n\n  %% MUST\n  class TextItem {\n  }\n\n  %% MUST\n  class Connector {\n    update() void\n    delete() void\n  }\n\n  %% NICE\n  class Tag {\n    update() void\n    delete() void\n    getAllTaggedItems() Item[]\n  }\n```\n\n----------------------------------------\n\nTITLE: Initialize Node.js Project - Bash\nDESCRIPTION: This command initializes a new Node.js project in the current directory, creating a `package.json` file.  It prompts the user to enter information about the project; pressing Enter accepts the default values.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Create Project Directory - Bash\nDESCRIPTION: This bash command creates a new directory for the Miro app and navigates into it.  Replace `my-miro-app` with the desired name for the application directory.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-miro-app\ncd my-miro-app\n```\n\n----------------------------------------\n\nTITLE: Miro Initialization with Redis Storage in Javascript\nDESCRIPTION: This snippet shows how to initialize the Miro object with the RedisStorage implementation. It passes an instance of the RedisStorage class as the storage option in the Miro constructor. Requires the RedisStorage class defined in the previous snippet.\nSOURCE: https://github.com/miroapp/api-clients/blob/main/packages/miro-api/docs/implement-storage.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst miro = new Miro({\n  storage: new RedisStorage(),\n})\n```"
  }
]