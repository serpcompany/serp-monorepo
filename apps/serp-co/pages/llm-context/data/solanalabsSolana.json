[
  {
    "owner": "solana-labs",
    "repo": "solana",
    "content": "TITLE: Installing Solana CLI using Install Tool on MacOS/Linux\nDESCRIPTION: Command to install the latest Solana release using the official installer script. The script downloads and sets up the Solana CLI tools automatically.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.solana.com/LATEST_SOLANA_RELEASE_VERSION/install)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Solana CLI Help in Bash\nDESCRIPTION: Shows how to display the list of all possible Solana CLI commands and get help for a specific command.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/intro.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana <COMMAND> --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Service for Solana Validator\nDESCRIPTION: Systemd unit configuration file for running a Solana validator as a background service. Specifies service parameters including user permissions, file limits, and startup configuration.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Solana Validator\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nRestart=always\nRestartSec=1\nUser=sol\nLimitNOFILE=1000000\nLogRateLimitIntervalSec=0\nEnvironment=\"PATH=/bin:/usr/bin:/home/sol/.local/share/solana/install/active_release/bin\"\nExecStart=/home/sol/bin/validator.sh\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Validator Connection in Bash\nDESCRIPTION: Verifies if the Solana validator is connected to the network by checking the gossip information.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip\n```\n\n----------------------------------------\n\nTITLE: Delegating Stake to a Validator in Solana CLI\nDESCRIPTION: Delegates the stake in a stake account to a validator's vote account. Requires the stake authority to authorize the delegation.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsolana delegate-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <VOTE_ACCOUNT_ADDRESS> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Running solana-watchtower for Validator Monitoring in Bash\nDESCRIPTION: This command runs solana-watchtower to monitor a validator node with a specific identity public key. It enables monitoring of active stake for the validator.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-watchtower --monitor-active-stake --validator-identity \\\n  2uTk98rqqwENevkPH2AHHzGHXgeGc1h6ku8hQUqWeXZp\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Wallet Balance (Mainnet)\nDESCRIPTION: Command to check the SOL balance of a wallet address on the Solana mainnet. This version doesn't specify a URL, so it uses the default network configuration.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance <ACCOUNT_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Generating a Solana Wallet Keypair File\nDESCRIPTION: Creates a new Solana keypair file in the specified directory. This command generates an unencrypted keypair file that contains both public and private keys, which serves as a file system wallet.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/file-system.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/my-solana-wallet\nsolana-keygen new --outfile ~/my-solana-wallet/my-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Creating a New Solana File System Wallet\nDESCRIPTION: Command to generate a new Solana keypair and save it to a JSON file. This creates a file system wallet that stores the private key locally on disk.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --outfile my_solana_wallet.json\n```\n\n----------------------------------------\n\nTITLE: Deploying an Immutable Solana Program\nDESCRIPTION: Command to deploy a program as immutable, preventing any future redeployments. This finalizes the program code permanently.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsolana program deploy <PROGRAM_FILEPATH> --final\n```\n\n----------------------------------------\n\nTITLE: Transferring SOL Tokens Between Wallets\nDESCRIPTION: Command to transfer SOL tokens from one wallet to another on the Solana devnet. The --allow-unfunded-recipient flag permits sending to new accounts, and it requires specifying the fee payer.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Increasing File Limits for Solana Validator in Bash\nDESCRIPTION: Sets higher limits for open file descriptors to support Solana validator operations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c \"cat >/etc/security/limits.d/90-solana-nofiles.conf <<EOF\n# Increase process file descriptor count limit\n* - nofile 1000000\nEOF\"\n```\n\n----------------------------------------\n\nTITLE: Deploying a Solana Program with CLI\nDESCRIPTION: Command to deploy a Solana program using the program filepath. This initializes a program account and uploads the program binary to the blockchain.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana program deploy <PROGRAM_FILEPATH>\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI URL in Bash\nDESCRIPTION: Sets the default URL for Solana CLI commands to the Devnet API endpoint.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url http://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Geyser Plugin in JSON5\nDESCRIPTION: This JSON5 configuration file example shows how to set up a Geyser plugin, including the library path, database connection details, and account selection criteria.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"libpath\": \"/solana/target/release/libsolana_geyser_plugin_postgres.so\",\n\t\"host\": \"postgres-server\",\n\t\"user\": \"solana\",\n\t\"port\": 5433,\n\t\"threads\": 20,\n\t\"batch_size\": 20,\n\t\"panic_on_db_errors\": true,\n\t\"accounts_selector\" : {\n\t\t\"accounts\" : [\"*\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Solana Program Entrypoint\nDESCRIPTION: Minimal Solana program implementation in C showing the required entrypoint function with parameter deserialization and basic error handling.\nSOURCE: https://github.com/solana-labs/solana/blob/master/sdk/sbf/c/README.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <solana_sdk.h>\n\nextern uint64_t entrypoint(const uint8_t *input) {\n  SolAccountInfo ka[1];\n  SolParameters params = (SolParameters) { .ka = ka };\n\n  if (!sol_deserialize(input, &params, SOL_ARRAY_SIZE(ka))) {\n    return ERROR_INVALID_ARGUMENT;\n  }\n  return SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stake Account in Solana CLI\nDESCRIPTION: Creates a new stake account, transferring tokens from an existing account. The command specifies both stake and withdraw authorities, which are needed for managing the stake account.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-stake-account --from <KEYPAIR> stake-account.json <AMOUNT> \\\n    --stake-authority <KEYPAIR> --withdraw-authority <KEYPAIR> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Generating Solana Validator Identity in Bash\nDESCRIPTION: Creates a new keypair for the Solana validator identity.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/validator-keypair.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ~/validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana Testnet RPC Node\nDESCRIPTION: Bash script demonstrating the configuration of a Solana RPC node for testnet. Includes essential flags for RPC operations, voting settings, and network connectivity. Features settings for ledger management, account access, and security parameters.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-an-rpc-node.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nexec solana-validator \\\n    --identity /home/sol/validator-keypair.json \\\n    --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\\n    --known-validator dDzy5SR3AXdYWVqbDEkVFdvSPCtS9ihF5kJkHCtXoFs \\\n    --known-validator eoKpUABi59aT4rR9HGS3LcMecfut9x7zJyodWWP43YQ \\\n    --known-validator 7XSY3MrYnK8vq693Rju17bbPkCN3Z7KvvfvJx4kdrsSY \\\n    --known-validator Ft5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN \\\n    --known-validator 9QxCLckBiJc783jnMvXZubK4wH86Eqqvashtrwvcsgkv \\\n    --only-known-rpc \\\n    --full-rpc-api \\\n    --no-voting \\\n    --ledger /mnt/ledger \\\n    --accounts /mnt/accounts \\\n    --log /home/sol/solana-rpc.log \\\n    --rpc-port 8899 \\\n    --rpc-bind-address 0.0.0.0 \\\n    --private-rpc \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.testnet.solana.com:8001 \\\n    --entrypoint entrypoint2.testnet.solana.com:8001 \\\n    --entrypoint entrypoint3.testnet.solana.com:8001 \\\n    --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Status\nDESCRIPTION: Commands to verify validator operation through gossip protocol and network status.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ~/validator-keypair.json\nsolana gossip | grep <pubkey>\nsolana validators | grep <pubkey>\nsolana catchup <pubkey>\n```\n\n----------------------------------------\n\nTITLE: Creating a Geyser Plugin in Rust\nDESCRIPTION: This code snippet demonstrates how to create a Geyser plugin by implementing the GeyserPlugin trait and exposing a C function to return a pointer to the plugin instance.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\n#[allow(improper_ctypes_definitions)]\n/// # Safety\n///\n/// This function returns the GeyserPluginPostgres pointer as trait GeyserPlugin.\npub unsafe extern \"C\" fn _create_plugin() -> *mut dyn GeyserPlugin {\n    let plugin = GeyserPluginPostgres::new();\n    let plugin: Box<dyn GeyserPlugin> = Box::new(plugin);\n    Box::into_raw(plugin)\n}\n```\n\n----------------------------------------\n\nTITLE: Signing an Off-Chain Message with Default Keypair in Solana CLI\nDESCRIPTION: Command to sign an arbitrary off-chain message using the Solana CLI with the default private key. The message will be encoded and signed, with the signature printed to the output.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana sign-offchain-message <MESSAGE>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Linux sysctl for Solana Validator in Bash\nDESCRIPTION: Configures system settings to optimize performance for a Solana validator node.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c \"cat >/etc/sysctl.d/21-solana-validator.conf <<EOF\n# Increase UDP buffer sizes\nnet.core.rmem_default = 134217728\nnet.core.rmem_max = 134217728\nnet.core.wmem_default = 134217728\nnet.core.wmem_max = 134217728\n\n# Increase memory mapped files limit\nvm.max_map_count = 1000000\n\n# Increase number of allowed open file descriptors\nfs.nr_open = 1000000\nEOF\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -p /etc/sysctl.d/21-solana-validator.conf\n```\n\n----------------------------------------\n\nTITLE: Creating Solana Vote Account in Bash\nDESCRIPTION: Creates a vote account for the validator using the generated keypairs.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-vote-account -ut \\\n    --fee-payer ./validator-keypair.json \\\n    ./vote-account-keypair.json \\\n    ./validator-keypair.json \\\n    ./authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Transferring SOL Tokens on Mainnet\nDESCRIPTION: Command to transfer SOL tokens between wallets on the Solana mainnet. It requires the path to the sender's keypair file, the recipient's public address, and the amount to send.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> <AMOUNT> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Launching Solana Validator in Bash\nDESCRIPTION: Starts the Solana validator process with specified identity, vote account, and network parameters.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsolana-validator \\\n  --identity ~/validator-keypair.json \\\n  --vote-account ~/vote-account-keypair.json \\\n  --rpc-port 8899 \\\n  --entrypoint entrypoint.devnet.solana.com:8001 \\\n  --limit-ledger-size \\\n  --log ~/solana-validator.log\n```\n\n----------------------------------------\n\nTITLE: Deploying a Solana Program with Specific Program ID\nDESCRIPTION: Command to deploy a Solana program to a specific program ID using a keypair file. This allows developers to control the address at which the program is deployed.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana program deploy --program-id <KEYPAIR_FILEPATH> <PROGRAM_FILEPATH>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Validator Logs\nDESCRIPTION: Commands to switch to sol user and monitor validator logs in real-time.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsu - sol\ntail -f solana-validator.log\n```\n\n----------------------------------------\n\nTITLE: Authorizing New Vote Authority\nDESCRIPTION: Command to authorize a new vote authority for the vote account with security checks.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsolana vote-authorize-voter-checked ~/vote-account-keypair.json ~/validator-keypair.json ~/new-vote-authority.json\n```\n\n----------------------------------------\n\nTITLE: Listing Validators in Solana CLI\nDESCRIPTION: Displays information about all validators in the network, including their identity and vote account addresses. This information is needed when delegating stake to a validator.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana validators\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Cluster Connection in Bash\nDESCRIPTION: Verifies the connection to the Solana cluster by fetching the transaction count.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana transaction-count\n```\n\n----------------------------------------\n\nTITLE: Closing a Solana Program or Buffer Account\nDESCRIPTION: Command to close a program or buffer account and reclaim its lamports. This requires the account's authority to be present.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsolana program close <BADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Wallet Balance\nDESCRIPTION: Command to query the current SOL balance of a Solana wallet address on the devnet. It displays the amount of SOL tokens associated with the specified account.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance <ACCOUNT_ADDRESS> --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Solana Validator Startup Configuration\nDESCRIPTION: Complete validator startup script with configuration parameters for running a Solana validator node.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexec solana-validator \\\n    --identity validator-keypair.json \\\n    --vote-account vote-account-keypair.json \\\n    --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\\n    --known-validator 7XSY3MrYnK8vq693Rju17bbPkCN3Z7KvvfvJx4kdrsSY \\\n    --known-validator Ft5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN \\\n    --known-validator 9QxCLckBiJc783jnMvXZubK4wH86Eqqvashtrwvcsgkv \\\n    --only-known-rpc \\\n    --log /home/sol/solana-validator.log \\\n    --ledger /mnt/ledger \\\n    --rpc-port 8899 \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.testnet.solana.com:8001 \\\n    --entrypoint entrypoint2.testnet.solana.com:8001 \\\n    --entrypoint entrypoint3.testnet.solana.com:8001 \\\n    --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Process\nDESCRIPTION: Command to verify that the Solana validator process is running.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nps aux | grep solana-validator\n```\n\n----------------------------------------\n\nTITLE: Complete Durable Nonce Transaction Workflow in Solana CLI\nDESCRIPTION: A complete series of commands demonstrating the durable nonce workflow, including creating accounts, funding them, creating a nonce account, and executing a transaction using the stored nonce.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-keygen new -o alice.json\n$ solana-keygen new -o nonce.json\n$ solana-keygen new -o bob.json\n\n$ solana airdrop -k alice.json 1\n1 SOL\n\n$ solana create-nonce-account -k alice.json nonce.json 0.1\n3KPZr96BTsL3hqera9up82KAU462Gz31xjqJ6eHUAjF935Yf8i1kmfEbo6SVbNaACKE5z6gySrNjVRvmS8DcPuwV\n\n$ solana transfer -k alice.json --blockhash expiredDTaxfagttWjQweib42b6ZHADSx94Tw8gHx11 bob.json 0.01\n[2020-01-02T18:48:28.462911000Z ERROR solana_cli::cli] Io(Custom { kind: Other, error: \"Transaction \\\"33gQQaoPc9jWePMvDAeyJpcnSPiGUAdtVg8zREWv4GiKjkcGNufgpcbFyRKRrA25NkgjZySEeKue5rawyeH5TzsV\\\" failed: None\" })\nError: Io(Custom { kind: Other, error: \"Transaction \\\"33gQQaoPc9jWePMvDAeyJpcnSPiGUAdtVg8zREWv4GiKjkcGNufgpcbFyRKRrA25NkgjZySEeKue5rawyeH5TzsV\\\" failed: None\" })\n\n$ solana nonce-account nonce.json\nbalance: 0.1 SOL\nminimum balance required: 0.00136416 SOL\nnonce: F7vmkY3DTaxfagttWjQweib42b6ZHADSx94Tw8gHx3W7\n\n$ solana transfer -k alice.json --blockhash F7vmkY3DTaxfagttWjQweib42b6ZHADSx94Tw8gHx3W7 --nonce nonce.json bob.json 0.01\nHR1368UKHVZyenmH7yVz5sBAijV6XAPeWbEiXEGVYQorRMcoijeNAbzZqEZiH8cDB8tk65ckqeegFjK8dHwNFgQ\n\n$ solana balance -k bob.json\n0.01 SOL\n\n$ solana nonce-account nonce.json\nbalance: 0.1 SOL\nminimum balance required: 0.00136416 SOL\nnonce: 6bjroqDcZgTv6Vavhqf81oBHTv3aMnX19UTB51YhAZnN\n```\n\n----------------------------------------\n\nTITLE: Displaying a Solana Wallet Public Key\nDESCRIPTION: Extracts and displays the public key (wallet address) from a Solana keypair file. This command allows you to get your wallet address to share with others for receiving funds.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/file-system.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ~/my-solana-wallet/my-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Gossip Information\nDESCRIPTION: Demonstrates how to use the solana gossip command to find the IP address and port of a known validator.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip | grep 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on\n```\n\n----------------------------------------\n\nTITLE: Re-delegating Stake in Solana\nDESCRIPTION: Re-delegate stake to a different validator. This can be done once per epoch if needed.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana delegate-stake ~/validator-stake-keypair.json ~/some-other-vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Airdropping SOL Tokens in Solana Devnet\nDESCRIPTION: Command to request SOL tokens from the Solana devnet faucet to a specified wallet address. This is used to fund a wallet with test tokens that have no real value.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana airdrop 1 <RECIPIENT_ACCOUNT_ADDRESS> --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Updating PATH for Solana CLI\nDESCRIPTION: Example command placeholder that the installer suggests to update the PATH environment variable after installation to include Solana programs.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPlease update your PATH environment variable to include the solana programs:\n```\n\n----------------------------------------\n\nTITLE: Verifying a Solana Wallet Address\nDESCRIPTION: Verifies that a given public key corresponds to the private key in the specified keypair file. This command helps ensure you have the correct keypair file for a particular wallet address.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/file-system.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen verify <PUBKEY> ~/my-solana-wallet/my-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Enabling Validator Service\nDESCRIPTION: Command to enable and start the Solana validator system service.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now sol\n```\n\n----------------------------------------\n\nTITLE: Blockstore API Interface Definition\nDESCRIPTION: Definition of the main API methods provided by Blockstore for retrieving slot and entry information.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/blockstore.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn get_slots_since(slots: &[u64]) -> Result<HashMap<u64, Vec<u64>>>\nfn get_slot_entries(slot: Slot, shred_start_index: u64) -> Result<Vec<Entry>>\n```\n\n----------------------------------------\n\nTITLE: Configure Local Solana CLI\nDESCRIPTION: Set the Solana CLI to target the local test validator instance running on localhost:8899\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/test-validator.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url http://127.0.0.1:8899\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Visibility in Gossip Network\nDESCRIPTION: This command checks if your validator's IP address and identity pubkey are visible in the Solana gossip network. It provides a way to confirm that your validator is properly connected to the network.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-monitor.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip\n```\n\n----------------------------------------\n\nTITLE: Deploying a Solana Program with Size Specification\nDESCRIPTION: Command to deploy a program with a specified maximum length in bytes. This is useful when redeploying a program that might grow in size with future updates.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana program deploy --max-len 200000 <PROGRAM_FILEPATH>\n```\n\n----------------------------------------\n\nTITLE: Starting a Solana Validator for Mainnet Beta\nDESCRIPTION: This command starts a Solana validator node configured for the Mainnet Beta cluster. It specifies various parameters including identity, vote account, known validators, and network settings.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-validator \\\n    --identity ~/validator-keypair.json \\\n    --vote-account ~/vote-account-keypair.json \\\n    --known-validator 7Np41oeYqPefeNQEHSv1UDhYrehxin3NStELsSKCT4K2 \\\n    --known-validator GdnSyH3YtwcxFvQrVVJMm1JhTS4QVX7MFsX56uJLUfiZ \\\n    --known-validator DE1bawNcRJB9rVm3buyMVfr8mBEoyyu73NBovf2oXJsJ \\\n    --known-validator CakcnaRDHka2gXyfbEd2d3xsvkJkqsLw2akB3zsN1D2S \\\n    --only-known-rpc \\\n    --ledger ledger \\\n    --rpc-port 8899 \\\n    --private-rpc \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.mainnet-beta.solana.com:8001 \\\n    --entrypoint entrypoint2.mainnet-beta.solana.com:8001 \\\n    --entrypoint entrypoint3.mainnet-beta.solana.com:8001 \\\n    --entrypoint entrypoint4.mainnet-beta.solana.com:8001 \\\n    --entrypoint entrypoint5.mainnet-beta.solana.com:8001 \\\n    --expected-genesis-hash 5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance in Solana\nDESCRIPTION: Checks the balance of a Solana account using its public key. This command queries the configured network for the current balance associated with the address.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance <PUBKEY>\n```\n\n----------------------------------------\n\nTITLE: Optimizing System Settings for Solana Validator in Bash\nDESCRIPTION: Configures system settings for optimal Solana validator performance, including UDP buffer sizes, memory mapped files limit, and file descriptor limits.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c \"cat >/etc/sysctl.d/21-solana-validator.conf <<EOF\n# Increase UDP buffer sizes\nnet.core.rmem_default = 134217728\nnet.core.rmem_max = 134217728\nnet.core.wmem_default = 134217728\nnet.core.wmem_max = 134217728\n\n# Increase memory mapped files limit\nvm.max_map_count = 1000000\n\n# Increase number of allowed open file descriptors\nfs.nr_open = 1000000\nEOF\"\n\nsudo sysctl -p /etc/sysctl.d/21-solana-validator.conf\n\nsudo bash -c \"cat >/etc/security/limits.d/90-solana-nofiles.conf <<EOF\n# Increase process file descriptor count limit\n* - nofile 1000000\nEOF\"\n\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Deriving Child Key Using Hierarchical Derivation\nDESCRIPTION: Derives a child key from a seed phrase using BIP44 hierarchical derivation path. This example derives a key at account 0, change index 1 under Solana's standard derivation path.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey prompt://?key=0/1\n```\n\n----------------------------------------\n\nTITLE: Validator Restart with Authority Transition\nDESCRIPTION: Command showing how to restart the validator with both old and new vote authority keypairs for smooth transition.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--authorized-voter ~/validator-keypair.json --authorized-voter ~/new-vote-authority.json\n```\n\n----------------------------------------\n\nTITLE: Starting a Solana Validator for Devnet\nDESCRIPTION: This command starts a Solana validator node configured for the Devnet cluster. It specifies various parameters including identity, vote account, known validators, and network settings.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-validator \\\n    --identity validator-keypair.json \\\n    --vote-account vote-account-keypair.json \\\n    --known-validator dv1ZAGvdsz5hHLwWXsVnM94hWf1pjbKVau1QVkaMJ92 \\\n    --known-validator dv2eQHeP4RFrJZ6UeiZWoc3XTtmtZCUKxxCApCDcRNV \\\n    --known-validator dv4ACNkpYPcE3aKmYDqZm9G5EB3J4MRoeE7WNDRBVJB \\\n    --known-validator dv3qDFk1DTF36Z62bNvrCXe9sKATA6xvVy6A798xxAS \\\n    --only-known-rpc \\\n    --ledger ledger \\\n    --rpc-port 8899 \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.devnet.solana.com:8001 \\\n    --entrypoint entrypoint2.devnet.solana.com:8001 \\\n    --entrypoint entrypoint3.devnet.solana.com:8001 \\\n    --entrypoint entrypoint4.devnet.solana.com:8001 \\\n    --entrypoint entrypoint5.devnet.solana.com:8001 \\\n    --expected-genesis-hash EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Cluster Version\nDESCRIPTION: This command retrieves and displays the software version running on the currently targeted Solana cluster. It's important for ensuring compatibility with the local CLI version.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/choose-a-cluster.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana cluster-version\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Account Balance\nDESCRIPTION: Demonstrates how to check the balance of a validator's identity account using the Solana CLI.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Submitting a Multi-Signature Solana Transaction\nDESCRIPTION: Command for submitting a transaction that has been signed in multiple offline sessions. It includes signatures from both the fee payer and the 'from' account obtained from separate signing sessions.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer Fdri24WUGtrCXZ55nXiewAj6RM18hRHPGAjZk3o6vBut 10 \\\n    --blockhash 7ALDjLv56a8f6sH6upAZALQKkXyjAwwENH9GomyM8Dbc \\\n    --from 674RgFMgdqdRoVtMqSBg7mHFbrrNm1h1r721H1ZMquHL \\\n    --signer 674RgFMgdqdRoVtMqSBg7mHFbrrNm1h1r721H1ZMquHL=3vJtnba4dKQmEAieAekC1rJnPUndBcpvqRPRMoPWqhLEMCty2SdUxt2yvC1wQW6wVUa5putZMt6kdwCaTv8gk7sQ \\\n    --fee-payer 3bo5YiRagwmRikuH6H1d2gkKef5nFZXE3gJeoHxJbPjy \\\n    --signer 3bo5YiRagwmRikuH6H1d2gkKef5nFZXE3gJeoHxJbPjy=ohGKvpRC46jAduwU9NW8tP91JkCT5r8Mo67Ysnid4zc76tiiV1Ho6jv3BKFSbBcr2NcPPCarmfTLSkTHsJCtdYi\n```\n\n----------------------------------------\n\nTITLE: Creating a Nonce Account in Solana CLI\nDESCRIPTION: Commands to generate a new keypair and create a nonce account on the Solana blockchain with a minimum balance to ensure rent-exemption.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o nonce-keypair.json\nsolana create-nonce-account nonce-keypair.json 1\n```\n\n----------------------------------------\n\nTITLE: Perform SOL Transfer\nDESCRIPTION: Execute a transfer of 1 SOL to a specified wallet address\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/test-validator.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer EPhgPANa5Rh2wa4V2jxt7YbtWa3Uyw4sTeZ13cQjDDB8 1\n```\n\n----------------------------------------\n\nTITLE: Restarting Solana Validator with New Arguments\nDESCRIPTION: This command restarts a Solana validator with new arguments including wait-for-supermajority and expected-bank-hash. It's used after creating a new snapshot for cluster restart.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-validator\n  --wait-for-supermajority SLOT_X     # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --expected-bank-hash NEW_BANK_HASH  # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --hard-fork SLOT_X                  # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --no-snapshot-fetch                 # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --entrypoint entrypoint.testnet.solana.com:8001\n  --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on\n  --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY\n  --only-known-rpc\n  --limit-ledger-size\n  ...                                # <-- your other --identity/--vote-account/etc arguments\n```\n\n----------------------------------------\n\nTITLE: Displaying Wallet Address for Hardware Wallet in Solana CLI\nDESCRIPTION: Illustrates how to display the wallet address (pubkey) for a Hardware Wallet using the Solana CLI, using a keypair URL for a Ledger device.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/intro.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey usb://ledger?key=0\n```\n\n----------------------------------------\n\nTITLE: Checking Vote Account Information\nDESCRIPTION: Command to retrieve current vote account information and authority details.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsolana vote-account ~/vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Complete Ledger Transaction Example\nDESCRIPTION: Example showing a complete workflow of viewing an address, checking balance, and sending SOL using a Ledger device.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n~$ solana-keygen pubkey usb://ledger?key=42\nCjeqzArkZt6xwdnZ9NZSf8D1CNJN1rjeFiyd8q7iLWAV\n\n~$ solana balance CjeqzArkZt6xwdnZ9NZSf8D1CNJN1rjeFiyd8q7iLWAV\n1.000005 SOL\n\n~$ solana transfer 7cvkjYAkUYs4W8XcXsca7cBrEGFeSUjeZmKoNBvEwyri 1 --keypair usb://ledger?key=42\n```\n\n----------------------------------------\n\nTITLE: Basic Solana Program Structure in C\nDESCRIPTION: Minimal C program template showing the required entrypoint function for a Solana program. Demonstrates parameter deserialization and basic error handling.\nSOURCE: https://github.com/solana-labs/solana/blob/master/sdk/bpf/c/README.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <solana_sdk.h>\n\nextern uint64_t entrypoint(const uint8_t *input) {\n  SolAccountInfo ka[1];\n  SolParameters params = (SolParameters) { .ka = ka };\n\n  if (!sol_deserialize(input, &params, SOL_ARRAY_SIZE(ka))) {\n    return ERROR_INVALID_ARGUMENT;\n  }\n  return SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Solana Installation from Built Binaries\nDESCRIPTION: Command to initialize Solana after building from source, which completes the installation process.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsolana-install init\n```\n\n----------------------------------------\n\nTITLE: Setting New Stake Authority in Solana CLI\nDESCRIPTION: Updates the stake authority for an existing stake account. Requires the current stake authority to authorize the change to the new authority identified by its public key.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana stake-authorize <STAKE_ACCOUNT_ADDRESS> \\\n    --stake-authority <KEYPAIR> --new-stake-authority <PUBKEY> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Withdrawing from a Stake Account in Solana CLI\nDESCRIPTION: Transfers tokens from a stake account to another account. Requires the withdraw authority to authorize the transaction and is only possible if the stake is not delegated or locked.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsolana withdraw-stake --withdraw-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <RECIPIENT_ADDRESS> <AMOUNT> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Keypair for Stake Account in Solana CLI\nDESCRIPTION: Generates a new keypair without a passphrase that will be used as the stake account address. This keypair file is only needed for the initial creation of the stake account and can be discarded afterward.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --no-passphrase -o stake-account.json\n```\n\n----------------------------------------\n\nTITLE: Formatting and Mounting Drives for Solana Validator in Bash\nDESCRIPTION: Formats and mounts separate drives for the ledger and accounts database.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkfs -t ext4 /dev/nvme0n1\nsudo mkdir -p /mnt/ledger\nsudo chown -R sol:sol /mnt/ledger\nsudo mount /dev/nvme0n1 /mnt/ledger\n\nsudo mkfs -t ext4 /dev/nvme1n1\nsudo mkdir -p /mnt/accounts\nsudo chown -R sol:sol /mnt/accounts\nsudo mount /dev/nvme1n1 /mnt/accounts\n```\n\n----------------------------------------\n\nTITLE: Delegating Stake to Validator in Solana\nDESCRIPTION: Delegate the stake from your stake account to your validator's vote account. This associates your stake with your validator, allowing it to participate in consensus.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana delegate-stake ~/validator-stake-keypair.json ~/vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Target to Devnet in Solana CLI\nDESCRIPTION: This command configures the Solana CLI to target the Devnet cluster. After execution, all future subcommands will interact with the Devnet cluster.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/choose-a-cluster.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Setting Solana Config URL in Bash\nDESCRIPTION: Configures the Solana CLI to use the testnet cluster API endpoint.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.testnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Checking Validator Voting Activity\nDESCRIPTION: This command displays the recent voting activity from your validator using the vote account keypair. It helps in verifying that your validator is actively participating in consensus.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-monitor.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana vote-account ~/vote-account-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Checking Current Cluster Configuration in Solana CLI\nDESCRIPTION: This command displays the current cluster configuration for the Solana CLI, showing which cluster it's currently targeting.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/choose-a-cluster.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana config get\n```\n\n----------------------------------------\n\nTITLE: Creating Stake Keypair in Solana\nDESCRIPTION: Generate a new staking keypair for your Solana validator. This keypair will be used to create and manage your stake account.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/validator-stake-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds from Solana Vote Account\nDESCRIPTION: Shows how to withdraw all funds from a vote account to a personal account using the Solana CLI.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana withdraw-from-vote-account \\\n   vote-account-keypair.json \\\n   person-keypair.json ALL \\\n   --authorized-withdrawer authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Making an Existing Program Immutable\nDESCRIPTION: Command to mark an already deployed program as immutable. This prevents any further updates to the program.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsolana program set-upgrade-authority <PROGRAM_ADDRESS> --final\n```\n\n----------------------------------------\n\nTITLE: Deploying Program from Buffer in Solana\nDESCRIPTION: Deploys a program using the contents of a buffer account. The buffer's authority must match the program's upgrade authority.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nsolana program deploy --program-id <PROGRAM_ADDRESS> --buffer <BUFFER_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Creating Stake Account in Solana\nDESCRIPTION: Create a stake account with 1 SOL. This account will hold the tokens you want to stake on your validator.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-stake-account ~/validator-stake-keypair.json 1\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Account Balance in Bash\nDESCRIPTION: Displays the current balance of the Solana account in SOL or lamports.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance --lamports\n```\n\n----------------------------------------\n\nTITLE: Starting Solana Validator Service\nDESCRIPTION: Command to enable and start the Solana validator systemd service.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now sol\n```\n\n----------------------------------------\n\nTITLE: Monitoring Validator Account Balance\nDESCRIPTION: This command checks your validator's account balance in lamports. It helps in tracking how the balance decreases with transaction fees from vote submissions and increases after serving as the leader.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-monitor.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance --lamports\n```\n\n----------------------------------------\n\nTITLE: Delegating Stake in Solana\nDESCRIPTION: This instruction delegates stake from a Stake account to a Vote account, activating it for rewards. It transforms an initialized or deactivated stake account into an active one, setting the validator to which the stake is delegated.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nStakeInstruction::DelegateStake\n```\n\n----------------------------------------\n\nTITLE: Generating a New Solana Paper Wallet\nDESCRIPTION: Creates a new keypair without saving it to a file, displaying the public key and seed phrase for a paper wallet. This prevents writing the private key to disk for security purposes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --no-outfile\n```\n\n----------------------------------------\n\nTITLE: Downloading Solana Snapshots\nDESCRIPTION: Shows how to manually download full and incremental snapshots from a known validator using wget.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwget --trust-server-names http://139.178.68.207:80/snapshot.tar.bz2\nwget --trust-server-names http://139.178.68.207:80/incremental-snapshot.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Deactivating Stake in Solana CLI\nDESCRIPTION: Undelegates stake from a validator, initiating the cooldown period. Requires the stake authority to authorize the deactivation.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsolana deactivate-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Creating Buffer with Custom Authority in Solana\nDESCRIPTION: Creates a buffer account with a specified authority different from the default. The buffer authority must be a signer who can write to the buffer.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsolana program write-buffer <PROGRAM_FILEPATH> --buffer-authority <BUFFER_AUTHORITY_SIGNER>\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu System Packages for Security\nDESCRIPTION: Commands to update the package list and upgrade installed packages on an Ubuntu system to patch security vulnerabilities. This should be performed at least weekly to maintain system security.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/security.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI for Mainnet Beta\nDESCRIPTION: This command sets the Solana CLI to use the Mainnet Beta API URL for subsequent operations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.mainnet-beta.solana.com\n```\n\n----------------------------------------\n\nTITLE: Setting a Program's Upgrade Authority\nDESCRIPTION: Command to change a program's upgrade authority using the default keypair as the current authority. This transfers update rights to a new entity.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsolana program set-upgrade-authority <PROGRAM_ADDRESS> --new-upgrade-authority <NEW_UPGRADE_AUTHORITY>\n```\n\n----------------------------------------\n\nTITLE: Displaying Nonce Account Information in Solana CLI\nDESCRIPTION: Command to inspect a nonce account and display its details in a human-friendly format, including balance, minimum required balance, and current nonce value.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana nonce-account nonce-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Submitting a Vote in Solana\nDESCRIPTION: This instruction allows a validator to submit a vote for a particular slot. It updates the VoteState with lockouts and credits according to voting rules, verifying the vote against slot hashes and current network time.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nVoteInstruction::Vote(Vote)\n```\n\n----------------------------------------\n\nTITLE: Verifying Solana CLI Installation Version\nDESCRIPTION: Command to check the installed version of Solana CLI, useful for confirming successful installation or verifying an update.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana --version\n```\n\n----------------------------------------\n\nTITLE: Viewing Solana Leader Schedule\nDESCRIPTION: Demonstrates how to view the full leader schedule for an epoch using the Solana CLI.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana leader-schedule\n```\n\n----------------------------------------\n\nTITLE: Confirming Solana Transaction Status\nDESCRIPTION: Command to check the status of a Solana transaction using its signature. Useful for troubleshooting when a transaction doesn't appear to complete as expected.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana confirm -v <TRANSACTION_SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Copying Validator Key Pairs\nDESCRIPTION: Commands to securely copy validator and vote account keypair files to the validator server.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nscp validator-keypair.json sol@<server.hostname>:\nscp vote-account-keypair.json sol@<server.hostname>:\n```\n\n----------------------------------------\n\nTITLE: Starting a Solana Validator for Testnet\nDESCRIPTION: This command starts a Solana validator node configured for the Testnet cluster. It specifies various parameters including identity, vote account, known validators, and network settings.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-validator \\\n    --identity validator-keypair.json \\\n    --vote-account vote-account-keypair.json \\\n    --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\\n    --known-validator dDzy5SR3AXdYWVqbDEkVFdvSPCtS9ihF5kJkHCtXoFs \\\n    --known-validator Ft5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN \\\n    --known-validator eoKpUABi59aT4rR9HGS3LcMecfut9x7zJyodWWP43YQ \\\n    --known-validator 9QxCLckBiJc783jnMvXZubK4wH86Eqqvashtrwvcsgkv \\\n    --only-known-rpc \\\n    --ledger ledger \\\n    --rpc-port 8899 \\\n    --dynamic-port-range 8000-8020 \\\n    --entrypoint entrypoint.testnet.solana.com:8001 \\\n    --entrypoint entrypoint2.testnet.solana.com:8001 \\\n    --entrypoint entrypoint3.testnet.solana.com:8001 \\\n    --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \\\n    --wal-recovery-mode skip_any_corrupted_record \\\n    --limit-ledger-size\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics Environment Variable for Mainnet Beta in Bash\nDESCRIPTION: This command sets the SOLANA_METRICS_CONFIG environment variable for the Mainnet Beta cluster. It specifies the metrics host, database, username, and password.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport SOLANA_METRICS_CONFIG=\"host=https://metrics.solana.com:8086,db=mainnet-beta,u=mainnet-beta_write,p=password\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Keypair URL Format for Solana Hardware Wallets\nDESCRIPTION: This snippet demonstrates the format of a keypair URL used to uniquely identify a Solana keypair on a connected hardware wallet. It includes optional fields for wallet ID and derivation path.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/hardware/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusb://<MANUFACTURER>[/<WALLET_ID>][?key=<DERIVATION_PATH>]\n```\n\n----------------------------------------\n\nTITLE: Monitoring Validator Catch Up in Solana\nDESCRIPTION: Use the 'catchup' command to monitor your validator's progress in catching up to the cluster. This is necessary before delegating stake to ensure the validator can vote successfully.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana catchup ~/validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Deactivating Stake in Solana\nDESCRIPTION: This instruction begins the cooldown process for withdrawing stake. It sets the deactivation epoch and initiates the gradual ramp-down of the stake amount, allowing funds to be withdrawn after the cooldown period.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nStakeInstruction::Deactivate\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Info from Solana Blockchain\nDESCRIPTION: Command to retrieve and display validator information that has been published to the Solana blockchain.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-info.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana validator-info get\n```\n\n----------------------------------------\n\nTITLE: Example of Publishing Validator Info with Website and Icon\nDESCRIPTION: A practical example showing how to publish validator information with a custom name, website URL, and icon URL. This creates or updates the validator's public profile on the Solana blockchain.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-info.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana validator-info publish \"Elvis Validator\" -w \"https://elvis-validates.com\" -i \"https://elvis-validates.com/my-icon.png\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Solana CLI on Windows from Prebuilt Binaries\nDESCRIPTION: Commands to configure the Solana CLI on Windows after extracting the prebuilt binaries, setting up the PATH environment variable in the command prompt.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd solana-release/\nset PATH=%cd%/bin;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Generating Solana Keypairs in Bash\nDESCRIPTION: Creates the necessary keypairs for validator operation: validator identity, vote account, and authorized withdrawer.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o validator-keypair.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o vote-account-keypair.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Check Wallet Balance\nDESCRIPTION: Query the SOL balance of the default wallet on the local test validator\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/test-validator.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance\n```\n\n----------------------------------------\n\nTITLE: Accessing Sysvar via get() Method in Solana\nDESCRIPTION: Example showing how to query a sysvar at runtime using the get() function. This is the more efficient method that doesn't require passing the sysvar account to the program.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/sysvars.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet clock = Clock::get()\n```\n\n----------------------------------------\n\nTITLE: Building Solana from Source\nDESCRIPTION: Commands to build Solana from source after downloading the source code. This includes running the build script and updating the PATH.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/cargo-install-all.sh .\nexport PATH=$PWD/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Creating Solana Vote Account in Bash\nDESCRIPTION: Generates a new vote account keypair and creates the vote account on the Solana network.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/vote-account-keypair.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-vote-account ~/vote-account-keypair.json ~/validator-keypair.json ~/authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Initializing a Vote Account in Solana\nDESCRIPTION: This instruction initializes a new Vote account with specified parameters including node public key, authorized voter, authorized withdrawer, and commission percentage. It creates the foundational voting structure that validators use.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nVoteInstruction::Initialize(VoteInit)\n```\n\n----------------------------------------\n\nTITLE: Displaying Wallet Address for File System Wallet in Solana CLI\nDESCRIPTION: Shows how to display the wallet address (pubkey) for a File System Wallet using the Solana CLI, specifying the full path to the keypair file.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/intro.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey /home/solana/my_wallet.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Makefile for Solana BPF Program\nDESCRIPTION: Basic makefile configuration to include Solana BPF build tools.\nSOURCE: https://github.com/solana-labs/solana/blob/master/sdk/sbf/c/README.md#2025-04-23_snippet_0\n\nLANGUAGE: make\nCODE:\n```\ninclude path/to/sbf.mk\n```\n\n----------------------------------------\n\nTITLE: Running a self-updating Solana validator node\nDESCRIPTION: This snippet demonstrates how to run a Solana validator node that automatically updates itself when new updates are available, using the solana-install tool to manage the update process.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-install init --pubkey 92DMonmBYXwEMHJ99c9ceRSpAmk9v6i3RdvDdXaVcrfj  # <-- pubkey is obtained from whoever is deploying the updates\n$ export PATH=~/.local/share/solana-install/bin:$PATH\n$ solana-keygen ...  # <-- runs the latest solana-keygen\n$ solana-install run solana-validator ...  # <-- runs a validator, restarting it as necessary when an update is applied\n```\n\n----------------------------------------\n\nTITLE: Publishing Validator Info to Solana Blockchain\nDESCRIPTION: The basic command structure for publishing validator information to the Solana blockchain. This command requires a validator keypair and accepts various optional arguments to customize the validator's public profile.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-info.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana validator-info publish --keypair ~/validator-keypair.json <VALIDATOR_INFO_ARGS> <VALIDATOR_NAME>\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Cluster Information via JSON-RPC\nDESCRIPTION: These curl commands demonstrate how to use various JSON-RPC endpoints to monitor validator and cluster health. They retrieve information about cluster nodes, vote accounts, leader schedule, and epoch information.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-monitor.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Similar to solana-gossip, you should see your validator in the list of cluster nodes\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getClusterNodes\"}' http://api.devnet.solana.com\n# If your validator is properly voting, it should appear in the list of `current` vote accounts. If staked, `stake` should be > 0\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getVoteAccounts\"}' http://api.devnet.solana.com\n# Returns the current leader schedule\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getLeaderSchedule\"}' http://api.devnet.solana.com\n# Returns info about the current epoch. slotIndex should progress on subsequent calls.\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getEpochInfo\"}' http://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Creating Solana User in Bash\nDESCRIPTION: Adds a new user named 'sol' for running the Solana validator.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser sol\n```\n\n----------------------------------------\n\nTITLE: Updating Vote Account Validator Identity\nDESCRIPTION: Command to update the validator identity associated with a vote account using the authorized withdrawer keypair.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsolana vote-update-validator ~/vote-account-keypair.json ~/new-validator-keypair.json ~/authorized_withdrawer.json\n```\n\n----------------------------------------\n\nTITLE: Showing Solana Program Information\nDESCRIPTION: Command to retrieve and display information about a deployed program including its owner, data address, authority, deployment slot, and data length.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana program show <ACCOUNT_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Creating a Derived Stake Account in Solana CLI\nDESCRIPTION: Creates a stake account with an address derived from a base keypair and a seed string. Useful for managing multiple stake accounts without creating multiple keypairs.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-stake-account --from <KEYPAIR> <STAKE_ACCOUNT_KEYPAIR> --seed <STRING> <AMOUNT> \\\n    --stake-authority <PUBKEY> --withdraw-authority <PUBKEY> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Checking Locally-Installed Solana CLI Version\nDESCRIPTION: This command displays the version of the Solana CLI installed on the local machine. It's useful for ensuring compatibility with the cluster version.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/choose-a-cluster.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana --version\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate Files for etcd and Validator in Bash\nDESCRIPTION: Commands to create the CA certificate and keys for both etcd server and validator nodes. These certificates will enable mutual TLS authentication between validator nodes and the etcd cluster.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncfssl gencert -initca certs/config.json | cfssljson -bare certs/etcd-ca\ncfssl gencert -ca certs/etcd-ca.pem -ca-key certs/etcd-ca-key.pem certs/config.json | cfssljson -bare certs/validator\ncfssl gencert -ca certs/etcd-ca.pem -ca-key certs/etcd-ca-key.pem certs/config.json | cfssljson -bare certs/etcd\n```\n\n----------------------------------------\n\nTITLE: Deploying a Program with Specific Upgrade Authority\nDESCRIPTION: Command to deploy a program with a specific upgrade authority. This controls who can perform future updates to the program.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsolana program deploy --upgrade-authority <UPGRADE_AUTHORITY_SIGNER> <PROGRAM_FILEPATH>\n```\n\n----------------------------------------\n\nTITLE: Requesting SOL Airdrop in Bash\nDESCRIPTION: Requests an airdrop of 1 SOL to the validator's account on testnet.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana airdrop 1\n```\n\n----------------------------------------\n\nTITLE: Restarting Solana Validator with Snapshot Download\nDESCRIPTION: This command restarts a Solana validator by downloading a snapshot. It's used when the local ledger doesn't have data up to the required slot or if the ledger has been deleted.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-validator\n  --wait-for-supermajority SLOT_X     # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --expected-bank-hash NEW_BANK_HASH  # <-- NEW! IMPORTANT! REMOVE AFTER THIS RESTART\n  --entrypoint entrypoint.testnet.solana.com:8001\n  --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on\n  --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY\n  --only-known-rpc\n  --limit-ledger-size\n  ...                                # <-- your other --identity/--vote-account/etc arguments\n```\n\n----------------------------------------\n\nTITLE: Defining BlockedTransactionsQueue Structure in Rust\nDESCRIPTION: Defines a structure for managing queues of blocked transactions that are waiting on account locks held by higher priority transactions\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Represents a heap of transactions that cannot be scheduled because they\n/// would take locks on accounts needed by a higher paying transaction\nstruct BlockedTransactionsQueue {\n    // The higher priority transaction blocking all the other transactions in\n    // `blocked_transactions` below\n    highest_priority_blocked_transaction: Transaction,\n    other_blocked_transactions: BinaryHeap<Transaction>\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping a Solana Program to a File\nDESCRIPTION: Command to export a deployed program's binary data to a local file. This allows verification or examination of the deployed code.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsolana program dump <ACCOUNT_ADDRESS> <OUTPUT_FILEPATH>\n```\n\n----------------------------------------\n\nTITLE: Viewing Ledger Wallet ID in Solana CLI\nDESCRIPTION: Command to display the unique wallet ID of a connected Ledger device to verify proper connection and state.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey usb://ledger\n```\n\n----------------------------------------\n\nTITLE: Splitting a Stake Account in Solana CLI\nDESCRIPTION: Divides a stake account into two accounts, allowing delegation to multiple validators. This operation can be performed even when the original stake is delegated, cooling down, or locked up.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsolana split-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <NEW_STAKE_ACCOUNT_KEYPAIR> <AMOUNT> \\\n    --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Running Solana Beta Docker Container\nDESCRIPTION: Command to run the latest Solana beta Docker image with JSON RPC port 8899 exposed and increased file descriptor limits\nSOURCE: https://github.com/solana-labs/solana/blob/master/sdk/docker-solana/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p 8899:8899 --ulimit nofile=1000000 solanalabs/solana:beta\n```\n\n----------------------------------------\n\nTITLE: Starting etcd Server with TLS Security in Bash\nDESCRIPTION: Command to start the etcd server with TLS certificate authentication and auto-compaction enabled. This configuration secures the etcd endpoint that will store the validator tower records.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\netcd --auto-compaction-retention 2 --auto-compaction-mode revision \\\n  --cert-file=certs/etcd.pem --key-file=certs/etcd-key.pem \\\n  --client-cert-auth \\\n  --trusted-ca-file=certs/etcd-ca.pem \\\n  --listen-client-urls=https://127.0.0.1:2379 \\\n  --advertise-client-urls=https://127.0.0.1:2379\n```\n\n----------------------------------------\n\nTITLE: Writing Program to Buffer Account in Solana\nDESCRIPTION: Creates a buffer account and writes program data to it. This is the first step in deploying a program using an intermediary buffer.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsolana program write-buffer <PROGRAM_FILEPATH>\n```\n\n----------------------------------------\n\nTITLE: Extracting Prebuilt Solana Binaries on Linux\nDESCRIPTION: Commands to extract and configure the prebuilt Solana binaries on Linux. This includes extracting the archive and setting up the PATH environment variable.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntar jxf solana-release-x86_64-unknown-linux-gnu.tar.bz2\ncd solana-release/\nexport PATH=$PWD/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Solana Version\nDESCRIPTION: Demonstrates how to install a specific version of Solana (1.14.17) using the solana-install command.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-install init 1.14.17\n```\n\n----------------------------------------\n\nTITLE: Helper Functions for Instruction Introspection in Solana\nDESCRIPTION: Two helper functions that enable Solana smart contract programs to access instruction data. The first function loads the current instruction index, while the second loads the instruction data at a specific index from the instruction sysvar account.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/instruction_introspection.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn load_current_index_checked(instruction_data: &[u8]) -> u16;\nfn load_instruction_at_checked(instruction_index: usize, instruction_sysvar_account_info: &AccountInfo) -> Result<Instruction>;\n```\n\n----------------------------------------\n\nTITLE: Verifying an Off-Chain Message Signature with Custom Version in Solana CLI\nDESCRIPTION: Command to verify the signature of an off-chain message with a specific version instead of the default version in Solana CLI. Used when the signed message has a non-default version.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana verify-offchain-signature --version <VERSION> <MESSAGE> <SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Deriving a Stake Account Address in Solana CLI\nDESCRIPTION: Generates a derived stake account address from a base public key and a seed string. This helps to verify what address will be created before actually creating the stake account.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana create-address-with-seed --from <PUBKEY> <SEED_STRING> STAKE\n```\n\n----------------------------------------\n\nTITLE: Running Solana Edge Docker Container\nDESCRIPTION: Command to run the latest Solana edge Docker image with JSON RPC port 8899 exposed and increased file descriptor limits\nSOURCE: https://github.com/solana-labs/solana/blob/master/sdk/docker-solana/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p 8899:8899 --ulimit nofile=1000000 solanalabs/solana:edge\n```\n\n----------------------------------------\n\nTITLE: Making JSON-RPC Request in Solana\nDESCRIPTION: Example of making a JSON-RPC request to a Solana node to get epoch information. This can be used to monitor network and validator status.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\",\"id\":1, \"method\":\"getEpochInfo\"}' http://localhost:8899\n```\n\n----------------------------------------\n\nTITLE: Deriving Public Key from Seed Phrase\nDESCRIPTION: Derives a public key from a seed phrase and optional passphrase. The command prompts the user to enter their seed phrase and passphrase, then displays the derived public key.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey prompt://\n```\n\n----------------------------------------\n\nTITLE: Extracting Prebuilt Solana Binaries on MacOS\nDESCRIPTION: Commands to extract and configure the prebuilt Solana binaries on MacOS. This includes extracting the archive and setting up the PATH environment variable.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntar jxf solana-release-x86_64-apple-darwin.tar.bz2\ncd solana-release/\nexport PATH=$PWD/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Verifying Keypair Ownership\nDESCRIPTION: Verifies that a user controls the private key corresponding to a given public key. Prompts for the seed phrase and confirms whether it correctly derives to the specified public key.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen verify <PUBKEY> prompt://\n```\n\n----------------------------------------\n\nTITLE: Augmented Block Commitment Calculation with ForkCommitmentCache\nDESCRIPTION: Enhanced version of the commitment calculation that includes ForkCommitmentCache implementation. This version processes vote stacks in windows and handles ancestor differences for more efficient commitment tracking.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/commitment.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n   let output: HashMap<b, Stake> = HashMap::new();\n   let fork_commitment_cache = ForkCommitmentCache::default();\n   for vote_account in b.vote_accounts {\n       // vote stack is sorted from oldest vote to newest vote\n       for (v1, v2) in vote_account.vote_stack.windows(2) {\n           for a in ancestors(v1).difference(ancestors(v2)) {\n               f'(*output.get_mut(a), *fork_commitment_cache.get_mut(a), vote_account, v);\n           }\n       }\n   }\n```\n\n----------------------------------------\n\nTITLE: Querying a Stored Nonce Value in Solana CLI\nDESCRIPTION: Command to retrieve the currently stored nonce value from a nonce account, which is required when creating a durable nonce transaction.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana nonce nonce-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Solana Offline Signing Session 1 for Multi-Signature Transaction\nDESCRIPTION: First offline signing session for a Solana transfer transaction requiring multiple signatures. This session signs with the fee payer keypair and marks the 'from' account as an absent signer for the second session.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer Fdri24WUGtrCXZ55nXiewAj6RM18hRHPGAjZk3o6vBut 10 \\\n    --blockhash 7ALDjLv56a8f6sH6upAZALQKkXyjAwwENH9GomyM8Dbc \\\n    --sign-only \\\n    --keypair fee_payer.json \\\n    --from 674RgFMgdqdRoVtMqSBg7mHFbrrNm1h1r721H1ZMquHL\n```\n\n----------------------------------------\n\nTITLE: Viewing Stake Account Information in Solana CLI\nDESCRIPTION: Displays detailed information about a stake account, including the total stake amount, delegation status, and authority addresses.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana stake-account <STAKE_ACCOUNT_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Identifying Latest Optimistically Confirmed Slot in Solana 1.14+\nDESCRIPTION: This command outputs the latest optimistically confirmed slot observed by the validator using the solana-ledger-tool.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-ledger-tool -l ledger latest-optimistic-slots\n```\n\n----------------------------------------\n\nTITLE: Setting a Program's Upgrade Authority with Current Authority\nDESCRIPTION: Command to change a program's upgrade authority by specifying both the current and new authorities. This provides more control over the authority transfer.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsolana program set-upgrade-authority <PROGRAM_ADDRESS> --upgrade-authority <UPGRADE_AUTHORITY_SIGNER> --new-upgrade-authority <NEW_UPGRADE_AUTHORITY>\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Solana on Debian/Linux\nDESCRIPTION: Command to install necessary build dependencies for compiling Solana from source on Debian-based Linux distributions.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\napt-get install \\\n    build-essential \\\n    pkg-config \\\n    libudev-dev llvm libclang-dev \\\n    protobuf-compiler\n```\n\n----------------------------------------\n\nTITLE: Setting Default Keypair for Solana CLI in Bash\nDESCRIPTION: Configures the Solana CLI to use the validator keypair as the default signer.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --keypair ./validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Authorizing a New Nonce Authority in Solana CLI\nDESCRIPTION: Command to reassign the authority of a nonce account to a new account, transferring control over the nonce account from the previous authority.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana authorize-nonce-account nonce-keypair.json nonce-authority.json\n```\n\n----------------------------------------\n\nTITLE: Creating Validator Script Directory\nDESCRIPTION: Commands to create and configure the validator startup script directory and file.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /home/sol/bin\ntouch /home/sol/bin/validator.sh\nchmod +x /home/sol/bin/validator.sh\n```\n\n----------------------------------------\n\nTITLE: Closing a Solana Account with Custom Recipient\nDESCRIPTION: Command to close a program or buffer account and send the reclaimed lamports to a specific recipient address rather than the default recipient.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsolana program close <ADDRESS> --recipient <RECIPIENT_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Offline Program Upgrade Process in Solana\nDESCRIPTION: Complete sequence of commands for upgrading a program using an offline signer, including buffer creation, authority transfer, and upgrade signature generation.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# (1) (use online machine) create buffer\nsolana program write-buffer <PROGRAM_FILEPATH>\n\n# (2) (use online machine) set buffer authority to offline signer\nsolana program set-buffer-authority <BUFFER_PUBKEY> --new-buffer-authority <OFFLINE_SIGNER_PUBKEY>\n\n# (4) (use offline machine) get a signature for your intent to upgrade program\nsolana program upgrade <BUFFER_PUBKEY> <PROGRAM_ID> --sign-only --fee-payer <ONLINE_SIGNER_PUBKEY> --upgrade-authority <OFFLINE_SIGNER> --blockhash <VALUE>\n\n# (5) (use online machine) use this signature to build and broadcast the upgrade transaction on-chain\nsolana program upgrade <BUFFER_PUBKEY> <PROGRAM_ID> --fee-payer <ONLINE_SIGNER> --upgrade-authority <OFFLINE_SIGNER_PUBKEY> --blockhash <VALUE> --signer <OFFLINE_SIGNER_PUBKEY>:<OFFLINE_SIGNER_SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot with Destaked Vote Accounts in Solana\nDESCRIPTION: This command creates a new snapshot with a hard fork and destakes specified vote accounts. It's used when less than 80% of the stake participates in a restart attempt.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana-ledger-tool -l ledger create-snapshot SLOT_X ledger --hard-fork SLOT_X \\\n    --destake-vote-account <VOTE_ACCOUNT_1> \\\n    --destake-vote-account <VOTE_ACCOUNT_2> \\\n    .\n    .\n    --destake-vote-account <VOTE_ACCOUNT_N> \\\n```\n\n----------------------------------------\n\nTITLE: Advancing a Stored Nonce Value in Solana CLI\nDESCRIPTION: Command to manually advance the stored nonce value in a nonce account to a new value, returning the transaction signature.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana new-nonce nonce-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Solana Offline Signing Session 2 for Multi-Signature Transaction\nDESCRIPTION: Second offline signing session for a Solana transfer transaction that complements the first session. This signs with the 'from' account keypair and references the fee payer as an absent signer.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer Fdri24WUGtrCXZ55nXiewAj6RM18hRHPGAjZk3o6vBut 10 \\\n    --blockhash 7ALDjLv56a8f6sH6upAZALQKkXyjAwwENH9GomyM8Dbc \\\n    --sign-only \\\n    --keypair from.json \\\n    --fee-payer 3bo5YiRagwmRikuH6H1d2gkKef5nFZXE3gJeoHxJbPjy\n```\n\n----------------------------------------\n\nTITLE: Creating Solana Paper Wallet Identity in Bash\nDESCRIPTION: Generates a paper wallet for the Solana validator identity without writing to disk.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --no-outfile\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ASK\n```\n\n----------------------------------------\n\nTITLE: Solana Install CLI Interface\nDESCRIPTION: Documentation of the command-line interface for the main solana-install tool, showing the available subcommands and options for managing Solana software installation and updates.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nsolana-install 0.16.0\nThe solana cluster software installer\n\nUSAGE:\n    solana-install [OPTIONS] <SUBCOMMAND>\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n    -c, --config <PATH>    Configuration file to use [default: .../Library/Preferences/solana/install.yml]\n\nSUBCOMMANDS:\n    deploy    deploys a new update\n    help      Prints this message or the help of the given subcommand(s)\n    info      displays information about the current installation\n    init      initializes a new installation\n    run       Runs a program while periodically checking and applying software updates\n    update    checks for an update, and if available downloads and applies it\n```\n\n----------------------------------------\n\nTITLE: Implementing Cluster Discovery in Rust for Solana Test Framework\nDESCRIPTION: This code demonstrates how to discover cluster nodes in the Solana Cluster Test Framework. It uses the discover_nodes function to find available nodes over a few seconds, based on the entry point and expected number of nodes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::gossip_service::discover_nodes;\n\n// Discover the cluster over a few seconds.\nlet cluster_nodes = discover_nodes(&entry_point_info, num_nodes);\n```\n\n----------------------------------------\n\nTITLE: Displaying Wallet Address for Paper Wallet in Solana CLI\nDESCRIPTION: Demonstrates how to display the wallet address (pubkey) for a Paper Wallet using the Solana CLI, prompting for seed words.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/intro.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey prompt://\n```\n\n----------------------------------------\n\nTITLE: Installing Rust for Solana Development\nDESCRIPTION: Command to install the Rust programming language, which is a prerequisite for building Solana from source.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Verifying a Dumped Program Against Original\nDESCRIPTION: Series of commands to compare a dumped program with the original binary. This process truncates the padding, creates comparable files, and generates hashes for verification.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsolana dump <ACCOUNT_ADDRESS> dump.so\ncp original.so extended.so\ntruncate -r dump.so extended.so\nsha256sum extended.so dump.so\n```\n\n----------------------------------------\n\nTITLE: Creating Certificates for etcd-Validator Authentication in Bash\nDESCRIPTION: Commands to generate TLS certificates for secure communication between etcd and the validator nodes. Requires Go and the cfssl tool to create a certificate authority and certificates for both etcd and validator authentication.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p certs/\necho '{\"CN\":\"etcd\",\"hosts\":[\"localhost\", \"127.0.0.1\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}' > certs/config.json\n```\n\n----------------------------------------\n\nTITLE: Setting Telegram Chat ID Environment Variable in Bash\nDESCRIPTION: This command sets the TELEGRAM_CHAT_ID environment variable, specifying the Telegram group chat where solana-watchtower will send notifications.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/monitoring.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TELEGRAM_CHAT_ID=<negative chat id number>\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI for Testnet\nDESCRIPTION: This command sets the Solana CLI to use the Testnet API URL for subsequent operations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.testnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Creating New Vote Authority\nDESCRIPTION: Command to generate a new vote authority keypair for the validator.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsolana-keygen new -o ~/new-vote-authority.json\n```\n\n----------------------------------------\n\nTITLE: Solana Install Update Command Interface\nDESCRIPTION: Documentation for the 'update' subcommand of solana-install, which checks for new Solana updates and applies them if available.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nsolana-install update\nchecks for an update, and if available downloads and applies it\n\nUSAGE:\n    solana-install update\n\nFLAGS:\n    -h, --help    Prints help information\n```\n\n----------------------------------------\n\nTITLE: Sourcing Semantic Version Parser in Bash Script\nDESCRIPTION: Shows how to source the semver.sh script within another bash script and use the semverParseInto function to parse semantic version strings into separate variables for major, minor, patch, and special version components.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/semver_bash/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n. ./semver.sh  \n\nlocal MAJOR=0  \nlocal MINOR=0  \nlocal PATCH=0  \nlocal SPECIAL=\"\"\n\nsemverParseInto \"1.2.3\" MAJOR MINOR PATCH SPECIAL  \nsemverParseInto \"3.2.1\" MAJOR MINOR PATCH SPECIAL\n```\n\n----------------------------------------\n\nTITLE: Generating Solana Vanity Keypair in Bash\nDESCRIPTION: Creates a custom vanity keypair for Solana with a specified prefix.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen grind --starts-with e1v1s:1\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen grind --use-mnemonic --starts-with e1v1s:1\n```\n\n----------------------------------------\n\nTITLE: SPL Token Distribution Command\nDESCRIPTION: Command for distributing SPL tokens with owner signature and CSV input.\nSOURCE: https://github.com/solana-labs/solana/blob/master/tokens/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens distribute-spl-tokens --from <ADDRESS> --owner <KEYPAIR> \\\n    --input-csv <RECIPIENTS_CSV> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Closing a Solana Account with Specific Authority\nDESCRIPTION: Command to close a program or buffer account using a specific authority keypair rather than the default authority.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsolana program close <ADDRESS> --buffer-authority <KEYPAIR_FILEPATH>\n```\n\n----------------------------------------\n\nTITLE: Testing etcd TLS Setup with curl in Bash\nDESCRIPTION: Command to verify that the etcd TLS certificates are properly configured. Uses curl to test the secure connection to the etcd server using the validator's certificate for authentication.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --cacert certs/etcd-ca.pem https://127.0.0.1:2379/ --cert certs/validator.pem --key certs/validator-key.pem\n```\n\n----------------------------------------\n\nTITLE: Visualizing Fork Structure in Solana Blockchain\nDESCRIPTION: This ASCII diagram illustrates the structure of forks in the Solana blockchain, showing how different slots can branch off from a common root, creating multiple valid paths.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/managing-forks.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n      2 - 4 - 6 - 8\n     /\n0 - 1       12 - 13\n     \\     /\n      3 - 5\n           \\\n            7 - 9 - 10 - 11\n```\n\n----------------------------------------\n\nTITLE: Monitor Program Logs\nDESCRIPTION: Stream program logs from the local test validator\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/test-validator.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana logs\n```\n\n----------------------------------------\n\nTITLE: Creating Solana Authorized Withdrawer Account in Bash\nDESCRIPTION: Generates a new keypair for the authorized withdrawer account.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o ~/authorized-withdrawer-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Deactivating Stake in Solana\nDESCRIPTION: Deactivate the stake delegated to your validator. This is necessary before detaching your validator from the cluster. Note that deactivation is not immediate and goes through a cool-down period.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-stake.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana deactivate-stake ~/validator-stake-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Creating New Release Branch Commands\nDESCRIPTION: Shell commands for checking out latest master commit and creating a new release branch in the Solana repository.\nSOURCE: https://github.com/solana-labs/solana/blob/master/RELEASE.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --all\\ngit checkout upstream/master\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <branchname>\\ngit push -u origin <branchname>\n```\n\n----------------------------------------\n\nTITLE: Deactivate Runtime Features\nDESCRIPTION: Start test validator with specific runtime features deactivated\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/test-validator.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana-test-validator --deactivate-feature <FEATURE_PUBKEY_1> --deactivate-feature <FEATURE_PUBKEY_2>\n```\n\n----------------------------------------\n\nTITLE: Signing an Off-Chain Message with Ledger Hardware Wallet in Solana CLI\nDESCRIPTION: Command to sign an off-chain message using a Ledger hardware wallet. Requires Ledger running the latest firmware and Solana Ledger App version 1.3.0 or later.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana sign-offchain-message -k usb://ledger <MESSAGE>\n```\n\n----------------------------------------\n\nTITLE: Listing Solana Program and Buffer Accounts\nDESCRIPTION: Commands to show all program or buffer accounts matching the default authority. These help manage existing deployments and buffers.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana program show --programs\nsolana program show --buffers\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Solana Validator with etcd Integration in Bash\nDESCRIPTION: Command-line arguments for the solana-validator program to enable tower storage in etcd. The validator will store its voting records in etcd using TLS certificate authentication.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana-validator ... \\\n  --tower-storage etcd \\\n  --etcd-cacert-file certs/etcd-ca.pem \\\n  --etcd-cert-file certs/validator.pem \\\n  --etcd-key-file certs/validator-key.pem \\\n  --etcd-endpoint 127.0.0.1:2379  # <-- replace 127.0.0.1 with the actual IP address\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Solana Docker CI Image\nDESCRIPTION: Command to build and publish the updated Docker image for Solana CI. This shell command executes the build script that handles building and pushing the Docker image to Solana's Docker Hub repository.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/docker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nci/docker/build.sh\n```\n\n----------------------------------------\n\nTITLE: Outlining Validator Behavior in Ledger Replication\nDESCRIPTION: This snippet describes the behavior of validators in the ledger replication process, including joining the network, selecting proofs to verify, and handling validations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_1\n\nLANGUAGE: pseudo\nCODE:\n```\n1. Validators join the network and look for archiver accounts at each storage epoch boundary.\n2. Every turn, Validators sign the PoH value and use it to randomly pick proofs to verify.\n3. Every NUM_SLOTS_PER_TURN slots, the validator advertises the PoH value.\n4. For turn N, validations are locked out until turn N+3.\n5. Incorrect validations are marked during the turn in between.\n```\n\n----------------------------------------\n\nTITLE: Executing Solana Schema Creation Script\nDESCRIPTION: This command runs the downloaded schema creation script to set up the necessary database objects for the Solana AccountsDB plugin.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npsql -U solana -p 5433 -h 10.138.0.9 -w -d solana -f create_schema.sql\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual Failover Between Solana Validators in Bash\nDESCRIPTION: Command to safely trigger a failover from the primary validator to the secondary. This script waits for an appropriate restart window and then sets the secondary validator to use the primary's identity.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-failover.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-validator wait-for-restart-window --identity validator-keypair.json \\\n  && solana-validator set-identity validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: Running the Transaction Performance Benchmark Client\nDESCRIPTION: Launch the benchmark client that floods the network with transactions to measure transaction processing throughput.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNDEBUG=1 ./multinode-demo/bench-tps.sh # runs against localhost by default\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrotate for Solana Validator\nDESCRIPTION: Logrotate configuration setup for managing Solana validator log files. Includes rotation schedule and signal handling for log file management.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncat > logrotate.sol <<EOF\n/home/sol/solana-validator.log {\n  rotate 7\n  daily\n  missingok\n  postrotate\n    systemctl kill -s USR1 sol.service\n  endscript\n}\nEOF\nsudo cp logrotate.sol /etc/logrotate.d/sol\nsystemctl restart logrotate.service\n```\n\n----------------------------------------\n\nTITLE: Viewing the Public Key Output from Keypair Generation\nDESCRIPTION: Example output from the keypair generation command showing the public key that will be used as the stake account address. This address should be saved for future reference.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npubkey: GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV\n```\n\n----------------------------------------\n\nTITLE: Creating a New Solana Keypair Without Saving to File\nDESCRIPTION: Command to generate a new Solana keypair without a passphrase and without saving to a file. This creates a paper wallet where the seed phrase must be manually recorded.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/transfer-tokens.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new --no-passphrase --no-outfile\n```\n\n----------------------------------------\n\nTITLE: Installing fail2ban for Brute Force Attack Protection\nDESCRIPTION: Command to install the fail2ban security tool which helps prevent brute force attacks by monitoring logs and temporarily banning IP addresses showing suspicious login attempts.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/security.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install fail2ban\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Ledger Replication Protocol\nDESCRIPTION: This snippet defines the key constants used in the ledger replication protocol, including segment sizes, proof requirements, and encryption parameters.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_0\n\nLANGUAGE: pseudo\nCODE:\n```\n1. SLOTS_PER_SEGMENT: Number of slots in a segment of ledger data.\n2. NUM_KEY_ROTATION_SEGMENTS: Number of segments after which archivers regenerate encryption keys.\n3. NUM_STORAGE_PROOFS: Number of storage proofs required for a successful reward claim.\n4. RATIO_OF_FAKE_PROOFS: Ratio of fake proofs to real proofs in a valid storage mining proof claim.\n5. NUM_STORAGE_SAMPLES: Number of samples required for a storage mining proof.\n6. NUM_CHACHA_ROUNDS: Number of encryption rounds for generating encrypted state.\n7. NUM_SLOTS_PER_TURN: Number of slots defining a single storage epoch or \"turn\" of the PoRep game.\n```\n\n----------------------------------------\n\nTITLE: Stake Account Information Output Example\nDESCRIPTION: Example output from the stake-account command showing an undelegated stake account with its total stake amount and authorities.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nTotal Stake: 5000 SOL\nStake account is undelegated\nStake Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5F\nWithdraw Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5F\n```\n\n----------------------------------------\n\nTITLE: Signing an Off-Chain Message with Specific Keypair in Solana CLI\nDESCRIPTION: Command to sign an off-chain message with a specific keypair using the -k/--keypair option instead of the CLI's default private key.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana sign-offchain-message -k <KEYPAIR> <MESSAGE>\n```\n\n----------------------------------------\n\nTITLE: Check Feature Status\nDESCRIPTION: View status of runtime features in local test validator\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/test-validator.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana feature status -ul\n```\n\n----------------------------------------\n\nTITLE: Adding Validator Nodes to the Testnet\nDESCRIPTION: Launch additional validator nodes to create a multinode testnet for testing consensus and network performance.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNDEBUG=1 ./multinode-demo/validator-x.sh\n```\n\n----------------------------------------\n\nTITLE: Switching to Sol User\nDESCRIPTION: Command to switch to the sol user account on the validator server.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsu - sol\n```\n\n----------------------------------------\n\nTITLE: Starting Solana Testnet Deployment in Bash\nDESCRIPTION: Command to deploy the Solana network from the local workspace and start processes on all nodes, including bench-tps on the client node.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./net.sh start\n```\n\n----------------------------------------\n\nTITLE: Offline Signing a Payment Transaction in Solana CLI\nDESCRIPTION: Command for signing a Solana transfer transaction offline with a specified blockhash. This command produces pubkey/signature pairs which can be later used to submit the transaction without exposing private keys.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer --sign-only --blockhash 5Tx8F3jgSHx21CbtjwmdaKPLM5tWmreWAnPrbqHomSJF \\\n    recipient-keypair.json 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Solana Validator Exit Help\nDESCRIPTION: Shows how to view help information for the solana-validator exit command, which is used to safely stop the validator process.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana-validator exit --help\n```\n\n----------------------------------------\n\nTITLE: Vote Latency Implementation Documentation\nDESCRIPTION: Comprehensive documentation explaining the process of tracking vote latency and awarding credits in Solana's voting system. The implementation involves storing latency values in VoteState, handling both Vote and VoteStateUpdate instructions, and calculating credits based on vote latency.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/timely-vote-credits.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Method of Implementation\n\nWhen a Vote or VoteStateUpdate instruction is received by a validator, it will\nuse the Clock sysvar to identify the slot in which that instruction has\nlanded.  For any newly voted on slot within that Vote or VoteStateUpdate\ntransaction, the validator will record the vote latency of that slot as\n(voted_in_slot - voted_on_slot).\n\nThese vote latencies will be stored a new vector of u8 latency values appended\nto the end of the VoteState.  VoteState currently has ~200 bytes of free space\nat the end that is unused, so this new vector of u8 values should easily fit\nwithin this available space.  Because VoteState is an ABI frozen structure,\nutilizing the mechanisms for updating frozen ABI will be required, which will\ncomplicate the change.  Furthermore, because VoteState is embedded in the\nTower data structure and it is frozen ABI as well, updates to the frozen ABI\nmechanisms for Tower will be needed also.  These are almost entirely\nmechanical changes though, that involve ensuring that older versions of these\ndata structures can be updated to the new version as they are read in, and the\nnew version written out when the data structure is next persisted.\n\nThe credits to award for a rooted slot will be calculated using the latency\nvalue stored in latency vector for the slot, and a formula that awards\nlatencies of 1 - 3 slots ten credits, with a 1 credit reduction for each vote\nlatency after 3.  Rooted slots will always be awarded a minimum credit of 1\n(never 0) so that very old votes, possibly necessary in times of network\nstress, are not discouraged.\n\nTo summarize the above: latency is recorded in a new Vector at the end of\nVoteState when a vote first lands, but the credits for that slot are not\nawarded until the slot becomes rooted, at which point the latency that was\nrecorded is used to compute the credits to award for that newly rooted slot.\n\nWhen a Vote instruction is processed, the changes are fairly easy to implement\nas Vote can only add new slots to the end of Lockouts and pop existing slots\noff of the back (which become rooted), so the logic merely has to compute\nrewards for the new roots, and new latencies for the newly added slots, both\nof which can be processed in the fairly simple existing logic for Vote\nprocessing.\n\nWhen a VoteStateUpdate instruction is processed:\n\n1. For each slot that was in the previous VoteState but are not in the new\nVoteState because they have been rooted in the transition from the old\nVoteState to the new VoteState, credits to award are calculated based on the\nlatency that was recorded for them and still available in the old VoteState.\n\n2. For each slot that was in both the previous VoteState and the new\nVoteState, the latency that was previously recorded for that slot is copied\nfrom the old VoteState to the new VoteState.\n\n3. For each slot that is in the new VoteState but wasn't in the old VoteState,\nthe latency value is calculated for this new slot according to what slot the\nvote is for and what slot is in the Clock (i.e. the slot this VoteStateUpdate\ntx landed in) and this latency is stored in VoteState for that slot.\n\nThe code to handle this is more complex, because VoteStateUpdate may include\nremoval of slots that expired as performed by the voting validator, in\naddition to slots that have been rooted and new slots added.  However, the\nassumptions that are needed to handle VoteStateUpdate with timely vote credits\nare already guaranteed by existing VoteStateUpdate correctness checking code:\n\nThe existing VoteStateUpdate processing code already ensures that (1) only\nroots slots that could actually have been rooted in the transition from the\nold VoteState to the new VoteState, so there is no danger of over-counting\ncredits (i.e. imagine that a 'cheating' validator \"pretended\" that slots were\nrooted by dropping them off of the back of the new VoteState before they have\nactually achieved 32 confirmations; the existing logic prevents this).\n\nThe existing VoteStateUpdate processing code already ensures that (2) new\nslots included in the new VoteState are only slots after slots that have\nalready been voted on in the old VoteState (i.e. can't inject new slots in the\nmiddle of slots already voted on).\n```\n\n----------------------------------------\n\nTITLE: Closing All Buffer Accounts\nDESCRIPTION: Command to close all buffer accounts associated with the current authority. This helps clean up after multiple deployment attempts.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsolana program close --buffers\n```\n\n----------------------------------------\n\nTITLE: Verifying an Off-Chain Message Signature with Default Signer in Solana CLI\nDESCRIPTION: Command to verify the signature of an off-chain message using the public key of the default CLI signer in Solana CLI.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana verify-offchain-signature <MESSAGE> <SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Verifying Solana Validator Version\nDESCRIPTION: Shows how to grep the log file to verify the version of Solana that the validator restarted with.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngrep -B1 'Starting validator with' <path/to/logfile>\n```\n\n----------------------------------------\n\nTITLE: Starting a Bootstrap Validator Node\nDESCRIPTION: Launch the first validator node that will serve as the bootstrap leader for the Solana testnet.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNDEBUG=1 ./multinode-demo/bootstrap-validator.sh\n```\n\n----------------------------------------\n\nTITLE: Defining ProofValidation Transaction Structure in Solana\nDESCRIPTION: Outlines the structure of a ProofValidation transaction used by validators to confirm the validity of storage proofs submitted by archivers.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nProofValidation {\n   proof_mask: Vec<ProofStatus>,\n}\nkeys = [validator_keypair, archiver_keypair(s) (unsigned)]\n```\n\n----------------------------------------\n\nTITLE: Creating GPU-Enabled Solana Testnet in Bash\nDESCRIPTION: Commands to create Solana testnets on GCE or EC2 with GPU-enabled instances, allowing for CUDA support.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gce.sh create -g ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ec2.sh create -g ...\n```\n\n----------------------------------------\n\nTITLE: Verifying an Off-Chain Message Signature with Specific Signer in Solana CLI\nDESCRIPTION: Command to verify the signature of an off-chain message using a specific public key instead of the default CLI signer in Solana CLI.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana verify-offchain-signature --signer <PUBKEY> <MESSAGE> <SIGNATURE>\n```\n\n----------------------------------------\n\nTITLE: Setting Telegram Bot Token Environment Variable in Bash\nDESCRIPTION: This command sets the TELEGRAM_BOT_TOKEN environment variable, which is required for solana-watchtower to send notifications via Telegram.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TELEGRAM_BOT_TOKEN=<HTTP API Token>\n```\n\n----------------------------------------\n\nTITLE: Defining Program Instructions using Attribute Macros in Rust\nDESCRIPTION: Example of using the new instruction macro format to define program instructions with detailed account metadata and documentation. Shows how to specify account permissions, optionality, and descriptions using attributes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/program-instruction-macro.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[instructions(test_program::id())]\npub enum TestInstruction {\n    /// Transfer lamports\n    #[accounts(\n        from_account(SIGNER, WRITABLE, desc = \"Funding account\"),\n        to_account(WRITABLE, desc = \"Recipient account\"),\n    )]\n    Transfer {\n        lamports: u64,\n    },\n\n    /// Provide M of N required signatures\n    #[accounts(\n        data_account(WRITABLE, desc = \"Data account\"),\n        signers(SIGNER, multiple, desc = \"Signer\"),\n    )]\n    Multisig,\n\n    /// Consumes a stored nonce, replacing it with a successor\n    #[accounts(\n        nonce_account(SIGNER, WRITABLE, desc = \"Nonce account\"),\n        recent_blockhashes_sysvar(desc = \"RecentBlockhashes sysvar\"),\n        nonce_authority(SIGNER, optional, desc = \"Nonce authority\"),\n    )]\n    AdvanceNonceAccount,\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Deployed Solana Program\nDESCRIPTION: Command to extend an already deployed program's account size to accommodate larger redeployments. This adds additional bytes to the program's allocated space.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana program extend <PROGRAM_ID> <ADDITIONAL_BYTES>\n```\n\n----------------------------------------\n\nTITLE: Submitting an Offline Signed Transaction in Solana CLI\nDESCRIPTION: Command for submitting a previously offline-signed Solana transaction to the network. It uses the same blockhash that was used during signing and includes the pubkey/signature pairs directly in the transaction.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/offline-signing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana transfer --blockhash 5Tx8F3jgSHx21CbtjwmdaKPLM5tWmreWAnPrbqHomSJF \\\n    --signer FhtzLVsmcV7S5XqGD79ErgoseCLhZYmEZnz9kQg1Rp7j=4vC38p4bz7XyiXrk6HtaooUqwxTWKocf45cstASGtmrD398biNJnmTcUCVEojE7wVQvgdYbjHJqRFZPpzfCQpmUN\n    recipient-keypair.json 1\n```\n\n----------------------------------------\n\nTITLE: Resuming a Failed Solana Program Deployment\nDESCRIPTION: Command to resume a failed program deployment by specifying the recovered buffer keypair. This allows reusing the previously allocated buffer account.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana program deploy --buffer <KEYPAIR_PATH> <PROGRAM_FILEPATH>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Solana Network with Genesis Ledger\nDESCRIPTION: Generate the genesis ledger required to initialize a Solana network using the setup script.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNDEBUG=1 ./multinode-demo/setup.sh\n```\n\n----------------------------------------\n\nTITLE: Defining ClaimStorageReward Transaction Structure in Solana\nDESCRIPTION: Describes the structure of a ClaimStorageReward transaction used by both validators and archivers to claim rewards for their participation in the storage proof process.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nClaimStorageReward {\n}\nkeys = [validator_keypair or archiver_keypair, validator/archiver_keypairs (unsigned)]\n```\n\n----------------------------------------\n\nTITLE: Resolving Multiple Hardware Wallet Signers\nDESCRIPTION: Command to generate fully qualified URLs for managing multiple hardware wallets.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nsolana resolve-signer usb://ledger?key=0/0\n```\n\n----------------------------------------\n\nTITLE: Signing an Off-Chain Message with Custom Version in Solana CLI\nDESCRIPTION: Command to sign an off-chain message specifying a custom version instead of using the default (version 0). This is used when other message versions become available.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/sign-offchain-message.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana sign-offchain-message -k <KEYPAIR> --version <VERSION> <MESSAGE>\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Nightly for Benchmarking\nDESCRIPTION: Command to install the nightly version of Rust required for benchmarking.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ rustup install nightly\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Disk Image for Default CI Instances\nDESCRIPTION: GCP command to create a new disk image for the ci-default instance group, using a timestamp in the name and assigning it to the ci-default family.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n $ gcloud compute images create ci-default-$(date +%Y%m%d%H%M) --source-disk xxx --source-disk-zone us-east1-b --family ci-default\n\n```\n\n----------------------------------------\n\nTITLE: Building Solana in Release Mode\nDESCRIPTION: Compile the Solana codebase with optimizations for good performance using the release build configuration.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Check Test Validator Help\nDESCRIPTION: Display all available configuration options for solana-test-validator\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/test-validator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-test-validator --help\n```\n\n----------------------------------------\n\nTITLE: Viewing Validator Info Command Help\nDESCRIPTION: Command to display help information about the optional arguments available when publishing validator information.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-info.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana validator-info publish --help\n```\n\n----------------------------------------\n\nTITLE: Defining TransportError Enum in Rust\nDESCRIPTION: Modification of the TransportError enum to use Box<dyn Error> instead of String for custom errors, improving error handling flexibility.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/rust-clients.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nTransportError::Custom(Box<dyn Error>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Cluster in Rust for Solana Test Framework\nDESCRIPTION: This snippet shows how to configure and create a local cluster for testing in the Solana Cluster Test Framework. It uses ValidatorConfig to set up the cluster with specific parameters, allowing for customized test scenarios.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet mut validator_config = ValidatorConfig::default_for_test();\nlet local = LocalCluster::new_with_config(\n                num_nodes,\n                10_000,\n                100,\n                &validator_config\n                );\n```\n\n----------------------------------------\n\nTITLE: Showing All Buffer Accounts\nDESCRIPTION: Command to display all buffer accounts regardless of their authority. This provides visibility into all buffer accounts on the system.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsolana program show --buffers --all\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds from a Nonce Account in Solana CLI\nDESCRIPTION: Command to withdraw funds from a nonce account to another account, specifying the source nonce account, destination account, and amount to withdraw.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/durable-nonce.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana withdraw-from-nonce-account nonce-keypair.json ~/.config/solana/id.json 0.5\n```\n\n----------------------------------------\n\nTITLE: Transaction Log Format\nDESCRIPTION: Example of transaction log recording completed distributions with timestamps and signatures.\nSOURCE: https://github.com/solana-labs/solana/blob/master/tokens/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrecipient,amount,signature\n6Vo87BaDhp4v4GHwVDhw5huhxVF8CyxSXYtkUwVHbbPv,70.0,2020-09-15T23:29:26.879747Z,UB168XhBhecxzeD1w2ZRUhwTHpPSqv2WNh8NrZHqz1F2EqxxbSW6iFfVtsg3HkU9NX2cD7R92D8VRLSyArZ9xKQ\n```\n\n----------------------------------------\n\nTITLE: Computing Security Parameter for XOR Collision Prevention\nDESCRIPTION: Mathematical formula demonstrating the 128-bit security level achieved with the chosen parameters of 440-byte blocks and 2^40 accounts using XOR-based hashing scheme.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/snapshot-verification.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nO(k * 2^(n/(1+lg(k)))\nk=2^40 accounts\nn=440\n2^(40) * 2^(448 * 8 / 41) ~= O(2^(128))\n```\n\n----------------------------------------\n\nTITLE: Solana Install Run Command Interface\nDESCRIPTION: Documentation for the 'run' subcommand of solana-install, which runs a program while periodically checking for and applying software updates, restarting the program when updates are applied.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nsolana-install run\nRuns a program while periodically checking and applying software updates\n\nUSAGE:\n    solana-install run <program_name> [program_arguments]...\n\nFLAGS:\n    -h, --help    Prints help information\n\nARGS:\n    <program_name>            program to run\n    <program_arguments>...    arguments to supply to the program\n\nThe program will be restarted upon a successful software update\n```\n\n----------------------------------------\n\nTITLE: Cloning Solana Source Code\nDESCRIPTION: Commands to clone the Solana repository from GitHub and enter the project directory.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/solana-labs/solana.git\n$ cd solana\n```\n\n----------------------------------------\n\nTITLE: Accessing Sysvar via Account Info in Solana\nDESCRIPTION: Example demonstrating how to access a sysvar by deserializing it from an account passed to the program. This method requires including the sysvar's address in the Instruction.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/sysvars.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet clock_sysvar_info = next_account_info(account_info_iter)?;\nlet clock = Clock::from_account_info(&clock_sysvar_info)?\n```\n\n----------------------------------------\n\nTITLE: Implementing Large Invalid Gossip Nodes Test for Solana Cluster\nDESCRIPTION: This function tests the resilience of a Solana cluster against floods of invalid advertised gossip nodes. It discovers the cluster, poisons it with invalid contact info, forces a refresh of the active set, and verifies that transactions still work.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn test_large_invalid_gossip_nodes(\n    entry_point_info: &ContactInfo,\n    funding_keypair: &Keypair,\n    num_nodes: usize,\n) {\n    let cluster = discover_nodes(&entry_point_info, num_nodes);\n\n    // Poison the cluster.\n    let client = create_client(entry_point_info.client_facing_addr(), VALIDATOR_PORT_RANGE);\n    for _ in 0..(num_nodes * 100) {\n        client.gossip_push(\n            cluster_info::invalid_contact_info()\n        );\n    }\n    sleep(Durration::from_millis(1000));\n\n    // Force refresh of the active set.\n    for node in &cluster {\n        let client = create_client(node.client_facing_addr(), VALIDATOR_PORT_RANGE);\n        client.gossip_refresh_active_set();\n    }\n\n    // Verify that spends still work.\n    verify_spends(&cluster);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing frozen_abi Attribute for ABI Stability in Rust\nDESCRIPTION: Example of how to apply the frozen_abi attribute to a struct to preserve ABI compatibility. The attribute takes a digest parameter that contains a hash representing the current ABI structure of the type.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/abi-management.md#2025-04-23_snippet_0\n\nLANGUAGE: patch\nCODE:\n```\n+#[frozen_abi(digest=\"eXSMM7b89VY72V...\")]\n #[derive(Serialize, Default, Deserialize, Debug, PartialEq, Eq, Clone)]\n pub struct Vote {\n     /// A stack of votes starting with the oldest vote\n     pub slots: Vec<Slot>,\n     /// signature of the bank's state at the last slot\n     pub hash: Hash,\n }\n```\n\n----------------------------------------\n\nTITLE: Airdropping SOL to Solana Validator in Bash\nDESCRIPTION: Requests an airdrop of 1 SOL to the validator's account on Devnet or Testnet.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana airdrop 1\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Account Balance\nDESCRIPTION: Commands to check the balance of any Solana account address.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana balance SOME_WALLET_ADDRESS\nsolana balance 7cvkjYAkUYs4W8XcXsca7cBrEGFeSUjeZmKoNBvEwyri\n```\n\n----------------------------------------\n\nTITLE: Stake Account Distribution Command\nDESCRIPTION: Command for distributing stake accounts with required authorities.\nSOURCE: https://github.com/solana-labs/solana/blob/master/tokens/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens distribute-stake --stake-account-address <ACCOUNT_ADDRESS> \\\n    --input-csv <ALLOCATIONS_CSV> \\\n    --stake-authority <KEYPAIR> --withdraw-authority <KEYPAIR> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the Docusaurus development server for local documentation preview.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Solana Install Init Command Interface\nDESCRIPTION: Documentation for the 'init' subcommand of solana-install, which initializes a new installation by specifying the data directory, JSON RPC URL, and public key of the update manifest.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nsolana-install-init\ninitializes a new installation\n\nUSAGE:\n    solana-install init [OPTIONS]\n\nFLAGS:\n    -h, --help    Prints help information\n\nOPTIONS:\n    -d, --data_dir <PATH>    Directory to store install data [default: .../Library/Application Support/solana]\n    -u, --url <URL>          JSON RPC URL for the solana cluster [default: http://api.devnet.solana.com]\n    -p, --pubkey <PUBKEY>    Public key of the update manifest [default: 9XX329sPuskWhH4DQh6k16c87dHKhXLBZTL3Gxmve8Gp]\n```\n\n----------------------------------------\n\nTITLE: Installing Solana CLI on Windows - Running Installer\nDESCRIPTION: Command to execute the downloaded Solana installer on Windows, which installs the specified version of Solana CLI tools.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nC:\\solana-install-tmp\\solana-install-init.exe LATEST_SOLANA_RELEASE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Dependencies on MacOS with Homebrew\nDESCRIPTION: Command to install necessary tools and libraries for building Solana from source on MacOS using Homebrew.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbrew install rust pkg-config libudev protobuf llvm coreutils\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Service for Solana Cluster Test\nDESCRIPTION: This code configures the RPC service for a Solana cluster test. It enables RPC gossip push and refresh of the active set, which are necessary for specific test scenarios involving gossip behavior.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet mut validator_config = ValidatorConfig::default_for_test();\nvalidator_config.rpc_config.enable_rpc_gossip_push = true;\nvalidator_config.rpc_config.enable_rpc_gossip_refresh_active_set = true;\n```\n\n----------------------------------------\n\nTITLE: Transaction Account Lock Check Implementation in Rust\nDESCRIPTION: Checks if a transaction's account accesses conflict with existing locks or higher priority transactions\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n    for account_key in transaction_accounts {\n        // Check if the `LockedPubkey` conflicts with any key in the `locked_accounts` set, which\n        // would indicate a transaction using this account with a conflicting lock is already\n        // running\n        if self.locked_accounts.is_conflicting(account_key) {\n            return Conflict;\n        }\n\n        // Check if any higher fee transaction has already reserved this account. This prevents\n        // lower fee transactions from starving higher fee transactions.\n        if self.blocked_transaction_queues_by_accounts.contains_key(account_key) {\n            return Conflict;\n        }\n        return NoConflict;\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Performance-Enhanced Validators with CUDA\nDESCRIPTION: Commands for setting up GPU-accelerated validators with CUDA support for improved performance.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./fetch-perf-libs.sh\nNDEBUG=1 SOLANA_CUDA=1 ./multinode-demo/bootstrap-validator.sh\nNDEBUG=1 SOLANA_CUDA=1 ./multinode-demo/validator.sh\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Validator Info Query\nDESCRIPTION: Example output from querying validator information, showing the validator's public key and metadata including name, website URL, and icon URL in JSON format.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-info.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nValidator info from 8WdJvDz6obhADdxpGCiJKZsDYwTLNEDFizayqziDc9ah\n  Validator pubkey: 6dMH3u76qZ7XG4bVboVRnBHR2FfrxEqTTTyj4xmyDMWo\n  Info: {\"iconUrl\":\"elvis\",\"name\":\"Elvis Validator\",\"website\":\"https://elvis-validates.com\"}\n```\n\n----------------------------------------\n\nTITLE: Installing CI Dependencies for Local Testing\nDESCRIPTION: Required Cargo dependencies for running the CI suite locally on your machine.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-audit cargo-sort grcov\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Node Versions - Bash Commands\nDESCRIPTION: Commands to check current versions running on mainnet-beta and testnet canary nodes using the Solana gossip command.\nSOURCE: https://github.com/solana-labs/solana/blob/master/cd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana gossip -um | grep -E \" (edge|beta|mc[ebs]\\d)\"\n\nsolana gossip -ut | grep -E \" (tc[eb]\\d)\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Multiple Ledger Wallet Addresses\nDESCRIPTION: Commands to view different wallet addresses associated with different keypair paths on the Ledger device.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey usb://ledger\nsolana-keygen pubkey usb://ledger?key=0\nsolana-keygen pubkey usb://ledger?key=1\nsolana-keygen pubkey usb://ledger?key=2\n```\n\n----------------------------------------\n\nTITLE: Checking Solana CLI Version in Bash\nDESCRIPTION: Verifies the installed version of the Solana command-line interface.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana --version\n```\n\n----------------------------------------\n\nTITLE: Creating New Snapshot with Hard Fork in Solana\nDESCRIPTION: This command creates a new snapshot for a specified slot with a hard fork using solana-ledger-tool. It outputs the new shred version and bank hash.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/restart-cluster.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-ledger-tool -l <LEDGER_PATH> --snapshot-archive-path <SNAPSHOTS_PATH> --incremental-snapshot-archive-path <INCREMENTAL_SNAPSHOTS_PATH> create-snapshot SLOT_X <SNAPSHOTS_PATH> --hard-fork SLOT_X\n```\n\n----------------------------------------\n\nTITLE: Defining Test Interface in Rust for Solana Cluster Test Framework\nDESCRIPTION: This code snippet defines the interface for a Cluster Test Framework test in Rust. It takes an entry point, a funded keypair, and the number of nodes as parameters. This structure allows tests to be independent of cluster deployment methods.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/cluster-test-framework.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::contact_info::ContactInfo;\nuse solana_sdk::signature::{Keypair, Signer};\npub fn test_this_behavior(\n    entry_point_info: &ContactInfo,\n    funding_keypair: &Keypair,\n    num_nodes: usize,\n)\n```\n\n----------------------------------------\n\nTITLE: Authorizing a New Key for a Stake Account in Solana\nDESCRIPTION: This instruction updates a Stake account with a new authorized staker or withdrawer. The transaction must be signed by the current authorized staker or withdrawer, and any lock-up constraints must be satisfied.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nStakeInstruction::Authorize(Pubkey, StakeAuthorize)\n```\n\n----------------------------------------\n\nTITLE: Testing Metrics Setup for Solana\nDESCRIPTION: This command runs a test script to send a test airdrop data point and verify the metrics setup.\nSOURCE: https://github.com/solana-labs/solana/blob/master/metrics/scripts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./test.sh\n```\n\n----------------------------------------\n\nTITLE: Calculating Block Timestamp in Solana\nDESCRIPTION: Algorithm for determining the timestamp of a specific block based on a known reference timestamp. It uses the slot offset multiplied by the slot duration added to the mean timestamp from validators.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/validator-timestamp-oracle.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlet block_n_timestamp = mean_timestamp + (block_n_slot_offset * slot_duration);\n```\n\n----------------------------------------\n\nTITLE: Solana Program Unit Test Example\nDESCRIPTION: Example of a unit test using the Criterion testing framework. Shows basic test structure and inclusion of program source.\nSOURCE: https://github.com/solana-labs/solana/blob/master/sdk/bpf/c/README.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <criterion/criterion.h>\n#include \"../src/program.c\"\n\nTest(test_suite_name, test_case_name) {\n  cr_assert(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Solana CLI on Windows - Downloading Installer\nDESCRIPTION: Command to download the Solana installer on Windows using curl. It saves the installer to a temporary directory for execution.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmd /c \"curl https://release.solana.com/LATEST_SOLANA_RELEASE_VERSION/solana-install-init-x86_64-pc-windows-msvc.exe --output C:\\solana-install-tmp\\solana-install-init.exe --create-dirs\"\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Validator Loop in Solana\nDESCRIPTION: This pseudocode outlines the main steps in the validator loop, including querying for the next assigned slot, running the TVU, starting the TPU when it's time to be a slot leader, and producing entries until the end of the slot.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/leader-validator-transition.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Query the LeaderScheduler for the next assigned slot.\n2. Run the TVU over all the forks. 1. TVU will send votes to what it believes is\n   the \"best\" fork. 2. After each vote, restart the PoH Recorder to run until\n   the next assigned slot.\n3. When time to be a slot leader, start the TPU. Point it to the last fork the\n   TVU voted on.\n4. Produce entries until the end of the slot. 1. For the duration of the slot,\n   the TVU must not vote on other forks. 2. After the slot ends, the TPU freezes\n   its BankFork. After freezing, the TVU may resume voting.\n5. Goto 1.\n```\n\n----------------------------------------\n\nTITLE: Initializing Metrics for Solana Testnet in Bash\nDESCRIPTION: Command to recreate a metrics database for the testnet and configure credentials. This step is optional and requires InfluxDB user access.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./init-metrics.sh $(whoami)\n```\n\n----------------------------------------\n\nTITLE: Accessing Legacy Raw Keypair's Public Key\nDESCRIPTION: Retrieves the public key from a legacy, raw keypair by using the ASK keyword. This prompts the user to enter their keypair details directly.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey ASK\n```\n\n----------------------------------------\n\nTITLE: Executing Semantic Version Comparison in Bash\nDESCRIPTION: Demonstrates how to use the semver.sh script from the command line to compare two semantic version strings. The script parses the versions and performs equality and comparison operations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/semver_bash/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./semver.sh \"3.2.1\" \"3.2.1-alpha\"  \n3.2.1 -> M: 3 m:2 p:1 s:  \n3.2.1-alpha -> M: 3 m:2 p:1 s:-alpha  \n3.2.1 == 3.2.1-alpha -> 1.  \n3.2.1 < 3.2.1-alpha -> 1.  \n3.2.1 > 3.2.1-alpha -> 0.\n```\n\n----------------------------------------\n\nTITLE: Blockstore Shred Reception Rules\nDESCRIPTION: Specifies the validation rules and slashing conditions for receiving shreds in the blockstore, including handling of LAST_SHRED_IN_SLOT flag and duplicate shreds.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/tick-verification.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. `s` is marked as `LAST_SHRED_IN_SLOT`, then check if there exists a shred\n   `s'` in blockstore for that slot where `s'.index > s.index` If so, together `s`\n   and `s'` constitute a slashing proof.\n\n2. Blockstore has already received a shred `s'` marked as `LAST_SHRED_IN_SLOT`\n   with index `i`. If `s.index > i`, then together `s` and `s'`constitute a\n   slashing proof. In this case, blockstore will also not insert `s`.\n\n3. Duplicate shreds for the same index are ignored. Non-duplicate shreds for\n   the same index are a slashable condition.\n```\n\n----------------------------------------\n\nTITLE: Basic Recipients CSV Format\nDESCRIPTION: Example CSV format for token distribution showing recipient addresses, amounts, and optional lockup dates.\nSOURCE: https://github.com/solana-labs/solana/blob/master/tokens/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrecipient,amount,lockup_date\n3ihfUy1n9gaqihM5bJCiTAGLgWc5zo3DqVUS6T736NLM,42.0,\nCYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT,43.0,\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncClient and SyncClient Traits for Solana Transaction Handling\nDESCRIPTION: Defines the core traits used for sending transactions and checking their status in Solana. AsyncClient provides asynchronous transaction submission while SyncClient allows checking transaction signatures to determine processing status.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/testing-programs.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntrait AsyncClient {\n    fn async_send_transaction(&self, transaction: Transaction) -> io::Result<Signature>;\n}\n\ntrait SyncClient {\n    fn get_signature_status(&self, signature: &Signature) -> Result<Option<transaction::Result<()>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rebasing a branch to reorder commits in Bash\nDESCRIPTION: This snippet shows how to use interactive rebase to reorder commits in a branch, specifically moving a fix to the top of the commit history for clarity and organization.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout fix-bar\n$ git rebase -i master <Move fix-foo to top>\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI for Network Connection\nDESCRIPTION: Sets the Solana CLI to connect to a specific cluster by providing its URL. This is necessary before checking account balances or performing other network operations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url <CLUSTER URL> # (i.e. https://api.mainnet-beta.solana.com)\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics Environment Variable for Devnet in Bash\nDESCRIPTION: This command sets the SOLANA_METRICS_CONFIG environment variable for the Devnet cluster. It specifies the metrics host, database, username, and password.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SOLANA_METRICS_CONFIG=\"host=https://metrics.solana.com:8086,db=devnet,u=scratch_writer,p=topsecret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Access Control in pg_hba.conf\nDESCRIPTION: This snippet shows how to modify the pg_hba.conf file to grant database access to nodes within a specific IP range. It allows all databases to be accessed by IPs in the 10.138.0.0/24 CIDR block.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nhost    all             all             10.138.0.0/24           trust\n```\n\n----------------------------------------\n\nTITLE: Creating Solana GCE Testnet in Bash\nDESCRIPTION: Command to create a Google Compute Engine testnet with 5 additional nodes and 1 client. This is part of the quick start guide for setting up a Solana test network.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gce.sh create -n 5 -c 1\n```\n\n----------------------------------------\n\nTITLE: Stopping Metric Services for Solana\nDESCRIPTION: This command stops the local metric services for Solana using a shell script.\nSOURCE: https://github.com/solana-labs/solana/blob/master/metrics/scripts/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ ./stop.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Solana using curl bootstrap script\nDESCRIPTION: This snippet demonstrates the simplest method for installing Solana on supported platforms using a bootstrap curl script that fetches and runs the pre-built installer from GitHub.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSf https://raw.githubusercontent.com/solana-labs/solana/v1.0.0/install/solana-install-init.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Block Commitment Update Function Implementation\nDESCRIPTION: Helper function that updates both stake and block commitment records for a given ancestor. It accumulates vote account stakes based on confirmation counts.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/commitment.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n    fn f`(\n        stake: &mut Stake,\n        some_ancestor: &mut BlockCommitment,\n        vote_account: VoteAccount,\n        v: Vote, total_stake: u64\n    ){\n        f(stake, vote_account, v);\n        *some_ancestor.commitment[v.num_confirmations] += vote_account.stake;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Solana ZK Token Proof Program ID\nDESCRIPTION: The program ID for the ZK Token proof program on Solana blockchain.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/zk-token-proof.md#2025-04-23_snippet_0\n\nLANGUAGE: solana\nCODE:\n```\nZkTokenProof1111111111111111111111111111111\n```\n\n----------------------------------------\n\nTITLE: Proof Instructions for Equality Verification\nDESCRIPTION: List of proof instructions for verifying equality between ciphertexts and commitments.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/zk-token-proof.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- VerifyCiphertextCommitmentEquality\n- VerifyCiphertextCiphertextEquality\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics Environment Variable for Testnet in Bash\nDESCRIPTION: This command sets the SOLANA_METRICS_CONFIG environment variable for the Testnet cluster. It specifies the metrics host, database, username, and password.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport SOLANA_METRICS_CONFIG=\"host=https://metrics.solana.com:8086,db=tds,u=testnet_write,p=c4fa841aa918bf8274e3e2a44d77568d9861b3ea\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Historical Account Data in PostgreSQL\nDESCRIPTION: This SQL query deletes older historical data from the account_audit table, keeping only the 1000 most recent records for each account.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ndelete from account_audit a2 where (pubkey, write_version) in\n    (select pubkey, write_version from\n        (select a.pubkey, a.updated_on, a.slot, a.write_version, a.lamports,\n            rank() OVER ( partition by pubkey order by write_version desc) as rnk\n            from account_audit a) ranked\n            where ranked.rnk > 1000)\n```\n\n----------------------------------------\n\nTITLE: Starting Local Metric Services for Solana\nDESCRIPTION: This command starts the local metric services for Solana using a shell script.\nSOURCE: https://github.com/solana-labs/solana/blob/master/metrics/scripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ./start.sh\n```\n\n----------------------------------------\n\nTITLE: Flowchart of Durable Nonce Contract Logic\nDESCRIPTION: Pseudocode representation of the contract mechanics for durable nonces, including initialization, nonce advancement, and withdrawal operations. Details state transitions, error conditions, and balance requirements for nonce accounts.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/durable-tx-nonces.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStart\nCreate Account\n  state = Uninitialized\nNonceInstruction\n  if state == Uninitialized\n    if account.balance < rent_exempt\n      error InsufficientFunds\n    state = Initialized\n  elif state != Initialized\n    error BadState\n  if sysvar.recent_blockhashes.is_empty()\n    error EmptyRecentBlockhashes\n  if !sysvar.recent_blockhashes.contains(stored_nonce)\n    error NotReady\n  stored_hash = sysvar.recent_blockhashes[0]\n  success\nWithdrawInstruction(to, lamports)\n  if state == Uninitialized\n    if !signers.contains(owner)\n      error MissingRequiredSignatures\n  elif state == Initialized\n    if !sysvar.recent_blockhashes.contains(stored_nonce)\n      error NotReady\n    if lamports != account.balance && lamports + rent_exempt > account.balance\n      error InsufficientFunds\n  account.balance -= lamports\n  to.balance += lamports\n  success\n```\n\n----------------------------------------\n\nTITLE: Solana Install Info Command Interface\nDESCRIPTION: Documentation for the 'info' subcommand of solana-install, which displays information about the current Solana installation and available updates from the cluster.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nsolana-install info\ndisplays information about the current installation\n\nUSAGE:\n    solana-install info [FLAGS]\n\nFLAGS:\n    -h, --help     Prints help information\n    -l, --local    only display local information, don't check the cluster for new updates\n```\n\n----------------------------------------\n\nTITLE: Generated Verbose Instruction Enum in Rust\nDESCRIPTION: Auto-generated verbose instruction enum with named fields for improved clarity and type safety, including deserialization support.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/program-instruction-macro.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]\npub enum TestInstruction {\n    /// Transfer lamports\n    Transfer {\n        /// Funding account\n        funding_account: u8\n\n        /// Recipient account\n        recipient_account: u8\n\n        lamports: u64,\n    },\n\n    /// Provide M of N required signatures\n    Multisig {\n        data_account: u8,\n        signers: Vec<u8>,\n    },\n\n    /// Consumes a stored nonce, replacing it with a successor\n    AdvanceNonceAccount {\n        nonce_account: u8,\n        recent_blockhashes_sysvar: u8,\n        nonce_authority: Option<u8>,\n    }\n}\n\nimpl TestInstructionVerbose {\n    pub fn from_instruction(instruction: TestInstruction, account_keys: Vec<u8>) -> Self {\n        match instruction {\n            TestInstruction::Transfer { lamports } => TestInstructionVerbose::Transfer {\n                funding_account: account_keys[0],\n                recipient_account: account_keys[1],\n                lamports,\n            }\n            TestInstruction::Multisig => TestInstructionVerbose::Multisig {\n                data_account: account_keys[0],\n                signers: account_keys[1..],\n            }\n            TestInstruction::AdvanceNonceAccount => TestInstructionVerbose::AdvanceNonceAccount {\n                nonce_account: account_keys[0],\n                recent_blockhashes_sysvar: account_keys[1],\n                nonce_authority: &account_keys.get(2),\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Secp256k1 Signature Verification Process\nDESCRIPTION: Pseudocode demonstrating the Secp256k1 signature verification process that performs public key recovery and verification against Ethereum addresses.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/programs.md#2025-04-23_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\nprocess_instruction() {\n  for i in 0..count {\n      // i'th index values referenced:\n      instructions = &transaction.message().instructions\n      signature = instructions[secp_signature_instruction_index].data[secp_signature_offset..secp_signature_offset + 64]\n      recovery_id = instructions[secp_signature_instruction_index].data[secp_signature_offset + 64]\n      ref_eth_pubkey = instructions[secp_pubkey_instruction_index].data[secp_pubkey_offset..secp_pubkey_offset + 20]\n      message_hash = keccak256(instructions[secp_message_instruction_index].data[secp_message_data_offset..secp_message_data_offset + secp_message_data_size])\n      pubkey = ecrecover(signature, recovery_id, message_hash)\n      eth_pubkey = keccak256(pubkey[1..])[12..]\n      if eth_pubkey != ref_eth_pubkey {\n          return Error\n      }\n  }\n  return Success\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Latest Solana Edge Channel Tarball in Bash\nDESCRIPTION: Command to deploy the latest pre-built edge channel tarball (from the master branch) to an existing Solana testnet.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ./net.sh start -t edge\n```\n\n----------------------------------------\n\nTITLE: Illustrating Vote Relationships in Solana Consensus (ASCII Diagram)\nDESCRIPTION: This ASCII diagram illustrates the relationships between various votes, slots, and blocks in Solana's consensus protocol. It visually represents the concepts discussed in Lemma 1, showing the positions of votes X and X', block B, and relevant slots.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/optimistic_confirmation.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                                  +-------+\n                                  |       |\n                        +---------+       +--------+\n                        |         |       |        |\n                        |         +-------+        |\n                        |                          |\n                        |                          |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  X'\n                        |                      |       |\n                        |                      +---+---+\n                        |                          |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  B (Optimistically Confirmed)\n                        |                      |       |\n                        |                      +---+---+\n                        |                          |\n                        |                          |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  S'.last\n                        |                      |       |\n                        |                      +-------+\n                        |\n                    +---+---+\n                    |       |\n                 X  |       |\n                    |       |\n                    +---+---+\n                        |\n                        |\n                        |\n                        |\n                        |\n                        |\n                    +---+---+\n                    |       |\n            S.last  |       |\n                    |       |\n                    +---+---+\n                        |\n                        |\n                        |\n                        |\n                    +---+---+\n                    |       |\n      s + s.lockout |       |\n                    +-------+\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database for Solana\nDESCRIPTION: This command creates a new PostgreSQL database named 'solana' using the postgres user on port 5433.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres createdb solana -p 5433\n```\n\n----------------------------------------\n\nTITLE: Checking Solana Keygen Installation\nDESCRIPTION: Verifies that the solana-keygen tool is properly installed by checking its version.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen --version\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer Authority in Solana\nDESCRIPTION: Changes the authority of an existing buffer account to a new address. Useful when working with offline signers.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nsolana program set-buffer-authority <BUFFER_ADDRESS> --new-buffer-authority <NEW_BUFFER_AUTHORITY>\n```\n\n----------------------------------------\n\nTITLE: Updating Master Branch Version\nDESCRIPTION: Commands for incrementing the version number in Cargo.toml files and pushing changes to master branch.\nSOURCE: https://github.com/solana-labs/solana/blob/master/RELEASE.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ scripts/increment-cargo-version.sh minor\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit co -b version_update\\ngit ls-files -m | xargs git add\\ngit commit -m 'Bump version to X.Y+1.0'\\ngit push -u origin version_update\n```\n\n----------------------------------------\n\nTITLE: Building Solana\nDESCRIPTION: Command to build the Solana project using Cargo.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cargo build\n```\n\n----------------------------------------\n\nTITLE: Ed25519 Signature Verification Structure\nDESCRIPTION: Defines the structure for Ed25519 signature verification offsets containing signature, public key, and message data locations within the instruction data.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/programs.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct Ed25519SignatureOffsets {\n    signature_offset: u16,             // offset to ed25519 signature of 64 bytes\n    signature_instruction_index: u16,  // instruction index to find signature\n    public_key_offset: u16,            // offset to public key of 32 bytes\n    public_key_instruction_index: u16, // instruction index to find public key\n    message_data_offset: u16,          // offset to start of message data\n    message_data_size: u16,            // size of message data\n    message_instruction_index: u16,    // index of instruction data to get message data\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Commitment Calculation in Solana\nDESCRIPTION: Core algorithm for calculating block commitments by iterating through vote accounts and their vote stacks. The code builds a HashMap that tracks stake amounts for each bank and calculates confirmations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/commitment.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   let output: HashMap<b, Stake> = HashMap::new();\n   for vote_account in b.vote_accounts {\n       for v in vote_account.vote_stack {\n           for a in ancestors(v) {\n               f(*output.get_mut(a), vote_account, v);\n           }\n       }\n   }\n```\n\n----------------------------------------\n\nTITLE: Connecting to the Public Developer Testnet\nDESCRIPTION: Command to run the benchmark client against Solana's public devnet with specific parameters for testing.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nNDEBUG=1 ./multinode-demo/bench-tps.sh --entrypoint entrypoint.devnet.solana.com:8001 --faucet api.devnet.solana.com:9900 --duration 60 --tx_count 50\n```\n\n----------------------------------------\n\nTITLE: No Code Snippets Found\nDESCRIPTION: This document contains technical design specifications in markdown format but no actual code snippets.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/block-confirmation.md#2025-04-23_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Downloading Solana Schema Creation Script\nDESCRIPTION: This command downloads the SQL script for creating the necessary schema objects for the Solana AccountsDB plugin.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/solana-labs/solana/a70eb098f4ae9cd359c1e40bbb7752b3dd61de8d/accountsdb-plugin-postgres/scripts/create_schema.sql\n```\n\n----------------------------------------\n\nTITLE: Running Solana Tests\nDESCRIPTION: Command to run the Solana test suite using Cargo.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cargo test\n```\n\n----------------------------------------\n\nTITLE: Required Plugin Export Function for Solana Geyser Plugin\nDESCRIPTION: The mandatory C function that must be exposed by the plugin library to instantiate the plugin implementation. The plugin must be compiled as a cdylib dynamic library.\nSOURCE: https://github.com/solana-labs/solana/blob/master/geyser-plugin-interface/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n_create_plugin()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Final Pruned Fork Structure in Solana\nDESCRIPTION: This ASCII diagram shows the final pruned fork structure after the last voting round, demonstrating how the blockchain view is ultimately simplified to a single linear path.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/managing-forks.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n       3 - 5 - 7 - 9 - 10 - 11\n      SMR     ROOT\n```\n\n----------------------------------------\n\nTITLE: Updating Rust Version\nDESCRIPTION: Commands to update Rust to the latest stable version or install a specific version.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rustup update\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ rustup install VERSION\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Fork Versions in Solana\nDESCRIPTION: Visualization of a fork structure with multiple versions of slot 2 (2 and 2') branching from slot 1, with an additional fork to slot 6.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/handle-duplicate-block.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    |-------- 2\n    |\n0------------- 1 ------ 2'\n    |\n    |---------- 6\n\n```\n\n----------------------------------------\n\nTITLE: Describing Ledger Block Location Process\nDESCRIPTION: This snippet outlines the process for finding which archiver has a given block of the ledger, including validator monitoring and mapping of segments to archivers.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_4\n\nLANGUAGE: pseudo\nCODE:\n```\n1. Validators monitor turns and look for proofs at turn boundaries.\n2. Validators maintain a map of ledger segments to archiver public keys.\n3. Validators provide RPC interface to access this map.\n4. Clients can use the map to send repair requests to archivers.\n5. Validators invalidate the list every N turns.\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Server\nDESCRIPTION: This command starts the PostgreSQL server for version 14 on the main instance.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start postgresql@14-main\n```\n\n----------------------------------------\n\nTITLE: Displaying Solana Validator Help Information\nDESCRIPTION: Shows how to use the --help flag with the solana-validator command to get information about available flags and subcommands.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/best-practices/general.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsolana-validator --help\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Non-GPU BuildKite Agent Machine\nDESCRIPTION: Command to set up a new non-GPU machine for BuildKite CI with core requirements installed.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./setup-new-buildkite-agent/setup-new-machine.sh\n```\n\n----------------------------------------\n\nTITLE: Delegated Stake Account Information Output Example\nDESCRIPTION: Example output from the stake-account command showing a delegated stake account with information about the delegation, including the vote account address and activation epoch.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/delegate-stake.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nTotal Stake: 5000 SOL\nCredits Observed: 147462\nDelegated Stake: 4999.99771712 SOL\nDelegated Vote Account Address: CcaHc2L43ZWjwCHART3oZoJvHLAe9hzT2DJNUpBzoTN1\nStake activates starting from epoch: 42\nStake Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5F\nWithdraw Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5F\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud Platform in Bash\nDESCRIPTION: Command to authenticate with Google Cloud Platform using the gcloud CLI tool. This is a prerequisite for using GCP-based test networks.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Using Custom Derivation Path for Hierarchical Derivation\nDESCRIPTION: Derives a key using a custom full derivation path instead of Solana's standard path. This allows for compatibility with other systems or specialized wallet configurations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey prompt://?full-path=m/44/2017/0/1\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values and Structs in Solidity\nDESCRIPTION: Demonstration of a Solidity function returning multiple values, including arrays and structs.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/return-data.md#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct S {\n    int f1;\n    bool f2\n};\n\nfunction foo2() public returns (string, int[], S) {\n    return (a, b, c);\n}\n```\n\n----------------------------------------\n\nTITLE: Tick Validation Rules and Failure Scenarios\nDESCRIPTION: Defines the validation rules for ticks during replay, including hash verification between ticks and handling of the LAST_SHRED_IN_SLOT flag.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/tick-verification.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nFailure scenario 1: If ever there are two consecutive ticks between which the\nnumber of hashes is `!= hashes_per_tick`, mark this slot as dead.\n\nFailure scenario 2: If the number of ticks != `ticks_per_slot`, mark slot as\ndead.\n\nFailure scenario 3: If the number of ticks reaches `ticks_per_slot`, but we still\nhaven't seen the `LAST_SHRED_IN_SLOT`, mark this slot as dead.\n```\n\n----------------------------------------\n\nTITLE: Creating Solana Testnet with Public IP Addresses in Bash\nDESCRIPTION: Commands to create Solana testnets on GCE or EC2 using public IP addresses instead of private ones. This allows the network to run over public IP addresses.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gce.sh create -P ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ec2.sh create -P ...\n```\n\n----------------------------------------\n\nTITLE: Verify Genesis Hash\nDESCRIPTION: Check the genesis hash of the local test validator instance\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/test-validator.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsolana genesis-hash\n```\n\n----------------------------------------\n\nTITLE: Implementing Fork Choice Algorithm in Pseudocode\nDESCRIPTION: This pseudocode implements the fork choice algorithm used by validators to determine which fork to vote on when multiple concurrent forks exist. It weighs forks based on latest votes and selects the 'heaviest' fork.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/tower-bft.md#2025-04-23_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n*While* `finish == 0`\n*Do*:\n    *If*: `i` has received no children of `B` then set `finish := 1` and return\n    `B`.\n    *Else*: Let `B′` be the child of `B` (amongst those received by `i`) with\n    most the most stake-weighted votes in `V`, breaking ties by the smallest\n    slot. Set `B` equal to `B'`.\n```\n\n----------------------------------------\n\nTITLE: Increasing File Descriptor Limits on macOS\nDESCRIPTION: Commands to increase the maximum number of open file descriptors on macOS to resolve the UnableToSetOpenFileDescriptorLimit error.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo launchctl limit maxfiles 100000\nulimit -n 1000000\n```\n\n----------------------------------------\n\nTITLE: Example of a Fully Qualified Keypair URL for Ledger Device\nDESCRIPTION: This snippet shows a complete example of a keypair URL for a Ledger hardware wallet, including the manufacturer, wallet ID, and derivation path.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/hardware/index.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nusb://ledger/BsNsvfXqQTtJnagwFWdBS7FBXgnsK8VZ5CmuznN85swK?key=0/0\n```\n\n----------------------------------------\n\nTITLE: Querying InfluxDB for Airdrop Measurements in Solana\nDESCRIPTION: This command uses the InfluxDB CLI to query all airdrop measurements from the 'testnet' database. It requires the InfluxDB client to be installed.\nSOURCE: https://github.com/solana-labs/solana/blob/master/metrics/scripts/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ influx -database testnet -username read -password read -execute 'SELECT * FROM \"faucet-airdrop\"'\n```\n\n----------------------------------------\n\nTITLE: Deriving Public Key with Non-Standard Word List\nDESCRIPTION: Derives a public key from a seed phrase that was generated with a tool using a different word list than the BIP39 standard English word list. Skips seed phrase validation to accommodate non-standard word lists.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/paper.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen pubkey prompt:// --skip-seed-phrase-validation\n```\n\n----------------------------------------\n\nTITLE: Recovering a Buffer Keypair for Failed Deployments\nDESCRIPTION: Command to recover the keypair for a buffer account created during a failed deployment using the seed phrase provided in the error message.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen recover -o <KEYPAIR_PATH>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Slashable Votes in Solana\nDESCRIPTION: This ASCII diagram illustrates the concept of slashable votes in Solana's optimistic confirmation mechanism. It shows two overlapping vote ranges (vote(X', S') and vote(X, S)) that would violate the slashing conditions.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/optimistic_confirmation.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                  +-------+\n                                  |       |\n                        +---------+       +--------+\n                        |         |       |        |\n                        |         +-------+        |\n                        |                          |\n                        |                          |\n                        |                          |\n                    +---+---+                      |\n                    |       |                      |\n                X   |       |                      |\n                    |       |                      |\n                    +---+---+                      |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  X'\n                        |                      |       |\n                        |                      +---+---+\n                        |                          |\n                        |                          |\n                        |                          |\n                        |                          |\n                        |                      +---+---+\n                        |                      |       |\n                        |                      |       |  S'.last\n                        |                      |       |\n                        |                      +-------+\n                        |\n                    +---+---+\n                    |       |\n                 s  |       |\n                    |       |\n                    +---+---+\n                        |\n                        |\n                        |\n                        |\n                    +---+---+\n                    |       |\n             S.last |       |\n                    |       |\n                    +-------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Partitions for Solana Testnet in JSON\nDESCRIPTION: Example JSON configuration for creating three almost equal partitions in a Solana testnet. This config defines partitions and interconnects with specific loss and delay characteristics.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"partitions\":[\n         34,\n         33,\n         33\n      ],\n      \"interconnects\":[\n         {\n            \"a\":0,\n            \"b\":1,\n            \"config\":\"loss 15% delay 25ms\"\n         },\n         {\n            \"a\":1,\n            \"b\":0,\n            \"config\":\"loss 15% delay 25ms\"\n         },\n         {\n            \"a\":0,\n            \"b\":2,\n            \"config\":\"loss 10% delay 15ms\"\n         },\n         {\n            \"a\":2,\n            \"b\":0,\n            \"config\":\"loss 10% delay 15ms\"\n         },\n         {\n            \"a\":2,\n            \"b\":1,\n            \"config\":\"loss 5% delay 5ms\"\n         },\n         {\n            \"a\":1,\n            \"b\":2,\n            \"config\":\"loss 5% delay 5ms\"\n         }\n      ]\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Watchtower Sanity Metric in Markdown\nDESCRIPTION: Explains the 'watchtower-sanity' metric emitted on every iteration, indicating the overall result using a boolean 'ok' field.\nSOURCE: https://github.com/solana-labs/solana/blob/master/watchtower/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Metrics\n#### `watchtower-sanity`\nOn every iteration this data point will be emitted indicating the overall result\nusing a boolean `ok` field.\n```\n\n----------------------------------------\n\nTITLE: Uploading Translation Source Files\nDESCRIPTION: Command to upload source files to Crowdin and generate explicit IDs for translations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run crowdin:upload\n```\n\n----------------------------------------\n\nTITLE: Installing Fedora Dependencies\nDESCRIPTION: Commands to install required system dependencies on Fedora Linux.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install openssl-devel systemd-devel pkg-config zlib-devel llvm clang cmake make protobuf-devel protobuf-compiler perl-core\n```\n\n----------------------------------------\n\nTITLE: Documenting Changes for Solana v1.18.0\nDESCRIPTION: This snippet details the changes introduced in Solana version 1.18.0, including new features, modifications to existing functionality, and upgrade notes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.18.0]\n* Changes\n  * Added a github check to support `changelog` label\n  * The default for `--use-snapshot-archives-at-startup` is now `when-newest` (#33883)\n    * The default for `solana-ledger-tool`, however, remains `always` (#34228)\n  * Added `central-scheduler` option for `--block-production-method` (#33890)\n  * Updated to Borsh v1\n  * Added allow_commission_decrease_at_any_time feature which will allow commission on a vote account to be\n    decreased even in the second half of epochs when the commission_updates_only_allowed_in_first_half_of_epoch\n    feature would have prevented it\n  * Updated local ledger storage so that the RPC endpoint\n    `getSignaturesForAddress` always returns signatures in block-inclusion order\n  * RPC's `simulateTransaction` now returns `innerInstructions` as `json`/`jsonParsed` (#34313).\n  * Bigtable upload now includes entry summary data for each slot, stored in a\n    new `entries` table\n  * Forbid multiple values for the `--signer` CLI flag, forcing users to specify multiple occurrences of `--signer`, one for each signature\n  * New program deployments default to the exact size of a program, instead of\n    double the size. Program accounts must be extended with `solana program extend`\n    before an upgrade if they need to accommodate larger programs.\n  * Interface for `gossip_service::get_client()` has changed. `gossip_service::get_multi_client()` has been removed.\n* Upgrade Notes\n  * `solana-program` and `solana-sdk` default to support for Borsh v1, with\nlimited backward compatibility for v0.10 and v0.9. Please upgrade to Borsh v1.\n  * Operators running their own bigtable instances need to create the `entries`\n    table before upgrading their warehouse nodes\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Performance Parameters\nDESCRIPTION: This snippet provides a set of PostgreSQL configuration parameters to optimize database performance for use with the Solana AccountsDB plugin. These settings are different from the default PostgreSQL 14 installation.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmax_connections = 200                  # (change requires restart)\nshared_buffers = 1GB                   # min 128kB\neffective_io_concurrency = 1000        # 1-1000; 0 disables prefetching\nwal_level = minimal                    # minimal, replica, or logical\nfsync = off                            # flush data to disk for crash safety\nsynchronous_commit = off               # synchronization level;\nfull_page_writes = off                 # recover from partial page writes\nmax_wal_senders = 0                    # max number of walsender processes\n```\n\n----------------------------------------\n\nTITLE: Displaying Stake Warmup Example in Markdown Table\nDESCRIPTION: This markdown table illustrates the stake warmup process over multiple epochs, showing how effective and activating stakes change with a network warmup rate of 20%.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| epoch | effective | activating | total effective | total activating |\n| :---- | --------: | ---------: | --------------: | ---------------: |\n| N-1   |           |            |           2,000 |                0 |\n| N     |         0 |      1,000 |           2,000 |            1,000 |\n| N+1   |       400 |        600 |           2,400 |              600 |\n| N+2   |       880 |        120 |           2,880 |              120 |\n| N+3   |      1000 |          0 |           3,000 |                0 |\n```\n\n----------------------------------------\n\nTITLE: Example Duplicate Block Sequence in Solana\nDESCRIPTION: Linear sequence showing duplicate blocks at slots 2 and 4, used to illustrate the repair problem scenario.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/handle-duplicate-block.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1 -> 2 (duplicate) -> 3 -> 4 (duplicate)\n```\n\n----------------------------------------\n\nTITLE: Creating New Solana Crate Package Configuration\nDESCRIPTION: Template for creating a new Solana crate's Cargo.toml configuration file. Specifies package metadata including name, version, description, authors, and licensing information.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"solana-<PACKAGE_NAME>\"\nversion = \"0.0.1\"\ndescription = \"<DESCRIPTION>\"\nauthors = [\"Solana Labs Maintainers <maintainers@solanalabs.com>\"]\nrepository = \"https://github.com/solana-labs/solana\"\nhomepage = \"https://solana.com/\"\ndocumentation = \"https://docs.rs/solana-<PACKAGE_NAME>\"\nlicense = \"Apache-2.0\"\nedition = \"2021\"\n```\n\n----------------------------------------\n\nTITLE: Azure VM Management for CI Image Updates\nDESCRIPTION: Series of Azure CLI commands to deallocate, generalize, and create a new image from a VM for CI use.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naz vm deallocate --resource-group ci --name XYZ\naz vm generalize --resource-group ci --name XYZ\naz image create --resource-group ci --source XYZ --name boilerplate\n```\n\n----------------------------------------\n\nTITLE: Visualizing Solana Branch and Tag Structure\nDESCRIPTION: ASCII art diagram showing the relationship between master branch (edge channel) and various release branches and tags in the Solana versioning system.\nSOURCE: https://github.com/solana-labs/solana/blob/master/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n========================= master branch (edge channel) =======================>\\n         \\                      \\                     \\\\n          \\___v0.7.0 tag         \\                     \\\\n           \\                      \\         v0.9.0 tag__\\\\n            \\          v0.8.0 tag__\\                     \\\\n v0.7.1 tag__\\                      \\                 v0.9 branch (beta channel)\\n              \\___v0.7.2 tag         \\___v0.8.1 tag\\n               \\                      \\\\n                \\                      \\\\n           v0.7 branch         v0.8 branch (stable channel)\n```\n\n----------------------------------------\n\nTITLE: Returning String from Solidity Function\nDESCRIPTION: Example of a Solidity function returning a variable-length string.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/return-data.md#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction foo1() public returns (string) {\n    return \"Hello, world!\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Successful Solana Installation\nDESCRIPTION: Example terminal output showing a successful Solana CLI installation. It displays the release version, download URL, and confirmation of successful update.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndownloading LATEST_SOLANA_RELEASE_VERSION installer\nConfiguration: /home/solana/.config/solana/install/config.yml\nActive release directory: /home/solana/.local/share/solana/install/active_release\n* Release version: LATEST_SOLANA_RELEASE_VERSION\n* Release URL: https://github.com/solana-labs/solana/releases/download/LATEST_SOLANA_RELEASE_VERSION/solana-release-x86_64-unknown-linux-gnu.tar.bz2\nUpdate successful\n```\n\n----------------------------------------\n\nTITLE: Documenting Changes for Solana v1.17.0\nDESCRIPTION: This snippet lists the changes introduced in Solana version 1.17.0, including the addition of the changelog itself and a new startup option.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.17.0]\n* Changes\n  * Added a changelog.\n  * Added `--use-snapshot-archives-at-startup` for faster validator restarts\n* Upgrade Notes\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Dependencies\nDESCRIPTION: Commands to install required system dependencies on Ubuntu Linux.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get install libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang cmake make libprotobuf-dev protobuf-compiler\n```\n\n----------------------------------------\n\nTITLE: Creating New Validator Identity\nDESCRIPTION: Commands for generating and funding a new validator identity keypair.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/vote-accounts.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsolana-keygen new -o ~/new-validator-keypair.json\nsolana transfer ~/new-validator-keypair.json 500\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pruned Fork Structure in Solana\nDESCRIPTION: This ASCII diagram shows the pruned fork structure after applying the super majority root (SMR) and local root concepts, demonstrating how the blockchain view is simplified while maintaining essential information.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/managing-forks.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nSMR\n 0 - 1       12 - 13\n      \\     /\n       3 - 5\n     ROOT   \\\n             7 - 9 - 10 - 11\n```\n\n----------------------------------------\n\nTITLE: Installing CoreUtils for macOS CI Support\nDESCRIPTION: Commands to install coreutils on macOS, which is required for running the Solana CI locally on Mac systems.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install coreutils\n```\n\n----------------------------------------\n\nTITLE: Defining Signing Domain Specifier in Solana Off-Chain Messages\nDESCRIPTION: Specifies the byte string used as the signing domain specifier for Solana off-chain messages. This prefix is used to differentiate off-chain message signatures from transaction signatures.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/off-chain-message-signing.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nb\"\\xffsolana offchain\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Grafana Logs for Solana Metrics\nDESCRIPTION: This command displays and follows the logs of the Grafana Docker container for monitoring purposes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/metrics/scripts/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ docker logs -f grafana\n```\n\n----------------------------------------\n\nTITLE: Token Distribution Command\nDESCRIPTION: Basic command to distribute tokens using a keypair and CSV input file.\nSOURCE: https://github.com/solana-labs/solana/blob/master/tokens/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana-tokens distribute-tokens --from <KEYPAIR> --input-csv <RECIPIENTS_CSV> --fee-payer <KEYPAIR>\n```\n\n----------------------------------------\n\nTITLE: Providing Guidelines for Adding to the Changelog\nDESCRIPTION: This snippet outlines the guidelines for contributing to the changelog, including the intended audience, criteria for noteworthy changes, and instructions for updating the log.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Adding to this Changelog\n### Audience\n* Entries in this log are intended to be easily understood by contributors,\nconsensus validator operators, rpc operators, and dapp developers.\n\n### Noteworthy\n* A change is noteworthy if it:\n  * Adds a feature gate, or\n  * Implements a SIMD, or\n  * Modifies a public API, or\n  * Changes normal validator / rpc run configurations, or\n  * Changes command line arguments, or\n  * Fixes a bug that has received public attention, or\n  * Significantly improves performance, or\n  * Is authored by an external contributor.\n\n### Instructions\n* Update this log in the same pull request that implements the change. If the\nchange is spread over several pull requests update this log in the one that\nmakes the feature code complete.\n* Add notes to the [Unreleased] section in each branch that you merge to.\n  * Add a description of your change to the Changes section.\n  * Add Upgrade Notes if the change is likely to require:\n    * validator or rpc operators to update their configs, or\n    * dapp or client developers to make changes.\n* Link to any relevant feature gate issues or SIMDs.\n* If you add entries on multiple branches use the same wording if possible.\nThis simplifies the process of diffing between versions of the log.\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Trigger for Account History\nDESCRIPTION: This SQL snippet creates a function and trigger to automatically save historical account data when records in the 'account' table are updated.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION audit_account_update() RETURNS trigger AS $audit_account_update$\n    BEGIN\n\t\tINSERT INTO account_audit (pubkey, owner, lamports, slot, executable, rent_epoch, data, write_version, updated_on)\n            VALUES (OLD.pubkey, OLD.owner, OLD.lamports, OLD.slot,\n                    OLD.executable, OLD.rent_epoch, OLD.data, OLD.write_version, OLD.updated_on);\n        RETURN NEW;\n    END;\n\n$audit_account_update$ LANGUAGE plpgsql;\n\nCREATE TRIGGER account_update_trigger AFTER UPDATE OR DELETE ON account\n    FOR EACH ROW EXECUTE PROCEDURE audit_account_update();\n```\n\n----------------------------------------\n\nTITLE: Accessing Solana Testnet Nodes via SSH in Bash\nDESCRIPTION: Command to display help information for SSH access to any testnet node, allowing access to logs and other node-specific information.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ssh.sh\n```\n\n----------------------------------------\n\nTITLE: Downloading Documentation Translations\nDESCRIPTION: Command to download the latest documentation translations from Crowdin.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run crowdin:download\n```\n\n----------------------------------------\n\nTITLE: Updating PATH for CoreUtils on macOS\nDESCRIPTION: Environment variable update required after installing coreutils on macOS to ensure the GNU versions are used.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"/usr/local/opt/coreutils/libexec/gnubin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Defining Account Index Data Structure in Solana\nDESCRIPTION: The code defines the data structure for the Solana account index, showing how account locations are mapped across different forks using nested HashMaps. This structure enables tracking of account versions across the fork tree.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/persistent-account-storage.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntype AppendVecId = usize;\n\ntype Fork = u64;\n\nstruct AccountMap(Hashmap<Fork, (AppendVecId, u64)>);\n\ntype AccountIndex = HashMap<Pubkey, AccountMap>;\n```\n\n----------------------------------------\n\nTITLE: Applying Network Partition for Solana Testnet in Bash\nDESCRIPTION: Commands to induce and remove network partitions for testing purposes. Partitions are defined using a configuration file.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ net.sh netem --config-file <config file path>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ net.sh netem --config-file <config file path> --netem-cmd cleanup\n```\n\n----------------------------------------\n\nTITLE: Withdrawing from a Stake Account in Solana\nDESCRIPTION: This instruction allows withdrawing excess lamports from a Stake account. The authorized withdrawer can claim any tokens beyond the activated stake amount, requiring validation against current epoch and stake history.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nStakeInstruction::Withdraw(u64)\n```\n\n----------------------------------------\n\nTITLE: Non-Conflicting Transaction Processing in Rust\nDESCRIPTION: Handles processing of transactions that don't have lock conflicts by acquiring locks and sending to banking thread\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    for account_key in transaction_accounts {\n        self.locked_accounts.insert_reference(account_key.key());\n    }\n\n    banking_thread_channel.send(next_highest_transaction);\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Lookup Table State Structure in Rust\nDESCRIPTION: Defines the core structure and constants for Solana Address Lookup Tables, including maximum addresses, metadata size, and table metadata structure with deactivation slot, extension tracking, and authority management.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/versioned-transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// The maximum number of addresses that a lookup table can hold\npub const LOOKUP_TABLE_MAX_ADDRESSES: usize = 256;\n\n/// The serialized size of lookup table metadata\npub const LOOKUP_TABLE_META_SIZE: usize = 56;\n\npub struct LookupTableMeta {\n    /// Lookup tables cannot be closed until the deactivation slot is\n    /// no longer \"recent\" (not accessible in the `SlotHashes` sysvar).\n    pub deactivation_slot: Slot,\n    /// The slot that the table was last extended. Address tables may\n    /// only be used to lookup addresses that were extended before\n    /// the current bank's slot.\n    pub last_extended_slot: Slot,\n    /// The start index where the table was last extended from during\n    /// the `last_extended_slot`.\n    pub last_extended_slot_start_index: u8,\n    /// Authority address which must sign for each modification.\n    pub authority: Option<Pubkey>,\n    // Raw list of addresses follows this serialized structure in\n    // the account's data, starting from `LOOKUP_TABLE_META_SIZE`.\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Solana GCE Testnet in Bash\nDESCRIPTION: Command to dispose of the Solana network and stop billing for GCE resources.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gce.sh delete\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking a commit for a separate PR in Bash\nDESCRIPTION: This snippet demonstrates the workflow for cherry-picking a commit into a new branch to create a focused PR. It shows how to create a commit, switch to a new branch, and cherry-pick the commit to address dependencies between changes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -am \"Fix foo, needed by bar\"\n$ git checkout master\n$ git checkout -b fix-foo\n$ git cherry-pick fix-bar\n$ git push --set-upstream origin fix-foo\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew on MacOS\nDESCRIPTION: Command to install Homebrew package manager on MacOS, which is useful for installing Solana and its dependencies.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/install.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Disk Image for CUDA CI Instances\nDESCRIPTION: GCP command to create a new disk image for the ci-cuda instance group, using a timestamp in the name and assigning it to the ci-cuda family.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n  $ gcloud compute images create ci-cuda-$(date +%Y%m%d%H%M) --source-disk xxx --source-disk-zone us-east1-b --family ci-cuda\n```\n\n----------------------------------------\n\nTITLE: Account Loading Function in Solana's Storage System\nDESCRIPTION: This function signature shows how accounts are loaded from the persistent storage. It retrieves an account from a specific fork, with fallback to parent forks if the account isn't found in the requested fork.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/persistent-account-storage.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/// Load the account for the pubkey.\n/// This function will load the account from the specified fork, falling back to the fork's parents\n/// * fork - a virtual Accounts instance, keyed by Fork.  Accounts keep track of their parents with Forks,\n///       the persistent store\n/// * pubkey - The Account's public key.\npub fn load_slow(&self, id: Fork, pubkey: &Pubkey) -> Option<&Account>\n```\n\n----------------------------------------\n\nTITLE: Authorizing a New Key for a Vote Account in Solana\nDESCRIPTION: This instruction updates a Vote account with a new authorized voter or withdrawer. The transaction must be signed by the current authorized voter or withdrawer depending on which role is being updated.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nVoteInstruction::Authorize(Pubkey, VoteAuthorize)\n```\n\n----------------------------------------\n\nTITLE: Conflicting Transaction Handling in Rust\nDESCRIPTION: Manages transactions that conflict with existing locks by adding them to appropriate blocked transaction queues\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfor locked_account_key in transaction_accounts {\n    let account_key = locked_account_key.key()\n    let blocked_transaction_entry = self.blocked_transaction_queues_by_accounts.entry(account_key);\n    match blocked_transaction_entry {\n        Occupied(existing_blocked_transaction) => {\n            // If there is already a set of transactions blocked on this account, add\n            // this transaction to the priority queue.\n            existing_blocked_transaction.insert_transaction(next_highest_transaction);\n        }\n\n        Vacant(vacant_entry) => {\n            // Create a new queue blocked on this transaction\n            let new_blocked_transaction_queue =\n                Rc::new(BlockedTransactionsQueue {\n                    highest_priority_blocked_transaction: next_highest_transaction,\n                    other_blocked_transactions: BinaryHeap::new(),\n                });\n            // Insert into the hashmap for this `account_key`\n            vacant_entry.insert(new_blocked_transaction_queue.clone());\n            // Insert into the `blocked_transactions` hashmap to indicate this set of transactions\n            // is blocked by `next_highest_transaction`\n            self.blocked_transactions.insert(\n                next_highest_transaction.signature(),\n                new_blocked_transaction_queue\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThinClient with Client Trait in Rust\nDESCRIPTION: Proposal to refactor ThinClient to be constructed with an implementation of the Client trait, allowing for more flexible utility function expansion without modifying the trait.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/rust-clients.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nThinClient<BankClient>\n```\n\nLANGUAGE: rust\nCODE:\n```\nThinClient<ClusterClient>\n```\n\n----------------------------------------\n\nTITLE: Calculating Node Update Schedule - Bash Command\nDESCRIPTION: Command to calculate when a node will next update based on the days-between-updates parameter and current date.\nSOURCE: https://github.com/solana-labs/solana/blob/master/cd/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDAYS_BETWEEN_UPDATES=8; d=$(expr $(date +%s) / 86400 % $DAYS_BETWEEN_UPDATES); n=$(expr $DAYS_BETWEEN_UPDATES - $d); echo \"Updated $d day(s) ago. Will update $n day(s) from now\"\n```\n\n----------------------------------------\n\nTITLE: Pulling and rebasing with upstream changes in Bash\nDESCRIPTION: This snippet demonstrates how to pull the latest changes from the upstream master branch and rebase your local branch on top of them to keep your branch up to date and remove cherry-picked commits.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git pull --rebase upstream master\n```\n\n----------------------------------------\n\nTITLE: Generating Deterministic Seed for Shred Retransmission in Rust\nDESCRIPTION: This code snippet demonstrates how a deterministic seed is generated for shred retransmission when the 'enable_deterministic_seed' feature is enabled. The seed is based on the shred slot, index, and leader public key.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/optimistic-transaction-propagation-signal.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nif enable_deterministic_seed(self.slot(), root_bank) {\n    hashv(&[\n        &self.slot().to_le_bytes(),\n        &self.index().to_le_bytes(),\n        &leader_pubkey.to_bytes(),\n    ])\n\n```\n\n----------------------------------------\n\nTITLE: Initializing BigTable Emulator in Development\nDESCRIPTION: Commands to start and configure the Cloud BigTable emulator for development/testing purposes. Includes starting the emulator, setting environment variables, and running initialization script.\nSOURCE: https://github.com/solana-labs/solana/blob/master/storage-bigtable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcloud beta emulators bigtable start\n```\n\nLANGUAGE: shell\nCODE:\n```\n$(gcloud beta emulators bigtable env-init)\n```\n\nLANGUAGE: shell\nCODE:\n```\n./init-bigtable.sh\n```\n\n----------------------------------------\n\nTITLE: Defining LightEntry Structure in Solana\nDESCRIPTION: Defines a lightweight entry structure that contains only transaction hashes instead of full transactions. It includes the number of hashes since previous Entry ID, the SHA-256 hash after previous Entry ID, and the Merkle Root of encoded transactions.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/simple-payment-and-state-verification.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/// This Entry definition skips over the transactions and only contains the\n/// hash of the transactions used to modify PoH.\nLightEntry {\n    /// The number of hashes since the previous Entry ID.\n    pub num_hashes: u64,\n    /// The SHA-256 hash `num_hashes` after the previous Entry ID.\n    hash: Hash,\n    /// The Merkle Root of the transactions encoded into the Entry.\n    entry_hash: Hash,\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing a Vote Account with Seed in Solana\nDESCRIPTION: This instruction updates a Vote account with a new authorized voter or withdrawer using a derived key. It's useful when the current authorized key is itself a derived key, requiring a signature from the base key.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nVoteInstruction::AuthorizeWithSeed(VoteAuthorizeWithSeedArgs)\n```\n\n----------------------------------------\n\nTITLE: Stopping Solana Testnet Processes in Bash\nDESCRIPTION: Command to stop running processes on all nodes in the Solana testnet.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./net.sh stop\n```\n\n----------------------------------------\n\nTITLE: Blocked Queue Processing in Rust\nDESCRIPTION: Handles processing of blocked transaction queues when their blocking transaction completes\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nif let Some(blocked_transaction_queue) = self.blocked_transactions.get(completed_transaction.signature) {\n    // Now push the rest of the queue to the head of `all_transaction_queues`, since we know\n    // everything in this blocked queue must be of higher priority, (since they were\n    // added to this queue earlier, this means they must have been peopped off the main\n    // `transaction_accounts` queue earlier, hence higher priority)\n    self.all_transaction_queues.push_front(blocked_transaction_queue.other_blocked_transactions);\n    self.blocked_transactions.remove(completed_transaction.signature);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Versioned Transaction Structures in Rust\nDESCRIPTION: Implements new transaction format structures including versioned transactions, messages, and address table lookups to support the enhanced functionality while maintaining backward compatibility.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/versioned-transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize)]\npub struct VersionedTransaction {\n    /// List of signatures\n    #[serde(with = \"short_vec\")]\n    pub signatures: Vec<Signature>,\n    /// Message to sign.\n    pub message: VersionedMessage,\n}\n\n// Uses custom serialization. If the first bit is set, the remaining bits\n// in the first byte will encode a version number. If the first bit is not\n// set, the first byte will be treated as the first byte of an encoded\n// legacy message.\npub enum VersionedMessage {\n    Legacy(LegacyMessage),\n    V0(v0::Message),\n}\n\n// The structure of the new v0 Message\n#[derive(Serialize, Deserialize)]\npub struct Message {\n  // unchanged\n  pub header: MessageHeader,\n\n  // unchanged\n  #[serde(with = \"short_vec\")]\n  pub account_keys: Vec<Pubkey>,\n\n  // unchanged\n  pub recent_blockhash: Hash,\n\n  // unchanged\n  //\n  // # Notes\n  //\n  // Account and program indexes will index into the list of addresses\n  // constructed from the concatenation of three key lists:\n  //   1) message `account_keys`\n  //   2) ordered list of keys loaded from address table `writable_indexes`\n  //   3) ordered list of keys loaded from address table `readonly_indexes`\n  #[serde(with = \"short_vec\")]\n  pub instructions: Vec<CompiledInstruction>,\n\n  /// List of address table lookups used to load additional accounts\n  /// for this transaction.\n  #[serde(with = \"short_vec\")]\n  pub address_table_lookups: Vec<MessageAddressTableLookup>,\n}\n\n/// Address table lookups describe an on-chain address lookup table to use\n/// for loading more readonly and writable accounts in a single tx.\n#[derive(Serialize, Deserialize)]\npub struct MessageAddressTableLookup {\n  /// Address lookup table account key\n  pub account_key: Pubkey,\n  /// List of indexes used to load writable account addresses\n  #[serde(with = \"short_vec\")]\n  pub writable_indexes: Vec<u8>,\n  /// List of indexes used to load readonly account addresses\n  #[serde(with = \"short_vec\")]\n  pub readonly_indexes: Vec<u8>,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage\nDESCRIPTION: Commands to generate and view code coverage statistics for the Solana project.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ scripts/coverage.sh\n$ open target/cov/lcov-local/index.html\n```\n\n----------------------------------------\n\nTITLE: Cloning the Solana Repository\nDESCRIPTION: Commands for downloading the Solana source code from GitHub and checking out the latest release tag for improved stability.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/solana-labs/solana.git\ncd solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nTAG=$(git describe --tags $(git rev-list --tags --max-count=1))\ngit checkout $TAG\n```\n\n----------------------------------------\n\nTITLE: Defining AdvertiseStorageRecentBlockhash Structure for Solana Storage Proofs\nDESCRIPTION: Defines a structure used by validators and archivers to signal a new storage epoch transition. Contains a hash field representing the blockhash and a slot number. This structure is used to ensure storage proofs reference the correct epoch according to current chain state.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nAdvertiseStorageRecentBlockhash {\n    hash: Hash,\n    slot: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring InfluxDB Logs for Solana Metrics\nDESCRIPTION: This command displays and follows the logs of the InfluxDB Docker container for monitoring purposes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/metrics/scripts/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ docker logs -f influxdb\n```\n\n----------------------------------------\n\nTITLE: Computing Bank Hash in Solana Runtime\nDESCRIPTION: Implementation of bank hash calculation in Solana's runtime. The bank hash is computed by combining the parent hash, accounts delta hash, signature count, and latest blockhash into a single hash value. This is used for block verification and chain consistency.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/simple-payment-and-state-verification.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n        let mut hash = hashv(&[\n            // bank hash of the parent block\n            self.parent_hash.as_ref(),\n            // hash of all the modified accounts\n            accounts_delta_hash.hash.as_ref(),\n            // Number of signatures processed in this block\n            &signature_count_buf,\n            // Last PoH hash in this block\n            self.latest_blockhash().as_ref(),\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Attaching GDB Debugger to a Running Validator\nDESCRIPTION: Commands to attach the GNU Debugger to a running Solana validator process for advanced troubleshooting.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo gdb\nattach <PID>\nset logging on\nthread apply all bt\n```\n\n----------------------------------------\n\nTITLE: Incorporating Epoch Accounts Hash into Snapshot Hash Calculation in Pseudo Code\nDESCRIPTION: This snippet shows the pseudocode for calculating a snapshot hash that incorporates the Epoch Accounts Hash (EAH) when the snapshot slot falls within the calculation window. The EAH is included in the hash calculation to ensure verification of accounts at load time.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/epoch_accounts_hash.md#2025-04-23_snippet_0\n\nLANGUAGE: pseudo\nCODE:\n```\nif slot is in calculation window\n    let snapshot hash = hash(accounts hash, epoch accounts hash)\nelse\n    let snapshot hash = accounts hash\nendif\n```\n\n----------------------------------------\n\nTITLE: Proposed Solana System Call for Binary Logging\nDESCRIPTION: Defines a new system call for Solana programs to log binary data fields.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/log_data.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid sol_log_data(SolBytes *fields, uint64_t length);\n```\n\n----------------------------------------\n\nTITLE: Configuring Makefile for Solana BPF Program\nDESCRIPTION: Basic makefile configuration to enable BPF program compilation by including the BPF build system makefile.\nSOURCE: https://github.com/solana-labs/solana/blob/master/sdk/bpf/c/README.md#2025-04-23_snippet_0\n\nLANGUAGE: make\nCODE:\n```\ninclude path/to/bpf.mk\n```\n\n----------------------------------------\n\nTITLE: Running Solana Benchmarks\nDESCRIPTION: Command to run benchmarks using the nightly Rust compiler.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo +nightly bench\n```\n\n----------------------------------------\n\nTITLE: Providing Instructions for Maintaining the Changelog\nDESCRIPTION: This snippet provides instructions for maintaining the changelog when creating new release branches or patch releases.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## Maintaining This Changelog\n### When creating a new release branch:\n* Commit to master updating the changelog:\n  * Update the edge, beta, and stable links\n  * Create new section: `vx.y+1.0 - Unreleased`\n  * Remove `Unreleased` annotation from vx.y.0 section.\n* Create vx.y branch starting at that commit\n* Tag that commit as vx.y.0\n\n### When creating a new patch release:\n* Commit to the release branch updating the changelog:\n  * Remove `Unreleased` annotation from `vx.y.z` section\n  * Add a new section at the top for `vx.y.z+1 - Unreleased`\n* Tag that new commit as the new release\n```\n\n----------------------------------------\n\nTITLE: Defining ChallengeProofValidation Transaction Structure in Solana\nDESCRIPTION: Specifies the structure of a ChallengeProofValidation transaction used by archivers to challenge validators who have incorrectly approved fake storage proofs.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nChallengeProofValidation {\n    proof_index: u64,\n    hash_seed_value: Vec<u8>,\n}\nkeys = [archiver_keypair, validator_keypair]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install the documentation site's dependencies using npm package manager.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Fork Diagram Example in ASCII\nDESCRIPTION: ASCII diagram showing block forks at epoch boundary N, demonstrating how multiple reward calculation requests can occur due to forking.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/partitioned-inflationary-rewards-distribution.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nN-1 -- N -- N+1\n     \\\n      \\\n        N+2\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI Keypair in Bash\nDESCRIPTION: Sets the default keypair for Solana CLI commands to the validator keypair.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/guides/validator-start.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --keypair ~/validator-keypair.json\n```\n\n----------------------------------------\n\nTITLE: On-chain Update Manifest structure in Solana\nDESCRIPTION: This code snippet defines the Rust structs used for the on-chain update manifest system that stores information about available updates, including download URLs and integrity verification data.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nuse solana_sdk::signature::Signature;\n\n/// Information required to download and apply a given update\npub struct UpdateManifest {\n    pub timestamp_secs: u64, // When the release was deployed in seconds since UNIX EPOCH\n    pub download_url: String, // Download URL to the release tar.bz2\n    pub download_sha256: String, // SHA256 digest of the release tar.bz2 file\n}\n\n/// Data of an Update Manifest program Account.\n#[derive(Serialize, Deserialize, Default, Debug, PartialEq)]\npub struct SignedUpdateManifest {\n    pub manifest: UpdateManifest,\n    pub manifest_signature: Signature,\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Instruction Documentation in Rust\nDESCRIPTION: Auto-generated instruction documentation showing the expanded form with detailed account requirements and descriptions for each instruction variant.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/program-instruction-macro.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub enum TestInstruction {\n    /// Transfer lamports\n    ///\n    /// * Accounts expected by this instruction:\n    ///   0. `[WRITABLE, SIGNER]` Funding account\n    ///   1. `[WRITABLE]` Recipient account\n    Transfer {\n        lamports: u64,\n    },\n\n    /// Provide M of N required signatures\n    ///\n    /// * Accounts expected by this instruction:\n    ///   0. `[WRITABLE]` Data account\n    ///   * (Multiple) `[SIGNER]` Signers\n    Multisig,\n\n    /// Consumes a stored nonce, replacing it with a successor\n    ///\n    /// * Accounts expected by this instruction:\n    ///   0. `[WRITABLE, SIGNER]` Nonce account\n    ///   1. `[]` RecentBlockhashes sysvar\n    ///   2. (Optional) `[SIGNER]` Nonce authority\n    AdvanceNonceAccount,\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping PostgreSQL Trigger for Account History\nDESCRIPTION: This SQL command drops the trigger that saves historical account data, effectively disabling the feature.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nDROP TRIGGER account_update_trigger ON account;\n```\n\n----------------------------------------\n\nTITLE: Calculating Vote Lockout Duration in Solana PoS\nDESCRIPTION: This formula calculates the lockout duration for a vote in Solana's Proof of Stake system. It takes into account the height of the initial vote (PoHi) and the current vote (PoHj) on the same fork, using an exponential function to determine the lockout period.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/slashing.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLockouti(PoHi, PoHj) = PoHj + K * exp((PoHj - PoHi) / K)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI Credentials in Bash\nDESCRIPTION: Command to configure AWS CLI with user credentials. This step is necessary for using AWS EC2-based test networks.\nSOURCE: https://github.com/solana-labs/solana/blob/master/net/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ aws configure\n```\n\n----------------------------------------\n\nTITLE: Configuring BuildKite Agent Environment\nDESCRIPTION: Command to install and configure the BuildKite agent and set up its user environment.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./setup-new-buildkite-agent/setup-buildkite.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Development Tools\nDESCRIPTION: Commands to install the Rust compiler, Cargo package manager, and rustfmt code formatting tool.\nSOURCE: https://github.com/solana-labs/solana/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://sh.rustup.rs -sSf | sh\n$ source $HOME/.cargo/env\n$ rustup component add rustfmt\n```\n\n----------------------------------------\n\nTITLE: Listening to Ethereum Events with Web3.js\nDESCRIPTION: Shows how to listen for and filter Ethereum events using Web3.js library in a JavaScript client application.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/log_data.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Web3 = require('web3');\nconst url = 'ws://127.0.0.1:8546';\nconst web3 = new Web3(url);\n\nvar options = {\n    address: '0xfbBE8f06FAda977Ea1E177da391C370EFbEE3D25',\n    topics: [\n        '0xdf50c7bb3b25f812aedef81bc334454040e7b27e27de95a79451d663013b7e17',\n        //'0x0000000000000000000000000d8a3f5e71560982fb0eb5959ecf84412be6ae3e'\n      ]\n};\n\nvar subscription = web3.eth.subscribe('logs', options, function(error, result){\n    if (!error) console.log('got result');\n    else console.log(error);\n}).on(\"data\", function(log){\n    console.log('got data', log);\n}).on(\"changed\", function(log){\n    console.log('changed');\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Troubleshooting\nDESCRIPTION: Examples of how to configure Rust logging to enable debug and trace information for specific Solana modules.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport RUST_LOG=solana=info,solana::banking_stage=debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport RUST_LOG=solana_bpf_loader=trace\n```\n\n----------------------------------------\n\nTITLE: Generated Instruction Constructors in Rust\nDESCRIPTION: Auto-generated constructor functions for creating program instructions with proper account metadata and parameter handling.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/program-instruction-macro.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Transfer lamports\n///\n/// * `from_account` - `[WRITABLE, SIGNER]` Funding account\n/// * `to_account` - `[WRITABLE]` Recipient account\npub fn transfer(from_account: Pubkey, to_account: Pubkey, lamports: u64) -> Instruction {\n    let account_metas = vec![\n        AccountMeta::new(from_pubkey, true),\n        AccountMeta::new(to_pubkey, false),\n    ];\n    Instruction::new_with_bincode(\n        test_program::id(),\n        &SystemInstruction::Transfer { lamports },\n        account_metas,\n    )\n}\n\n/// Provide M of N required signatures\n///\n/// * `data_account` - `[WRITABLE]` Data account\n/// * `signers` - (Multiple) `[SIGNER]` Signers\npub fn multisig(data_account: Pubkey, signers: &[Pubkey]) -> Instruction {\n    let mut account_metas = vec![\n        AccountMeta::new(nonce_pubkey, false),\n    ];\n    for pubkey in signers.iter() {\n        account_metas.push(AccountMeta::new_readonly(pubkey, true));\n    }\n\n    Instruction::new_with_bincode(\n        test_program::id(),\n        &TestInstruction::Multisig,\n        account_metas,\n    )\n}\n\n/// Consumes a stored nonce, replacing it with a successor\n///\n/// * nonce_account - `[WRITABLE, SIGNER]` Nonce account\n/// * recent_blockhashes_sysvar - `[]` RecentBlockhashes sysvar\n/// * nonce_authority - (Optional) `[SIGNER]` Nonce authority\npub fn advance_nonce_account(\n    nonce_account: Pubkey,\n    recent_blockhashes_sysvar: Pubkey,\n    nonce_authority: Option<Pubkey>,\n) -> Instruction {\n    let mut account_metas = vec![\n        AccountMeta::new(nonce_account, false),\n        AccountMeta::new_readonly(recent_blockhashes_sysvar, false),\n    ];\n    if let Some(pubkey) = authorized_pubkey {\n        account_metas.push(AccountMeta::new_readonly*nonce_authority, true));\n    }\n    Instruction::new_with_bincode(\n        test_program::id(),\n        &TestInstruction::AdvanceNonceAccount,\n        account_metas,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Valid Forks in Solana Blockchain\nDESCRIPTION: This code snippet lists examples of valid fork sequences in the Solana blockchain, demonstrating how different paths can be traced from the root slot to various end points.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/managing-forks.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- {0, 1, 2, 4, 6, 8}\n- {0, 1, 3, 5, 12, 13}\n- {0, 1, 3, 5, 7, 9, 10, 11}\n```\n\n----------------------------------------\n\nTITLE: Building CLI Usage Documentation\nDESCRIPTION: Alternative command to build the CLI usage documentation using local Rust toolchain.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./build-cli-usage.sh\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Locally\nDESCRIPTION: Script command to generate static content into the build directory using the build script.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Shell Script Reference\nDESCRIPTION: Reference to a shell script that handles documentation publication and redirects for implemented proposals.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npublish-docs.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Azure VM for BuildKite Agent\nDESCRIPTION: Azure CLI command to create a new VM for BuildKite CI using a pre-configured boilerplate image.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ az vm create \\\n   --resource-group ci \\\n   --name XYZ \\\n   --image boilerplate \\\n   --admin-username $(whoami) \\\n   --ssh-key-value ~/.ssh/id_rsa.pub\n```\n\n----------------------------------------\n\nTITLE: Markdown Notice for Deprecated Thin Client\nDESCRIPTION: Markdown notice informing users about the deprecation of the thin-client crate and suggesting alternative crates to use.\nSOURCE: https://github.com/solana-labs/solana/blob/master/thin-client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# thin-client\nThis crate for `thin-client` is deprecated as of v1.19.0. It will receive no bugfixes or updates.\n\nPlease use `tpu-client` or `rpc-client`.\n```\n\n----------------------------------------\n\nTITLE: Executing Solana Schema Destruction Script\nDESCRIPTION: This command runs a script to destroy the database objects created for the Solana AccountsDB plugin.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npsql -U solana -p 5433 -h 10.138.0.9 -w -d solana -f drop_schema.sql\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Stakes Warmup Example in Markdown Table\nDESCRIPTION: This markdown table demonstrates the warmup process for two stakes (X and Y) activating simultaneously, showing how the effective and activating portions change over epochs.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/stake-delegation-and-rewards.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| epoch | X eff | X act | Y eff | Y act | total effective | total activating |\n| :---- | ----: | ----: | ----: | ----: | --------------: | ---------------: |\n| N-1   |       |       |       |       |           2,000 |                0 |\n| N     |     0 | 1,000 |     0 |   200 |           2,000 |            1,200 |\n| N+1   |   333 |   667 |    67 |   133 |           2,400 |              800 |\n| N+2   |   733 |   267 |   146 |    54 |           2,880 |              321 |\n| N+3   |  1000 |     0 |   200 |     0 |           3,200 |                0 |\n```\n\n----------------------------------------\n\nTITLE: Starting the Solana Faucet Service\nDESCRIPTION: Launch the faucet service which provides test tokens to validators and clients for transaction testing.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/benchmark.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNDEBUG=1 ./multinode-demo/faucet.sh\n```\n\n----------------------------------------\n\nTITLE: Visualizing Further Pruned Fork Structure in Solana\nDESCRIPTION: This ASCII diagram illustrates a further pruned fork structure after additional voting and root advancement, showing how the blockchain view continues to evolve and simplify.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/managing-forks.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n             12 - 13\n            /\n       3 - 5 ROOT\n      SMR   \\\n             7 - 9 - 10 - 11\n```\n\n----------------------------------------\n\nTITLE: Setting Up Criterion Unit Tests for Solana Program\nDESCRIPTION: Example of creating unit tests for Solana programs using the Criterion testing framework, including test suite and case setup.\nSOURCE: https://github.com/solana-labs/solana/blob/master/sdk/sbf/c/README.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <criterion/criterion.h>\n#include \"../src/program.c\"\n\nTest(test_suite_name, test_case_name) {\n  cr_assert(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing ComputeBudget Program in Solana SDK\nDESCRIPTION: This code snippet shows a reference to the ComputeBudget precompiled program in the Solana SDK. It's used to request higher transaction-wide compute budget caps and program heap sizes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/comprehensive-compute-fees.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/solana-labs/solana/blob/00929f836348d76cb3503d0ba5f76f0d275bcc66/sdk/src/compute_budget.rs#L34\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation of Solana's Proof of Safety\nDESCRIPTION: A detailed mathematical proof that demonstrates how conflicting votes in Solana's consensus lead to detectable slashing rule violations. The proof focuses on the relationship between optimistic confirmation, validator voting sets, and switching proofs.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/optimistic_confirmation.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Proof of Safety:\\n\\nWe now aim to show at least one of the validators in the\\n`Optimistic Validators` set violated a slashing rule.\\n\\nFirst note that in order for `B'` to have been rooted, there must have been\\n`> 2/3` stake that voted on `B'` or a descendant of `B'`. Given that the\\n`Optimistic Validator` set also contains `> 2/3` of the staked validators,\\nit follows that `> 1/3` of the staked validators:\\n\\n- Rooted `B'` or a descendant of `B'`\\n- Also submitted a vote `v` of the form `Vote(X, S)` where `X <= B <= v.last`.\\n\\nLet the `Delinquent` set be the set of validators that meet the above\\ncriteria.\\n\\nBy definition, in order to root `B'`, each validator `V` in `Delinquent`\\nmust have each made some \"switching vote\" of the form `Vote(X_v, S_v)` where:\\n\\n- `S_v.last > B'`\\n- `S_v.last` is a descendant of `B'`, so it can't be a descendant of `B`\\n- Because `S_v.last` is not a descendant of `B`, then `X_v` cannot be a\\n  descendant or ancestor of `B`.\\n\\nBy definition, this delinquent validator `V` also made some vote `Vote(X, S)`\\nin the `Optimistic Votes` where by definition of that set (optimistically\\nconfirmed `B`), we know `S.last >= B >= X`.\\n\\nBy `Lemma 2` we know `B' > X`, and from above `S_v.last > B'`, so then\\n`S_v.last > X`. Because `X_v != X` (cannot be a descendant or ancestor of\\n`B` from above), then by the slashing rules then, we know `X_v > S.last`.\\nFrom above, `S.last >= B >= X` so for all such \"switching votes\", `X_v > B`.\\n\\nNow ordering all these \"switching votes\" in time, let `V` to be the validator\\nin `Optimistic Validators` that first submitted such a \"switching vote\"\\n`Vote(X', S')`, where `X' > B`. We know that such a validator exists because\\nwe know from above that all delinquent validators must have submitted such\\na vote, and the delinquent validators are a subset of the\\n`Optimistic Validators`.\\n\\nLet `Vote(X, S)` be the unique vote in `Optimistic Votes` made by\\nvalidator `V` (maximizing `S.last`).\\n\\nGiven `Vote(X, S)` because `X' > B >= X`, then `X' > X`, so\\nby the \"Optimistic Slashing\" rules, `X' > S.last`.\\n\\nIn order to perform such a \"switching vote\" to `X'`, a switching proof\\n`SP(Vote(X, S), Vote(X', S'))` must show `> 1/3` of stake being locked\\nout at this validator's latest vote, `S.last`. Combine this `>1/3` with the\\nfact that the set of validators in the `Optimistic Voters` set consists of\\n`> 2/3` of the stake, implies at least one optimistic validator `W` from the\\n`Optimistic Voters` set must have submitted a vote (recall the definition of\\na switching proof),`Vote(X_w, S_w)` that was included in validator `V`'s\\nswitching proof for slot `X'`, where `S_w` contains a slot `s` such that:\\n\\n- `s` is not a common ancestor of `S.last` and `X'`\\n- `s` is not a descendant of `S.last`.\\n- `s' + s'.lockout > S.last`\\n\\nBecause `B` is an ancestor of `S.last`, it is also true then:\\n\\n- `s` is not a common ancestor of `B` and `X'`\\n- `s' + s'.lockout > B`\\n\\nwhich was included in `V`'s switching proof.\\n\\nNow because `W` is also a member of `Optimistic Voters`, then by the `Lemma 1`\\nabove, given a vote by `W`, `Vote(X_w, S_w)`, where `S_w` contains a vote for\\na slot `s` where `s + s.lockout > B`, and `s` is not an ancestor of `B`, then\\n`X_w > B`.\\n\\nBecause validator `V` included vote `Vote(X_w, S_w)` in its proof of switching\\nfor slot `X'`, then his implies validator `V'` submitted vote `Vote(X_w, S_w)`\\n**before** validator `V` submitted its switching vote for slot `X'`,\\n`Vote(X', S')`.\\n\\nBut this is a contradiction because we chose `Vote(X', S')` to be the first vote\\nmade by any validator in the `Optimistic Voters` set where `X' > B` and `X'` is\\nnot a descendant of `B`.\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New GPU-Enabled BuildKite Agent Machine\nDESCRIPTION: Command to set up a new GPU-enabled machine with CUDA support for BuildKite CI.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo CUDA=1 ./setup-new-buildkite-agent/setup-new-machine.sh\n```\n\n----------------------------------------\n\nTITLE: Completion Signal Processing in Rust\nDESCRIPTION: Processes completion signals from banking threads, releasing locks and potentially unblocking queued transactions\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet mut unlocked_accounts = vec![];\n// First remove all the locks from the tracking list\nfor locked_account in transaction_accounts {\n    if self.locked_accounts.remove_reference(locked_account) {\n        unlocked_accounts.push(locked_account.key());\n    }\n}\n\n// Check if freeing up these accounts has now allowed any new\n// blocked transactions to run\nfor account_key in unlocked_accounts {\n    if let Some(blocked_transaction_queue) = self.blocked_transaction_queues_by_accounts.get(account_key) {\n        // Check if the transaction blocking this queue can be run now, thereby unblocking this queue\n        if blocked_transaction_queue.highest_priority_blocked_transaction.can_get_locks() {\n            // Schedule the transaction to the banking thread\n            banking_thread_channel.send(blocked_transaction_queue.highest_priority_blocked_transaction);\n\n            return;\n        }\n    }\n\n    // If no higher priority transactions were unblocked, continue scheduling from the main queue,\n    // described in the main loop section above\n    find_next_highest_transaction();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL User for Solana\nDESCRIPTION: This command creates a new PostgreSQL user named 'solana' on port 5433.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres createuser -p 5433 solana\n```\n\n----------------------------------------\n\nTITLE: Explaining PoH ASIC Resistance in Solana\nDESCRIPTION: This snippet discusses Solana's Proof of History (PoH) ASIC resistance mechanism. It explains how the exponential growth of vote lockouts provides protection against potential ASIC-based attacks, specifically the ASIC rollback attack.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/tower-bft.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## PoH ASIC Resistance\n\nVotes and lockouts grow exponentially while ASIC speed up is linear. There are possible attack vectors involving a faster ASIC outlined below.\n\n### ASIC Rollback\n\nAn attacker generates a concurrent fork from an older block to try to rollback the cluster. In this attack the concurrent fork is competing with forks that have already been voted on. This attack is limited by the exponential growth of the lockouts.\n\n- 1 vote has a lockout of 2 slots. Concurrent fork must be at least 2 slots ahead, and be produced in 1 slot. Therefore requires an ASIC 2x faster.\n- 2 votes have a lockout of 4 slots. Concurrent fork must be at least 4 slots ahead and produced in 2 slots. Therefore requires an ASIC 2x faster.\n- 3 votes have a lockout of 8 slots. Concurrent fork must be at least 8 slots ahead and produced in 3 slots. Therefore requires an ASIC 2.6x faster.\n- 10 votes have a lockout of 1024 slots. 1024/10, or 102.4x faster ASIC.\n- 20 votes have a lockout of 2^20 slots. 2^20/20, or 52,428.8x faster ASIC.\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu Packages in Bash\nDESCRIPTION: Updates the package list and upgrades installed packages on the Ubuntu server.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt upgrade\n```\n\n----------------------------------------\n\nTITLE: Initializing KaTeX with HTML5 Template\nDESCRIPTION: Basic HTML template showing how to include and setup KaTeX with CDN links. Includes required stylesheet and JavaScript files with integrity hashes, plus auto-render extension for automatic math rendering.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/static/katex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly -->\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity=\"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin=\"anonymous\">\n\n    <!-- The loading of KaTeX is deferred to speed up page rendering -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\" integrity=\"sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\" crossorigin=\"anonymous\"></script>\n\n    <!-- To automatically render math in text elements, include the auto-render extension: -->\n    <script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\" integrity=\"sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\" crossorigin=\"anonymous\"\n        onload=\"renderMathInElement(document.body);\"></script>\n  </head>\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Proposed Solana Binary Log Format\nDESCRIPTION: Demonstrates the proposed format for binary logging in Solana programs using base64 encoded data.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/log_data.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nprogram data: 3fJSrRviyJtpwrBo/DeNqpUrpFjxKEWKPVaTfUjs8AAAAAAAAAAAAAAACC+JDWOEeNIR7yII88FGa1q/g1UQAAAAAAAAAAAAAAAKEkMdC522QANLDN/O75zOFh5ivk AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgMNzrvS9MAAA=\n```\n\n----------------------------------------\n\nTITLE: Defining SubmitMiningProof Transaction Structure in Solana\nDESCRIPTION: Specifies the structure of a SubmitMiningProof transaction used by archivers to submit storage proofs. It includes the slot, SHA state, and signature of the archiver.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSubmitMiningProof {\n    slot: u64,\n    sha_state: Hash,\n    signature: Signature,\n};\nkeys = [archiver_keypair]\n```\n\n----------------------------------------\n\nTITLE: Generating ABI Digest Values Using Cargo Test Command\nDESCRIPTION: Command to run unit tests that will generate the correct digest values for ABI items. This allows developers to determine the proper digest value to use with the frozen_abi attribute.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/abi-management.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSOLANA_ABI_DUMP_DIR=. cargo +nightly test abi\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Collection for Solana Applications\nDESCRIPTION: This command sources a script to enable metrics collection on a per-shell basis for Solana applications.\nSOURCE: https://github.com/solana-labs/solana/blob/master/metrics/scripts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ source ./enable.sh\n```\n\n----------------------------------------\n\nTITLE: Defining LockedPubkey Enum in Rust\nDESCRIPTION: Defines an enum for tracking read/write locks on account public keys in the scheduler\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/fee_transaction_priority.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum LockedPubkey {\n    Read(Pubkey),\n    Write(Pubkey),\n}\n```\n\n----------------------------------------\n\nTITLE: Solana Install Deploy Command Interface\nDESCRIPTION: Documentation for the 'deploy' subcommand of solana-install, which is used to deploy a new Solana update by specifying the download URL and update manifest keypair.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nsolana-install deploy\ndeploys a new update\n\nUSAGE:\n    solana-install deploy <download_url> <update_manifest_keypair>\n\nFLAGS:\n    -h, --help    Prints help information\n\nARGS:\n    <download_url>               URL to the solana release archive\n    <update_manifest_keypair>    Keypair file for the update manifest (/path/to/keypair.json)\n```\n\n----------------------------------------\n\nTITLE: Defining Voting Algorithm Components in Solana\nDESCRIPTION: This snippet defines key components of Solana's voting algorithm, including the vote tower, lock expiration calculation, and voting conditions. It outlines the structure and rules for maintaining the vote tower and making voting decisions.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/tower-bft.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Voting Algorithm\n\nEach validator maintains a vote tower `T` which follows the rules described above in [Vote Tower](#vote-tower), which is a sequence of blocks it has voted for (initially empty). The variable `l` records the length of the stack. For each entry in the tower, denoted by `B = T(x)` for `x < l` where `B` is the `xth` entry in the tower, we record also a value `confcount(B)`. Define the lock expiration slot `lockexp(B) := slot(B) + 2 ^ confcount(B)`.\n\nThe validator `i` runs a voting loop as follows. Let `B` be the heaviest\nblock returned by the fork choice rule above [Fork Choice](#fork-choice). If `i` has not voted for `B` before, then `i` votes for `B` so long as the following conditions are satisfied:\n\n1. Respecting lockouts: For any block `B′` in the tower that is not an ancestor of `B`, `lockexp(B′) ≤ slot(B)`.\n2. Threshold check: Described above in [Threshold Check](#threshold-check)\n3. Switching threshold: Have sufficiently many votes on other forks if switching forks. Let `Btop` denote the block at the top of the stack. If `Btop` is not an ancestor of `B`, then:\n    - Let `VBtop ⊆ V` be the set of votes on `Btop` or ancestors or descendents of `Btop`.\n    - We need `|V \\ VBtop | > 38%`. More details on this can be found in [Optimistic Confirmation](../proposals/optimistic_confirmation.md)\n\nIf all the conditions are satisfied and validator `i` votes for block `B` then it adjusts its tower as follows (same rules described above in [Vote Tower](#vote-tower)).\n1. Remove expired blocks top down. Let `x := l - 1`. While `x >= 0 && lockexp(T(x)) < slot(B)`, remove `T(x)` from the tower, and set `l := l - 1` and `x := x - 1`.\n2. Add block to tower. `T(l) := B`, `confcount(B) := 1`, and set `l := l + 1`.\n3. Double lockouts. For each element `B = T(x)` if `l > x + confcount(B)`, then `confcount(B) := confcount(B) + 1`.\n```\n\n----------------------------------------\n\nTITLE: Opening Validator Script for Editing\nDESCRIPTION: Command to open the validator startup script in nano editor.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/operations/setup-a-validator.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnano /home/sol/bin/validator.sh\n```\n\n----------------------------------------\n\nTITLE: Rendering Math with KaTeX DOM API\nDESCRIPTION: Example of using KaTeX's render API to display a mathematical expression directly in a DOM element. Includes error handling option to display invalid inputs as red text.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/static/katex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nkatex.render(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", element, {\n    throwOnError: false\n});\n```\n\n----------------------------------------\n\nTITLE: Ethereum Transaction with Event Log Example\nDESCRIPTION: Illustrates the structure of an Ethereum transaction containing an event log with topics and data fields.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/log_data.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tx\": {\n    \"nonce\": \"0x2\",\n    \"gasPrice\": \"0xf224d4a00\",\n    \"gas\": \"0xc350\",\n    \"to\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n    \"value\": \"0x0\",\n    \"input\": \"0xa9059cbb000000000000000000000000a12431d0b9db640034b0cdfceef9cce161e62be40000000000000000000000000000000000000000000000a030dcebbd2f4c0000\",\n    \"hash\": \"0x98a67f0a35ebc0ac068acf0885d38419c632ffa4354e96641d6d5103a7681910\",\n    \"blockNumber\": \"0xc96431\",\n    \"from\": \"0x82f890D638478d211eF2208f3c1466B5Abf83551\",\n    \"transactionIndex\": \"0xe1\"\n  },\n  \"receipt\": {\n    \"gasUsed\": \"0x74d2\",\n    \"status\": \"0x1\",\n    \"logs\": [\n      {\n        \"address\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        \"topics\": [\n          \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n          \"0x00000000000000000000000082f890d638478d211ef2208f3c1466b5abf83551\",\n          \"0x000000000000000000000000a12431d0b9db640034b0cdfceef9cce161e62be4\"\n        ],\n        \"data\": \"0x0000000000000000000000000000000000000000000000a030dcebbd2f4c0000\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Timestamped Slot in Solana\nDESCRIPTION: Code for identifying the most recently timestamped slot based on the current slot and a timestamp interval. This is used as part of the process to determine which slot's timestamp data to use as reference.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/validator-timestamp-oracle.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlet timestamp_slot = floor(current_slot / timestamp_interval);\n```\n\n----------------------------------------\n\nTITLE: Building and running the Solana installer from source\nDESCRIPTION: This snippet explains how to clone the Solana repository and build the installer from source code, which is useful for platforms without pre-built binaries or for development purposes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/solana-labs/solana.git\n$ cd solana/install\n$ cargo run -- --help\n```\n\n----------------------------------------\n\nTITLE: Documenting Unreleased Changes for Solana v2.0.0\nDESCRIPTION: This snippet lists the unreleased changes for Solana version 2.0.0, including modifications to default options and API changes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<a name=\"edge-channel\"></a>\n## [2.0.0] - Unreleased\n* Changes\n  * `central-scheduler` as default option for `--block-production-method` (#34891)\n  * `solana-rpc-client-api`: `RpcFilterError` depends on `base64` version 0.22, so users may need to upgrade to `base64` version 0.22\n```\n\n----------------------------------------\n\nTITLE: Installing Solana with additional arguments\nDESCRIPTION: This snippet shows how to install Solana with custom arguments passed to the solana-install-init command using shell syntax to pass parameters through the bootstrap script.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ init_args=.... # arguments for `solana-install-init ...`\n$ curl -sSf https://raw.githubusercontent.com/solana-labs/solana/v1.0.0/install/solana-install-init.sh | sh -s - ${init_args}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Block and Vote Relationships in Solana Consensus (ASCII Diagram)\nDESCRIPTION: This ASCII diagram illustrates the relationships between finalized blocks, optimistically confirmed blocks, and votes in Solana's consensus protocol. It visually represents the concepts discussed in Lemma 2, showing the positions of block B', vote X, and block B.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/optimistic_confirmation.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                                +-------+\n                                |       |\n                       +--------+       +---------+\n                       |        |       |         |\n                       |        +-------+         |\n                       |                          |\n                       |                          |\n                       |                          |\n                       |                      +---+---+\n                       |                      |       |\n                       |                      |       |  X\n                       |                      |       |\n                       |                      +---+---+\n                       |                          |\n                       |                          |\n                       |                      +---+---+\n                       |                      |       |\n                       |                      |       |  B (Optimistically Confirmed)\n                       |                      |       |\n                       |                      +---+---+\n                       |                          |\n                       |                          |\n                       |                          |\n                       |                      +---+---+\n                       |                      |       |\n                       |                      |       |  S.last\n                       |                      |       |\n                       |                      +-------+\n                       |\n                   +---+---+\n                   |       |\n    B'(Finalized)  |       |\n                   |       |\n                   +-------+\n```\n\n----------------------------------------\n\nTITLE: Deploying a new Solana update to a cluster\nDESCRIPTION: This snippet shows the commands for deploying a new Solana update to a cluster, including generating an update manifest key and using solana-install deploy to make the update available to nodes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ solana-keygen new -o update-manifest.json  # <-- only generated once, the public key is shared with users\n$ solana-install deploy http://example.com/path/to/solana-release.tar.bz2 update-manifest.json\n```\n\n----------------------------------------\n\nTITLE: Diagram of Warping Scenarios in EAH Implementation\nDESCRIPTION: A text-based diagram illustrating the timeline of epochs, start slots, and stop slots to visualize different warping scenarios discussed in the appendix. The diagram shows three epochs with their corresponding start and stop slots for EAH calculation.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/epoch_accounts_hash.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  +---------+-----------------+-----------+---------+-----------------+-----------+\n  |         >                 <           |         >                 <           |\n  |    A    >     B           <     C     |    D    >      E          <     F     |\n  |         >                 <           |         >                 <           |\n  +---------+-----------------+-----------+---------+-----------------+-----------+\n  |         |                 |           |         |                 |           |\n  v         v                 v           v         v                 v           v\n  epoch 1   start slot 1      stop slot 1 epoch 2   start slot 2      stop slot 2 epoch 3\n```\n\n----------------------------------------\n\nTITLE: Explaining the PoRep Game Stages\nDESCRIPTION: This snippet describes the four stages of the Proof of Replication (PoRep) game, detailing the actions of archivers and validators in each stage.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_3\n\nLANGUAGE: pseudo\nCODE:\n```\n1. Proof submission stage:\n   - Archivers: submit proofs\n   - Validators: No-op\n2. Proof verification stage:\n   - Archivers: No-op\n   - Validators: Verify proofs\n3. Proof challenge stage:\n   - Archivers: Submit proof mask\n   - Validators: No-op\n4. Reward collection stage:\n   - Archivers: Collect rewards\n   - Validators: Collect rewards\n```\n\n----------------------------------------\n\nTITLE: Secp256k1 Signature Offsets Structure\nDESCRIPTION: Defines the structure for Secp256k1 signature verification offsets containing signature, public key, and message data locations within the instruction data.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/programs.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct Secp256k1SignatureOffsets {\n    secp_signature_offset: u16,            // offset to [signature,recovery_id] of 64+1 bytes\n    secp_signature_instruction_index: u8,  // instruction index to find signature\n    secp_pubkey_offset: u16,               // offset to ethereum_address pubkey of 20 bytes\n    secp_pubkey_instruction_index: u8,     // instruction index to find pubkey\n    secp_message_data_offset: u16,         // offset to start of message data\n    secp_message_data_size: u16,           // size of message data\n    secp_message_instruction_index: u8,    // instruction index to find message data\n}\n```\n\n----------------------------------------\n\nTITLE: Note About Move System Integration\nDESCRIPTION: This reference outlines how Move would potentially interact with non-Move Solana programs through a process_instruction() system call, similar to Rust BPF programs.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/embedding-move.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nprocess_instruction()\n```\n\n----------------------------------------\n\nTITLE: Move Program ID Reference\nDESCRIPTION: Constant identifier used to reference the Move VM loader in Solana's architecture\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/embedding-move.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nMOVE_PROGRAM_ID\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the changelog, including sections for different release channels and version numbers.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nPlease follow the [guidance](#adding-to-this-changelog) at the bottom of this file when making changes\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\nThis project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)\nand follows a [Backwards Compatibility Policy](https://docs.solanalabs.com/backwards-compatibility)\n\nRelease channels have their own copy of this changelog:\n* [edge - v2.0](#edge-channel)\n* [beta - v1.18](https://github.com/solana-labs/solana/blob/v1.18/CHANGELOG.md)\n* [stable - v1.17](https://github.com/solana-labs/solana/blob/v1.17/CHANGELOG.md)\n```\n\n----------------------------------------\n\nTITLE: FEC Rate Calculation Example for Turbine\nDESCRIPTION: Example calculations demonstrating how Forward Error Correction (FEC) rates affect block propagation success in different network conditions. Shows three scenarios with different FEC ratios (16:4, 16:16, and 32:32) and their impact on block success rates.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/consensus/turbine-block-propagation.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWith a FEC rate: `16:4`\n\n- `G = 8000`\n- `P = 1 - 0.85 * 0.85 = 1 - 0.7225 = 0.2775`\n- `S = 1 - (SUM of i=0 -> 4 for binomial(prob_failure = 0.2775, trials = 20, failures = i)) = 0.689414`\n- `B = (1 - 0.689) ^ (8000 / 20) = 10^-203`\n\nWith FEC rate of `16:16`\n\n- `G = 12800`\n- `S = 1 - (SUM of i=0 -> 16 for binomial(prob_failure = 0.2775, trials = 32, failures = i)) = 0.002132`\n- `B = (1 - 0.002132) ^ (12800 / 32) = 0.42583`\n\nWith FEC rate of `32:32`\n\n- `G = 12800`\n- `S = 1 - (SUM of i=0 -> 32 for binomial(prob_failure = 0.2775, trials = 64, failures = i)) = 0.000048`\n- `B = (1 - 0.000048) ^ (12800 / 64) = 0.99045`\n```\n\n----------------------------------------\n\nTITLE: Rust Clippy Lint Suppression Example\nDESCRIPTION: Example showing how to explicitly ignore Clippy linting advice using attribute annotation.\nSOURCE: https://github.com/solana-labs/solana/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[allow(clippy::too_many_arguments)]\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage of SOL Staked in Markdown\nDESCRIPTION: This snippet defines the formula for calculating the percentage of SOL staked in the Solana network. It uses LaTeX-style math notation within Markdown.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/ed_overview/ed_validation_client_economics/ed_vce_state_validation_protocol_based_rewards.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$$\n%~\\text{SOL Staked} = \\frac{\\text{Total SOL Staked}}{\\text{Total Current Supply}}\n$$\n```\n\n----------------------------------------\n\nTITLE: Illustrating Fork Choice with Duplicate Slots in Solana\nDESCRIPTION: Example showing a fork structure where slot 2 has received 51% votes but was detected as duplicate and removed from fork choice, while slot 6 has 39% votes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/handle-duplicate-block.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    |-------- 2 (51% voted, then detected this slot was a duplicate and removed this slot from fork choice)\n0---|\n    |---------- 6 (39%)\n\n```\n\n----------------------------------------\n\nTITLE: Ed25519 Signature Verification Process\nDESCRIPTION: Pseudocode demonstrating the Ed25519 signature verification process that iterates through multiple signatures and verifies each against its corresponding public key and message.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/programs.md#2025-04-23_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nprocess_instruction() {\n    for i in 0..count {\n        // i'th index values referenced:\n        instructions = &transaction.message().instructions\n        instruction_index = ed25519_signature_instruction_index != u16::MAX ? ed25519_signature_instruction_index : current_instruction;\n        signature = instructions[instruction_index].data[ed25519_signature_offset..ed25519_signature_offset + 64]\n        instruction_index = ed25519_pubkey_instruction_index != u16::MAX ? ed25519_pubkey_instruction_index : current_instruction;\n        pubkey = instructions[instruction_index].data[ed25519_pubkey_offset..ed25519_pubkey_offset + 32]\n        instruction_index = ed25519_message_instruction_index != u16::MAX ? ed25519_message_instruction_index : current_instruction;\n        message = instructions[instruction_index].data[ed25519_message_data_offset..ed25519_message_data_offset + ed25519_message_data_size]\n        if pubkey.verify(signature, message) != Success {\n            return Error\n        }\n    }\n    return Success\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Emitting Events in Solidity\nDESCRIPTION: Demonstrates how to define and emit events in Solidity, which can be used for logging data in Ethereum smart contracts.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/log_data.md#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent PaymentReceived {\n    address sender;\n    uint amount;\n}\n\ncontract c {\n    function pay() public payable {\n        emit PaymentReceived(msg.sender, msg.value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Archiver Behavior in Ledger Replication\nDESCRIPTION: This snippet outlines the behavior of archivers in the ledger replication process, including obtaining PoH hash, encrypting segments, generating proofs, and submitting transactions.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/ledger-replication-to-implement.md#2025-04-23_snippet_2\n\nLANGUAGE: pseudo\nCODE:\n```\n1. Archiver obtains information from validators or other archivers.\n2. Obtains PoH hash for the last turn.\n3. Signs PoH hash to determine segment and encryption key.\n4. Retrieves ledger segment.\n5. Encrypts segment using chacha algorithm in CBC mode.\n6. Initializes chacha RNG with signed recent PoH value.\n7. Generates NUM_STORAGE_SAMPLES samples and hashes them.\n8. Sends PoRep proof transaction to current leader.\n9. Submits multiple proofs per turn, including fake ones.\n10. Submits mask of fake proofs in the next turn.\n11. Collects rewards after 3 turns.\n```\n\n----------------------------------------\n\nTITLE: Describing Watchtower Sanity Failure Metric in Markdown\nDESCRIPTION: Details the 'watchtower-sanity-failure' metric emitted on failure, containing information about the specific test that failed, including the test name and exact failure message.\nSOURCE: https://github.com/solana-labs/solana/blob/master/watchtower/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### `watchtower-sanity-failure`\nOn failure this data point contains details about the specific test that failed via\nthe following fields:\n* `test`: name of the sanity test that failed\n* `err`: exact sanity failure message\n```\n\n----------------------------------------\n\nTITLE: Handling Bad Transmissions Specification\nDESCRIPTION: Defines two approaches for handling malicious transmissions in Solana: handling alternate valid transmissions that don't violate slashing rules, and marking slots as dead for invalid transmissions.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/tick-verification.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. If a leader can generate some erroneous transmission `T` and also some\n   alternate transmission `T'` for the same slot without violating any slashing\n   rules for duplicate transmissions (for instance if `T'` is a subset of `T`),\n   then the cluster must handle the possibility of both transmissions being live.\n\n2. Otherwise, we can simply mark the slot as dead and not playable. A slashing\n   proof may or may not be necessary depending on feasibility.\n```\n\n----------------------------------------\n\nTITLE: Building AWS AMI for Solana CI\nDESCRIPTION: Commands to update and build a custom AWS AMI for Solana CI using the elastic-ci-stack-for-aws repository.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ export AWS_ACCESS_KEY_ID=my_access_key\n$ export AWS_SECRET_ACCESS_KEY=my_secret_access_key\n$ git clone https://github.com/solana-labs/elastic-ci-stack-for-aws.git -b solana/cuda\n$ cd elastic-ci-stack-for-aws/\n$ make build\n$ make build-ami\n```\n\n----------------------------------------\n\nTITLE: Defining CrdsValue for Vote in Solana\nDESCRIPTION: This code snippet defines the structure of CrdsValue for votes in Solana. It uses a vector of Transactions to store multiple votes, allowing for efficient transmission and storage of validator votes.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/reliable-vote-transmission.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nVotes(Vec<Transaction>)\n```\n\n----------------------------------------\n\nTITLE: Manually downloading and running the Solana installer\nDESCRIPTION: This snippet demonstrates how to manually download a pre-built Solana installer binary from GitHub releases, make it executable, and run it directly without using the bootstrap script.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/implemented-proposals/installer.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -o solana-install-init https://github.com/solana-labs/solana/releases/download/v1.0.0/solana-install-init-x86_64-apple-darwin\n$ chmod +x ./solana-install-init\n$ ./solana-install-init --help\n```\n\n----------------------------------------\n\nTITLE: Proof Instructions for ElGamal Encryption\nDESCRIPTION: List of proof instructions for verifying ElGamal encryption operations including public key validity and zero balance verification.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/runtime/zk-token-proof.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- VerifyPubkeyValidity\n- VerifyZeroBalance\n```\n\n----------------------------------------\n\nTITLE: Markdown Header Configuration\nDESCRIPTION: Front matter configuration for the documentation page defining the title and sidebar label.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: System Design Proposals\nsidebar_label: Overview\n---\n```\n\n----------------------------------------\n\nTITLE: Returning Errors in Solidity Functions\nDESCRIPTION: Examples of Solidity functions that return errors using 'require' and 'revert' statements.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/proposals/return-data.md#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw() public {\n    require(msg.sender == owner, \"Permission denied\");\n}\n\nfunction failure() public {\n    revert(\"I afraid I can't do that dave\");\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Azure VM for Image Generalization\nDESCRIPTION: Commands to prepare an Azure VM for deallocation and conversion into a generalized image for CI.\nSOURCE: https://github.com/solana-labs/solana/blob/master/ci/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwaagent -deprovision+user; cd /etc; ln -s ../run/systemd/resolve/stub-resolv.conf resolv.conf\n```\n\n----------------------------------------\n\nTITLE: Blockstore Data Structure Description\nDESCRIPTION: Description of how entries are stored in Blockstore using key-value pairs where the key is a concatenation of slot and shred indices.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/blockstore.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- slot_index - The index of this slot\n- num_blocks - The number of blocks in the slot (used for chaining to a previous slot)\n- consumed - The highest shred index `n`, such that for all `m < n`, there exists a shred in this slot with shred index equal to `n`\n- received - The highest received shred index for the slot\n- next_slots - A list of future slots this slot could chain to\n- last_index - The index of the shred flagged as the last shred for this slot\n- is_connected - True if every block from 0...slot forms a full sequence without holes\n```\n\n----------------------------------------\n\nTITLE: Server-side Math Rendering with KaTeX\nDESCRIPTION: Example of using KaTeX's renderToString API for server-side math rendering. Generates HTML string output that can be inserted into web pages.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/static/katex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar html = katex.renderToString(\"c = \\\\pm\\\\sqrt{a^2 + b^2}\", {\n    throwOnError: false\n});\n// '<span class=\"katex\">...</span>'\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database\nDESCRIPTION: This command connects to the 'solana' database on a PostgreSQL server at IP 10.138.0.9 using the 'solana' user on port 5433.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/validator/geyser.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npsql -U solana -p 5433 -h 10.138.0.9 -w -d solana\n```\n\n----------------------------------------\n\nTITLE: Listing Program Accounts with Specific Authority\nDESCRIPTION: Commands to show program or buffer accounts matching a specific authority address rather than the default authority.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/examples/deploy-a-program.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsolana program show --programs --buffer-authority <AUTHORITY_ADDRESS>\nsolana program show --buffers --buffer-authority <AUTHORITY_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: ZSH Configuration for Ledger URLs\nDESCRIPTION: Configuration to handle special characters in keypair URLs when using zsh shell.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/cli/wallets/hardware/ledger.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nunsetopt nomatch\nsource ~/.zshrc\nsolana-keygen pubkey usb://ledger\\?key=0\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana CLI for Devnet\nDESCRIPTION: This command sets the Solana CLI to use the Devnet API URL for subsequent operations.\nSOURCE: https://github.com/solana-labs/solana/blob/master/docs/src/clusters/available.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsolana config set --url https://api.devnet.solana.com\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Information\nDESCRIPTION: Command to verify the current beta and stable channel branch assignments.\nSOURCE: https://github.com/solana-labs/solana/blob/master/RELEASE.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nci/channel-info.sh\n```"
  }
]