[
  {
    "owner": "vuejs",
    "repo": "pinia",
    "content": "TITLE: Creating Basic Pinia Store with Options API\nDESCRIPTION: Demonstrates how to create a basic counter store using Pinia's options API style. Shows state and actions definition with a simple counter implementation.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// stores/counter.js\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', {\n  state: () => {\n    return { count: 0 }\n  },\n  // could also be defined as\n  // state: () => ({ count: 0 })\n  actions: {\n    increment() {\n      this.count++\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Pinia Store Definition\nDESCRIPTION: Shows how to define a basic Pinia store using defineStore() with a unique identifier. The store name should follow the useXStore convention.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useAlertsStore = defineStore('alerts', {\n  // other options...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and using a Pinia instance in a Vue.js application\nDESCRIPTION: This snippet demonstrates how to create a Pinia instance and add it to a Vue.js application as a plugin. It includes importing necessary functions, creating the Pinia instance, and using it in the app.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\nconst pinia = createPinia()\nconst app = createApp(App)\n\napp.use(pinia)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Creating Pinia Store with Composition API\nDESCRIPTION: Shows how to create a Pinia store using the Composition API style with refs and functions, providing a more flexible approach for advanced use cases.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', () => {\n  const count = ref(0)\n  function increment() {\n    count.value++\n  }\n\n  return { count, increment }\n})\n```\n\n----------------------------------------\n\nTITLE: Converting a Vuex Module to a Pinia Store\nDESCRIPTION: Complete example showing the conversion of a Vuex module to a Pinia store, including state, getters, actions, and mutations. This demonstrates how to handle namespaced modules, root state access, and other Vuex patterns in Pinia.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-vuex.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Vuex module in the 'auth/user' namespace\nimport { Module } from 'vuex'\nimport { api } from '@/api'\nimport { RootState } from '@/types' // if using a Vuex type definition\n\ninterface State {\n  firstName: string\n  lastName: string\n  userId: number | null\n}\n\nconst storeModule: Module<State, RootState> = {\n  namespaced: true,\n  state: {\n    firstName: '',\n    lastName: '',\n    userId: null\n  },\n  getters: {\n    firstName: (state) => state.firstName,\n    fullName: (state) => `${state.firstName} ${state.lastName}`,\n    loggedIn: (state) => state.userId !== null,\n    // combine with some state from other modules\n    fullUserDetails: (state, getters, rootState, rootGetters) => {\n      return {\n        ...state,\n        fullName: getters.fullName,\n        // read the state from another module named `auth`\n        ...rootState.auth.preferences,\n        // read a getter from a namespaced module called `email` nested under `auth`\n        ...rootGetters['auth/email'].details\n      }\n    }\n  },\n  actions: {\n    async loadUser ({ state, commit }, id: number) {\n      if (state.userId !== null) throw new Error('Already logged in')\n      const res = await api.user.load(id)\n      commit('updateUser', res)\n    }\n  },\n  mutations: {\n    updateUser (state, payload) {\n      state.firstName = payload.firstName\n      state.lastName = payload.lastName\n      state.userId = payload.userId\n    },\n    clearUser (state) {\n      state.firstName = ''\n      state.lastName = ''\n      state.userId = null\n    }\n  }\n}\n\nexport default storeModule\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Actions in Pinia Store\nDESCRIPTION: Demonstrates defining basic synchronous actions in a Pinia store, including counter increment and random value generation.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    count: 0,\n  }),\n  actions: {\n    // since we rely on `this`, we cannot use an arrow function\n    increment() {\n      this.count++\n    },\n    randomizeCounter() {\n      this.count = Math.round(100 * Math.random())\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia with Vue 3\nDESCRIPTION: Setup code to create and install Pinia store instance in a Vue 3 application. Creates the root store and adds it to the Vue app instance.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\nconst pinia = createPinia()\nconst app = createApp(App)\n\napp.use(pinia)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Defining State with TypeScript in Pinia\nDESCRIPTION: Shows how to define state in a Pinia store using TypeScript, including type annotations for arrays and nullable values.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useUserStore = defineStore('user', {\n  state: () => {\n    return {\n      // for initially empty lists\n      userList: [] as UserInfo[],\n      // for data that is not yet loaded\n      user: null as UserInfo | null,\n    }\n  },\n})\n\ninterface UserInfo {\n  name: string\n  age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Store Usage in Vue Component\nDESCRIPTION: Demonstrates how to use a Pinia store within a Vue component's setup script, including proper destructuring with storeToRefs.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/index.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useCounterStore } from '@/stores/counter'\nimport { storeToRefs } from 'pinia'\n\nconst store = useCounterStore()\nconst { name, doubleCount } = storeToRefs(store)\nconst { increment } = store\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining State in Pinia (JavaScript)\nDESCRIPTION: Demonstrates how to define state in a Pinia store using JavaScript. The state is defined as a function that returns an object with initial values.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useStore = defineStore('storeId', {\n  // arrow function recommended for full type inference\n  state: () => {\n    return {\n      // all these properties will have their type inferred automatically\n      count: 0,\n      name: 'Eduardo',\n      isAdmin: true,\n      items: [],\n      hasChanged: true,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Other Store Actions\nDESCRIPTION: Demonstrates how to access and use actions from other Pinia stores within an action.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAuthStore } from './auth-store'\n\nexport const useSettingsStore = defineStore('settings', {\n  state: () => ({\n    preferences: null,\n    // ...\n  }),\n  actions: {\n    async fetchUserPreferences() {\n      const auth = useAuthStore()\n      if (auth.isAuthenticated) {\n        this.preferences = await fetchPreferences()\n      } else {\n        throw new Error('User must be authenticated')\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in Components\nDESCRIPTION: Demonstrates how to use a Pinia store within a Vue component using the composition API. Shows store initialization and property extraction using storeToRefs.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMainStore } from '@/stores/main'\nimport { storeToRefs } from 'pinia'\n\nexport default defineComponent({\n  setup() {\n    const main = useMainStore()\n\n    const { counter, doubleCounter } = storeToRefs(main)\n\n    return {\n      main,\n      counter,\n      doubleCounter,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Pinia Store for Todo Management in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a Pinia store for managing todos. It includes state properties, getters for filtering todos, and an action for adding new todos. The example showcases Pinia's type inference capabilities, even in JavaScript.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useTodos = defineStore('todos', {\n  state: () => ({\n    /** @type {{ text: string, id: number, isFinished: boolean }[]} */\n    todos: [],\n    /** @type {'all' | 'finished' | 'unfinished'} */\n    filter: 'all',\n    // type will be automatically inferred to number\n    nextId: 0,\n  }),\n  getters: {\n    finishedTodos(state) {\n      // autocompletion! ✨\n      return state.todos.filter((todo) => todo.isFinished)\n    },\n    unfinishedTodos(state) {\n      return state.todos.filter((todo) => !todo.isFinished)\n    },\n    /**\n     * @returns {{ text: string, id: number, isFinished: boolean }[]}\n     */\n    filteredTodos(state) {\n      if (this.filter === 'finished') {\n        // call other getters with autocompletion ✨\n        return this.finishedTodos\n      } else if (this.filter === 'unfinished') {\n        return this.unfinishedTodos\n      }\n      return this.todos\n    },\n  },\n  actions: {\n    // any amount of arguments, return a promise or not\n    addTodo(text) {\n      // you can directly mutate the state\n      this.todos.push({ text, id: this.nextId++, isFinished: false })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Inter-store Getter Access\nDESCRIPTION: Demonstrates how to access getters from other stores within a getter definition.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/getters.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useOtherStore } from './other-store'\n\nexport const useStore = defineStore('main', {\n  state: () => ({\n    // ...\n  }),\n  getters: {\n    otherGetter(state) {\n      const otherStore = useOtherStore()\n      return state.localData + otherStore.data\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Getter Implementation in Pinia Store\nDESCRIPTION: Demonstrates basic getter definition in a Pinia store using arrow functions with state parameter access.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/getters.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    count: 0,\n  }),\n  getters: {\n    doubleCount: (state) => state.count * 2,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setup Store Implementation\nDESCRIPTION: Shows how to create a Pinia store using the Composition API setup style with refs, computed properties, and functions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', () => {\n  const count = ref(0)\n  const name = ref('Eduardo')\n  const doubleCount = computed(() => count.value * 2)\n  function increment() {\n    count.value++\n  }\n\n  return { count, name, doubleCount, increment }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Debounce Plugin for Pinia\nDESCRIPTION: Shows how to create a Pinia plugin that reads custom options and wraps actions with debounce functionality using lodash.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// use any debounce library\nimport debounce from 'lodash/debounce'\n\npinia.use(({ options, store }) => {\n  if (options.debounce) {\n    // we are overriding the actions with new ones\n    return Object.keys(options.debounce).reduce((debouncedActions, action) => {\n      debouncedActions[action] = debounce(\n        store[action],\n        options.debounce[action]\n      )\n      return debouncedActions\n    }, {})\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Pinia Plugin in JavaScript\nDESCRIPTION: Demonstrates how to create a simple Pinia plugin that adds a static property to all stores. The plugin is then added to the Pinia instance using pinia.use().\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPinia } from 'pinia'\n\n// add a property named `secret` to every store that is created\n// after this plugin is installed this could be in a different file\nfunction SecretPiniaPlugin() {\n  return { secret: 'the cake is a lie' }\n}\n\nconst pinia = createPinia()\n// give the plugin to pinia\npinia.use(SecretPiniaPlugin)\n\n// in another file\nconst store = useStore()\nstore.secret // 'the cake is a lie'\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in Vue Router Navigation Guards\nDESCRIPTION: Shows how to correctly use a Pinia store within Vue Router navigation guards. It emphasizes the importance of calling useStore() inside the guard function to ensure proper initialization.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/outside-component-usage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter } from 'vue-router'\nconst router = createRouter({\n  // ...\n})\n\n// ❌ Depending on the order of imports this will fail\nconst store = useUserStore()\n\nrouter.beforeEach((to, from, next) => {\n  // we wanted to use the store here\n  if (store.isLoggedIn) next()\n  else next('/login')\n})\n\nrouter.beforeEach((to) => {\n  // ✅ This will work because the router starts its navigation after\n  // the router is installed and pinia will be installed too\n  const store = useUserStore()\n\n  if (to.meta.requiresAuth && !store.isLoggedIn) return '/login'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Actions in JavaScript with Pinia\nDESCRIPTION: This example illustrates how to implement shared actions in Pinia using JavaScript. It shows how to use one store (UserStore) within an action of another store (CartStore), including error handling and calling other actions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composing-stores.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { useUserStore } from './user'\nimport { apiOrderCart } from './api'\n \nexport const useCartStore = defineStore('cart', {\n  actions: {\n    async orderCart() {\n      const user = useUserStore()\n\n      try {\n        await apiOrderCart(user.token, this.items)\n        // another action\n        this.emptyCart()\n      } catch (err) {\n        displayError(err)\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Actions with API Calls\nDESCRIPTION: Shows how to implement asynchronous actions in Pinia store using API calls with error handling.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mande } from 'mande'\n\nconst api = mande('/api/users')\n\nexport const useUsers = defineStore('users', {\n  state: () => ({\n    userData: null,\n    // ...\n  }),\n\n  actions: {\n    async registerUser(login, password) {\n      try {\n        this.userData = await api.post({ login, password })\n        showTooltip(`Welcome back ${this.userData.name}!`)\n      } catch (error) {\n        showTooltip(error)\n        // let the form component display the error\n        return error\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Stores in TypeScript with Pinia\nDESCRIPTION: This example demonstrates how to implement nested stores in Pinia using TypeScript. It shows how to use one store within another, specifically in the context of a cart store using a user store.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composing-stores.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { useUserStore } from './user'\nimport { apiPurchase } from './api'\n\nexport const useCartStore = defineStore('cart', () => {\n  const user = useUserStore()\n  const list = ref([])\n\n  const summary = computed(() => {\n    return `Hi ${user.name}, you have ${list.value.length} items in your cart. It costs ${price.value}.`\n  })\n\n  function purchase() {\n    return apiPurchase(user.id, list.value)\n  }\n\n  return { summary, purchase }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Pinia with Options API and Map Helpers\nDESCRIPTION: Demonstrates how to use Pinia stores with the Options API using map helpers like mapStores, mapState, and mapActions for traditional Vue component style.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst useCounterStore = defineStore('counter', {\n  state: () => ({ count: 0 }),\n  getters: {\n    double: (state) => state.count * 2,\n  },\n  actions: {\n    increment() {\n      this.count++\n    },\n  },\n})\n\nconst useUserStore = defineStore('user', {\n  // ...\n})\n\nexport default defineComponent({\n  computed: {\n    // other computed properties\n    // ...\n    // gives access to this.counterStore and this.userStore\n    ...mapStores(useCounterStore, useUserStore),\n    // gives read access to this.count and this.double\n    ...mapState(useCounterStore, ['count', 'double']),\n  },\n  methods: {\n    // gives access to this.increment()\n    ...mapActions(useCounterStore, ['increment']),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in Vue Component\nDESCRIPTION: Shows how to use a Pinia store within a Vue component using the Composition API setup script. Demonstrates state access and mutation through direct property access and actions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useCounterStore } from '@/stores/counter'\n\nconst counter = useCounterStore()\n\ncounter.count++\n// with autocompletion ✨\ncounter.$patch({ count: counter.count + 1 })\n// or using an action instead\ncounter.increment()\n</script>\n\n<template>\n  <!-- Access the state directly from the store -->\n  <div>Current Count: {{ counter.count }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to State Changes in Pinia (JavaScript)\nDESCRIPTION: Shows how to subscribe to state changes in a Pinia store using the $subscribe method.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncartStore.$subscribe((mutation, state) => {\n  // import { MutationType } from 'pinia'\n  mutation.type // 'direct' | 'patch object' | 'patch function'\n  // same as cartStore.$id\n  mutation.storeId // 'cart'\n  // only available with mutation.type === 'patch object'\n  mutation.payload // patch object passed to cartStore.$patch()\n\n  // persist the whole state to the local storage whenever it changes\n  localStorage.setItem('cart', JSON.stringify(state))\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Actions with API Calls\nDESCRIPTION: Demonstrates implementing asynchronous actions in Pinia using API calls with error handling and state updates.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mande } from 'mande'\n\nconst api = mande('/api/users')\n\nexport const useUsers = defineStore('users', {\n  state: () => ({\n    userData: null,\n    // ...\n  }),\n\n  actions: {\n    async registerUser(login, password) {\n      try {\n        this.userData = await api.post({ login, password })\n        showTooltip(`Welcome back ${this.userData.name}!`)\n      } catch (error) {\n        showTooltip(error)\n        // 让表单组件显示错误\n        return error\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Vue Components with Pinia Stores in JavaScript\nDESCRIPTION: Demonstrates how to set up and perform unit tests for Vue components that use Pinia stores, including mocking store actions and manipulating state.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from '@vue/test-utils'\nimport { createTestingPinia } from '@pinia/testing'\n// import any store you want to interact with in tests\nimport { useSomeStore } from '@/stores/myStore'\n\nconst wrapper = mount(Counter, {\n  global: {\n    plugins: [createTestingPinia()],\n  },\n})\n\nconst store = useSomeStore() // uses the testing pinia!\n\n// state can be directly manipulated\nstore.name = 'my new name'\n// can also be done through patch\nstore.$patch({ name: 'new name' })\nexpect(store.name).toBe('new name')\n\n// actions are stubbed by default, meaning they don't execute their code by default.\n// See below to customize this behavior.\nstore.someAction()\n\nexpect(store.someAction).toHaveBeenCalledTimes(1)\nexpect(store.someAction).toHaveBeenLastCalledWith()\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia Store in Single-Page Application (JavaScript)\nDESCRIPTION: This snippet demonstrates the correct order of initializing a Pinia store in a single-page application. It shows that the store should be used after creating and installing the Pinia instance.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/outside-component-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useUserStore } from '@/stores/user'\nimport { createPinia } from 'pinia'\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n// ❌  失败，因为它是在创建 pinia 之前被调用的\nconst userStore = useUserStore()\n\nconst pinia = createPinia()\nconst app = createApp(App)\napp.use(pinia)\n\n// ✅ 成功，因为 pinia 实例现在激活了\nconst userStore = useUserStore()\n```\n\n----------------------------------------\n\nTITLE: Mapping Multiple Pinia Stores in Vue Options API\nDESCRIPTION: Example showing how to map multiple Pinia stores using mapStores() helper to access store properties in Vue component computed properties and methods.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/options-api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mapStores } from 'pinia'\n\n// given two stores with the following ids\nconst useUserStore = defineStore('user', {\n  // ...\n})\nconst useCartStore = defineStore('cart', {\n  // ...\n})\n\nexport default {\n  computed: {\n    // note we are not passing an array, just one store after the other\n    // each store will be accessible as its id + 'Store'\n    ...mapStores(useCartStore, useUserStore)\n  },\n\n  methods: {\n    async buyStuff() {\n      // use them anywhere!\n      if (this.userStore.isAuthenticated()) {\n        await this.cartStore.buy()\n        this.$router.push('/purchased')\n      }\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Pinia Store in JavaScript\nDESCRIPTION: Demonstrates how to set up and perform unit tests for a Pinia store, including creating a fresh Pinia instance and testing store actions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// stores/counter.spec.ts\nimport { setActivePinia, createPinia } from 'pinia'\nimport { useCounterStore } from '../src/stores/counter'\n\ndescribe('Counter Store', () => {\n  beforeEach(() => {\n    // creates a fresh pinia and makes it active\n    // so it's automatically picked up by any useStore() call\n    // without having to pass it to it: `useStore(pinia)`\n    setActivePinia(createPinia())\n  })\n\n  it('increments', () => {\n    const counter = useCounterStore()\n    expect(counter.n).toBe(0)\n    counter.increment()\n    expect(counter.n).toBe(1)\n  })\n\n  it('increments by amount', () => {\n    const counter = useCounterStore()\n    counter.increment(10)\n    expect(counter.n).toBe(10)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Pinia Store Definition\nDESCRIPTION: Example of defining a Pinia store with state, getters and actions using TypeScript. Shows how to create a typed store with counter functionality and custom methods.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useMainStore = defineStore('main', {\n  state: () => ({\n    counter: 0,\n    name: 'Eduardo',\n  }),\n  getters: {\n    doubleCounter: (state) => state.counter * 2,\n    doubleCounterPlusOne(): number {\n      return this.doubleCounter + 1\n    },\n  },\n  actions: {\n    reset() {\n      this.counter = 0\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Composables in Option Stores with Pinia\nDESCRIPTION: Demonstrates how to use composables within the state property of an option store in Pinia. This example uses the useLocalStorage composable to persist user data.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composables.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    user: useLocalStorage('pinia/auth/login', 'bob'),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Typing Pinia Plugins in TypeScript\nDESCRIPTION: Demonstrates how to properly type a Pinia plugin using the PiniaPluginContext type for strong type checking and IDE support.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PiniaPluginContext } from 'pinia'\n\nexport function myPiniaPlugin(context: PiniaPluginContext) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Getter Usage\nDESCRIPTION: Example of accessing store getters in a Vue component using script setup syntax.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/getters.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useCounterStore } from './counterStore'\n\nconst store = useCounterStore()\n</script>\n\n<template>\n  <p>Double count is {{ store.doubleCount }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing the Converted Pinia Store\nDESCRIPTION: The Pinia implementation of the previously shown Vuex module, demonstrating how to use defineStore, handle state, convert mutations to actions, and access other stores. Shows best practices for TypeScript integration.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-vuex.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Pinia Store\nimport { defineStore } from 'pinia'\nimport { useAuthPreferencesStore } from './auth-preferences'\nimport { useAuthEmailStore } from './auth-email'\nimport vuexStore from '@/store' // for gradual conversion, see fullUserDetails\n\ninterface State {\n  firstName: string\n  lastName: string\n  userId: number | null\n}\n\nexport const useAuthUserStore = defineStore('authUser', {\n  // convert to a function\n  state: (): State => ({\n    firstName: '',\n    lastName: '',\n    userId: null\n  }),\n  getters: {\n    // firstName getter removed, no longer needed\n    fullName: (state) => `${state.firstName} ${state.lastName}`,\n    loggedIn: (state) => state.userId !== null,\n    // must define return type because of using `this`\n    fullUserDetails (state): FullUserDetails {\n      // import from other stores\n      const authPreferencesStore = useAuthPreferencesStore()\n      const authEmailStore = useAuthEmailStore()\n      return {\n        ...state,\n        // other getters now on `this`\n        fullName: this.fullName,\n        ...authPreferencesStore.$state,\n        ...authEmailStore.details\n      }\n\n      // alternative if other modules are still in Vuex\n      // return {\n      //   ...state,\n      //   fullName: this.fullName,\n      //   ...vuexStore.state.auth.preferences,\n      //   ...vuexStore.getters['auth/email'].details\n      // }\n    }\n  },\n  actions: {\n    // no context as first argument, use `this` instead\n    async loadUser (id: number) {\n      if (this.userId !== null) throw new Error('Already logged in')\n      const res = await api.user.load(id)\n      this.updateUser(res)\n    },\n    // mutations can now become actions, instead of `state` as first argument use `this`\n    updateUser (payload) {\n      this.firstName = payload.firstName\n      this.lastName = payload.lastName\n      this.userId = payload.userId\n    },\n    // easily reset state using `$reset`\n    clearUser () {\n      this.$reset()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing HMR for Pinia Store in JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement Hot Module Replacement for a Pinia store named 'auth'. It imports necessary functions from Pinia, defines the store, and sets up HMR acceptance. This pattern should be repeated for each store file in the project.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/hot-module-replacement.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// auth.js\nimport { defineStore, acceptHMRUpdate } from 'pinia'\n\nexport const useAuth = defineStore('auth', {\n  // options...\n})\n\n// make sure to pass the right store definition, `useAuth` in this case.\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useAuth, import.meta.hot))\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Component Usage from Vuex to Pinia\nDESCRIPTION: Comparison of component code using Vuex versus Pinia, showing how to replace useStore with direct store imports in the setup function, and how to access state and getters in the new pattern.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-vuex.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Vuex\nimport { defineComponent, computed } from 'vue'\nimport { useStore } from 'vuex'\n\nexport default defineComponent({\n  setup () {\n    const store = useStore()\n\n    const firstName = computed(() => store.state.auth.user.firstName)\n    const fullName = computed(() => store.getters['auth/user/fullName'])\n\n    return {\n      firstName,\n      fullName\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Pinia Store in JavaScript\nDESCRIPTION: Sets up a test environment for a Pinia store, creating and activating a Pinia instance before each test. Tests increment functionality of a counter store.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// stores/counter.spec.ts\nimport { setActivePinia, createPinia } from 'pinia'\nimport { useCounter } from '../src/stores/counter'\n\ndescribe('Counter Store', () => {\n  beforeEach(() => {\n    // 创建一个新 pinia，并使其处于激活状态，这样它就会被任何 useStore() 调用自动接收\n    // 而不需要手动传递：\n    // `useStore(pinia)`\n    setActivePinia(createPinia())\n  })\n\n  it('increments', () => {\n    const counter = useCounter()\n    expect(counter.n).toBe(0)\n    counter.increment()\n    expect(counter.n).toBe(1)\n  })\n\n  it('increments by amount', () => {\n    const counter = useCounter()\n    counter.increment(10)\n    expect(counter.n).toBe(10)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Pinia Plugin with Context in JavaScript\nDESCRIPTION: Shows the structure of a Pinia plugin function that receives a context object. The context provides access to the Pinia instance, current app, store being augmented, and store options.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function myPiniaPlugin(context) {\n  context.pinia // the pinia created with `createPinia()`\n  context.app // the current app created with `createApp()`\n  context.store // the store the plugin is augmenting\n  context.options // the options object defining the store passed to `defineStore()`\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Option Store Implementation\nDESCRIPTION: Demonstrates how to create a Pinia store using the Options API style with state, getters, and actions properties.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({ count: 0, name: 'Eduardo' }),\n  getters: {\n    doubleCount: (state) => state.count * 2,\n  },\n  actions: {\n    increment() {\n      this.count++\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Directory Structure between Vuex and Pinia\nDESCRIPTION: Shows the recommended directory structure conversion from Vuex modules to Pinia stores, illustrating how nested namespaced modules can be flattened while preserving namespace concepts through store IDs.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-vuex.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Vuex example (assuming namespaced modules)\nsrc\n└── store\n    ├── index.js           # Initializes Vuex, imports modules\n    └── modules\n        ├── module1.js     # 'module1' namespace\n        └── nested\n            ├── index.js   # 'nested' namespace, imports module2 & module3\n            ├── module2.js # 'nested/module2' namespace\n            └── module3.js # 'nested/module3' namespace\n\n# Pinia equivalent, note ids match previous namespaces\nsrc\n└── stores\n    ├── index.js          # (Optional) Initializes Pinia, does not import stores\n    ├── module1.js        # 'module1' id\n    ├── nested-module2.js # 'nestedModule2' id\n    ├── nested-module3.js # 'nestedModule3' id\n    └── nested.js         # 'nested' id\n```\n\n----------------------------------------\n\nTITLE: Defining State with Interface in Pinia (TypeScript)\nDESCRIPTION: Demonstrates how to define state in a Pinia store using TypeScript with an interface to type the return value of the state function.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface State {\n  userList: UserInfo[]\n  user: UserInfo | null\n}\n\nexport const useUserStore = defineStore('user', {\n  state: (): State => {\n    return {\n      userList: [],\n      user: null,\n    }\n  },\n})\n\ninterface UserInfo {\n  name: string\n  age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Getter with Parameter Function\nDESCRIPTION: Demonstrates how to create a getter that returns a function to accept parameters, useful for filtering or finding specific items.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/getters.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useUserListStore = defineStore('userList', {\n  getters: {\n    getUserById: (state) => {\n      return (userId) => state.users.find((user) => user.id === userId)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Store with Dependency Injection\nDESCRIPTION: Example of a Pinia store using dependency injection and Vue Router integration in the setup style.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from 'vue'\nimport { useRoute } from 'vue-router'\nimport { defineStore } from 'pinia'\n\nexport const useSearchFilters = defineStore('search-filters', () => {\n  const route = useRoute()\n  const appProvided = inject('appProvided')\n\n  return {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Resetting State in Setup Stores (TypeScript)\nDESCRIPTION: Demonstrates how to create a custom $reset() method in a Pinia Setup Store to reset the state to its initial value.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', () => {\n  const count = ref(0)\n\n  function $reset() {\n    count.value = 0\n  }\n\n  return { count, $reset }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Pinia Store Actions\nDESCRIPTION: Shows how to define simple synchronous actions in a Pinia store for managing counter state operations.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useCounterStore = defineStore('main', {\n  state: () => ({\n    count: 0,\n  }),\n  actions: {\n    increment() {\n      this.count++\n    },\n    randomizeCounter() {\n      this.count = Math.round(100 * Math.random())\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing State in Pinia (JavaScript)\nDESCRIPTION: Shows how to access and modify state in a Pinia store directly through the store instance.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = useStore()\n\nstore.count++\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Store Composition Rules in JavaScript\nDESCRIPTION: This snippet illustrates the rules for composing stores in Pinia, showing both incorrect and correct ways to use stores within each other. It emphasizes that direct state reading between stores in setup functions can lead to infinite loops.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composing-stores.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst useX = defineStore('x', () => {\n  const y = useY()\n\n  // ❌ This is not possible because y also tries to read x.name\n  y.name\n\n  function doSomething() {\n    // ✅ Read y properties in computed or actions\n    const yName = y.name\n    // ...\n  }\n\n  return {\n    name: ref('I am X'),\n  }\n})\n\nconst useY = defineStore('y', () => {\n  const x = useX()\n\n  // ❌ This is not possible because x also tries to read y.name\n  x.name\n\n  function doSomething() {\n    // ✅ Read x properties in computed or actions\n    const xName = x.name\n    // ...\n  }\n\n  return {\n    name: ref('I am Y'),\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Parameterized Getter Implementation\nDESCRIPTION: Shows how to implement getters that accept parameters by returning a function.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/getters.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useStore = defineStore('main', {\n  getters: {\n    getUserById: (state) => {\n      return (userId) => state.users.find((user) => user.id === userId)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using mapState Helper with Options API (JavaScript)\nDESCRIPTION: Shows how to use the mapState helper to map state properties as readonly computed properties in the Options API.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mapState } from 'pinia'\nimport { useCounterStore } from '../stores/counter'\n\nexport default {\n  computed: {\n    // gives access to this.count inside the component\n    // same as reading from store.count\n    ...mapState(useCounterStore, ['count']),\n    // same as above but registers it as this.myOwnName\n    ...mapState(useCounterStore, {\n      myOwnName: 'count',\n      // you can also write a function that gets access to the store\n      double: store => store.count * 2,\n      // it can have access to `this` but it won't be typed correctly...\n      magicValue(store) {\n        return store.someGetter + this.count + this.double\n      },\n    }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating State with $patch Function (JavaScript)\nDESCRIPTION: Demonstrates how to use the $patch method with a function to perform complex state mutations in Pinia.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstore.$patch((state) => {\n  state.items.push({ name: 'shoes', quantity: 1 })\n  state.hasChanged = true\n})\n```\n\n----------------------------------------\n\nTITLE: Proper Store Usage in Asynchronous Actions with Pinia\nDESCRIPTION: This snippet demonstrates the correct way to use stores in asynchronous actions with Pinia. It emphasizes the importance of calling useStore() before any await statements to ensure correct pinia instance usage, especially in SSR applications.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composing-stores.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { useUserStore } from './user'\nimport { apiOrderCart } from './api'\n  \nexport const useCartStore = defineStore('cart', {\n  actions: {\n    async orderCart() {\n      // ✅ call at the top of the action before any `await`\n      const user = useUserStore()\n\n      try {\n        await apiOrderCart(user.token, this.items)\n        // ❌ called after an `await` statement\n        const otherStore = useOtherStore()\n        // another action\n        this.emptyCart()\n      } catch (err) {\n        displayError(err)\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Pinia Plugin with Context in JavaScript\nDESCRIPTION: Shows the structure of a Pinia plugin function that receives a context object with access to the pinia instance, app, store, and options.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function myPiniaPlugin(context) {\n  context.pinia // the pinia created with `createPinia()`\n  context.app // the current app created with `createApp()` (Vue 3 only)\n  context.store // the store the plugin is augmenting\n  context.options // the options object defining the store passed to `defineStore()`\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Snippets for Pinia Store Templates\nDESCRIPTION: Defines two VS Code snippets for quickly scaffolding Pinia stores in Vue.js applications. Includes templates for both Options API and Setup (Composition API) patterns with built-in hot module replacement support. The snippets automatically generate store names based on the filename and provide basic store structure.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/vscode-snippets.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Pinia Options Store Boilerplate\": {\n    \"scope\": \"javascript,typescript\",\n    \"prefix\": \"pinia-options\",\n    \"body\": [\n      \"import { defineStore, acceptHMRUpdate } from 'pinia'\",\n      \"\",\n      \"export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', {\",\n      \" state: () => ({\",\n      \"   $0\",\n      \" }),\",\n      \" getters: {},\",\n      \" actions: {},\",\n      \"})\",\n      \"\",\n      \"if (import.meta.hot) {\",\n      \" import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))\",\n      \"}\",\n      \"\"\n    ],\n    \"description\": \"Bootstrap the code needed for a Vue.js Pinia Options Store file\"\n  },\n  \"Pinia Setup Store Boilerplate\": {\n    \"scope\": \"javascript,typescript\",\n    \"prefix\": \"pinia-setup\",\n    \"body\": [\n      \"import { defineStore, acceptHMRUpdate } from 'pinia'\",\n      \"\",\n      \"export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', () => {\",\n      \" $0\",\n      \" return {}\",\n      \"})\",\n      \"\",\n      \"if (import.meta.hot) {\",\n      \" import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))\",\n      \"}\",\n      \"\"\n    ],\n    \"description\": \"Bootstrap the code needed for a Vue.js Pinia Setup Store file\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting State Added in Pinia Plugins\nDESCRIPTION: Shows how to override the $reset() method to include resetting state added by plugins. This ensures that custom state is also reset when the store is reset.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toRef, ref } from 'vue'\n\npinia.use(({ store }) => {\n  if (!store.$state.hasOwnProperty('hasError')) {\n    const hasError = ref(false)\n    store.$state.hasError = hasError\n  }\n  store.hasError = toRef(store.$state, 'hasError')\n\n  const originalReset = store.$reset.bind(store)\n\n  return {\n    $reset() {\n      originalReset()\n      store.hasError = false\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Mutating State with $patch Method (JavaScript)\nDESCRIPTION: Shows how to mutate multiple state properties at once using the $patch method in Pinia.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstore.$patch({\n  count: store.count + 1,\n  age: 120,\n  name: 'DIO',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Getters in JavaScript with Pinia\nDESCRIPTION: This snippet shows how to implement shared getters in Pinia using JavaScript. It demonstrates how to use one store (UserStore) within a getter of another store (CartStore).\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composing-stores.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { useUserStore } from './user'\n\nexport const useCartStore = defineStore('cart', {\n  getters: {\n    summary(state) {\n      const user = useUserStore()\n\n      return `Hi ${user.name}, you have ${state.list.length} items in your cart. It costs ${state.price}.`\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Pinia Plugin for Nuxt 3 in TypeScript\nDESCRIPTION: Shows how to create a Pinia plugin as a Nuxt plugin, accessing the Pinia instance.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PiniaPluginContext } from 'pinia'\nimport { Plugin } from '@nuxt/types'\n\nfunction MyPiniaPlugin({ store }: PiniaPluginContext) {\n  store.$subscribe((mutation) => {\n    console.log(`[🍍 ${mutation.storeId}]: ${mutation.type}.`)\n  })\n  return { creationTime: new Date() }\n}\n\nconst myPlugin: Plugin = ({ $pinia }) => {\n  $pinia.use(MyPiniaPlugin)\n}\n\nexport default myPlugin\n```\n\n----------------------------------------\n\nTITLE: Using $subscribe and $onAction in Pinia Plugins\nDESCRIPTION: Shows how to use store.$subscribe and store.$onAction within Pinia plugins to react to store changes and actions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\npinia.use(({ store }) => {\n  store.$subscribe(() => {\n    // react to store changes\n  })\n  store.$onAction(() => {\n    // react to store actions\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding External Properties to Stores in Pinia Plugins\nDESCRIPTION: Demonstrates how to add external, non-reactive properties to stores using markRaw(). The example adds a router instance to every store.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { markRaw } from 'vue'\n// adapt this based on where your router is\nimport { router } from './router'\n\npinia.use(({ store }) => {\n  store.router = markRaw(router)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding New State to Stores in Pinia Plugins\nDESCRIPTION: Demonstrates how to add new state properties to a store that can be used during hydration and are properly reactive. The example shows adding a 'hasError' state.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toRef, ref } from 'vue'\n\npinia.use(({ store }) => {\n  if (!store.$state.hasOwnProperty('hasError')) {\n    const hasError = ref(false)\n    store.$state.hasError = hasError\n  }\n  store.hasError = toRef(store.$state, 'hasError')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Getters in Vue Component\nDESCRIPTION: Shows how to access and use Pinia store getters within a Vue component template.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/getters.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useCounterStore } from './counterStore'\n\nconst store = useCounterStore()\n</script>\n\n<template>\n  <p>Double count is {{ store.doubleCount }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing createPinia Function in TypeScript\nDESCRIPTION: Creates a Pinia instance for use in an application. It returns a Pinia object that can be used to manage stores.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **createPinia**(): [`Pinia`](../interfaces/pinia.Pinia.md)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Options to Pinia Stores\nDESCRIPTION: Demonstrates how to create and use custom options when defining stores, which can be later consumed by plugins. The example shows a 'debounce' option for actions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndefineStore('search', {\n  actions: {\n    searchContacts() {\n      // ...\n    },\n  },\n\n  // this will be read by a plugin later on\n  debounce: {\n    // debounce the action searchContacts by 300ms\n    searchContacts: 300,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using $subscribe and $onAction in Pinia Plugins with TypeScript\nDESCRIPTION: Shows how to use store subscription methods within a Pinia plugin.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npinia.use(({ store }) => {\n  store.$subscribe(() => {\n    // react to store changes\n  })\n  store.$onAction(() => {\n    // react to store actions\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Pinia Store in JavaScript\nDESCRIPTION: Example of defining a Pinia store with a 'count' state property. This snippet demonstrates the basic structure of a Pinia store definition.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/migration-0-0-7.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst useStore({\n  id: 'main',\n  state: () => ({ count: 0 })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Pinia Store in JavaScript\nDESCRIPTION: Example of defining a basic Pinia store with an 'id' and a 'state' function returning an object with a 'count' property.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-0-0-7.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst useStore({\n  id: 'main',\n  state: () => ({ count: 0 })\n})\n```\n\n----------------------------------------\n\nTITLE: Typing Pinia Plugins in TypeScript\nDESCRIPTION: Shows how to properly type a Pinia plugin function using TypeScript.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PiniaPluginContext } from 'pinia'\n\nexport function myPiniaPlugin(context: PiniaPluginContext) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Pinia Store Options in TypeScript\nDESCRIPTION: Demonstrates how to add new options for defineStore() by extending the DefineStoreOptionsBase interface. The example adds debounce functionality for store actions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'pinia'\n\ndeclare module 'pinia' {\n  export interface DefineStoreOptionsBase<S, Store> {\n    // allow defining a number of ms for any of the actions\n    debounce?: Partial<Record<keyof StoreActions<Store>, number>>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in Vue Setup\nDESCRIPTION: Basic example of using a Pinia store within a Vue component's setup function, which works automatically with SSR.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/index.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// this works because pinia knows what application is running inside of\n// `setup`\nconst main = useMainStore()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Behavior in Pinia Store Tests\nDESCRIPTION: Demonstrates how to customize the behavior of store actions in tests, allowing them to execute their actual implementation instead of being stubbed.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst wrapper = mount(Counter, {\n  global: {\n    plugins: [createTestingPinia({ stubActions: false })],\n  },\n})\n\nconst store = useSomeStore()\n\n// Now this call WILL execute the implementation defined by the store\nstore.someAction()\n\n// ...but it's still wrapped with a spy, so you can inspect calls\nexpect(store.someAction).toHaveBeenCalledTimes(1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Guard with Pinia Store\nDESCRIPTION: Example demonstrating how to use Pinia store within a Vue Router navigation guard for authentication checks. Store instantiation must occur within the guard function\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-vuex.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Pinia\nimport { useAuthUserStore } from '@/stores/auth-user'\n\nrouter.beforeEach((to, from, next) => {\n  // Must be used within the function!\n  const authUserStore = useAuthUserStore()\n  if (authUserStore.loggedIn) next()\n  else next('/login')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Pinia Plugin in Nuxt Environment\nDESCRIPTION: Example of creating a Nuxt plugin for Pinia that subscribes to store mutations and adds custom properties. Includes TypeScript annotations and demonstrates proper plugin initialization.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// plugins/myPiniaPlugin.ts\nimport { PiniaPluginContext } from 'pinia'\n\nfunction MyPiniaPlugin({ store }: PiniaPluginContext) {\n  store.$subscribe((mutation) => {\n    // react to store changes\n    console.log(`[🍍 ${mutation.storeId}]: ${mutation.type}.`)\n  })\n\n  // Note this has to be typed if you are using TS\n  return { creationTime: new Date() }\n}\n\nexport default defineNuxtPlugin(({ $pinia }) => {\n  $pinia.use(MyPiniaPlugin)\n})\n```\n\n----------------------------------------\n\nTITLE: Using mapWritableState Helper with Options API (JavaScript)\nDESCRIPTION: Demonstrates how to use the mapWritableState helper to map writable state properties in the Options API.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mapWritableState } from 'pinia'\nimport { useCounterStore } from '../stores/counter'\n\nexport default {\n  computed: {\n    // gives access to this.count inside the component and allows setting it\n    // this.count++\n    // same as reading from store.count\n    ...mapWritableState(useCounterStore, ['count']),\n    // same as above but registers it as this.myOwnName\n    ...mapWritableState(useCounterStore, {\n      myOwnName: 'count',\n    }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Plugins in Test Environment\nDESCRIPTION: Shows how to properly include Pinia plugins when setting up tests for components that use Pinia stores.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTestingPinia } from '@pinia/testing'\nimport { somePlugin } from '../src/stores/plugin'\n\n// inside some test\nconst wrapper = mount(Counter, {\n  global: {\n    plugins: [\n      createTestingPinia({\n        stubActions: false,\n        plugins: [somePlugin],\n      }),\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Mocked Store for Testing in TypeScript\nDESCRIPTION: Provides a utility function to create a typed mocked store for testing, allowing for proper type inference when mocking action return values.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Mock } from 'vitest'\nimport type { UnwrapRef } from 'vue'\nimport type { Store, StoreDefinition } from 'pinia'\n\nfunction mockedStore<TStoreDef extends () => unknown>(\n  useStore: TStoreDef\n): TStoreDef extends StoreDefinition<\n  infer Id,\n  infer State,\n  infer Getters,\n  infer Actions\n>\n  ? Store<\n      Id,\n      State,\n      Record<string, never>,\n      {\n        [K in keyof Actions]: Actions[K] extends (...args: any[]) => any\n          ? // 👇 depends on your testing framework\n            Mock<Actions[K]>\n          : Actions[K]\n      }\n    > & {\n      [K in keyof Getters]: UnwrapRef<Getters[K]>\n    }\n  : ReturnType<TStoreDef> {\n  return useStore() as any\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Pinia State Types in TypeScript\nDESCRIPTION: Shows how to add new state properties to Pinia stores by extending the PiniaCustomStateProperties interface. This allows typing of additional state properties that will be available in all stores.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'pinia'\n\ndeclare module 'pinia' {\n  export interface PiniaCustomStateProperties<S> {\n    hello: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Store Suffix in Pinia\nDESCRIPTION: Shows how to customize the suffix added to store names when using mapStores. It uses setMapStoreSuffix to modify or remove the default 'Store' suffix.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/options-api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPinia, setMapStoreSuffix } from 'pinia'\n\n// 完全删除后缀：this.user, this.cart\nsetMapStoreSuffix('')\n// this.user_store, this.cart_store (没关系，我不会批评你的)\nsetMapStoreSuffix('_store')\nexport const pinia = createPinia()\n```\n\n----------------------------------------\n\nTITLE: Accessing Other Stores in Actions\nDESCRIPTION: Demonstrates how to access and use other Pinia stores within action methods for cross-store operations.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAuthStore } from './auth-store'\n\nexport const useSettingsStore = defineStore('settings', {\n  state: () => ({\n    preferences: null,\n    // ...\n  }),\n  actions: {\n    async fetchUserPreferences() {\n      const auth = useAuthStore()\n      if (auth.isAuthenticated) {\n        this.preferences = await fetchPreferences()\n      } else {\n        throw new Error('User must be authenticated')\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pinia with Plugins for Testing in JavaScript\nDESCRIPTION: Shows how to set up Pinia with plugins for testing purposes, including creating an empty Vue app to ensure plugins are properly used.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setActivePinia, createPinia } from 'pinia'\nimport { createApp } from 'vue'\nimport { somePlugin } from '../src/stores/plugin'\n\n// you don't need to create one app per test\nconst app = createApp({})\nbeforeEach(() => {\n  const pinia = createPinia().use(somePlugin)\n  app.use(pinia)\n  setActivePinia(pinia)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia and Nuxt Module\nDESCRIPTION: Command to install Pinia and its Nuxt integration module using npm package manager.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/nuxt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i pinia @pinia/nuxt\n```\n\n----------------------------------------\n\nTITLE: Options API Integration with Getters\nDESCRIPTION: Shows how to use Pinia getters with Vue's Options API using mapState helper.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/getters.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mapState } from 'pinia'\nimport { useCounterStore } from '../stores/counter'\n\nexport default {\n  computed: {\n    ...mapState(useCounterStore, ['doubleCount']),\n    ...mapState(useCounterStore, {\n      myOwnName: 'doubleCount',\n      double: (store) => store.doubleCount,\n    }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pinia Instance for Vue 2\nDESCRIPTION: Code snippet showing how to create and install a Pinia instance in a Vue 2 application, using Pinia version 1 or earlier.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-0-0-7.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport { createPinia, PiniaVuePlugin } from 'pinia'\n\nconst pinia = createPinia()\nVue.use(PiniaVuePlugin)\nnew Vue({\n  el: '#app',\n  pinia,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Behavior in Pinia Store Tests\nDESCRIPTION: Demonstrates how to customize the behavior of actions in Pinia store tests by setting stubActions to false when creating the testing Pinia instance.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst wrapper = mount(Counter, {\n  global: {\n    plugins: [createTestingPinia({ stubActions: false })],\n  },\n})\n\nconst store = useSomeStore()\n\n// 现在，这个调用将由 store 定义的实现执行。\nstore.someAction()\n\n// ...但它仍然被一个 spy 包装着，所以你可以检查调用\nexpect(store.someAction).toHaveBeenCalledTimes(1)\n```\n\n----------------------------------------\n\nTITLE: Using Pinia with onServerPrefetch\nDESCRIPTION: Shows how to use Pinia store within the onServerPrefetch composable for data fetching during SSR.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/index.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst store = useStore()\nonServerPrefetch(async () => {\n  // ✅ this will work\n  await store.fetchData()\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Types for New Store Properties in TypeScript\nDESCRIPTION: Demonstrates how to extend the PiniaCustomProperties interface to add types for new properties added to stores by plugins.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'pinia'\n\ndeclare module 'pinia' {\n  export interface PiniaCustomProperties {\n    set hello(value: string | Ref<string>)\n    get hello(): string\n    simpleNumber: number\n    router: Router\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Stores in Pinia Plugins\nDESCRIPTION: Illustrates different ways to add properties to stores using Pinia plugins, including returning an object and directly setting properties on the store.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npinia.use(() => ({ hello: 'world' }))\n\npinia.use(({ store }) => {\n  store.hello = 'world'\n  // make sure your bundler handles this. webpack and vite should do it by default\n  if (process.env.NODE_ENV === 'development') {\n    // add any keys you set on the store\n    store._customProperties.add('hello')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking Getters in Pinia Store Tests\nDESCRIPTION: Demonstrates how to mock getters in Pinia store tests by directly assigning values to getter properties.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { createTestingPinia } from '@pinia/testing'\n\nconst useCounter = defineStore('counter', {\n  state: () => ({ n: 1 }),\n  getters: {\n    double: (state) => state.n * 2,\n  },\n})\n\nconst pinia = createTestingPinia()\nconst counter = useCounter(pinia)\n\ncounter.double = 3 // 🪄 getter 仅在测试中可被重写\n\n// 设置为 undefined，以重置默认行为\n// @ts-expect-error: usually it's a number\ncounter.double = undefined\ncounter.double // 2 (=1 x 2)\n```\n\n----------------------------------------\n\nTITLE: Watching Entire Pinia State (JavaScript)\nDESCRIPTION: Demonstrates how to watch the entire Pinia state using Vue's watch function for global state persistence.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(\n  pinia.state,\n  (state) => {\n    // persist the whole state to the local storage whenever it changes\n    localStorage.setItem('piniaState', JSON.stringify(state))\n  },\n  { deep: true }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Types for New Store Definition Options in TypeScript\nDESCRIPTION: Demonstrates how to extend the DefineStoreOptionsBase interface to add types for new options when defining stores.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'pinia'\n\ndeclare module 'pinia' {\n  export interface DefineStoreOptionsBase<S, Store> {\n    debounce?: Partial<Record<keyof StoreActions<Store>, number>>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pinia State Hydration Setup\nDESCRIPTION: Example of setting up state hydration for Pinia using devalue library for secure state serialization.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/index.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport devalue from 'devalue'\nimport { createPinia } from 'pinia'\n// retrieve the rootState server side\nconst pinia = createPinia()\nconst app = createApp(App)\napp.use(router)\napp.use(pinia)\n\n// after rendering the page, the root state is built and can be read directly\n// on `pinia.state.value`.\n\n// serialize, escape (VERY important if the content of the state can be changed\n// by the user, which is almost always the case), and place it somewhere on\n// the page, for example, as a global variable.\ndevalue(pinia.state.value)\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia using package managers\nDESCRIPTION: Commands to install Pinia using different package managers like npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pinia\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add pinia\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add pinia\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add pinia\n```\n\n----------------------------------------\n\nTITLE: Defining PiniaVuePlugin Variable in TypeScript\nDESCRIPTION: Defines a Vue 2 plugin that must be installed for Pinia to work. It provides an example of how to use the plugin in a Vue 2 application.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **PiniaVuePlugin**: `Plugin`\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Pinia Getter\nDESCRIPTION: Shows how to define a basic getter in a Pinia store using arrow function syntax. The getter calculates a doubled count value based on the store's state.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/getters.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    count: 0,\n  }),\n  getters: {\n    doubleCount: (state) => state.count * 2,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia State Serialization with vite-ssr\nDESCRIPTION: Shows how to set up state serialization and deserialization for Pinia when using vite-ssr. It uses the transformState option to safely serialize the state on the server and hydrate it on the client.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/index.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport devalue from '@nuxt/devalue'\n\nexport default viteSSR(\n  App,\n  {\n    routes,\n    transformState(state) {\n      return import.meta.env.SSR ? devalue(state) : state\n    },\n  },\n  ({ initialState }) => {\n    // ...\n    if (import.meta.env.SSR) {\n      // 序列化并设置为 window.__INITIAL_STATE__\n      initialState.pinia = pinia.state.value\n    } else {\n      // 在客户端，我们恢复 state\n      pinia.state.value = initialState.pinia\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating State Access in Pinia Store\nDESCRIPTION: Demonstration of the change in how state properties are accessed in Pinia, moving from 'store.state.property' to direct 'store.property' access.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-0-0-7.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = useStore()\n\n-store.state.count++\n+store.count.++\n```\n\n----------------------------------------\n\nTITLE: Handling SSR with Composables in Option Stores\nDESCRIPTION: Demonstrates how to use composables in option stores with server-side rendering by implementing a hydrate function. This example uses useLocalStorage for user authentication.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composables.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { useLocalStorage } from '@vueuse/core'\n\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    user: useLocalStorage('pinia/auth/login', 'bob'),\n  }),\n\n  hydrate(state, initialState) {\n    // in this case we can completely ignore the initial state since we\n    // want to read the value from the browser\n    state.user = useLocalStorage('pinia/auth/login', 'bob')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Store Action Usage in Vue Component\nDESCRIPTION: Example of using callOnce to manage store actions in a Vue component setup\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst store = useStore()\n// we could also extract the data, but it's already present in the store\nawait callOnce('user', () => store.fetchUser())\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Pinia in serverPrefetch\nDESCRIPTION: Demonstrates accessing Pinia store within a component's serverPrefetch hook using the $pinia instance property.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  serverPrefetch() {\n    const store = useStore(this.$pinia)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Managing SSR with Composables in Setup Stores\nDESCRIPTION: Shows how to handle server-side rendering with composables in setup stores using the skipHydrate helper. This example uses useEyeDropper and useLocalStorage composables.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composables.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore, skipHydrate } from 'pinia'\nimport { useEyeDropper, useLocalStorage } from '@vueuse/core'\n\nexport const useColorStore = defineStore('colors', () => {\n  const { isSupported, open, sRGBHex } = useEyeDropper()\n  const lastColor = useLocalStorage('lastColor', sRGBHex)\n  // ...\n  return {\n    lastColor: skipHydrate(lastColor), // Ref<string>\n    open, // Function\n    isSupported, // boolean (not even reactive)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Store Action with Navigation Mode\nDESCRIPTION: Example of using callOnce with navigation mode for store actions\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst store = useStore()\nawait callOnce('user', () => store.fetchUser(), { mode: 'navigation' })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mapping Stores with mapStores in Vue.js\nDESCRIPTION: Demonstrates how to use mapStores to access multiple Pinia stores in a Vue component using the Options API. It shows how to map entire stores and use them in computed properties and methods.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/options-api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mapStores } from 'pinia'\n\n// 给出具有以下 id 的两个 store\nconst useUserStore = defineStore('user', {\n  // ...\n})\nconst useCartStore = defineStore('cart', {\n  // ...\n})\n\nexport default {\n  computed: {\n    // 注意，我们不是在传递一个数组，而是一个接一个的 store。\n    // 可以 id+'Store' 的形式访问每个 store 。\n    ...mapStores(useCartStore, useUserStore),\n  },\n\n  methods: {\n    async buyStuff() {\n      // 可以在任何地方使用他们！\n      if (this.userStore.isAuthenticated()) {\n        await this.cartStore.buy()\n        this.$router.push('/purchased')\n      }\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store Outside Setup with Router\nDESCRIPTION: Example showing how to use Pinia store outside of setup() by passing the pinia instance explicitly, demonstrated in a router guard.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pinia = createPinia()\nconst app = createApp(App)\n\napp.use(router)\napp.use(pinia)\n\nrouter.beforeEach((to) => {\n  // ✅ This will work make sure the correct store is used for the\n  // current running app\n  const main = useMainStore(pinia)\n\n  if (to.meta.requiresAuth && !main.isLoggedIn) return '/login'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Pinia Plugin in JavaScript\nDESCRIPTION: Demonstrates how to create a simple Pinia plugin that adds a static property to all stores.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPinia } from 'pinia'\n\nfunction SecretPiniaPlugin() {\n  return { secret: 'the cake is a lie' }\n}\n\nconst pinia = createPinia()\npinia.use(SecretPiniaPlugin)\n\n// In another file\nconst store = useStore()\nstore.secret // 'the cake is a lie'\n```\n\n----------------------------------------\n\nTITLE: Creating Mocked Store with Typed Actions in TypeScript\nDESCRIPTION: Defines a helper function to create a mocked store with correctly typed actions for testing, using Vitest's Mock type.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Mock } from 'vitest'\nimport type { Store, StoreDefinition } from 'pinia'\n\nfunction mockedStore<TStoreDef extends () => unknown>(\n  useStore: TStoreDef\n): TStoreDef extends StoreDefinition<\n  infer Id,\n  infer State,\n  infer Getters,\n  infer Actions\n>\n  ? Store<\n      Id,\n      State,\n      Getters,\n      {\n        [K in keyof Actions]: Actions[K] extends (\n          ...args: infer Args\n        ) => infer ReturnT\n          ? // 👇 depends on your testing framework\n            Mock<Args, ReturnT>\n          : Actions[K]\n      }\n    >\n  : ReturnType<TStoreDef> {\n  return useStore() as any\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store Outside of Setup in Vue Router\nDESCRIPTION: Shows how to use a Pinia store outside of the setup function, specifically in a Vue Router navigation guard. It requires passing the Pinia instance to the useStore function.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pinia = createPinia()\nconst app = createApp(App)\n\napp.use(router)\napp.use(pinia)\n\nrouter.beforeEach((to) => {\n  // ✅这会正常工作，因为它确保了正确的 store 被用于\n  // 当前正在运行的应用\n  const main = useMainStore(pinia)\n\n  if (to.meta.requiresAuth && !main.isLoggedIn) return '/login'\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Stores with Pinia Plugins in JavaScript\nDESCRIPTION: Demonstrates different ways to add properties to stores using Pinia plugins, including returning an object and directly setting on the store.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npinia.use(() => ({ hello: 'world' }))\n\npinia.use(({ store }) => {\n  store.hello = 'world'\n  if (process.env.NODE_ENV === 'development') {\n    store._customProperties.add('hello')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Mocked Store in Tests with TypeScript\nDESCRIPTION: Demonstrates how to use the mockedStore helper function to get a correctly typed store for testing, allowing for mocking of action return values.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockedStore } from './mockedStore'\nimport { useSomeStore } from '@/stores/myStore'\n\nconst store = mockedStore(useSomeStore)\n// typed!\nstore.someAction.mockResolvedValue('some value')\n```\n\n----------------------------------------\n\nTITLE: Mapping State and Getters in Vue Components with mapState\nDESCRIPTION: The mapState function allows using a store's state and getters in a Vue component without the composition API. It generates an object to be spread into the component's computed properties.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    // Other computed properties\n    // useCounterStore has a state property 'count' and a getter 'double'\n    ...mapState(useCounterStore, {\n      n: 'count',\n      triple: (store) => store.n * 3,\n      custom(store) {\n        return this.someComponentValue + store.n\n      },\n      doubleN: 'double',\n    }),\n  },\n\n  created() {\n    this.n // 2\n    this.doubleN // 4\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in Vue Component Setup\nDESCRIPTION: Demonstrates how to use a Pinia store within a Vue component's setup function, which is SSR-friendly out of the box.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/index.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// 这是可行的，\n// 因为 pinia 知道在 `setup` 中运行的是什么程序。\nconst main = useMainStore()\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Custom Store Suffix in Pinia\nDESCRIPTION: Demonstrates how to configure TypeScript when customizing the store suffix in Pinia. It shows how to declare a module augmentation for proper type inference.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/options-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPinia, setMapStoreSuffix } from 'pinia'\n\nsetMapStoreSuffix('') // 完全删除后缀\nexport const pinia = createPinia()\n\ndeclare module 'pinia' {\n  export interface MapStoresCustomization {\n    // 设置成和上面一样的值\n    suffix: ''\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New State to Stores with Pinia Plugins in JavaScript\nDESCRIPTION: Shows how to properly add new state properties to stores using Pinia plugins, ensuring they work with SSR and devtools.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { toRef, ref } from 'vue'\n\npinia.use(({ store }) => {\n  if (!store.$state.hasOwnProperty('hasError')) {\n    const hasError = ref(false)\n    store.$state.hasError = hasError\n  }\n  store.hasError = toRef(store.$state, 'hasError')\n})\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Vue Component with Pinia Store in JavaScript\nDESCRIPTION: Sets up a test environment for a Vue component using a Pinia store. Creates a testing Pinia instance and demonstrates how to interact with the store in tests.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from '@vue/test-utils'\nimport { createTestingPinia } from '@pinia/testing'\n// 引入任何你想要测试的 store\nimport { useSomeStore } from '@/stores/myStore'\n\nconst wrapper = mount(Counter, {\n  global: {\n    plugins: [createTestingPinia()],\n  },\n})\n\nconst store = useSomeStore() // // 使用 pinia 的测试实例!\n\n// 可直接操作 state\nstore.name = 'my new name'\n// 也可以通过 patch 来完成\nstore.$patch({ name: 'new name' })\nexpect(store.name).toBe('new name')\n\n// action 默认是存根的(stubbed)，意味着它们默认不执行其代码。\n// 请看下面的内容来定制这一行为。\nstore.someAction()\n\nexpect(store.someAction).toHaveBeenCalledTimes(1)\nexpect(store.someAction).toHaveBeenLastCalledWith()\n```\n\n----------------------------------------\n\nTITLE: Nuxt Module Configuration\nDESCRIPTION: Configuration to enable Pinia module in Nuxt application\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nexport default defineNuxtConfig({\n  // ... other options\n  modules: [\n    // ...\n    '@pinia/nuxt',\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding External Properties to Stores with Pinia Plugins in JavaScript\nDESCRIPTION: Demonstrates how to add external, non-reactive properties to stores using markRaw() in a Pinia plugin.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { markRaw } from 'vue'\nimport { router } from './router'\n\npinia.use(({ store }) => {\n  store.router = markRaw(router)\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming Pinia Store Properties\nDESCRIPTION: Examples of renaming various Pinia store properties by adding '$' prefix, including patch, reset, and id.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-0-0-7.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = useStore()\n-store.patch({ count: 0 })\n+store.$patch({ count: 0 })\n\n-store.reset()\n+store.$reset()\n\n-store.id\n+store.$id\n```\n\n----------------------------------------\n\nTITLE: Client-side Pinia State Hydration\nDESCRIPTION: Shows how to hydrate Pinia state on the client side using a globally serialized state object.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst pinia = createPinia()\nconst app = createApp(App)\napp.use(pinia)\n\n// `isClient` depends on the environment, e.g. on Nuxt it's `import.meta.client`\nif (isClient) {\n  pinia.state.value = JSON.parse(window.__pinia)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia in Nuxt Project\nDESCRIPTION: Command to add Pinia module to a Nuxt project using nuxi\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add pinia\n```\n\n----------------------------------------\n\nTITLE: Typing Complex Custom Properties in Pinia\nDESCRIPTION: Demonstrates how to use generics with PiniaCustomProperties to type more complex custom properties that depend on store-specific types.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'pinia'\n\ndeclare module 'pinia' {\n  export interface PiniaCustomProperties<Id, S, G, A> {\n    $options: {\n      id: Id\n      state?: () => S\n      getters?: G\n      actions?: A\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt Configuration\nDESCRIPTION: Configuration updates for Nuxt.js to use the new Pinia package in both JavaScript and TypeScript projects.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nmodule.exports {\n  buildModules: [\n    '@nuxtjs/composition-api/module',\n    'pinia/nuxt', // [!code --]\n    '@pinia/nuxt', // [!code ++]\n  ],\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": [\n    // ...\n    \"pinia/nuxt/types\" // [!code --]\n    \"@pinia/nuxt\" // [!code ++]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: AsyncData with Store Action\nDESCRIPTION: Example of using store actions within setup script and asyncData.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst store = useStore()\nconst { data } = await useAsyncData('user', () => store.fetchUser())\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Getter Implementation with Return Type\nDESCRIPTION: Shows getter implementation in TypeScript with explicit return type definition when using this context.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/getters.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    count: 0,\n  }),\n  getters: {\n    doubleCount(state) {\n      return state.count * 2\n    },\n    doublePlusOne(): number {\n      return this.doubleCount + 1\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia via NPM\nDESCRIPTION: Command to install Pinia package using npm, yarn or pnpm package managers.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pinia\n```\n\n----------------------------------------\n\nTITLE: Hydrating Pinia State for SSR\nDESCRIPTION: Illustrates the process of serializing and escaping the Pinia state on the server-side, and then hydrating it on the client-side. It uses the @nuxt/devalue package for safe serialization.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/index.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport devalue from '@nuxt/devalue'\nimport { createPinia } from 'pinia'\n// 检索服务端的 rootState\nconst pinia = createPinia()\nconst app = createApp(App)\napp.use(router)\napp.use(pinia)\n\n// 渲染页面后，rootState 被建立，\n// 可以直接在 `pinia.state.value`上读取。\n\n// 序列化，转义(如果 state 的内容可以被用户改变，这点就非常重要，几乎都是这样的)\n// 并将其放置在页面的某处\n// 例如，作为一个全局变量。\ndevalue(pinia.state.value)\n```\n\n----------------------------------------\n\nTITLE: Component Implementation with Pinia Store\nDESCRIPTION: Shows how to implement a Vue component using a Pinia store, demonstrating direct store imports, computed properties, and returning the entire store to the template for easy access to all state and actions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-vuex.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// Pinia\nimport { defineComponent, computed } from 'vue'\nimport { useAuthUserStore } from '@/stores/auth-user'\n\nexport default defineComponent({\n  setup () {\n    const authUserStore = useAuthUserStore()\n\n    const firstName = computed(() => authUserStore.firstName)\n    const fullName = computed(() => authUserStore.fullName)\n\n    return {\n      // you can also access the whole store in your component by returning it\n      authUserStore,\n      firstName,\n      fullName\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Store Generic in Pinia\nDESCRIPTION: Shows how to update the generic Store type to StoreGeneric for better type safety in Pinia. This change allows for stricter typing when defining stores without explicitly specifying state, getters, or actions.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n-function takeAnyStore(store: Store) {}\n+function takeAnyStore(store: StoreGeneric) {}\n```\n\n----------------------------------------\n\nTITLE: Defining _GettersTree Type in TypeScript\nDESCRIPTION: Defines a type for the getters object in a Pinia store. It maps string keys to functions that take the unwrapped state as an argument and return any value.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **_GettersTree**<`S`>: `Record`<`string`, (`state`: `UnwrapRef`<`S`> & `UnwrapRef`<[`PiniaCustomStateProperties`](../interfaces/pinia.PiniaCustomStateProperties.md)<`S`>>) => `any` | () => `any`>\n```\n\n----------------------------------------\n\nTITLE: Subscribing with Immediate Flush in Pinia (TypeScript)\nDESCRIPTION: Demonstrates how to subscribe to state changes with immediate flush using the flush option in Pinia.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncartStore.$subscribe((state) => {\n  // persist the whole state to the local storage whenever it changes\n  localStorage.setItem('cart', JSON.stringify(state))\n}, { flush: 'sync' })\n```\n\n----------------------------------------\n\nTITLE: Mocking Getters in Pinia Store Tests\nDESCRIPTION: Demonstrates how to mock getter values in Pinia store tests and reset them to their default behavior.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { createTestingPinia } from '@pinia/testing'\n\nconst useCounterStore = defineStore('counter', {\n  state: () => ({ n: 1 }),\n  getters: {\n    double: (state) => state.n * 2,\n  },\n})\n\nconst pinia = createTestingPinia()\nconst counter = useCounterStore(pinia)\n\ncounter.double = 3 // 🪄 getters are writable only in tests\n\n// set to undefined to reset the default behavior\n// @ts-expect-error: usually it's a number\ncounter.double = undefined\ncounter.double // 2 (=1 x 2)\n```\n\n----------------------------------------\n\nTITLE: Defining _ExtractStateFromSetupStore_Keys Type in TypeScript\nDESCRIPTION: Defines a type to extract keys from a setup store that are not methods or computed refs. This type is used internally for IDE refactoring support.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **_ExtractStateFromSetupStore_Keys**<`SS`>: keyof { [K in keyof SS as SS[K] extends _Method | ComputedRef ? never : K]: any }\n```\n\n----------------------------------------\n\nTITLE: Customizing Initial State for Pinia Stores in Tests\nDESCRIPTION: Shows how to set the initial state of Pinia stores when creating a testing Pinia instance for component tests.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// somewhere in your test\nconst wrapper = mount(Counter, {\n  global: {\n    plugins: [\n      createTestingPinia({\n        initialState: {\n          counter: { n: 20 }, // start the counter at 20 instead of 0\n        },\n      }),\n    ],\n  },\n})\n\nconst store = useSomeStore() // uses the testing pinia!\nstore.n // 20\n```\n\n----------------------------------------\n\nTITLE: Detaching State Subscriptions in Pinia (Vue 3 Setup)\nDESCRIPTION: Shows how to create a detached state subscription that persists even after component unmounting in Pinia.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/state.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nconst someStore = useSomeStore()\n\n// this subscription will be kept even after the component is unmounted\nsomeStore.$subscribe(callback, { detached: true })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Pinia Instance for Vue 2\nDESCRIPTION: Example of creating and installing a Pinia instance in a Vue 2 application. This is necessary for Pinia versions <= 1.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/migration-0-0-7.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport { createPinia, PiniaVuePlugin } from 'pinia'\n\nconst pinia = createPinia()\nVue.use(PiniaVuePlugin)\nnew Vue({\n  el: '#app',\n  pinia,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Updating State Access in Pinia Store\nDESCRIPTION: Demonstration of how to update state access in a Pinia store after migration. The new version allows direct access to state properties without using the 'state' object.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/migration-0-0-7.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = useStore()\n\n-store.state.count++\n+store.count.++\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-imports for Pinia in Nuxt\nDESCRIPTION: Demonstrates how to set up automatic imports for Pinia functions in a Nuxt project. This configuration allows for easy use of Pinia stores without explicit imports.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/interfaces/pinia_nuxt.ModuleOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nautoImports: [\n // automatically import `defineStore`\n 'defineStore',\n // automatically import `defineStore` as `definePiniaStore`\n ['defineStore', 'definePiniaStore',\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Types for New State Properties in TypeScript\nDESCRIPTION: Shows how to extend the PiniaCustomStateProperties interface to add types for new state properties added by plugins.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'pinia'\n\ndeclare module 'pinia' {\n  export interface PiniaCustomStateProperties<S> {\n    hello: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Whole Store State in Pinia\nDESCRIPTION: Example of how to access and update the entire store state in Pinia after migration. The '$state' property is used instead of 'state'.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/migration-0-0-7.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n-store.state = newState\n+store.$state = newState\n```\n\n----------------------------------------\n\nTITLE: Installing @pinia/testing Package via npm\nDESCRIPTION: Command to install the @pinia/testing package for unit testing components that use Pinia stores.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @pinia/testing\n```\n\n----------------------------------------\n\nTITLE: Action Subscription Implementation\nDESCRIPTION: Demonstrates how to subscribe to Pinia store actions to track their execution and handle results.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = someStore.$onAction(\n  ({\n    name, // action 名称\n    store, // store 实例，类似 `someStore`\n    args, // 传递给 action 的参数数组\n    after, // 在 action 返回或解决后的钩子\n    onError, // action 抛出或拒绝的钩子\n  }) => {\n    const startTime = Date.now()\n    console.log(`Start \"${name}\" with params [${args.join(', ')}].`)\n\n    after((result) => {\n      console.log(\n        `Finished \"${name}\" after ${\n          Date.now() - startTime\n        }ms.\\nResult: ${result}.`\n      )\n    })\n\n    onError((error) => {\n      console.warn(\n        `Failed \"${name}\" after ${Date.now() - startTime}ms.\\nError: ${error}.`\n      )\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining _StoreWithState Interface in TypeScript\nDESCRIPTION: Defines the _StoreWithState interface with generic type parameters for ID, state, getters, and actions. It extends StoreProperties and includes methods for store management.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/interfaces/pinia._StoreWithState.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface _StoreWithState<Id extends string, S extends StateTree, G, A> extends StoreProperties<Id> {\n  $id: Id;\n  $state: UnwrapRef<S> & PiniaCustomStateProperties<S>;\n  _customProperties: Set<string>;\n  $dispose(): void;\n  $onAction(callback: StoreOnActionListener<Id, S, G, A>, detached?: boolean): () => void;\n  $patch(partialState: _DeepPartial<UnwrapRef<S>>): void;\n  $patch<F extends (state: UnwrapRef<S>) => any>(stateMutator: ReturnType<F> extends Promise<any> ? never : F): void;\n  $reset(): void;\n  $subscribe(callback: SubscriptionCallback<S>, options?: { detached?: boolean } & WatchOptions<boolean>): () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SSR Configuration for Pinia\nDESCRIPTION: Example of updating server-side rendering (SSR) configuration for Pinia in Vue 2. This includes removing the PiniaSsr plugin and using the new pinia instance for state management.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/migration-0-0-7.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// entry-server.js\n-import { getRootState, PiniaSsr } from 'pinia',\n+import { createPinia, PiniaVuePlugin } from 'pinia',\n\n\n-// install plugin to automatically use correct context in setup and onServerPrefetch\n-Vue.use(PiniaSsr);\n+Vue.use(PiniaVuePlugin)\n\n export default context => {\n+  const pinia = createPinia()\n   const app = new Vue({\n     // other options\n+    pinia\n   })\n\n   context.rendered = () => {\n     // pass state to context\n-    context.piniaState = getRootState(context.req)\n+    context.piniaState = pinia.state.value\n   };\n\n-   return { app }\n+   return { app, pinia }\n }\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia Store in Vue Single-Page Application\nDESCRIPTION: Demonstrates the correct order of initializing a Pinia store in a Vue single-page application. It shows that the store must be created after the Pinia plugin is installed.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/outside-component-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useUserStore } from '@/stores/user'\nimport { createPinia } from 'pinia'\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n// ❌  fails because it's called before the pinia is created\nconst userStore = useUserStore()\n\nconst pinia = createPinia()\nconst app = createApp(App)\napp.use(pinia)\n\n// ✅ works because the pinia instance is now active\nconst userStore = useUserStore()\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia and Nuxt Integration Package\nDESCRIPTION: Commands for installing Pinia and its Nuxt integration package using yarn or npm package managers.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add pinia @pinia/nuxt\n# 或者使用 npm\nnpm install pinia @pinia/nuxt\n```\n\n----------------------------------------\n\nTITLE: Implementing acceptHMRUpdate Function in TypeScript\nDESCRIPTION: Creates an 'accept' function for Hot Module Replacement (HMR) in Vite applications. It takes a store definition and the hot module as parameters.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **acceptHMRUpdate**(`initialUseStore`, `hot`): (`newModule`: `any`) => `any`\n```\n\n----------------------------------------\n\nTITLE: Updating Server-Side Rendering for Pinia in Vue 2\nDESCRIPTION: Changes required for server-side rendering when migrating Pinia in a Vue 2 application, including removal of PiniaSsr plugin and updates to state handling.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-0-0-7.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// entry-server.js\n-import { getRootState, PiniaSsr } from 'pinia',\n+import { createPinia, PiniaVuePlugin } from 'pinia',\n\n\n-// install plugin to automatically use correct context in setup and onServerPrefetch\n-Vue.use(PiniaSsr);\n+Vue.use(PiniaVuePlugin)\n\n export default context => {\n+  const pinia = createPinia()\n   const app = new Vue({\n     // other options\n+    pinia\n   })\n\n   context.rendered = () => {\n     // pass state to context\n-    context.piniaState = getRootState(context.req)\n+    context.piniaState = pinia.state.value\n   };\n\n-   return { app }\n+   return { app, pinia }\n }\n```\n\n----------------------------------------\n\nTITLE: Nuxt 2 Module Configuration\nDESCRIPTION: Configuration for using Pinia with Nuxt 2 without bridge.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nexport default {\n  // ... 其他配置\n  buildModules: [\n    '@nuxtjs/composition-api/module',\n    '@pinia/nuxt',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating defineStore Syntax in TypeScript for Pinia v3\nDESCRIPTION: This snippet demonstrates the change in the defineStore function syntax from v2 to v3. The deprecated object syntax with an 'id' property is replaced by passing the store name as the first argument.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v2-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefineStore({ // [!code --]\n  id: 'storeName', // [!code --]\ndefineStore('storeName', { // [!code ++]\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Setup with Options API\nDESCRIPTION: Shows how to use Pinia stores in components using the setup() method with Options API.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCounterStore } from '../stores/counter'\nexport default defineComponent({\n  setup() {\n    const counterStore = useCounterStore()\n    return { counterStore }\n  },\n  methods: {\n    incrementAndPrint() {\n      this.counterStore.increment()\n      console.log('New Count:', this.counterStore.count)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Nuxt 2 Module Configuration\nDESCRIPTION: Configuration for using Pinia with Nuxt 2 without bridge\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nexport default {\n  // ... other options\n  buildModules: [\n    // Nuxt 2 only:\n    // https://composition-api.nuxtjs.org/getting-started/setup#quick-start\n    '@nuxtjs/composition-api/module',\n    '@pinia/nuxt',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vite Vue Project\nDESCRIPTION: Commands for installing dependencies and starting the development server using either npm or yarn package managers. Requires Node.js v12 or higher.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/online-playground/src/download/template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run dev\n\n# if using yarn:\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Plugins in Tests\nDESCRIPTION: Shows how to include Pinia plugins when creating a testing Pinia instance for component tests.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTestingPinia } from '@pinia/testing'\nimport { somePlugin } from '../src/stores/plugin'\n\n// 某些测试\nconst wrapper = mount(Counter, {\n  global: {\n    plugins: [\n      createTestingPinia({\n        stubActions: false,\n        plugins: [somePlugin],\n      }),\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Generic Store Type References\nDESCRIPTION: TypeScript code showing the migration from GenericStore to StoreGeneric type references in function parameters.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction takeAnyStore(store: Store) {} // [!code --]\nfunction takeAnyStore(store: StoreGeneric) {} // [!code ++]\n\nfunction takeAnyStore(store: GenericStore) {} // [!code --]\nfunction takeAnyStore(store: StoreGeneric) {} // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Using Actions in Vue Components\nDESCRIPTION: Example of using Pinia store actions within Vue components using the Composition API.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst store = useCounterStore()\n// call the action as a method of the store\nstore.randomizeCounter()\n</script>\n\n<template>\n  <!-- Even on the template -->\n  <button @click=\"store.randomizeCounter()\">Randomize</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing @pinia/testing Package via npm\nDESCRIPTION: Command to install the @pinia/testing package as a development dependency for testing Pinia stores.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @pinia/testing\n```\n\n----------------------------------------\n\nTITLE: Nuxt Module Configuration\nDESCRIPTION: Configuration for adding Pinia module to Nuxt application in nuxt.config.js file.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nexport default defineNuxtConfig({\n  // ... 其他配置\n  modules: [\n    // ...\n    '@pinia/nuxt',\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Vue Composition API\nDESCRIPTION: Commands to install the required version of @vue/composition-api for Pinia v2 compatibility.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @vue/composition-api@latest\n# or with yarn\nyarn add @vue/composition-api@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Pinia Instance for Vue 3\nDESCRIPTION: Code snippet demonstrating how to create and install a Pinia instance in a Vue 3 application, using Pinia version 2 or later.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-0-0-7.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createPinia, PiniaVuePlugin } from 'pinia'\nimport App from './App.vue'\n\nconst pinia = createPinia()\ncreateApp(App).use(pinia).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Using Store in AsyncData\nDESCRIPTION: Example of accessing Pinia store outside setup() function in asyncData hook.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStore } from '~/stores/myStore'\n\nexport default {\n  asyncData({ $pinia }) {\n    const store = useStore($pinia)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Feature: Setup Store Definition Types\nDESCRIPTION: Adding TypeScript type definitions for setup store definitions and improving getActivePinia warning messages.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Configuring HMR for Pinia Store in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up Hot Module Replacement for a Pinia store named 'auth'. It imports necessary functions from Pinia, defines the store, and sets up HMR acceptance. This configuration allows for real-time updates of the store without page reloads.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/hot-module-replacement.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// auth.js\nimport { defineStore, acceptHMRUpdate } from 'pinia'\n\nconst useAuth = defineStore('auth', {\n  // 配置...\n})\n\n// 确保传递正确的 store 声明，本例中为 `useAuth`\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useAuth, import.meta.hot))\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Store Properties in Pinia\nDESCRIPTION: Demonstration of renaming store properties in Pinia after migration. All store properties are now prefixed with '$' to avoid conflicts with user-defined properties.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/migration-0-0-7.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = useStore()\n-store.patch({ count: 0 })\n+store.$patch({ count: 0 })\n\n-store.reset()\n+store.$reset()\n\n-store.id\n+store.$id\n```\n\n----------------------------------------\n\nTITLE: Auto-imports Configuration\nDESCRIPTION: Configuration for enabling Pinia auto-imports in Nuxt application.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nexport default defineNuxtConfig({\n  // ... 其他配置\n  modules: [\n    // ...\n    [\n      '@pinia/nuxt',\n      {\n        autoImports: [\n          'defineStore',\n          ['defineStore', 'definePiniaStore'],\n        ],\n      },\n    ],\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Pinia Store Suffix\nDESCRIPTION: Example of customizing the store suffix using setMapStoreSuffix() to modify how stores are referenced in components.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/options-api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPinia, setMapStoreSuffix } from 'pinia'\n\n// completely remove the suffix: this.user, this.cart\nsetMapStoreSuffix('')\n// this.user_store, this.cart_store (it's okay, I won't judge you)\nsetMapStoreSuffix('_store')\nexport const pinia = createPinia()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Fix: Store Return Types\nDESCRIPTION: Fixes type definitions for storeToRefs state return types and mapHelpers with getters types.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Updating DefineStoreOptions Type\nDESCRIPTION: TypeScript code demonstrating the renaming of DefineStoreOptions to DefineStoreOptionsBase for plugin development.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'pinia' {\n  export interface DefineStoreOptions<S, Store> { // [!code --]\n  export interface DefineStoreOptionsBase<S, Store> { // [!code ++]\n    debounce?: {\n      [k in keyof StoreActions<Store>]?: number\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying createSpy Function for Different Test Frameworks\nDESCRIPTION: Shows how to specify the createSpy function when using different testing frameworks or configurations with Pinia testing utilities.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// NOTE: not needed with `globals: true`\nimport { vi } from 'vitest'\n\ncreateTestingPinia({\n  createSpy: vi.fn,\n})\n```\n\n----------------------------------------\n\nTITLE: Webpack 4 Configuration for MJS Files\nDESCRIPTION: JavaScript configuration to handle .mjs files in webpack 4 environments for Vue CLI and manual webpack setups.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// vue.config.js\nmodule.exports = {\n  configureWebpack: {\n    module: {\n      rules: [\n        {\n          test: /\\.mjs$/,\n          include: /node_modules/,\n          type: 'javascript/auto',\n        },\n      ],\n    },\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.mjs$/,\n        include: /node_modules/,\n        type: 'javascript/auto',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pinia with Plugins for Testing in JavaScript\nDESCRIPTION: Demonstrates how to set up Pinia with plugins for testing by creating a mock Vue application and installing Pinia with plugins before each test.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setActivePinia, createPinia } from 'pinia'\nimport { createApp } from 'vue'\nimport { somePlugin } from '../src/stores/plugin'\n\n// 和前面一样的代码...\n\n// 测试前你不需要创建应用\nconst app = createApp({})\nbeforeEach(() => {\n  const pinia = createPinia().use(somePlugin)\n  app.use(pinia)\n  setActivePinia(pinia)\n})\n```\n\n----------------------------------------\n\nTITLE: Updating SSR Hydration Store Options API\nDESCRIPTION: Breaking change that modifies how store hydration works with options API. Now passes storeState directly instead of store instance for direct state modification.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n defineStore('main', {\n   state: () => ({\n     customRef: useLocalStorage('key', 0)\n   }),\n-  hydrate(store) {\n-    store.$state.customRef = useLocalStorage('key', 0)\n+  hydrate(storeState) {\n+    storeState.customRef = useLocalStorage('key', 0)\n   }\n })\n```\n\n----------------------------------------\n\nTITLE: Creating Pinia Instance for Vue 3\nDESCRIPTION: Example of creating and installing a Pinia instance in a Vue 3 application. This is necessary for Pinia versions >= 2.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/migration-0-0-7.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createPinia, PiniaVuePlugin } from 'pinia'\nimport App from './App.vue'\n\nconst pinia = createPinia()\ncreateApp(App).use(pinia).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Vuex Compatibility Configuration\nDESCRIPTION: Nuxt configuration for using Pinia alongside Vuex\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nexport default {\n  buildModules: [\n    '@nuxtjs/composition-api/module',\n    ['@pinia/nuxt', { disableVuex: false }],\n  ],\n  // ... other options\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Store with Getters in JavaScript\nDESCRIPTION: Example of defining a Pinia store with state and getters, including a getter that accesses another getter. Demonstrates the new syntax for getters that receive state as the first argument.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndefineStore({\n  state: () => ({ n: 0 }),\n  getters: {\n    double: (state) => state.n * 2,\n    // the `: number` is necessary when accessing `this` inside of\n    // a getter\n    doublePlusOne(state): number {\n      return this.double + 1\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Stores Directory Configuration\nDESCRIPTION: Nuxt configuration for customizing Pinia stores directory paths\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  // ... other options\n  modules: ['@pinia/nuxt'],\n  pinia: {\n    storesDirs: ['./stores/**', './custom-folder/stores/**'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Package Resolution Override Configuration\nDESCRIPTION: JSON configuration to resolve dependency conflicts by overriding Vue version.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"overrides\": {\n  \"vue\": \"latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Composables in Setup Stores with Pinia\nDESCRIPTION: Shows how to use composables in a setup store, including handling of non-serializable state. This example creates a video player store using the useMediaControls composable.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/composables.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { useMediaControls } from '@vueuse/core'\n\nexport const useVideoPlayer = defineStore('video', () => {\n  // we won't expose (return) this element directly\n  const videoElement = ref<HTMLVideoElement>()\n  const src = ref('/data/video.mp4')\n  const { playing, volume, currentTime, togglePictureInPicture } =\n    useMediaControls(videoElement, { src })\n\n  function loadVideo(element: HTMLVideoElement, src: string) {\n    videoElement.value = element\n    src.value = src\n  }\n\n  return {\n    src,\n    playing,\n    volume,\n    currentTime,\n\n    loadVideo,\n    togglePictureInPicture,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Feature: Implementing disposePinia Function\nDESCRIPTION: New functionality to dispose/cleanup Pinia stores, addressing issue #2453.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Creating a Pinia Plugin for Nuxt 2 in TypeScript\nDESCRIPTION: Demonstrates how to create a Pinia plugin as a Nuxt 2 plugin, with slight differences in type imports.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PiniaPluginContext } from 'pinia'\nimport { Plugin } from '@nuxt/types'\n\nfunction MyPiniaPlugin({ store }: PiniaPluginContext) {\n  store.$subscribe((mutation) => {\n    console.log(`[🍍 ${mutation.storeId}]: ${mutation.type}.`)\n  })\n  return { creationTime: new Date() }\n}\n\nconst myPlugin: Plugin = ({ $pinia }) => {\n  $pinia.use(MyPiniaPlugin)\n}\n\nexport default myPlugin\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia in a JavaScript Project\nDESCRIPTION: This code snippet demonstrates how to install the Pinia package using a package manager like pnpm. It's provided as a workaround for a production bug.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i pinia\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Link in Markdown\nDESCRIPTION: Markdown link comparing changes between Pinia versions 2.2.6 and 3.0.2\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[3.0.2](https://github.com/vuejs/pinia/compare/pinia@2.2.6...pinia@3.0.2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Guard with Vuex Store\nDESCRIPTION: Example showing how to use Vuex store in a Vue Router navigation guard to check user authentication status\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-vuex.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Vuex\nimport vuexStore from '@/store'\n\nrouter.beforeEach((to, from, next) => {\n  if (vuexStore.getters['auth/user/loggedIn']) next()\n  else next('/login')\n})\n```\n\n----------------------------------------\n\nTITLE: Running SFC Playground Locally in Development Mode\nDESCRIPTION: Command to start the SFC Playground in development mode from the repository root.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/online-playground/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev-sfc\n```\n\n----------------------------------------\n\nTITLE: Accessing Other Stores in Getters\nDESCRIPTION: Shows how to access and use data from other Pinia stores within a getter definition.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/getters.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useOtherStore } from './other-store'\n\nexport const useStore = defineStore('main', {\n  state: () => ({\n    // ...\n  }),\n  getters: {\n    otherGetter(state) {\n      const otherStore = useOtherStore()\n      return state.localData + otherStore.data\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Package Override Configuration\nDESCRIPTION: JSON configuration to resolve Vue dependency conflicts in package.json\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"overrides\": {\n  \"vue\": \"latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing multiple subscriptions with empty promises in JavaScript\nDESCRIPTION: This code snippet fixes an issue with multiple subscriptions occurring with empty promises.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\navoid multiple subscriptions with empty promises ([6c17168](https://github.com/vuejs/pinia/commit/6c17168b03307f257491dbd6c0962d5bfade02cc)), closes [#1129](https://github.com/vuejs/pinia/issues/1129)\n```\n\n----------------------------------------\n\nTITLE: Updating DefineStoreOptions Type in Pinia\nDESCRIPTION: Demonstrates how to update the DefineStoreOptions type to DefineStoreOptionsBase for adding custom options that apply to all store types in Pinia, not just Option Stores.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n- **types** The existing `DefineStoreOptions` is no longer the one that should be extended to add custom options unless you only want them to be applied to Option Stores. Use `DefineStoreOptionsBase` instead.\n```\n\n----------------------------------------\n\nTITLE: Vuex Compatibility Configuration\nDESCRIPTION: Configuration for using Pinia alongside Vuex in Nuxt application.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nexport default {\n  buildModules: [\n    '@nuxtjs/composition-api/module',\n    ['@pinia/nuxt', { disableVuex: false }],\n  ],\n  // ... 其他配置\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pinia Nuxt Dependency in package.json\nDESCRIPTION: Example of how to pin the @pinia/nuxt dependency version in package.json to avoid breaking changes in Nuxt 2 without bridge.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n-    \"@pinia/nuxt\": \"^0.2.1\",\n+    \"@pinia/nuxt\": \"0.2.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Action Subscription Implementation\nDESCRIPTION: Shows how to implement action subscriptions to track and monitor action execution, including timing and error handling.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = someStore.$onAction(\n  ({\n    name, // name of the action\n    store, // store instance, same as `someStore`\n    args, // array of parameters passed to the action\n    after, // hook after the action returns or resolves\n    onError, // hook if the action throws or rejects\n  }) => {\n    const startTime = Date.now()\n    console.log(`Start \"${name}\" with params [${args.join(', ')}].`)\n\n    after((result) => {\n      console.log(\n        `Finished \"${name}\" after ${\n          Date.now() - startTime\n        }ms.\\nResult: ${result}.`\n      )\n    })\n\n    onError((error) => {\n      console.warn(\n        `Failed \"${name}\" after ${Date.now() - startTime}ms.\\nError: ${error}.`\n      )\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding missing require in exports for JavaScript\nDESCRIPTION: This code snippet adds a missing require statement in the exports to fix an issue.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd missing require in exports ([96c0dbc](https://github.com/vuejs/pinia/commit/96c0dbc66ee166e6bd11be60c8486f239d83af40))\n```\n\n----------------------------------------\n\nTITLE: Fixing Object Property Check in JavaScript\nDESCRIPTION: This snippet fixes the usage of obj.hasOwnProperty in the shouldHydrate function. It likely addresses a bug or improves the property checking mechanism.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfix `obj.hasOwnProperty` in `shouldHydrate`\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Options for Stores with Pinia Plugins in JavaScript\nDESCRIPTION: Demonstrates how to create and use custom options when defining stores, which can be utilized in Pinia plugins.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndefineStore('search', {\n  actions: {\n    searchContacts() {\n      // ...\n    },\n  },\n  debounce: {\n    searchContacts: 300,\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport debounce from 'lodash/debounce'\n\npinia.use(({ options, store }) => {\n  if (options.debounce) {\n    return Object.keys(options.debounce).reduce((debouncedActions, action) => {\n      debouncedActions[action] = debounce(\n        store[action],\n        options.debounce[action]\n      )\n      return debouncedActions\n    }, {})\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Home Sponsors Component in Vue.js\nDESCRIPTION: Script setup block importing the HomeSponsors component and related CSS styles for the Pinia documentation home page.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport HomeSponsors from './.vitepress/theme/components/HomeSponsors.vue'\nimport './.vitepress/theme/styles/home-links.css'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating PiniaStorePlugin Type\nDESCRIPTION: TypeScript code showing the migration from PiniaStorePlugin to PiniaPlugin type name.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PiniaStorePlugin } from 'pinia' // [!code --]\nimport { PiniaPlugin } from 'pinia' // [!code ++]\n\nconst piniaPlugin: PiniaStorePlugin = () => { // [!code --]\nconst piniaPlugin: PiniaPlugin = () => { // [!code ++]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Actions in Vue Components\nDESCRIPTION: Shows how to call Pinia store actions from within Vue components using both script and template syntax.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst store = useCounterStore()\n// 将 action 作为 store 的方法进行调用\nstore.randomizeCounter()\n</script>\n<template>\n  <!-- 即使在模板中也可以 -->\n  <button @click=\"store.randomizeCounter()\">Randomize</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Fixing setupStore getter types in JavaScript\nDESCRIPTION: This code snippet fixes the types for setupStore getters to address an issue reported in GitHub.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetupStore getter types ([#1430](https://github.com/vuejs/pinia/issues/1430)) ([#1444](https://github.com/vuejs/pinia/issues/1444)) ([6be93f2](https://github.com/vuejs/pinia/commit/6be93f2301a7711873f49c94999913947e3896b8))\n```\n\n----------------------------------------\n\nTITLE: Building SFC Playground for Production\nDESCRIPTION: Command to build the SFC Playground for production deployment from the repository root.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/online-playground/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm build-sfc-playground\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference in Markdown\nDESCRIPTION: Markdown formatted Git commit reference with hash and description\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[d3b24a3](https://github.com/vuejs/pinia/commit/d3b24a3d6a4b5af82c8ef7e66e4cecd890c30fdd)\n```\n\n----------------------------------------\n\nTITLE: Using a Typed Mocked Store in Tests with TypeScript\nDESCRIPTION: Demonstrates how to use the typed mocked store utility in tests to get correct type inference when mocking action return values.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockedStore } from './mockedStore'\nimport { useSomeStore } from '@/stores/myStore'\n\nconst store = mockedStore(useSomeStore)\n// typed!\nstore.someAction.mockResolvedValue('some value')\n```\n\n----------------------------------------\n\nTITLE: Accessing Whole State in Pinia Store\nDESCRIPTION: Example showing how to access and replace the entire state object in a Pinia store using the new '$state' property.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-0-0-7.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n-store.state = newState\n+store.$state = newState\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia v0.x\nDESCRIPTION: Commands to install the latest 0.x version of Pinia using npm or yarn to check for deprecations.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i 'pinia@^0.x.x'\n# or with yarn\nyarn add 'pinia@^0.x.x'\n```\n\n----------------------------------------\n\nTITLE: Mapping Multiple Stores in Vue Components with mapStores\nDESCRIPTION: The mapStores function allows using multiple stores in a Vue component without the composition API. It generates an object with store references to be spread into the component's computed properties.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  computed: {\n    // Other computed properties\n    ...mapStores(useUserStore, useCartStore),\n  },\n\n  created() {\n    this.userStore // store with id \"user\"\n    this.cartStore // store with id \"cart\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Options API Usage with MapState\nDESCRIPTION: Demonstrates how to use Pinia getters with Vue's Options API using mapState helper function.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/getters.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mapState } from 'pinia'\nimport { useCounterStore } from '../stores/counter'\n\nexport default {\n  computed: {\n    ...mapState(useCounterStore, ['doubleCount']),\n    ...mapState(useCounterStore, {\n      myOwnName: 'doubleCount',\n      double: (store) => store.doubleCount,\n    }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in Vue Component's serverPrefetch Method\nDESCRIPTION: Demonstrates how to access the Pinia instance in a Vue component's serverPrefetch lifecycle hook for SSR scenarios.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  serverPrefetch() {\n    const store = useStore(this.$pinia)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Custom Store Suffix\nDESCRIPTION: TypeScript type declaration for customizing store suffix mapping, ensuring proper type inference when using custom suffixes.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/options-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPinia, setMapStoreSuffix } from 'pinia'\n\nsetMapStoreSuffix('') // completely remove the suffix\nexport const pinia = createPinia()\n\ndeclare module 'pinia' {\n  export interface MapStoresCustomization {\n    // set it to the same value as above\n    suffix: ''\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Nuxt 2\nDESCRIPTION: TypeScript configuration for adding Pinia types in Nuxt 2\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/ssr/nuxt.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": [\n    // ...\n    \"@pinia/nuxt\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Home Sponsors Component\nDESCRIPTION: Template code for rendering the HomeSponsors component in the Vue.js application.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<HomeSponsors />\n```\n\n----------------------------------------\n\nTITLE: Options API Store Definition\nDESCRIPTION: Example of defining a Pinia store that can be used with Vue's Options API.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nconst useCounterStore = defineStore('counter', {\n  state: () => ({\n    count: 0,\n  }),\n  actions: {\n    increment() {\n      this.count++\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining _ExtractStateFromSetupStore Type in TypeScript\nDESCRIPTION: Defines a conditional type to extract the state from a setup store. It handles cases where the store is undefined or void, and extracts keys that are not methods or computed refs.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nƬ **_ExtractStateFromSetupStore**<`SS`>: `SS` extends `undefined` | `void` ? {} : [`_ExtractStateFromSetupStore_Keys`](pinia.md#_extractstatefromsetupstore_keys)<`SS`> extends keyof `SS` ? [`_UnwrapAll`](pinia.md#_unwrapall)<`Pick`<`SS`, [`_ExtractStateFromSetupStore_Keys`](pinia.md#_extractstatefromsetupstore_keys)<`SS`>>> : `never`\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Plugin API in JavaScript\nDESCRIPTION: Example of using the updated Pinia plugin API, which now receives a context object instead of just the app instance. This change improves the plugin API capabilities.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// replace\npinia.use((app) => {})\n// with\npinia.use(({ app }) => {})\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia Store State for Testing in TypeScript\nDESCRIPTION: Shows how to initialize the state of a Pinia store for testing by passing an initialState object to createTestingPinia.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nconst useCounterStore = defineStore('counter', {\n  state: () => ({ n: 0 }),\n  // ...\n})\n\n// 在测试中的某处\nconst wrapper = mount(Counter, {\n  global: {\n    plugins: [\n      createTestingPinia({\n        initialState: {\n          counter: { n: 20 }, //从 20 开始计数，而不是 0\n        },\n      }),\n    ],\n  },\n})\n\nconst store = useSomeStore() // 使用 pinia 的测试实例!\nstore.n // 20\n```\n\n----------------------------------------\n\nTITLE: Client-Side Pinia State Hydration\nDESCRIPTION: Demonstrates how to hydrate the Pinia state on the client-side using a global variable. This should be done before any useStore() calls are made in the application.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/index.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst pinia = createPinia()\nconst app = createApp(App)\napp.use(pinia)\n\n// 必须由用户设置\nif (isClient) {\n  pinia.state.value = JSON.parse(window.__pinia)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia for Nuxt\nDESCRIPTION: Command to install the dedicated Nuxt package for Pinia integration.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @pinia/nuxt\n# or with yarn\nyarn add @pinia/nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia v2\nDESCRIPTION: Commands to upgrade to Pinia version 2 using npm or yarn package managers.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/cookbook/migration-v1-v2.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i 'pinia@^2.x.x'\n# or with yarn\nyarn add 'pinia@^2.x.x'\n```\n\n----------------------------------------\n\nTITLE: Extending Pinia Types for Custom Properties\nDESCRIPTION: Shows how to extend the PiniaCustomProperties interface to add type definitions for new properties added to stores by plugins.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/core-concepts/plugins.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'pinia'\nimport type { Router } from 'vue-router'\n\ndeclare module 'pinia' {\n  export interface PiniaCustomProperties {\n    // by using a setter we can allow both strings and refs\n    set hello(value: string | Ref<string>)\n    get hello(): string\n\n    // you can define simpler values too\n    simpleNumber: number\n\n    // type the router added by the plugin above (#adding-new-external-properties)\n    router: Router\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Getter Implementation\nDESCRIPTION: Demonstrates getter implementation in TypeScript with explicit return type definitions and accessing store instance through 'this'.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/getters.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    count: 0,\n  }),\n  getters: {\n    doubleCount(state) {\n      return state.count * 2\n    },\n    doublePlusOne(): number {\n      return this.doubleCount + 1\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Spy Function for Pinia Testing\nDESCRIPTION: Shows how to specify a custom spy function when using createTestingPinia, useful for testing frameworks other than Jest or Vitest.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport sinon from 'sinon'\n\ncreateTestingPinia({\n  createSpy: sinon.spy, // 使用 sinon's spy 包装 action\n})\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Vue 2 Components with Pinia\nDESCRIPTION: Demonstrates how to set up Pinia for unit testing Vue 2 components using Vue Test Utils 1 and a localVue instance.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/cookbook/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PiniaVuePlugin } from 'pinia'\nimport { createLocalVue, mount } from '@vue/test-utils'\nimport { createTestingPinia } from '@pinia/testing'\n\nconst localVue = createLocalVue()\nlocalVue.use(PiniaVuePlugin)\n\nconst wrapper = mount(Counter, {\n  localVue,\n  pinia: createTestingPinia(),\n})\n\nconst store = useSomeStore() // 使用 pinia 的测试实例！\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in Vue Router Navigation Guards (JavaScript)\nDESCRIPTION: This snippet illustrates how to correctly use a Pinia store within Vue Router navigation guards. It emphasizes the importance of calling useStore() after the router and Pinia have been installed.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/core-concepts/outside-component-usage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter } from 'vue-router'\nconst router = createRouter({\n  // ...\n})\n\n// ❌ 由于引入顺序的问题，这将失败\nconst store = useStore()\n\nrouter.beforeEach((to, from, next) => {\n  // 我们想要在这里使用 store\n  if (store.isLoggedIn) next()\n  else next('/login')\n})\n\nrouter.beforeEach((to) => {\n  // ✅ 这样做是可行的，因为路由器是在其被安装之后开始导航的，\n  // 而此时 Pinia 也已经被安装。\n  const store = useStore()\n\n  if (to.meta.requiresAuth && !store.isLoggedIn) return '/login'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia Module in Nuxt\nDESCRIPTION: Configuration examples for integrating Pinia in both Nuxt 2 and Nuxt 3 applications. For Nuxt 2, it's added to buildModules with an option to disable Vuex. For Nuxt 3, it's added to the modules array.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/nuxt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Nuxt 2\nexport default {\n  buildModules: [['@pinia/nuxt', { disableVuex: true }]],\n}\n// Nuxt 3\nexport default defineNuxtConfig({\n    modules: ['@pinia/nuxt'],\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Nuxt 2\nDESCRIPTION: TypeScript configuration for adding Pinia types in Nuxt 2 project.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/ssr/nuxt.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": [\n    \"@pinia/nuxt\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PiniaCustomProperties Interface in TypeScript\nDESCRIPTION: Defines the PiniaCustomProperties interface with generic type parameters for ID, state, getters, and actions. It includes a 'route' accessor with getter and setter methods.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/interfaces/pinia.PiniaCustomProperties.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PiniaCustomProperties<Id extends string = string, S extends StateTree = StateTree, G = _GettersTree<S>, A = _ActionsTree> {\n  get route(): RouteLocationNormalized;\n  set route(value: RouteLocationNormalizedLoaded | Ref<RouteLocationNormalizedLoaded>);\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Supporting Webpack Minification in Pinia\nDESCRIPTION: Fix to ensure proper minification behavior when using webpack with Pinia.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/pinia/CHANGELOG.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Displaying Supported Pinia Versions in Markdown Table\nDESCRIPTION: A markdown table showing which versions of Pinia are currently supported with security updates. Version 2.2.x is supported, while versions below 2.2.0 are not.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version   | Supported          |\n| --------- | ------------------ |\n| 2.2.x     | :white_check_mark: |\n| &lt;2.2.0 | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Pinia Testing Module Header\nDESCRIPTION: Markdown header defining the testing module for Pinia state management library.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Pinia testing module\n```\n\n----------------------------------------\n\nTITLE: Implementing defineStore Function in TypeScript\nDESCRIPTION: Creates a 'useStore' function that retrieves a store instance. It has two overloads: one that takes an id and options, and another that takes a single options object.\nSOURCE: https://github.com/vuejs/pinia/blob/v3/packages/docs/zh/api/modules/pinia.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **defineStore**<`Id`, `S`, `G`, `A`>(`id`, `options`): [`StoreDefinition`](../interfaces/pinia.StoreDefinition.md)<`Id`, `S`, `G`, `A`>\n```"
  }
]