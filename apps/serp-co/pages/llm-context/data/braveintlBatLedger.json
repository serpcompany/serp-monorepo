[
  {
    "owner": "brave-intl",
    "repo": "bat-ledger",
    "content": "TITLE: Running BAT Ledger Services with Docker Compose\nDESCRIPTION: Commands for starting and managing BAT ledger services using Docker Compose. These commands allow you to bring up all services together or run specific services like eyeshade in the foreground or background, and stop running services.\nSOURCE: https://github.com/brave-intl/bat-ledger/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# To bring up all the services :\n    docker-compose up\n\n# Logs from all services presented interleaved, you can press ctrl-c to stop.\n# Ledger listens on port 3001, eyeshade on 3002, and balance on 3003\n\n# Note you can run any subset of services (e.g. only eyeshade)\ndocker-compose up eyeshade-web eyeshade-consumer\n\n# You can also launch and run services in the background\ndocker-compose up -d eyeshade-web eyeshade-consumer\n\n# And stop running background services with\ndocker-compose stop\n```\n\n----------------------------------------\n\nTITLE: Building and Running Local BAT Ledger Servers\nDESCRIPTION: Commands for building, starting, and running migrations for the BAT ledger services. These commands help set up the local development environment with proper database schemas.\nSOURCE: https://github.com/brave-intl/bat-ledger/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docker-build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docker-up\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docker-migrate-up\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docker-migrate-down -- migrations/0001_transactions/down.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docker-test\n```\n\n----------------------------------------\n\nTITLE: Network Configuration for Docker Compose\nDESCRIPTION: YAML configuration for connecting other Docker containers to the BAT ledger network. This allows containers from other applications to directly access ledger services from within the container network.\nSOURCE: https://github.com/brave-intl/bat-ledger/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  ledger:\n      external: true\n```\n\n----------------------------------------\n\nTITLE: Running Individual Tests with AVA\nDESCRIPTION: Commands for running specific tests using the AVA test runner. These examples demonstrate how to run individual test files with verbose output, either directly or through Docker Compose.\nSOURCE: https://github.com/brave-intl/bat-ledger/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ava -- -v -s eyeshade/workers/referrals.test.js\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run eyeshade-web npm run ava -- -v -s test/eyeshade/suggestions.integration.test.js\n```\n\n----------------------------------------\n\nTITLE: Debugging BAT Ledger Services with Node Inspector\nDESCRIPTION: Command for running the eyeshade service with Node.js inspector enabled. This allows for remote debugging of the service via port 9229.\nSOURCE: https://github.com/brave-intl/bat-ledger/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose run --rm -p 9229:9229 eyeshade-web npm run start-eyeshade -- --inspect=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating Test Surveyors for Contribution Testing\nDESCRIPTION: cURL command to manually add a surveyor for testing contributions locally. This creates a contribution surveyor with specific BAT values and parameters needed for testing the contribution flow.\nSOURCE: https://github.com/brave-intl/bat-ledger/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --header 'Authorization: Bearer foobarfoobar' --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\"adFree\":{\"fee\":{\"USD\":5},\"votes\":50,\"altcurrency\":\"BAT\",\"probi\":\"27116311373482831368\"}}' 'http://127.0.0.1:3001/v2/surveyor/contribution'\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates for Kafka MQTT using Bash\nDESCRIPTION: This snippet shows the commands to remove existing certificates and generate new SSL certificates for Kafka MQTT. It uses the create-certs.sh and generate-client.sh scripts from the Confluent Platform Docker images repository.\nSOURCE: https://github.com/brave-intl/bat-ledger/blob/master/test/secrets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm broker1* consumer* kafka* snakeoil-ca*\n./create-certs.sh\n./generate-client.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Control in robots.txt\nDESCRIPTION: This robots.txt file instructs all web crawlers to avoid indexing any content on the site. It uses the wildcard user-agent to target all crawlers and disallows access to the entire site with a root path directive.\nSOURCE: https://github.com/brave-intl/bat-ledger/blob/master/static/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# go away\nUser-agent: *\nDisallow: /\n```"
  }
]