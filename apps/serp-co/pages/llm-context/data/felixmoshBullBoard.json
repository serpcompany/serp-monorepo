[
  {
    "owner": "felixmosh",
    "repo": "bull-board",
    "content": "TITLE: Initializing Bull Board with Express\nDESCRIPTION: Example of setting up Bull Board with Express server, including queue configuration and board initialization with both Bull and BullMQ adapters.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst Queue = require('bull');\nconst { Queue: QueueMQ } = require('bullmq');\nconst { createBullBoard } = require('@bull-board/api');\nconst { BullAdapter } = require('@bull-board/api/bullAdapter');\nconst { BullMQAdapter } = require('@bull-board/api/bullMQAdapter');\nconst { ExpressAdapter } = require('@bull-board/express');\n\nconst someQueue = new Queue('someQueueName', {\n  redis: { port: 6379, host: '127.0.0.1', password: 'foobared' },\n});\nconst someOtherQueue = new Queue('someOtherQueueName');\nconst queueMQ = new QueueMQ('queueMQName');\n\nconst serverAdapter = new ExpressAdapter();\nserverAdapter.setBasePath('/admin/queues');\n\nconst { addQueue, removeQueue, setQueues, replaceQueues } = createBullBoard({\n  queues: [new BullAdapter(someQueue), new BullAdapter(someOtherQueue), new BullMQAdapter(queueMQ)],\n  serverAdapter: serverAdapter,\n});\n\nconst app = express();\n\napp.use('/admin/queues', serverAdapter.getRouter());\n\napp.listen(3000, () => {\n  console.log('Running on 3000...');\n  console.log('For the UI, open http://localhost:3000/admin/queues');\n  console.log('Make sure Redis is running on port 6379 by default');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering BullBoardModule in NestJS Root Module\nDESCRIPTION: TypeScript code for importing and configuring the BullBoardModule in the NestJS application's root module with ExpressAdapter.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/packages/nestjs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { BullBoardModule } from \"@bull-board/nestjs\";\nimport { ExpressAdapter } from \"@bull-board/express\";\n\n@Module({\n  imports: [\n    BullModule.forRoot({\n      // your bull module config here.\n    }),\n\n    BullBoardModule.forRoot({\n      route: '/queues',\n      adapter: ExpressAdapter // Or FastifyAdapter from `@bull-board/fastify`\n    }),\n  ],\n})\nexport class AppModule {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Board UI Options\nDESCRIPTION: Example showing how to customize Bull Board UI configuration including title, logo, misc links and favicon settings.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Queue: QueueMQ } = require('bullmq');\nconst {createBullBoard} = require('@bull-board/api');\nconst {BullMQAdapter} = require('@bull-board/api/bullMQAdapter');\n\nconst queueMQ = new QueueMQ();\n\ncreateBullBoard({\n  queues: [new BullMQAdapter(queueMQ)],\n  serverAdapter,\n  options: {\n    uiConfig: {\n      boardTitle: 'My BOARD',\n      boardLogo: {\n        path: 'https://cdn.my-domain.com/logo.png',\n        width: '100px',\n        height: 200,\n      },\n      miscLinks: [{text: 'Logout', url: '/logout'}],\n      favIcon: {\n        default: 'static/images/logo.svg',\n        alternative: 'static/favicon-32x32.png',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Formatters for BullMQ Queue Data Fields in JavaScript\nDESCRIPTION: Example of applying custom formatters to job data fields in Bull Board. Shows how to use the setFormatter method to redact sensitive information from job data, return values, and customize job names.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Queue: QueueMQ } = require('bullmq');\nconst fastRedact = require('fast-redact');\nconst { createBullBoard } = require('@bull-board/api');\nconst { BullMQAdapter } = require('@bull-board/api/bullMQAdapter');\n\nconst redact = fastRedact({\n  paths: ['headers.cookie', 'password', 'access_token']\n})\n\nconst queueMQ = new QueueMQ()\nconst queueAdapter = new BullMQAdapter(queueMQ);\nqueueAdapter.setFormatter('name', (job) => `#Queue1 - ${job.name}`);\nqueueAdapter.setFormatter('data', (data) => redact(data));\nqueueAdapter.setFormatter('returnValue', (returnValue) => redact(returnValue));\n\ncreateBullBoard({\n  queues: [queueAdapter]\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Queues with BullBoardModule.forFeature in NestJS\nDESCRIPTION: TypeScript code for registering Bull queues with BullBoardModule.forFeature, which must be done in the same module where the queues are defined.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/packages/nestjs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { BullBoardModule } from \"@bull-board/nestjs\";\nimport { BullMQAdapter } from \"@bull-board/api/bullMQAdapter\";\nimport { BullModule } from \"@nestjs/bullmq\";\n\n@Module({\n  imports: [\n    BullModule.registerQueue(\n      {\n        name: 'my_awesome_queue'\n      }\n    ),\n    \n    BullBoardModule.forFeature({\n      name: 'my_awesome_queue',\n      adapter: BullMQAdapter, //or use BullAdapter if you're using bull instead of bullMQ\n    }),\n  ],\n})\nexport class FeatureModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Mode for Bull and BullMQ Queues in JavaScript\nDESCRIPTION: Example of setting up Bull Board with read-only mode for both Bull and BullMQ queues. The readOnlyMode option makes the UI read-only and hides queue & job related actions.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require('bull')\nconst { Queue: QueueMQ } = require('bullmq');\nconst { createBullBoard } = require('@bull-board/api')\nconst { BullMQAdapter } = require('@bull-board/api/bullMQAdapter')\nconst { BullAdapter } = require('@bull-board/api/bullAdapter')\n\nconst someQueue = new Queue()\nconst queueMQ = new QueueMQ()\n\ncreateBullBoard({\n  queues: [\n    new BullAdapter(someQueue, { readOnlyMode: true }), // only this queue will be in read only mode\n    new BullMQAdapter(queueMQ, { readOnlyMode: true }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Allow Retries Option for Bull and BullMQ Queues in JavaScript\nDESCRIPTION: Example showing how to disable retry buttons in Bull Board UI for certain queues. The allowRetries option can be set to false to remove retry buttons, but will be ignored if readOnlyMode is true.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Queue: QueueMQ } = require('bullmq');\nconst { createBullBoard } = require('@bull-board/api')\nconst { BullMQAdapter } = require('@bull-board/api/bullMQAdapter')\nconst { BullAdapter } = require('@bull-board/api/bullAdapter')\n\nconst someQueue = new Queue()\nconst queueMQ = new QueueMQ()\n\ncreateBullBoard({\n  queues: [\n    new BullAdapter(someQueue, { allowRetries: false }), // No retry buttons\n    new BullMQAdapter(queueMQ, { allowRetries: true, readOnlyMode: true }), // allowRetries will be ignored in this case in lieu of readOnlyMode\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Hosting Bull Board on a Sub Path with Express in JavaScript\nDESCRIPTION: Example showing how to configure Bull Board to run on a sub-path rather than the root path. Uses the ExpressAdapter and setBasePath method to set up the routing configuration.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require('bull')\nconst { createBullBoard } = require('@bull-board/api')\nconst { BullAdapter } = require('@bull-board/api/bullAdapter')\nconst { ExpressAdapter } = require('@bull-board/express')\n\nconst basePath = '/my-base-path';\n\nconst someQueue = new Queue('someQueueName')\nconst serverAdapter = new ExpressAdapter();\nserverAdapter.setBasePath(basePath)\n\ncreateBullBoard({\n  queues: [\n    new BullAdapter(someQueue),\n  ],\n  serverAdapter\n})\n\n// ... express server configuration\n\napp.use(basePath, serverAdapter.getRouter());\n```\n\n----------------------------------------\n\nTITLE: Adding Express Basic Authentication for Bull-Board\nDESCRIPTION: Configuration for securing Bull-Board with express-basic-auth middleware, including installation and setup.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/packages/nestjs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save express-basic-auth\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport basicAuth from \"express-basic-auth\";\n\nBullBoardModule.forRoot({\n  route: \"/queues\",\n  adapter: ExpressAdapter,\n  middleware: basicAuth({\n    challenge: true,\n    users: { admin: \"passwordhere\" },\n  }),\n}),\n```\n\n----------------------------------------\n\nTITLE: Adding Fastify Basic Authentication for Bull-Board\nDESCRIPTION: Configuration for securing Bull-Board with fastify-basic-auth middleware, including installation and implementation.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/packages/nestjs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save fastify-basic-auth\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastifyBasicAuth from \"fastify-basic-auth\";\n\nBullBoardModule.forRoot({\n  route: \"/queues\",\n  adapter: FastifyAdapter,\n  middleware: (req, res, next) => {\n    fastifyBasicAuth({\n      validate: async (username, password, req, reply) => {\n        if (username === \"admin\" && password === \"passwordhere\") {\n          return;\n        }\n        throw new Error(\"Unauthorized\");\n      },\n    })(req, res, next);\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Authenticating Bull-Board with Fastify using Cookie Auth\nDESCRIPTION: Instructions for setting up and using cookie-based authentication with bull-board and Fastify. Users navigate to '/cookie/login' and enter the credentials 'bull' for username and 'board' for password.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-fastify-auth/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Usage with Cookie Auth\n1. Navigate to `/cookie/login`\n2. Fill in username: `bull` & password: `board`\n```\n\n----------------------------------------\n\nTITLE: Authenticating Bull-Board with Fastify using Basic Auth\nDESCRIPTION: Instructions for setting up and using basic authentication with bull-board and Fastify. Users navigate to '/basic/login' and enter the credentials 'bull' for username and 'board' for password.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-fastify-auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Usage with Basic Auth\n1. Navigate to `/basic/login`\n2. Fill in username: `bull` & password: `board`\n\n*Based on: https://github.com/fastify/fastify-basic-auth*\n```\n\n----------------------------------------\n\nTITLE: Explaining Local Passport Authentication for Bull-Board\nDESCRIPTION: This markdown snippet provides an overview of using local Passport strategy to secure Bull-Board. It emphasizes that the approach works with any cookie-based authentication due to automatic session cookie attachment by the browser.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-express-auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Local passport auth example\n\nThis example shows how to secure your bull-board using local passport strategy.\n\n### Notes\n1. It will work with any **cookie** based auth, since the browser will attach \n   the `session` cookie automatically to **each** request.\n\n\nBased on: https://github.com/passport/express-4.x-local-example/blob/master/server.js\n```\n\n----------------------------------------\n\nTITLE: Injecting Bull-Board Instance in NestJS Controller\nDESCRIPTION: Example of using the @InjectBullBoard decorator to access the Bull-Board instance in a NestJS controller for programmatic interaction.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/packages/nestjs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from \"@nestjs/common\";\nimport { BullBoardInstance, InjectBullBoard } from \"@bull-board/nestjs\";\n\n@Controller('my-feature')\nexport class FeatureController {\n\n  constructor(\n    @InjectBullBoard() private readonly boardInstance: BullBoardInstance\n  ) {\n  }\n  \n  //controller methods\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bull Board Dependencies\nDESCRIPTION: Shell commands for installing Bull Board core package and server-specific adapters using yarn.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @bull-board/api\n# and one of the following server adapters\nyarn add @bull-board/express\n# or\nyarn add @bull-board/fastify\n# or\nyarn add @bull-board/hapi\n# or\nyarn add @bull-board/koa\n# or\nyarn add @bull-board/nestjs\n# or\nyarn add @bull-board/hono\n# or\nyarn add @bull-board/h3\n# or\nyarn add @bull-board/elysia\n```\n\n----------------------------------------\n\nTITLE: Installing Bull-Board Modules with NPM for NestJS\nDESCRIPTION: Commands for installing the required Bull-Board packages including the core API module and adapter modules for Express or Fastify.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/packages/nestjs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @bull-board/nestjs @bull-board/api\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @bull-board/express\n//or \n$ npm install --save @bull-board/fastify\n```\n\n----------------------------------------\n\nTITLE: Bull-Board Version History\nDESCRIPTION: Comprehensive changelog showing version updates, bug fixes, and improvements across multiple releases from v3.8.1 to v4.0.0. Major changes include upgrading to Fastify 4, security updates, and performance improvements.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [v4.0.0](https://github.com/felixmosh/bull-board/compare/v3.11.1...v4.0.0)\n\n> 12 June 2022\n\n- chore: upgrade to fastify 4\n- Create codeql-analysis.yml\n- Release 4.0.0\n```\n\n----------------------------------------\n\nTITLE: Fastify Bull-Board Example Title in Markdown\nDESCRIPTION: Markdown heading and description for setting up Bull-Board with Fastify.js server integration.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-fastify/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Fastify example\n\nThis example shows how to use [Fastify.js](https://www.fastify.io/) as a server for bull-board.\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Application in Different Modes\nDESCRIPTION: Commands for starting the NestJS application in development, watch, or production mode. The development mode runs the app normally, watch mode automatically restarts on file changes, and production mode uses optimized settings.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Application in Development and Production Modes\nDESCRIPTION: Commands to run a NestJS application in watch mode for development and production mode using Yarn and npm respectively.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs-module/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# watch mode\n$ yarn start:dev\n\n# production mode\n$ npm run start:prod\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Application in Different Modes\nDESCRIPTION: These commands run the NestJS application in development, watch, and production modes using PNPM scripts.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs-fastify-auth/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prod\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Tests\nDESCRIPTION: Commands for running different types of tests in a NestJS project. Includes options for unit tests, end-to-end tests, and generating test coverage reports.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Tests\nDESCRIPTION: These commands run unit tests, end-to-end tests, and generate test coverage for the NestJS application using PNPM scripts.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs-fastify-auth/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:cov\n```\n\n----------------------------------------\n\nTITLE: Running Redis with Docker Compose for NestJS Application\nDESCRIPTION: Command to start Redis dependency in detached mode using Docker Compose for a NestJS application.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs-module/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run the redis dependency using docker.\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Project Dependencies with npm\nDESCRIPTION: Command to install all required dependencies for a NestJS project using npm package manager. This should be run before attempting to start or test the application.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM for NestJS\nDESCRIPTION: This command installs all the necessary dependencies for the NestJS project using PNPM package manager.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs-fastify-auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn in NestJS Project\nDESCRIPTION: Command to install project dependencies using Yarn package manager in a NestJS application.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs-module/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Deploying NestJS Application using Mau\nDESCRIPTION: These commands install the Mau CLI globally and deploy the NestJS application to AWS using Mau, a cloud-based platform for NestJS deployments.\nSOURCE: https://github.com/felixmosh/bull-board/blob/master/examples/with-nestjs-fastify-auth/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm install -g mau\n$ mau deploy\n```"
  }
]