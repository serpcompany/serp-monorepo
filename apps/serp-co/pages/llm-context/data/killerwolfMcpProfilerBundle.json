[
  {
    "owner": "killerwolf",
    "repo": "mcp-profiler-bundle",
    "content": "TITLE: Configuring MCP Server in IDE\nDESCRIPTION: JSON configuration for setting up the MCP Server in compatible IDEs like Cursor, Claude Code, or Cline. This points to the Symfony console command that runs the MCP server.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"symfony-mcp\": {\n      \"command\": \"/path/to/your/symfony/project/bin/console\",\n      \"args\": [\n        \"mcp:server:run\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Profiler Bundle with Composer\nDESCRIPTION: Command to install the MCP Profiler Bundle via Composer. This requires Composer and adds the bundle to your Symfony project.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require killerwolf/mcp-profiler-bundle:^0.1\n```\n\n----------------------------------------\n\nTITLE: Registering the Bundle in Symfony\nDESCRIPTION: PHP code to add the MCP Profiler Bundle to the Symfony bundles configuration. This enables the bundle in the development environment only.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    Killerwolf\\MCPProfilerBundle\\MCPProfilerBundle::class => ['dev' => true],\n];\n```\n\n----------------------------------------\n\nTITLE: Running MCP Inspector for Debugging\nDESCRIPTION: Command to run the MCP Inspector tool which allows interaction with the MCP Server for testing tools and resources.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx --registry https://registry.npmjs.org @modelcontextprotocol/inspector\n```\n\n----------------------------------------\n\nTITLE: Using CLI Commands for Profiler Interaction\nDESCRIPTION: Bash commands to interact with the Symfony Profiler directly for debugging or learning purposes. Includes listing profiles and viewing specific profile details.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# List recent profiler entries\nbin/console mcp:profiler list --limit=20\n\n# Show details for a specific profile\nbin/console mcp:profiler show <token>\nbin/console mcp:profiler show <token> --collector=request\n```\n\n----------------------------------------\n\nTITLE: Path to MCP Profiler Data Collector Template in Symfony\nDESCRIPTION: Specifies the location of the Twig template used by the data collector to display information in the Symfony profiler interface. This template renders the data collected by the MCPDataCollector class.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/Resources/docs/data_collector.md#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nResources/views/data_collector/mcp.html.twig\n```\n\n----------------------------------------\n\nTITLE: Updating RunMCPServerCommand Constructor in PHP\nDESCRIPTION: Modifies the constructor of RunMCPServerCommand to accept cacheDir and environment parameters instead of a Profiler instance.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/docs/mcp_server_multi_app_plan.md#2025-04-14_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n__construct(string $cacheDir, string $environment, ParameterBagInterface $parameterBag)\n```\n\n----------------------------------------\n\nTITLE: Deriving Base Cache Directory and Environment in PHP\nDESCRIPTION: Calculates the base cache directory and retrieves the environment name before the tool execution in RunMCPServerCommand.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/docs/mcp_server_multi_app_plan.md#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$baseCacheDir = dirname(dirname($this->cacheDir)); // e.g., /path/to/project/var/cache\n$envName = $this->environment; // Use the injected environment name\n```\n\n----------------------------------------\n\nTITLE: Visualizing Multi-App MCP Server Refactoring Process with Mermaid\nDESCRIPTION: A Mermaid diagram illustrating the phases and steps involved in refactoring the MCP Server for multi-app support.\nSOURCE: https://github.com/killerwolf/mcp-profiler-bundle/blob/main/docs/mcp_server_multi_app_plan.md#2025-04-14_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Start[Start Task: Multi-App MCP Server] --> ModServerCmd[Phase 1: Modify RunMCPServerCommand.php];\n    ModServerCmd --> ModServerConst[Update Constructor: Inject cacheDir, environment];\n    ModServerCmd --> ModServerCallTool[Update callTool: Derive paths, Instantiate Tools w/ new params];\n\n    ModServerCallTool --> ModToolClasses[Phase 2: Modify Tool Classes];\n\n    subgraph Phase 2: Modify Tool Classes\n        direction LR\n        ModToolConst[Update Constructors: Accept baseCacheDir, environment] --> ModToolExec[Update execute Methods];\n        ModToolExec --> ImplMultiApp[Implement Multi-App Discovery Finder, Loop];\n        ImplMultiApp --> CreateTemp[Create Temp Storage & Profiler per App];\n        CreateTemp --> AdaptLogic[Adapt Core Logic];\n\n        subgraph Adapt Core Logic\n            direction TB\n            ListLogic[ProfilerList: Aggregate profiles + appId, Sort, Limit]\n            GetLogic[ProfilerGet*ByToken: Search apps for token, Load profile]\n        end\n    end\n\n    ModToolClasses --> UpdateDI[Phase 3: Update Service Configuration];\n    UpdateDI --> InjectParams[Inject %kernel.cache_dir%, %kernel.environment% into RunMCPServerCommand];\n\n    InjectParams --> End[Plan Complete];\n\n    style Start fill:#lightgrey,stroke:#333,stroke-width:2px\n    style End fill:#lightgrey,stroke:#333,stroke-width:2px\n```"
  }
]