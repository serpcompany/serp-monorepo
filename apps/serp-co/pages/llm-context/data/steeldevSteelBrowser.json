[
  {
    "owner": "steel-dev",
    "repo": "steel-browser",
    "content": "TITLE: Creating a Browser Session with Node.js SDK\nDESCRIPTION: Example of using the Steel Node.js SDK to create a new browser session with custom options including session timeout and ad blocking. The snippet demonstrates how to initialize the client with a custom base URL and create a session with specific configuration.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Steel from 'steel-sdk';\n\nconst client = new Steel({\n  baseUrl: \"http://localhost:3000\", // Custom API Base URL override\n});\n\n(async () => {\n  try {\n    // Create a new browser session with custom options\n    const session = await client.sessions.create({\n      sessionTimeout: 1800000, // 30 minutes\n      blockAds: true,\n    });\n    console.log(\"Created session with ID:\", session.id);\n  } catch (error) {\n    console.error(\"Error creating session:\", error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating a Browser Session with Python SDK\nDESCRIPTION: Example of using the Steel Python SDK to create a new browser session with custom options including session timeout and ad blocking. The snippet shows how to initialize the client with a custom base URL and create a session with specific configuration.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom steel import Steel\n\nclient = Steel(\n    base_url=\"http://localhost:3000\",  # Custom API Base URL override\n)\n\ntry:\n    # Create a new browser session with custom options\n    session = client.sessions.create(\n        session_timeout=1800000,  # 30 minutes\n        block_ads=True,\n    )\n    print(\"Created session with ID:\", session.id)\nexcept Exception as e:\n    print(\"Error creating session:\", e)\n```\n\n----------------------------------------\n\nTITLE: Scraping a Web Page with Quick Actions API\nDESCRIPTION: Example of using the Steel Quick Actions API to extract HTML content from a web page. The request specifies the URL to scrape and a wait time parameter to ensure the page loads completely before extraction.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Example using the Actions API\ncurl -X POST http://0.0.0.0:3000/v1/scrape \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://example.com\",\n    \"waitFor\": 1000\n  }'\n```\n\n----------------------------------------\n\nTITLE: Downloading a PDF with Quick Actions API\nDESCRIPTION: Example of using the Steel Quick Actions API to generate a PDF of a web page. The request specifies the URL and the fullPage option to include the entire page content, saving the result to a local PDF file.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Example using the Actions API\ncurl -X POST http://0.0.0.0:3000/v1/pdf \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://example.com\",\n    \"fullPage\": true\n  }' --output output.pdf\n```\n\n----------------------------------------\n\nTITLE: Taking a Screenshot with Quick Actions API\nDESCRIPTION: Example of using the Steel Quick Actions API to capture a screenshot of a web page. The request specifies the URL and the fullPage option to capture the entire page, outputting the result to a local PNG file.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Example using the Actions API\ncurl -X POST http://0.0.0.0:3000/v1/screenshot \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://example.com\",\n    \"fullPage\": true\n  }' --output screenshot.png\n```\n\n----------------------------------------\n\nTITLE: Creating a Selenium Session with Node.js SDK\nDESCRIPTION: Example of creating a Selenium-compatible browser session using the Steel Node.js SDK. This enables compatibility with existing Selenium workflows while providing enhanced Steel features.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Using the Node SDK\nconst session = await client.sessions.create({ isSelenium: true });\n```\n\n----------------------------------------\n\nTITLE: Creating a Selenium Session with Python SDK\nDESCRIPTION: Example of creating a Selenium-compatible browser session using the Steel Python SDK. This enables compatibility with existing Selenium workflows while providing enhanced Steel features.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Using the Python SDK\nsession = client.sessions.create(is_selenium=True)\n```\n\n----------------------------------------\n\nTITLE: Docker Container Setup for Steel Browser\nDESCRIPTION: Instructions for cloning and running the Steel browser using Docker compose. This will start the Steel server on port 3000 and UI on port 5173.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone and build the Docker image\ngit clone https://github.com/steel-dev/steel-browser\ncd steel-browser\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Creating a Browser Session with Curl\nDESCRIPTION: Example of using curl to directly call the Steel API for creating a new browser session. The request uses a POST method to the sessions endpoint with custom options including a proxy configuration.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Launch a new browser session\ncurl -X POST http://localhost:3000/v1/sessions \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"options\": {\n      \"proxy\": \"user:pass@host:port\",\n      // Custom launch options\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating a Selenium Session with Curl\nDESCRIPTION: Example of using curl to directly call the Steel API for creating a Selenium-compatible browser session. The request specifies the isSelenium option to enable Selenium WebDriver protocol compatibility.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Launch a Selenium session\ncurl -X POST http://localhost:3000/v1/sessions \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"options\": {\n      \"isSelenium\": true,\n      // Selenium-compatible options\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Node.js Local Development Setup\nDESCRIPTION: Commands for installing dependencies and running the Steel browser directly with Node.js.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Docker Development Environment Setup\nDESCRIPTION: Commands for setting up a development environment using docker-compose.dev.yml, which enables local changes to be reflected in the running containers.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.dev.yml up\n```\n\n----------------------------------------\n\nTITLE: Custom Chrome Executable Configuration\nDESCRIPTION: Command to set a custom Chrome executable path using environment variables before starting the server.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport CHROME_EXECUTABLE_PATH=/path/to/your/chrome\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Docker Development Build Command\nDESCRIPTION: Command to rebuild Docker images when making changes to the codebase during development.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.dev.yml up --build\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: Configuration object for ESLint parser options to enable type-aware linting in a React TypeScript project. Includes settings for ECMAScript version, module type, and TypeScript configuration files.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n   parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n   },\n```\n\n----------------------------------------\n\nTITLE: Starting Steel Browser REPL Setup\nDESCRIPTION: Command line instructions for starting and running the Steel Browser REPL interface. Includes npm commands and file modification notes.\nSOURCE: https://github.com/steel-dev/steel-browser/blob/main/repl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```"
  }
]