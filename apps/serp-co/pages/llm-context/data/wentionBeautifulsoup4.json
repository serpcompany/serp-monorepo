[
  {
    "owner": "wention",
    "repo": "beautifulsoup4",
    "content": "TITLE: Initializing BeautifulSoup Object in Python\nDESCRIPTION: These examples show how to create a BeautifulSoup object from either a file or a string containing HTML. The soup object is the starting point for parsing and navigating the document.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(open(\"index.html\"))\n\nsoup = BeautifulSoup(\"<html>data</html>\")\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML with BeautifulSoup in Python\nDESCRIPTION: This snippet demonstrates how to create a BeautifulSoup object by parsing an HTML document and then pretty-print the parsed structure. It requires the bs4 module to be imported.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_doc)\n\nprint(soup.prettify())\n```\n\n----------------------------------------\n\nTITLE: Creating BeautifulSoup Object from HTML Document (Python)\nDESCRIPTION: Shows how to initialize a BeautifulSoup object with an HTML document containing a story about three sisters. The example demonstrates parsing and pretty printing of the document structure.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhtml_doc = \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_doc)\n\nprint(soup.prettify())\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Content from HTML Document (Python)\nDESCRIPTION: Shows how to extract all text content from a parsed HTML document using BeautifulSoup's get_text() method.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(soup.get_text())\n```\n\n----------------------------------------\n\nTITLE: Finding All Tags Using BeautifulSoup in Python\nDESCRIPTION: Demonstrates how to use the find_all() method to retrieve all <a> tags from a BeautifulSoup object. This allows for more complex searching beyond just finding the first occurrence of a tag.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all('a')\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n----------------------------------------\n\nTITLE: Extracting URLs from <a> Tags with BeautifulSoup in Python\nDESCRIPTION: This snippet demonstrates how to extract all URLs found within <a> tags on a page using BeautifulSoup. It uses a for loop to iterate through all 'a' elements and print their 'href' attributes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfor link in soup.find_all('a'):\n    print(link.get('href'))\n```\n\n----------------------------------------\n\nTITLE: Extracting All Text from HTML with BeautifulSoup in Python\nDESCRIPTION: This snippet shows how to extract all text content from an HTML page using BeautifulSoup's get_text() method. It removes all HTML tags and returns only the textual content.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nprint(soup.get_text())\n```\n\n----------------------------------------\n\nTITLE: Extracting URLs from HTML Document (Python)\nDESCRIPTION: Demonstrates how to extract all URLs from <a> tags in a parsed HTML document using BeautifulSoup's find_all() method.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor link in soup.find_all('a'):\n    print(link.get('href'))\n```\n\n----------------------------------------\n\nTITLE: Basic Element Search with find_all() in BeautifulSoup4\nDESCRIPTION: Shows the simplest usage of find_all() to search for specific HTML tags by name in the document tree.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all('b')\n# [<b>The Dormouse's story</b>]\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTML Document Parsing with BeautifulSoup4\nDESCRIPTION: Demonstrates how to initialize BeautifulSoup with an HTML document string for parsing and searching through the document tree.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nhtml_doc = \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_doc)\n```\n\n----------------------------------------\n\nTITLE: Searching Elements with Multiple CSS Classes in BeautifulSoup4\nDESCRIPTION: This snippet demonstrates searching for elements with specific CSS classes. It shows how BeautifulSoup matches against any of the CSS classes in a multi-class element.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ncss_soup = BeautifulSoup('<p class=\"body strikeout\"></p>')\ncss_soup.find_all(\"p\", class_=\"strikeout\")\n# [<p class=\"body strikeout\"></p>]\n\ncss_soup.find_all(\"p\", class_=\"body\")\n# [<p class=\"body strikeout\"></p>]\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Tag Attributes in BeautifulSoup\nDESCRIPTION: This snippet demonstrates how to access and modify attributes of a tag object in BeautifulSoup. It shows dictionary-style access to attributes and methods for adding, modifying, and removing attributes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntag['class'] = 'verybold'\ntag['id'] = 1\ntag\n# <blockquote class=\"verybold\" id=\"1\">Extremely bold</blockquote>\n\ndel tag['class']\ndel tag['id']\ntag\n# <blockquote>Extremely bold</blockquote>\n\ntag['class']\n# KeyError: 'class'\nprint(tag.get('class'))\n# None\n```\n\n----------------------------------------\n\nTITLE: Navigating BeautifulSoup Object in Python\nDESCRIPTION: This snippet shows various ways to navigate the BeautifulSoup object, including accessing tags, attributes, and nested elements. It demonstrates basic operations like finding elements and extracting text content.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsoup.title\nsoup.title.name\nsoup.title.string\nsoup.title.parent.name\nsoup.p\nsoup.p['class']\nsoup.a\nsoup.find_all('a')\nsoup.find(id=\"link3\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Custom Functions in BeautifulSoup4\nDESCRIPTION: Shows how to create and use custom filter functions that apply specific logic to select elements based on multiple conditions.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef has_class_but_no_id(tag):\n    return tag.has_attr('class') and not tag.has_attr('id')\n\nsoup.find_all(has_class_but_no_id)\n# [<p class=\"title\"><b>The Dormouse's story</b></p>,\n#  <p class=\"story\">Once upon a time there were...</p>,\n#  <p class=\"story\">...</p>]\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4 import NavigableString\ndef surrounded_by_strings(tag):\n    return (isinstance(tag.next_element, NavigableString)\n            and isinstance(tag.previous_element, NavigableString))\n\nfor tag in soup.find_all(surrounded_by_strings):\n    print tag.name\n# p\n# a\n# a\n# a\n# p\n```\n\n----------------------------------------\n\nTITLE: Navigating the Parse Tree in BeautifulSoup\nDESCRIPTION: These examples show how to navigate the parsed HTML tree using tag names as attributes. This allows for quick access to specific elements in the document structure.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsoup.head\n# <head><title>The Dormouse's story</title></head>\n\nsoup.title\n# <title>The Dormouse's story</title>\n\nsoup.body.b\n# <b>The Dormouse's story</b>\n\nsoup.a\n# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n```\n\n----------------------------------------\n\nTITLE: Filtering by Attribute Values in BeautifulSoup4\nDESCRIPTION: Shows different ways to filter elements based on their attribute values using keyword arguments, regular expressions, and boolean conditions.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(id='link2')\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n```\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(href=re.compile(\"elsie\"))\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>]\n```\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(id=True)\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(href=re.compile(\"elsie\"), id='link1')\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">three</a>]\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by ID in BeautifulSoup4\nDESCRIPTION: Demonstrates how to select elements by their ID attribute using the # notation or by combining element type with ID. This provides a way to directly target specific elements.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nsoup.select(\"#link1\")\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>]\n\nsoup.select(\"a#link2\")\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n```\n\n----------------------------------------\n\nTITLE: Searching by CSS Class with Regular Expressions in BeautifulSoup4\nDESCRIPTION: This snippet demonstrates how to search for elements using regular expressions on CSS class names. It uses the re.compile function to match any class containing 'itl'.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(class_=re.compile(\"itl\"))\n# [<p class=\"title\"><b>The Dormouse's story</b></p>]\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering with find_all() in BeautifulSoup4\nDESCRIPTION: Demonstrates various ways to use find_all() with different types of filters including tag names, classes, and attributes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(\"title\")\n# [<title>The Dormouse's story</title>]\n\nsoup.find_all(\"p\", \"title\")\n# [<p class=\"title\"><b>The Dormouse's story</b></p>]\n\nsoup.find_all(\"a\")\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\nsoup.find_all(id=\"link2\")\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n\nimport re\nsoup.find(text=re.compile(\"sisters\"))\n# u'Once upon a time there were three little sisters; and their names were\\n'\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by CSS Class in BeautifulSoup4\nDESCRIPTION: Shows how to select elements by their CSS class using the dot notation or attribute selector. This is useful for finding all elements with a specific class across the document.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nsoup.select(\".sister\")\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\nsoup.select(\"[class~=sister]\")\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by Attribute Value in BeautifulSoup4\nDESCRIPTION: Demonstrates various ways to select elements based on attribute values using different matching operators. These methods allow for exact, prefix, suffix, and substring matching.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nsoup.select('a[href=\"http://example.com/elsie\"]')\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>]\n\nsoup.select('a[href^=\"http://example.com/\"]')\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\nsoup.select('a[href$=\"tillie\"]')\n# [<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\nsoup.select('a[href*=\".com/el\"]')\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>]\n```\n\n----------------------------------------\n\nTITLE: Using find() to Get a Single Result in BeautifulSoup4\nDESCRIPTION: This snippet demonstrates the find() method, which returns only the first matching element rather than a list. It's more efficient than using find_all() with limit=1.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all('title', limit=1)\n# [<title>The Dormouse's story</title>]\n\nsoup.find('title')\n# <title>The Dormouse's story</title>\n\nprint(soup.find(\"nosuchtag\"))\n# None\n```\n\n----------------------------------------\n\nTITLE: Chaining find() Method Calls in BeautifulSoup4\nDESCRIPTION: This example shows how to chain find() method calls to navigate through nested elements, which is equivalent to using tag name navigation.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nsoup.head.title\n# <title>The Dormouse's story</title>\n\nsoup.find(\"head\").find(\"title\")\n# <title>The Dormouse's story</title>\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Siblings with next_sibling and previous_sibling in BeautifulSoup\nDESCRIPTION: Demonstrates how to navigate between elements at the same level (siblings) using the .next_sibling and .previous_sibling attributes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsibling_soup.b.next_sibling\n# <c>text2</c>\n\nsibling_soup.c.previous_sibling\n# <b>text1</b>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Selectors in BeautifulSoup4 with Python\nDESCRIPTION: Shows how to use CSS selectors with BeautifulSoup4's select() method to find elements using CSS patterns. This provides a powerful way to navigate the document using familiar CSS selector syntax.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nsoup.select(\"title\")\n# [<title>The Dormouse's story</title>]\n\nsoup.select(\"p nth-of-type(3)\")\n# [<p class=\"story\">...</p>]\n\nsoup.select(\"body a\")\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\"  id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\nsoup.select(\"html head title\")\n# [<title>The Dormouse's story</title>]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Functions for Text Selection in BeautifulSoup4\nDESCRIPTION: This snippet shows how to use a custom function with the text parameter to find strings that are the only children of their parent tags.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndef is_the_only_string_within_a_tag(s):\n    \"\"\"Return True if this string is the only child of its parent tag.\"\"\"\n    return (s == s.parent.string)\n\nsoup.find_all(text=is_the_only_string_within_a_tag)\n# [u\"The Dormouse's story\", u\"The Dormouse's story\", u'Elsie', u'Lacie', u'Tillie', u'...']\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Elements with next_elements in BeautifulSoup4\nDESCRIPTION: Shows how to use the next_elements iterator to traverse through all subsequent elements in the document from a given starting point.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfor element in last_a_tag.next_elements:\n    print(repr(element))\n# u'Tillie'\n# u';\\nand they lived at the bottom of a well.'\n# u'\\n\\n'\n# <p class=\"story\">...</p>\n# u'...'\n# u'\\n'\n# None\n```\n\n----------------------------------------\n\nTITLE: Searching by CSS Class in BeautifulSoup4\nDESCRIPTION: Shows how to search for elements with specific CSS classes using the class_ keyword argument, which handles Python's reserved word problem.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(\"a\", class_=\"sister\")\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n----------------------------------------\n\nTITLE: Using extract() Method in Beautiful Soup 4\nDESCRIPTION: Demonstrates how to remove an element from the parse tree and return it using the extract() method. The extracted element becomes the root of its own parse tree.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup = BeautifulSoup(markup)\na_tag = soup.a\n\ni_tag = soup.i.extract()\n\na_tag\n# <a href=\"http://example.com/\">I linked to</a>\n\ni_tag\n# <i>example.com</i>\n\nprint(i_tag.parent)\nNone\n\nmy_string = i_tag.string.extract()\nmy_string\n# u'example.com'\n\nprint(my_string.parent)\n# None\ni_tag\n# <i></i>\n```\n\n----------------------------------------\n\nTITLE: Handling Data Attributes in BeautifulSoup4 Searches\nDESCRIPTION: Demonstrates how to search for elements with HTML5 data attributes by using the attrs parameter with a dictionary of attribute pairs.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndata_soup = BeautifulSoup('<div data-foo=\"value\">foo!</div>')\ndata_soup.find_all(attrs={\"data-foo\": \"value\"})\n# [<div data-foo=\"value\">foo!</div>]\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Content with get_text() in BeautifulSoup\nDESCRIPTION: This snippet demonstrates how to use the get_text() method in BeautifulSoup to extract all text content from a document or specific tag. It shows different options for joining text fragments and handling whitespace.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">\\nI linked to <i>example.com</i>\\n</a>'\nsoup = BeautifulSoup(markup)\n\nsoup.get_text()\nu'\\nI linked to example.com\\n'\nsoup.i.get_text()\nu'example.com'\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Strings with .strings Generator in BeautifulSoup\nDESCRIPTION: Shows how to iterate over all strings contained in a tag and its descendants using the .strings generator, which preserves all whitespace.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfor string in soup.strings:\n    print(repr(string))\n# u\"The Dormouse's story\"\n# u'\\n\\n'\n# u\"The Dormouse's story\"\n# u'\\n\\n'\n# u'Once upon a time there were three little sisters; and their names were\\n'\n# u'Elsie'\n# u',\\n'\n# u'Lacie'\n# u' and\\n'\n# u'Tillie'\n# u';\\nand they lived at the bottom of a well.'\n# u'\\n\\n'\n# u'...'\n# u'\\n'\n```\n\n----------------------------------------\n\nTITLE: Accessing Tag Contents in BeautifulSoup\nDESCRIPTION: Shows how to use the .contents attribute to access a tag's direct children as a list. This example retrieves the contents of the head tag, which contains a title tag.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhead_tag = soup.head\nhead_tag\n# <head><title>The Dormouse's story</title></head>\n\nhead_tag.contents\n[<title>The Dormouse's story</title>]\n\ntitle_tag = head_tag.contents[0]\ntitle_tag\n# <title>The Dormouse's story</title>\ntitle_tag.contents\n# [u'The Dormouse's story']\n```\n\n----------------------------------------\n\nTITLE: Searching for Text Content in BeautifulSoup4\nDESCRIPTION: This snippet demonstrates using the text parameter to search for specific text content within a document, including exact string matching, lists of strings, and regex patterns.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(text=\"Elsie\")\n# [u'Elsie']\n\nsoup.find_all(text=[\"Tillie\", \"Elsie\", \"Lacie\"])\n# [u'Elsie', u'Lacie', u'Tillie']\n\nsoup.find_all(text=re.compile(\"Dormouse\"))\n[u\"The Dormouse's story\", u\"The Dormouse's story\"]\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with BeautifulSoup4\nDESCRIPTION: Shows how to parse XML documents using BeautifulSoup4 by passing 'xml' as the parser argument. Requires lxml to be installed.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_97\n\nLANGUAGE: python\nCODE:\n```\nsoup = BeautifulSoup(markup, \"xml\")\n```\n\n----------------------------------------\n\nTITLE: Recursive Iteration with .descendants in BeautifulSoup\nDESCRIPTION: Demonstrates using the .descendants attribute to recursively iterate over all of a tag's children, including direct children and their children at all levels.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfor child in head_tag.descendants:\n    print(child)\n# <title>The Dormouse's story</title>\n# The Dormouse's story\n```\n\n----------------------------------------\n\nTITLE: Using CSS Selectors for Multiple Class Matching in BeautifulSoup4\nDESCRIPTION: This snippet demonstrates using the select() method with CSS selectors to find elements that match multiple CSS classes, regardless of their order in the class attribute.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ncss_soup.select(\"p.strikeout.body\")\n# [<p class=\"body strikeout\"></p>]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Tag Children with .children Generator in BeautifulSoup\nDESCRIPTION: Shows how to iterate over a tag's direct children using the .children generator instead of accessing them as a list with .contents.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor child in title_tag.children:\n    print(child)\n# The Dormouse's story\n```\n\n----------------------------------------\n\nTITLE: Controlling Search Depth with the recursive Parameter in BeautifulSoup4\nDESCRIPTION: This snippet demonstrates using the recursive parameter to control whether find_all() searches through all descendants or only direct children of an element.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nsoup.html.find_all(\"title\")\n# [<title>The Dormouse's story</title>]\n\nsoup.html.find_all(\"title\", recursive=False)\n# []\n```\n\n----------------------------------------\n\nTITLE: Modifying Tag Names and Attributes in BeautifulSoup4\nDESCRIPTION: Demonstrates how to rename tags and modify their attributes. This allows for changing the structure and properties of HTML/XML elements in the document tree.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nsoup = BeautifulSoup('<b class=\"boldest\">Extremely bold</b>')\ntag = soup.b\n\ntag.name = \"blockquote\"\ntag['class'] = 'verybold'\ntag['id'] = 1\ntag\n# <blockquote class=\"verybold\" id=\"1\">Extremely bold</blockquote>\n\ndel tag['class']\ndel tag['id']\ntag\n# <blockquote>Extremely bold</blockquote>\n```\n\n----------------------------------------\n\nTITLE: Accessing String Content with .string in BeautifulSoup\nDESCRIPTION: Demonstrates how to access a tag's string content using the .string attribute. This works when a tag has only one child that is a NavigableString or if its only child tag has a .string.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntitle_tag.string\n# u'The Dormouse's story'\n```\n\n----------------------------------------\n\nTITLE: Using Sibling CSS Selectors in BeautifulSoup4\nDESCRIPTION: Demonstrates how to use sibling combinators (~ and +) in CSS selectors to find elements that are siblings of other elements. The ~ combinator finds all following siblings while + finds only the next sibling.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nsoup.select(\"#link1 ~ .sister\")\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\"  id=\"link3\">Tillie</a>]\n\nsoup.select(\"#link1 + .sister\")\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n```\n\n----------------------------------------\n\nTITLE: Modifying Element Content in BeautifulSoup4\nDESCRIPTION: Shows how to change the content of an element by setting its .string attribute. This replaces all existing content with the new string, removing any nested elements.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup = BeautifulSoup(markup)\n\ntag = soup.a\ntag.string = \"New link text.\"\ntag\n# <a href=\"http://example.com/\">New link text.</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Element Siblings with next_element and previous_element in BeautifulSoup4\nDESCRIPTION: Demonstrates how to navigate between adjacent elements in the parse tree using next_element and previous_element attributes to move forward and backward through the document as it was parsed.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nlast_a_tag.next_element\n# u'Tillie'\n```\n\nLANGUAGE: python\nCODE:\n```\nlast_a_tag.previous_element\n# u' and\\n'\nlast_a_tag.previous_element.next_element\n# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n```\n\n----------------------------------------\n\nTITLE: Finding All Tags with True Filter in BeautifulSoup4\nDESCRIPTION: Demonstrates how to find all tags in the document by passing True as the filter to find_all(), which matches any tag but not text strings.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfor tag in soup.find_all(True):\n    print(tag.name)\n# html\n# head\n# title\n# body\n# p\n# b\n# p\n# a\n# a\n# a\n# p\n```\n\n----------------------------------------\n\nTITLE: Appending Content to Elements in BeautifulSoup4\nDESCRIPTION: Demonstrates how to add content to an existing element using the append() method. This allows for incrementally building element content without replacing existing content.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nsoup = BeautifulSoup(\"<a>Foo</a>\")\nsoup.a.append(\"Bar\")\n\nsoup\n# <html><head></head><body><a>FooBar</a></body></html>\nsoup.a.contents\n# [u'Foo', u'Bar']\n```\n\n----------------------------------------\n\nTITLE: Creating New Tags in Beautiful Soup 4\nDESCRIPTION: Shows how to create new HTML tags using BeautifulSoup's new_tag() factory method. Demonstrates creating a tag with attributes, appending it to an existing tag, and setting its string content.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nsoup = BeautifulSoup(\"<b></b>\")\noriginal_tag = soup.b\n\nnew_tag = soup.new_tag(\"a\", href=\"http://www.example.com\")\noriginal_tag.append(new_tag)\noriginal_tag\n# <b><a href=\"http://www.example.com\"></a></b>\n\nnew_tag.string = \"Link text.\"\noriginal_tag\n# <b><a href=\"http://www.example.com\">Link text.</a></b>\n```\n\n----------------------------------------\n\nTITLE: Alternative Way to Search by Class Using attrs Parameter in BeautifulSoup4\nDESCRIPTION: This snippet shows how to search for elements by class using the attrs parameter, which is useful for older versions of BeautifulSoup that don't have the class_ shortcut.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(\"a\", attrs={\"class\": \"sister\"})\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n----------------------------------------\n\nTITLE: Searching Elements with Regular Expressions in BeautifulSoup4\nDESCRIPTION: Demonstrates using regular expressions with find_all() to match tag names based on patterns rather than exact strings.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfor tag in soup.find_all(re.compile(\"^b\")):\n    print(tag.name)\n# body\n# b\n```\n\nLANGUAGE: python\nCODE:\n```\nfor tag in soup.find_all(re.compile(\"t\")):\n    print(tag.name)\n# html\n# title\n```\n\n----------------------------------------\n\nTITLE: Using insert_before() and insert_after() in Beautiful Soup 4\nDESCRIPTION: Shows how to insert elements before or after specific elements in the parse tree using insert_before() and insert_after() methods.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nsoup = BeautifulSoup(\"<b>stop</b>\")\ntag = soup.new_tag(\"i\")\ntag.string = \"Don't\"\nsoup.b.string.insert_before(tag)\nsoup.b\n# <b><i>Don't</i>stop</b>\n\nsoup.b.i.insert_after(soup.new_string(\" ever \"))\nsoup.b\n# <b><i>Don't</i> ever stop</b>\nsoup.b.contents\n# [<i>Don't</i>, u' ever ', u'stop']\n```\n\n----------------------------------------\n\nTITLE: Limiting Search Results in BeautifulSoup4\nDESCRIPTION: This snippet shows how to use the limit parameter to restrict the number of results returned by find_all(), which can improve performance for large documents.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(\"a\", limit=2)\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n```\n\n----------------------------------------\n\nTITLE: Combining Tag and Text Searches in BeautifulSoup4\nDESCRIPTION: This example demonstrates combining tag and text searches to find specific tags that contain specific text content.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(\"a\", text=\"Elsie\")\n# [<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>]\n```\n\n----------------------------------------\n\nTITLE: Using insert() Method in Beautiful Soup 4\nDESCRIPTION: Demonstrates how to insert elements at specific positions in a tag's contents using the insert() method. Works similar to Python list's insert() method, allowing positional insertion.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup = BeautifulSoup(markup)\ntag = soup.a\n\ntag.insert(1, \"but did not endorse \")\ntag\n# <a href=\"http://example.com/\">I linked to but did not endorse <i>example.com</i></a>\ntag.contents\n# [u'I linked to ', u'but did not endorse', <i>example.com</i>]\n```\n\n----------------------------------------\n\nTITLE: Using Tag Objects as Function Calls in BeautifulSoup4\nDESCRIPTION: This snippet demonstrates the shortcut syntax where treating a BeautifulSoup or Tag object as a function is equivalent to calling find_all() on that object.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all(\"a\")\nsoup(\"a\")\n\nsoup.title.find_all(text=True)\nsoup.title(text=True)\n```\n\n----------------------------------------\n\nTITLE: Finding Forward Elements with BeautifulSoup4 in Python\nDESCRIPTION: Shows how to locate elements that come after the current element using find_all_next() and find_next(). These methods search through all following elements in the document regardless of nesting level.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nfirst_link = soup.a\nfirst_link\n# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nfirst_link.find_all_next(text=True)\n# [u'Elsie', u',\\n', u'Lacie', u' and\\n', u'Tillie',\n#  u';\\nand they lived at the bottom of a well.', u'\\n\\n', u'...', u'\\n']\n\nfirst_link.find_next(\"p\")\n# <p class=\"story\">...</p>\n```\n\n----------------------------------------\n\nTITLE: Using clear() Method in Beautiful Soup 4\nDESCRIPTION: Shows how to remove all contents from a tag while preserving the tag itself and its attributes using the clear() method.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup = BeautifulSoup(markup)\ntag = soup.a\n\ntag.clear()\ntag\n# <a href=\"http://example.com/\"></a>\n```\n\n----------------------------------------\n\nTITLE: Searching Sibling Elements with find_next_siblings() in BeautifulSoup4\nDESCRIPTION: This example shows how to use find_next_siblings() and find_next_sibling() to locate elements that are siblings of a given element in the document tree.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nfirst_link = soup.a\nfirst_link\n# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nfirst_link.find_next_siblings(\"a\")\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n```\n\n----------------------------------------\n\nTITLE: Finding Previous Elements with BeautifulSoup4 in Python\nDESCRIPTION: Demonstrates how to locate elements that come before the current element using find_all_previous() and find_previous(). These methods search through all preceding elements in the document.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfirst_link = soup.a\nfirst_link\n# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nfirst_link.find_all_previous(\"p\")\n# [<p class=\"story\">Once upon a time there were three little sisters; ...</p>,\n#  <p class=\"title\"><b>The Dormouse's story</b></p>]\n\nfirst_link.find_previous(\"title\")\n# <title>The Dormouse's story</title>\n```\n\n----------------------------------------\n\nTITLE: Comparing Children vs Descendants Count in BeautifulSoup\nDESCRIPTION: Shows the difference between the number of direct children (using .children) versus all descendants (using .descendants) of the BeautifulSoup object.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlen(list(soup.children))\n# 1\nlen(list(soup.descendants))\n# 25\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding New Content in BeautifulSoup4\nDESCRIPTION: Shows how to create new string content and add it to elements. This demonstrates the use of the append() method with a Python string to add content to an element.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nsoup = BeautifulSoup(\"<b></b>\")\ntag = soup.b\ntag.append(\"Hello\")\n```\n\n----------------------------------------\n\nTITLE: Testing for Attribute Existence in BeautifulSoup4\nDESCRIPTION: Shows how to select elements that have a particular attribute, regardless of its value. This approach is useful when you need to find elements that have a specific attribute defined.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nsoup.select('a[href]')\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-valued Attributes in BeautifulSoup\nDESCRIPTION: This code shows how BeautifulSoup handles multi-valued attributes like 'class'. It demonstrates that these attributes are presented as lists and can be manipulated as such.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncss_soup = BeautifulSoup('<p class=\"body strikeout\"></p>')\ncss_soup.p['class']\n# [\"body\", \"strikeout\"]\n\ncss_soup = BeautifulSoup('<p class=\"body\"></p>')\ncss_soup.p['class']\n# [\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Elements in BeautifulSoup\nDESCRIPTION: Shows how to navigate upward in the document tree by accessing an element's parent with the .parent attribute.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntitle_tag = soup.title\ntitle_tag\n# <title>The Dormouse's story</title>\ntitle_tag.parent\n# <head><title>The Dormouse's story</title></head>\n```\n\n----------------------------------------\n\nTITLE: Accessing BeautifulSoup Object's Children\nDESCRIPTION: Demonstrates how to access the BeautifulSoup object's children. In this case, the HTML tag is the child of the BeautifulSoup object.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlen(soup.contents)\n# 1\nsoup.contents[0].name\n# u'html'\n```\n\n----------------------------------------\n\nTITLE: Using SoupStrainer with find_all() in Beautiful Soup\nDESCRIPTION: Shows how to use a SoupStrainer object with the find_all() method to filter parsing results.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nsoup = BeautifulSoup(html_doc)\nsoup.find_all(only_short_strings)\n# [u'\\n\\n', u'\\n\\n', u'Elsie', u',\\n', u'Lacie', u' and\\n', u'Tillie',\n#  u'\\n\\n', u'...', u'\\n']\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Next Siblings with .next_siblings in BeautifulSoup\nDESCRIPTION: Demonstrates how to iterate over all siblings that come after a tag using the .next_siblings generator.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfor sibling in soup.a.next_siblings:\n    print(repr(sibling))\n# u',\\n'\n# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n# u' and\\n'\n# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n# u'; and they lived at the bottom of a well.'\n# None\n```\n\n----------------------------------------\n\nTITLE: Finding Sibling Elements with BeautifulSoup4 in Python\nDESCRIPTION: Demonstrates how to use find_next_sibling() to locate the next sibling element of a paragraph with class 'story'. This method returns the next sibling element that matches the specified criteria.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nfirst_story_paragraph = soup.find(\"p\", \"story\")\nfirst_story_paragraph.find_next_sibling(\"p\")\n# <p class=\"story\">...</p>\n```\n\n----------------------------------------\n\nTITLE: Creating New String Elements in Beautiful Soup 4\nDESCRIPTION: Demonstrates how to create and append new string elements to tags using BeautifulSoup's new_string() method. Shows basic string creation and creation with special string types like Comment.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nnew_string = soup.new_string(\" there\")\ntag.append(new_string)\ntag\n# <b>Hello there.</b>\ntag.contents\n# [u'Hello', u' there']\n\nfrom bs4 import Comment\nnew_comment = soup.new_string(\"Nice to see you.\", Comment)\ntag.append(new_comment)\ntag\n# <b>Hello there<!--Nice to see you.--></b>\ntag.contents\n# [u'Hello', u' there', u'Nice to see you.']\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Previous Siblings with .previous_siblings in BeautifulSoup\nDESCRIPTION: Shows how to iterate over all siblings that come before a tag using the .previous_siblings generator.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfor sibling in soup.find(id=\"link3\").previous_siblings:\n    print(repr(sibling))\n# ' and\\n'\n# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n# u',\\n'\n# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n# u'Once upon a time there were three little sisters; and their names were\\n'\n# None\n```\n\n----------------------------------------\n\nTITLE: Finding Previous Siblings with BeautifulSoup4 in Python\nDESCRIPTION: Demonstrates how to find previous sibling elements using find_previous_siblings() and find_previous_sibling(). These methods find siblings that precede the current element in the document.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nlast_link = soup.find(\"a\", id=\"link3\")\nlast_link\n# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n\nlast_link.find_previous_siblings(\"a\")\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>]\n\nfirst_story_paragraph = soup.find(\"p\", \"story\")\nfirst_story_paragraph.find_previous_sibling(\"p\")\n# <p class=\"title\"><b>The Dormouse's story</b></p>\n```\n\n----------------------------------------\n\nTITLE: Matching Language Codes with CSS Selectors in BeautifulSoup4\nDESCRIPTION: Shows how to use the language code matching attribute selector to find elements with specific language codes or language code prefixes. This is useful for multilingual content processing.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nmultilingual_markup = \"\"\"\n <p lang=\"en\">Hello</p>\n <p lang=\"en-us\">Howdy, y'all</p>\n <p lang=\"en-gb\">Pip-pip, old fruit</p>\n <p lang=\"fr\">Bonjour mes amis</p>\n\"\"\"\nmultilingual_soup = BeautifulSoup(multilingual_markup)\nmultilingual_soup.select('p[lang|=en]')\n# [<p lang=\"en\">Hello</p>,\n#  <p lang=\"en-us\">Howdy, y'all</p>,\n#  <p lang=\"en-gb\">Pip-pip, old fruit</p>]\n```\n\n----------------------------------------\n\nTITLE: Using replace_with() Method in Beautiful Soup 4\nDESCRIPTION: Demonstrates how to replace an element with another element using the replace_with() method. The method returns the element that was replaced.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup = BeautifulSoup(markup)\na_tag = soup.a\n\nnew_tag = soup.new_tag(\"b\")\nnew_tag.string = \"example.net\"\na_tag.i.replace_with(new_tag)\n\na_tag\n# <a href=\"http://example.com/\">I linked to <b>example.net</b></a>\n```\n\n----------------------------------------\n\nTITLE: Searching Parent Elements with find_parents() and find_parent() in BeautifulSoup4\nDESCRIPTION: This snippet demonstrates how to search up the document tree with find_parents() and find_parent() methods, which look at a tag's ancestors rather than descendants.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\na_string = soup.find(text=\"Lacie\")\na_string\n# u'Lacie'\n\na_string.find_parents(\"a\")\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n\na_string.find_parent(\"p\")\n# <p class=\"story\">Once upon a time there were three little sisters; and their names were\n#  <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a> and\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>;\n#  and they lived at the bottom of a well.</p>\n\na_string.find_parents(\"p\", class_=\"title\")\n# []\n```\n\n----------------------------------------\n\nTITLE: Accessing Tag String in BeautifulSoup 4\nDESCRIPTION: Demonstrates the recursive behavior of Tag.string in BeautifulSoup 4. If tag A contains only tag B, A.string is equivalent to B.string.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_100\n\nLANGUAGE: Python\nCODE:\n```\nTag.string\n```\n\n----------------------------------------\n\nTITLE: Specifying Parser Options in BeautifulSoup\nDESCRIPTION: This collection of examples demonstrates different ways to specify which parser BeautifulSoup should use. It shows how to parse content as HTML or XML, and the differences in output between different parser libraries like lxml, html5lib, and html.parser.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nBeautifulSoup(\"<a><b /></a>\")\n# <html><head></head><body><a><b></b></a></body></html>\n```\n\nLANGUAGE: python\nCODE:\n```\nBeautifulSoup(\"<a><b /></a>\", \"xml\")\n# <?xml version=\"1.0\" encoding=\"utf-8\"?>\n# <a><b/></a>\n```\n\nLANGUAGE: python\nCODE:\n```\nBeautifulSoup(\"<a></p>\", \"lxml\")\n# <html><body><a></a></body></html>\n```\n\nLANGUAGE: python\nCODE:\n```\nBeautifulSoup(\"<a></p>\", \"html5lib\")\n# <html><head></head><body><a><p></p></a></body></html>\n```\n\nLANGUAGE: python\nCODE:\n```\nBeautifulSoup(\"<a></p>\", \"html.parser\")\n# <a></a>\n```\n\n----------------------------------------\n\nTITLE: Searching for Multiple Element Types with Lists in BeautifulSoup4\nDESCRIPTION: Shows how to search for multiple different tag types at once by passing a list of tag names to find_all().\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nsoup.find_all([\"a\", \"b\"])\n# [<b>The Dormouse's story</b>,\n#  <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n----------------------------------------\n\nTITLE: Using diagnose() Function for Troubleshooting in Beautiful Soup\nDESCRIPTION: Demonstrates how to use the diagnose() function to get a report on how different parsers handle a document and identify potential issues.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4.diagnose import diagnose\ndata = open(\"bad.html\").read()\ndiagnose(data)\n\n# Diagnostic running on Beautiful Soup 4.2.0\n# Python version 2.7.3 (default, Aug  1 2012, 05:16:07)\n# I noticed that html5lib is not installed. Installing it may help.\n# Found lxml version 2.3.2.0\n#\n# Trying to parse your data with html.parser\n# Here's what html.parser did with the document:\n# ...\n```\n\n----------------------------------------\n\nTITLE: Handling Encodings with BeautifulSoup\nDESCRIPTION: This set of examples shows how BeautifulSoup handles document encodings, automatically converting content to Unicode. It demonstrates detecting original encoding, specifying a known encoding with from_encoding, and controlling output encoding.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nmarkup = \"<h1>Sacr\\xc3\\xa9 bleu!</h1>\"\nsoup = BeautifulSoup(markup)\nsoup.h1\n# <h1>Sacré bleu!</h1>\nsoup.h1.string\n# u'Sacr\\xe9 bleu!'\n\nsoup.original_encoding\n'utf-8'\n```\n\nLANGUAGE: python\nCODE:\n```\nmarkup = b\"<h1>\\xed\\xe5\\xec\\xf9</h1>\"\nsoup = BeautifulSoup(markup)\nsoup.h1\n<h1>νεμω</h1>\nsoup.original_encoding\n'ISO-8859-7'\n\nsoup = BeautifulSoup(markup, from_encoding=\"iso-8859-8\")\nsoup.h1\n<h1>םולש</h1>\nsoup.original_encoding\n'iso8859-8'\n```\n\nLANGUAGE: python\nCODE:\n```\nmarkup = b'''\n <html>\n  <head>\n   <meta content=\"text/html; charset=ISO-Latin-1\" http-equiv=\"Content-type\" />\n  </head>\n  <body>\n   <p>Sacr\\xe9 bleu!</p>\n  </body>\n </html>\n'''\n\nsoup = BeautifulSoup(markup)\nprint(soup.prettify())\n# <html>\n#  <head>\n#   <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-type\" />\n#  </head>\n#  <body>\n#   <p>\n#    Sacré bleu!\n#   </p>\n#  </body>\n# </html>\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(soup.prettify(\"latin-1\"))\n# <html>\n#  <head>\n#   <meta content=\"text/html; charset=latin-1\" http-equiv=\"Content-type\" />\n# ...\n```\n\nLANGUAGE: python\nCODE:\n```\nsoup.p.encode(\"latin-1\")\n# '<p>Sacr\\xe9 bleu!</p>'\n\nsoup.p.encode(\"utf-8\")\n# '<p>Sacr\\xc3\\xa9 bleu!</p>'\n```\n\nLANGUAGE: python\nCODE:\n```\nmarkup = u\"<b>\\N{SNOWMAN}</b>\"\nsnowman_soup = BeautifulSoup(markup)\ntag = snowman_soup.b\n```\n\n----------------------------------------\n\nTITLE: Accessing a String's Parent in BeautifulSoup\nDESCRIPTION: Demonstrates that string objects also have parents - the tag that contains them.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntitle_tag.string.parent\n# <title>The Dormouse's story</title>\n```\n\n----------------------------------------\n\nTITLE: Output Formatting Options in Beautiful Soup 4\nDESCRIPTION: Explains the different formatter options available for controlling how strings are processed when outputting HTML/XML. Shows minimal, HTML, None, and custom formatters.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nfrench = \"<p>Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;</p>\"\nsoup = BeautifulSoup(french)\nprint(soup.prettify(formatter=\"minimal\"))\n# <html>\n#  <body>\n#   <p>\n#    Il a dit &lt;&lt;Sacré bleu!&gt;&gt;\n#   </p>\n#  </body>\n# </html>\n\nprint(soup.prettify(formatter=\"html\"))\n# <html>\n#  <body>\n#   <p>\n#    Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;\n#   </p>\n#  </body>\n# </html>\n\nprint(soup.prettify(formatter=None))\n# <html>\n#  <body>\n#   <p>\n#    Il a dit <<Sacré bleu!>>\n#   </p>\n#  </body>\n# </html>\n\nlink_soup = BeautifulSoup('<a href=\"http://example.com/?foo=val1&bar=val2\">A link</a>')\nprint(link_soup.a.encode(formatter=None))\n# <a href=\"http://example.com/?foo=val1&bar=val2\">A link</a>\n\ndef uppercase(str):\n    return str.upper()\n\nprint(soup.prettify(formatter=uppercase))\n# <html>\n#  <body>\n#   <p>\n#    IL A DIT <<SACRÉ BLEU!>>\n#   </p>\n#  </body>\n# </html>\n\nprint(link_soup.a.prettify(formatter=uppercase))\n# <a href=\"HTTP://EXAMPLE.COM/?FOO=VAL1&BAR=VAL2\">\n#  A LINK\n# </a>\n```\n\n----------------------------------------\n\nTITLE: Parsing Specific Parts of a Document with SoupStrainer in Python\nDESCRIPTION: Demonstrates how to use SoupStrainer to parse only specific parts of an HTML document, such as <a> tags or elements with certain attributes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4 import SoupStrainer\n\nonly_a_tags = SoupStrainer(\"a\")\n\nonly_tags_with_id_link2 = SoupStrainer(id=\"link2\")\n\ndef is_short_string(string):\n    return len(string) < 10\n\nonly_short_strings = SoupStrainer(text=is_short_string)\n\nprint(BeautifulSoup(html_doc, \"html.parser\", parse_only=only_a_tags).prettify())\n# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">\n#  Elsie\n# </a>\n# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">\n#  Lacie\n# </a>\n# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">\n#  Tillie\n# </a>\n\nprint(BeautifulSoup(html_doc, \"html.parser\", parse_only=only_tags_with_id_link2).prettify())\n# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">\n#  Lacie\n# </a>\n\nprint(BeautifulSoup(html_doc, \"html.parser\", parse_only=only_short_strings).prettify())\n# Elsie\n# ,\n# Lacie\n# and\n# Tillie\n# ...\n#\n```\n\n----------------------------------------\n\nTITLE: Traversing All Parents with .parents Generator in BeautifulSoup\nDESCRIPTION: Demonstrates how to iterate upward through all of an element's parents using the .parents generator, from the current tag up to the top of the document.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nlink = soup.a\nlink\n# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\nfor parent in link.parents:\n    if parent is None:\n        print(parent)\n    else:\n        print(parent.name)\n# p\n# body\n# html\n# [document]\n# None\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML Document for BeautifulSoup in Python\nDESCRIPTION: This snippet defines an HTML document as a string, which will be used as an example throughout the documentation to demonstrate BeautifulSoup functionality.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nhtml_doc = \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing .string from Parent Tags in BeautifulSoup\nDESCRIPTION: Shows how a parent tag can access its child's string content when the parent has only one child tag that contains string content.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nhead_tag.contents\n# [<title>The Dormouse's story</title>]\n\nhead_tag.string\n# u'The Dormouse's story'\n```\n\n----------------------------------------\n\nTITLE: Element Traversal with .next_element in BeautifulSoup\nDESCRIPTION: Demonstrates the .next_element attribute which points to whatever was parsed immediately after the current element, which is different from .next_sibling in many cases.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nlast_a_tag = soup.find(\"a\", id=\"link3\")\nlast_a_tag\n# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n\nlast_a_tag.next_sibling\n# '; and they lived at the bottom of a well.'\n```\n\n----------------------------------------\n\nTITLE: Accessing Top Level Tag's Parent in BeautifulSoup\nDESCRIPTION: Shows that the parent of a top-level tag like <html> is the BeautifulSoup object itself, and the BeautifulSoup object has no parent.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nhtml_tag = soup.html\ntype(html_tag.parent)\n# <class 'bs4.BeautifulSoup'>\n\nprint(soup.parent)\n# None\n```\n\n----------------------------------------\n\nTITLE: Navigating Between Tag Siblings with Whitespace in BeautifulSoup\nDESCRIPTION: Shows the nuances of sibling navigation in real documents where tags are often separated by whitespace strings, requiring multiple steps to navigate between visible elements.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nlink = soup.a\nlink\n# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nlink.next_sibling\n# u',\\n'\n\nlink.next_sibling.next_sibling\n# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n```\n\n----------------------------------------\n\nTITLE: Using Direct Descendant CSS Selectors in BeautifulSoup4\nDESCRIPTION: Shows how to use the child combinator (>) in CSS selectors to find elements directly beneath other elements. This provides more precise targeting than general descendant selectors.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nsoup.select(\"head > title\")\n# [<title>The Dormouse's story</title>]\n\nsoup.select(\"p > a\")\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\"  id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n\nsoup.select(\"p > a:nth-of-type(2)\")\n# [<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n\nsoup.select(\"p > #link1\")\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>]\n\nsoup.select(\"body > a\")\n# []\n```\n\n----------------------------------------\n\nTITLE: Creating and Printing a Simple BeautifulSoup Document\nDESCRIPTION: Shows how to create and pretty-print a simple BeautifulSoup document to visualize the structure for sibling navigation examples.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsibling_soup = BeautifulSoup(\"<a><b>text1</b><c>text2</c></b></a>\")\nprint(sibling_soup.prettify())\n# <html>\n#  <body>\n#   <a>\n#    <b>\n#     text1\n#    </b>\n#    <c>\n#     text2\n#    </c>\n#   </a>\n#  </body>\n# </html>\n```\n\n----------------------------------------\n\nTITLE: Using find* Methods with Text and Tag-specific Arguments\nDESCRIPTION: Describes how using both 'text' and tag-specific arguments in find* methods now searches for tags matching the criteria whose Tag.string matches the text value, not the strings themselves.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_102\n\nLANGUAGE: Python\nCODE:\n```\nfind*\n```\n\nLANGUAGE: Python\nCODE:\n```\ntext\n```\n\nLANGUAGE: Python\nCODE:\n```\nname\n```\n\nLANGUAGE: Python\nCODE:\n```\nTag.string\n```\n\n----------------------------------------\n\nTITLE: Using decompose() Method in Beautiful Soup 4\nDESCRIPTION: Shows how to completely remove a tag and its contents from the parse tree using the decompose() method. Unlike extract(), the removed element is destroyed.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup = BeautifulSoup(markup)\na_tag = soup.a\n\nsoup.i.decompose()\n\na_tag\n# <a href=\"http://example.com/\">I linked to</a>\n```\n\n----------------------------------------\n\nTITLE: Handling Edge Cases in Sibling Navigation in BeautifulSoup\nDESCRIPTION: Shows what happens when trying to access .previous_sibling or .next_sibling for elements that don't have siblings in those directions.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nprint(sibling_soup.b.previous_sibling)\n# None\nprint(sibling_soup.c.next_sibling)\n# None\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-valued Attributes in BeautifulSoup 4\nDESCRIPTION: Explains that multi-valued attributes like 'class' are now represented as lists of strings instead of a single string. This may affect CSS class-based searches.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_101\n\nLANGUAGE: Python\nCODE:\n```\nclass\n```\n\n----------------------------------------\n\nTITLE: Using wrap() Method in Beautiful Soup 4\nDESCRIPTION: Shows how to wrap an element in another tag using the wrap() method. The method returns the new wrapper tag.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nsoup = BeautifulSoup(\"<p>I wish I was bold.</p>\")\nsoup.p.string.wrap(soup.new_tag(\"b\"))\n# <b>I wish I was bold.</b>\n\nsoup.p.wrap(soup.new_tag(\"div\")\n# <div><p><b>I wish I was bold.</b></p></div>\n```\n\n----------------------------------------\n\nTITLE: Using UnicodeDammit for Unknown Encodings in Python\nDESCRIPTION: Shows how to use the UnicodeDammit class to convert text with unknown encoding to Unicode, with and without specifying potential encodings.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4 import UnicodeDammit\ndammit = UnicodeDammit(\"Sacr\\xc3\\xa9 bleu!\")\nprint(dammit.unicode_markup)\n# Sacré bleu!\ndammit.original_encoding\n# 'utf-8'\n\ndammit = UnicodeDammit(\"Sacr\\xe9 bleu!\", [\"latin-1\", \"iso-8859-1\"])\nprint(dammit.unicode_markup)\n# Sacré bleu!\ndammit.original_encoding\n# 'latin-1'\n```\n\n----------------------------------------\n\nTITLE: Handling Inconsistent Encodings with UnicodeDammit in Python\nDESCRIPTION: Shows how to use UnicodeDammit.detwingle() to convert a document with mixed UTF-8 and Windows-1252 encodings into pure UTF-8.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_93\n\nLANGUAGE: python\nCODE:\n```\nsnowmen = (u\"\\N{SNOWMAN}\" * 3)\nquote = (u\"\\N{LEFT DOUBLE QUOTATION MARK}I like snowmen!\\N{RIGHT DOUBLE QUOTATION MARK}\")\ndoc = snowmen.encode(\"utf8\") + quote.encode(\"windows_1252\")\n\nprint(doc)\n# ☃☃☃�I like snowmen!�\n\nprint(doc.decode(\"windows-1252\"))\n# â˜ƒâ˜ƒâ˜ƒ\"I like snowmen!\"\n\nnew_doc = UnicodeDammit.detwingle(doc)\nprint(new_doc.decode(\"utf8\"))\n# ☃☃☃\"I like snowmen!\"\n```\n\n----------------------------------------\n\nTITLE: Using unwrap() Method in Beautiful Soup 4\nDESCRIPTION: Demonstrates how to replace a tag with its contents using the unwrap() method, effectively removing the tag while preserving its contents. Returns the tag that was unwrapped.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup = BeautifulSoup(markup)\na_tag = soup.a\n\na_tag.i.unwrap()\na_tag\n# <a href=\"http://example.com/\">I linked to example.com</a>\n```\n\n----------------------------------------\n\nTITLE: Encoding HTML Tags with Unicode Characters in Python\nDESCRIPTION: Demonstrates how Beautiful Soup handles encoding of HTML tags containing Unicode characters for different encodings (UTF-8, Latin-1, ASCII).\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nprint(tag.encode(\"utf-8\"))\n# <b>☃</b>\n\nprint tag.encode(\"latin-1\")\n# <b>&#9731;</b>\n\nprint tag.encode(\"ascii\")\n# <b>&#9731;</b>\n```\n\n----------------------------------------\n\nTITLE: BeautifulSoup4 Import Statement\nDESCRIPTION: Example showing the new import syntax for BeautifulSoup4, demonstrating the change from the old 'BeautifulSoup' module name to the new 'bs4' module name.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/NEWS.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom bs4 import BeautifulSoup\n```\n\n----------------------------------------\n\nTITLE: Accessing Strings with Whitespace Stripped in BeautifulSoup\nDESCRIPTION: Demonstrates using the .stripped_strings generator to iterate over strings with whitespace removed from beginning and end, and with whitespace-only strings ignored.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfor string in soup.stripped_strings:\n    print(repr(string))\n# u\"The Dormouse's story\"\n# u\"The Dormouse's story\"\n# u'Once upon a time there were three little sisters; and their names were'\n# u'Elsie'\n# u','\n# u'Lacie'\n# u'and'\n# u'Tillie'\n# u';\\nand they lived at the bottom of a well.'\n# u'...'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTML Entity Formatter in Python with BeautifulSoup\nDESCRIPTION: This snippet demonstrates how to create a custom formatter function for BeautifulSoup that both converts text to uppercase and substitutes characters with HTML entities. The custom formatter is then applied to the prettify() method to format the output.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4.dammit import EntitySubstitution\ndef uppercase_and_substitute_html_entities(str):\n    return EntitySubstitution.substitute_html(str.upper())\n\nprint(soup.prettify(formatter=uppercase_and_substitute_html_entities))\n# <html>\n#  <body>\n#   <p>\n#    IL A DIT &lt;&lt;SACR&Eacute; BLEU!&gt;&gt;\n#   </p>\n#  </body>\n# </html>\n```\n\n----------------------------------------\n\nTITLE: Using CData Objects with BeautifulSoup in Python\nDESCRIPTION: This example shows how to create a CData object with BeautifulSoup, which preserves the exact content without any formatting. The code demonstrates that even when using a formatter, the content inside a CData object remains unaltered.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4.element import CData\nsoup = BeautifulSoup(\"<a></a>\")\nsoup.a.string = CData(\"one < three\")\nprint(soup.a.prettify(formatter=\"xml\"))\n# <a>\n#  <![CDATA[one < three]]>\n# </a>\n```\n\n----------------------------------------\n\nTITLE: Using prettify() for Formatted Output in Beautiful Soup 4\nDESCRIPTION: Shows how to generate a nicely formatted representation of the parse tree using the prettify() method, with each HTML/XML tag on its own line.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nmarkup = '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup = BeautifulSoup(markup)\nsoup.prettify()\n# '<html>\\n <head>\\n </head>\\n <body>\\n  <a href=\"http://example.com/\">\\n...'\n\nprint(soup.prettify())\n# <html>\n#  <head>\n#  </head>\n#  <body>\n#   <a href=\"http://example.com/\">\n#    I linked to\n#    <i>\n#     example.com\n#    </i>\n#   </a>\n#  </body>\n# </html>\n\nprint(soup.a.prettify())\n# <a href=\"http://example.com/\">\n#  I linked to\n#  <i>\n#   example.com\n#  </i>\n# </a>\n```\n\n----------------------------------------\n\nTITLE: BeautifulSoup Generator Usage Example\nDESCRIPTION: Shows the syntax for using BeautifulSoup parent generators, comparing old and new styles. The new style uses properties instead of generator methods.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nfor parent in tag.parentGenerator():\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nfor parent in tag.parents:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Exact String Matching for CSS Classes in BeautifulSoup4\nDESCRIPTION: This example shows how to search for elements with an exact CSS class string value. It demonstrates that order matters when searching for multiple classes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ncss_soup.find_all(\"p\", class_=\"body strikeout\")\n# [<p class=\"body strikeout\"></p>]\n\ncss_soup.find_all(\"p\", class_=\"strikeout body\")\n# []\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by CSS Class Length in BeautifulSoup4\nDESCRIPTION: This snippet shows how to use a custom function as a filter for find_all(). The function 'has_six_characters' checks if a CSS class exists and has exactly 6 characters.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ndef has_six_characters(css_class):\n    return css_class is not None and len(css_class) == 6\n\nsoup.find_all(class_=has_six_characters)\n# [<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\n#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>]\n```\n\n----------------------------------------\n\nTITLE: BeautifulSoup3 to BeautifulSoup4 Import Migration\nDESCRIPTION: Demonstrates how to update import statements when migrating from BS3 to BS4. The package name changes from BeautifulSoup to bs4.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nfrom BeautifulSoup import BeautifulSoup\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom bs4 import BeautifulSoup\n```\n\n----------------------------------------\n\nTITLE: Non-pretty Printing in Beautiful Soup 4\nDESCRIPTION: Demonstrates how to get string representations of Beautiful Soup objects without formatting, using str(), unicode(), encode(), and decode() methods.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nstr(soup)\n# '<html><head></head><body><a href=\"http://example.com/\">I linked to <i>example.com</i></a></body></html>'\n\nunicode(soup.a)\n# u'<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\n```\n\n----------------------------------------\n\nTITLE: Testing Basic and Nested HTML Tables\nDESCRIPTION: Examples of a basic table and a table nested within another table. Tests parser's handling of table structures and nesting.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div><table><tr><td>Here's a table</td></tr></table></div>\n<div><table id=\"1\"><tr><td>Here's a nested table:<table id=\"2\"><tr><td>foo</td></tr></table></td></div>\n```\n\n----------------------------------------\n\nTITLE: Converting Microsoft Smart Quotes with UnicodeDammit in Python\nDESCRIPTION: Demonstrates how to use UnicodeDammit to convert Microsoft smart quotes to HTML, XML entities, or ASCII quotes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_92\n\nLANGUAGE: python\nCODE:\n```\nmarkup = b\"<p>I just \\x93love\\x94 Microsoft Word\\x92s smart quotes</p>\"\n\nUnicodeDammit(markup, [\"windows-1252\"], smart_quotes_to=\"html\").unicode_markup\n# u'<p>I just &ldquo;love&rdquo; Microsoft Word&rsquo;s smart quotes</p>'\n\nUnicodeDammit(markup, [\"windows-1252\"], smart_quotes_to=\"xml\").unicode_markup\n# u'<p>I just &#x201C;love&#x201D; Microsoft Word&#x2019;s smart quotes</p>'\n\nUnicodeDammit(markup, [\"windows-1252\"], smart_quotes_to=\"ascii\").unicode_markup\n# u'<p>I just \"love\" Microsoft Word\\'s smart quotes</p>'\n\nUnicodeDammit(markup, [\"windows-1252\"]).unicode_markup\n# u'<p>I just \\u201clove\\u201d Microsoft Word\\u2019s smart quotes</p>'\n```\n\n----------------------------------------\n\nTITLE: XML CDATA Section Parsing Example\nDESCRIPTION: Examples showing how different parsers handle CDATA sections in XML/HTML markup, demonstrating the conversion of CDATA sections to text nodes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/NEWS.txt#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<p><![CDATA[foo]]></p> => <p></p>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<svg><![CDATA[foo]]></svg> => <p>foo</p>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<p><![CDATA[foo]]></p> => <p>foo</p>\n```\n\n----------------------------------------\n\nTITLE: Using prettify() Method in BeautifulSoup 4\nDESCRIPTION: Notes that the prettify() method now returns a Unicode string instead of a bytestring in BeautifulSoup 4.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/doc/source/index.rst#2025-04-23_snippet_103\n\nLANGUAGE: Python\nCODE:\n```\nprettify()\n```\n\n----------------------------------------\n\nTITLE: HTML Attribute Parsing Example\nDESCRIPTION: Shows problematic HTML attribute parsing scenarios that were handled differently between SGMLParser and HTMLParser. Demonstrates challenges with unclosed attributes and nested brackets.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/NEWS.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"foo</a>, </a><a href=\"bar\">baz</a>\n<a b=\"<a>\">', '<a b=\"&lt;a&gt;\"></a><a>\"></a>\n```\n\n----------------------------------------\n\nTITLE: Testing Entity Handling in HTML\nDESCRIPTION: Example of an HTML entity (AT&T) that should be properly handled by parsers. Tests the parser's ability to correctly interpret character entities.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>AT&T</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Entity Handling Example\nDESCRIPTION: Demonstrates how HTML entities in attributes are handled, particularly focusing on the difference between Python 2 and 3 parsing behavior.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/NEWS.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"http://crummy.com?sacr&eacute;&bleu\">\n```\n\n----------------------------------------\n\nTITLE: XML Declaration Example in BeautifulSoup4\nDESCRIPTION: Demonstrates the XML declaration output when BeautifulSoup instance has is_xml set to True. Shows the basic structure of XML output with proper declaration and encoding specification.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/NEWS.txt#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\">\n<markup>\n ...\n</markup>\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Meta Tags and BR Tags with Content\nDESCRIPTION: Examples of standalone meta tags and incorrectly closed br tags with content. Tests parser's handling of void elements and inappropriate content.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>A <meta> tag</div>\n<div>A <br> tag that supposedly has contents.</br></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Improperly Nested Block Elements\nDESCRIPTION: Example of improperly nested block elements where tags are closed out of order. Tests parser's correction of invalid nesting structures.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div><blockquote><p><b>This p tag is cut off by</blockquote></p>the end of the blockquote tag</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Malformed Attribute Syntax in HTML\nDESCRIPTION: Example of a CSS style attribute with incorrect syntax using curly braces instead of quotes. Tests parser's attribute value error recovery.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div><a style={height:21px;}>That attribute value was bogus</a></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Unclosed and Nested Links with Newlines\nDESCRIPTION: Example of complex nesting with an unclosed link tag and proper nesting with newlines. Tests parser's handling of unclosed tags in nested structures.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div><div id=\"1\">\\n <a href=\"link1\">This link is never closed.\\n</div>\\n<div id=\"2\">\\n <div id=\"3\">\\n   <a href=\"link2\">This link is closed.</a>\\n  </div>\\n</div></div>\n```\n\n----------------------------------------\n\nTITLE: Traversing HTML Tree with Shorthand Syntax in Beautiful Soup 2.x\nDESCRIPTION: Example demonstrating how to traverse an HTML document tree using Beautiful Soup 2.x's shorthand syntax. This code iterates through table header elements by chaining member access shortcuts.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/NEWS.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor header in soup.bodyTag.pTag.tableTag('th'):\n```\n\n----------------------------------------\n\nTITLE: Testing Standard XHTML 1.0 DOCTYPE Declaration\nDESCRIPTION: Example of a standard XHTML 1.0 Transitional DOCTYPE declaration with a URL reference to the DTD. Tests parser's handling of complete DOCTYPE declarations.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n```\n\n----------------------------------------\n\nTITLE: Testing DOCTYPE Declarations in HTML Parsing\nDESCRIPTION: Examples of DOCTYPE declarations with different formats including SYSTEM and PUBLIC identifiers. This tests how parsers handle DTD references.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE xsl:stylesheet SYSTEM \"htmlent.dtd\">\n<!DOCTYPE xsl:stylesheet PUBLIC \"htmlent.dtd\">\n```\n\n----------------------------------------\n\nTITLE: Testing CDATA Section Handling in HTML\nDESCRIPTION: Examples of CDATA sections in regular HTML (where they don't belong) and in SVG content (where HTML5 allows them). Tests parser's ability to handle CDATA blocks in different contexts.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div><![CDATA[A CDATA section where it doesn't belong]]></div>\n<div><svg><![CDATA[HTML5 does allow CDATA sections in SVG]]></svg></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure Example for Sibling Relationships\nDESCRIPTION: HTML example used to explain the concept of previousSibling and nextSibling relationships in Beautiful Soup 2.x. This snippet shows a nested list structure to illustrate how sibling relationships are established.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/NEWS.txt#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<p><ul><li>Foo<br /><li>Bar</ul>\n```\n\n----------------------------------------\n\nTITLE: Testing Unclosed Attribute Values in HTML\nDESCRIPTION: Examples of unclosed attribute values and attribute values closed by subsequent tags. Tests parser's error recovery for malformed attributes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div><a href=\"http://example.com/</a> that attribute value never got closed</div>\n<div><a href=\"foo</a>, </a><a href=\"bar\">that attribute value was closed by the subsequent tag</a></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Bogus HTML Declarations\nDESCRIPTION: Examples of bogus declarations, including one at the start of the document and incomplete declarations. Tests how parsers handle malformed declaration syntax.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<! This document starts with a bogus declaration ><div>a</div>\n<div>This document contains <!an incomplete declaration <div>(do you see it?)</div>\n<div>This document ends with <!an incomplete declaration\n```\n\n----------------------------------------\n\nTITLE: Testing Nonexistent and Incomplete Entities\nDESCRIPTION: Examples of a nonexistent entity reference and an entity reference that's cut off at the end of the document. Tests parser's entity error handling.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div>Here's a nonexistent entity: &#foo; (do you see it?)</div>\n<div>This document ends before the entity finishes: &gt\n```\n\n----------------------------------------\n\nTITLE: Testing Tags Containing Only Whitespace\nDESCRIPTION: Example of a tag that contains nothing but whitespace. Tests parser's handling of elements with whitespace-only content.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div>This tag contains nothing but whitespace: <b>    </b></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Mixed Case Tag Handling\nDESCRIPTION: Example of mixed case tags that should be folded to lowercase in HTML. Tests parser's case normalization of element names.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div><a><B><Cd><EFG>Mixed case tags are folded to lowercase</efg></CD></b></A></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Malformed Numeric Entity in HTML\nDESCRIPTION: Example of a numeric entity missing its final semicolon. Tests the parser's entity recovery capabilities.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>This numeric entity is missing the final semicolon: <x t=\"pi&#241ata\"></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Literal Text in Special HTML Elements\nDESCRIPTION: Examples of textarea and script elements where markup inside should be treated as literal text, not parsed as HTML. Tests parser's handling of these special elements.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div><textarea>Within a textarea, markup like <b> tags and <&<&amp; should be treated as literal</textarea></div>\n<div><script>if (i < 2) { alert(\"<b>Markup within script tags should be treated as literal.</b>\"); }</script></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Improper Element Nesting in HTML\nDESCRIPTION: Example of a paragraph containing a definition list, which is invalid HTML structure. Tests parser's handling of improper block element nesting.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div><p>Paragraphs shouldn't contain block display elements, but this one does: <dl><dt>you see?</dt></p>\n```\n\n----------------------------------------\n\nTITLE: Testing Boolean Attributes Without Values\nDESCRIPTION: Example of a boolean attribute (nowrap) without a value. Tests parser's handling of minimized boolean attributes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div><table><td nowrap>That boolean attribute had no value</td></table></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Duplicate Attributes in HTML\nDESCRIPTION: Example of a tag with multiple instances of the same attribute. Tests parser's handling of duplicate attributes.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<b b=\"20\" a=\"1\" b=\"10\" a=\"2\" a=\"3\" a=\"4\">Multiple values for the same attribute.</b>\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Element Placement in Tables\nDESCRIPTION: Example of a div directly inside a table, which is invalid in HTML. Tests parser's handling of improper table content models.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<div><table><div>This table contains bare markup</div></table></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Unicode Characters in HTML Element and Attribute Names\nDESCRIPTION: Examples of Unicode characters (snowman) in tag names and attribute names. Tests parser's Unicode support in element and attribute identifiers.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<div><our☃>Tag name contains Unicode characters</our☃></div>\n<div><a ☃=\"snowman\">Attribute name contains Unicode characters</a></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid DOCTYPE with Extra Whitespace\nDESCRIPTION: Example of an invalid DOCTYPE declaration containing extra whitespace. Tests parser's ability to handle malformed DOCTYPE syntax.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<! DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\">The doctype is invalid because it contains extra whitespace\n```\n\n----------------------------------------\n\nTITLE: Testing Surprise DOCTYPE in HTML Content\nDESCRIPTION: Example of a DOCTYPE declaration appearing in the middle of document content. Tests parser's handling of unexpected DOCTYPE placement.\nSOURCE: https://github.com/wention/beautifulsoup4/blob/master/scripts/demonstration_markup.txt#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div>This document contains a <!DOCTYPE surprise>surprise doctype</div>\n```"
  }
]