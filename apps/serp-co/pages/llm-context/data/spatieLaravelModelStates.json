[
  {
    "owner": "spatie",
    "repo": "laravel-model-states",
    "content": "TITLE: Defining a Transition Class in Laravel Model States\nDESCRIPTION: Demonstrates how to define a transition class that handles the state change from a pending payment to a paid payment. The transition class specifies the from and to states, and implements the handle method to execute the transition logic.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass PendingToPaidTransition implements Transition\n{\n    private Payment $payment;\n    \n    public function __construct(Payment $payment)\n    {\n        $this->payment = $payment;\n    }\n    \n    public function handle(): Payment\n    {\n        return DB::transaction(function () {\n            $this->payment->state = new Paid($this->payment);\n            \n            $this->payment->paid_at = now();\n            \n            $this->payment->save();\n            \n            return $this->payment;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract PaymentState Class in Laravel\nDESCRIPTION: This snippet demonstrates how to create an abstract PaymentState class that extends the State class, defining an abstract color method and configuring allowed state transitions.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\State;\nuse Spatie\\ModelStates\\StateConfig;\n\nabstract class PaymentState extends State\n{\n    abstract public function color(): string;\n    \n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->default(Pending::class)\n            ->allowTransition(Pending::class, Paid::class)\n            ->allowTransition(Pending::class, Failed::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasStates Trait in Laravel Model\nDESCRIPTION: This snippet shows how to use the HasStates trait in a Laravel model to enable state support. It allows the model to have multiple state fields.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\HasStates;\n\nclass Payment extends Model\n{\n    use HasStates;\n\n    // …\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Abstract State Class in Laravel Model States\nDESCRIPTION: Shows the implementation of an abstract PaymentState class that extends the package's State class. It defines an abstract color method and configures allowed state transitions.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/01-introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\State;\nuse Spatie\\ModelStates\\StateConfig;\n\nabstract class PaymentState extends State\n{\n    abstract public function color(): string;\n    \n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->default(Pending::class)\n            ->allowTransition(Pending::class, Paid::class)\n            ->allowTransition(Pending::class, Failed::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic State Transitions in PHP\nDESCRIPTION: Shows how to configure both simple and custom transitions between state classes in the config method. It demonstrates allowing specific transitions from one state to another, with optional custom transition classes.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/01-configuring-transitions.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nabstract class PaymentState extends State\n{\n    // …\n\n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->allowTransition(Pending::class, Paid::class)\n            ->allowTransition(Pending::class, Failed::class, PendingToFailed::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring States Using Attributes in PHP 8+\nDESCRIPTION: This snippet demonstrates how to use PHP 8 attributes to configure state transitions, default state, and register additional states.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\Attributes\\AllowTransition;\nuse Spatie\\ModelStates\\Attributes\\RegisterState;\nuse Spatie\\ModelStates\\State;\n\n#[\n    AllowTransition(Pending::class, Paid::class),\n    AllowTransition(Pending::class, Failed::class),\n    DefaultState(Pending::class),\n    RegisterState(Cancelled::class),\n    RegisterState([ExampleOne::class, ExampleTwo::class]),\n]\nabstract class PaymentState extends State\n{\n    abstract public function color(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Available Transitions in Laravel Model States\nDESCRIPTION: Shows how to register available transitions for a model by implementing the registerStates method. This method maps source states to their possible transitions, enabling the package to manage state changes effectively.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Payment extends Model\n{\n    // …\n    \n    protected function registerStates(): void\n    {\n        $this->addState('state', PendingState::class)\n            ->allowTransition(PendingState::class, PaidState::class, PendingToPaidTransition::class)\n            ->allowTransition(PendingState::class, FailedState::class, PendingToFailedTransition::class)\n            //…\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Transitions in Laravel Model States\nDESCRIPTION: This snippet shows how to configure allowed state transitions using the StateConfig class in an abstract PaymentState class. It defines transitions from Pending to Paid and from Paid to Refunded states.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/04-retrieving-transitionable-states.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nabstract class PaymentState extends State\n{\n    // …\n\n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->allowTransition(Pending::class, Paid::class)\n            ->allowTransition(Paid::class, Refunded::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using State Transitions in Laravel Model States\nDESCRIPTION: Demonstrates how to find a model instance, transition it to a new state, and use a state-specific method. The example shows transitioning a payment to the Paid state and accessing its color.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/01-introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$payment = Payment::find(1);\n\n$payment->state->transitionTo(Paid::class);\n\necho $payment->state->color();\n```\n\n----------------------------------------\n\nTITLE: Using State Transitions and Methods in Laravel\nDESCRIPTION: This snippet demonstrates how to use state transitions and access state-specific methods on a Payment model instance.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$payment = Payment::find(1);\n\n$payment->state->transitionTo(Paid::class);\n\necho $payment->state->color();\n```\n\n----------------------------------------\n\nTITLE: Executing a Transition in Laravel Model States\nDESCRIPTION: Demonstrates how to execute a transition between states by using the transition method on the model. This example shows transitioning from a pending state to a paid state.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$payment = Payment::find($id);\n\n$payment->state->transitionTo(PaidState::class);\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract State Class in Laravel\nDESCRIPTION: This abstract class represents a payment state and includes a method that concrete state classes must implement.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\State;\n\n/**\n * @extends State<\\App\\Models\\Payment>\n */\nabstract class PaymentState extends State\n{\n    abstract public function color(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using State Transitions in PHP\nDESCRIPTION: Demonstrates how to execute a transition between states on a model. The transition will only work if it's been properly configured, otherwise an exception is thrown.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/01-configuring-transitions.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$payment->state->transitionTo(Paid::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Transition Class in Laravel Model States\nDESCRIPTION: A transition class that handles changing a payment state from pending to failed while also storing an error message. It extends the Spatie\\ModelStates\\Transition class and implements the handle method to update the model.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/02-custom-transition-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\Transition;\n\nclass PendingToFailed extends Transition\n{\n    private Payment $payment;\n\n    private string $message;\n\n    public function __construct(Payment $payment, string $message)\n    {\n        $this->payment = $payment;\n\n        $this->message = $message;\n    }\n\n    public function handle(): Payment\n    {\n        $this->payment->state = new Failed($this->payment);\n        $this->payment->failed_at = now();\n        $this->payment->error_message = $this->message;\n\n        $this->payment->save();\n\n        return $this->payment;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Transitions and Default State\nDESCRIPTION: This method configures the default state and allowed transitions for the PaymentState class.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\State;\nuse Spatie\\ModelStates\\StateConfig;\n\nabstract class PaymentState extends State\n{\n    abstract public function color(): string;\n    \n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->default(Pending::class)\n            ->allowTransition(Pending::class, Paid::class)\n            ->allowTransition(Pending::class, Failed::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting State Field in Laravel Model\nDESCRIPTION: This snippet shows how to cast the 'state' field to the PaymentState class in the Payment model.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Payment extends Model\n{\n    // …\n\n    protected $casts = [\n        'state' => PaymentState::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Transitions in Laravel Model State Configuration\nDESCRIPTION: Configuration of the state transition in the model's state class by extending the parent config and defining allowed transitions. This example registers the PendingToFailed transition class to handle state changes from Pending to Failed.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/02-custom-transition-classes.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nabstract class PaymentState extends State\n{\n    // …\n\n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->allowTransition(Pending::class, Failed::class, PendingToFailed::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authorization in Transitions with Laravel Model States\nDESCRIPTION: Demonstrates implementing authorization checks for transitions by specifying which users can execute certain transitions. The authorize method checks user permissions before allowing a transition to proceed.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/_index.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass PendingToPaidTransition implements Transition\n{\n    // …\n    \n    public function authorize(User $user): bool\n    {\n        return $user->can('update', $this->payment);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Default State in Laravel Model States\nDESCRIPTION: Demonstrates how to create a Payment model that will use a default state (Pending). The state field in the database will store the fully qualified class name.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/02-serializing-states.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$payment = Payment::create();\n```\n\n----------------------------------------\n\nTITLE: Using Transitions in a Model\nDESCRIPTION: Shows how to trigger a state transition on a model by calling the transitionTo method on the state field.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/01-configuring-transitions.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$payment->state->transitionTo(Paid::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Concrete State Class in Laravel Model States\nDESCRIPTION: Shows the implementation of a concrete Paid state class that extends the abstract PaymentState class. It implements the required color method to return 'green'.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/01-introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Paid extends PaymentState\n{\n    public function color(): string\n    {\n        return 'green';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasStatesContract for Improved Type Hinting\nDESCRIPTION: This snippet shows how to implement the HasStatesContract interface in a model for improved type hinting when working with state objects.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\HasStates;\nuse Spatie\\ModelStates\\HasStatesContract;\n\nclass Payment extends Model implements HasStatesContract\n{\n    use HasStates;\n\n    // …\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Concrete Paid State Class in Laravel\nDESCRIPTION: This snippet shows the implementation of a concrete Paid state class that extends the abstract PaymentState class and defines the color method.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Paid extends PaymentState\n{\n    public function color(): string\n    {\n        return 'green';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the StateChanged Event in Laravel Model States\nDESCRIPTION: The event class that is dispatched when a state transition is successfully performed. This event contains references to the initial state, final state, transition class, and the model on which the transition was performed.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/05-transition-events.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\\Spatie\\ModelStates\\Events\\StateChanged\n```\n\n----------------------------------------\n\nTITLE: Handling Transition Validation in Laravel Model States\nDESCRIPTION: Shows how to implement the can method in a transition class to add validation logic that determines if a transition can occur. This example validates that a payment amount is at least €10 before allowing a transition.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/_index.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass PendingToPaidTransition implements Transition\n{\n    // …\n    \n    public function can(): bool\n    {\n        return $this->payment->amount >= 10;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for State Field\nDESCRIPTION: This migration adds a 'state' string column to the payments table to store the serialized state.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('payments', function (Blueprint $table) {\n    $table->string('state');\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in State Transition Classes in PHP\nDESCRIPTION: This example demonstrates how to automatically inject dependencies into the handle() method of a transition class. The dependencies are resolved from Laravel's service container, allowing for clean dependency management in state transitions.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/03-dependency-injection-in-transition-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass TransitionWithDependency extends Transition\n{\n    // …\n\n    public function handle(Dependency $dependency)\n    {\n        // $dependency is resolved from the container\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting Transitions with Authorization in Laravel Model States\nDESCRIPTION: Shows how to execute a transition with authorization checks by using the transitionTo method and passing the current user. This ensures the transition is only performed if the user has permission.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/_index.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$payment = Payment::find($id);\n\n$payment->state->transitionTo(PaidState::class, Auth::user());\n```\n\n----------------------------------------\n\nTITLE: Executing a State Transition with Parameters in Laravel\nDESCRIPTION: Example of triggering a state transition using the transitionTo method with additional parameters. The parameters are passed to the transition class constructor after the model instance.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/02-custom-transition-classes.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$payment->state->transitionTo(Failed::class, 'error message');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered States for Invoice Model in Laravel\nDESCRIPTION: This snippet demonstrates how to retrieve all registered states for the Invoice model using the getStates() method. It returns a collection of state morph names grouped by column.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/03-listing-states.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[\n    \"state\" => [\n        'declined',\n        'paid',\n        'pending',\n    ],\n    \"fulfillment\" => [\n        'complete',\n        'partial',\n        'unfulfilled',\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Models with State Scopes in Laravel Model States\nDESCRIPTION: Examples of using whereState, orWhereState, whereNotState, and orWhereNotState scopes to filter model collections based on state values. These methods accept a column name and either a single state class or an array of state classes.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/querybuilder-support/01-state-scopes.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$payments = Payment::whereState('state', Paid::class);\n$payments = Payment::whereState('state', [Pending::class, Paid::class]);\n$payments = Payment::whereState('state', Pending::class)->orWhereState('state', Paid::class);\n\n$payments = Payment::whereNotState('state', Pending::class);\n$payments = Payment::whereNotState('state', [Failed::class, Canceled::class]);\n$payments = Payment::whereNotState('state', Failed::class)->orWhereNotState('state', Canceled::class);\n```\n\n----------------------------------------\n\nTITLE: Checking State Transition Possibility in Laravel Model States\nDESCRIPTION: This code snippet demonstrates how to use the canTransitionTo method to check if the current state can transition to another specific state (in this case, Paid).\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/04-retrieving-transitionable-states.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$payment->state->canTransitionTo(Paid::class);\n```\n\n----------------------------------------\n\nTITLE: Allowing All State Transitions in PHP\nDESCRIPTION: Shows how to allow all possible transitions between registered states. States extending the abstract class and in the same directory are automatically registered.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/01-configuring-transitions.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nabstract class PaymentState extends State\n{\n    // …\n\n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->allowAllTransitions();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom State Validation in Laravel Form Request\nDESCRIPTION: Shows how to implement the custom validation rule within a Laravel Form Request class. The example demonstrates validating state transitions for an order model.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/request-validation/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass OrderStateRequest extends FormRequest\n{\n    public function rules(): array\n    {\n        /** @var \\App\\Models\\Order $order */\n        $order = $this->route('order');\n    \n        return [\n            'state' => [\n                'required',\n                new ValidOrderStateRule($order),\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Registering States in Laravel\nDESCRIPTION: This method demonstrates how to manually register state classes and configure transitions when state classes are in different directories.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\State;\nuse Spatie\\ModelStates\\StateConfig;\n\nuse Your\\Concrete\\State\\Class\\Cancelled;\nuse Your\\Concrete\\State\\Class\\ExampleOne;\nuse Your\\Concrete\\State\\Class\\ExampleTwo;\n\nabstract class PaymentState extends State\n{\n    abstract public function color(): string;\n    \n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->default(Pending::class)\n            ->allowTransition(Pending::class, Paid::class)\n            ->allowTransition(Pending::class, Failed::class)\n            ->registerState(Cancelled::class)\n            ->registerState([ExampleOne::class, ExampleTwo::class])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Concrete State Class in Laravel\nDESCRIPTION: This class represents a specific payment state (Paid) and implements the required color method.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Paid extends PaymentState\n{\n    public function color(): string\n    {\n        return 'green';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Transition Exceptions in Laravel Model States\nDESCRIPTION: Demonstrates how to catch and handle different types of transition exceptions that may occur during state transitions, including validation failures, authorization denials, and invalid transition attempts.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/_index.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntry {\n    $payment->state->transitionTo(PaidState::class);\n} catch (TransitionNotFound $e) {\n    // No transition was defined from this state to PaidState\n} catch (TransitionNotAllowed $e) {\n    // The `can` method of the transition determined that the transition cannot be executed right now\n} catch (AuthorizationException $e) {\n    // The `authorize` method of the transition denied execution permission\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Default Transition Class in PHP\nDESCRIPTION: Extends the DefaultTransition class to add a custom 'silent' parameter that can be used in event listeners.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/06-custom-default-transition-class.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\DefaultTransition;\nuse Spatie\\ModelStates\\State;\n\nclass CustomDefaultTransitionWithAttributes extends DefaultTransition\n{\n    public function __construct($model, string $field, State $newState, public bool $silent = false)\n    {\n        parent::__construct($model, $field, $newState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transition Validation with canTransition Method\nDESCRIPTION: Adding validation logic to a transition class by implementing the canTransition method. This ensures the transition can only be performed when the model is in a specific state, throwing an exception otherwise.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/02-custom-transition-classes.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass CreatedToFailed extends Transition\n{\n    // …\n\n    public function canTransition(): bool\n    {\n        return $this->payment->state->equals(Created::class);\n    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Multiple From States in a Single Transition\nDESCRIPTION: Demonstrates how to configure multiple source states that can transition to the same destination state in a single configuration call.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/01-configuring-transitions.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nabstract class PaymentState extends State\n{\n    // …\n\n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->allowTransition([Created::class, Pending::class], Failed::class, ToFailed::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Rule for State Transitions in Laravel\nDESCRIPTION: Demonstrates how to create a custom validation rule that checks if a requested state transition is valid. This rule verifies if the new state is allowed based on the current state of a model.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/request-validation/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Validation\\Rule;\nuse Spatie\\ModelStates\\Validation\\ValidStateRule;\n\nclass ValidOrderStateRule implements Rule\n{\n    private $order;\n    \n    public function __construct(Order $order)\n    {\n        $this->order = $order;\n    }\n    \n    public function passes($attribute, $value): bool\n    {\n        // Use the provided ValidStateRule to check if the state is valid\n        // for this specific order\n        return (new ValidStateRule($this->order, 'status'))\n            ->passes($attribute, $value);\n    }\n    \n    public function message(): string\n    {\n        return 'The given state transition is invalid';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered States for Specific Column in Laravel\nDESCRIPTION: This snippet shows how to retrieve registered states for a specific column ('state') of the Invoice model using the getStatesFor() method. It returns a collection of state classes.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/03-listing-states.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[\n    'declined',\n    'paid',\n    'pending',\n],\n```\n\n----------------------------------------\n\nTITLE: Validating State Values with ValidStateRule in Laravel\nDESCRIPTION: This snippet demonstrates how to use the ValidStateRule class to validate incoming request data for state values. It shows both a basic usage and how to allow null values. The rule ensures that only valid state values of the specified state class (e.g., PaymentState) are allowed.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/request-validation/01-state-validation-rule.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\Validation\\ValidStateRule;\n\nrequest()->validate([\n    'state' => new ValidStateRule(PaymentState::class),\n]);\n\n// Allowing null\nrequest()->validate([\n    'state' => ValidStateRule::make(PaymentState::class)->nullable(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Transition Parameters in Service Class\nDESCRIPTION: Service class example demonstrating how to use the custom 'silent' parameter when transitioning a model's state, allowing control over notification behavior.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/06-custom-default-transition-class.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass OrderService {\n    public function markAsPaid(Order $order): void\n    {\n        // Will trigger notification\n        $order->state->transitionTo(PaidState::class);\n        // Also can be specified explicitly\n        $order->state->transitionTo(PaidState::class, false);\n    }\n\n    public function markAsPaidSilently(Order $order): void\n    {\n        // Will not trigger notification\n        $order->state->transitionTo(PaidState::class, true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transitionable States in Laravel Model States\nDESCRIPTION: This code demonstrates how to retrieve an array of transitionable states for the current state of a payment object using the transitionableStates() method.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/04-retrieving-transitionable-states.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$transitionableStates = $payment->state->transitionableStates();\n```\n\n----------------------------------------\n\nTITLE: Example Output of Transitionable States in Laravel Model States\nDESCRIPTION: This snippet shows the example output of the transitionableStates() method for a Pending state, which returns an array containing the next possible state (\"paid\").\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/04-retrieving-transitionable-states.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[\n    0 => \"paid\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Invoice Model with States in Laravel\nDESCRIPTION: This snippet shows how to set up an Invoice model with multiple states using the Laravel Model States package. It defines two state columns: 'state' for invoice status and 'fulfillment' for order fulfillment status.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/03-listing-states.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse App\\States\\Invoice\\InvoiceState;\nuse App\\States\\Invoice\\Declined;\nuse App\\States\\Invoice\\Paid;\nuse App\\States\\Invoice\\Pending;\nuse App\\States\\Fulfillment\\FulfillmentState;\nuse App\\States\\Fulfillment\\Complete;\nuse App\\States\\Fulfillment\\Partial;\nuse App\\States\\Fulfillment\\Unfulfilled;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\ModelStates\\HasStates;\n\nclass Invoice extends Model\n{\n    use HasStates;\n\n    protected $casts = [\n        'state' => InvoiceState::class,\n        'fulfillment' => FulfillmentState::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default State for Specific Column in Laravel\nDESCRIPTION: This snippet shows how to retrieve the default state for a specific column ('state') of the Invoice model using the getDefaultStateFor() method. It returns the default state class for the specified column.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/03-listing-states.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'App\\States\\Invoice\\Pending'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default States for Invoice Model in Laravel\nDESCRIPTION: This snippet demonstrates how to retrieve all default states for the Invoice model using the getDefaultStates() method. It returns a collection of state classes, keyed by column.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/03-listing-states.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[\n    \"state\" => 'App\\States\\Invoice\\Pending',\n    \"fulfillment\" => null,\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Model States Package via Composer\nDESCRIPTION: This snippet shows the command to install the Laravel Model States package using Composer.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-model-states\n```\n\n----------------------------------------\n\nTITLE: Defining Custom State Name for Serialization in Laravel Model States\nDESCRIPTION: Shows how to define a custom serialized name for a state class using the static $name property. This name will be stored in the database instead of the full class name.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/02-serializing-states.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Paid extends PaymentState\n{\n    public static $name = 'paid';\n\n    // …\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning States in Laravel Model States v1.x\nDESCRIPTION: Demonstrates how state transitions were performed in version 1.x of the Laravel Model States package, requiring explicit field specification.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/UPGRADING.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$model->canTransitionTo(StateB::class, 'status');\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment with Explicit State Class in Laravel Model States\nDESCRIPTION: Demonstrates creating a Payment model with an explicitly defined state. Even though the state is specified using the class name, it will be serialized using the custom name in the database.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/02-serializing-states.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$payment = Payment::create([\n    'state' => Paid::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Project Metadata in Markdown\nDESCRIPTION: This snippet defines metadata for the Laravel Model States project, including the version, slogan, GitHub URL, and branch information. It uses YAML-like syntax within a Markdown file.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: v2\nslogan: Advanced state support for Laravel models\ngithubUrl: https://github.com/spatie/laravel-model-states\nbranch: main\n---\n```\n\n----------------------------------------\n\nTITLE: Ignoring Same State Transitions in PHP\nDESCRIPTION: Shows how to configure the state machine to ignore transitions to the same state without throwing exceptions. Also demonstrates the use of multiple from states in a single transition definition.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/01-configuring-transitions.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nabstract class PaymentState extends State\n{\n    // …\n\n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->ignoreSameState()\n            ->allowTransition([Created::class, Pending::class], Failed::class, ToFailed::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IgnoreSameState Attribute in PHP\nDESCRIPTION: Demonstrates how to use the IgnoreSameState attribute at the class level to ignore transitions to the same state.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/01-configuring-transitions.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[IgnoreSameState]\nabstract class PaymentState extends State\n{\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Transitions at Once in PHP\nDESCRIPTION: Shows how to use the allowTransitions shorthand method to define multiple transitions in a single call.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/01-configuring-transitions.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nabstract class PaymentState extends State\n{\n    // …\n\n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->allowTransitions([\n                [Pending::class, Paid::class],\n                [Pending::class, Failed::class, PendingToFailed::class],\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom StateChanged Event in Laravel\nDESCRIPTION: This configuration method shows how to register a custom event to be fired when the state changes.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-states/01-configuring-states.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\State;\nuse Spatie\\ModelStates\\StateConfig;\n\nuse Your\\Concrete\\State\\Event\\CustomStateChanged;\n\nabstract class PaymentState extends State\n{\n    abstract public function color(): string;\n    \n    public static function config(): StateConfig\n    {\n        return parent::config()\n            ->stateChangedEvent(CustomStateChanged::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing State Change Event Listener with Custom Parameter\nDESCRIPTION: Event listener that uses the custom 'silent' parameter to determine whether to send notifications after a state change.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/06-custom-default-transition-class.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\Events\\StateChanged;\n\nclass OrderStateChangedListener\n{\n    public function handle(StateChanged $event): void\n    {\n        $isSilent = $event->transition->silent;\n\n        $this->processOrderState($event->model);\n\n        if (! $isSilent) {\n            $this->notifyUser($event->model);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Transition Class in Laravel Configuration\nDESCRIPTION: Configuration setup in model-states.php to register the custom default transition class for use throughout the application.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/06-custom-default-transition-class.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default_transition' => CustomDefaultTransitionWithAttributes::class\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Direct Transition Instance in Laravel Model States\nDESCRIPTION: Alternative approach to execute a transition by directly instantiating the transition class and passing it to the transition method. This provides better IDE autocompletion support.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/working-with-transitions/02-custom-transition-classes.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$payment->state->transition(new CreatedToFailed($payment, 'error message'));\n```\n\n----------------------------------------\n\nTITLE: Implementing HasStates Trait in Laravel Eloquent Model\nDESCRIPTION: This snippet shows how to use the HasStates trait in a Payment model and cast the state attribute to a custom PaymentState class.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\HasStates;\n\nclass Payment extends Model\n{\n    use HasStates;\n\n    protected $casts = [\n        'state' => PaymentState::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Model with State Support in Laravel\nDESCRIPTION: Demonstrates how to configure a Payment model to use the ModelStates package. The model uses the HasStates trait and casts the state attribute to the PaymentState class.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/01-introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\ModelStates\\HasStates;\n\nclass Payment extends Model\n{\n    use HasStates;\n\n    protected $casts = [\n        'state' => PaymentState::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using State Scopes with Qualified Column Names in Laravel Model States\nDESCRIPTION: Examples showing how to use state scopes with fully qualified column names, which is useful when dealing with joins or when specifying the table name is necessary.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/querybuilder-support/01-state-scopes.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$payments = Payment::whereState('payments.state', Paid::class);\n\n$payments = Payment::whereNotState('payments.state', Pending::class);\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Model States Config File\nDESCRIPTION: This snippet demonstrates the Artisan command to publish the configuration file for the Laravel Model States package.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\ModelStates\\ModelStatesServiceProvider\" --tag=\"model-states-config\"\n```\n\n----------------------------------------\n\nTITLE: Publishing the Configuration File\nDESCRIPTION: Artisan command to publish the laravel-model-states configuration file to your Laravel application.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/04-installation-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\ModelStates\\ModelStatesServiceProvider\" --tag=\"model-states-config\"\n```\n\n----------------------------------------\n\nTITLE: Default Configuration File Contents\nDESCRIPTION: The default PHP configuration for laravel-model-states that specifies the default transition class used by the package.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/04-installation-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /*\n     * The fully qualified class name of the default transition.\n     */\n    'default_transition' => Spatie\\ModelStates\\DefaultTransition::class,\n\n];\n```\n\n----------------------------------------\n\nTITLE: Laravel Model States Package Configuration\nDESCRIPTION: This snippet shows the contents of the published configuration file for the Laravel Model States package, specifying the default transition class.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /*\n     * The fully qualified class name of the default transition.\n     */\n    'default_transition' => Spatie\\ModelStates\\DefaultTransition::class,\n\n];\n```\n\n----------------------------------------\n\nTITLE: Transitioning States in Laravel Model States v2.x\nDESCRIPTION: Shows the new method for state transitions in version 2.x, where states are aware of their fields, simplifying the API and reducing boilerplate code.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/UPGRADING.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$model->status->canTransitionTo(StateB::class);\n```\n\n----------------------------------------\n\nTITLE: Using State Transitions in Laravel Model States (New Approach)\nDESCRIPTION: Shows the new approach introduced in v2 where states are aware of their fields, enabling more fluent state transitions without needing to specify the field name.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$model->status->canTransitionTo(StateB::class);\n```\n\n----------------------------------------\n\nTITLE: Using State Transitions in Laravel Model States (Old Approach)\nDESCRIPTION: Demonstrates the old approach to state transitions in Laravel Model States v1, where the field name had to be explicitly specified when checking if a transition was possible.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$model->canTransitionTo(StateB::class, 'status');\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Laravel Model States Package\nDESCRIPTION: This snippet shows the command to run tests for the Laravel Model States package using Composer.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Installing laravel-model-states via Composer\nDESCRIPTION: Command to install the laravel-model-states package using Composer dependency manager.\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/04-installation-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-model-states\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the about page, defining the title and weight parameters for page ordering\nSOURCE: https://github.com/spatie/laravel-model-states/blob/main/docs/07-about-us.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: About us\nweight: 7\n---\n```"
  }
]