[
  {
    "owner": "planetscale",
    "repo": "database-js",
    "content": "TITLE: Basic Database Connection and Query\nDESCRIPTION: Demonstrates how to establish a basic connection to PlanetScale database and execute a query using TypeScript.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@planetscale/database'\n\nconst config = {\n  host: '<host>',\n  username: '<user>',\n  password: '<password>'\n}\n\nconst conn = connect(config)\nconst results = await conn.execute('select 1 from dual where 1=?', [1])\nconsole.log(results)\n```\n\n----------------------------------------\n\nTITLE: Database Transaction Implementation\nDESCRIPTION: Shows how to implement database transactions with automatic rollback on errors.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@planetscale/database'\n\nconst config = {\n  host: '<host>',\n  username: '<user>',\n  password: '<password>'\n}\n\nconst conn = connect(config)\nconst results = await conn.transaction(async (tx) => {\n  const whenBranch = await tx.execute('INSERT INTO branches (database_id, name) VALUES (?, ?)', [42, \"planetscale\"])\n  const whenCounter = await tx.execute('INSERT INTO slotted_counters(record_type, record_id, slot, count) VALUES (?, ?, RAND() * 100, 1) ON DUPLICATE KEY UPDATE count = count + 1', ['branch_count', 42])\n  return [whenBranch, whenCounter]\n})\nconsole.log(results)\n```\n\n----------------------------------------\n\nTITLE: Installing PlanetScale Database Driver\nDESCRIPTION: Command to install the PlanetScale database package via npm.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @planetscale/database\n```\n\n----------------------------------------\n\nTITLE: Database URL Configuration\nDESCRIPTION: Shows how to configure the database connection using a URL string instead of separate credentials.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@planetscale/database'\n\nconst config = {\n  url: process.env['DATABASE_URL'] || 'mysql://user:pass@host'\n}\n\nconst conn = connect(config)\n```\n\n----------------------------------------\n\nTITLE: Connection Factory Implementation\nDESCRIPTION: Demonstrates using the Client connection factory class for creating fresh connections per transaction.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client } from '@planetscale/database'\n\nconst client = new Client({\n  host: '<host>',\n  username: '<user>',\n  password: '<password>'\n})\n\nconst conn = client.connection()\nconst results = await conn.execute('select 1 from dual')\nconsole.log(results)\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Formatting\nDESCRIPTION: Examples of using different query parameter formats and custom formatting implementation.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst results1 = await conn.execute('select 1 from dual where 1=?', [42])\nconst results2 = await conn.execute('select 1 from dual where 1=:id', { id: 42 })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@planetscale/database'\nimport SqlString from 'sqlstring'\n\nconst config = {\n  format: SqlString.format,\n  host: '<host>',\n  username: '<user>',\n  password: '<password>'\n}\n\nconst conn = connect(config)\nconst results = await conn.execute('select 1 from dual where 1=?', [42])\nconsole.log(results)\n```\n\n----------------------------------------\n\nTITLE: Custom Type Casting\nDESCRIPTION: Examples of implementing custom type casting functions for specific data types.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect, cast } from '@planetscale/database'\n\nfunction inflate(field, value) {\n  if (field.type === 'INT64' || field.type === 'UINT64') {\n    return BigInt(value)\n  }\n  return cast(field, value)\n}\n\nconst config = {\n  cast: inflate,\n  host: '<host>',\n  username: '<user>',\n  password: '<password>'\n}\n\nconst conn = connect(config)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await conn.execute(\n  'SELECT userId, SUM(balance) AS balance FROM UserBalanceItem GROUP BY userId',\n  {},\n  {\n    cast: (field, value) => {\n      if (field.name === 'balance') {\n        return BigInt(value)\n      }\n      return cast(field, value)\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Row Return Value Formatting\nDESCRIPTION: Shows how to specify return value format as objects or arrays.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = 'select 1 as one, 2 as two where 1=?'\nconst objects = conn.execute(query, [1], { as: 'object' })\n// objects.rows => [{one: '1', two: '2'}]\n\nconst arrays = conn.execute(query, [1], { as: 'array' })\n// arrays.rows => [['1', '2']]\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch Implementation\nDESCRIPTION: Examples of implementing custom fetch functions using undici and fetch-h2 for older Node.js versions.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@planetscale/database'\nimport { fetch } from 'undici'\n\nconst config = {\n  fetch,\n  host: '<host>',\n  username: '<user>',\n  password: '<password>'\n}\n\nconst conn = connect(config)\nconst results = await conn.execute('select 1 from dual')\nconsole.log(results)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@planetscale/database'\nimport { context } from 'fetch-h2'\nconst { fetch, disconnectAll } = context()\n\nconst config = {\n  fetch,\n  host: '<host>',\n  username: '<user>',\n  password: '<password>'\n}\n\nconst conn = connect(config)\nconst results = await conn.execute('select 1 from dual')\nconsole.log(results)\nawait disconnectAll()\n```\n\n----------------------------------------\n\nTITLE: SQL Test Data Reference\nDESCRIPTION: SQL file that contains seed data used to populate a PlanetScale branch with test cases covering different column types, collations, and character sets.\nSOURCE: https://github.com/planetscale/database-js/blob/main/golden/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntest.sql\n```\n\n----------------------------------------\n\nTITLE: Development Setup\nDESCRIPTION: Commands for setting up the development environment and running tests.\nSOURCE: https://github.com/planetscale/database-js/blob/main/README.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Table Structure and Data in Plaintext Format\nDESCRIPTION: A plaintext representation of a database table showing column headers and a single row of sample data. The table includes various data types such as integers, floats, dates, timestamps, JSON, and binary data in hexadecimal format.\nSOURCE: https://github.com/planetscale/database-js/blob/main/golden/cli.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nn| id | a    | b    | c    | d    | e    | f    | g    | h    | i    | j          | k          | l                   | m                   | n        | o    | p    | q    | r          | s          | t          | u          | v          | w          | x    | y    | z    | aa   | ab   | ac      | ad           | ae                                                                                                                           | af                                                   | ag                                                                                                                           | ah                                                                                                                                                                                                                                                                                                           | ai   | aj   | ak   | al   | xa   | xb   | xc         | xd   |\nn|  1 |    1 |    1 |    1 |    1 |    1 |  1.1 |  1.1 |  1.1 |  1.1 | 0x07       | 1000-01-01 | 1000-01-01 01:01:01 | 1970-01-01 00:01:01 | 01:01:01 | 2006 | p    | q    | 0x72000000 | 0x73       | 0x74       | 0x75       | 0x76       | 0x77       | x    | y    | z    | aa   | foo  | foo,bar | {\"ad\": null} | 0x0000000001020000000300000000000000000000000000000000000000000000000000F03F000000000000F03F00000000000000400000000000000000 | 0x000000000101000000000000000000F03F000000000000F03F | 0x0000000001020000000300000000000000000000000000000000000000000000000000F03F000000000000F03F00000000000000400000000000000000 | 0x00000000010300000002000000040000000000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000000000000000000000000000000000000000004000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F |    1 |    1 |    1 |    1 | xa   | xb   | 0x78630000 | xd   |\nn```"
  }
]