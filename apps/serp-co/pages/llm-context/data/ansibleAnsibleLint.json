[
  {
    "owner": "ansible",
    "repo": "ansible-lint",
    "content": "TITLE: Installing Ansible-lint with exact dependencies\nDESCRIPTION: This command installs Ansible-lint with pinned dependency versions that were used for testing. This requires Python 3.10+ and should only be used in a virtual environment.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/installing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install \"ansible-lint[lock]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible-lint from source\nDESCRIPTION: This command installs Ansible-lint directly from the GitHub repository source code using pip3. Requires pip version 22.3.1 or newer.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/installing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip3 install git+https://github.com/ansible/ansible-lint\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Task With Changed-When\nDESCRIPTION: Example showing proper implementation of a command module with result registration and changed_when condition. This code properly tracks changes by monitoring the return code of the command.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_changed_when.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Handle shell output with return code\n      ansible.builtin.command: cat {{ my_file | quote }}\n      register: my_output # <- Registers the command output.\n      changed_when: my_output.rc != 0 # <- Uses the return code to define when the task has changed.\n```\n\n----------------------------------------\n\nTITLE: Correct Key Ordering in Ansible Playbook\nDESCRIPTION: Example of correct key ordering in an Ansible playbook with 'name' as the first key for the play and the 'when' condition appearing before the 'block' statement.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/key-order.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: This is a playbook\n  hosts: localhost\n  tasks:\n    - name: A block\n      when: true\n      block:\n        - name: Display a message\n          debug:\n            msg: \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: PEP8 Output Format Example\nDESCRIPTION: Shows PEP8-formatted output from Ansible-lint\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ansible-lint --offline -q -f pep8 examples/playbooks/norole.yml\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Safe Usage of ini_file and copy Modules in Ansible\nDESCRIPTION: This snippet provides three safe examples: using ini_file with create: false to prevent file creation, using ini_file with explicit mode setting, and using copy with mode: preserve to maintain source file permissions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/risky_file_permissions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Safe example of using ini_file (1st solution)\n  community.general.ini_file:\n    path: foo\n    create: false  # prevents creating a file with potentially insecure permissions\n\n- name: Safe example of using ini_file (2nd solution)\n  community.general.ini_file:\n    path: foo\n    mode: \"0600\"  # explicitly sets the desired permissions, to make the results predictable\n\n- name: Safe example of using copy (3rd solution)\n  ansible.builtin.copy:\n    src: foo\n    dest: bar\n    mode: preserve   # copy has a special mode that sets the same permissions as the source file\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible-lint with pip3\nDESCRIPTION: This command installs the latest version of Ansible-lint using the pip3 Python package manager. It will also install ansible-core if not already installed.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/installing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This also installs ansible-core if it is not already installed\npip3 install ansible-lint\n```\n\n----------------------------------------\n\nTITLE: Corrected Examples of Safe File Operations in Ansible\nDESCRIPTION: This example demonstrates three safe approaches to file operations: preventing automatic file creation, explicitly setting secure permissions with mode, and preserving source file permissions when copying.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/risky-file-permissions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Safe example of using ini_file (1st solution)\n  community.general.ini_file:\n    path: foo\n    create: false  # prevents creating a file with potentially insecure permissions\n\n- name: Safe example of using ini_file (2nd solution)\n  community.general.ini_file:\n    path: foo\n    mode: \"0600\"  # explicitly sets the desired permissions, to make the results predictable\n\n- name: Safe example of using copy (3rd solution)\n  ansible.builtin.copy:\n    src: foo\n    dest: bar\n    mode: preserve   # copy has a special mode that sets the same permissions as the source file\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible-lint on Fedora/RHEL\nDESCRIPTION: This command installs Ansible-lint using the dnf package manager on Fedora or Red Hat Enterprise Linux systems.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/installing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndnf install ansible-lint\n```\n\n----------------------------------------\n\nTITLE: Correct Module Arguments in Ansible Tasks\nDESCRIPTION: Examples of properly formatted module arguments that satisfy the args rule. Shows tasks with ansible.builtin.git including the required 'repo' parameter, systemd with the 'name' parameter required by 'enabled', and assert with a correct boolean value for the 'quiet' option.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/args.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Fixture to validate module options pass scenario\n  hosts: localhost\n  tasks:\n    - name: Clone content repository\n      ansible.builtin.git: # <- Contains required option `repo`.\n        repo: https://github.com/ansible/ansible-examples\n        dest: /home/www\n        accept_hostkey: true\n        version: master\n        update: false\n\n    - name: Enable service httpd and ensure it is not masked\n      ansible.builtin.systemd: # <- Contains 'name' parameter required by 'enabled'.\n        name: httpd\n        enabled: false\n        masked: false\n\n    - name: Use quiet to avoid verbose output\n      ansible.builtin.assert:\n        that:\n          - my_param <= 100\n          - my_param >= 0\n        quiet: True # <- Has correct type value for option `quiet` which is boolean.\n```\n\n----------------------------------------\n\nTITLE: SARIF JSON Output Format\nDESCRIPTION: Generates SARIF JSON formatted output from Ansible-lint\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nansible-lint --offline -q -f sarif examples/playbooks/norole.yml\n```\n\n----------------------------------------\n\nTITLE: Correct Privilege Escalation Implementation\nDESCRIPTION: Demonstrates proper implementation of privilege escalation with both become and become_user directives either at task level or playbook level.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/partial_become.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Start the httpd service as the apache user\n      ansible.builtin.service:\n        name: httpd\n        state: started\n      become: true # <- Activates privilege escalation.\n      become_user: apache # <- Changes the user with the desired privileges.\n\n# Stand alone playbook alternative, applies to all tasks\n\n- name: Example playbook\n  hosts: localhost\n  become: true # <- Activates privilege escalation.\n  become_user: apache # <- Changes the user with the desired privileges.\n  tasks:\n    - name: Start the httpd service as the apache user\n      ansible.builtin.service:\n        name: httpd\n        state: started\n```\n\n----------------------------------------\n\nTITLE: Pre-commit Configuration for Ansible-lint (YAML)\nDESCRIPTION: This YAML configuration sets up Ansible-lint with the pre-commit tool. It includes settings for automatic updates, specifies the Ansible-lint repository, and provides options for additional dependencies if needed.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/configuring.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nci:\n  autoupdate_schedule: monthly\nrepos:\n- repo: https://github.com/ansible/ansible-lint\n  rev: ... # put latest release tag from https://github.com/ansible/ansible-lint/releases/\n  hooks:\n    - id: ansible-lint\n      # Uncomment if you need the full Ansible community bundle instead of ansible-core:\n      # additional_dependencies:\n      #   - ansible\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for private repositories\nDESCRIPTION: This GitHub Actions step configures Git to use an access token for authentication when installing roles and collections from private repositories. Add this before the ansible-lint step.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/installing.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Prepare Git for Github\n  shell: bash\n  run: |\n    git config --global url.\"https://${{ secrets.ANSIBLE_LINT_TOKEN }}@github.com\".insteadOf \"https://github.com\"\n```\n\n----------------------------------------\n\nTITLE: Correct Package Installation in Ansible Playbook (YAML)\nDESCRIPTION: This snippet demonstrates correct package installation practices in Ansible. It shows examples of using specific versions, 'state: present', and proper constraints for updates across different package managers to ensure controlled and safe software installation.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/package-latest.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Install Ansible\n      ansible.builtin.dnf:\n        name: ansible-2.12.7.0\n        state: present # <- Pins the version to install with dnf.\n\n    - name: Install Ansible-lint\n      ansible.builtin.pip:\n        name: ansible-lint\n      args:\n        state: present\n        version: 5.4.0 # <- Pins the version to install with pip.\n\n    - name: Install some-package\n      ansible.builtin.package:\n        name: some-package\n        state: present # <- Ensures the package is installed.\n\n    - name: Update sudo with update_only to true\n      ansible.builtin.dnf:\n        name: sudo\n        state: latest\n        update_only: true # <- Updates but does not install additional packages.\n\n    - name: Install sudo with only_upgrade to true\n      ansible.builtin.apt:\n        name: sudo\n        state: latest\n        only_upgrade: true # <- Upgrades but does not install additional packages.\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Ansible-lint\nDESCRIPTION: This YAML configuration creates a GitHub Actions workflow that runs Ansible-lint on pull requests to specific branches. The action runs on Ubuntu 24.04 and uses the latest version of ansible-lint.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/installing.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/ansible-lint.yml\nname: ansible-lint\non:\n  pull_request:\n    branches: [\"stable\", \"release/v*\"]\njobs:\n  build:\n    name: Ansible Lint # Naming the build is important to use it as a status check\n    runs-on: ubuntu-24.04\n    steps:\n      - uses: actions/checkout@v4\n      - name: Run ansible-lint\n        uses: ansible/ansible-lint@main\n        # optional (see below):\n        with:\n          args: \"\"\n          setup_python: \"true\"\n          working_directory: \"\"\n          requirements_file: \"\"\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Hosts Variable Usage with Default Filter\nDESCRIPTION: Example showing the proper way to handle potentially undefined variables in the hosts block using the Jinja default() filter. This approach prevents syntax-check failures by providing an empty list as a fallback value.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/syntax_check.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Good use of variable inside hosts, without assumptions\n  hosts: \"{{ my_hosts | default([]) }}\"\n  tasks: []\n```\n\n----------------------------------------\n\nTITLE: Registering Errors for Evaluation in Ansible Playbook\nDESCRIPTION: An improved error handling approach that registers the task results including any errors, enabling subsequent tasks to make decisions based on the error details rather than simply ignoring them.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/ignore-errors.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.command: apt-get update\n      ignore_errors: true\n      register: ignore_errors_register # <- Stores errors and failures for evaluation.\n```\n\n----------------------------------------\n\nTITLE: Correct Code Using Spaces Instead of Tabs in Ansible YAML\nDESCRIPTION: Example playbook that properly uses spaces instead of tab characters, following the no-tabs rule best practice. This avoids potential formatting issues in Ansible code.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Do not trigger the no-tabs rule\n      ansible.builtin.debug:\n        msg: \"Using space characters avoids formatting issues.\"\n```\n\n----------------------------------------\n\nTITLE: Correct Template Module Usage\nDESCRIPTION: Example showing proper usage of the ansible.builtin.template module by referencing files from within the templates directory without using relative paths.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_relative_paths.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Template a file to /etc/file.conf\n      ansible.builtin.template:\n        src: foo.j2 # <- Uses a path from inside templates/ directory.\n        dest: /etc/file.conf\n        owner: bin\n        group: wheel\n        mode: \"0644\"\n```\n\n----------------------------------------\n\nTITLE: Correct File Synchronization and Archive Extraction in Ansible\nDESCRIPTION: This example shows the correct usage of the ansible.posix.synchronize and ansible.builtin.unarchive modules, preventing owner and group transfer across hosts by setting appropriate options.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_same_owner.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Synchronize conf file\n      ansible.posix.synchronize:\n        src: /path/conf.yaml\n        dest: /path/conf.yaml\n        owner: false\n        group: false # <- Does not transfer the owner and group for the file.\n    - name: Extract tarball to path\n      ansible.builtin.unarchive:\n        src: \"{{ file }}.tar.gz\"\n        dest: /my/path/\n        extra_opts:\n          - --no-same-owner # <- Does not transfer the owner and group for the file.\n```\n\n----------------------------------------\n\nTITLE: Implementing Correct Ansible Task and Play Naming Conventions\nDESCRIPTION: This snippet demonstrates the correct implementation of naming conventions in Ansible. It includes a properly named play and a task with correct capitalization.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/name.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Play for creating placeholder\n  hosts: localhost\n  tasks:\n    - name: Create placeholder file\n      ansible.builtin.command: touch /tmp/.placeholder\n```\n\n----------------------------------------\n\nTITLE: Correct Use of Conditionals in Ansible Tasks\nDESCRIPTION: This example demonstrates the correct way to use conditional statements in Ansible without Jinja brackets. The 'when' clause inherently processes its content as a Jinja expression, so the brackets are unnecessary and problematic.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-jinja-when.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Shut down Debian systems\n      ansible.builtin.command: /sbin/shutdown -t now\n      when: ansible_facts['os_family'] == \"Debian\" # <- Uses facts in a conditional statement.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Naming in Ansible Playbook\nDESCRIPTION: This YAML snippet shows the correct way to name plays and tasks in an Ansible playbook, addressing the issues highlighted in the problematic code example.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/name.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Play for creating placeholder\n  hosts: localhost\n  tasks:\n    - name: Create placeholder file\n      ansible.builtin.command: touch /tmp/.placeholder\n```\n\n----------------------------------------\n\nTITLE: Correct Git Module Usage in Ansible\nDESCRIPTION: Example showing proper usage of git module with a specific commit hash instead of HEAD reference. This pattern is safe as it ensures consistent checkouts regardless of context.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/latest.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example for `latest` rule\n  hosts: localhost\n  tasks:\n    - name: Safe use of git module\n      ansible.builtin.git:\n        repo: \"https://github.com/ansible/ansible-lint\"\n        version: abcd1234... # <-- that is safe\n```\n\n----------------------------------------\n\nTITLE: Correctly Implementing Loop Variables with Prefixes in Ansible\nDESCRIPTION: Example of correctly implemented code that follows the loop-var-prefix rule by using a proper role-prefixed variable name in loop_control.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/loop-var-prefix.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Sets a unique variable_name with role as prefix for loop variables.\n      ansible.builtin.debug:\n        var: myrole_item\n      loop:\n        - foo\n        - bar\n      loop_control:\n        loop_var: myrole_item # <- Unique variable name with role as prefix\n```\n\n----------------------------------------\n\nTITLE: Correct Environment Variable Setting Using Ansible Shell Module\nDESCRIPTION: This snippet demonstrates another correct method to set an environment variable using the ansible.builtin.shell module. This approach is also recommended and complies with the inline-env-var rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/inline_env_var.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Set environment variable\n      ansible.builtin.shell: MY_ENV_VAR=my_value # <- Sets an environment variable with the shell module.\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Ansible-lint in YAML\nDESCRIPTION: This YAML configuration sets up a GitHub Action to run ansible-lint on pull requests. It defines the workflow, job, and steps for checking out the code and running the linter. Optional parameters for customization are also explained.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/ansible-lint.yml\nname: ansible-lint\non:\n  pull_request:\n    branches: [\"main\", \"stable\", \"release/v*\"]\njobs:\n  build:\n    name: Ansible Lint # Naming the build is important to use it as a status check\n    runs-on: ubuntu-24.04\n    steps:\n      - uses: actions/checkout@v4\n      - name: Run ansible-lint\n        uses: ansible/ansible-lint@main\n        # optional (see below):\n        with:\n          args: \"\"\n          setup_python: \"true\"\n          working_directory: \"\"\n          requirements_file: \"\"\n```\n\n----------------------------------------\n\nTITLE: Correct FQCN Usage with ansible.builtin Collection\nDESCRIPTION: Example showing correct FQCN implementation using ansible.builtin collection for the shell module.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/fqcn.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook (2nd solution)\n  hosts: all\n  tasks:\n    - name: Create an SSH connection\n      # Use the FQCN for the builtin shell module.\n      ansible.builtin.shell: ssh ssh_user@{{ ansible_ssh_host }}\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Playbook without Free-Form Syntax\nDESCRIPTION: Example showing the proper way to structure Ansible playbook tasks without free-form syntax. Uses explicit parameter formatting and proper args structure.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_free_form.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example that avoids free-form syntax\n  hosts: localhost\n  tasks:\n    - name: Create a placefolder file\n      ansible.builtin.command:\n        cmd: touch foo # <-- ansible will not touch it\n        chdir: /tmp\n    - name: Use raw to echo\n      ansible.builtin.raw: echo foo\n      args:\n        executable: /bin/bash # <-- explicit is better\n      changed_when: false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Role Names in Ansible Playbook (YAML)\nDESCRIPTION: This code snippet illustrates the proper way to name roles in an Ansible playbook. It shows role names that start with an alphabetic character, contain only lowercase alphanumeric characters, and use underscores appropriately.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/role_name.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  roles:\n    - myrole1 # <- Starts with an alphabetic character.\n    - myrole2 # <- Contains only alphanumeric characters.\n    - myrole_3 # <- Contains only lowercase alphabetic characters.\n```\n\n----------------------------------------\n\nTITLE: Correct Version Specification in galaxy.yml\nDESCRIPTION: Example of a galaxy.yml file with a correct version specification (>= 1.0.0) that follows the semantic versioning requirement.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/galaxy-version-incorrect.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: \"description\"\nnamespace: \"namespace_name\"\nname: \"collection_name\"\nversion: \"1.0.0\" # <- version key is greater than or equal to '1.0.0'.\nreadme: \"README.md\"\nauthors:\n  - \"Author1\"\n  - \"Author2 (https://author2.example.com)\"\n  - \"Author3 <author3@example.com>\"\ndependencies:\n  \"other_namespace.collection1\": \">=1.0.0\"\n  \"other_namespace.collection2\": \">=2.0.0,<3.0.0\"\n  \"anderson55.my_collection\": \"*\" # note: \"*\" selects the highest version available\nlicense:\n  - \"MIT\"\ntags:\n  - demo\n  - collection\nrepository: \"https://www.github.com/my_org/my_collection\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct FQCN Usage with ansible.builtin in Ansible Playbook (YAML)\nDESCRIPTION: This code snippet shows the correct usage of FQCN for the builtin shell module. It uses the ansible.builtin.shell module to create an SSH connection.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/fqcn.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook (2nd solution)\n  hosts: all\n  tasks:\n    - name: Create an SSH connection\n      # Use the FQCN for the builtin shell module.\n      ansible.builtin.shell: ssh ssh_user@{{ ansible_ssh_host }}\n```\n\n----------------------------------------\n\nTITLE: Correct Variable Naming Examples in Ansible\nDESCRIPTION: Examples of properly formatted variable names following Ansible naming conventions, using lowercase characters and underscores while avoiding reserved names.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/var_naming.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  vars:\n    lowercase: true # <- Contains only lowercase characters.\n    no_caps: bar # <- Does not contains uppercase characters.\n    variable: baz # <- Does not contain special characters.\n    my_hosts: [] # <- Does not use a reserved names.\n    my_role_name: boo\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Jinja2 Usage in Ansible YAML\nDESCRIPTION: This snippet shows the correct way to use Jinja2 templates in an Ansible task, with proper spacing and syntax. It also demonstrates the correct use of fields with implicit Jinja2 templating without unnecessary braces.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/jinja.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Some task\n  vars:\n    foo: \"{{ some | dict2items }}\"\n    bar: \"{{ '&' }}\"\n  when: foo | bool\n```\n\n----------------------------------------\n\nTITLE: Valid Ansible Version Requirement\nDESCRIPTION: Example of correct code that properly specifies a supported Ansible version. The requires_ansible key uses >=2.17.0, which is a currently supported version in the correct format.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-runtime.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# runtime.yml\n---\nrequires_ansible: \">=2.17.0\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Non-Free-Form Syntax in Ansible Playbook\nDESCRIPTION: This YAML snippet shows the correct way to write the same tasks without using free-form syntax. It uses proper YAML dictionary format for specifying module options and separates the 'executable' parameter into the 'args' section for the raw module.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-free-form.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example that avoids free-form syntax\n  hosts: localhost\n  tasks:\n    - name: Create a placefolder file\n      ansible.builtin.command:\n        cmd: touch foo # <-- ansible will not touch it\n        chdir: /tmp\n    - name: Use raw to echo\n      ansible.builtin.raw: echo foo\n      args:\n        executable: /bin/bash # <-- explicit is better\n      changed_when: false\n```\n\n----------------------------------------\n\nTITLE: Correct Metadata Tags Format in YAML\nDESCRIPTION: Example showing proper formatting of galaxy_tags using only lowercase letters and numbers, following Ansible metadata best practices.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-no-tags.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Metadata tags contain only lowercase letters and numbers.\ngalaxy_info:\n  galaxy_tags: [mytag1, mytag2]\n```\n\n----------------------------------------\n\nTITLE: Correct Copy Module Usage\nDESCRIPTION: Example showing proper usage of the ansible.builtin.copy module by referencing files from within the files directory without using relative paths.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_relative_paths.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Example playbook\n  hosts: all\n  vars:\n    source_path: foo.j2 # <- Uses a path from inside files/ directory.\n  tasks:\n    - name: Copy a file to /etc/file.conf\n      ansible.builtin.copy:\n        src: \"{{ source_path }}\" # <- Uses the variable in the src argument.\n        dest: /etc/foo.conf\n        owner: foo\n        group: foo\n        mode: \"0644\"\n```\n\n----------------------------------------\n\nTITLE: Executing Ansible-lint with Custom Configuration File (Bash)\nDESCRIPTION: This command demonstrates how to run Ansible-lint with a specific configuration file using the -c flag. It allows users to specify a custom configuration file path.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/configuring.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nansible-lint -c path/to/ansible-lint-dev.yml\n```\n\n----------------------------------------\n\nTITLE: Correct Octal File Permissions in Ansible YAML\nDESCRIPTION: This snippet shows the correct way to declare numeric file permissions in an Ansible playbook. The mode is quoted and includes a leading zero, preventing YAML from misinterpreting the value.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/risky_octal.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Safe example of declaring Numeric file permissions (1st solution)\n      ansible.builtin.file:\n        path: /etc/foo.conf\n        owner: foo\n        group: foo\n        mode: \"0644\" # <- quoting and the leading zero will prevent surprises\n        # \"0o644\" is also a valid alternative.\n```\n\n----------------------------------------\n\nTITLE: Ignoring Rules for Specific Files (YAML)\nDESCRIPTION: This YAML snippet shows the format for the .ansible-lint-ignore file. It demonstrates how to disable specific rules for particular files, including the use of comments.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/configuring.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# this is just a comment\nplaybook.yml package-latest # disable package-latest rule for playbook.yml\nplaybook.yml deprecated-module\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Ansible Role Metadata in YAML\nDESCRIPTION: This snippet illustrates the correct way to set role metadata fields. It provides specific, meaningful values for 'author', 'description', 'company', and 'license' instead of using placeholder text.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_incorrect.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngalaxy_info:\n  author: Leroy Jenkins\n  description: This role will set you free.\n  company: Red Hat\n  license: Apache\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Task with Proper Change Handling\nDESCRIPTION: This code snippet shows the correct implementation of an Ansible task that properly handles command output and return codes. It registers the command output and uses changed_when to define when the task has changed based on the return code.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-changed-when.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Handle shell output with return code\n      ansible.builtin.command: cat {{ my_file | quote }}\n      register: my_output # <- Registers the command output.\n      changed_when: my_output.rc != 0 # <- Uses the return code to define when the task has changed.\n```\n\n----------------------------------------\n\nTITLE: Simplified Boolean Comparison in Ansible When Clause\nDESCRIPTION: Demonstrates the correct and simplified approach to boolean conditions in Ansible playbook when clauses. Shows proper usage without explicit comparison operators.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/literal_compare.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Print environment variable to stdout\n      ansible.builtin.command: echo $MY_ENV_VAR\n      when: ansible_os_family # <- Keeps your playbook simple.\n```\n\n----------------------------------------\n\nTITLE: Correct Command Module Usage in Ansible\nDESCRIPTION: Example showing proper usage of command module for executing a simple echo command. This is the preferred approach for better performance when shell features are not needed.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/command-instead-of-shell.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Correct example\n  hosts: localhost\n  tasks:\n    - name: Echo a message\n      ansible.builtin.command: echo hello\n      changed_when: false\n```\n\n----------------------------------------\n\nTITLE: Correct FQCN Usage with ansible.legacy Collection\nDESCRIPTION: Example showing correct FQCN implementation using ansible.legacy collection for the shell module, allowing local overrides.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/fqcn.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook (1st solution)\n  hosts: all\n  tasks:\n    - name: Create an SSH connection\n      # Use the FQCN for the legacy shell module and allow local overrides.\n      ansible.legacy.shell:\n        ssh ssh_user@{{ ansible_ssh_host }} -o IdentityFile=path/to/my_rsa\n```\n\n----------------------------------------\n\nTITLE: Correct Loop Variable Usage in Ansible\nDESCRIPTION: Example demonstrating the correct implementation of loop variables with proper role-based prefix naming that passes linting rules.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/loop_var_prefix.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Sets a unique variable_name with role as prefix for loop variables.\n      ansible.builtin.debug:\n        var: myrole_item\n      loop:\n        - foo\n        - bar\n      loop_control:\n        loop_var: myrole_item # <- Unique variable name with role as prefix\n```\n\n----------------------------------------\n\nTITLE: Correct Package Installation in Ansible\nDESCRIPTION: Examples of safe package installation practices using version pinning and controlled updates. Demonstrates proper configuration of state parameters and version specifications for different package managers.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/package_latest.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Install Ansible\n      ansible.builtin.dnf:\n        name: ansible-2.12.7.0\n        state: present # <- Pins the version to install with dnf.\n\n    - name: Install Ansible-lint\n      ansible.builtin.pip:\n        name: ansible-lint\n      args:\n        state: present\n        version: 5.4.0 # <- Pins the version to install with pip.\n\n    - name: Install some-package\n      ansible.builtin.package:\n        name: some-package\n        state: present # <- Ensures the package is installed.\n\n    - name: Update sudo with update_only to true\n      ansible.builtin.dnf:\n        name: sudo\n        state: latest\n        update_only: true # <- Updates but does not install additional packages.\n\n    - name: Install sudo with only_upgrade to true\n      ansible.builtin.apt:\n        name: sudo\n        state: latest\n        only_upgrade: true # <- Upgrades but does not install additional packages.\n```\n\n----------------------------------------\n\nTITLE: Correct YAML Code Examples\nDESCRIPTION: Shows the corrected version of the problematic YAML code, including proper document start, quoted octal values, and correct comment indentation.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/yaml.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfoo: \"0777\" # <-- Explicitly quoting octal is less risky.\nfoo2: \"0o777\" # <-- Explicitly quoting octal is less risky.\nbar: ... # Correct comment indentation.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Role Names in Ansible YAML\nDESCRIPTION: This snippet illustrates the correct way to name roles in Ansible. It shows role names that start with an alphabetic character, contain only alphanumeric characters and underscores, and use only lowercase letters.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/role-name.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  roles:\n    - myrole1 # <- Starts with an alphabetic character.\n    - myrole2 # <- Contains only alphanumeric characters.\n    - myrole_3 # <- Contains only lowercase alphabetic characters.\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible YAML with Proper become and become_user Configuration\nDESCRIPTION: This example shows two correct approaches: setting both 'become: true' and 'become_user' at the task level, and alternatively setting both at the play level to apply to all tasks.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/partial-become.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Start the httpd service as the apache user\n      ansible.builtin.service:\n        name: httpd\n        state: started\n      become: true # <- Activates privilege escalation.\n      become_user: apache # <- Changes the user with the desired privileges.\n\n# Stand alone playbook alternative, applies to all tasks\n\n- name: Example playbook\n  hosts: localhost\n  become: true # <- Activates privilege escalation.\n  become_user: apache # <- Changes the user with the desired privileges.\n  tasks:\n    - name: Start the httpd service as the apache user\n      ansible.builtin.service:\n        name: httpd\n        state: started\n```\n\n----------------------------------------\n\nTITLE: Reporting YAML Syntax Violations as Warnings in Ansible-lint\nDESCRIPTION: Demonstrates how to configure Ansible-lint to report YAML syntax violations as warnings instead of fatal errors by adding tag identifiers to the warn_list.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/yaml.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwarn_list:\n  - yaml[document-start]\n```\n\n----------------------------------------\n\nTITLE: Correct: Setting Environment Variable with Shell Module (YAML)\nDESCRIPTION: This snippet demonstrates another correct method to set an environment variable using the ansible.builtin.shell module in an Ansible playbook. This approach is also compliant with the 'inline-env-var' rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/inline-env-var.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Set environment variable\n      ansible.builtin.shell: MY_ENV_VAR=my_value # <- Sets an environment variable with the shell module.\n```\n\n----------------------------------------\n\nTITLE: Correct Code Preventing Ownership Transfer\nDESCRIPTION: Example playbook showing the correct implementation to prevent ownership transfer between hosts, using owner/group flags for synchronize and the --no-same-owner option for unarchive.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-same-owner.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Synchronize conf file\n      ansible.posix.synchronize:\n        src: /path/conf.yaml\n        dest: /path/conf.yaml\n        owner: false\n        group: false # <- Does not transfer the owner and group for the file.\n    - name: Extract tarball to path\n      ansible.builtin.unarchive:\n        src: \"{{ file }}.tar.gz\"\n        dest: /my/path/\n        extra_opts:\n          - --no-same-owner # <- Does not transfer the owner and group for the file.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid Module Arguments in Ansible Tasks\nDESCRIPTION: This YAML snippet shows examples of Ansible tasks with correct arguments, addressing the issues present in the problematic code example.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/args.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Fixture to validate module options pass scenario\n  hosts: localhost\n  tasks:\n    - name: Clone content repository\n      ansible.builtin.git: # <- Contains required option `repo`.\n        repo: https://github.com/ansible/ansible-examples\n        dest: /home/www\n        accept_hostkey: true\n        version: master\n        update: false\n\n    - name: Enable service httpd and ensure it is not masked\n      ansible.builtin.systemd: # <- Contains 'name' parameter required by 'enabled'.\n        name: httpd\n        enabled: false\n        masked: false\n\n    - name: Use quiet to avoid verbose output\n      ansible.builtin.assert:\n        that:\n          - my_param <= 100\n          - my_param >= 0\n        quiet: True # <- Has correct type value for option `quiet` which is boolean.\n```\n\n----------------------------------------\n\nTITLE: Correct Environment Variable Setting Using Ansible Environment Keyword\nDESCRIPTION: This snippet shows the correct way to set an environment variable using the environment keyword in Ansible. This approach is recommended and complies with the inline-env-var rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/inline_env_var.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Set environment variable\n      ansible.builtin.shell: echo $MY_ENV_VAR\n      environment:\n        MY_ENV_VAR: my_value # <- Sets an environment variable with the environment keyword.\n```\n\n----------------------------------------\n\nTITLE: Correct Shell Pipeline with pipefail in Ansible\nDESCRIPTION: Examples of correct code implementation that set the pipefail option when using pipes in the Ansible shell module. This ensures that tasks fail if any command in the pipeline fails, not just the last one.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/risky-shell-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  become: false\n  tasks:\n    - name: Pipeline with pipefail\n      ansible.builtin.shell:\n        cmd: set -o pipefail && false | cat\n        executable: /bin/bash\n\n    - name: Pipeline with pipefail, multi-line\n      ansible.builtin.shell:\n        cmd: |\n          set -o pipefail # <-- adding this will prevent surprises\n          false | cat\n        executable: /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Correct YAML Code Examples\nDESCRIPTION: Examples of properly formatted YAML code with correct document start, quoted octal values, and proper comment indentation.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/yaml.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfoo: \"0777\" # <-- Explicitly quoting octal is less risky.\nfoo2: \"0o777\" # <-- Explicitly quoting octal is less risky.\nbar: ... # Correct comment indentation.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Ansible When Statements\nDESCRIPTION: This snippet illustrates the correct way to use facts in a conditional statement within Ansible. It removes the unnecessary Jinja brackets, adhering to the best practice for 'when' clauses in Ansible tasks.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_jinja_when.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Shut down Debian systems\n      ansible.builtin.command: /sbin/shutdown -t now\n      when: ansible_facts['os_family'] == \"Debian\" # <- Uses facts in a conditional statement.\n```\n\n----------------------------------------\n\nTITLE: Correct Playbook Using Builtin Collection\nDESCRIPTION: An example YAML playbook that complies with the only-builtins rule by using an action from the ansible.builtin collection. This playbook would pass the linting check when the rule is enabled.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/only-builtins.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Run a shell command\n      ansible.builtin.shell: echo This playbook uses actions from the builtin collection only.\n```\n\n----------------------------------------\n\nTITLE: Correct Video Link Formatting in Ansible Galaxy Metadata\nDESCRIPTION: Example of correctly formatted video_links in meta/main.yml, using the required url and title keys with a supported video platform URL.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_video_links.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngalaxy_info:\n  video_links:\n    - url: https://www.youtube.com/watch?v=aWmRepTSFKs&feature=youtu.be # <- Uses a supported shared link with the url key.\n      title: Correctly formatted video link.\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible-lint Autofix in YAML\nDESCRIPTION: Example of how to configure the write_list for Ansible-lint autofix in a YAML configuration file. This snippet shows different ways to specify which rule transforms should be applied.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/autofix.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwrite_list: [\"all\"]\nwrite_list: [\"none\"]\nwrite_list: [\"rule1\", \"rule2\", \"tag1\"]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct FQCN Usage with ansible.legacy in Ansible Playbook (YAML)\nDESCRIPTION: This code snippet demonstrates the correct usage of FQCN for the legacy shell module, allowing local overrides. It uses the ansible.legacy.shell module with additional SSH options.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/fqcn.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook (1st solution)\n  hosts: all\n  tasks:\n    - name: Create an SSH connection\n      # Use the FQCN for the legacy shell module and allow local overrides.\n      ansible.legacy.shell:\n        ssh ssh_user@{{ ansible_ssh_host }} -o IdentityFile=path/to/my_rsa\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Task Result Handling Using Handlers in Ansible\nDESCRIPTION: This snippet demonstrates the correct way to handle task results using handlers in Ansible. It uses the notify directive to trigger a handler when the file changes, avoiding the need for a when condition.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_handler.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example of no-handler rule\n  hosts: localhost\n  tasks:\n    - name: Register result of a task\n      ansible.builtin.copy:\n        dest: \"/tmp/placeholder\"\n        content: \"Ansible made this!\"\n        mode: 0600\n      notify:\n        - Second command to run # <-- Handler runs only when the file changes.\n  handlers:\n    - name: Second command to run\n      ansible.builtin.debug:\n        msg: The placeholder file was modified!\n```\n\n----------------------------------------\n\nTITLE: Correct Galaxy Tags Configuration in YAML\nDESCRIPTION: Example of correct galaxy.yml configuration including required certification tags.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/galaxy.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# galaxy.yml\n---\nnamespace: bar\nname: foo\nversion: 1.0.0\nauthors:\n  - John\nreadme: ../README.md\ndescription: \"...\"\nlicense:\n  - Apache-2.0\nrepository: https://github.com/ORG/REPO_NAME\ntags: [networking, test_tag, test_tag_2]\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Values for Undefined Variables in YAML\nDESCRIPTION: This snippet demonstrates how to configure dummy fallback values for undefined variables in YAML to avoid errors during linting. It uses the default filter to provide a fallback value when the variable is not defined.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Example of avoiding undefined variable error\nfoo: \"{{ undefined_variable_name | default('dummy') }}\"\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Apt Module in Ansible Playbook\nDESCRIPTION: This snippet shows the correct way to update the apt cache using the ansible.builtin.apt module. It demonstrates the recommended approach that complies with the 'command-instead-of-module' rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/command_instead_of_module.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Update apt cache\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.apt:\n        update_cache: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Variable Naming Pattern in Ansible Lint\nDESCRIPTION: Configuration example showing how to set the variable naming pattern in .ansible-lint file. The pattern enforces lowercase alphanumeric characters and underscores, with alphabetic or underscore start.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/var_naming.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .ansible-lint\nvar_naming_pattern: \"^[a-z_][a-z0-9_]*$\"\n```\n\n----------------------------------------\n\nTITLE: Correct YAML: Using Default Filter for Undefined Variable\nDESCRIPTION: This YAML snippet shows the correct way to use a variable inside the hosts block by providing a default value using the Jinja default() filter.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/syntax-check.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Good use of variable inside hosts, without assumptions\n  hosts: \"{{ my_hosts | default([]) }}\"\n  tasks: []\n```\n\n----------------------------------------\n\nTITLE: Defining Galaxy Info Schema in Ansible Role Metadata\nDESCRIPTION: Example of required galaxy_info configuration in meta/main.yml for standalone roles. The standalone property must be explicitly set to true for roles that are not part of a collection.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/schema.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngalaxy_info:\n  standalone: true # <-- this is a standalone role (not part of a collection)\n```\n\n----------------------------------------\n\nTITLE: Correct: Setting Environment Variable with Environment Keyword (YAML)\nDESCRIPTION: This snippet shows the correct way to set an environment variable using the 'environment' keyword in an Ansible playbook. This approach is recommended and complies with the 'inline-env-var' rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/inline-env-var.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Set environment variable\n      ansible.builtin.shell: echo $MY_ENV_VAR\n      environment:\n        MY_ENV_VAR: my_value # <- Sets an environment variable with the environment keyword.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Delegate to Localhost Usage in Ansible YAML\nDESCRIPTION: This snippet demonstrates the recommended way to run a task on localhost in Ansible. It uses 'delegate_to: localhost' instead of 'local_action', which is the preferred method.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/deprecated_local_action.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Task example\n    ansible.builtin.debug:\n  delegate_to: localhost # <-- recommended way to run on localhost\n```\n\n----------------------------------------\n\nTITLE: Enabling the only-builtins Rule in Ansible-Lint Configuration\nDESCRIPTION: YAML configuration snippet showing how to enable the only-builtins rule in your Ansible-lint configuration file. This rule must be explicitly enabled to check that playbooks use only actions from the ansible.builtin collection.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/only-builtins.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - only-builtins\n```\n\n----------------------------------------\n\nTITLE: Secure Password Handling in Ansible Playbook\nDESCRIPTION: Correct implementation showing proper password protection by setting no_log to true when using loops with sensitive data in the ansible.builtin.user module.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_log_password.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Do not log user passwords\n      ansible.builtin.user:\n        name: john_doe\n        comment: John Doe\n        uid: 1040\n        group: admin\n        password: \"{{ item }}\"\n      with_items:\n        - wow\n      no_log: true # <- Sets the no_log attribute to a non-false value.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Match Rule in Python for Ansible-lint\nDESCRIPTION: Example of a custom rule that checks for deprecated variable syntax using the 'match' method. The rule identifies lines containing the old style ${var} declarations and is tagged as 'deprecations'.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/custom-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\nfrom ansiblelint.rules import AnsibleLintRule\n\n\nclass DeprecatedVariableRule(AnsibleLintRule):\n    \"\"\"Deprecated variable declarations.\"\"\"\n\n    id = 'EXAMPLE002'\n    description = 'Check for lines that have old style ${var} ' + \\\n                  'declarations'\n    tags = ['deprecations']\n\n    def match(self, line: str) -> Union[bool, str]:\n        return '${' in line\n```\n\n----------------------------------------\n\nTITLE: Correct Role Metadata Configuration in Ansible\nDESCRIPTION: A properly configured meta/main.yml file with appropriate values for all required metadata fields. This example shows correctly completed fields for author, description, company, and license.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-incorrect.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngalaxy_info:\n  author: Leroy Jenkins\n  description: This role will set you free.\n  company: Red Hat\n  license: Apache\n```\n\n----------------------------------------\n\nTITLE: Correct Galaxy Version Configuration in YAML\nDESCRIPTION: Example of correct galaxy.yml configuration with proper version number meeting the minimum requirement of 1.0.0.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/galaxy.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# galaxy.yml\n---\nname: foo\nnamespace: bar\nversion: 1.0.0\nauthors:\n  - John\nreadme: ../README.md\ndescription: \"...\"\n```\n\n----------------------------------------\n\nTITLE: Problematic Key Order in Ansible Playbook (YAML)\nDESCRIPTION: This snippet demonstrates incorrect key ordering in an Ansible playbook. The 'name' key is not the first key in the play, and the 'when' key is placed after the 'block' key in a task, which can lead to maintainability issues and potential errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/key_order.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- hosts: localhost\n  name: This is a playbook # <-- name key should be the first one\n  tasks:\n    - name: A block\n      block:\n        - name: Display a message\n          debug:\n            msg: \"Hello world!\"\n      when: true # <-- when key should be before block\n```\n\n----------------------------------------\n\nTITLE: Correct Jinja2 Template Usage in YAML\nDESCRIPTION: Examples of proper Jinja2 template formatting with correct spacing between variables and filters, valid syntax, and proper use of implicit templating in Ansible contexts.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/jinja.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Some task\n  vars:\n    foo: \"{{ some | dict2items }}\"\n    bar: \"{{ '&' }}\"\n  when: foo | bool\n```\n\n----------------------------------------\n\nTITLE: Implementing Correct Shell Pipe Usage in Ansible Playbook\nDESCRIPTION: This snippet demonstrates the correct way to use shell commands with pipes in Ansible tasks. It shows two examples: one with a single-line command and another with a multi-line command, both using the 'pipefail' option to ensure proper error handling.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/risky_shell_pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  become: false\n  tasks:\n    - name: Pipeline with pipefail\n      ansible.builtin.shell:\n        cmd: set -o pipefail && false | cat\n        executable: /bin/bash\n\n    - name: Pipeline with pipefail, multi-line\n      ansible.builtin.shell:\n        cmd: |\n          set -o pipefail # <-- adding this will prevent surprises\n          false | cat\n        executable: /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Setting up Ansible-lint Development Environment\nDESCRIPTION: Instructions for cloning the repository, setting up a Python virtual environment, installing dependencies and submitting changes via pull requests.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone --recursive git@github.com:your-name/ansible-lint\n$ cd ansible-lint\n$ # Recommended: Initialize and activate a Python virtual environment\n$ pip install --upgrade pip\n$ pip install -e '.[test]'       # Install testing dependencies\n$ tox run -e lint,pkg,docs,py  # Ensure subset of tox tests work in clean checkout\n$ git checkout -b your-branch-name\n# DO SOME CODING HERE\n$ tox run -e lint,pkg,docs,py  # Ensure subset of tox tests work with your changes\n$ git add your new files\n$ git commit -v\n$ git push origin your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Configuring no-prompting Rule in Ansible Lint\nDESCRIPTION: Shows how to enable the no-prompting rule in the Ansible-lint configuration file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-prompting.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - no-prompting\n```\n\n----------------------------------------\n\nTITLE: Correct Git Module Usage in Ansible Playbook\nDESCRIPTION: Example showing safe usage of the git module where the 'version' parameter is set to a specific commit hash, ensuring consistent results across executions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/latest.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example for `latest` rule\n  hosts: localhost\n  tasks:\n    - name: Safe use of git module\n      ansible.builtin.git:\n        repo: \"https://github.com/ansible/ansible-lint\"\n        version: abcd1234... # <-- that is safe\n```\n\n----------------------------------------\n\nTITLE: Minimum Required Changelog Configuration\nDESCRIPTION: Example of the minimum required structure for a changelog.yaml file in an Ansible collection.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/galaxy.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# changelog.yaml\n---\nreleases: {}\n```\n\n----------------------------------------\n\nTITLE: Custom Failure Conditions with failed_when in Ansible\nDESCRIPTION: Advanced error handling using failed_when to specify precise conditions that constitute a failure.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/ignore_errors.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Disable apport\n      become: \"yes\"\n      lineinfile:\n        line: \"enabled=0\"\n        dest: /etc/default/apport\n        mode: 0644\n        state: present\n      register: default_apport\n      failed_when: default_apport.rc !=0 and not default_apport.rc == 257 # <- Defines conditions that constitute a failure.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Safe Numeric File Permissions in Ansible YAML\nDESCRIPTION: This snippet demonstrates the correct way to specify file permissions in Ansible tasks. The mode is set as a quoted string with a leading zero, preventing potential misinterpretation by the YAML loader.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/risky-octal.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Safe example of declaring Numeric file permissions (1st solution)\n      ansible.builtin.file:\n        path: /etc/foo.conf\n        owner: foo\n        group: foo\n        mode: \"0644\" # <- quoting and the leading zero will prevent surprises\n        # \"0o644\" is also a valid alternative.\n```\n\n----------------------------------------\n\nTITLE: Correct Template Module Usage with Project-Relative Path\nDESCRIPTION: Example showing correct usage of paths in template module by referencing files from the templates directory.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-relative-paths.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Template a file to /etc/file.conf\n      ansible.builtin.template:\n        src: foo.j2 # <- Uses a path from inside templates/ directory.\n        dest: /etc/file.conf\n        owner: bin\n        group: wheel\n        mode: \"0644\"\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Playbook without run_once\nDESCRIPTION: Example showing proper implementation without using run_once, avoiding potential strategy conflicts.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/run-once.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Example without run_once\"\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Task without run_once\n      ansible.builtin.debug:\n        msg: \"Test\"\n```\n\n----------------------------------------\n\nTITLE: Fine-grained Control of YAML Rule Violations in Ansible-lint\nDESCRIPTION: Shows how to disable specific YAML rule violations using tag identifiers in the format 'yaml[yamllint_rule]'. This example disables checks for trailing spaces and indentation.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/yaml.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nskip_list:\n  - yaml[trailing-spaces]\n  - yaml[indentation]\n```\n\n----------------------------------------\n\nTITLE: Displaying Complexity Nesting Warning in Ansible Lint\nDESCRIPTION: This snippet shows the warning message displayed when the complexity[nesting] rule is triggered. It suggests replacing nested blocks with include_tasks to improve code maintainability.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/complexity.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nReplace nested block with an include_tasks to make code easier to maintain. Maximum block depth allowed is ...\n```\n\n----------------------------------------\n\nTITLE: Correct Usage with Explicit Conversion in Ansible Copy Module\nDESCRIPTION: This example shows the correct way to handle non-string content in the copy module by using explicit variable declaration and Jinja2 filters for conversion. This approach is more reliable and follows the 'explicit is better than implicit' principle.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/avoid-implicit.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Write file content\n      vars:\n        content: { \"foo\": \"bar\" }\n      ansible.builtin.copy:\n        content: \"{{ content | to_json }}\" # explicit better than implicit!\n        dest: /tmp/foo.txt\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Expression in Ansible When Clause\nDESCRIPTION: Example showing the correct way to use boolean conditions in an Ansible playbook's when clause. The task directly uses the variable without explicit comparison to True.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/literal-compare.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Print environment variable to stdout\n      ansible.builtin.command: echo $MY_ENV_VAR\n      when: ansible_os_family # <- Keeps your playbook simple.\n```\n\n----------------------------------------\n\nTITLE: Disabling YAML Syntax Violations in Ansible-lint Configuration\nDESCRIPTION: Demonstrates how to disable YAML syntax violations by adding 'yaml' to the skip_list in the Ansible-lint configuration. This will skip all YAML-related checks.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nskip_list:\n  - yaml\n```\n\n----------------------------------------\n\nTITLE: Correct Handler Implementation in Ansible\nDESCRIPTION: Example showing the proper implementation using Ansible handlers and notify directive instead of result.changed conditions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-handler.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example of no-handler rule\n  hosts: localhost\n  tasks:\n    - name: Register result of a task\n      ansible.builtin.copy:\n        dest: \"/tmp/placeholder\"\n        content: \"Ansible made this!\"\n        mode: 0600\n      notify:\n        - Second command to run # <-- Handler runs only when the file changes.\n  handlers:\n    - name: Second command to run\n      ansible.builtin.debug:\n        msg: The placeholder file was modified!\n```\n\n----------------------------------------\n\nTITLE: Recommended Local Action Usage in Ansible YAML\nDESCRIPTION: Demonstrates the recommended approach for executing local actions using 'delegate_to: localhost' instead of the deprecated 'local_action' syntax.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/deprecated-local-action.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Task example\n    ansible.builtin.debug:\n  delegate_to: localhost # <-- recommended way to run on localhost\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Video Link Formatting in Ansible Role Metadata (YAML)\nDESCRIPTION: This snippet shows the correct way to format video links in the meta/main.yml file of an Ansible role. It uses the required 'url' and 'title' keys, and includes a supported shared link format.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-video-links.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngalaxy_info:\n  video_links:\n    - url: https://www.youtube.com/watch?v=aWmRepTSFKs&feature=youtu.be # <- Uses a supported shared link with the url key.\n      title: Correctly formatted video link.\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Variables and Strings in Ansible YAML\nDESCRIPTION: This snippet demonstrates two correct ways to handle the previous problematic code: using a list of strings if 'foo' is not a variable, or using full variable syntax if 'foo' is indeed a variable.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/deprecated_bare_vars.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# if foo is not really a variable:\n- ansible.builtin.debug:\n    msg: \"{{ item }}\"\n  with_items:\n    - foo\n\n# if foo is a variable:\n- ansible.builtin.debug:\n    msg: \"{{ item }}\"\n  with_items: \"{{ foo }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Loop Variable Prefix in Ansible-Lint\nDESCRIPTION: Configuration example for setting a custom regular expression pattern to validate loop variable naming in .ansible-lint configuration file. The pattern supports replacing {role} with the inferred role name when applicable.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/loop-var-prefix.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .ansible-lint\nloop_var_prefix: \"^(__|{role}_)\"\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation Without Empty String Comparisons in Ansible Playbook\nDESCRIPTION: This example shows the correct way to implement conditional statements in an Ansible playbook without using empty string comparisons. It demonstrates a more idiomatic approach to checking variable truthiness.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/empty-string-compare.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Shut down\n      ansible.builtin.shell: |\n        /sbin/shutdown -t now\n        echo $var ==\n      when: ansible_os_family\n```\n\n----------------------------------------\n\nTITLE: Problematic Jinja2 Template Usage in YAML\nDESCRIPTION: Examples of incorrect Jinja2 template usage showing spacing issues and invalid syntax. Demonstrates problems with missing spaces between variables and filters, invalid template nesting, and unnecessary braces in implicit templating contexts.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/jinja.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Some task\n  vars:\n    foo: \"{{some|dict2items}}\" # <-- jinja[spacing]\n    bar: \"{{ & }}\" # <-- jinja[invalid]\n  when: \"{{ foo | bool }}\" # <-- jinja[spacing] - 'when' has implicit templating\n```\n\n----------------------------------------\n\nTITLE: Correct Key Order in Ansible Playbook (YAML)\nDESCRIPTION: This snippet shows the correct key ordering in an Ansible playbook. The 'name' key is the first key in the play, and the 'when' key is placed before the 'block' key in the task, improving readability and reducing the risk of indentation errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/key_order.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: This is a playbook\n  hosts: localhost\n  tasks:\n    - name: A block\n      when: true\n      block:\n        - name: Display a message\n          debug:\n            msg: \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Using Recommended Ansible Module for VLAN Configuration\nDESCRIPTION: This snippet shows the correct way to configure a VLAN ID using a platform-specific module 'dellemc.enterprise_sonic.sonic_vlans'. This is the recommended approach to replace the deprecated module.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/deprecated_module.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Configure VLAN ID\n      dellemc.enterprise_sonic.sonic_vlans: # <- Uses a platform specific module.\n        config:\n          - vlan_id: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring var-naming Rule Settings in YAML\nDESCRIPTION: This snippet shows how to configure the var_naming_pattern setting for the var-naming rule in the .ansible-lint file. It sets a regular expression pattern for valid variable names.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/var-naming.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .ansible-lint\nvar_naming_pattern: \"^[a-z_][a-z0-9_]*$\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Complexity Nesting Error Message\nDESCRIPTION: Error message displayed when a block contains too many nested tasks, exceeding the configured max_block_depth value. The message suggests using include_tasks as a solution.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/complexity.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nReplace nested block with an include_tasks to make code easier to maintain. Maximum block depth allowed is ...\n```\n\n----------------------------------------\n\nTITLE: Enabling only-builtins Rule in Ansible Lint Configuration (YAML)\nDESCRIPTION: This snippet shows how to enable the 'only-builtins' rule in the Ansible Lint configuration file. The rule is opt-in and must be explicitly enabled.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/only_builtins.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - only-builtins\n```\n\n----------------------------------------\n\nTITLE: Correct Copy Module Usage with Project-Relative Path Variable\nDESCRIPTION: Example showing correct usage of paths through variables in copy module by referencing files from the files directory.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-relative-paths.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Example playbook\n  hosts: all\n  vars:\n    source_path: foo.j2 # <- Uses a path from inside files/ directory.\n  tasks:\n    - name: Copy a file to /etc/file.conf\n      ansible.builtin.copy:\n        src: \"{{ source_path }}\" # <- Uses the variable in the src argument.\n        dest: /etc/foo.conf\n        owner: foo\n        group: foo\n        mode: \"0644\"\n```\n\n----------------------------------------\n\nTITLE: Proper Error Handling with Check Mode in Ansible Playbook\nDESCRIPTION: A better approach to error handling where errors are only ignored in Ansible check mode using the ansible_check_mode variable, allowing errors to be properly reported during normal execution.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/ignore-errors.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.command: apt-get update\n      ignore_errors: \"{{ ansible_check_mode }}\" # <- Ignores errors in check mode.\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Playbook with Free-Form Syntax\nDESCRIPTION: Example showing discouraged use of free-form syntax in Ansible playbooks. The code demonstrates improper usage of command and raw modules with inline parameters.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_free_form.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example with discouraged free-form syntax\n  hosts: localhost\n  tasks:\n    - name: Create a placefolder file\n      ansible.builtin.command: chdir=/tmp touch foo # <-- don't use free-form\n    - name: Use raw to echo\n      ansible.builtin.raw: executable=/bin/bash echo foo # <-- don't use executable=\n      changed_when: false\n```\n\n----------------------------------------\n\nTITLE: Minimum Required Changelog Configuration in YAML\nDESCRIPTION: Example of the minimum required structure for changelog.yaml/changelog.yml file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/galaxy.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# changelog.yaml\n---\nreleases: {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Loop Variable Prefix Rule\nDESCRIPTION: Configuration snippet showing how to enable the loop-var-prefix rule in the Ansible-lint configuration file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/loop_var_prefix.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - loop-var-prefix\n```\n\n----------------------------------------\n\nTITLE: Silencing the no-handler Rule in Ansible\nDESCRIPTION: This snippet shows how to silence the no-handler rule using a noqa comment. This approach should be used sparingly and only when necessary.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_handler.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Optionally silences the rule.\nwhen: result.changed # noqa: no-handler\n```\n\n----------------------------------------\n\nTITLE: Configuring no-prompting Rule in Ansible-lint\nDESCRIPTION: Shows how to enable the no-prompting rule in ansible-lint configuration file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_prompting.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - no-prompting\n```\n\n----------------------------------------\n\nTITLE: Rule Exclusion Example\nDESCRIPTION: Example of excluding specific rules in Ansible-lint\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: This task would typically fire git-latest and partial-become rules\n  become_user: alice # noqa: git-latest partial-become\n  ansible.builtin.git: src=/path/to/git/repo dest=checkout\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- name: This would typically fire jinja[spacing]\n  get_url:\n    url: http://example.com/file.conf\n    dest: \"{{dest_proj_path}}/foo.conf\" # noqa: jinja[spacing]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- name: This would typically fire no-free-form\n  command: warn=no chmod 644 X\n\n- name: This would typically fire git-latest\n  git: src=/path/to/git/repo dest=checkout\n  tags:\n    - skip_ansible_lint\n```\n\n----------------------------------------\n\nTITLE: Proper Error Handling with Check Mode in Ansible\nDESCRIPTION: Recommended approach using ansible_check_mode variable to conditionally ignore errors only during check mode execution.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/ignore_errors.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.command: apt-get update\n      ignore_errors: \"{{ ansible_check_mode }}\" # <- Ignores errors in check mode.\n```\n\n----------------------------------------\n\nTITLE: Problematic Git Module Usage in Ansible Playbook\nDESCRIPTION: Example showing unsafe usage of the git module where the 'version' parameter is set to HEAD, which could lead to inconsistent results across different executions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/latest.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example for `latest` rule\n  hosts: localhost\n  tasks:\n    - name: Risky use of git module\n      ansible.builtin.git:\n        repo: \"https://github.com/ansible/ansible-lint\"\n        version: HEAD # <-- HEAD value is triggering the rule\n```\n\n----------------------------------------\n\nTITLE: Correct Playbook Using Only Builtin Collection (YAML)\nDESCRIPTION: This example shows a playbook that complies with the 'only-builtins' rule by using an action from the ansible.builtin collection (ansible.builtin.shell).\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/only_builtins.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Run a shell command\n      ansible.builtin.shell: echo This playbook uses actions from the builtin collection only.\n```\n\n----------------------------------------\n\nTITLE: Correct Galaxy Configuration with Valid Version\nDESCRIPTION: This example shows a galaxy.yml file with a correct version number. The 'version' key is set to '1.0.0', which meets the minimum requirement for semantic versioning in Ansible Automation Platform.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/galaxy_version_incorrect.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: \"description\"\nnamespace: \"namespace_name\"\nname: \"collection_name\"\nversion: \"1.0.0\" # <- version key is greater than or equal to '1.0.0'.\nreadme: \"README.md\"\nauthors:\n  - \"Author1\"\n  - \"Author2 (https://author2.example.com)\"\n  - \"Author3 <author3@example.com>\"\ndependencies:\n  \"other_namespace.collection1\": \">=1.0.0\"\n  \"other_namespace.collection2\": \">=2.0.0,<3.0.0\"\n  \"anderson55.my_collection\": \"*\" # note: \"*\" selects the highest version available\nlicense:\n  - \"MIT\"\ntags:\n  - demo\n  - collection\nrepository: \"https://www.github.com/my_org/my_collection\"\n```\n\n----------------------------------------\n\nTITLE: Enabling the Loop-Var-Prefix Rule in Ansible-Lint\nDESCRIPTION: Configuration example showing how to enable the opt-in loop-var-prefix rule in your Ansible-lint configuration file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/loop-var-prefix.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - loop-var-prefix\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible YAML with Included Tasks and become_user\nDESCRIPTION: These examples show incorrect usage across multiple files, where a task file is included but 'become_user' in the task file lacks the required 'become: true' directive in the same file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/partial-become.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook 1\n  hosts: localhost\n  become: true # <- Activates privilege escalation.\n  tasks:\n    - name: Include a task file\n      ansible.builtin.include_tasks: tasks.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook 2\n  hosts: localhost\n  tasks:\n    - name: Include a task file\n      ansible.builtin.include_tasks: tasks.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks.yml\n- name: Start the httpd service as the apache user\n  ansible.builtin.service:\n    name: httpd\n    state: started\n  become_user: apache # <- Does not change the user because \"become: true\" is not set.\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Supported Ansible Versions\nDESCRIPTION: Example configuration to specify additional Ansible versions to be recognized as supported. This allows users to maintain content that requires a version of ansible-core that is already out of support.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-runtime.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Also recognize these versions of Ansible as supported:\nsupported_ansible_also:\n  - \"2.14\"\n```\n\n----------------------------------------\n\nTITLE: Using Correct Platform-Specific Module in Ansible Playbook (YAML)\nDESCRIPTION: This snippet shows the correct usage of a platform-specific module 'dellemc.enterprise_sonic.sonic_vlans' for configuring a VLAN ID. This is the recommended approach to replace deprecated modules with maintained, platform-specific alternatives.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/deprecated-module.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Configure VLAN ID\n      dellemc.enterprise_sonic.sonic_vlans: # <- Uses a platform specific module.\n        config:\n          - vlan_id: 20\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Jinja2 Templating in Ansible YAML\nDESCRIPTION: This snippet illustrates the difference between implicit and explicit Jinja2 templating in Ansible tasks. It shows an example where the schema enforces the use of explicit templating for certain variables.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/schemas/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: some task\n  command: echo 123\n  register: result\n  vars:\n    become_method_var: sudo\n  become_method: become_method_var # <-- schema will not allow this\n  # become_method: \"{{ become_method_var }}\" # <-- that is allowed\n```\n\n----------------------------------------\n\nTITLE: Problematic: Setting Environment Variable in Command Module (YAML)\nDESCRIPTION: This snippet demonstrates incorrect usage of setting an environment variable directly in the ansible.builtin.command module. This approach is not recommended and will trigger the 'inline-env-var' rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/inline-env-var.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Set environment variable\n      ansible.builtin.command: MY_ENV_VAR=my_value # <- Sets an environment variable in the command module.\n```\n\n----------------------------------------\n\nTITLE: Correct Task Include with Privilege Escalation\nDESCRIPTION: Demonstrates proper implementation of privilege escalation when using included tasks.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/partial_become.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook 1\n  hosts: localhost\n  tasks:\n    - name: Include a task file\n      ansible.builtin.include_tasks: tasks.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook 2\n  hosts: localhost\n  tasks:\n    - name: Include a task file\n      ansible.builtin.include_tasks: tasks.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks.yml\n- name: Start the httpd service as the apache user\n  ansible.builtin.service:\n    name: httpd\n    state: started\n  become: true # <- Activates privilege escalation.\n  become_user: apache # <- Does not change the user because \"become: true\" is not set.\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Playbook with run_once and linear strategy\nDESCRIPTION: Example showing proper usage of run_once with linear strategy and demonstration of using noqa comments to suppress specific rule violations.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/run-once.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Example of using run_once with strategy other than free\"\n  hosts: all\n  strategy: linear\n  # strategy: free # noqa: run-once[play] (if using strategy: free can skip it this way)\n  gather_facts: false\n  tasks: # <-- use noqa to disable rule violations for specific tasks\n    - name: Task with run_once # noqa: run-once[task]\n      ansible.builtin.debug:\n        msg: \"Test\"\n      run_once: true\n```\n\n----------------------------------------\n\nTITLE: Custom Supported Version Configuration\nDESCRIPTION: Configuration example showing how to add additional supported Ansible versions beyond the default supported versions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_runtime.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Also recognize these versions of Ansible as supported:\nsupported_ansible_also:\n  - \"2.14\"\n```\n\n----------------------------------------\n\nTITLE: Problematic Use of Jinja Brackets in Ansible Conditionals\nDESCRIPTION: This example demonstrates incorrect usage of Jinja expression brackets {{ }} in a 'when' conditional statement. This creates a nested expression which is an Ansible anti-pattern and leads to unexpected results.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-jinja-when.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Shut down Debian systems\n      ansible.builtin.command: /sbin/shutdown -t now\n      when: \"{{ ansible_facts['os_family'] == 'Debian' }}\" # <- Nests a Jinja expression in a conditional statement.\n```\n\n----------------------------------------\n\nTITLE: Problematic Code Using Tab Characters in Ansible YAML\nDESCRIPTION: Example playbook that demonstrates improper use of tab characters that would trigger the no-tabs rule. Note that tab characters in the ansible.builtin.lineinfile module are exempt from this rule, but tabs in debug messages will trigger alerts.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Do not trigger the rule\n      ansible.builtin.lineinfile:\n        path: some.txt\n        regexp: '^\\t$'\n        line: 'string with \\t inside'\n    - name: Trigger the rule with a debug message\n      ansible.builtin.debug:\n        msg: \"Using the \\t character can cause formatting issues.\" # <- Includes the tab character.\n```\n\n----------------------------------------\n\nTITLE: Enabling galaxy-version-incorrect Rule in Ansible-lint\nDESCRIPTION: Configuration snippet showing how to enable the galaxy-version-incorrect rule in ansible-lint configuration file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/galaxy-version-incorrect.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - galaxy-version-incorrect\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible YAML with become_user Without become at Task Level\nDESCRIPTION: This example demonstrates incorrect usage where 'become_user' is specified at the task level without setting 'become: true' in the same task, causing the user change to not take effect as expected.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/partial-become.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  become: true # <- Activates privilege escalation.\n  tasks:\n    - name: Start the httpd service as the apache user\n      ansible.builtin.service:\n        name: httpd\n        state: started\n      become_user: apache # <- Does not change the user because \"become: true\" is not set.\n```\n\n----------------------------------------\n\nTITLE: Correct Tags Configuration in galaxy.yml\nDESCRIPTION: Example of proper galaxy.yml configuration including required certification tags for Automation Hub.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/galaxy.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# galaxy.yml\n---\nnamespace: bar\nname: foo\nversion: 1.0.0\nauthors:\n  - John\nreadme: ../README.md\ndescription: \"...\"\nlicense:\n  - Apache-2.0\nrepository: https://github.com/ORG/REPO_NAME\ntags: [networking, test_tag, test_tag_2]\n```\n\n----------------------------------------\n\nTITLE: Correct YAML Using Spaces in Ansible Playbook\nDESCRIPTION: Example showing proper usage with space characters instead of tabs in an Ansible playbook. This follows the recommended practice of using spaces for indentation and formatting.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Do not trigger the no-tabs rule\n      ansible.builtin.debug:\n        msg: \"Using space characters avoids formatting issues.\"\n```\n\n----------------------------------------\n\nTITLE: Enabling the No-Same-Owner Rule in Ansible-Lint Configuration\nDESCRIPTION: Configuration snippet showing how to enable the no-same-owner rule in your Ansible-lint configuration file. This is an opt-in rule that must be explicitly enabled.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-same-owner.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - no-same-owner\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Jinja in Ansible When Statements\nDESCRIPTION: This snippet shows an example of problematic code where Jinja expressions are incorrectly used within curly brackets in a 'when' conditional statement. This is considered an anti-pattern in Ansible and may lead to unexpected results.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_jinja_when.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Shut down Debian systems\n      ansible.builtin.command: /sbin/shutdown -t now\n      when: \"{{ ansible_facts['os_family'] == 'Debian' }}\" # <- Nests a Jinja expression in a conditional statement.\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Playbook with run_once and free strategy\nDESCRIPTION: Example showing incorrect usage where run_once is used with strategy: free, which can lead to unexpected behavior.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/run-once.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: \"Example with run_once\"\n  hosts: all\n  strategy: free # <-- avoid use of strategy as free\n  gather_facts: false\n  tasks:\n    - name: Task with run_once\n      ansible.builtin.debug:\n        msg: \"Test\"\n      run_once: true # <-- avoid use of strategy as free at play level when using run_once at task level\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible YAML with Included Tasks and Proper Privilege Escalation\nDESCRIPTION: These examples show the correct approach when using included task files, where both 'become: true' and 'become_user' are specified together in the task file itself.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/partial-become.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook 1\n  hosts: localhost\n  tasks:\n    - name: Include a task file\n      ansible.builtin.include_tasks: tasks.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook 2\n  hosts: localhost\n  tasks:\n    - name: Include a task file\n      ansible.builtin.include_tasks: tasks.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks.yml\n- name: Start the httpd service as the apache user\n  ansible.builtin.service:\n    name: httpd\n    state: started\n  become: true # <- Activates privilege escalation.\n  become_user: apache # <- Does not change the user because \"become: true\" is not set.\n```\n\n----------------------------------------\n\nTITLE: Generating Module Dependency Tree\nDESCRIPTION: Command to display the dependency tree for the ansible-lint package using uv pip tool with strict version specifiers.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv pip tree --package ansible-lint --show-version-specifiers --strict\n```\n\n----------------------------------------\n\nTITLE: Problematic Galaxy Version Configuration in YAML\nDESCRIPTION: Example of incorrect galaxy.yml configuration with version below 1.0.0, which violates the version requirement rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/galaxy.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# galaxy.yml\n---\nname: foo\nnamespace: bar\nversion: 0.2.3 # <-- collection version should be >= 1.0.0\nauthors:\n  - John\nreadme: ../README.md\ndescription: \"...\"\n```\n\n----------------------------------------\n\nTITLE: Valid Sanity Test Ignore Example\nDESCRIPTION: Example of correct code showing a properly formatted ignore entry using an allowed version (2.7) and supported ignore pattern.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/sanity.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# tests/sanity/ignore-x.x.txt\nplugins/module_utils/ansible_example_module.py import-2.7!skip\n```\n\n----------------------------------------\n\nTITLE: Correct Collection Version Configuration in galaxy.yml\nDESCRIPTION: Example of proper version configuration meeting the minimum version requirement of 1.0.0.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/galaxy.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# galaxy.yml\n---\nname: foo\nnamespace: bar\nversion: 1.0.0\nauthors:\n  - John\nreadme: ../README.md\ndescription: \"...\"\n```\n\n----------------------------------------\n\nTITLE: Enabling no-same-owner Rule in Ansible-lint Configuration\nDESCRIPTION: This snippet shows how to enable the no-same-owner rule in the Ansible-lint configuration file. The rule is opt-in and must be explicitly enabled.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_same_owner.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - no-same-owner\n```\n\n----------------------------------------\n\nTITLE: Problematic Usage of Implicit Conversion in Ansible Copy Module\nDESCRIPTION: This example demonstrates the problematic pattern where a non-string value is passed to the 'content' parameter of the copy module, relying on implicit conversion. This is flagged by the avoid-implicit[copy-content] rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/avoid-implicit.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Write file content\n      ansible.builtin.copy:\n        content: { \"foo\": \"bar\" } # <-- should use explicit jinja template\n        dest: /tmp/foo.txt\n```\n\n----------------------------------------\n\nTITLE: Problematic Module Arguments in Ansible Tasks\nDESCRIPTION: Examples of common issues with module arguments including missing required parameters, missing dependent parameters, and invalid value types. Shows tasks with ansible.builtin.git missing the required 'repo' parameter, systemd missing the 'name' parameter required by 'enabled', and assert with an invalid value for the 'quiet' option.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/args.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Fixture to validate module options failure scenarios\n  hosts: localhost\n  tasks:\n    - name: Clone content repository\n      ansible.builtin.git: # <- Required option `repo` is missing.\n        dest: /home/www\n        accept_hostkey: true\n        version: master\n        update: false\n\n    - name: Enable service httpd and ensure it is not masked\n      ansible.builtin.systemd: # <- Missing 'name' parameter required by 'enabled'.\n        enabled: true\n        masked: false\n\n    - name: Use quiet to avoid verbose output\n      ansible.builtin.assert:\n        test:\n          - my_param <= 100\n          - my_param >= 0\n        quiet: invalid # <- Value for option `quiet` is invalid.\n```\n\n----------------------------------------\n\nTITLE: Problematic Shell Module Usage in Ansible\nDESCRIPTION: Example showing incorrect usage of shell module for a simple echo command that should use command module instead. Using shell module unnecessarily impacts performance as it's slower than command module.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/command_instead_of_shell.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Problematic example\n  hosts: localhost\n  tasks:\n    - name: Echo a message\n      ansible.builtin.shell: echo hello # <-- command is better in this case\n      changed_when: false\n```\n\n----------------------------------------\n\nTITLE: Invalid Ansible Version Requirement - Outdated Version\nDESCRIPTION: Example of problematic code using an outdated Ansible version requirement that is no longer supported.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# runtime.yml\n---\nrequires_ansible: \">=2.9\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Variable Naming in Ansible Playbook\nDESCRIPTION: This YAML snippet shows examples of variable naming that comply with the var-naming rule. It demonstrates proper use of lowercase characters, underscores, and avoiding reserved names.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/var-naming.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  vars:\n    lowercase: true # <- Contains only lowercase characters.\n    no_caps: bar # <- Does not contains uppercase characters.\n    variable: baz # <- Does not contain special characters.\n    my_hosts: [] # <- Does not use a reserved names.\n    my_role_name: boo\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Ansible Module for Apt Cache Update\nDESCRIPTION: This snippet shows the correct way to update apt cache using the 'apt' module in Ansible. It demonstrates the recommended approach that complies with the 'command-instead-of-module' rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/command-instead-of-module.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Update apt cache\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.apt:\n        update_cache: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Loop Variable Prefix in Ansible-Lint\nDESCRIPTION: Configuration example showing how to set up the loop variable prefix pattern in .ansible-lint file. The configuration allows for role-based prefixing using a regular expression pattern.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/loop_var_prefix.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .ansible-lint\nloop_var_prefix: \"^(__|{role}_)\"\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Task Without Change Handling\nDESCRIPTION: This code snippet demonstrates a problematic Ansible task that does not handle command output or return codes. It uses the ansible.builtin.command module without registering the output or using changed_when.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-changed-when.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Does not handle any output or return codes\n      ansible.builtin.command: cat {{ my_file | quote }} # <- Does not handle the command output.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Jinja2 Usage in Ansible YAML\nDESCRIPTION: This snippet shows examples of Jinja2 template issues in an Ansible task, including spacing problems and invalid syntax. It also demonstrates incorrect use of braces in fields with implicit Jinja2 templating.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/jinja.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Some task\n  vars:\n    foo: \"{{some|dict2items}}\" # <-- jinja[spacing]\n    bar: \"{{ & }}\" # <-- jinja[invalid]\n  when: \"{{ foo | bool }}\" # <-- jinja[spacing] - 'when' has implicit templating\n```\n\n----------------------------------------\n\nTITLE: Correct Command Module Usage in Ansible\nDESCRIPTION: Example showing the proper way to execute a simple echo command using the command module instead of shell. This is the preferred approach for better performance when shell features aren't needed.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/command_instead_of_shell.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Correct example\n  hosts: localhost\n  tasks:\n    - name: Echo a message\n      ansible.builtin.command: echo hello\n      changed_when: false\n```\n\n----------------------------------------\n\nTITLE: Correct Explicit Content Handling in Ansible Copy Module\nDESCRIPTION: The recommended approach using explicit variable declaration and JSON conversion filter. This makes the intention clear and uses documented features for proper JSON handling.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/avoid_implicit.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Write file content\n      vars:\n        content: { \"foo\": \"bar\" }\n      ansible.builtin.copy:\n        content: \"{{ content | to_json }}\" # explicit better than implicit!\n        dest: /tmp/foo.txt\n```\n\n----------------------------------------\n\nTITLE: Problematic YAML with Tab Characters in Ansible Playbook\nDESCRIPTION: Example showing incorrect usage of tab characters in an Ansible playbook. Note that the rule makes an exception for tab characters used within the ansible.builtin.lineinfile module.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Do not trigger the rule\n      ansible.builtin.lineinfile:\n        path: some.txt\n        regexp: '^\\t$'\n        line: 'string with \\t inside'\n    - name: Trigger the rule with a debug message\n      ansible.builtin.debug:\n        msg: \"Using the \\t character can cause formatting issues.\" # <- Includes the tab character.\n```\n\n----------------------------------------\n\nTITLE: Enabling galaxy-version-incorrect Rule in Ansible-lint Configuration\nDESCRIPTION: This snippet shows how to enable the 'galaxy-version-incorrect' rule in the Ansible-lint configuration file. The rule is opt-in and must be explicitly enabled.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/galaxy_version_incorrect.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - galaxy-version-incorrect\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.cfg for Custom Ansible-lint Rules Package\nDESCRIPTION: YAML configuration example for the setup.cfg file that properly packages custom rules to be discovered by Ansible-lint. This configuration maps the package directory structure to ensure rules are loaded correctly.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/custom-rules.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n[options]\npackages =\n    ansiblelint.rules.custom.<your_custom_rules_subdir>\npackage_dir =\n    ansiblelint.rules.custom.<your_custom_rules_subdir> = <your_rules_source_code_subdir>\n```\n\n----------------------------------------\n\nTITLE: Correct Sanity Ignore File with Allowed Version\nDESCRIPTION: An example of a correctly formatted sanity ignore file that uses import-2.7, which is in the list of allowed ignores. This would pass the sanity rule check.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/sanity.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# tests/sanity/ignore-x.x.txt\nplugins/module_utils/ansible_example_module.py import-2.7!skip\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Task Without Changed-When\nDESCRIPTION: Example showing incorrect implementation of a command module without handling output or defining when changes occur. This code lacks proper change detection mechanisms.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_changed_when.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Does not handle any output or return codes\n      ansible.builtin.command: cat {{ my_file | quote }} # <- Does not handle the command output.\n```\n\n----------------------------------------\n\nTITLE: Problematic YAML Code Examples\nDESCRIPTION: Examples of YAML code that violates syntax rules including missing document start, octal values, and comment indentation issues.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/yaml.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Missing YAML document start.\nfoo: 0777 # <-- yaml[octal-values]\nfoo2: 0o777 # <-- yaml[octal-values]\nfoo2: ... # <-- yaml[key-duplicates]\nbar: ...       # <-- yaml[comments-indentation]\n```\n\n----------------------------------------\n\nTITLE: Problematic Git Module Usage in Ansible\nDESCRIPTION: Example showing unsafe usage of git module with HEAD reference that would trigger the latest rule warning. This pattern is considered risky as HEAD can point to different commits over time.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/latest.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example for `latest` rule\n  hosts: localhost\n  tasks:\n    - name: Risky use of git module\n      ansible.builtin.git:\n        repo: \"https://github.com/ansible/ansible-lint\"\n        version: HEAD # <-- HEAD value is triggering the rule\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task-Based Rule in Python for Ansible-lint\nDESCRIPTION: Example of a custom rule using the 'matchtask' method, which operates on standardized task structures. This references an external file '../examples/rules/task_has_tag.py'.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/custom-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{!../examples/rules/task_has_tag.py!}\n```\n\n----------------------------------------\n\nTITLE: Silencing No-Handler Rule in Ansible\nDESCRIPTION: Example showing how to silence the no-handler rule using a noqa comment when necessary.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-handler.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Optionally silences the rule.\nwhen: result.changed # noqa: no-handler\n```\n\n----------------------------------------\n\nTITLE: Problematic Loop Variable Usage in Ansible Tasks\nDESCRIPTION: Examples of problematic code that would trigger the loop-var-prefix rule, showing both missing variable names and incorrect prefixes in loop variables.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/loop-var-prefix.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Does not set a variable name for loop variables.\n      ansible.builtin.debug:\n        var: item # <- When in a nested loop, \"item\" is ambiguous\n      loop:\n        - foo\n        - bar\n    - name: Sets a variable name that doesn't start with <loop_var_prefix>.\n      ansible.builtin.debug:\n        var: zz_item\n      loop:\n        - foo\n        - bar\n      loop_control:\n        loop_var: zz_item # <- zz is not the role name so the prefix is wrong\n```\n\n----------------------------------------\n\nTITLE: Problematic Package Installation in Ansible Playbook (YAML)\nDESCRIPTION: This snippet demonstrates incorrect package installation practices in Ansible. It shows examples of using 'state: latest' without proper constraints, which can lead to unintended updates and installations across different package managers.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/package-latest.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Install Ansible\n      ansible.builtin.dnf:\n        name: ansible\n        state: latest # <- Installs the latest package.\n\n    - name: Install Ansible-lint\n      ansible.builtin.pip:\n        name: ansible-lint\n      args:\n        state: latest # <- Installs the latest package.\n\n    - name: Install some-package\n      ansible.builtin.package:\n        name: some-package\n        state: latest # <- Installs the latest package.\n\n    - name: Install sudo with update_only to false\n      ansible.builtin.dnf:\n        name: sudo\n        state: latest\n        update_only: false # <- Updates and installs packages.\n\n    - name: Install sudo with only_upgrade to false\n      ansible.builtin.apt:\n        name: sudo\n        state: latest\n        only_upgrade: false # <- Upgrades and installs packages\n```\n\n----------------------------------------\n\nTITLE: Using failed_when for Conditional Failure in Ansible Playbook\nDESCRIPTION: A sophisticated error handling approach that uses the failed_when directive with specific conditions to determine what constitutes a failure, allowing for precise control over error handling behavior.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/ignore-errors.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Disable apport\n      become: \"yes\"\n      lineinfile:\n        line: \"enabled=0\"\n        dest: /etc/default/apport\n        mode: 0644\n        state: present\n      register: default_apport\n      failed_when: default_apport.rc !=0 and not default_apport.rc == 257 # <- Defines conditions that constitute a failure.\n```\n\n----------------------------------------\n\nTITLE: Problematic Variable Naming Examples in Ansible\nDESCRIPTION: Examples of incorrect variable naming that violate Ansible conventions, including usage of CamelCase, ALL_CAPS, special characters, and reserved names.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/var_naming.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  vars:\n    CamelCase: true # <- Contains a mix of lowercase and uppercase characters.\n    ALL_CAPS: bar # <- Contains only uppercase characters.\n    v@r!able: baz # <- Contains special characters.\n    hosts: [] # <- hosts is an Ansible reserved name\n    role_name: boo # <-- invalid as being Ansible special magic variable\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tags\nDESCRIPTION: Shows how to list all available tags in Ansible-lint\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nansible-lint -T 2>/dev/null\n```\n\n----------------------------------------\n\nTITLE: Incorrect Collection Version Configuration in galaxy.yml\nDESCRIPTION: Example of improper version configuration where the collection version is below the required minimum of 1.0.0.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/galaxy.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# galaxy.yml\n---\nname: foo\nnamespace: bar\nversion: 0.2.3 # <-- collection version should be >= 1.0.0\nauthors:\n  - John\nreadme: ../README.md\ndescription: \"...\"\n```\n\n----------------------------------------\n\nTITLE: Tag-based Rule Inclusion\nDESCRIPTION: Example of running Ansible-lint with specific tagged rules\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ansible-lint -t idempotency playbook.yml\n```\n\n----------------------------------------\n\nTITLE: Problematic Package Installation in Ansible\nDESCRIPTION: Examples of unsafe package installation practices using different Ansible package managers. Shows risky configurations that could lead to uncontrolled updates and additional package installations.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/package_latest.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Install Ansible\n      ansible.builtin.dnf:\n        name: ansible\n        state: latest # <- Installs the latest package.\n\n    - name: Install Ansible-lint\n      ansible.builtin.pip:\n        name: ansible-lint\n      args:\n        state: latest # <- Installs the latest package.\n\n    - name: Install some-package\n      ansible.builtin.package:\n        name: some-package\n        state: latest # <- Installs the latest package.\n\n    - name: Install sudo with update_only to false\n      ansible.builtin.dnf:\n        name: sudo\n        state: latest\n        update_only: false # <- Updates and installs packages.\n\n    - name: Install sudo with only_upgrade to false\n      ansible.builtin.apt:\n        name: sudo\n        state: latest\n        only_upgrade: false # <- Upgrades and installs packages\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Playbook with Interactive Prompts\nDESCRIPTION: Example of a problematic playbook that uses vars_prompt for credential input and ansible.builtin.pause module, which should be avoided for unattended execution.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-prompting.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  vars_prompt: # <- Prompts the user to input credentials.\n    - name: username\n      prompt: What is your username?\n      private: false\n\n    - name: password\n      prompt: What is your password?\n  tasks:\n    - name: Pause for 5 minutes\n      ansible.builtin.pause:\n        minutes: 5 # <- Pauses playbook execution for a set period of time.\n```\n\n----------------------------------------\n\nTITLE: Problematic Usage of Command Instead of Module in Ansible Playbook\nDESCRIPTION: This snippet demonstrates incorrect usage of the 'command' module to update apt cache, which is better handled by the 'apt' module. The rule recommends using specific Ansible modules for better reliability and features.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/command-instead-of-module.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Update apt cache\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.command: apt-get update # <-- better to use ansible.builtin.apt module\n```\n\n----------------------------------------\n\nTITLE: Incorrect Ansible Role Metadata Tags with Special Characters\nDESCRIPTION: Example showing invalid metadata tags containing uppercase letters and special characters, which violates the meta-no-tags rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_no_tags.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Metadata tags contain upper-case letters and special characters.\ngalaxy_info:\n  galaxy_tags: [MyTag#1, MyTag&^-]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible-Lint Skip Rules\nDESCRIPTION: Specifies lint check exclusions for ansible_example_module.py. It skips deprecation mismatch validation, import compatibility checks for Python 2.6, and general module validation rules.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/examples/sanity_ignores/tests/sanity/ignore-2.9.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Should be fully skipped\nplugins/module_utils/ansible_example_module.py validate-modules:deprecation-mismatch\nplugins/module_utils/ansible_example_module.py import-2.6!skip\nplugins/module_utils/ansible_example_module.py validate-modules\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deprecated Local Action Usage in Ansible YAML\nDESCRIPTION: This snippet shows an example of problematic code using the deprecated 'local_action' in an Ansible task. It's used to illustrate what should be avoided.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/deprecated_local_action.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Task example\n  local_action: # <-- this is deprecated\n    module: ansible.builtin.debug\n```\n\n----------------------------------------\n\nTITLE: Using noqa Comment to Bypass Args Validation in Ansible\nDESCRIPTION: Example of using the '# noqa: args[module]' comment to bypass validation in complex cases with Jinja expressions where the linter might report false positives. Shows how to handle mutually exclusive parameters when using Jinja template expressions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/args.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Add apt keys # noqa: args[module]\n  become: true\n  ansible.builtin.apt_key:\n    url: \"{{ zj_item['url'] | default(omit) }}\"\n    data: \"{{ zj_item['data'] | default(omit) }}\"\n  loop: \"{{ repositories_keys }}\"\n  loop_control:\n    loop_var: zj_item\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Variable Naming in Ansible Playbook\nDESCRIPTION: This YAML snippet illustrates examples of variable naming that violate the var-naming rule. It includes cases of improper capitalization, special characters, and use of reserved names.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/var-naming.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  vars:\n    CamelCase: true # <- Contains a mix of lowercase and uppercase characters.\n    ALL_CAPS: bar # <- Contains only uppercase characters.\n    v@r!able: baz # <- Contains special characters.\n    hosts: [] # <- hosts is an Ansible reserved name\n    role_name: boo # <-- invalid as being Ansible special magic variable\n```\n\n----------------------------------------\n\nTITLE: Problematic Boolean Comparison in Ansible When Clause\nDESCRIPTION: Example of unnecessarily complex literal comparison in an Ansible playbook's when clause. Shows anti-pattern of comparing variable directly to True.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/literal_compare.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Print environment variable to stdout\n      ansible.builtin.command: echo $MY_ENV_VAR\n      when: ansible_os_family == True # <- Adds complexity to your playbook.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Role Names in Ansible Playbook (YAML)\nDESCRIPTION: This code snippet shows examples of role names that violate the naming conventions. It includes roles that don't start with an alphabetic character, contain invalid special characters, or use uppercase letters.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/role_name.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  roles:\n    - 1myrole # <- Does not start with an alphabetic character.\n    - myrole2[*^ # <- Contains invalid special characters.\n    - myRole_3 # <- Contains uppercase alphabetic characters.\n```\n\n----------------------------------------\n\nTITLE: Default Yamllint Configuration for Ansible-lint\nDESCRIPTION: Provides the default yamllint configuration used by Ansible-lint when no custom configuration file is present. This configuration ensures compatibility with Ansible-lint's internal reformatter and prettier.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/yaml.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nextends: default\n\nrules:\n  braces:\n    max-spaces-inside: 1\n    level: error\n  brackets:\n    max-spaces-inside: 1\n    level: error\n  colons:\n    max-spaces-after: -1\n    level: error\n  commas:\n    max-spaces-after: -1\n    level: error\n  comments: enable\n  comments-indentation: enable\n  document-start: disable\n  empty-lines:\n    max: 3\n    level: error\n  hyphens:\n    level: error\n  indentation: enable\n  key-duplicates: enable\n  line-length: disable\n  new-line-at-end-of-file: enable\n  new-lines:\n    type: unix\n  trailing-spaces: enable\n  truthy: disable\n  octal-values:\n    forbid-implicit-octal: true\n    forbid-explicit-octal: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Jinja Template in Ansible Playbook (YAML)\nDESCRIPTION: This code snippet shows an example of problematic YAML that would trigger an internal error due to an invalid Jinja template in the playbook name.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/_internal/internal_error.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Some title {{ # <-- Ansible will not load this invalid jinja template\n  hosts: localhost\n  tasks: []\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Ansible Playbook Structure (YAML)\nDESCRIPTION: This code snippet shows the correct way to write the same Ansible playbook without the invalid Jinja template, which would not trigger an internal error.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/_internal/internal_error.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Some title\n  hosts: localhost\n  tasks: []\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Module in Ansible Playbook (YAML)\nDESCRIPTION: This snippet demonstrates the use of a deprecated module 'ansible.netcommon.net_vlan' for configuring a VLAN ID. This usage is problematic as deprecated modules are not maintained and may be removed in future versions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/deprecated-module.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Configure VLAN ID\n      ansible.netcommon.net_vlan: # <- Uses a deprecated module.\n        vlan_id: 20\n```\n\n----------------------------------------\n\nTITLE: Handling Complex Cases with Jinja Expressions in Ansible Tasks\nDESCRIPTION: This YAML snippet demonstrates a special case where Jinja expressions are used in task arguments. The '# noqa: args[module]' comment is used to suppress false positive linting errors in complex scenarios.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/args.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Add apt keys # noqa: args[module]\n  become: true\n  ansible.builtin.apt_key:\n    url: \"{{ zj_item['url'] | default(omit) }}\"\n    data: \"{{ zj_item['data'] | default(omit) }}\"\n  loop: \"{{ repositories_keys }}\"\n  loop_control:\n    loop_var: zj_item\n```\n\n----------------------------------------\n\nTITLE: Problematic FQCN Usage in Ansible Playbook\nDESCRIPTION: Example showing incorrect usage without FQCN for the shell module, which violates the fqcn rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/fqcn.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Create an SSH connection\n      shell: ssh ssh_user@{{ ansible_ssh_host }} # <- Does not use the FQCN for the shell module.\n```\n\n----------------------------------------\n\nTITLE: Problematic Playbook Using Non-Builtin Collection (YAML)\nDESCRIPTION: This example demonstrates a playbook that violates the 'only-builtins' rule by using an action from a non-builtin collection (kubernetes.core.helm).\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/only_builtins.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Deploy a Helm chart for Prometheus\n      kubernetes.core.helm: # <- Uses a non-builtin collection.\n        name: test\n        chart_ref: stable/prometheus\n        release_namespace: monitoring\n        create_namespace: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Video Link Formatting in Ansible Role Metadata (YAML)\nDESCRIPTION: This snippet shows incorrect ways to format video links in the meta/main.yml file of an Ansible role. It includes examples of missing the 'url' key, using unsupported keys, and incorrect URL formats.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-video-links.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngalaxy_info:\n  video_links:\n    - https://www.youtube.com/watch?v=aWmRepTSFKs&feature=youtu.be # <- Does not use the url key.\n    - my_bad_key: https://www.youtube.com/watch?v=aWmRepTSFKs&feature=youtu.be # <- Uses an unsupported key.\n      title: Incorrect key.\n    - url: www.acme.com/vid # <- Uses an unsupported url format.\n      title: Incorrect url format.\n```\n\n----------------------------------------\n\nTITLE: Problematic Shell Module Usage in Ansible\nDESCRIPTION: Example showing incorrect usage of shell module for a simple echo command that should use command module instead. Using shell module unnecessarily impacts performance.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/command-instead-of-shell.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Problematic example\n  hosts: localhost\n  tasks:\n    - name: Echo a message\n      ansible.builtin.shell: echo hello # <-- command is better in this case\n      changed_when: false\n```\n\n----------------------------------------\n\nTITLE: Problematic File Synchronization and Archive Extraction in Ansible\nDESCRIPTION: This example demonstrates incorrect usage of the ansible.posix.synchronize and ansible.builtin.unarchive modules, where owner and group are transferred across hosts, potentially causing permission issues or information leaks.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_same_owner.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Synchronize conf file\n      ansible.posix.synchronize:\n        src: /path/conf.yaml\n        dest: /path/conf.yaml # <- Transfers the owner and group for the file.\n    - name: Extract tarball to path\n      ansible.builtin.unarchive:\n        src: \"{{ file }}.tar.gz\"\n        dest: /my/path/ # <- Transfers the owner and group for the file.\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation Errors\nDESCRIPTION: This JSON snippet captures multiple validation error messages generated by the AJV (Another JSON Schema Validator). It includes error details such as the path of the instance, the keyword indicating the type of validation error, error messages, and schema paths. This helps in identifying specific issues in JSON data where required properties might be missing, or data types are incorrect. There are no special dependencies; however, understanding of JSON schema validation is necessary to interpret these errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/tags-string.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/tags/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/tags/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Playbook with Run-Once and Free Strategy\nDESCRIPTION: Example showing incorrect usage of run_once with strategy: free, which can lead to unexpected behavior. The combination of free strategy and run_once is discouraged as it may not guarantee single execution.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/run_once.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: \"Example with run_once\"\n  hosts: all\n  strategy: free # <-- avoid use of strategy as free\n  gather_facts: false\n  tasks:\n    - name: Task with run_once\n      ansible.builtin.debug:\n        msg: \"Test\"\n      run_once: true # <-- avoid use of strategy as free at play level when using run_once at task level\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Playbook Implementation\nDESCRIPTION: A properly formatted YAML playbook that avoids the internal error by using valid syntax. This example removes the invalid Jinja template expression from the name field.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/internal-error.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Some title\n  hosts: localhost\n  tasks: []\n```\n\n----------------------------------------\n\nTITLE: Problematic Key Ordering in Ansible Playbook\nDESCRIPTION: Example of incorrect key ordering in an Ansible playbook where the 'name' key is not the first key for a play and the 'when' condition appears after the 'block' statement.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/key-order.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- hosts: localhost\n  name: This is a playbook # <-- name key should be the first one\n  tasks:\n    - name: A block\n      block:\n        - name: Display a message\n          debug:\n            msg: \"Hello world!\"\n      when: true # <-- when key should be before block\n```\n\n----------------------------------------\n\nTITLE: Problematic Copy Module Usage with Relative Path Variable\nDESCRIPTION: Example showing incorrect usage of relative paths through variables in copy module src argument, which should be avoided.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-relative-paths.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Example playbook\n  hosts: all\n  vars:\n    source_path: ../../my_templates/foo.j2 # <- Sets a variable to a relative path.\n  tasks:\n    - name: Copy a file to /etc/file.conf\n      ansible.builtin.copy:\n        src: \"{{ source_path }}\" # <- Uses the variable in the src argument.\n        dest: /etc/foo.conf\n        owner: foo\n        group: foo\n        mode: \"0644\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating load-failure[not-found] Error Code in Ansible Lint\nDESCRIPTION: Shows the specialized error code for when a file or folder specified in the arguments to ansible-lint cannot be found on disk.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/load-failure.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`load-failure[not-found]` - Indicates that one argument file or folder was not\n  found on disk.\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Playbook Using no_log for Password Protection\nDESCRIPTION: This example shows the correct implementation of an Ansible playbook that properly sets no_log: true when handling passwords in a loop. This ensures that sensitive password data won't be exposed in logs when the user creation task runs.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-log-password.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Do not log user passwords\n      ansible.builtin.user:\n        name: john_doe\n        comment: John Doe\n        uid: 1040\n        group: admin\n        password: \"{{ item }}\"\n      with_items:\n        - wow\n      no_log: true # <- Sets the no_log attribute to a non-false value.\n```\n\n----------------------------------------\n\nTITLE: Invalid Sanity Test Ignore Example - Unsupported Version\nDESCRIPTION: Example of problematic code showing an unsupported version (3.6) in the sanity ignore file. This is not allowed according to the current ruleset.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/sanity.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# tests/sanity/ignore-x.x.txt\nplugins/module_utils/ansible_example_module.py import-3.6!skip\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON output shows the check-jsonschema tool's validation results for the same invalid Ansible playbook. It provides a structured error report with a hierarchical organization of errors, including a 'best_match' indication and grouped sub-errors for more accessible debugging.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'pre_tasks': 'foo', 'post_tasks': {}, 'tasks': 1, 'handlers': 1.0} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'handlers', 'hosts', 'post_tasks', 'pre_tasks', 'tasks' do not match any of the regexes: '^(ansible\\\\\\\\.builtin\\\\\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].handlers\",\n        \"message\": \"1.0 is not of type 'array', 'null'\"\n      },\n      \"num_sub_errors\": 7,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'handlers', 'hosts', 'post_tasks', 'pre_tasks', 'tasks' do not match any of the regexes: '^(ansible\\\\\\\\.builtin\\\\\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'pre_tasks': 'foo', 'post_tasks': {}, 'tasks': 1, 'handlers': 1.0} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].handlers\",\n          \"message\": \"1.0 is not of type 'array', 'null'\"\n        },\n        {\n          \"path\": \"$[0].post_tasks\",\n          \"message\": \"{} is not of type 'array', 'null'\"\n        },\n        {\n          \"path\": \"$[0].pre_tasks\",\n          \"message\": \"'foo' is not of type 'array', 'null'\"\n        },\n        {\n          \"path\": \"$[0].tasks\",\n          \"message\": \"1 is not of type 'array', 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Implicit Content Handling in Ansible Copy Module\nDESCRIPTION: An example showing problematic implicit behavior when using the copy module with a dictionary content value. This approach relies on undocumented behavior for JSON conversion.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/avoid_implicit.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Write file content\n      ansible.builtin.copy:\n        content: { \"foo\": \"bar\" } # <-- should use explicit jinja template\n        dest: /tmp/foo.txt\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Register in Ansible\nDESCRIPTION: Example showing how to register errors for later evaluation using the register directive.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/ignore_errors.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.command: apt-get update\n      ignore_errors: true\n      register: ignore_errors_register # <- Stores errors and failures for evaluation.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Ansible Task and Play Naming Conventions\nDESCRIPTION: This snippet shows problematic code that violates the 'name' rule in ansible-lint. Issues include a missing play name (name[play]) and improper casing in task name (name[casing]).\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/name.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- hosts: localhost # <-- playbook name[play]\n  tasks:\n    - name: create placefolder file # <-- name[casing] due lack of capital letter\n      ansible.builtin.command: touch /tmp/.placeholder\n```\n\n----------------------------------------\n\nTITLE: Problematic Template Module Usage with Relative Path\nDESCRIPTION: Example showing incorrect usage of relative paths in the ansible.builtin.template module's src argument. This is problematic as it references files outside the standard templates directory.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_relative_paths.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Template a file to /etc/file.conf\n      ansible.builtin.template:\n        src: ../my_templates/foo.j2 # <- Uses a relative path in the src argument.\n        dest: /etc/file.conf\n        owner: bin\n        group: wheel\n        mode: \"0644\"\n```\n\n----------------------------------------\n\nTITLE: Raw Task Documentation - Markdown\nDESCRIPTION: Documentation comment explaining the purpose of a raw task rule for Ansible Lint that inspects raw action parameters in tasks.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/rules/fixtures/raw_task.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# raw-task\\n\\nThis is a test rule that looks in a raw task to flag raw action params.\n```\n\n----------------------------------------\n\nTITLE: Invalid Sanity Test Ignore Example - Incorrect Format\nDESCRIPTION: Example of problematic code showing incorrectly formatted ignore entry with an invalid test name (oops-3.6).\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/sanity.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# tests/sanity/ignore-x.x.txt\nplugins/module_utils/ansible_example_module.oops-3.6!skip\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON output shows validation errors from the check-jsonschema tool for an Ansible playbook. The errors are organized hierarchically with a main error status, best matches, and sub-errors. It identifies that 'become: yes' should be a boolean rather than a string.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/invalid_become.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/invalid_become.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'become': 'yes'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'become', 'hosts' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].become\",\n        \"message\": \"'yes' is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'become', 'hosts' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'become': 'yes'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].become\",\n          \"message\": \"'yes' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].become\",\n          \"message\": \"'yes' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].become\",\n          \"message\": \"'yes' does not match '^\\\\\\\\{[\\\\\\\\{%](.|[\\r\\n])*[\\\\\\\\}%]\\\\\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe Usage of ini_file Module in Ansible\nDESCRIPTION: This snippet shows an unsafe example of using the community.general.ini_file module without specifying permissions, which could lead to files being created with insecure permissions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/risky_file_permissions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Unsafe example of using ini_file\n  community.general.ini_file:\n    path: foo\n    create: true\n```\n\n----------------------------------------\n\nTITLE: Linting Playbooks and Roles\nDESCRIPTION: Example of linting specific playbooks and roles with Ansible-lint\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ansible-lint examples/playbooks/play.yml examples/roles/bobbins\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Naming in Ansible Playbook\nDESCRIPTION: This YAML snippet shows incorrect naming practices in an Ansible playbook. It lacks a play name and uses incorrect casing for the task name.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/name.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- hosts: localhost # <-- playbook name[play]\n  tasks:\n    - name: create placefolder file # <-- name[casing] due lack of capital letter\n      ansible.builtin.command: touch /tmp/.placeholder\n```\n\n----------------------------------------\n\nTITLE: Problematic Environment Variable Setting in Ansible Command Module\nDESCRIPTION: This snippet demonstrates incorrect usage of environment variable setting within the ansible.builtin.command module. This approach is discouraged and flagged by the inline-env-var rule.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/inline_env_var.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Set environment variable\n      ansible.builtin.command: MY_ENV_VAR=my_value # <- Sets an environment variable in the command module.\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook in JSON\nDESCRIPTION: This JSON object contains validation results from check-jsonschema, showing a failure status and detailed errors. It highlights issues with the playbook structure, including missing required properties and incorrect data types.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tags-mapping.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tags-mapping.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tags': {}} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tags\",\n        \"message\": \"{} is not of type 'string'\"\n      },\n      \"num_sub_errors\": 9,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tags': {}} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not of type 'array'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Running Example Playbooks\nDESCRIPTION: Demonstrates running Ansible-lint on example playbooks with offline mode and formatted output\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ansible-lint --offline -p examples/playbooks/example.yml\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ansible-lint --offline -q -p examples/playbooks/include.yml\n```\n\n----------------------------------------\n\nTITLE: Code Climate JSON Output\nDESCRIPTION: Generates Code Climate JSON formatted output from Ansible-lint\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nansible-lint --offline -q -f codeclimate examples/playbooks/norole.yml\n```\n\n----------------------------------------\n\nTITLE: AJV Validation Errors for Ansible Playbook Task\nDESCRIPTION: Error output from AJV JSON schema validator showing validation errors for an Ansible playbook task. The errors indicate a missing required 'block' property and an invalid type for the 'loop' property (should be string or array).\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/loop2.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/loop\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string,array\",\n    \"params\": {\n      \"type\": [\n        \"string\",\n        \"array\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/loop/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Handler Implementation in Ansible\nDESCRIPTION: Example showing incorrect implementation using when: result.changed condition instead of proper handlers. This approach is discouraged as it bypasses Ansible's handler system.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example of no-handler rule\n  hosts: localhost\n  tasks:\n    - name: Register result of a task\n      ansible.builtin.copy:\n        dest: \"/tmp/placeholder\"\n        content: \"Ansible made this!\"\n        mode: 0600\n      register: result # <-- Registers the result of the task.\n    - name: Second command to run\n      ansible.builtin.debug:\n        msg: The placeholder file was modified!\n      when: result.changed # <-- Triggers the no-handler rule.\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Rule Skip List\nDESCRIPTION: Example showing how to disable YAML syntax checking entirely or specific yamllint rules in Ansible-lint configuration.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nskip_list:\n  - yaml\n```\n\n----------------------------------------\n\nTITLE: Deprecated Local Action Usage in Ansible YAML\nDESCRIPTION: Example showing the deprecated way of executing local actions using the 'local_action' directive in Ansible playbooks.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/deprecated-local-action.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Task example\n  local_action: # <-- this is deprecated\n    module: ansible.builtin.debug\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe Numeric File Permissions in Ansible YAML\nDESCRIPTION: This snippet shows an incorrect way of specifying file permissions in Ansible tasks. The mode is set as an unquoted integer, which can lead to unexpected behavior.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/risky-octal.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Unsafe example of declaring Numeric file permissions\n      ansible.builtin.file:\n        path: /etc/foo.conf\n        owner: foo\n        group: foo\n        mode: 644\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook\nDESCRIPTION: This JSON output presents a summary of validation failures from check-jsonschema for an Ansible playbook. It provides an overview of errors, including issues with the 'gather_facts' property and missing required properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_facts.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/gather_facts.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'gather_facts': 'non', 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'gather_facts', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].gather_facts\",\n        \"message\": \"'non' is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'gather_facts', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'gather_facts': 'non', 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].gather_facts\",\n          \"message\": \"'non' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].gather_facts\",\n          \"message\": \"'non' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].gather_facts\",\n          \"message\": \"'non' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: AJV Pattern Validation Error for Ansible Collection Name Format\nDESCRIPTION: JSON output from AJV showing a validation error where an Ansible collection name fails to match the required pattern. The error indicates the collection name should follow the pattern of namespace and collection name separated by a dot (e.g., 'namespace.collection').\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta_invalid_collection/meta/main.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/collections/0\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^[a-z_]+\\\\.[a-z_]+$\\\"\",\n    \"params\": {\n      \"pattern\": \"^[a-z_]+\\\\.[a-z_]+$\"\n    },\n    \"schemaPath\": \"#/$defs/collections/items/pattern\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook with Invalid failed_when Conditions\nDESCRIPTION: JSON output from ajv showing validation errors for an Ansible playbook that uses improper failed_when conditions. The errors indicate the playbook is using numeric, sequence, and map values for failed_when, which should be boolean, string, or array types according to the schema.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/invalid-failed-when.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/failed_when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/2\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/2/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/2/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/2/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/2/failed_when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/2\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Task Include with Privilege Escalation\nDESCRIPTION: Shows problematic implementation when using included tasks with privilege escalation directives.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/partial_become.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook 1\n  hosts: localhost\n  become: true # <- Activates privilege escalation.\n  tasks:\n    - name: Include a task file\n      ansible.builtin.include_tasks: tasks.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook 2\n  hosts: localhost\n  tasks:\n    - name: Include a task file\n      ansible.builtin.include_tasks: tasks.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# tasks.yml\n- name: Start the httpd service as the apache user\n  ansible.builtin.service:\n    name: httpd\n    state: started\n  become_user: apache # <- Does not change the user because \"become: true\" is not set.\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Warning List\nDESCRIPTION: Example showing how to convert YAML syntax violations to warnings instead of errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/yaml.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwarn_list:\n  - yaml[document-start]\n```\n\n----------------------------------------\n\nTITLE: Problematic Octal File Permissions in Ansible YAML\nDESCRIPTION: This snippet demonstrates an unsafe way of declaring numeric file permissions in an Ansible playbook. The unquoted '644' mode can lead to unexpected behavior as YAML may interpret it differently.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/risky_octal.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Unsafe example of declaring Numeric file permissions\n      ansible.builtin.file:\n        path: /etc/foo.conf\n        owner: foo\n        group: foo\n        mode: 644\n```\n\n----------------------------------------\n\nTITLE: Problematic Empty String Comparisons in Ansible Playbook\nDESCRIPTION: Example showing incorrect usage of empty string comparisons in conditional statements that should be avoided.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/empty_string_compare.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Shut down\n      ansible.builtin.command: /sbin/shutdown -t now\n      when: ansible_os_family == \"\" # <- Compares with an empty string.\n    - name: Shut down\n      ansible.builtin.command: /sbin/shutdown -t now\n      when: ansible_os_family !=\"\" # <- Compares with an empty string.\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Error Output for JSON Schema Validation\nDESCRIPTION: This snippet presents the error output from check-jsonschema, another JSON schema validator. It indicates a validation failure, specifying that the 'children' property at '$.platforms[0].children' is not of type 'array' as required.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/molecule/platforms_children/molecule.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/molecule/platforms_children/molecule.yml\",\n      \"path\": \"$.platforms[0].children\",\n      \"message\": \"2 is not of type 'array'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Role Metadata Tags Format\nDESCRIPTION: Example showing proper metadata tags using only lowercase letters and numbers, following best practices for Ansible role metadata.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_no_tags.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Metadata tags contain only lowercase letters and numbers.\ngalaxy_info:\n  galaxy_tags: [mytag1, mytag2]\n```\n\n----------------------------------------\n\nTITLE: Defining Galaxy Info for Standalone Roles in YAML\nDESCRIPTION: This snippet shows how to specify the 'standalone' property in the galaxy_info section of a meta/main.yml file. This property is required by Ansible-lint to clarify if a role is a standalone role or part of a collection.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/schema.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngalaxy_info:\n  standalone: true # <-- this is a standalone role (not part of a collection)\n```\n\n----------------------------------------\n\nTITLE: Error Output from check-jsonschema for Invalid Ansible Collection Name\nDESCRIPTION: Shows the JSON error output from check-jsonschema when validating an Ansible collection name that violates the pattern requirement. The error specifically identifies that 'FOO.BAR' (uppercase) doesn't match the required lowercase pattern for collection names.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta_invalid_collections/meta/main.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/roles/meta_invalid_collections/meta/main.yml\",\n      \"path\": \"$.collections[0]\",\n      \"message\": \"'FOO.BAR' does not match '^[a-z_]+\\\\\\\\.[a-z_]+$'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Ansible Playbook with check-jsonschema Tool\nDESCRIPTION: Output from check-jsonschema tool showing schema validation failure for the same invalid Ansible playbook. The error details show that the serial value '10%BAD' fails validation against multiple schema constraints, providing a concise summary with best matches.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/invalid-serial.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/invalid-serial.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'serial': '10%BAD'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'serial' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].serial\",\n        \"message\": \"'10%BAD' is not of type 'integer'\"\n      },\n      \"num_sub_errors\": 9,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'serial' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'serial': '10%BAD'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].serial\",\n          \"message\": \"'10%BAD' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].serial\",\n          \"message\": \"'10%BAD' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].serial\",\n          \"message\": \"'10%BAD' is not of type 'integer'\"\n        },\n        {\n          \"path\": \"$[0].serial\",\n          \"message\": \"'10%BAD' does not match '^\\\\d+\\\\.?\\\\d*%?$'\"\n        },\n        {\n          \"path\": \"$[0].serial\",\n          \"message\": \"'10%BAD' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].serial\",\n          \"message\": \"'10%BAD' is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Missing Required Tags in galaxy.yml\nDESCRIPTION: Example of galaxy.yml configuration missing the required certification tags for Automation Hub.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/galaxy.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# galaxy.yml\n---\nnamespace: bar\nname: foo\nversion: 1.0.0\nauthors:\n  - John\nreadme: ../README.md\ndescription: \"...\"\nlicense:\n  - Apache-2.0\nrepository: https://github.com/ORG/REPO_NAME\n```\n\n----------------------------------------\n\nTITLE: Yamllint Comment Configuration\nDESCRIPTION: Example yamllint configuration for comment spacing compatibility with prettier.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/yaml.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  comments:\n    min-spaces-from-content: 1 # prettier compatibility\n```\n\n----------------------------------------\n\nTITLE: Problematic Galaxy Tags Configuration in YAML\nDESCRIPTION: Example of incorrect galaxy.yml configuration missing required certification tags.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/galaxy.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# galaxy.yml\n---\nnamespace: bar\nname: foo\nversion: 1.0.0\nauthors:\n  - John\nreadme: ../README.md\ndescription: \"...\"\nlicense:\n  - Apache-2.0\nrepository: https://github.com/ORG/REPO_NAME\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Playbook Without Run-Once\nDESCRIPTION: Example showing proper implementation without using run_once or free strategy, avoiding potential execution inconsistencies.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/run_once.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Example without run_once\"\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Task without run_once\n      ansible.builtin.debug:\n        msg: \"Test\"\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Schema Validation with Errors\nDESCRIPTION: This JSON snippet represents the stdout output of a JSON schema validation process, which includes the validation status, error details, and sub-errors related to specific properties or data types. It highlights particular files and paths within JSON that failed validation due to reasons like missing required properties or incorrect data types. Key constraints include understanding of JSON schema concepts and interpreting validation error structures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/tags-string.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/tags-string.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'ansible.builtin.debug': {'msg': 'foo'}, 'tags': 123} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tags\",\n        \"message\": \"123 is not of type 'string'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not of type 'array'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: check-jsonschema Error Output for Missing Author Property in Ansible Role\nDESCRIPTION: Sample error output from check-jsonschema tool showing validation errors for an Ansible role metadata file. The error indicates that the 'author' property is missing from the galaxy_info section in the meta/main.yml file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta_invalid_role_namespace/meta/main.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/roles/meta_invalid_role_namespace/meta/main.yml\",\n      \"path\": \"$.galaxy_info\",\n      \"message\": \"'author' is a required property\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON output shows detailed validation errors from ajv when validating an Ansible playbook. The errors indicate issues with missing required properties like 'import_playbook' and invalid properties like 'become' which should be boolean rather than string.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/invalid_become.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"become\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/become\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/become\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\\\\\{[\\\\\\\\{%](.|[\\r\\n])*[\\\\\\\\}%]\\\\\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\\\\\{[\\\\\\\\{%](.|[\\r\\n])*[\\\\\\\\}%]\\\\\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/become\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Playbook with Invalid Jinja Template\nDESCRIPTION: An example of a YAML playbook that will trigger an internal error due to an invalid Jinja template in the name field. The invalid syntax with an unclosed Jinja expression will prevent Ansible from loading the playbook.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/internal-error.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Some title {{ # <-- Ansible will not load this invalid jinja template\n  hosts: localhost\n  tasks: []\n```\n\n----------------------------------------\n\nTITLE: Basic Ansible-lint Help Command\nDESCRIPTION: Displays available commands and options for Ansible-lint\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ansible-lint --help\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Free-Form Syntax in Ansible Playbook\nDESCRIPTION: This YAML snippet shows examples of discouraged free-form syntax in Ansible tasks. It includes a command module using free-form for directory specification and a raw module using free-form for executable specification.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-free-form.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example with discouraged free-form syntax\n  hosts: localhost\n  tasks:\n    - name: Create a placefolder file\n      ansible.builtin.command: chdir=/tmp touch foo # <-- don't use free-form\n    - name: Use raw to echo\n      ansible.builtin.raw: executable=/bin/bash echo foo # <-- don't use executable=\n      changed_when: false\n```\n\n----------------------------------------\n\nTITLE: Raw Module Non-String Warning Rule Identifier\nDESCRIPTION: The rule identifier for warning cases where the raw module is used with non-string arguments, which is unsupported in Ansible.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/_internal/warning.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nwarning[raw-non-string]\n```\n\n----------------------------------------\n\nTITLE: Ajv Schema Validation Error Output for Ansible Task\nDESCRIPTION: Raw JSON error output from ajv showing validation failures for an Ansible task with an invalid 'when' condition. The errors indicate that a required 'block' property is missing and that the 'when' property must be a boolean, string, or array, not an integer.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/when_integer.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Shell Pipeline without pipefail in Ansible\nDESCRIPTION: An example of problematic code that fails to set the pipefail option when piping commands in the Ansible shell module. Without pipefail, the task will succeed even if the first command (false) fails.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/risky-shell-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Pipeline without pipefail\n      ansible.builtin.shell: false | cat\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv JSON Schema Validation Errors for Ansible Role Metadata\nDESCRIPTION: Shows the detailed error output from ajv validator for an Ansible role metadata file with invalid dependencies and missing required properties. The errors indicate issues with dependency format and missing required properties like 'role', 'src', 'name', and 'author'.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/role_with_bad_deps_in_meta/meta/main.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/dependencies/0\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/properties/dependencies/items/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/dependencies/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'role'\",\n    \"params\": {\n      \"missingProperty\": \"role\"\n    },\n    \"schemaPath\": \"#/anyOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/dependencies/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'src'\",\n    \"params\": {\n      \"missingProperty\": \"src\"\n    },\n    \"schemaPath\": \"#/anyOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/dependencies/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'name'\",\n    \"params\": {\n      \"missingProperty\": \"name\"\n    },\n    \"schemaPath\": \"#/anyOf/2/required\"\n  },\n  {\n    \"instancePath\": \"/dependencies/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  },\n  {\n    \"instancePath\": \"/dependencies/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/properties/dependencies/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/dependencies/1\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/properties/dependencies/items/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/dependencies/1\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/type\"\n  },\n  {\n    \"instancePath\": \"/dependencies/1\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/properties/dependencies/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/galaxy_info\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'author'\",\n    \"params\": {\n      \"missingProperty\": \"author\"\n    },\n    \"schemaPath\": \"#/allOf/0/then/required\"\n  },\n  {\n    \"instancePath\": \"/galaxy_info\",\n    \"keyword\": \"if\",\n    \"message\": \"must match \\\"then\\\" schema\",\n    \"params\": {\n      \"failingKeyword\": \"then\"\n    },\n    \"schemaPath\": \"#/allOf/0/if\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Invalid Ansible Playbook\nDESCRIPTION: This JSON output shows the validation errors reported by ajv for an invalid Ansible playbook. The errors indicate issues with additional properties, schema violations, and oneOf validation failures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/invalid.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"not\",\n    \"message\": \"must NOT be valid\",\n    \"params\": {},\n    \"schemaPath\": \"#/allOf/1/not\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Sanity Ignore File with Invalid Format\nDESCRIPTION: An example of a sanity ignore file with incorrect formatting. The 'oops-3.6!skip' is not a valid ignore format and would trigger the 'sanity[bad-ignore]' error.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/sanity.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# tests/sanity/ignore-x.x.txt\nplugins/module_utils/ansible_example_module.oops-3.6!skip\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Ansible Role Metadata in YAML\nDESCRIPTION: This snippet shows an example of problematic role metadata with default values that should be replaced with actual information. The fields 'author', 'description', 'company', and 'license' contain placeholder text.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_incorrect.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Metadata fields for the role contain default values.\ngalaxy_info:\n  author: your name\n  description: your role description\n  company: your company (optional)\n  license: license (GPL-2.0-or-later, MIT, etc)\n```\n\n----------------------------------------\n\nTITLE: Illustrative 'ajv' JSON Schema Validation Errors\nDESCRIPTION: This JSON snippet shows an example array of validation errors reported by the 'ajv' library. Each error object details the path within the data (`instancePath`), the validation rule violated (`keyword`), a human-readable message, specific parameters (`params`), and the path within the schema (`schemaPath`). This format is typical for 'ajv' when validating data against a JSON schema, illustrating errors like missing required properties and incorrect types.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/loop.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/loop\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string,array\",\n    \"params\": {\n      \"type\": [\n        \"string\",\n        \"array\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/loop/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors for Ansible Role Metadata\nDESCRIPTION: Shows the formatted validation output from check-jsonschema tool when validating an Ansible role metadata file. The output includes detailed error information with file paths, specific error messages, and nested sub-errors for better debugging of dependency format issues and missing required properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/role_with_bad_deps_in_meta/meta/main.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/roles/role_with_bad_deps_in_meta/meta/main.yml\",\n      \"path\": \"$.dependencies[0]\",\n      \"message\": \"{'version': 'foo'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$.dependencies[0]\",\n        \"message\": \"{'version': 'foo'} is not of type 'string'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$.dependencies[0]\",\n        \"message\": \"{'version': 'foo'} is not of type 'string'\"\n      },\n      \"num_sub_errors\": 4,\n      \"sub_errors\": [\n        {\n          \"path\": \"$.dependencies[0]\",\n          \"message\": \"{'version': 'foo'} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$.dependencies[0]\",\n          \"message\": \"{'version': 'foo'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$.dependencies[0]\",\n          \"message\": \"'role' is a required property\"\n        },\n        {\n          \"path\": \"$.dependencies[0]\",\n          \"message\": \"'src' is a required property\"\n        },\n        {\n          \"path\": \"$.dependencies[0]\",\n          \"message\": \"'name' is a required property\"\n        }\n      ]\n    },\n    {\n      \"filename\": \"negative_test/roles/role_with_bad_deps_in_meta/meta/main.yml\",\n      \"path\": \"$.dependencies[1]\",\n      \"message\": \"1234 is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$.dependencies[1]\",\n        \"message\": \"1234 is not of type 'string'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$.dependencies[1]\",\n        \"message\": \"1234 is not of type 'string'\"\n      },\n      \"num_sub_errors\": 1,\n      \"sub_errors\": [\n        {\n          \"path\": \"$.dependencies[1]\",\n          \"message\": \"1234 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$.dependencies[1]\",\n          \"message\": \"1234 is not of type 'object'\"\n        }\n      ]\n    },\n    {\n      \"filename\": \"negative_test/roles/role_with_bad_deps_in_meta/meta/main.yml\",\n      \"path\": \"$.galaxy_info\",\n      \"message\": \"'author' is a required property\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Galaxy Metadata\nDESCRIPTION: JSON output from ajv showing validation errors in an Ansible role's galaxy_info metadata. Errors include missing 'author' property and incorrect type for 'galaxy_tags' which should be an array.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta/main.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/galaxy_info\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'author'\",\n    \"params\": {\n      \"missingProperty\": \"author\"\n    },\n    \"schemaPath\": \"#/allOf/0/then/required\"\n  },\n  {\n    \"instancePath\": \"/galaxy_info\",\n    \"keyword\": \"if\",\n    \"message\": \"must match \\\"then\\\" schema\",\n    \"params\": {\n      \"failingKeyword\": \"then\"\n    },\n    \"schemaPath\": \"#/allOf/0/if\"\n  },\n  {\n    \"instancePath\": \"/galaxy_info/galaxy_tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/galaxy_tags/type\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Reporting check-jsonschema Validation Output in JSON\nDESCRIPTION: This snippet captures the validation result from the check-jsonschema tool as a JSON object, summarizing failures on input documents (like Ansible task YAML) against a JSON Schema. The structure includes fields for status, an array of error objects (with details such as file name, message, and sub-errors), as well as matches for best error/most-specific error for easier diagnosis. There are dependencies on both a JSON Schema and the check-jsonschema engine. Expected input is a file to be validated, and the output will indicate which requirements (such as property types and required fields) were not satisfied. This format enables machine parsing and integration into test or CI pipelines.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/no_log_number.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/no_log_number.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'ansible.builtin.debug': {'msg': 'foo'}, 'no_log': 123} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].no_log\",\n        \"message\": \"123 is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"123 is not of type 'string'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Python Test Import Configuration\nDESCRIPTION: Test file configuration specifying Python 3.6 import requirements with a skip directive.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/examples/sanity_ignores/tests/sanity/ignore-2.13.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntests/unit/file.py import-3.6!skip\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Ansible Module for VLAN Configuration\nDESCRIPTION: This snippet demonstrates the use of a deprecated Ansible module 'ansible.netcommon.net_vlan' for configuring a VLAN ID. This usage is problematic and should be avoided.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/deprecated_module.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Configure VLAN ID\n      ansible.netcommon.net_vlan: # <- Uses a deprecated module.\n        vlan_id: 20\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON output shows detailed validation errors from ajv for an Ansible playbook. It highlights issues with missing required properties, additional unexpected properties, and type mismatches.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_facts.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"gather_facts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/gather_facts\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/gather_facts\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/gather_facts\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example ajv JSON Schema Validation Errors in JSON\nDESCRIPTION: This JSON snippet represents an array of error objects generated by the 'ajv' JSON schema validator. It indicates multiple reasons why a given input failed validation against a schema, specifically mentioning violations of 'additionalProperties', 'type' (expected string or null), and ultimately failing the 'anyOf' condition. Each error object includes details like 'instancePath', 'keyword', 'message', 'params', and 'schemaPath'.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/play-keyword.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"environment\"\n    },\n    \"schemaPath\": \"#/anyOf/0/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be null\",\n    \"params\": {\n      \"type\": \"null\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Shell Pipe Usage in Ansible Playbook\nDESCRIPTION: This snippet shows an example of a problematic Ansible task that uses a shell command with a pipe but without the 'pipefail' option. This can lead to unexpected behavior when the first command in the pipe fails.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/risky_shell_pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Pipeline without pipefail\n      ansible.builtin.shell: false | cat\n```\n\n----------------------------------------\n\nTITLE: AJV Error Output for Additional Properties Violation\nDESCRIPTION: This shows the error output format from AJV (Another JSON Validator) when an additional property 'foo' is detected in the 'argument_specs.main' object, which violates the schema definition that prohibits additional properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta/argument_specs.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/argument_specs/main\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"foo\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Check-jsonschema Validation Results for Ansible Task\nDESCRIPTION: This snippet presents the validation results from the check-jsonschema tool for the same Ansible task. It provides a detailed breakdown of the errors, including the best matches for the issues and sub-errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/no_log_string.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/no_log_string.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'ansible.builtin.debug': {'msg': 'foo'}, 'vars': {'some_var': True}, 'no_log': 'some_var'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].no_log\",\n        \"message\": \"'some_var' is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"'some_var' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"'some_var' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"'some_var' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"'some_var' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"'some_var' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].no_log\",\n          \"message\": \"'some_var' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible Lint Exceptions for Modules and Directories\nDESCRIPTION: This configuration specifies exceptions for Ansible Lint checks. It instructs the linter to skip certain checks for specific modules and directories, likely for compatibility or special case handling.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/examples/sanity_ignores/tests/sanity/ignore-2.15.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugins/module_utils/ansible_example_module.incorrect-3.6!skip\n#plugins/module_utils/ansible_example_module.py import-3.6!skip\nother_dir/module_utils/ansible_example_module incorrect-3.6!skip\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook\nDESCRIPTION: JSON output from check-jsonschema tool showing detailed validation errors for an Ansible playbook. The report includes a summary of failures, best matches for errors, and sub-errors with specific information about validation failures in different parts of the playbook.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/loop.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/loop.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tasks': [{'name': 'that should pass', 'ansible.builtin.debug': {'var': 'item'}, 'loop': 123}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].loop\",\n        \"message\": \"123 is not of type 'string', 'array'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tasks': [{'name': 'that should pass', 'ansible.builtin.debug': {'var': 'item'}, 'loop': 123}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'name': 'that should pass', 'ansible.builtin.debug': {'var': 'item'}, 'loop': 123} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].loop\",\n          \"message\": \"123 is not of type 'string', 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Metadata Tags with Special Characters in YAML\nDESCRIPTION: Example showing incorrect usage of tags in meta/main.yml containing uppercase letters and special characters, which violates Ansible best practices.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-no-tags.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Metadata tags contain upper-case letters and special characters.\ngalaxy_info:\n  galaxy_tags: [MyTag#1, MyTag&^-]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON snippet shows the validation errors reported by ajv when validating an Ansible playbook against a JSON schema. It highlights issues with required properties and additional properties not allowed by the schema.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_subset.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"gather_subset\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/gather_subset/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample ajv JSON Schema Validation Error Report\nDESCRIPTION: This JSON object represents a typical error output from the `ajv` validator. It details several schema validation failures, such as encountering unexpected additional properties ('async', 'lambda') and failing type checks ('must be string', 'must be null'), ultimately failing the 'anyOf' schema condition. Each error object specifies the 'instancePath', 'keyword' violated, 'message', 'params', and 'schemaPath'.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/python-keyword.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"async\"\n    },\n    \"schemaPath\": \"#/anyOf/0/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"lambda\"\n    },\n    \"schemaPath\": \"#/anyOf/0/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be null\",\n    \"params\": {\n      \"type\": \"null\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining load-failure Rule in Markdown\nDESCRIPTION: This snippet defines the 'load-failure' rule, explaining its purpose, possible causes, and how to handle it. It also mentions that this violation is not skippable and provides information about a specific error code.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/_internal/load-failure.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# load-failure\n\n\"Linter failed to process a file, possible invalid file. Possible reasons:\n\n- contains unsupported encoding (only UTF-8 is supported)\n- not an Ansible file\n- it contains some unsupported custom YAML objects (`!!` prefix)\n- it was not able to decrypt an inline `!vault` block.\n\nThis violation **is not** skippable, so it cannot be added to the `warn_list` or\nthe `skip_list`. If a vault decryption issue cannot be avoided, the offending\nfile can be added to `exclude_paths` configuration.\n\nPossible errors codes:\n\n- `load-failure[not-found]` - Indicates that one argument file or folder was not\n  found on disk.\"\n```\n\n----------------------------------------\n\nTITLE: check-jsonschema Error Output for Additional Properties Violation\nDESCRIPTION: This example shows the error output format from the check-jsonschema validator when detecting the same issue - an additional property 'foo' in the 'argument_specs.main' object that violates the schema definition.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta/argument_specs.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/roles/meta/argument_specs.yml\",\n      \"path\": \"$.argument_specs.main\",\n      \"message\": \"Additional properties are not allowed ('foo' was unexpected)\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook in JSON\nDESCRIPTION: This JSON array contains validation errors from ajv, highlighting issues such as missing required properties 'ansible.builtin.import_playbook' and 'import_playbook', as well as type mismatches for the 'tags' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tags-mapping.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/tags/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/tags/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Outputting check-jsonschema Validation Results for Ansible Playbook (JSON)\nDESCRIPTION: This JSON snippet shows the output of check-jsonschema for an Ansible playbook. It provides a detailed breakdown of validation failures, including specific errors and their locations within the playbook structure.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/loop2.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/loop2.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tasks': [{'name': 'that should pass', 'ansible.builtin.debug': {'var': 'item'}, 'loop': {}}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].loop\",\n        \"message\": \"{} is not of type 'string', 'array'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tasks': [{'name': 'that should pass', 'ansible.builtin.debug': {'var': 'item'}, 'loop': {}}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'name': 'that should pass', 'ansible.builtin.debug': {'var': 'item'}, 'loop': {}} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].loop\",\n          \"message\": \"{} is not of type 'string', 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Module Arguments in Ansible Tasks\nDESCRIPTION: This YAML snippet shows examples of Ansible tasks with invalid arguments, including missing required options and incorrect parameter values.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/args.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Fixture to validate module options failure scenarios\n  hosts: localhost\n  tasks:\n    - name: Clone content repository\n      ansible.builtin.git: # <- Required option `repo` is missing.\n        dest: /home/www\n        accept_hostkey: true\n        version: master\n        update: false\n\n    - name: Enable service httpd and ensure it is not masked\n      ansible.builtin.systemd: # <- Missing 'name' parameter required by 'enabled'.\n        enabled: true\n        masked: false\n\n    - name: Use quiet to avoid verbose output\n      ansible.builtin.assert:\n        test:\n          - my_param <= 100\n          - my_param >= 0\n        quiet: invalid # <- Value for option `quiet` is invalid.\n```\n\n----------------------------------------\n\nTITLE: AJV JSON Schema Validation Errors for Ansible Task\nDESCRIPTION: This snippet shows the validation errors reported by AJV (Another JSON Validator) for an Ansible task definition. It highlights multiple issues, primarily with the 'no_log' property and a missing 'block' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/no_log_string.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook Schema\nDESCRIPTION: JSON output from the ajv validator showing multiple schema validation errors in an Ansible playbook. The errors indicate missing required properties like 'import_playbook', unexpected properties like 'hosts', and type validation issues with 'vars_prompt'.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vas_prompt.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/vars_prompt\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/patternProperties/vars/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_prompt/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tags\"\n    },\n    \"schemaPath\": \"#/$defs/vars_prompt/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Loop Variable Usage in Ansible\nDESCRIPTION: Example showing incorrect implementations of loop variables, including using default 'item' variable and incorrect prefix naming that would trigger linting errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/loop_var_prefix.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Does not set a variable name for loop variables.\n      ansible.builtin.debug:\n        var: item # <- When in a nested loop, \"item\" is ambiguous\n      loop:\n        - foo\n        - bar\n    - name: Sets a variable name that doesn't start with <loop_var_prefix>.\n      ansible.builtin.debug:\n        var: zz_item\n      loop:\n        - foo\n        - bar\n      loop_control:\n        loop_var: zz_item # <- zz is not the role name so the prefix is wrong\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Error Output for Invalid Variable Name\nDESCRIPTION: This JSON output from check-jsonschema shows more detailed validation errors for the same issue - using a numeric variable name ('12') in an Ansible YAML file. It includes more detailed information including the failing filename, path, and specific regex pattern for valid Ansible variable names.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/numeric-var-name.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/vars/numeric-var-name.yml\",\n      \"path\": \"$\",\n      \"message\": \"{'12': '...'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$\",\n        \"message\": \"{'12': '...'} is not of type 'string'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$\",\n        \"message\": \"'12' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n      },\n      \"num_sub_errors\": 2,\n      \"sub_errors\": [\n        {\n          \"path\": \"$\",\n          \"message\": \"'12' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'12': '...'} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'12': '...'} is not of type 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Ansible Lint (ajv) Validation Errors in JSON\nDESCRIPTION: This snippet shows the detailed error output from Ansible Lint's JSON schema validator (ajv). It highlights issues with playbook structure, missing required properties, and invalid use of the 'no_log' parameter.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/no_log_partial_template.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook (JSON)\nDESCRIPTION: This JSON snippet shows a list of validation errors generated by ajv for an Ansible playbook. It highlights issues such as missing required properties, invalid additional properties, and type mismatches.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/loop2.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/loop\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string,array\",\n    \"params\": {\n      \"type\": [\n        \"string\",\n        \"array\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/loop/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Schema Validation Errors for Ansible Playbook\nDESCRIPTION: JSON output from ajv validator showing multiple schema validation errors in an Ansible playbook. The errors include missing required properties, invalid property types for loops, and additional properties that aren't allowed.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/loop.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/loop\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string,array\",\n    \"params\": {\n      \"type\": [\n        \"string\",\n        \"array\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/loop/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Invalid Ansible Version Requirement - Unsupported Version\nDESCRIPTION: Example of problematic code that specifies an unsupported Ansible version. The requires_ansible key uses >=2.9, which refers to an outdated version that is no longer supported.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# runtime.yml\n---\nrequires_ansible: \">=2.9\"\n```\n\n----------------------------------------\n\nTITLE: Validating Ansible Playbook with ajv JSON Schema Validator\nDESCRIPTION: Output from ajv validator showing multiple schema validation errors for an invalid Ansible playbook. The main issues include missing required properties and an invalid 'serial' parameter value that doesn't match the expected pattern.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/invalid-serial.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"serial\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/serial\",\n    \"keyword\": \"type\",\n    \"message\": \"must be integer\",\n    \"params\": {\n      \"type\": \"integer\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/serial\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\d+\\\\.?\\\\d*%?$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\d+\\\\.?\\\\d*%?$\"\n    },\n    \"schemaPath\": \"#/oneOf/1/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/serial\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/serial\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/serial\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/serial/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/serial\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/properties/serial/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook Schema Violations\nDESCRIPTION: A comprehensive list of JSON schema validation errors from ajv for an Ansible playbook. The errors focus on incorrect property usage and an invalid 'when' condition containing a numeric value (123) instead of the required boolean or string.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/when.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"gather_facts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when/1\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/items/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when/1\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/items/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when/1\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when/1\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/items/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when/1\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/items/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when/1\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors\nDESCRIPTION: This snippet shows the error output from check-jsonschema when validating a YAML file containing a list ['foo', 'bar'] against a schema that expects an object, string, or null. The output includes detailed error information with the filename, error path, and sub-errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/list.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/vars/list.yml\",\n      \"path\": \"$\",\n      \"message\": \"['foo', 'bar'] is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$\",\n        \"message\": \"['foo', 'bar'] is not of type 'object'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$\",\n        \"message\": \"['foo', 'bar'] is not of type 'object'\"\n      },\n      \"num_sub_errors\": 2,\n      \"sub_errors\": [\n        {\n          \"path\": \"$\",\n          \"message\": \"['foo', 'bar'] is not of type 'object'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"['foo', 'bar'] is not of type 'string'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"['foo', 'bar'] is not of type 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Invalid Ansible Playbook\nDESCRIPTION: This JSON output from check-jsonschema shows a more detailed validation result for the same invalid Ansible playbook. It highlights that 'gather_subset' is set to a number (1) when it should be an array, and provides both high-level errors and specific sub-errors with detailed paths.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_subset4.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/gather_subset4.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'gather_subset': 1, 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'gather_subset', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].gather_subset\",\n        \"message\": \"1 is not of type 'array'\"\n      },\n      \"num_sub_errors\": 4,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'gather_subset', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'gather_subset': 1, 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].gather_subset\",\n          \"message\": \"1 is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Invalid Ansible Playbook\nDESCRIPTION: This JSON output shows the validation results from check-jsonschema for an invalid Ansible playbook. It provides detailed error messages, including unexpected properties and schema violations, with sub-errors for more specific issues.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/invalid.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/invalid.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'name': 'foo', 'hosts': 'localhost', 'import_playbook': 'included.yml'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"{'name': 'foo', 'hosts': 'localhost', 'import_playbook': 'included.yml'} should not be valid under {'required': ['import_playbook']}\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"num_sub_errors\": 2,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"Additional properties are not allowed ('import_playbook' was unexpected)\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'name': 'foo', 'hosts': 'localhost', 'import_playbook': 'included.yml'} should not be valid under {'required': ['import_playbook']}\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Example of Using ini_file Without Permission Settings in Ansible\nDESCRIPTION: This example shows a risky usage of the community.general.ini_file module that creates a file without specifying permissions, which could result in unpredictable and potentially insecure file permissions based on system defaults.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/risky-file-permissions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Unsafe example of using ini_file\n  community.general.ini_file:\n    path: foo\n    create: true\n```\n\n----------------------------------------\n\nTITLE: AJV Validation Errors for Ansible Playbook\nDESCRIPTION: JSON output from the ajv validator showing multiple validation errors in an Ansible playbook. Key issues include missing required properties, incorrect property types, and pattern matching failures, particularly with the 'no_log' parameter which should be a boolean but is a string.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/no_log_string.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\\\{[\\\\\\{%](.|[\\r\\n])*[\\\\\\}%]\\\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\\\{[\\\\\\{%](.|[\\r\\n])*[\\\\\\}%]\\\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\\\{[\\\\\\{%](.|[\\r\\n])*[\\\\\\}%]\\\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\\\{[\\\\\\{%](.|[\\r\\n])*[\\\\\\}%]\\\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/no_log\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Check-jsonschema Validation Errors for Ansible Lint\nDESCRIPTION: This JSON snippet shows the validation error output from the check-jsonschema tool. It reports a failure in validating the 'requires_ansible' field in the 'negative_test/meta/runtime.yml' file, indicating that the value '>= 2.12' does not match the expected pattern.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/meta/runtime.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/meta/runtime.yml\",\n      \"path\": \"$.requires_ansible\",\n      \"message\": \"'>= 2.12' does not match '^[^\\\\s]*$'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Copy Module Usage with Relative Path Variable\nDESCRIPTION: Example showing incorrect usage of relative paths through a variable in the ansible.builtin.copy module's src argument. The variable contains a relative path reference outside the standard files directory.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_relative_paths.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Example playbook\n  hosts: all\n  vars:\n    source_path: ../../my_templates/foo.j2 # <- Sets a variable to a relative path.\n  tasks:\n    - name: Copy a file to /etc/file.conf\n      ansible.builtin.copy:\n        src: \"{{ source_path }}\" # <- Uses the variable in the src argument.\n        dest: /etc/foo.conf\n        owner: foo\n        group: foo\n        mode: \"0644\"\n```\n\n----------------------------------------\n\nTITLE: Check-jsonschema Error Output Format for Invalid Ansible YAML\nDESCRIPTION: Example of error output from check-jsonschema validator when validating a YAML file with an invalid property name '*foo'. The output includes detailed error information with primary errors, best matches, and sub-errors showing regex pattern validation failures for Ansible variable naming conventions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/asterisk.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/vars/asterisk.yml\",\n      \"path\": \"$\",\n      \"message\": \"{'*foo': '...'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$\",\n        \"message\": \"{'*foo': '...'} is not of type 'string'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$\",\n        \"message\": \"'*foo' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n      },\n      \"num_sub_errors\": 2,\n      \"sub_errors\": [\n        {\n          \"path\": \"$\",\n          \"message\": \"'*foo' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'*foo': '...'} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'*foo': '...'} is not of type 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Output for Ansible Playbook in JSON\nDESCRIPTION: This JSON snippet shows the output of check-jsonschema for an Ansible playbook. It indicates a validation failure, specifically for the 'become_method' property, which does not meet the required schema definitions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/become_method_untemplated.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/become_method_untemplated.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'command': 'echo 123', 'vars': {'sudo_var': 'doo'}, 'become_method': 'sudo_var'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"'sudo_var' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"'sudo_var' is not one of ['sudo', 'su', 'pbrun', 'pfexec', 'runas', 'dzdo', 'ksu', 'doas', 'machinectl', 'pmrun', 'sesu', 'sudosu']\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"'sudo_var' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"'sudo_var' does not match '^[A-Z][a-z][0-9]._$'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"'sudo_var' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"'sudo_var' is not one of ['sudo', 'su', 'pbrun', 'pfexec', 'runas', 'dzdo', 'ksu', 'doas', 'machinectl', 'pmrun', 'sesu', 'sudosu']\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"'sudo_var' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"'sudo_var' does not match '^[A-Z][a-z][0-9]._$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv JSON Schema Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON array contains detailed validation errors from ajv for an Ansible playbook. It highlights issues with missing required properties, incorrect types for 'ignore_unreachable', and overall playbook structure problems.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/ignore-unreachable.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_unreachable\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_unreachable\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_unreachable\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_unreachable\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_unreachable\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_unreachable\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1/ignore_unreachable\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1/ignore_unreachable\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1/ignore_unreachable\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1/ignore_unreachable\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1/ignore_unreachable\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1/ignore_unreachable\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1/ignore_unreachable\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1/ignore_unreachable\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/1\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Ansible Playbook in JSON\nDESCRIPTION: This JSON output from ajv shows multiple validation errors for an Ansible playbook. The errors primarily relate to missing required properties, invalid additional properties, and type mismatches for the 'run_once' parameter.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/run_once_list.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/run_once\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/run_once\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/run_once\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/run_once\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/run_once\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/run_once\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/run_once\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/run_once\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Playbook Not Using no_log for Password Protection\nDESCRIPTION: This example shows a problematic Ansible playbook that explicitly sets no_log: false when working with passwords in a loop, which could result in password exposure in logs. The task creates a user with a password provided through a loop item.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-log-password.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Log user passwords\n      ansible.builtin.user:\n        name: john_doe\n        comment: John Doe\n        uid: 1040\n        group: admin\n        password: \"{{ item }}\"\n      with_items:\n        - wow\n      no_log: false # <- Sets the no_log attribute to false.\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook in JSON\nDESCRIPTION: This snippet shows the validation errors produced by ajv for an Ansible playbook. The errors indicate issues with the 'tags' property type and a missing required 'block' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/tags-mapping.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/tags/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/tags/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Error Output for Invalid Variable Name\nDESCRIPTION: This JSON output from ajv shows validation errors when a numeric variable name ('12') is used in an Ansible YAML file. The errors indicate the value must not have additional properties, must be a string, must be null, and must match a schema in anyOf.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/numeric-var-name.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"12\"\n    },\n    \"schemaPath\": \"#/anyOf/0/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be null\",\n    \"params\": {\n      \"type\": \"null\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Ansible Playbook Schema\nDESCRIPTION: A JSON array containing detailed validation errors from AJV for an Ansible playbook. The errors indicate missing required properties, invalid structure, and incorrect data types in vars_files.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/var_files_list_of_list_number.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/patternProperties/vars/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files/0\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/properties/vars_files/items/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files/0/0\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/properties/vars_files/items/oneOf/1/items/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files/0/1\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/properties/vars_files/items/oneOf/1/items/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/properties/vars_files/items/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook in JSON\nDESCRIPTION: This snippet shows the output of ajv validation for an Ansible playbook. It lists multiple errors related to missing required properties, invalid property types, and schema mismatches.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/failed_when.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/failed_when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/failed_when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Check-JSONSchema Validation Results for Ansible Playbook in JSON\nDESCRIPTION: This snippet shows the output from check-jsonschema tool, providing a summary of validation failures for an Ansible playbook. It includes overall status, detailed error messages, and sub-errors for nested issues within the playbook structure.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/ignore_errors.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/ignore_errors.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tasks': [{'command': 'echo 123', 'vars': {'should_ignore_errors': True}, 'ignore_errors': 'should_ignore_errors'}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].ignore_errors\",\n        \"message\": \"'should_ignore_errors' is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 11,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tasks': [{'command': 'echo 123', 'vars': {'should_ignore_errors': True}, 'ignore_errors': 'should_ignore_errors'}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'command': 'echo 123', 'vars': {'should_ignore_errors': True}, 'ignore_errors': 'should_ignore_errors'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Error Handling in Ansible Playbook\nDESCRIPTION: Example of incorrect error handling using ignore_errors: true, which masks all errors including critical failures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/ignore_errors.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.command: apt-get update\n      ignore_errors: true # <- Ignores all errors, including important failures.\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors for Ansible Playbook in JSON\nDESCRIPTION: This snippet shows the validation errors produced by check-jsonschema for an Ansible playbook. It provides detailed information about the validation failure, including the specific file, path, and error messages.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/tags-mapping.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/tags-mapping.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'ansible.builtin.debug': {'msg': 'foo'}, 'tags': {}} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tags\",\n        \"message\": \"{} is not of type 'string'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not of type 'array'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"{} is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Error Output from ajv Validator for Invalid Ansible Collection Name\nDESCRIPTION: Shows the JSON error output from ajv when validating an Ansible collection name that doesn't match the required pattern. The error indicates the collection name must follow the pattern ^[a-z_]+\\.[a-z_]+$ (lowercase letters and underscores only).\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta_invalid_collections/meta/main.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/collections/0\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^[a-z_]+\\\\.[a-z_]+$\\\"\",\n    \"params\": {\n      \"pattern\": \"^[a-z_]+\\\\.[a-z_]+$\"\n    },\n    \"schemaPath\": \"#/$defs/collections/items/pattern\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Error Handling in Ansible Playbook using ignore_errors\nDESCRIPTION: An example of improper error handling where all errors are ignored using the ignore_errors: true directive, which can hide important failures and lead to unexpected behavior.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/ignore-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.command: apt-get update\n      ignore_errors: true # <- Ignores all errors, including important failures.\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Playbook with Interactive Prompts\nDESCRIPTION: Example of problematic code that violates the no-prompting rule by using vars_prompt for credentials and ansible.builtin.pause for execution delays.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_prompting.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  vars_prompt: # <- Prompts the user to input credentials.\n    - name: username\n      prompt: What is your username?\n      private: false\n\n    - name: password\n      prompt: What is your password?\n  tasks:\n    - name: Pause for 5 minutes\n      ansible.builtin.pause:\n        minutes: 5 # <- Pauses playbook execution for a set period of time.\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Output for Ansible Playbook\nDESCRIPTION: JSON output from check-jsonschema showing validation errors for an Ansible playbook. It provides a more structured format with categorized errors, including best matches and sub-errors for deeper diagnosis.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/var_files_list_of_list_number.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/var_files_list_of_list_number.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'name': 'var_files should not accept array[number]', 'hosts': 'localhost', 'vars_files': [[0, 1]]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].vars_files[0][0]\",\n        \"message\": \"0 is not of type 'string'\"\n      },\n      \"num_sub_errors\": 8,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'name': 'var_files should not accept array[number]', 'hosts': 'localhost', 'vars_files': [[0, 1]]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].vars_files\",\n          \"message\": \"[[0, 1]] is not of type 'object'\"\n        },\n        {\n          \"path\": \"$[0].vars_files[0]\",\n          \"message\": \"[0, 1] is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].vars_files[0]\",\n          \"message\": \"[0, 1] is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].vars_files[0][0]\",\n          \"message\": \"0 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].vars_files[0][1]\",\n          \"message\": \"1 is not of type 'string'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv JSON Schema Validation Errors for Ansible Playbook Task\nDESCRIPTION: This JSON output shows the validation errors reported by ajv for an Ansible playbook task. It highlights issues with a missing 'block' property and an incorrect type for 'local_action'.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/local_action.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/local_action\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string,object\",\n    \"params\": {\n      \"type\": [\n        \"string\",\n        \"object\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/local_action/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Invalid Ansible Playbook\nDESCRIPTION: This JSON shows validation errors from ajv for an Ansible playbook with incorrect structure. Multiple errors are reported, including missing required properties and type errors for the 'gather_subset' field which should be an array.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_subset4.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"gather_subset\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/gather_subset/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Empty String Comparisons in Ansible Playbook\nDESCRIPTION: This example demonstrates incorrect usage of empty string comparisons in an Ansible playbook. It shows two tasks that use problematic comparisons with empty strings in their conditional statements.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/empty-string-compare.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Shut down\n      ansible.builtin.command: /sbin/shutdown -t now\n      when: ansible_os_family == \"\" # <- Compares with an empty string.\n    - name: Shut down\n      ansible.builtin.command: /sbin/shutdown -t now\n      when: ansible_os_family !=\"\" # <- Compares with an empty string.\n```\n\n----------------------------------------\n\nTITLE: Reporting check-jsonschema Validation Results as JSON - JSON\nDESCRIPTION: This example demonstrates how the check-jsonschema tool outputs detailed validation errors as a single JSON object. The output contains a status indicator, an array of errors (with nested fields for the matching process and sub-errors), and lists of successes and parsing errors. This requires check-jsonschema and an appropriate schema. The main input is a file to check; output is an object summarizing its validation state with error structure. Limitations: verbosity increases with deeply nested errors and many sub-errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/ignore_errors.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/ignore_errors.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'command': 'echo 123', 'vars': {'should_ignore_errors': True}, 'ignore_errors': 'should_ignore_errors'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].ignore_errors\",\n        \"message\": \"'should_ignore_errors' is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' does not match '^\\\\\\\\{[\\\\\\\\{%](.|[\\\\\\\\r\\\\\\\\n])*[\\\\\\\\}%]\\\\\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].ignore_errors\",\n          \"message\": \"'should_ignore_errors' does not match '^\\\\\\\\{[\\\\\\\\{%](.|[\\\\\\\\r\\\\\\\\n])*[\\\\\\\\}%]\\\\\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Check-jsonschema Validation Results for Ansible Playbook\nDESCRIPTION: This JSON object contains validation results from check-jsonschema for an Ansible playbook. It provides a detailed breakdown of errors, including issues with the 'vars_files' property and overall playbook structure.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/var_files_list_number.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/var_files_list_number.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'name': 'var_files should not accept array[number]', 'hosts': 'localhost', 'vars_files': [0]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].vars_files[0]\",\n        \"message\": \"0 is not of type 'string'\"\n      },\n      \"num_sub_errors\": 7,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'name': 'var_files should not accept array[number]', 'hosts': 'localhost', 'vars_files': [0]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].vars_files\",\n          \"message\": \"[0] is not of type 'object'\"\n        },\n        {\n          \"path\": \"$[0].vars_files[0]\",\n          \"message\": \"0 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].vars_files[0]\",\n          \"message\": \"0 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].vars_files[0]\",\n          \"message\": \"0 is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Summarizing File Validation Results using check-jsonschema - JSON\nDESCRIPTION: This JSON code block shows the structure of an error summary produced by the check-jsonschema CLI tool after validating a YAML file. It provides overall status, a list of error objects containing file details, error locations, user-friendly messages, and any nested sub-errors for deeper insight. This structure helps users quickly pinpoint schema violations and their context, necessary for troubleshooting with check-jsonschema. The snippet assumes that the output is generated after running check-jsonschema on playbooks and requires no other dependencies.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/when_object.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/when_object.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'action': 'foo', 'when': {}} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].when\",\n        \"message\": \"{} is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 8,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"{} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"{} is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"{} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"{} is not of type 'array'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"{} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"{} is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"{} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"{} is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Invalid Ansible Playbook Structure\nDESCRIPTION: This JSON output shows the validation errors from AJV validator when checking an Ansible playbook that has invalid structure. The errors indicate that the playbook is missing required import_playbook properties and has invalid additional properties like 'hosts' and 'roles', with 'roles' being a string instead of the required array type.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/roles.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"roles\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/roles\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/roles/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: ajv Error Output for Ansible Playbook Schema Validation\nDESCRIPTION: This snippet shows the JSON error output from ajv when validating an Ansible playbook that uses deprecated 'include' syntax instead of the proper import_playbook directive. The errors indicate missing required properties and additional properties that are not allowed.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/include.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/include\",\n    \"keyword\": \"not\",\n    \"message\": \"must NOT be valid\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/removed-include-module/not\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Usage of Bare Variables in Ansible YAML\nDESCRIPTION: This snippet shows an example of deprecated bare variable usage in Ansible, which can lead to confusion about whether 'foo' is intended to be a variable or a string.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/deprecated-bare-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- ansible.builtin.debug:\n    msg: \"{{ item }}\"\n  with_items: foo # <-- deprecated-bare-vars\n```\n\n----------------------------------------\n\nTITLE: Check-jsonschema Validation Output for Ansible Playbook\nDESCRIPTION: Structured validation output from check-jsonschema tool showing the failure details for an Ansible playbook. The output includes the specific file being validated, overall validation status, and detailed error information including the best matches for root causes of validation failures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/no_log_string.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/no_log_string.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'vars': {'some_var': True}, 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}, 'no_log': 'some_var'}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].no_log\",\n        \"message\": \"'some_var' is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 11,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'vars': {'some_var': True}, 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}, 'no_log': 'some_var'}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'ansible.builtin.debug': {'msg': 'foo'}, 'no_log': 'some_var'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'some_var' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'some_var' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'some_var' does not match '^\\\\\\{[\\\\\\{%](.|[\\r\\n])*[\\\\\\}%]\\\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'some_var' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'some_var' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'some_var' does not match '^\\\\\\{[\\\\\\{%](.|[\\r\\n])*[\\\\\\}%]\\\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ansible Lint Analysis Output in JSON\nDESCRIPTION: The snippet captures the output of an ansible-lint execution in JSON format, focusing specifically on errors encountered during schema validation of Ansible playbooks. Dependencies include having 'ansible' and 'ansible-lint' installed. Key fields include 'status', 'errors', and 'parse_errors', which provide details on the issues identified with Ansible playbooks. The output details errors for incorrect properties and missing required modules. The snippet is limited to JSON output format as produced by ansible-lint.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_subset2.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/gather_subset2.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'gather_subset': ['invalid'], 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'gather_subset', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].gather_subset[0]\",\n        \"message\": \"'invalid' is not one of ['all', 'min', 'all_ipv4_addresses', 'all_ipv6_addresses', 'apparmor', 'architecture', 'caps', 'chroot,cmdline', 'date_time', 'default_ipv4', 'default_ipv6', 'devices', 'distribution', 'distribution_major_version', 'distribution_release', 'distribution_version', 'dns', 'effective_group_ids', 'effective_user_id', 'env', 'facter', 'fips', 'hardware', 'interfaces', 'is_chroot', 'iscsi', 'kernel', 'local', 'lsb', 'machine', 'machine_id', 'mounts', 'network', 'ohai', 'os_family', 'pkg_mgr', 'platform', 'processor', 'processor_cores', 'processor_count', 'python', 'python_version', 'real_user_id', 'selinux', 'service_mgr', 'ssh_host_key_dsa_public', 'ssh_host_key_ecdsa_public', 'ssh_host_key_ed25519_public', 'ssh_host_key_rsa_public', 'ssh_host_pub_keys', 'ssh_pub_keys', 'system', 'system_capabilities', 'system_capabilities_enforced', 'user', 'user_dir', 'user_gecos', 'user_gid', 'user_id', 'user_shell', 'user_uid', 'virtual', 'virtualization_role', 'virtualization_type']\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'gather_subset', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'gather_subset': ['invalid'], 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].gather_subset[0]\",\n          \"message\": \"'invalid' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].gather_subset[0]\",\n          \"message\": \"'invalid' is not one of ['all', 'min', 'all_ipv4_addresses', 'all_ipv6_addresses', 'apparmor', 'architecture', 'caps', 'chroot,cmdline', 'date_time', 'default_ipv4', 'default_ipv6', 'devices', 'distribution', 'distribution_major_version', 'distribution_release', 'distribution_version', 'dns', 'effective_group_ids', 'effective_user_id', 'env', 'facter', 'fips', 'hardware', 'interfaces', 'is_chroot', 'iscsi', 'kernel', 'local', 'lsb', 'machine', 'machine_id', 'mounts', 'network', 'ohai', 'os_family', 'pkg_mgr', 'platform', 'processor', 'processor_cores', 'processor_count', 'python', 'python_version', 'real_user_id', 'selinux', 'service_mgr', 'ssh_host_key_dsa_public', 'ssh_host_key_ecdsa_public', 'ssh_host_key_ed25519_public', 'ssh_host_key_rsa_public', 'ssh_host_pub_keys', 'ssh_pub_keys', 'system', 'system_capabilities', 'system_capabilities_enforced', 'user', 'user_dir', 'user_gecos', 'user_gid', 'user_id', 'user_shell', 'user_uid', 'virtual', 'virtualization_role', 'virtualization_type']\"\n        },\n        {\n          \"path\": \"$[0].gather_subset[0]\",\n          \"message\": \"'invalid' is not one of ['!all', '!min', '!all_ipv4_addresses', '!all_ipv6_addresses', '!apparmor', '!architecture', '!caps', '!chroot,cmdline', '!date_time', '!default_ipv4', '!default_ipv6', '!devices', '!distribution', '!distribution_major_version', '!distribution_release', '!distribution_version', '!dns', '!effective_group_ids', '!effective_user_id', '!env', '!facter', '!fips', '!hardware', '!interfaces', '!is_chroot', '!iscsi', '!kernel', '!local', '!lsb', '!machine', '!machine_id', '!mounts', '!network', '!ohai', '!os_family', '!pkg_mgr', '!platform', '!processor', '!processor_cores', '!processor_count', '!python', '!python_version', '!real_user_id', '!selinux', '!service_mgr', '!ssh_host_key_dsa_public', '!ssh_host_key_ecdsa_public', '!ssh_host_key_ed25519_public', '!ssh_host_key_rsa_public', '!ssh_host_pub_keys', '!ssh_pub_keys', '!system', '!system_capabilities', '!system_capabilities_enforced', '!user', '!user_dir', '!user_gecos', '!user_gid', '!user_id', '!user_shell', '!user_uid', '!virtual', '!virtualization_role', '!virtualization_type']\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Usage of Command Module in Ansible Playbook\nDESCRIPTION: This snippet demonstrates an incorrect way of updating the apt cache using the command module. The rule suggests using a specific module instead for better reliability and features.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/command_instead_of_module.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Update apt cache\n  hosts: all\n  tasks:\n    - name: Run apt-get update\n      ansible.builtin.command: apt-get update # <-- better to use ansible.builtin.apt module\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON snippet shows the validation errors reported by AJV (Another JSON Schema Validator) for an Ansible playbook. It highlights issues with the 'ansible.builtin.import_playbook' directive, including type mismatch and missing required properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/import_playbook.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0/ansible.builtin.import_playbook\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/patternProperties/%5E(ansible%5C.builtin%5C.)%3Fimport_playbook%24/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"not\",\n    \"message\": \"must NOT be valid\",\n    \"params\": {},\n    \"schemaPath\": \"#/allOf/0/not\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'hosts'\",\n    \"params\": {\n      \"missingProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Invalid Ansible Playbook\nDESCRIPTION: JSON output from check-jsonschema tool showing validation errors for an Ansible playbook with improper failed_when condition types. The report provides a hierarchical view of errors with both high-level summaries and detailed sub-errors for each validation issue found in the playbook.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/invalid-failed-when.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/invalid-failed-when.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tasks': [{'debug': {'msg': 'failed_when should not accept numeric'}, 'failed_when': 123}, {'debug': {'msg': 'failed_when should not accept sequence'}, 'failed_when': ['foo', 'bar']}, {'debug': {'msg': 'failed_when should not accept map'}, 'failed_when': {}}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].failed_when\",\n        \"message\": \"123 is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 15,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tasks': [{'debug': {'msg': 'failed_when should not accept numeric'}, 'failed_when': 123}, {'debug': {'msg': 'failed_when should not accept sequence'}, 'failed_when': ['foo', 'bar']}, {'debug': {'msg': 'failed_when should not accept map'}, 'failed_when': {}}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'debug': {'msg': 'failed_when should not accept numeric'}, 'failed_when': 123} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].failed_when\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].failed_when\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].failed_when\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].failed_when\",\n          \"message\": \"123 is not of type 'array'\"\n        },\n        {\n          \"path\": \"$[0].tasks[2]\",\n          \"message\": \"{'debug': {'msg': 'failed_when should not accept map'}, 'failed_when': {}} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[2]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[2].failed_when\",\n          \"message\": \"{} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[2].failed_when\",\n          \"message\": \"{} is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[2].failed_when\",\n          \"message\": \"{} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tasks[2].failed_when\",\n          \"message\": \"{} is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting ajv Schema Validation Errors in JSON\nDESCRIPTION: This snippet provides an array of error objects output by the ajv JSON Schema validator when checking Ansible tasks. Each object details specific validation failures such as required properties ('block'), type issues for the 'no_log' field, and failures to match alternative schema possibilities. To use this output, ajv must process a target document and return its errors as an array. The main parameters are instancePath (the location in the target JSON), the schemaPath (the relevant place in the schema), and messages describing the validation problem. This output enables precise reporting and debugging of schema compliance issues and is suited for programmatic introspection.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/no_log_number.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/no_log\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Role Names in Ansible YAML\nDESCRIPTION: This snippet shows examples of role names that violate the naming conventions. It includes roles that don't start with an alphabetic character, contain invalid special characters, or use uppercase letters.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/role-name.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  roles:\n    - 1myrole # <- Does not start with an alphabetic character.\n    - myrole2[*^ # <- Contains invalid special characters.\n    - myRole_3 # <- Contains uppercase alphabetic characters.\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Output for Invalid Ansible Playbook\nDESCRIPTION: This JSON output shows the validation report from the check-jsonschema tool when validating an Ansible playbook. The report includes detailed error information indicating that the roles property is incorrectly defined as a string ('xxx') instead of the required array type, along with other schema validation failures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/roles.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/roles.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'roles': 'xxx'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'roles' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].roles\",\n        \"message\": \"'xxx' is not of type 'array'\"\n      },\n      \"num_sub_errors\": 4,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'roles' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'roles': 'xxx'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].roles\",\n          \"message\": \"'xxx' is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Ansible Playbook Schema Validation Errors in JSON\nDESCRIPTION: This JSON array contains detailed error messages from ajv, highlighting schema violations in an Ansible playbook. The errors include missing required properties like 'ansible.builtin.import_playbook', invalid additional properties, and type mismatches for the 'gather_subset' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_subset3.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"gather_subset\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset/0\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/properties/gather_subset/items/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset/0\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"all\",\n        \"min\",\n        \"all_ipv4_addresses\",\n        \"all_ipv6_addresses\",\n        \"apparmor\",\n        \"architecture\",\n        \"caps\",\n        \"chroot,cmdline\",\n        \"date_time\",\n        \"default_ipv4\",\n        \"default_ipv6\",\n        \"devices\",\n        \"distribution\",\n        \"distribution_major_version\",\n        \"distribution_release\",\n        \"distribution_version\",\n        \"dns\",\n        \"effective_group_ids\",\n        \"effective_user_id\",\n        \"env\",\n        \"facter\",\n        \"fips\",\n        \"hardware\",\n        \"interfaces\",\n        \"is_chroot\",\n        \"iscsi\",\n        \"kernel\",\n        \"local\",\n        \"lsb\",\n        \"machine\",\n        \"machine_id\",\n        \"mounts\",\n        \"network\",\n        \"ohai\",\n        \"os_family\",\n        \"pkg_mgr\",\n        \"platform\",\n        \"processor\",\n        \"processor_cores\",\n        \"processor_count\",\n        \"python\",\n        \"python_version\",\n        \"real_user_id\",\n        \"selinux\",\n        \"service_mgr\",\n        \"ssh_host_key_dsa_public\",\n        \"ssh_host_key_ecdsa_public\",\n        \"ssh_host_key_ed25519_public\",\n        \"ssh_host_key_rsa_public\",\n        \"ssh_host_pub_keys\",\n        \"ssh_pub_keys\",\n        \"system\",\n        \"system_capabilities\",\n        \"system_capabilities_enforced\",\n        \"user\",\n        \"user_dir\",\n        \"user_gecos\",\n        \"user_gid\",\n        \"user_id\",\n        \"user_shell\",\n        \"user_uid\",\n        \"virtual\",\n        \"virtualization_role\",\n        \"virtualization_type\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/gather_subset/items/anyOf/0/enum\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset/0\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/properties/gather_subset/items/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset/0\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"!all\",\n        \"!min\",\n        \"!all_ipv4_addresses\",\n        \"!all_ipv6_addresses\",\n        \"!apparmor\",\n        \"!architecture\",\n        \"!caps\",\n        \"!chroot,cmdline\",\n        \"!date_time\",\n        \"!default_ipv4\",\n        \"!default_ipv6\",\n        \"!devices\",\n        \"!distribution\",\n        \"!distribution_major_version\",\n        \"!distribution_release\",\n        \"!distribution_version\",\n        \"!dns\",\n        \"!effective_group_ids\",\n        \"!effective_user_id\",\n        \"!env\",\n        \"!facter\",\n        \"!fips\",\n        \"!hardware\",\n        \"!interfaces\",\n        \"!is_chroot\",\n        \"!iscsi\",\n        \"!kernel\",\n        \"!local\",\n        \"!lsb\",\n        \"!machine\",\n        \"!machine_id\",\n        \"!mounts\",\n        \"!network\",\n        \"!ohai\",\n        \"!os_family\",\n        \"!pkg_mgr\",\n        \"!platform\",\n        \"!processor\",\n        \"!processor_cores\",\n        \"!processor_count\",\n        \"!python\",\n        \"!python_version\",\n        \"!real_user_id\",\n        \"!selinux\",\n        \"!service_mgr\",\n        \"!ssh_host_key_dsa_public\",\n        \"!ssh_host_key_ecdsa_public\",\n        \"!ssh_host_key_ed25519_public\",\n        \"!ssh_host_key_rsa_public\",\n        \"!ssh_host_pub_keys\",\n        \"!ssh_pub_keys\",\n        \"!system\",\n        \"!system_capabilities\",\n        \"!system_capabilities_enforced\",\n        \"!user\",\n        \"!user_dir\",\n        \"!user_gecos\",\n        \"!user_gid\",\n        \"!user_id\",\n        \"!user_shell\",\n        \"!user_uid\",\n        \"!virtual\",\n        \"!virtualization_role\",\n        \"!virtualization_type\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/gather_subset/items/anyOf/1/enum\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/properties/gather_subset/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON snippet shows the validation errors reported by the 'check-jsonschema' tool for an Ansible playbook. It provides detailed information about schema violations, including issues with the 'ansible.builtin.import_playbook' directive and missing required properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/import_playbook.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/import_playbook.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'ansible.builtin.import_playbook': {}} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"{'ansible.builtin.import_playbook': {}} should not be valid under {'required': ['ansible.builtin.import_playbook']}\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].ansible.builtin.import_playbook\",\n        \"message\": \"{} is not of type 'string'\"\n      },\n      \"num_sub_errors\": 3,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].ansible.builtin.import_playbook\",\n          \"message\": \"{} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"Additional properties are not allowed ('ansible.builtin.import_playbook' was unexpected)\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'ansible.builtin.import_playbook': {}} should not be valid under {'required': ['ansible.builtin.import_playbook']}\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' is a required property\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: AJV Validation Errors for Ansible Playbook with Invalid Import Directives\nDESCRIPTION: Error output from ajv validator showing various schema violations in an Ansible playbook. The key issues include using both 'ansible.builtin.import_playbook' and 'import_playbook' simultaneously, missing required 'hosts' property, and failing oneOf/allOf validation conditions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/import_playbook_exclusive.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"not\",\n    \"message\": \"must NOT be valid\",\n    \"params\": {},\n    \"schemaPath\": \"#/oneOf/0/not\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"not\",\n    \"message\": \"must NOT be valid\",\n    \"params\": {},\n    \"schemaPath\": \"#/oneOf/1/not\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"not\",\n    \"message\": \"must NOT be valid\",\n    \"params\": {},\n    \"schemaPath\": \"#/allOf/0/not\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"not\",\n    \"message\": \"must NOT be valid\",\n    \"params\": {},\n    \"schemaPath\": \"#/allOf/1/not\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'hosts'\",\n    \"params\": {\n      \"missingProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: AJV JSON Validation Error Output\nDESCRIPTION: This JSON snippet describes error details produced by the AJV JSON schema validator. These errors provide insights into schema violations such as type mismatches and schema rule failures. The snippet details the error types, instance paths, specific validation keywords, and error messages relevant to incorrect data schemas.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/invalid_block.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \\\"instancePath\\\": \\\"/0/block\\\",\\n    \\\"keyword\\\": \\\"type\\\",\\n    \\\"message\\\": \\\"must be array\\\",\\n    \\\"params\\\": {\\n      \\\"type\\\": \\\"array\\\"\\n    },\\n    \\\"schemaPath\\\": \\\"#/properties/block/type\\\"\\n  },\\n  {\\n    \\\"instancePath\\\": \\\"/0\\\",\\n    \\\"keyword\\\": \\\"not\\\",\\n    \\\"message\\\": \\\"must NOT be valid\\\",\\n    \\\"params\\\": {},\\n    \\\"schemaPath\\\": \\\"#/allOf/3/not\\\"\\n  },\\n  {\\n    \\\"instancePath\\\": \\\"/0\\\",\\n    \\\"keyword\\\": \\\"anyOf\\\",\\n    \\\"message\\\": \\\"must match a schema in anyOf\\\",\\n    \\\"params\\\": {},\\n    \\\"schemaPath\\\": \\\"#/items/anyOf\\\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Role Metadata with Default Values in Ansible\nDESCRIPTION: An example of improper role metadata configuration in meta/main.yml that contains default placeholder values instead of actual information. The fields author, description, company, and license all contain default values that should be replaced with real data.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-incorrect.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# Metadata fields for the role contain default values.\ngalaxy_info:\n  author: your name\n  description: your role description\n  company: your company (optional)\n  license: license (GPL-2.0-or-later, MIT, etc)\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors\nDESCRIPTION: This snippet demonstrates the error output from check-jsonschema tool. It shows a validation failure due to an unexpected property 'foo' in the 'all' object of the validated document.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/inventory/broken_dev_inventory.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/inventory/broken_dev_inventory.yml\",\n      \"path\": \"$.all\",\n      \"message\": \"Additional properties are not allowed ('foo' was unexpected)\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting ajv Validation Errors as JSON - JSON\nDESCRIPTION: This snippet illustrates how the ajv JSON schema validator reports errors when validating input data against a schema. Each error object includes the data path, violated schema keyword, error message, relevant parameters, and the schema path. Dependencies include ajv and a defined JSON schema. Inputs are invalid data and an associated schema, outputs are arrays of error objects. Limitations: only as accurate as the schema definition and assumes use within Node.js or JavaScript environments.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/ignore_errors.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/ignore_errors\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/ignore_errors\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\\\r\\\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\\\r\\\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/ignore_errors\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/ignore_errors\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/ignore_errors\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\\\r\\\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\\\r\\\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/ignore_errors\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Privilege Escalation at Play Level\nDESCRIPTION: Example showing incorrect implementation where become_user is used without corresponding become directive at task level, making the user change ineffective.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/partial_become.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  become: true # <- Activates privilege escalation.\n  tasks:\n    - name: Start the httpd service as the apache user\n      ansible.builtin.service:\n        name: httpd\n        state: started\n      become_user: apache # <- Does not change the user because \"become: true\" is not set.\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook\nDESCRIPTION: This JSON snippet shows the output of check-jsonschema tool when validating an Ansible playbook. It provides a summary of validation failures, including detailed error messages and sub-errors for specific schema violations.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_subset.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/gather_subset.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'gather_subset': 'all', 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'gather_subset', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].gather_subset\",\n        \"message\": \"'all' is not of type 'array'\"\n      },\n      \"num_sub_errors\": 4,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'gather_subset', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'gather_subset': 'all', 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].gather_subset\",\n          \"message\": \"'all' is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Check-jsonschema Validation Results for Ansible Playbook in JSON\nDESCRIPTION: This JSON output from check-jsonschema provides a summary of validation errors for an Ansible playbook. It highlights issues with the 'run_once' parameter being an invalid type (list instead of boolean or string) and other structural problems in the playbook.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/run_once_list.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/run_once_list.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tasks': [{'name': 'foo2', 'ansible.builtin.debug': {'msg': 'foo!'}, 'run_once': ['{{ true }}', 'xxx']}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].run_once\",\n        \"message\": \"['{{ true }}', 'xxx'] is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 11,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tasks': [{'name': 'foo2', 'ansible.builtin.debug': {'msg': 'foo!'}, 'run_once': ['{{ true }}', 'xxx']}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'name': 'foo2', 'ansible.builtin.debug': {'msg': 'foo!'}, 'run_once': ['{{ true }}', 'xxx']} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].run_once\",\n          \"message\": \"['{{ true }}', 'xxx'] is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].run_once\",\n          \"message\": \"['{{ true }}', 'xxx'] is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].run_once\",\n          \"message\": \"['{{ true }}', 'xxx'] is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].run_once\",\n          \"message\": \"['{{ true }}', 'xxx'] is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].run_once\",\n          \"message\": \"['{{ true }}', 'xxx'] is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].run_once\",\n          \"message\": \"['{{ true }}', 'xxx'] is not of type 'string'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON snippet shows the validation errors reported by AJV (Another JSON Schema Validator) for an Ansible playbook. It highlights multiple issues, primarily with the 'become_method' property, which fails type and enum validations.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/become_method_invalid.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"ansible.builtin.sudo\",\n        \"ansible.builtin.su\",\n        \"community.general.pbrun\",\n        \"community.general.pfexec\",\n        \"ansible.builtin.runas\",\n        \"community.general.dzdo\",\n        \"community.general.ksu\",\n        \"community.general.doas\",\n        \"community.general.machinectl\",\n        \"community.general.pmrun\",\n        \"community.general.sesu\",\n        \"community.general.sudosu\"\n      ]\n    },\n    \"schemaPath\": \"#/anyOf/0/enum\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"ansible.builtin.sudo\",\n        \"ansible.builtin.su\",\n        \"community.general.pbrun\",\n        \"community.general.pfexec\",\n        \"ansible.builtin.runas\",\n        \"community.general.dzdo\",\n        \"community.general.ksu\",\n        \"community.general.doas\",\n        \"community.general.machinectl\",\n        \"community.general.pmrun\",\n        \"community.general.sesu\",\n        \"community.general.sudosu\"\n      ]\n    },\n    \"schemaPath\": \"#/anyOf/0/enum\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic Implementation of Task Result Handling in Ansible\nDESCRIPTION: This snippet demonstrates incorrect usage of task result handling, which triggers the no-handler rule. It uses a when condition based on a registered result instead of using handlers.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_handler.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example of no-handler rule\n  hosts: localhost\n  tasks:\n    - name: Register result of a task\n      ansible.builtin.copy:\n        dest: \"/tmp/placeholder\"\n        content: \"Ansible made this!\"\n        mode: 0600\n      register: result # <-- Registers the result of the task.\n    - name: Second command to run\n      ansible.builtin.debug:\n        msg: The placeholder file was modified!\n      when: result.changed # <-- Triggers the no-handler rule.\n```\n\n----------------------------------------\n\nTITLE: Displaying Developer Certificate of Origin 1.1 Text in Markdown\nDESCRIPTION: This code block contains the full text of the Developer Certificate of Origin (DCO) version 1.1. It outlines the terms that contributors agree to when signing off on their commits.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/DCO_1_1.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors in JSON\nDESCRIPTION: This snippet shows the JSON output of ajv validation errors. It indicates that the 'releases' property should be an object but is not.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/no-semver/changelogs/changelog.yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/releases\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/properties/releases/type\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Presenting Check-jsonschema Validation Results for Ansible Lint Changelog\nDESCRIPTION: This JSON output from 'check-jsonschema' provides a more detailed validation report. It shows a failure status and specifies that the 'namespace' field for a lookup plugin in version 1.0.0 is 'foo' instead of the required null value.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/invalid-plugin-namespace/changelogs/changelog.yaml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/changelogs/invalid-plugin-namespace/changelogs/changelog.yaml\",\n      \"path\": \"$.releases.1.0.0.plugins.lookup[0].namespace\",\n      \"message\": \"'foo' is not of type 'null'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Empty String Comparison Rule in Ansible-lint Configuration\nDESCRIPTION: This snippet shows how to enable the empty-string-compare rule in the Ansible-lint configuration file. The rule must be explicitly enabled as it is an opt-in feature.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/empty-string-compare.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - empty-string-compare\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Output for Ansible Playbook Validation\nDESCRIPTION: This JSON snippet shows the output of check-jsonschema for an Ansible playbook. It highlights validation failures, including issues with the 'environment' property and missing required properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/environment.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/environment.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'environment': '{{ foo }}-123'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'environment', 'hosts' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].environment\",\n        \"message\": \"'{{ foo }}-123' is not of type 'object'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'environment', 'hosts' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'environment': '{{ foo }}-123'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].environment\",\n          \"message\": \"'{{ foo }}-123' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].environment\",\n          \"message\": \"'{{ foo }}-123' is not of type 'object'\"\n        },\n        {\n          \"path\": \"$[0].environment\",\n          \"message\": \"'{{ foo }}-123' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors in JSON\nDESCRIPTION: This JSON snippet shows the output of ajv schema validation errors. It indicates that two network entries under the platforms section are not objects as required by the schema.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/molecule/platforms_networks/molecule.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/platforms/0/networks/0\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/$defs/platform-network/type\"\n  },\n  {\n    \"instancePath\": \"/platforms/0/networks/1\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/$defs/platform-network/type\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors for Ansible Playbook Task\nDESCRIPTION: This JSON output presents validation errors detected by check-jsonschema for an Ansible playbook task. It highlights issues with the 'args' property being an integer instead of an object or string, and a missing required 'block' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/args_integer.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/args_integer.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'action': 'foo', 'args': 123} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].args\",\n        \"message\": \"123 is not of type 'object'\"\n      },\n      \"num_sub_errors\": 3,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].args\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].args\",\n          \"message\": \"123 is not of type 'object'\"\n        },\n        {\n          \"path\": \"$[0].args\",\n          \"message\": \"123 is not of type 'string'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Ansible Hosts Variable Usage\nDESCRIPTION: Example showing incorrect usage of undefined variables in the hosts block of an Ansible playbook. This approach can cause syntax-check failures because it assumes the my_hosts variable is always defined.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/syntax_check.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name:\n    Bad use of variable inside hosts block (wrong assumption of it being\n    defined)\n  hosts: \"{{ my_hosts }}\"\n  tasks: []\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results in JSON\nDESCRIPTION: This snippet presents the JSON output of check-jsonschema validation results. It shows a failure status and provides details about the error in the changelog.yaml file, which is incorrectly formatted as an array instead of an object.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/list/changelogs/changelog.yaml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/changelogs/list/changelogs/changelog.yaml\",\n      \"path\": \"$\",\n      \"message\": \"['this is invalid', 'as changelog must be object (mapping)', 'not an array (sequence)'] is not of type 'object'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv JSON Schema Validation Errors\nDESCRIPTION: This snippet shows the error output from ajv when validating a JSON document against a schema. The error indicates an additional property 'foo' that is not allowed in the 'all' object.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/inventory/broken_dev_inventory.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/all\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"foo\"\n    },\n    \"schemaPath\": \"#/$defs/special-group/additionalProperties\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Check-jsonschema Validation Errors for Ansible Playbook\nDESCRIPTION: Error output from check-jsonschema tool showing detailed validation failures for an Ansible playbook. The report indicates that using both 'ansible.builtin.import_playbook' and 'import_playbook' simultaneously violates the schema, which requires exclusively using one or the other.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/import_playbook_exclusive.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/import_playbook_exclusive.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'ansible.builtin.import_playbook': 'foo.yml', 'import_playbook': 'other.yml'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"{'ansible.builtin.import_playbook': 'foo.yml', 'import_playbook': 'other.yml'} should not be valid under {'required': ['ansible.builtin.import_playbook']}\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"{'ansible.builtin.import_playbook': 'foo.yml', 'import_playbook': 'other.yml'} should not be valid under {'required': ['import_playbook']}\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'ansible.builtin.import_playbook': 'foo.yml', 'import_playbook': 'other.yml'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'ansible.builtin.import_playbook': 'foo.yml', 'import_playbook': 'other.yml'} should not be valid under {'required': ['import_playbook']}\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'ansible.builtin.import_playbook': 'foo.yml', 'import_playbook': 'other.yml'} should not be valid under {'required': ['ansible.builtin.import_playbook']}\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"Additional properties are not allowed ('ansible.builtin.import_playbook', 'import_playbook' were unexpected)\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'ansible.builtin.import_playbook': 'foo.yml', 'import_playbook': 'other.yml'} should not be valid under {'required': ['ansible.builtin.import_playbook']}\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'ansible.builtin.import_playbook': 'foo.yml', 'import_playbook': 'other.yml'} should not be valid under {'required': ['import_playbook']}\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' is a required property\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Ansible Playbook Task\nDESCRIPTION: This JSON output shows multiple validation errors detected by AJV for an Ansible playbook task. The errors include a missing required 'block' property and type mismatches for the 'args' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/args_integer.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/args\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/args\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/args\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/args\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic YAML Code Examples\nDESCRIPTION: Illustrates common YAML syntax violations including missing document start, octal values, key duplicates, and incorrect comment indentation.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/yaml.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Missing YAML document start.\nfoo: 0777 # <-- yaml[octal-values]\nfoo2: 0o777 # <-- yaml[octal-values]\nfoo2: ... # <-- yaml[key-duplicates]\nbar: ...       # <-- yaml[comments-indentation]\n```\n\n----------------------------------------\n\nTITLE: AJV JSON Schema Validation Error Output\nDESCRIPTION: Example error output from AJV validator showing an additional properties violation. The error indicates an unexpected 'release' property was found at the root level.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/unknown-keys/changelogs/changelog.yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"release\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Error Output for JSON Schema Validation\nDESCRIPTION: This snippet shows the error output from ajv, a JSON schema validator. It reports that the 'children' property at '/platforms/0/children' must be an array but isn't in the validated document.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/molecule/platforms_children/molecule.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/platforms/0/children\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/children/type\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic FQCN Usage in Ansible Playbook (YAML)\nDESCRIPTION: This code snippet shows an example of a playbook that does not use the fully-qualified collection name (FQCN) for the shell module, which is considered problematic.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/fqcn.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Create an SSH connection\n      shell: ssh ssh_user@{{ ansible_ssh_host }} # <- Does not use the FQCN for the shell module.\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Lint Rules\nDESCRIPTION: This JSON output shows multiple validation errors related to rule naming and schema compliance in an Ansible Lint configuration. It highlights issues with property names, pattern matching, and type mismatches.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/.ansible-lint.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/rules\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"command-instead-of-module\",\n        \"command-instead-of-shell\",\n        \"deprecated-bare-vars\",\n        \"deprecated-local-action\",\n        \"deprecated-module\",\n        \"empty-string-compare\",\n        \"fqcn\",\n        \"fqcn[action-core]\",\n        \"fqcn[action]\",\n        \"fqcn[canonical]\",\n        \"fqcn[keyword]\",\n        \"galaxy\",\n        \"galaxy[no-changelog]\",\n        \"galaxy[no-runtime]\",\n        \"galaxy[tags]\",\n        \"galaxy[version-incorrect]\",\n        \"galaxy[version-missing]\",\n        \"ignore-errors\",\n        \"inline-env-var\",\n        \"internal-error\",\n        \"jinja\",\n        \"jinja[invalid]\",\n        \"jinja[spacing]\",\n        \"key-order\",\n        \"latest\",\n        \"literal-compare\",\n        \"load-failure\",\n        \"load-failure[not-found]\",\n        \"loop-var-prefix\",\n        \"loop-var-prefix[missing]\",\n        \"loop-var-prefix[wrong]\",\n        \"meta-incorrect\",\n        \"meta-no-tags\",\n        \"meta-runtime\",\n        \"meta-video-links\",\n        \"name\",\n        \"name[casing]\",\n        \"name[play]\",\n        \"name[prefix]\",\n        \"name[template]\",\n        \"no-changed-when\",\n        \"no-handler\",\n        \"no-jinja-when\",\n        \"no-log-password\",\n        \"no-prompting\",\n        \"no-relative-paths\",\n        \"no-same-owner\",\n        \"no-tabs\",\n        \"only-builtins\",\n        \"package-latest\",\n        \"parser-error\",\n        \"partial-become\",\n        \"playbook-extension\",\n        \"risky-file-permissions\",\n        \"risky-octal\",\n        \"risky-shell-pipe\",\n        \"role-name\",\n        \"run-once\",\n        \"run-once[play]\",\n        \"run-once[task]\",\n        \"sanity\",\n        \"sanity[bad-ignore]\",\n        \"sanity[cannot-ignore]\",\n        \"schema\",\n        \"syntax-check\",\n        \"var-naming\",\n        \"yaml\"\n      ]\n    },\n    \"propertyName\": \"Wrong_Rule_name\",\n    \"schemaPath\": \"#/properties/rules/propertyNames/oneOf/0/enum\"\n  },\n  {\n    \"instancePath\": \"/rules\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^[a-z0-9-\\\\[\\\\]]+$\\\"\",\n    \"params\": {\n      \"pattern\": \"^[a-z0-9-\\\\[\\\\]]+$\"\n    },\n    \"propertyName\": \"Wrong_Rule_name\",\n    \"schemaPath\": \"#/properties/rules/propertyNames/oneOf/1/pattern\"\n  },\n  {\n    \"instancePath\": \"/rules\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"propertyName\": \"Wrong_Rule_name\",\n    \"schemaPath\": \"#/properties/rules/propertyNames/oneOf\"\n  },\n  {\n    \"instancePath\": \"/rules\",\n    \"keyword\": \"propertyNames\",\n    \"message\": \"property name must be valid\",\n    \"params\": {\n      \"propertyName\": \"Wrong_Rule_name\"\n    },\n    \"schemaPath\": \"#/properties/rules/propertyNames\"\n  },\n  {\n    \"instancePath\": \"/rules/Wrong_Rule_name\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/$defs/rule/type\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results\nDESCRIPTION: This snippet presents the output from check-jsonschema tool. It shows two errors related to an invalid date format in the release_date field of the changelog.yaml file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/invalid-date/changelogs/changelog.yaml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/changelogs/invalid-date/changelogs/changelog.yaml\",\n      \"path\": \"$.releases.1.0.0.release_date\",\n      \"message\": \"'01-01-2020' is not a 'date'\",\n      \"has_sub_errors\": false\n    },\n    {\n      \"filename\": \"negative_test/changelogs/invalid-date/changelogs/changelog.yaml\",\n      \"path\": \"$.releases.1.0.0.release_date\",\n      \"message\": \"'01-01-2020' does not match '\\\\\\\\d\\\\\\\\d\\\\\\\\d\\\\\\\\d-\\\\\\\\d\\\\\\\\d-\\\\\\\\d\\\\\\\\d'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Literal Comparison in Ansible When Clause\nDESCRIPTION: Example showing incorrect usage of literal boolean comparison in an Ansible playbook's when clause. The task unnecessarily compares ansible_os_family with True using ==.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/literal-compare.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Print environment variable to stdout\n      ansible.builtin.command: echo $MY_ENV_VAR\n      when: ansible_os_family == True # <- Adds complexity to your playbook.\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for JSON Schema\nDESCRIPTION: This snippet shows the validation errors produced by ajv for a JSON schema. It indicates that the release_date field does not match the required date pattern.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/invalid-date/changelogs/changelog.yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/releases/1.0.0/release_date\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\"\",\n    \"params\": {\n      \"pattern\": \"\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\"\n    },\n    \"schemaPath\": \"#/properties/release_date/pattern\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Video Link Formatting in Ansible Galaxy Metadata\nDESCRIPTION: Examples of incorrectly formatted video_links in meta/main.yml, showing common mistakes like missing url keys, unsupported keys, and invalid URL formats.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_video_links.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngalaxy_info:\n  video_links:\n    - https://www.youtube.com/watch?v=aWmRepTSFKs&feature=youtu.be # <- Does not use the url key.\n    - my_bad_key: https://www.youtube.com/watch?v=aWmRepTSFKs&feature=youtu.be # <- Uses an unsupported key.\n      title: Incorrect key.\n    - url: www.acme.com/vid # <- Uses an unsupported url format.\n      title: Incorrect url format.\n```\n\n----------------------------------------\n\nTITLE: Problematic Template Module Usage with Relative Path\nDESCRIPTION: Example showing incorrect usage of relative paths in template module src argument, which should be avoided.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-relative-paths.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Template a file to /etc/file.conf\n      ansible.builtin.template:\n        src: ../my_templates/foo.j2 # <- Uses a relative path in the src argument.\n        dest: /etc/file.conf\n        owner: bin\n        group: wheel\n        mode: \"0644\"\n```\n\n----------------------------------------\n\nTITLE: Example check-jsonschema Validation Failure Output in JSON\nDESCRIPTION: This JSON snippet shows the standard output from the 'check-jsonschema' tool when validation fails. It includes an overall 'status' of 'fail', an array of 'errors' (detailing the problematic file, path, message, and sub-errors related to type and regex mismatches for the 'environment' key), and potentially 'parse_errors'. This structure provides comprehensive feedback on why a specific file failed JSON schema validation.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/play-keyword.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/vars/play-keyword.yml\",\n      \"path\": \"$\",\n      \"message\": \"{'environment': '...'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$\",\n        \"message\": \"{'environment': '...'} is not of type 'string'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$\",\n        \"message\": \"'environment' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n      },\n      \"num_sub_errors\": 2,\n      \"sub_errors\": [\n        {\n          \"path\": \"$\",\n          \"message\": \"'environment' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'environment': '...'} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'environment': '...'} is not of type 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Ansible Version Requirement\nDESCRIPTION: Example of correct code using a fully specified version number that is currently supported.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_runtime.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# runtime.yml\n---\nrequires_ansible: \">=2.17.0\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Ansible Version Requirement - Incomplete Version\nDESCRIPTION: Example of problematic code using an incomplete version number without patch version.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/meta_runtime.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# runtime.yml\n---\nrequires_ansible: \"2.17\"\n```\n\n----------------------------------------\n\nTITLE: Problematic Playbook Using Non-Builtin Collection\nDESCRIPTION: An example YAML playbook that violates the only-builtins rule by using an action from the kubernetes.core collection instead of ansible.builtin. This would trigger a linting error when the rule is enabled.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/only-builtins.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Deploy a Helm chart for Prometheus\n      kubernetes.core.helm: # <- Uses a non-builtin collection.\n        name: test\n        chart_ref: stable/prometheus\n        release_namespace: monitoring\n        create_namespace: true\n```\n\n----------------------------------------\n\nTITLE: Invalid Ansible Version Requirement - Improper Version Format\nDESCRIPTION: Example of problematic code that uses improper version format. The short form 2.17 is used instead of the full version like 2.17.0, which is required for explicitness.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/meta-runtime.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# runtime.yml\n---\nrequires_ansible: \"2.17\"\n```\n\n----------------------------------------\n\nTITLE: Problematic YAML: Undefined Variable in Hosts Block\nDESCRIPTION: This YAML snippet demonstrates incorrect usage of a variable inside the hosts block, assuming it's defined without providing a default value.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/syntax-check.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name:\n    Bad use of variable inside hosts block (wrong assumption of it being\n    defined)\n  hosts: \"{{ my_hosts }}\"\n  tasks: []\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Ansible Lint Schema\nDESCRIPTION: This JSON snippet shows the validation error output from AJV (Another JSON Schema Validator). It indicates that the 'requires_ansible' field does not match the required pattern '^[^\\s]*$', which disallows whitespace.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/meta/runtime.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/requires_ansible\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^[^\\\\s]*$\\\"\",\n    \"params\": {\n      \"pattern\": \"^[^\\\\s]*$\"\n    },\n    \"schemaPath\": \"#/properties/requires_ansible/pattern\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Ansible Module Validation Configuration\nDESCRIPTION: Specifies validation rules for an example Ansible module, checking for deprecation mismatches in the module definition.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/examples/sanity_ignores/tests/sanity/ignore-2.13.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplugins/module_utils/ansible_example_module.py validate-modules:deprecation-mismatch\n```\n\n----------------------------------------\n\nTITLE: Referencing Raw Module in Ansible Lint Warning (Markdown)\nDESCRIPTION: This code snippet demonstrates how to reference the 'raw' module in Ansible documentation using Markdown syntax. It includes a link to the official Ansible documentation for the raw module.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/warning.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[raw](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/raw_module.html#ansible-collections-ansible-builtin-raw-module)\n```\n\n----------------------------------------\n\nTITLE: Displaying Check-jsonschema Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON snippet shows the validation errors reported by check-jsonschema for an Ansible playbook. It indicates that the playbook failed validation, primarily due to an invalid 'become_method' value and a missing required 'block' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/become_method_invalid.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/become_method_invalid.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'command': 'echo 123', 'vars': {'sudo_var': 'doo'}, 'become_method': True} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].become_method\",\n        \"message\": \"True is not one of ['ansible.builtin.sudo', 'ansible.builtin.su', 'community.general.pbrun', 'community.general.pfexec', 'ansible.builtin.runas', 'community.general.dzdo', 'community.general.ksu', 'community.general.doas', 'community.general.machinectl', 'community.general.pmrun', 'community.general.sesu', 'community.general.sudosu']\"\n      },\n      \"num_sub_errors\": 10,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not one of ['ansible.builtin.sudo', 'ansible.builtin.su', 'community.general.pbrun', 'community.general.pfexec', 'ansible.builtin.runas', 'community.general.dzdo', 'community.general.ksu', 'community.general.doas', 'community.general.machinectl', 'community.general.pmrun', 'community.general.sesu', 'community.general.sudosu']\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not one of ['ansible.builtin.sudo', 'ansible.builtin.su', 'community.general.pbrun', 'community.general.pfexec', 'ansible.builtin.runas', 'community.general.dzdo', 'community.general.ksu', 'community.general.doas', 'community.general.machinectl', 'community.general.pmrun', 'community.general.sesu', 'community.general.sudosu']\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].become_method\",\n          \"message\": \"True is not of type 'string'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Code Transferring File Ownership\nDESCRIPTION: Example playbook demonstrating problematic code where file ownership is preserved during synchronize and unarchive operations, which can lead to permission issues or information leakage.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/no-same-owner.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Synchronize conf file\n      ansible.posix.synchronize:\n        src: /path/conf.yaml\n        dest: /path/conf.yaml # <- Transfers the owner and group for the file.\n    - name: Extract tarball to path\n      ansible.builtin.unarchive:\n        src: \"{{ file }}.tar.gz\"\n        dest: /my/path/ # <- Transfers the owner and group for the file.\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Task\nDESCRIPTION: This JSON snippet shows the validation results from check-jsonschema for an Ansible task. It details errors related to a missing 'block' property and an invalid 'with_items' value, providing both high-level and detailed error messages.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/with_items_untemplated_string.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/with_items_untemplated_string.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'command': 'echo 123', 'with_items': 'foobar'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].with_items\",\n        \"message\": \"'foobar' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n      },\n      \"num_sub_errors\": 3,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].with_items\",\n          \"message\": \"'foobar' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].with_items\",\n          \"message\": \"'foobar' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].with_items\",\n          \"message\": \"'foobar' is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting check-jsonschema Validation Results for Ansible Lint Configuration\nDESCRIPTION: This JSON output from check-jsonschema indicates a failure in parsing the .ansible-lint configuration file. It shows the validation status, an empty list of successes and errors, and a parse error for the specified file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/.ansible-lint.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [],\n  \"parse_errors\": [\n    {\n      \"filename\": \"negative_test/.ansible-lint\",\n      \"message\": \"Failed to parse negative_test/.ansible-lint\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Sanity Ignore File with Disallowed Version\nDESCRIPTION: An example of a problematic sanity ignore file that uses import-3.6, which is not in the list of allowed ignores. This would trigger the 'sanity[cannot-ignore]' error.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/sanity.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# tests/sanity/ignore-x.x.txt\nplugins/module_utils/ansible_example_module.py import-3.6!skip\n```\n\n----------------------------------------\n\nTITLE: Check-JSONSchema Error Output Analysis\nDESCRIPTION: This JSON snippet describes the output of schema validation using check-jsonschema, displaying the failure details for Ansible playbook files. It includes the status of the validation, filename, specific paths, error messages, and sub-error details to aid developers in troubleshooting schema violations.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/invalid_block.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"status\\\": \\\"fail\\\",\\n  \\\"successes\\\": [],\\n  \\\"errors\\\": [\\n    {\\n      \\\"filename\\\": \\\"negative_test/playbooks/tasks/invalid_block.yml\\\",\\n      \\\"path\\\": \\\"$[0]\\\",\\n      \\\"message\\\": \\\"{'block': {}} is not valid under any of the given schemas\\\",\\n      \\\"has_sub_errors\\\": true,\\n      \\\"best_match\\\": {\\n        \\\"path\\\": \\\"$[0]\\\",\\n        \\\"message\\\": \\\"{'block': {}} should not be valid under {'required': ['block']}\\\"\\n      },\\n      \\\"best_deep_match\\\": {\\n        \\\"path\\\": \\\"$[0].block\\\",\\n        \\\"message\\\": \\\"{} is not of type 'array'\\\"\\n      },\\n      \\\"num_sub_errors\\\": 1,\\n      \\\"sub_errors\\\": [\\n        {\\n          \\\"path\\\": \\\"$[0].block\\\",\\n          \\\"message\\\": \\\"{} is not of type 'array'\\\"\\n        },\\n        {\\n          \\\"path\\\": \\\"$[0]\\\",\\n          \\\"message\\\": \\\"{'block': {}} should not be valid under {'required': ['block']}\\\"\\n        }\\n      ]\\n    }\\n  ],\\n  \\\"parse_errors\\\": []\\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Galaxy Configuration with Incorrect Version\nDESCRIPTION: This example demonstrates a galaxy.yml file with an incorrect version number. The 'version' key is set to '0.0.1', which is less than the required minimum of '1.0.0'.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/galaxy_version_incorrect.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: \"description\"\nnamespace: \"namespace_name\"\nname: \"collection_name\"\nversion: \"0.0.1\" # <- version key is not greater than or equal to '1.0.0'.\nreadme: \"README.md\"\nauthors:\n  - \"Author1\"\n  - \"Author2 (https://author2.example.com)\"\n  - \"Author3 <author3@example.com>\"\ndependencies:\n  \"other_namespace.collection1\": \">=1.0.0\"\n  \"other_namespace.collection2\": \">=2.0.0,<3.0.0\"\n  \"anderson55.my_collection\": \"*\" # note: \"*\" selects the highest version available\nlicense:\n  - \"MIT\"\ntags:\n  - demo\n  - collection\nrepository: \"https://www.github.com/my_org/my_collection\"\n```\n\n----------------------------------------\n\nTITLE: check-jsonschema Validation Error Output for Invalid Ansible Collection Name\nDESCRIPTION: JSON output from the check-jsonschema tool showing a validation failure for an Ansible collection name. The error shows that 'foo' is an invalid value for a collection name as it doesn't match the required pattern with namespace and collection components.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta_invalid_collection/meta/main.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/roles/meta_invalid_collection/meta/main.yml\",\n      \"path\": \"$.collections[0]\",\n      \"message\": \"'foo' does not match '^[a-z_]+\\\\\\\\.[a-z_]+$'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Report AJV Validation Errors in JSON\nDESCRIPTION: This JSON snippet documents the error messages generated by the AJV validation library when JSON data does not adhere to the defined schema. It lists the instance path, keyword, error message, and schema path for each error encountered. Dependencies include a defined JSON schema and valid JSON data for comparison.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/varname-numeric-prefix.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"5foo\"\n    },\n    \"schemaPath\": \"#/anyOf/0/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be null\",\n    \"params\": {\n      \"type\": \"null\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example 'check-jsonschema' Validation Failure Output\nDESCRIPTION: This JSON snippet represents the standard output from the 'check-jsonschema' tool when validation fails. It includes an overall status ('fail'), a list of errors detailing the file (`negative_test/playbooks/tasks/loop.yml`), path within the file (`$[0]`), message, and potentially sub-errors for more complex validation issues like `anyOf`. This output format provides context about the validation failure, including the specific file and location within the data that caused the error, along with details about the best matching schema attempt.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/loop.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/loop.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'ansible.builtin.debug': {'var': 'item'}, 'loop': {}} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].loop\",\n        \"message\": \"{} is not of type 'string', 'array'\"\n      },\n      \"num_sub_errors\": 1,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].loop\",\n          \"message\": \"{} is not of type 'string', 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Output for Ansible Task\nDESCRIPTION: This JSON snippet shows the output of check-jsonschema tool validating an Ansible task. It provides detailed error information, including the best matching error and sub-errors for invalid task definition.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/args_string.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/args_string.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'action': 'foo', 'args': '{{ }}123'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].args\",\n        \"message\": \"'{{ }}123' is not of type 'object'\"\n      },\n      \"num_sub_errors\": 3,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].args\",\n          \"message\": \"'{{ }}123' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].args\",\n          \"message\": \"'{{ }}123' is not of type 'object'\"\n        },\n        {\n          \"path\": \"$[0].args\",\n          \"message\": \"'{{ }}123' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results in JSON\nDESCRIPTION: This JSON snippet shows the output of check-jsonschema validation. It provides a more detailed error report, including the filename, specific paths, and error messages indicating that 'foo' and 'bar' are not of type 'object' as required.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/molecule/platforms_networks/molecule.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/molecule/platforms_networks/molecule.yml\",\n      \"path\": \"$.platforms[0].networks[0]\",\n      \"message\": \"'foo' is not of type 'object'\",\n      \"has_sub_errors\": false\n    },\n    {\n      \"filename\": \"negative_test/molecule/platforms_networks/molecule.yml\",\n      \"path\": \"$.platforms[0].networks[1]\",\n      \"message\": \"'bar' is not of type 'object'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: check-jsonschema Validation Output for Ansible Playbook\nDESCRIPTION: This JSON snippet shows the output of check-jsonschema tool for validating an Ansible playbook. It reports a failure status and provides detailed error messages, including issues with the 'hosts' property and incorrect data type for the 'tags' field.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tags-number.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tags-number.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tags': 123} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tags\",\n        \"message\": \"123 is not of type 'string'\"\n      },\n      \"num_sub_errors\": 9,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tags': 123} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not of type 'array'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tags\",\n          \"message\": \"123 is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: check-jsonschema Validation Error Output for Invalid Ansible Playbook\nDESCRIPTION: This JSON output shows validation errors from check-jsonschema when validating an Ansible playbook with an invalid 'with_items' property that uses a boolean (True) value instead of the required string or array type.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/with_items_boolean.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/with_items_boolean.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'command': 'echo 123', 'with_items': True} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].with_items\",\n        \"message\": \"True is not of type 'string'\"\n      },\n      \"num_sub_errors\": 3,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].with_items\",\n          \"message\": \"True is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].with_items\",\n          \"message\": \"True is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].with_items\",\n          \"message\": \"True is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook\nDESCRIPTION: The validation output from check-jsonschema tool when analyzing an invalid Ansible playbook. This report provides a comprehensive analysis of schema violations, including a best match error about missing import_playbook and a best deep match error highlighting that 123 is not a valid boolean in a when condition.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/when.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/when.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'name': 'Test for when (failure)', 'hosts': 'localhost', 'gather_facts': False, 'tasks': [{'name': 'Testing for when is passed a list', 'ansible.builtin.debug': {'msg': 'this is ok'}, 'when': [True, 123]}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'gather_facts', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].when[1]\",\n        \"message\": \"123 is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 17,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'gather_facts', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'name': 'Test for when (failure)', 'hosts': 'localhost', 'gather_facts': False, 'tasks': [{'name': 'Testing for when is passed a list', 'ansible.builtin.debug': {'msg': 'this is ok'}, 'when': [True, 123]}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'name': 'Testing for when is passed a list', 'ansible.builtin.debug': {'msg': 'this is ok'}, 'when': [True, 123]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when\",\n          \"message\": \"[True, 123] is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when\",\n          \"message\": \"[True, 123] is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when\",\n          \"message\": \"[True, 123] is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when[1]\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when[1]\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when[1]\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when\",\n          \"message\": \"[True, 123] is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when\",\n          \"message\": \"[True, 123] is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when\",\n          \"message\": \"[True, 123] is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when[1]\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when[1]\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].when[1]\",\n          \"message\": \"123 is not of type 'string'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: AJV Validation Errors for Ansible Playbook Schema\nDESCRIPTION: This JSON snippet shows the validation errors reported by AJV for an Ansible playbook. The errors indicate issues with required properties, additional properties, and incorrect data types for the 'tags' field.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tags-number.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/tags/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/tags/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/tags\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/$defs/tags/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook Task\nDESCRIPTION: This JSON output shows the validation results from check-jsonschema for the same Ansible playbook task. It provides a more detailed breakdown of the errors, including sub-errors and best matches for the validation failures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/local_action.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/local_action.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'local_action': []} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].local_action\",\n        \"message\": \"[] is not of type 'string', 'object'\"\n      },\n      \"num_sub_errors\": 1,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].local_action\",\n          \"message\": \"[] is not of type 'string', 'object'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Check-jsonschema Validation Error Output for Ansible Task\nDESCRIPTION: Formatted JSON output from check-jsonschema tool showing validation failures for an Ansible task in the file 'when_integer.yml'. The errors provide more context, indicating that the task has an action 'foo' with a 'when' condition set to integer 123, which is invalid as it should be a boolean, string, or array.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/when_integer.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/when_integer.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'action': 'foo', 'when': 123} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].when\",\n        \"message\": \"123 is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 8,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"123 is not of type 'array'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].when\",\n          \"message\": \"123 is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors for Ansible Galaxy Metadata\nDESCRIPTION: JSON output from the check-jsonschema tool showing validation failures for an Ansible role's metadata file. The tool identifies missing 'author' property and incorrect type for 'galaxy_tags' in the negative_test/roles/meta/main.yml file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta/main.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/roles/meta/main.yml\",\n      \"path\": \"$.galaxy_info\",\n      \"message\": \"'author' is a required property\",\n      \"has_sub_errors\": false\n    },\n    {\n      \"filename\": \"negative_test/roles/meta/main.yml\",\n      \"path\": \"$.galaxy_info.galaxy_tags\",\n      \"message\": \"'database' is not of type 'array'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON output shows multiple schema validation errors detected by ajv. The errors mainly revolve around missing required properties and an invalid type for the 'vars_files' property in an Ansible playbook.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/var_files_number.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/patternProperties/vars/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array,string,null\",\n    \"params\": {\n      \"type\": [\n        \"array\",\n        \"string\",\n        \"null\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/vars_files/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results in JSON\nDESCRIPTION: This snippet shows the output from the check-jsonschema tool, summarizing validation errors found in the Ansible playbook. It provides a high-level overview of the issues, including problems with playbook structure and the 'no_log' parameter.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/no_log_partial_template.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/no_log_partial_template.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'vars': {'some_var': True}, 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}, 'no_log': 'foo-{{ some_var }}'}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].no_log\",\n        \"message\": \"'foo-{{ some_var }}' is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 11,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'vars': {'some_var': True}, 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}, 'no_log': 'foo-{{ some_var }}'}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'ansible.builtin.debug': {'msg': 'foo'}, 'no_log': 'foo-{{ some_var }}'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'foo-{{ some_var }}' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'foo-{{ some_var }}' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'foo-{{ some_var }}' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'foo-{{ some_var }}' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'foo-{{ some_var }}' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].no_log\",\n          \"message\": \"'foo-{{ some_var }}' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Ansible Playbook with Run-Once and Linear Strategy\nDESCRIPTION: Example showing proper use of run_once with linear strategy and demonstrates how to use noqa comments to suppress specific rule violations when needed.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/run_once.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: \"Example of using run_once with strategy other than free\"\n  hosts: all\n  strategy: linear\n  # strategy: free # noqa: run-once[play] (if using strategy: free can skip it this way)\n  gather_facts: false\n  tasks: # <-- use noqa to disable rule violations for specific tasks\n    - name: Task with run_once # noqa: run-once[task]\n      ansible.builtin.debug:\n        msg: \"Test\"\n      run_once: true\n```\n\n----------------------------------------\n\nTITLE: Illustrating Correct Variable Usage in Ansible YAML\nDESCRIPTION: This snippet demonstrates two correct ways to handle the previous problematic code: one for when 'foo' is not a variable, and another for when it is a variable that needs to be expanded.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/deprecated-bare-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# if foo is not really a variable:\n- ansible.builtin.debug:\n    msg: \"{{ item }}\"\n  with_items:\n    - foo\n\n# if foo is a variable:\n- ansible.builtin.debug:\n    msg: \"{{ item }}\"\n  with_items: \"{{ foo }}\"\n```\n\n----------------------------------------\n\nTITLE: Problematic Password Logging in Ansible Playbook\nDESCRIPTION: Example of incorrect implementation where passwords could be exposed in logs due to no_log being set to false when using loops with the ansible.builtin.user module.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/no_log_password.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: localhost\n  tasks:\n    - name: Log user passwords\n      ansible.builtin.user:\n        name: john_doe\n        comment: John Doe\n        uid: 1040\n        group: admin\n        password: \"{{ item }}\"\n      with_items:\n        - wow\n      no_log: false # <- Sets the no_log attribute to false.\n```\n\n----------------------------------------\n\nTITLE: AJV Error Output Format for Invalid Ansible YAML\nDESCRIPTION: Example of error output from AJV JSON schema validator when validating a YAML file with an invalid property name '*foo'. The errors show it violates multiple schema rules including having additional properties and type mismatches.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/asterisk.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"*foo\"\n    },\n    \"schemaPath\": \"#/anyOf/0/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be null\",\n    \"params\": {\n      \"type\": \"null\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv validation errors for invalid Ansible requirements.yml\nDESCRIPTION: Example output from ajv JSON schema validator showing various validation errors for an invalid requirements.yml file. The errors indicate that the document must be an array, is missing required properties like 'collections' and 'roles', and contains an unauthorized 'foo' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/reqs3/meta/requirements.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'collections'\",\n    \"params\": {\n      \"missingProperty\": \"collections\"\n    },\n    \"schemaPath\": \"#/anyOf/0/required\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'roles'\",\n    \"params\": {\n      \"missingProperty\": \"roles\"\n    },\n    \"schemaPath\": \"#/anyOf/1/required\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"foo\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook\nDESCRIPTION: This JSON output presents the validation results from check-jsonschema for an Ansible playbook. It shows a failed validation status with detailed error messages, including path information and specific validation failures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/local_action.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/local_action.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tasks': [{'local_action': []}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].local_action\",\n        \"message\": \"[] is not of type 'string', 'object'\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tasks': [{'local_action': []}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'local_action': []} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].local_action\",\n          \"message\": \"[] is not of type 'string', 'object'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv JSON Schema Validation Errors for Ansible Task\nDESCRIPTION: This JSON snippet shows validation errors from ajv for an Ansible task. It indicates issues with a missing 'block' property and an invalid 'with_items' value that doesn't match the expected pattern or type.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/with_items_untemplated_string.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/with_items\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/with_items\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/with_items/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/with_items\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/properties/with_items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Capture Check-JSONSchema Validation Output\nDESCRIPTION: This JSON snippet captures the output of a JSON schema check using tools such as check-jsonschema. It provides detailed error messages with paths, descriptions, and matches related to invalid data fields, including specifics about regular expression mismatches and datatype expectations.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/varname-numeric-prefix.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/vars/varname-numeric-prefix.yml\",\n      \"path\": \"$\",\n      \"message\": \"{'5foo': '...'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$\",\n        \"message\": \"{'5foo': '...'} is not of type 'string'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$\",\n        \"message\": \"'5foo' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\w]*$'\"\n      },\n      \"num_sub_errors\": 2,\n      \"sub_errors\": [\n        {\n          \"path\": \"$\",\n          \"message\": \"'5foo' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\w]*$'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'5foo': '...'} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'5foo': '...'} is not of type 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: AJV Validation Error Output for Invalid Ansible Playbook Structure\nDESCRIPTION: This JSON output shows validation errors from AJV when encountering an Ansible playbook task with a missing 'block' property and an invalid 'with_items' property that uses a boolean instead of string or array.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/with_items_boolean.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/with_items\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/type\"\n  },\n  {\n    \"instancePath\": \"/0/with_items\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/with_items/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/with_items\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/properties/with_items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON output shows multiple validation errors detected by ajv for an Ansible playbook. The errors indicate missing required properties, incorrect types, and issues with schema matching.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/local_action.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/local_action\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string,object\",\n    \"params\": {\n      \"type\": [\n        \"string\",\n        \"object\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/local_action/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: AJV Error Output for Missing Author Property in Ansible Role\nDESCRIPTION: Sample error output from AJV JSON schema validator showing validation errors for an Ansible role metadata file. The errors indicate that the 'author' property is missing from the galaxy_info section, which is required according to the schema.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/roles/meta_invalid_role_namespace/meta/main.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/galaxy_info\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'author'\",\n    \"params\": {\n      \"missingProperty\": \"author\"\n    },\n    \"schemaPath\": \"#/allOf/0/then/required\"\n  },\n  {\n    \"instancePath\": \"/galaxy_info\",\n    \"keyword\": \"if\",\n    \"message\": \"must match \\\"then\\\" schema\",\n    \"params\": {\n      \"failingKeyword\": \"then\"\n    },\n    \"schemaPath\": \"#/allOf/0/if\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Reporting Schema Validation Errors using ajv - JSON\nDESCRIPTION: This JSON code block represents a list of error objects output by the ajv JSON Schema validator. Each error includes the path to the invalid data, the violated schema rule, a descriptive message, and related parameters. It is used to communicate to developers which properties are missing or have incorrect types, and provides actionable schema paths for debugging. There are no external dependencies to use this block, but it is expected as output after running ajv validation against a JSON file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/when_object.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf/2/type\"\n  },\n  {\n    \"instancePath\": \"/0/when\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/$defs/complex_conditional/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: check-jsonschema Error Output for Ansible Playbook Validation\nDESCRIPTION: This snippet shows the JSON error output from check-jsonschema when validating the same Ansible playbook. It provides a more comprehensive error structure with main errors, best matches, and sub-errors that provide detailed information about schema validation failures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/include.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/include.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tasks': [{'include': 'foo.yml'}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].include\",\n        \"message\": \"'foo.yml' should not be valid under {}\"\n      },\n      \"num_sub_errors\": 6,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tasks': [{'include': 'foo.yml'}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'include': 'foo.yml'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].include\",\n          \"message\": \"'foo.yml' should not be valid under {}\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Sample check-jsonschema Validation Failure Report\nDESCRIPTION: This JSON object illustrates an error report generated by the `check-jsonschema` tool when validating a file against a schema. It shows a 'fail' status for 'negative_test/playbooks/vars/python-keyword.yml', indicating the root object failed validation due to disallowed property names ('async', 'lambda') violating a specific regex pattern and failing type checks ('string', 'null'). The report includes detailed sub-errors and best-match suggestions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/python-keyword.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/vars/python-keyword.yml\",\n      \"path\": \"$\",\n      \"message\": \"{'async': '...', 'lambda': '...'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$\",\n        \"message\": \"{'async': '...', 'lambda': '...'} is not of type 'string'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$\",\n        \"message\": \"'async', 'lambda' do not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n      },\n      \"num_sub_errors\": 2,\n      \"sub_errors\": [\n        {\n          \"path\": \"$\",\n          \"message\": \"'async', 'lambda' do not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'async': '...', 'lambda': '...'} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'async': '...', 'lambda': '...'} is not of type 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Yamllint Configuration Error Message\nDESCRIPTION: Example shell output showing incompatible yamllint configuration error message.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/yaml.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nCRITICAL Found incompatible custom yamllint configuration (.yamllint), please either remove the file or edit it to comply with:\n  - comments.min-spaces-from-content must be 1\n  - braces.min-spaces-inside must be 0\n  - braces.max-spaces-inside must be 1\n  - octal-values.forbid-implicit-octal must be true\n  - octal-values.forbid-explicit-octal must be true\n\nRead https://ansible.readthedocs.io/projects/lint/rules/yaml/ for more details regarding why we have these requirements.\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Ansible Playbook Schema\nDESCRIPTION: JSON output showing validation errors from AJV when validating an Ansible playbook against its schema. The errors include missing required properties like 'import_playbook', invalid additional properties like 'hosts', 'gather_subset', and 'tasks', and enum validation failures for the 'gather_subset' values.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_subset2.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"gather_subset\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset/0\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"all\",\n        \"min\",\n        \"all_ipv4_addresses\",\n        \"all_ipv6_addresses\",\n        \"apparmor\",\n        \"architecture\",\n        \"caps\",\n        \"chroot,cmdline\",\n        \"date_time\",\n        \"default_ipv4\",\n        \"default_ipv6\",\n        \"devices\",\n        \"distribution\",\n        \"distribution_major_version\",\n        \"distribution_release\",\n        \"distribution_version\",\n        \"dns\",\n        \"effective_group_ids\",\n        \"effective_user_id\",\n        \"env\",\n        \"facter\",\n        \"fips\",\n        \"hardware\",\n        \"interfaces\",\n        \"is_chroot\",\n        \"iscsi\",\n        \"kernel\",\n        \"local\",\n        \"lsb\",\n        \"machine\",\n        \"machine_id\",\n        \"mounts\",\n        \"network\",\n        \"ohai\",\n        \"os_family\",\n        \"pkg_mgr\",\n        \"platform\",\n        \"processor\",\n        \"processor_cores\",\n        \"processor_count\",\n        \"python\",\n        \"python_version\",\n        \"real_user_id\",\n        \"selinux\",\n        \"service_mgr\",\n        \"ssh_host_key_dsa_public\",\n        \"ssh_host_key_ecdsa_public\",\n        \"ssh_host_key_ed25519_public\",\n        \"ssh_host_key_rsa_public\",\n        \"ssh_host_pub_keys\",\n        \"ssh_pub_keys\",\n        \"system\",\n        \"system_capabilities\",\n        \"system_capabilities_enforced\",\n        \"user\",\n        \"user_dir\",\n        \"user_gecos\",\n        \"user_gid\",\n        \"user_id\",\n        \"user_shell\",\n        \"user_uid\",\n        \"virtual\",\n        \"virtualization_role\",\n        \"virtualization_type\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/gather_subset/items/anyOf/0/enum\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset/0\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"!all\",\n        \"!min\",\n        \"!all_ipv4_addresses\",\n        \"!all_ipv6_addresses\",\n        \"!apparmor\",\n        \"!architecture\",\n        \"!caps\",\n        \"!chroot,cmdline\",\n        \"!date_time\",\n        \"!default_ipv4\",\n        \"!default_ipv6\",\n        \"!devices\",\n        \"!distribution\",\n        \"!distribution_major_version\",\n        \"!distribution_release\",\n        \"!distribution_version\",\n        \"!dns\",\n        \"!effective_group_ids\",\n        \"!effective_user_id\",\n        \"!env\",\n        \"!facter\",\n        \"!fips\",\n        \"!hardware\",\n        \"!interfaces\",\n        \"!is_chroot\",\n        \"!iscsi\",\n        \"!kernel\",\n        \"!local\",\n        \"!lsb\",\n        \"!machine\",\n        \"!machine_id\",\n        \"!mounts\",\n        \"!network\",\n        \"!ohai\",\n        \"!os_family\",\n        \"!pkg_mgr\",\n        \"!platform\",\n        \"!processor\",\n        \"!processor_cores\",\n        \"!processor_count\",\n        \"!python\",\n        \"!python_version\",\n        \"!real_user_id\",\n        \"!selinux\",\n        \"!service_mgr\",\n        \"!ssh_host_key_dsa_public\",\n        \"!ssh_host_key_ecdsa_public\",\n        \"!ssh_host_key_ed25519_public\",\n        \"!ssh_host_key_rsa_public\",\n        \"!ssh_host_pub_keys\",\n        \"!ssh_pub_keys\",\n        \"!system\",\n        \"!system_capabilities\",\n        \"!system_capabilities_enforced\",\n        \"!user\",\n        \"!user_dir\",\n        \"!user_gecos\",\n        \"!user_gid\",\n        \"!user_id\",\n        \"!user_shell\",\n        \"!user_uid\",\n        \"!virtual\",\n        \"!virtualization_role\",\n        \"!virtualization_type\"\n      ]\n    },\n    \"schemaPath\": \"#/properties/gather_subset/items/anyOf/1/enum\"\n  },\n  {\n    \"instancePath\": \"/0/gather_subset/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/properties/gather_subset/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Check-jsonschema Validation Errors for Ansible Playbook Task\nDESCRIPTION: Error output from check-jsonschema validator for an Ansible playbook task. It provides more detailed information about the validation failures, including both the high-level error and specific sub-errors for the missing 'block' property and the invalid 'loop' value type.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/loop2.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/tasks/loop2.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'ansible.builtin.debug': {'var': 'item'}, 'loop': 123} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'block' is a required property\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].loop\",\n        \"message\": \"123 is not of type 'string', 'array'\"\n      },\n      \"num_sub_errors\": 1,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].loop\",\n          \"message\": \"123 is not of type 'string', 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Use of Bare Variables in Ansible YAML\nDESCRIPTION: This snippet shows an example of deprecated bare variable usage in Ansible YAML, which can lead to confusion about whether 'foo' is a variable or a string.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/deprecated_bare_vars.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- ansible.builtin.debug:\n    msg: \"{{ item }}\"\n  with_items: foo # <-- deprecated-bare-vars\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors in JSON\nDESCRIPTION: This snippet shows the JSON output of ajv validation errors. It indicates that the root element must be an object, but the actual input is not of the correct type.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/list/changelogs/changelog.yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/type\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Errors for Ansible Playbook Schema\nDESCRIPTION: JSON output from the check-jsonschema validator showing detailed validation errors for an Ansible playbook. It provides a hierarchical error structure with best matches, deep matches, and sub-errors to help identify schema violations including unexpected properties and incorrect type definitions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vas_prompt.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/vas_prompt.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'vars_prompt': [{'name': 'username', 'prompt': 'What is your username?', 'private': False, 'tags': ['foo']}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\\\\\.builtin\\\\\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].vars_prompt[0]\",\n        \"message\": \"Additional properties are not allowed ('tags' was unexpected)\"\n      },\n      \"num_sub_errors\": 5,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\\\\\.builtin\\\\\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'vars_prompt': [{'name': 'username', 'prompt': 'What is your username?', 'private': False, 'tags': ['foo']}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].vars_prompt\",\n          \"message\": \"[{'name': 'username', 'prompt': 'What is your username?', 'private': False, 'tags': ['foo']}] is not of type 'object'\"\n        },\n        {\n          \"path\": \"$[0].vars_prompt[0]\",\n          \"message\": \"Additional properties are not allowed ('tags' was unexpected)\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook\nDESCRIPTION: This JSON output from check-jsonschema provides a detailed breakdown of the validation failures in the Ansible playbook. It highlights issues such as invalid 'vars_files' type and missing required properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/var_files_number.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/var_files_number.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'name': 'var_files should not accept number', 'hosts': 'localhost', 'vars_files': 0} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].vars_files\",\n        \"message\": \"0 is not of type 'object'\"\n      },\n      \"num_sub_errors\": 5,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts' does not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'name': 'var_files should not accept number', 'hosts': 'localhost', 'vars_files': 0} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].vars_files\",\n          \"message\": \"0 is not of type 'object'\"\n        },\n        {\n          \"path\": \"$[0].vars_files\",\n          \"message\": \"0 is not of type 'array', 'string', 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook in JSON\nDESCRIPTION: This JSON snippet shows a list of validation errors from ajv for an Ansible playbook. The errors primarily relate to the 'become_method' property, which fails to meet the required schema definitions.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/become_method_untemplated.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"sudo\",\n        \"su\",\n        \"pbrun\",\n        \"pfexec\",\n        \"runas\",\n        \"dzdo\",\n        \"ksu\",\n        \"doas\",\n        \"machinectl\",\n        \"pmrun\",\n        \"sesu\",\n        \"sudosu\"\n      ]\n    },\n    \"schemaPath\": \"#/oneOf/0/enum\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^[A-Z][a-z][0-9]._$\\\"\",\n    \"params\": {\n      \"pattern\": \"^[A-Z][a-z][0-9]._$\"\n    },\n    \"schemaPath\": \"#/oneOf/2/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"enum\",\n    \"message\": \"must be equal to one of the allowed values\",\n    \"params\": {\n      \"allowedValues\": [\n        \"sudo\",\n        \"su\",\n        \"pbrun\",\n        \"pfexec\",\n        \"runas\",\n        \"dzdo\",\n        \"ksu\",\n        \"doas\",\n        \"machinectl\",\n        \"pmrun\",\n        \"sesu\",\n        \"sudosu\"\n      ]\n    },\n    \"schemaPath\": \"#/oneOf/0/enum\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^[A-Z][a-z][0-9]._$\\\"\",\n    \"params\": {\n      \"pattern\": \"^[A-Z][a-z][0-9]._$\"\n    },\n    \"schemaPath\": \"#/oneOf/2/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/become_method\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Correct String Comparison in Ansible Playbook\nDESCRIPTION: Example showing the proper way to handle string comparisons in Ansible playbooks using boolean evaluation.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/empty_string_compare.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: Example playbook\n  hosts: all\n  tasks:\n    - name: Shut down\n      ansible.builtin.shell: |\n        /sbin/shutdown -t now\n        echo $var ==\n      when: ansible_os_family\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema validation results for invalid Ansible requirements.yml\nDESCRIPTION: Example output from check-jsonschema showing validation failures for an invalid requirements.yml file. The output provides a detailed breakdown of why validation failed, including that the object is not an array, contains unauthorized properties, and is missing required properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/reqs3/meta/requirements.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/reqs3/meta/requirements.yml\",\n      \"path\": \"$\",\n      \"message\": \"{'foo': 'bar'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$\",\n        \"message\": \"{'foo': 'bar'} is not of type 'array'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$\",\n        \"message\": \"{'foo': 'bar'} is not of type 'array'\"\n      },\n      \"num_sub_errors\": 4,\n      \"sub_errors\": [\n        {\n          \"path\": \"$\",\n          \"message\": \"{'foo': 'bar'} is not of type 'array'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"Additional properties are not allowed ('foo' was unexpected)\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'foo': 'bar'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"'collections' is a required property\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"'roles' is a required property\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv JSON Schema Validation Errors for Ansible Task\nDESCRIPTION: This JSON snippet shows the validation errors produced by ajv (Another JSON Schema Validator) for an Ansible task. The errors indicate missing required properties and type mismatches.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks/args_string.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/args\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/args\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/args\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific YAML Rule Skips\nDESCRIPTION: Example showing how to disable specific YAML syntax rules using tag identifiers.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/yaml.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nskip_list:\n  - yaml[trailing-spaces]\n  - yaml[indentation]\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON output shows ajv validation errors for an Ansible playbook that fails schema validation. The errors indicate missing required properties like 'import_playbook' and invalid properties like 'hosts', 'tasks', etc. that don't match the expected schema structure.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/tasks.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"pre_tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"post_tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"handlers\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/handlers\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array,null\",\n    \"params\": {\n      \"type\": [\n        \"array\",\n        \"null\"\n      ]\n    },\n    \"schemaPath\": \"#/type\"\n  },\n  {\n    \"instancePath\": \"/0/post_tasks\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array,null\",\n    \"params\": {\n      \"type\": [\n        \"array\",\n        \"null\"\n      ]\n    },\n    \"schemaPath\": \"#/type\"\n  },\n  {\n    \"instancePath\": \"/0/pre_tasks\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array,null\",\n    \"params\": {\n      \"type\": [\n        \"array\",\n        \"null\"\n      ]\n    },\n    \"schemaPath\": \"#/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array,null\",\n    \"params\": {\n      \"type\": [\n        \"array\",\n        \"null\"\n      ]\n    },\n    \"schemaPath\": \"#/type\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Presenting check-jsonschema Validation Results in JSON\nDESCRIPTION: This snippet displays the JSON output from check-jsonschema, another JSON schema validation tool. It reports a failure status and provides details about the error, including the filename, path, and a message indicating that 'directive' was an unexpected additional property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/galaxy_1/galaxy.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/galaxy_1/galaxy.yml\",\n      \"path\": \"$.manifest\",\n      \"message\": \"Additional properties are not allowed ('directive' was unexpected)\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty String Compare Rule in Ansible-lint\nDESCRIPTION: Configuration snippet showing how to enable the empty-string-compare rule in ansible-lint configuration file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/rules/empty_string_compare.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenable_list:\n  - empty-string-compare\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors in JSON\nDESCRIPTION: This snippet shows the JSON output from ajv, a popular JSON schema validator. It reports an error for an additional property 'directive' in the 'manifest' object, which is not allowed according to the schema.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/galaxy_1/galaxy.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/manifest\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"directive\"\n    },\n    \"schemaPath\": \"#/properties/manifest/additionalProperties\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV JSON Schema Validation Errors for Ansible Lint Changelog\nDESCRIPTION: This JSON output from 'ajv' shows a schema validation error. It indicates that the 'namespace' field for a lookup plugin in version 1.0.0 of the changelog must be null, but it isn't.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/invalid-plugin-namespace/changelogs/changelog.yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/releases/1.0.0/plugins/lookup/0/namespace\",\n    \"keyword\": \"type\",\n    \"message\": \"must be null\",\n    \"params\": {\n      \"type\": \"null\"\n    },\n    \"schemaPath\": \"#/$defs/plugin-descriptions/items/properties/namespace/type\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV JSON Schema Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON array contains validation errors from AJV for an Ansible playbook. It highlights issues such as missing required properties, incorrect types for 'vars_files', and additional unexpected properties.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/var_files_list_number.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/patternProperties/vars/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files/0\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/properties/vars_files/items/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files/0\",\n    \"keyword\": \"type\",\n    \"message\": \"must be array\",\n    \"params\": {\n      \"type\": \"array\"\n    },\n    \"schemaPath\": \"#/properties/vars_files/items/oneOf/1/type\"\n  },\n  {\n    \"instancePath\": \"/0/vars_files/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/properties/vars_files/items/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Ansible Keyword Documentation YAML Output\nDESCRIPTION: This snippet shows the YAML output of the 'ansible-doc -t keyword' command for the 'failed_when' keyword. It demonstrates how to determine if a field uses implicit or explicit templating.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/schemas/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfailed_when:\n  applies_to:\n    - Task\n  description:\n    Conditional expression that overrides the task's normal 'failed' status.\n  priority: 0\n  template: implicit\n  type: list\n```\n\n----------------------------------------\n\nTITLE: Defining AnsibleParserError in Markdown\nDESCRIPTION: This snippet defines the AnsibleParserError in markdown format. It explains that this error occurs when the Ansible parser fails, usually indicating an invalid file.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/src/ansiblelint/_internal/parser-error.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# parser-error\n\n**AnsibleParserError.**\n\nAnsible parser fails; this usually indicates an invalid file.\n```\n\n----------------------------------------\n\nTITLE: Check-jsonschema Validation Error Output\nDESCRIPTION: Example error output from check-jsonschema tool showing a validation failure. The error details include the filename, path, and specific message about the unexpected 'release' property.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/unknown-keys/changelogs/changelog.yaml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/changelogs/unknown-keys/changelogs/changelog.yaml\",\n      \"path\": \"$\",\n      \"message\": \"Additional properties are not allowed ('release' was unexpected)\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Version Specification in galaxy.yml\nDESCRIPTION: Example of a galaxy.yml file with an incorrect version specification (< 1.0.0) that violates the semantic versioning requirement.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/docs/rules/galaxy-version-incorrect.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: \"description\"\nnamespace: \"namespace_name\"\nname: \"collection_name\"\nversion: \"0.0.1\" # <- version key is not greater than or equal to '1.0.0'.\nreadme: \"README.md\"\nauthors:\n  - \"Author1\"\n  - \"Author2 (https://author2.example.com)\"\n  - \"Author3 <author3@example.com>\"\ndependencies:\n  \"other_namespace.collection1\": \">=1.0.0\"\n  \"other_namespace.collection2\": \">=2.0.0,<3.0.0\"\n  \"anderson55.my_collection\": \"*\" # note: \"*\" selects the highest version available\nlicense:\n  - \"MIT\"\ntags:\n  - demo\n  - collection\nrepository: \"https://www.github.com/my_org/my_collection\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for ansible-lint\nDESCRIPTION: This snippet defines Git attributes for the ansible-lint project. It uses Git's attribute expansion to populate placeholders with commit hash, date, description, and reference names.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/.git_archival.txt#2025-04-22_snippet_0\n\nLANGUAGE: gitattributes\nCODE:\n```\nnode: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true)$\nref-names: $Format:%D$\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook in JSON\nDESCRIPTION: This snippet shows the output of check-jsonschema validation for an Ansible playbook. It provides a summary of validation failures, including the filename, error messages, and nested sub-errors.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/failed_when.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/failed_when.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'tasks': [{'name': 'foo', 'ansible.builtin.debug': {'msg': 'foo!'}, 'failed_when': 123}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].failed_when\",\n        \"message\": \"123 is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 9,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'tasks': [{'name': 'foo', 'ansible.builtin.debug': {'msg': 'foo!'}, 'failed_when': 123}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'name': 'foo', 'ansible.builtin.debug': {'msg': 'foo!'}, 'failed_when': 123} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].failed_when\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].failed_when\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].failed_when\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].failed_when\",\n          \"message\": \"123 is not of type 'array'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation Errors for Ansible Playbook\nDESCRIPTION: Output from the check-jsonschema tool showing validation failure for an Ansible playbook. The main error is in the gather_subset field which contains a numeric value (1) instead of one of the allowed string values like 'all', 'min', etc. The output includes both high-level errors and detailed sub-errors with paths and specific validation failures.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/gather_subset3.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/gather_subset3.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'hosts': 'localhost', 'gather_subset': [1], 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'gather_subset', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].gather_subset[0]\",\n        \"message\": \"1 is not one of ['all', 'min', 'all_ipv4_addresses', 'all_ipv6_addresses', 'apparmor', 'architecture', 'caps', 'chroot,cmdline', 'date_time', 'default_ipv4', 'default_ipv6', 'devices', 'distribution', 'distribution_major_version', 'distribution_release', 'distribution_version', 'dns', 'effective_group_ids', 'effective_user_id', 'env', 'facter', 'fips', 'hardware', 'interfaces', 'is_chroot', 'iscsi', 'kernel', 'local', 'lsb', 'machine', 'machine_id', 'mounts', 'network', 'ohai', 'os_family', 'pkg_mgr', 'platform', 'processor', 'processor_cores', 'processor_count', 'python', 'python_version', 'real_user_id', 'selinux', 'service_mgr', 'ssh_host_key_dsa_public', 'ssh_host_key_ecdsa_public', 'ssh_host_key_ed25519_public', 'ssh_host_key_rsa_public', 'ssh_host_pub_keys', 'ssh_pub_keys', 'system', 'system_capabilities', 'system_capabilities_enforced', 'user', 'user_dir', 'user_gecos', 'user_gid', 'user_id', 'user_shell', 'user_uid', 'virtual', 'virtualization_role', 'virtualization_type']\"\n      },\n      \"num_sub_errors\": 8,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'gather_subset', 'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'hosts': 'localhost', 'gather_subset': [1], 'tasks': [{'ansible.builtin.debug': {'msg': 'foo'}}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].gather_subset[0]\",\n          \"message\": \"1 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].gather_subset[0]\",\n          \"message\": \"1 is not one of ['all', 'min', 'all_ipv4_addresses', 'all_ipv6_addresses', 'apparmor', 'architecture', 'caps', 'chroot,cmdline', 'date_time', 'default_ipv4', 'default_ipv6', 'devices', 'distribution', 'distribution_major_version', 'distribution_release', 'distribution_version', 'dns', 'effective_group_ids', 'effective_user_id', 'env', 'facter', 'fips', 'hardware', 'interfaces', 'is_chroot', 'iscsi', 'kernel', 'local', 'lsb', 'machine', 'machine_id', 'mounts', 'network', 'ohai', 'os_family', 'pkg_mgr', 'platform', 'processor', 'processor_cores', 'processor_count', 'python', 'python_version', 'real_user_id', 'selinux', 'service_mgr', 'ssh_host_key_dsa_public', 'ssh_host_key_ecdsa_public', 'ssh_host_key_ed25519_public', 'ssh_host_key_rsa_public', 'ssh_host_pub_keys', 'ssh_pub_keys', 'system', 'system_capabilities', 'system_capabilities_enforced', 'user', 'user_dir', 'user_gecos', 'user_gid', 'user_id', 'user_shell', 'user_uid', 'virtual', 'virtualization_role', 'virtualization_type']\"\n        },\n        {\n          \"path\": \"$[0].gather_subset[0]\",\n          \"message\": \"1 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].gather_subset[0]\",\n          \"message\": \"1 is not one of ['!all', '!min', '!all_ipv4_addresses', '!all_ipv6_addresses', '!apparmor', '!architecture', '!caps', '!chroot,cmdline', '!date_time', '!default_ipv4', '!default_ipv6', '!devices', '!distribution', '!distribution_major_version', '!distribution_release', '!distribution_version', '!dns', '!effective_group_ids', '!effective_user_id', '!env', '!facter', '!fips', '!hardware', '!interfaces', '!is_chroot', '!iscsi', '!kernel', '!local', '!lsb', '!machine', '!machine_id', '!mounts', '!network', '!ohai', '!os_family', '!pkg_mgr', '!platform', '!processor', '!processor_cores', '!processor_count', '!python', '!python_version', '!real_user_id', '!selinux', '!service_mgr', '!ssh_host_key_dsa_public', '!ssh_host_key_ecdsa_public', '!ssh_host_key_ed25519_public', '!ssh_host_key_rsa_public', '!ssh_host_pub_keys', '!ssh_pub_keys', '!system', '!system_capabilities', '!system_capabilities_enforced', '!user', '!user_dir', '!user_gecos', '!user_gid', '!user_id', '!user_shell', '!user_uid', '!virtual', '!virtualization_role', '!virtualization_type']\"\n        },\n        {\n          \"path\": \"$[0].gather_subset[0]\",\n          \"message\": \"1 is not of type 'string'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying check-jsonschema Validation Results for Ansible Playbook\nDESCRIPTION: This JSON object contains the validation results from check-jsonschema for an Ansible playbook. It provides a summary of validation failures, including detailed error messages and paths to the problematic parts of the playbook.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/ignore-unreachable.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/ignore-unreachable.yml\",\n      \"path\": \"$[0]\",\n      \"message\": \"{'name': 'Test', 'hosts': 'localhost', 'tasks': [{'name': 'Debug', 'ansible.builtin.debug': {'msg': 'ignore_unreachable should not be a string'}, 'ignore_unreachable': 'yes'}, {'name': 'Debug', 'ansible.builtin.debug': {'msg': 'jinja evaluation should not be a string'}, 'ignore_unreachable': 123}]} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$[0]\",\n        \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$[0].tasks[0].ignore_unreachable\",\n        \"message\": \"'yes' is not of type 'boolean'\"\n      },\n      \"num_sub_errors\": 19,\n      \"sub_errors\": [\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'hosts', 'tasks' do not match any of the regexes: '^(ansible\\\\.builtin\\\\.)?import_playbook$', 'name', 'tags', 'vars', 'when'\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"{'name': 'Test', 'hosts': 'localhost', 'tasks': [{'name': 'Debug', 'ansible.builtin.debug': {'msg': 'ignore_unreachable should not be a string'}, 'ignore_unreachable': 'yes'}, {'name': 'Debug', 'ansible.builtin.debug': {'msg': 'jinja evaluation should not be a string'}, 'ignore_unreachable': 123}]} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'ansible.builtin.import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0]\",\n          \"message\": \"'import_playbook' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"{'name': 'Debug', 'ansible.builtin.debug': {'msg': 'ignore_unreachable should not be a string'}, 'ignore_unreachable': 'yes'} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_unreachable\",\n          \"message\": \"'yes' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_unreachable\",\n          \"message\": \"'yes' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_unreachable\",\n          \"message\": \"'yes' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_unreachable\",\n          \"message\": \"'yes' is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_unreachable\",\n          \"message\": \"'yes' is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[0].ignore_unreachable\",\n          \"message\": \"'yes' does not match '^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$'\"\n        },\n        {\n          \"path\": \"$[0].tasks[1]\",\n          \"message\": \"{'name': 'Debug', 'ansible.builtin.debug': {'msg': 'jinja evaluation should not be a string'}, 'ignore_unreachable': 123} is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[1].ignore_unreachable\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[1].ignore_unreachable\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[1].ignore_unreachable\",\n          \"message\": \"123 is not of type 'string'\"\n        },\n        {\n          \"path\": \"$[0].tasks[1]\",\n          \"message\": \"'block' is a required property\"\n        },\n        {\n          \"path\": \"$[0].tasks[1].ignore_unreachable\",\n          \"message\": \"123 is not valid under any of the given schemas\"\n        },\n        {\n          \"path\": \"$[0].tasks[1].ignore_unreachable\",\n          \"message\": \"123 is not of type 'boolean'\"\n        },\n        {\n          \"path\": \"$[0].tasks[1].ignore_unreachable\",\n          \"message\": \"123 is not of type 'string'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv Validation Errors for Ansible Playbook\nDESCRIPTION: This JSON snippet shows multiple validation errors from ajv for an Ansible playbook. The errors indicate issues with required properties, additional properties, and incorrect data types.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/environment.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"environment\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/environment\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/environment\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/environment\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Presenting check-jsonschema Validation Results in JSON\nDESCRIPTION: This snippet displays the JSON output from check-jsonschema, showing a validation failure. It specifies that the 'releases' property in the changelog.yaml file is not of the expected object type.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/changelogs/no-semver/changelogs/changelog.yaml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/changelogs/no-semver/changelogs/changelog.yaml\",\n      \"path\": \"$.releases\",\n      \"message\": \"'foo' is not of type 'object'\",\n      \"has_sub_errors\": false\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying AJV Validation Errors for Ansible Playbook in JSON\nDESCRIPTION: This snippet shows the output from AJV (Another JSON Schema Validator) identifying multiple schema violations in an Ansible playbook. Errors include missing required properties, additional unexpected properties, and incorrect value types.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/ignore_errors.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'ansible.builtin.import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"ansible.builtin.import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/0/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'import_playbook'\",\n    \"params\": {\n      \"missingProperty\": \"import_playbook\"\n    },\n    \"schemaPath\": \"#/oneOf/1/required\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"hosts\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"tasks\"\n    },\n    \"schemaPath\": \"#/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"required\",\n    \"message\": \"must have required property 'block'\",\n    \"params\": {\n      \"missingProperty\": \"block\"\n    },\n    \"schemaPath\": \"#/required\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_errors\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_errors\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_errors\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_errors\",\n    \"keyword\": \"type\",\n    \"message\": \"must be boolean\",\n    \"params\": {\n      \"type\": \"boolean\"\n    },\n    \"schemaPath\": \"#/oneOf/0/type\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_errors\",\n    \"keyword\": \"pattern\",\n    \"message\": \"must match pattern \\\"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\\\"\",\n    \"params\": {\n      \"pattern\": \"^\\\\{[\\\\{%](.|[\\r\\n])*[\\\\}%]\\\\}$\"\n    },\n    \"schemaPath\": \"#/$defs/full-jinja/pattern\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0/ignore_errors\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/oneOf\"\n  },\n  {\n    \"instancePath\": \"/0/tasks/0\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/items/anyOf\"\n  },\n  {\n    \"instancePath\": \"/0\",\n    \"keyword\": \"oneOf\",\n    \"message\": \"must match exactly one schema in oneOf\",\n    \"params\": {\n      \"passingSchemas\": null\n    },\n    \"schemaPath\": \"#/items/oneOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Check-jsonschema Validation Output for Invalid Ansible Variable\nDESCRIPTION: Output from check-jsonschema tool showing detailed errors for an Ansible variable named 'foo-bar'. The error messages explain that variable names with dashes violate the naming pattern requirements in Ansible, which must follow specific regex patterns.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/dash-in-var-name.yml.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"fail\",\n  \"successes\": [],\n  \"errors\": [\n    {\n      \"filename\": \"negative_test/playbooks/vars/dash-in-var-name.yml\",\n      \"path\": \"$\",\n      \"message\": \"{'foo-bar': '...'} is not valid under any of the given schemas\",\n      \"has_sub_errors\": true,\n      \"best_match\": {\n        \"path\": \"$\",\n        \"message\": \"{'foo-bar': '...'} is not of type 'string'\"\n      },\n      \"best_deep_match\": {\n        \"path\": \"$\",\n        \"message\": \"'foo-bar' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n      },\n      \"num_sub_errors\": 2,\n      \"sub_errors\": [\n        {\n          \"path\": \"$\",\n          \"message\": \"'foo-bar' does not match any of the regexes: '^(?!(False|None|True|and|any_errors_fatal|as|assert|async|await|become|become_exe|become_flags|become_method|become_user|break|check_mode|class|collections|connection|continue|debugger|def|del|diff|elif|else|environment|except|fact_path|finally|for|force_handlers|from|gather_facts|gather_subset|gather_timeout|global|handlers|hosts|if|ignore_errors|ignore_unreachable|import|in|is|lambda|max_fail_percentage|module_defaults|name|no_log|nonlocal|not|or|order|pass|port|post_tasks|pre_tasks|raise|remote_user|return|roles|run_once|serial|strategy|tags|tasks|throttle|timeout|try|vars|vars_files|vars_prompt|while|with|yield)$)[a-zA-Z_][\\\\\\\\w]*$'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'foo-bar': '...'} is not of type 'string'\"\n        },\n        {\n          \"path\": \"$\",\n          \"message\": \"{'foo-bar': '...'} is not of type 'null'\"\n        }\n      ]\n    }\n  ],\n  \"parse_errors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ajv JSON Schema Validation Errors\nDESCRIPTION: This snippet shows the error output from ajv when validating against a schema that expects an object, string, or null but received a different type. The errors include details about the validation failure, the expected types, and the schema paths.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/list.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be object\",\n    \"params\": {\n      \"type\": \"object\"\n    },\n    \"schemaPath\": \"#/anyOf/0/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be null\",\n    \"params\": {\n      \"type\": \"null\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: AJV Schema Validation Errors for Ansible Variable with Dash\nDESCRIPTION: JSON output from ajv validator showing validation errors for a variable named 'foo-bar'. The errors indicate the variable violates the schema by having an additional property not allowed and failing type validation requirements.\nSOURCE: https://github.com/ansible/ansible-lint/blob/main/test/schemas/negative_test/playbooks/vars/dash-in-var-name.yml.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"additionalProperties\",\n    \"message\": \"must NOT have additional properties\",\n    \"params\": {\n      \"additionalProperty\": \"foo-bar\"\n    },\n    \"schemaPath\": \"#/anyOf/0/additionalProperties\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be string\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"schemaPath\": \"#/anyOf/1/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"type\",\n    \"message\": \"must be null\",\n    \"params\": {\n      \"type\": \"null\"\n    },\n    \"schemaPath\": \"#/anyOf/2/type\"\n  },\n  {\n    \"instancePath\": \"\",\n    \"keyword\": \"anyOf\",\n    \"message\": \"must match a schema in anyOf\",\n    \"params\": {},\n    \"schemaPath\": \"#/anyOf\"\n  }\n]\n```"
  }
]