[
  {
    "owner": "dfhack",
    "repo": "dfhack",
    "content": "TITLE: Using createitem Command with Material Specification\nDESCRIPTION: Creates a specified number of items with the given material. The syntax requires item type and material separated by space, with an optional count parameter.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/createitem.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncreateitem <item> <material> [<count>]\n```\n\n----------------------------------------\n\nTITLE: Making Scripts Importable with reqscript\nDESCRIPTION: Example of how to structure a script to be safely importable using reqscript(). Shows the required module declaration and conditional execution pattern to avoid side effects when imported.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_195\n\nLANGUAGE: Lua\nCODE:\n```\n--@ module = true\n\n-- (function definitions)\nif dfhack_flags.module then\n    return\nend\n-- (main script code with side-effects)\n```\n\n----------------------------------------\n\nTITLE: Map Access Methods Overview - Multiple Languages\nDESCRIPTION: Shows the three main ways to access map data in DFHack: C++ modules (Maps and MapCache), Lua module (dfhack.maps), and direct access through the world global variable.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/api/Maps.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* C++: the Maps and MapCache modules\n* Lua: the dfhack.maps module\n* All languages: the map field of the world global contains raw map data\n  when the world is loaded.\n```\n\n----------------------------------------\n\nTITLE: Item Management API Functions - DFHack Lua\nDESCRIPTION: Collection of functions for manipulating and querying item properties, including finding subtypes, managing ownership, location, and trade status.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_84\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.items.findSubtype(string)\ndfhack.items.isCasteMaterial(item_type)\ndfhack.items.getSubtypeCount(item_type)\ndfhack.items.setOwner(item,unit)\ndfhack.items.getContainer(item)\ndfhack.items.moveToGround(item,pos)\n```\n\n----------------------------------------\n\nTITLE: DFHack Module Definition - Lua\nDESCRIPTION: Pattern for creating DFHack Lua modules with reload support.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_115\n\nLANGUAGE: Lua\nCODE:\n```\nlocal _ENV = mkmodule('foo')\n...\nreturn _ENV\n```\n\n----------------------------------------\n\nTITLE: DFHack ZScreen Tool Window Implementation Example\nDESCRIPTION: Complete example showing how to implement a resizable tool window using the ZScreen framework. Includes window class definition, screen handling, and view management.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_168\n\nLANGUAGE: lua\nCODE:\n```\nlocal gui = require('gui')\nlocal widgets = require('gui.widgets')\n\nMyWindow = defclass(MyWindow, widgets.Window)\nMyWindow.ATTRS {\n    frame_title='My Window',\n    frame={w=50, h=45},\n    resizable=true, -- if resizing makes sense for your dialog\n    resize_min={w=50, h=20}, -- try to allow users to shrink your windows\n}\n\nfunction MyWindow:init()\n    self:addviews{\n        -- add subview widgets here\n    }\nend\n\n-- implement if you need to handle custom input\n--function MyWindow:onInput(keys)\n--    return MyWindow.super.onInput(self, keys)\n--end\n\nMyScreen = defclass(MyScreen, gui.ZScreen)\nMyScreen.ATTRS {\n    focus_path='myscreen',\n    -- set pause and passthrough attributes as appropriate\n    -- (but most tools can use the defaults)\n}\n\nfunction MyScreen:init()\n    self:addviews{MyWindow{}}\nend\n\nfunction MyScreen:onDismiss()\n    view = nil\nend\n\nview = view and view:raise() or MyScreen{}:show()\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple Mechanical Workshop in building-hacks\nDESCRIPTION: Example of how to register a mechanical workshop using the building-hacks plugin. This shows how to set up a simple bone grinder with power consumption and animation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_183\n\nLANGUAGE: lua\nCODE:\n```\nrequire('plugins.building-hacks').registerBuilding{name=\"BONE_GRINDER\",\n  consume=15,\n  gears={x=0,y=0}, --connection point\n  animate={\n    isMechanical=true, --animate the same conn. point as vanilla gear\n    frames={\n    {{x=0,y=0,42,7,0,0}}, --first frame, 1 changed tile\n    {{x=0,y=0,15,7,0,0}} -- second frame, same\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Command-line Arguments in Lua with argparse.processArgs\nDESCRIPTION: Demonstrates basic command-line argument processing using the argparse.processArgs function. This function handles simple option parsing with optional validation of argument names.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_121\n\nLANGUAGE: lua\nCODE:\n```\nargparse.processArgs(args, utils.invert{'opt1', 'opt2', 'opt3'})\n```\n\n----------------------------------------\n\nTITLE: Persisting DFHack Script State\nDESCRIPTION: Demonstrates how to persist and load script state tied to a savegame. It uses dfhack.persistent to save and retrieve data, and hooks into the state change event to load data when a game is loaded.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_200\n\nLANGUAGE: Lua\nCODE:\n```\nlocal utils = require('utils')\n\nlocal GLOBAL_KEY = 'my-script-name'\n\nlocal function get_default_state()\n    return {\n        -- add default config here, e.g.,\n        -- enabled=false,\n    }\nend\n\nstate = state or get_default_state()\n\ndfhack.onStateChange[GLOBAL_KEY] = function(sc)\n    if sc ~= SC_MAP_LOADED or df.global.gamemode ~= df.game_mode.DWARF then\n        return\n    end\n    -- retrieve state saved in game. merge with default state so config\n    -- saved from previous versions can pick up newer defaults.\n    state = get_default_state()\n    utils.assign(state, dfhack.persistent.getSiteData(GLOBAL_KEY, state))\nend\n\n-- to be called when global state changes that needs to be persisted\nlocal function persist_state()\n    dfhack.persistent.saveSiteData(GLOBAL_KEY, state)\nend\n```\n\n----------------------------------------\n\nTITLE: DFHack Mod Main File Structure in Lua\nDESCRIPTION: This code snippet demonstrates the structure of a main mod file in DFHack. It includes module declarations, help text, state management, enable/disable functionality, and event handling for map loading and unloading.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\n-- main file for the example-mod mod\n\n--@ module=true\n--@ enable=true\n\n--[====[example-mod\n===========\n\nTags: fort | gameplay\n\nShort one-sentence description.\n\nLonger description ...\n\nUsage\n-----\n\n    enable example-mod\n    disable example-mod\n]====]\n\nlocal eventful = require('plugins.eventful')\nlocal repeatUtil = require('repeat-util')\nlocal utils = require('utils')\n\nlocal moduleA = reqscript('internal/example-mod/module-a')\nlocal moduleB = reqscript('internal/example-mod/module-b')\n\nlocal GLOBAL_KEY = 'example-mod'\n\nlocal function get_default_state()\n    return {\n        enabled=false,\n        somevar=0,\n        somesubtable={\n            someothervar=0,\n        },\n    }\nend\nstate = state or get_default_state()\n\nfunction isEnabled()\n    return state.enabled\nend\n\nlocal function persist_state()\n    dfhack.persistent.saveSiteData(GLOBAL_KEY, state)\nend\n\nlocal function do_enable()\n    moduleA.onEnable()\n    moduleB.onEnable()\n\n    repeatUtil.scheduleEvery(GLOBAL_KEY, 1000, 'ticks', function()\n        moduleA.cycle()\n        moduleB.cycle()\n    end)\n\n    eventful.onProjItemCheckMovement[GLOBAL_KEY] =\n        moduleB.onProjItemCheckMovement\n    eventful.onProjUnitCheckImpact[GLOBAL_KEY] =\n        moduleB.onProjUnitCheckImpact\nend\n\nlocal function do_disable()\n    moduleA.onDisable()\n    moduleB.onDisable()\n\n    repeatUtil.cancel(GLOBAL_KEY)\n\n    eventful.onProjItemCheckMovement[GLOBAL_KEY] = nil\n    eventful.onProjUnitCheckImpact[GLOBAL_KEY] = nil\nend\n\ndfhack.onStateChange[GLOBAL_KEY] = function(sc)\n    if sc == SC_MAP_UNLOADED then\n        do_disable()\n        dfhack.onStateChange[GLOBAL_KEY] = nil\n        return\n    end\n\n    if sc ~= SC_MAP_LOADED or not dfhack.world.isFortressMode() then\n        return\n    end\n\n    state = get_default_state()\n    utils.assign(state, dfhack.persistent.getSiteData(GLOBAL_KEY, state))\n    if state.enabled then\n        do_enable()\n    end\nend\n\nif dfhack_flags.module then\n    return\nend\n\nif not dfhack_flags.enable then\n    print(dfhack.script_help())\n    print()\n    print(('Example mod is currently %s'):format(\n            enabled and 'enabled' or 'disabled'))\n    return\nend\n\nif dfhack_flags.enable_state then\n    state.enabled = true\n    do_enable()\nelse\n    state.enabled = false\n    do_disable()\nend\n\npersist_state()\n```\n\n----------------------------------------\n\nTITLE: Implementing Pegasus Boots Functionality in DFHack Lua\nDESCRIPTION: This function implements the logic for 'pegasus boots' in DFHack. It iterates through active units, checks for worn pegasus boots, and reduces foot movement timers for units not on the ground. Note that this implementation is inefficient and should be optimized for real use.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal function do_pegasus()\n    for _,unit in ipairs(df.global.world.units.active) do\n        local amount = 0\n        for _,inv_entry in ipairs(unit.inventory) do\n            if inv_entry.mode == df.unit_inventory_item.T_mode.Worn then\n                local reduction = customRawTokens.getToken(\n                        inv_entry.item,\n                        'PEGASUS_BOOTS_MOD_FOOT_MOVEMENT_TIMER_REDUCTION_PER_TICK')\n                amount = amount + (tonumber(reduction) or 0)\n            end\n        end\n        -- Subtract amount from on-foot movement timers if not on ground\n        if not unit.flags1.on_ground then\n            dfhack.units.subtractActionTimers(unit, amount,\n                    df.unit_action_type_group.MovementFeet)\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Building Management Functions in DFHack\nDESCRIPTION: Comprehensive API for working with buildings, including creation, modification, size calculations, and content management.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_89\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.buildings.getGeneralRef(building, type)\ndfhack.buildings.getSpecificRef(building, type)\ndfhack.buildings.getOwner(civzone)\ndfhack.buildings.setOwner(civzone,unit)\ndfhack.buildings.getName(building)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit to Squad in DFHack Lua API\nDESCRIPTION: Adds a unit to a squad at a specific position, setting unit military info and squad position info. Cannot be used to set squad leaders and has several validation checks for proper usage.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_82\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.military.addToSquad(unit_id, squad_id, squad_pos)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Reaction to Workshop in Lua\nDESCRIPTION: Example of adding a custom reaction (tanning) to the leatherworks workshop using the eventful plugin. Demonstrates how to integrate reactions across different workshops.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_190\n\nLANGUAGE: Lua\nCODE:\n```\nb=require \"plugins.eventful\"\nb.addReactionToShop(\"TAN_A_HIDE\",\"LEATHERWORKS\")\n```\n\n----------------------------------------\n\nTITLE: DFHack Run Command Examples\nDESCRIPTION: Examples showing different ways to run DFHack commands using run_command function, demonstrating various parameter passing methods.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_31\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.run_command({'ls', 'quick'})\ndfhack.run_command('ls', 'quick')\ndfhack.run_command('ls quick')  -- not recommended\n```\n\n----------------------------------------\n\nTITLE: Modifying Siege Crossbow Fire Rate in DFHack Lua\nDESCRIPTION: This snippet modifies the fire rate of siege crossbows based on a custom token added to the item definition in the raws. It uses the onProjItemCheckMovement event to adjust the firer's think counter.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\neventful.onProjItemCheckMovement[GLOBAL_KEY] = function(projectile)\n    if projectile.distance_flown > 0 then\n        -- don't make this adjustment more than once\n        return\n    end\n\n    local firer = projectile.firer\n    if not firer then\n        return\n    end\n\n    local weapon = df.item.find(projectile.bow_id)\n    if not weapon then\n        return\n    end\n\n    local multiplier = tonumber(customRawTokens.getToken(\n            weapon.subtype,\n            'SIEGE_CROSSBOW_MOD_FIRE_RATE_MULTIPLIER')) or 1\n    firer.counters.think_counter = math.floor(\n            firer.counters.think_counter * multiplier)\nend\n```\n\n----------------------------------------\n\nTITLE: Memory Scanning and Comparison in DFHack\nDESCRIPTION: Functions for searching and comparing memory regions. Useful for finding specific patterns or detecting changes in memory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_110\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.internal.memscan(haystack,count,step,needle,nsize)\n```\n\n----------------------------------------\n\nTITLE: Changing Item Material Example\nDESCRIPTION: Example command showing how to change the material of all stone items under the cursor to granite.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changeitem.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchangeitem here m INORGANIC:GRANITE\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing JSON Configuration Files in DFHack Mods\nDESCRIPTION: Example of using the json module to store and retrieve global state for a mod that is not world-specific. The code demonstrates opening a JSON file and handling persistent configuration.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nlocal json = require('json')\nlocal scriptmanager = require('script-manager')\nlocal path = scriptmanager.getModStatePath('mymodname')\nconfig = config or json.open(path .. 'settings.json')\n\n-- modify state in the config.data table and persist it when it changes with\n-- config:write()\n```\n\n----------------------------------------\n\nTITLE: Address and Memory Manipulation in DFHack\nDESCRIPTION: Internal API functions for working with memory addresses and patching memory. These functions provide low-level access to the game's memory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_109\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.internal.patchMemory(dest,src,count)\n```\n\n----------------------------------------\n\nTITLE: Custom Reaction Handling in Lua with EventFul\nDESCRIPTION: Example of registering a custom reaction handler that spawns dragon breath after 100 ticks. Uses registerReaction to intercept a specific reaction and prevent native code execution.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_188\n\nLANGUAGE: Lua\nCODE:\n```\nb=require \"plugins.eventful\"\n\nb.registerReaction(\"LAY_BOMB\",function(reaction,unit,in_items,in_reag,out_items,call_native)\n  local pos=copyall(unit.pos)\n  -- spawn dragonbreath after 100 ticks\n  dfhack.timeout(100,\"ticks\",function() dfhack.maps.spawnFlow(pos,6,0,0,50000) end)\n  --do not call real item creation code\n  call_native.value=false\nend)\n```\n\n----------------------------------------\n\nTITLE: Implementing Enableable DFHack Script\nDESCRIPTION: Provides a template for creating an enableable DFHack script. It includes functions for checking if the script is enabled and handling enable/disable commands.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_199\n\nLANGUAGE: Lua\nCODE:\n```\n--@enable = true\n--@module = true\n\nenabled = enabled or false\nfunction isEnabled()\n    return enabled\nend\n\n-- (function definitions...)\n\nif dfhack_flags.enable then\n    if dfhack_flags.enable_state then\n        start()\n        enabled = true\n    else\n        stop()\n        enabled = false\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Painter Class for Drawing with Clipping and State Tracking\nDESCRIPTION: The Painter class extends ViewRect to provide a stateful drawing interface with cursor position tracking, pen state management, and clipping. It includes methods for drawing text and shapes within the defined viewport.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_163\n\nLANGUAGE: lua\nCODE:\n```\nPainter{ ..., pen = ..., key_pen = ... }\n\nPainter.new(rect,pen)\nPainter.new_view(view_rect,pen)\nPainter.new_xy(x1,y1,x2,y2,pen)\nPainter.new_wh(x1,y1,width,height,pen)\n\npainter:isValidPos()\n\npainter:viewport(x,y,w,h)\n\npainter:cursor()\n\npainter:cursorX()\n\npainter:cursorY()\n\npainter:seek(x,y)\n\npainter:advance(dx,dy)\n\npainter:newline([dx])\n\npainter:pen(...)\n\npainter:color(fg[,bold[,bg]])\n\npainter:key_pen(...)\n\npainter:map(to_map)\n\npainter:clear()\n\npainter:fill(x1,y1,x2,y2[,...]) or painter:fill(rect[,...])\n\npainter:char([char[, ...]])\n```\n\n----------------------------------------\n\nTITLE: Usage Documentation Format - Option 2 with Descriptive List\nDESCRIPTION: Shows an alternative way to document command usage with each syntax variation followed by an indented description of what that particular format does.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Documentation.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nUsage\n-----\n\n``build-now [<options>]``\n    Scan the entire map and build all unsuspended constructions\n    and buildings.\n``build-now here [<options>]``\n    Build the unsuspended construction or building under the\n    cursor.\n``build-now [<pos> [<pos>]] [<options>]``\n    Build all unsuspended constructions within the specified\n    coordinate box.\n\nThe ``<pos>`` parameters are specified as...\n```\n\n----------------------------------------\n\nTITLE: Basic Dig Commands Usage\nDESCRIPTION: Command syntax for basic digging operations including vein digging, layer digging, and circle digging with priority options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/dig.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-command\nCODE:\n```\ndigv [x] [-p<number>]\ndigvx [-p<number>]\ndigl [x] [undo] [-p<number>]\ndiglx [-p<number>]\ndigcircle [<diameter>] [<solidity>] [<action>] [<designation>] [-p<number>]\ndigtype [<designation>] [-p<number>] [--zup|-u] [--zdown|-zu] [--cur-zlevel|-z] [--hidden|-h] [--no-auto|-a]\ndigexp [<pattern>] [<filter>] [-p<number>]\n```\n\n----------------------------------------\n\nTITLE: TextArea Function Documentation - Lua\nDESCRIPTION: Core methods of the TextArea widget class for text content manipulation and cursor control.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_173\n\nLANGUAGE: lua\nCODE:\n```\ntextarea:getText()\ntextarea:setText(text)\ntextarea:getCursor()\ntextarea:setCursor(cursor)\ntextarea:scrollToCursor()\ntextarea:clearHistory()\n```\n\n----------------------------------------\n\nTITLE: Revealing Caverns with the Reveal Plugin\nDESCRIPTION: Example of using the reveal plugin's unhideFlood function to reveal a hidden cavern starting from specified coordinates. This function processes adjacent hidden tiles, revealing map sections.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_191\n\nLANGUAGE: Lua\nCODE:\n```\nunhideFlood({x=25, y=38, z=140})\n```\n\n----------------------------------------\n\nTITLE: Custom Raw Token Handling with Reaction Events\nDESCRIPTION: Implementation of a reaction handler that processes custom raw tokens, specifically for transferring materials from reagents to product improvements. This demonstrates extending the game's crafting system with custom behaviors.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nlocal eventful = require('plugins.eventful')\nlocal customRawTokens = require('custom-raw-tokens')\n\nlocal GLOBAL_KEY = 'mymodname'\n\nlocal function reaction_handler(reaction, reactionProduct, unit,\n        inputItems, inputReagents, outputItems)\n    if not customRawTokens.getToken(reaction,\n        'SIEGE_CROSSBOW_MOD_TRANSFER_HANDLE_MATERIAL_TO_PRODUCT_IMPROVEMENT')\n    then\n        return\n    end\n\n    for i, reagent in ipairs(inputReagents) do\n        if reagent.code:startswith('handle') then\n            -- Found handle reagent\n            local item = inputItems[i]\n            local improv = df.itemimprovement_itemspecificst:new()\n            improv.mat_type, improv.mat_index = item.mat_type, item.mat_index\n            improv.type = df.itemimprovement_specific_type.HANDLE\n            outputItems[1].improvements:insert('#', improv)\n        end\n    end\nend\n\neventful.onReactionComplete[GLOBAL_KEY] = reaction_handler\n```\n\n----------------------------------------\n\nTITLE: Advanced Autochop Configuration Example\nDESCRIPTION: Example showing how to configure autochop for maintaining 500 logs, designating specific harvest areas, and keeping caravan paths clear.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autochop.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nenable autochop\nautochop target 500\nautochop chop TreeFarm\nautochop clearcut CaravanPath,OuterWall\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Status in DFHack Lua API\nDESCRIPTION: Functions to check various statuses of units, such as killed, sane, crazed, or ghost.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_34\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isKilled(unit) or dfhack.units.isGhost(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isKilled(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isSane(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isCrazed(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isGhost(unit)\n```\n\n----------------------------------------\n\nTITLE: DFHack Mod Internal Module Structure in Lua\nDESCRIPTION: This snippet shows the structure of an internal module file for a DFHack mod. It includes exported functions for enabling, disabling, and cycling the mod, as well as a local helper function.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\n--@ module=true\n\nfunction onEnable()\n    -- ...\nend\n\nfunction onDisable()\n    -- ...\nend\n\nlocal function usedByCycle(unit)\n    -- ...\nend\n\nfunction cycle()\n    for _,unit in ipairs(df.global.world.units.active) do\n        usedByCycle(unit)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Regrass Command Examples\nDESCRIPTION: Collection of example commands showing different ways to use the regrass tool, including targeting specific areas, using different options, and working with various grass types.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/regrass.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack-command\nCODE:\n```\nregrass\nregrass here\nregrass here 0,0,90 --zlevel\nregrass 0,0,100 19,19,119 --ashes --mud\nregrass 10,10,100 -baudnm\nregrass -f\nregrass -l\nregrass -zf -p 128\nregrass here -bnf -p \"dog's tooth grass\"\n```\n\n----------------------------------------\n\nTITLE: Loading a DFHack Lua Module\nDESCRIPTION: Demonstrates how to load and use a DFHack Lua module using the reqscript() function. This method supports circular dependencies and is optimized for performance.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_197\n\nLANGUAGE: Lua\nCODE:\n```\nlocal addThought = reqscript('add-thought')\naddThought.addEmotionToUnit(unit, ...)\n```\n\n----------------------------------------\n\nTITLE: Declaring DFHack Script as Enableable Module\nDESCRIPTION: Shows how to declare a DFHack script as both an enableable script and a module. This allows the script to be managed by the enable and disable commands.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_198\n\nLANGUAGE: Lua\nCODE:\n```\n--@enable = true\n--@module = true\n```\n\n----------------------------------------\n\nTITLE: Autoclothing Command Examples\nDESCRIPTION: Practical examples showing how to configure clothing requirements for citizens, including setting up skirt production and checking dress configurations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autoclothing.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nautoclothing cloth \"short skirt\" 1\nautoclothing cloth dress\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Help Text\nDESCRIPTION: A code snippet showing how to access and display a script's own documentation. This pattern can be used at the beginning of scripts to handle 'help' arguments.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_194\n\nLANGUAGE: Lua\nCODE:\n```\nlocal args = {...}\nif args[1] == 'help' then\n    print(script_help())\n    return\nend\n```\n\n----------------------------------------\n\nTITLE: Projectile Impact Event Handler in Lua\nDESCRIPTION: Example of using the eventful plugin to spawn dragon breath when a projectile impacts. Uses the onProjItemCheckImpact event to detect when projectiles hit something.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_189\n\nLANGUAGE: Lua\nCODE:\n```\nb=require \"plugins.eventful\"\nb.onProjItemCheckImpact.one=function(projectile)\n  -- you can check if projectile.item e.g., has correct material\n  dfhack.maps.spawnFlow(projectile.cur_pos,6,0,0,50000)\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Mod State Path in DFHack Scripts\nDESCRIPTION: Example of retrieving a mod's state directory path and using it to open a JSON configuration file. The path points to a guaranteed-to-exist directory for storing persistent state.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_118\n\nLANGUAGE: lua\nCODE:\n```\nlocal json = require('json')\nlocal scriptmanager = require('script-manager')\nlocal path = scriptmanager.getModStatePath('my_awesome_mod')\nconfig = config or json.open(path .. 'settings.json')\n```\n\n----------------------------------------\n\nTITLE: Getting Nominal Skill Level in DFHack Lua API\nDESCRIPTION: Retrieves the nominal skill level for the given unit. When use_rust is set to true, it subtracts the rust penalty from the skill level.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_51\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getNominalSkill(unit, skill[, use_rust])\n```\n\n----------------------------------------\n\nTITLE: Example Overlay Commands\nDESCRIPTION: Practical examples of overlay command usage including enabling all widgets, positioning specific widgets, and triggering widget actions\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/overlay.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\noverlay enable all\noverlay position hotkeys.menu\noverlay position dwarfmonitor.cursor -2 -3\noverlay position dwarfmonitor.cursor default\noverlay trigger hotkeys.menu\noverlay trigger notes.map_notes add Kitchen\n```\n\n----------------------------------------\n\nTITLE: Logistics Command Options\nDESCRIPTION: Available command line options for the logistics plugin, including stockpile selection and masterwork handling configurations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/logistics.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-s, --stockpile <name or number>[,<name or number>...]\n-m, --melt-masterworks\n```\n\n----------------------------------------\n\nTITLE: Hotspot Menu Widget Implementation in Lua for DFHack\nDESCRIPTION: A widget that creates a clickable hotspot in the corner of the screen. It detects mouse hover events and can launch a full screen interface in response.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/overlay-dev-guide.rst#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal overlay = require('plugins.overlay')\nlocal widgets = require('gui.widgets')\n\nHotspotMenuWidget = defclass(HotspotMenuWidget, overlay.OverlayWidget)\nHotspotMenuWidget.ATTRS{\n    desc='Sample widget that reacts to mouse hover.',\n    default_pos={x=-3,y=-3},\n    default_enabled=true,\n    frame={w=2, h=2},\n    hotspot=true,\n    viewscreens='dwarfmode',\n    overlay_onupdate_max_freq_seconds=0, -- check for mouseover every tick\n}\n\nfunction HotspotMenuWidget:init()\n    -- note this label only gets rendered on the associated viewscreen\n    -- (dwarfmode), but the hotspot is active on all screens\n    self:addviews{widgets.Label{text={'!!', NEWLINE, '!!'}}}    \n    self.mouseover = false\nend\n\nfunction HotspotMenuWidget:overlay_onupdate()\n    local hasMouse = self:getMousePos()\n    if hasMouse and not self.mouseover then -- only trigger on mouse entry\n        self.mouseover = true\n        return true\n    end\n    self.mouseover = hasMouse\nend\n\nfunction HotspotMenuWidget:overlay_trigger()\n    return MenuScreen{hotspot_frame=self.frame}:show()\nend\n\nOVERLAY_WIDGETS = {menu=HotspotMenuWidget}\n\nMenuScreen = defclass(MenuScreen, gui.ZScreen)\nMenuScreen.ATTRS{\n```\n\n----------------------------------------\n\nTITLE: Example Usage of changelayer Command\nDESCRIPTION: Examples demonstrating different ways to use the changelayer command, from simple layer conversion to more complex operations across multiple biomes and layers.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changelayer.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nchangelayer GRANITE\nchangelayer SAND_RED force\nchangelayer MARBLE all_biomes all_layers\n```\n\n----------------------------------------\n\nTITLE: Implementing an Overlay Trigger Function in Lua\nDESCRIPTION: Example of an overlay_trigger function that enables CLI or keybinding activation of an overlay widget, allowing dynamic updates to map notes through commands like 'overlay trigger notes.map_notes add Kitchen'.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/overlay-dev-guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction MyOverlayWidget:overlay_trigger(arg1, arg2)\n    if arg1 == 'add' then\n        -- Add a new note to the map\n        self:addSomething(arg2)\n    elseif arg1 == 'delete' then\n        self:deleteSomething(arg2)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Manager Orders in Dwarf Fortress with DFHack\nDESCRIPTION: This command imports a set of basic manager orders to keep your fortress stocked with necessities. It's an example of how DFHack can automate fort management tasks.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Quickstart.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n``orders import library/basic``\n```\n\n----------------------------------------\n\nTITLE: Screen Painting in Lua\nDESCRIPTION: Core screen manipulation functions for painting tiles, strings and rectangles to the game's display.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_94\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.screen.paintTile(pen,x,y[,char[,tile[,map]]])\ndfhack.screen.paintString(pen,x,y,text[,map])\ndfhack.screen.fillRect(pen,x1,y1,x2,y2[,map])\n```\n\n----------------------------------------\n\nTITLE: Complete External Script Documentation Example\nDESCRIPTION: Full example showing documentation header for an adventure mode inventory management script, including description, usage, examples and options sections.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Documentation.rst#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n-- Inventory management for adventurers.\n-- [====[\ngui/adv-inventory\n=================\n\nTags: adventure | items\n\nAllows you to quickly move items between containers. This\nincludes yourself and any followers you have.\n\nUsage\n-----\n\n    gui/adv-inventory [<options>]\n\nExamples\n--------\n\ngui/adv-inventory\n    Opens the GUI with nothing preselected\n\ngui/adv-inventory take-all\n    Opens the GUI with all container items already selected and\n    ready to move into the adventurer's inventory.\n\nOptions\n-------\n\ntake-all\n    Starts the GUI with container items pre-selected\n\ngive-all\n    Starts the GUI with your own items pre-selected\n]====]\n```\n\n----------------------------------------\n\nTITLE: Map Manipulation API Functions - DFHack Lua\nDESCRIPTION: Functions for accessing and modifying map data including block access, tile properties, and region information.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_86\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.maps.getSize()\ndfhack.maps.getTileBlock(coords)\ndfhack.maps.getTileType(coords)\ndfhack.maps.enableBlockUpdates(block[,flow[,temperature]])\ndfhack.maps.spawnFlow(pos,type,mat_type,mat_index,dimension)\n```\n\n----------------------------------------\n\nTITLE: ViewRect Class for Viewport and Clipping Management\nDESCRIPTION: The ViewRect class represents an on-screen rectangle with an independent clip area. It provides methods for coordinate transformation between global and local spaces, and for checking if points are within the clip area.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_162\n\nLANGUAGE: lua\nCODE:\n```\nViewRect{ rect = ..., clip_rect = ..., view_rect = ..., clip_view = ... }\n\nrect:isDefunct()\n\nrect:inClipGlobalXY(x,y)\n\nrect:inClipLocalXY(x,y)\n\nrect:localXY(x,y)\n\nrect:globalXY(x,y)\n\nrect:viewport(x,y,w,h) or rect:viewport(subrect)\n```\n\n----------------------------------------\n\nTITLE: Loading DFHack Textures in Lua\nDESCRIPTION: Example of how to load and use textures from the DFHack textures module, which provides access to default graphic assets.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_182\n\nLANGUAGE: lua\nCODE:\n```\nlocal textures = require('gui.textures')\nlocal first_border_texpos = textures.tp_border_thin(1)\n```\n\n----------------------------------------\n\nTITLE: Example Autolabor Configuration Commands\nDESCRIPTION: Sample commands showing how to configure various labor settings, including setting minimum workers, exact worker counts, and talent pool restrictions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autolabor.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nautolabor MINE 5\nautolabor CUT_GEM 1 1\nautolabor COOK 1 1 3\nautolabor FEED_WATER_CIVILIANS haulers\nautolabor CUTWOOD disable\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unit Information in DFHack Lua API\nDESCRIPTION: Functions to retrieve various information about units, such as identity, nemesis, and visible name.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_45\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getIdentity(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getNemesis(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.setNickname(unit, nick)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getVisibleName(unit)\n```\n\n----------------------------------------\n\nTITLE: UI Library Functions: Input Simulation and Rectangle Management\nDESCRIPTION: Core utility functions from the DFHack UI library for simulating input and managing screen rectangles, including functions to create dimension tables and check if points are within rectangles.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_161\n\nLANGUAGE: lua\nCODE:\n```\nsimulateInput(screen, keys...)\n\nmkdims_xy(x1,y1,x2,y2)\n\nmkdims_wh(x1,y1,width,height)\n\nget_interface_rect()\n\nget_interface_frame()\n\nis_in_rect(rect,x,y)\n\nblink_visible(delay)\n\ngetKeyDisplay(keycode)\n\ninvert_color(color, bold)\n```\n\n----------------------------------------\n\nTITLE: Using the forceequip Command in DFHack\nDESCRIPTION: Basic syntax and examples for using the forceequip command to move items into a unit's inventory. Shows various options including equipping specific body parts, selecting specific items, and overriding game rules.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/forceequip.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nforceequip [<options>]\n```\n\n----------------------------------------\n\nTITLE: Enabling and Showing DFHack Stocks Plugin\nDESCRIPTION: Commands to enable the stocks plugin and display the fortress-wide stock management screen. The 'enable stocks' command activates the plugin, while 'stocks show' brings up the stock management interface from any location in the game.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/stocks.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable stocks\nstocks show\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Token from Type Instance in DFHack Lua API\nDESCRIPTION: Retrieves the arguments of a custom token from a unit, entity, item, job, projectile, building, plant, or interaction instance. Gets the appropriate type definition first.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_153\n\nLANGUAGE: lua\nCODE:\n```\ncustomRawTokens.getToken(typeInstance, token)\n```\n\n----------------------------------------\n\nTITLE: Revealing Map in Dwarf Fortress with DFHack\nDESCRIPTION: Command to reveal all z-layers in fort and adventure mode. Optional parameters allow revealing HFS areas. The effect persists until unreveal is run.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/reveal.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``reveal [hell|demon]``\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Unit Data in DFHack Lua API\nDESCRIPTION: Functions to create new units and retrieve various unit data, such as caste information and attribute values.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_47\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.create(race, caste)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getCasteRaw(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getCasteRaw(race, caste)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getPhysicalAttrValue(unit, attr_type)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getMentalAttrValue(unit, attr_type)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.casteFlagSet(race, caste, flag)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getMiscTrait(unit, type[, create])\n```\n\n----------------------------------------\n\nTITLE: Creating Blueprints with DFHack\nDESCRIPTION: This command opens the blueprint interface, allowing players to save designs of room layouts or structures for future use.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Quickstart.rst#2025-04-21_snippet_4\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/blueprint\n```\n\n----------------------------------------\n\nTITLE: Changing Selected Item Properties\nDESCRIPTION: Modifies properties of an item selected in the 'k' list or inside a container/inventory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changeitem.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchangeitem [<options>]\n```\n\n----------------------------------------\n\nTITLE: Setting Production for Crafts and Raw Materials\nDESCRIPTION: Commands to set production rules for gold crafts, sand bags, and clay boulders. Maintains stocks of 15-20 for each item type.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/workflow.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nworkflow count CRAFTS//GOLD 20\nworkflow count POWDER_MISC/SAND 20\nworkflow count BOULDER/CLAY 20\n```\n\n----------------------------------------\n\nTITLE: Custom Mining Button with Hotkey Hint in Lua\nDESCRIPTION: Example demonstrating how to create a mining button with a custom hotkey hint and tile override functionality\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_180\n\nLANGUAGE: lua\nCODE:\n```\nwidgets.Label{\n    text=widgets.makeButtonLabelText{\n        chars={\n            {218, 196, 196, self.hint_char},\n            {179, '-', ')', 179},\n            {192, 196, 196, 217},\n        },\n        pens={\n            {COLOR_GRAY, COLOR_GRAY,  COLOR_GRAY, COLOR_RED},\n            {COLOR_GRAY, COLOR_BROWN, COLOR_GRAY, COLOR_GRAY},\n            {COLOR_GRAY, COLOR_GRAY,  COLOR_GRAY, COLOR_GRAY},\n        },\n        asset={page='INTERFACE_BITS', x=0, y=22},\n        tiles_override={{[4]=string.byte(self.hint_char)}},\n    },\n    on_click=self:callback('mining_menu'),\n}\n```\n\n----------------------------------------\n\nTITLE: File Listing and Directory Management in DFHack Lua\nDESCRIPTION: Functions for listing directory contents and managing directories. Includes both simple directory listing and recursive traversal with configurable depth.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_107\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.filesystem.listdir_recursive(path [, depth = 10[, include_prefix = true]])\n```\n\n----------------------------------------\n\nTITLE: Configuring Turkey Population Limits\nDESCRIPTION: Example command for setting population limits for turkeys, maintaining 7 kids (4 female, 3 male) and 3 adults (2 female, 1 male).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autobutcher.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nautobutcher target 4 3 2 1 BIRD_TURKEY\n```\n\n----------------------------------------\n\nTITLE: Dumping Lua Tables to Strings with dumper.DataDumper\nDESCRIPTION: Demonstrates the use of the third-party dumper module to convert Lua tables or other values to strings. This function is useful for debugging or serialization purposes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_125\n\nLANGUAGE: lua\nCODE:\n```\ndumper.DataDumper(value, varname, fastmode, ident, indent_step)\n```\n\n----------------------------------------\n\nTITLE: Using ZScreenModal for Dialog Windows in Lua\nDESCRIPTION: Reference to a ZScreen subclass specifically designed for creating modal dialog windows in Lua scripts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_55\n\nLANGUAGE: Lua\nCODE:\n```\ngui.ZScreenModal\n```\n\n----------------------------------------\n\nTITLE: DFHack Script Path Management\nDESCRIPTION: Functions for managing script paths in DFHack. Allows adding, removing, and querying script paths to control where DFHack looks for scripts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_111\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.internal.addScriptPath(path, search_before)\n```\n\n----------------------------------------\n\nTITLE: Using the Cleanowned Command in Dwarf Fortress\nDESCRIPTION: This snippet demonstrates the basic syntax for the cleanowned command, which confiscates and dumps owned items. The command can be run without parameters to handle rotten items and abandoned food, or with specific parameters to target different types of items.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/cleanowned.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncleanowned [<types>] [dryrun]\n```\n\n----------------------------------------\n\nTITLE: Selective Map Revealing in Dwarf Fortress with DFHack\nDESCRIPTION: Command to hide everything, then reveal tiles with a path to the cursor, selected unit, or a random citizen. Used for repairing accidentally saved revealed maps.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/reveal.rst#2025-04-21_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n``revflood``\n```\n\n----------------------------------------\n\nTITLE: Using the changelayer Command in DFHack\nDESCRIPTION: Syntax for the changelayer command that changes materials of geology layers. The command requires a material RAW ID and supports various options to control the scope and behavior of the changes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changelayer.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchangelayer <material RAW id> [<options>]\n```\n\n----------------------------------------\n\nTITLE: Example: Implementing Healing Armor with Custom Item Tokens\nDESCRIPTION: Example of iterating through a unit's inventory to find items with healing properties defined by custom tokens, and applying healing effects to the unit.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_160\n\nLANGUAGE: lua\nCODE:\n```\n-- (per unit every tick)\nlocal healAmount = 0\nfor _, entry in ipairs(unit.inventory) do\n    if entry.mode == 2 then -- Worn\n        healAmount = healAmount + tonumber((customRawTokens.getToken(entry.item, \"EXAMPLE_MOD_HEAL_AMOUNT\")) or 0)\n    end\nend\nunit.body.blood_count = math.min(unit.body.blood_max, unit.body.blood_count + healAmount)\n```\n\n----------------------------------------\n\nTITLE: Registering Event Callbacks with eventful API\nDESCRIPTION: Example of using the eventful API to register a callback for projectile movement events. This shows how to monitor specific game events and react to them.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal eventful = require('plugins.eventful')\n\nlocal GLOBAL_KEY = 'mymodname'\n\neventful.onProjItemCheckMovement[GLOBAL_KEY] = function(projectile)\n    print(projectile.cur_pos.x, projectile.cur_pos.y,\n          projectile.cur_pos.z)\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Widgets with DFHack Overlay Framework in Lua\nDESCRIPTION: This snippet demonstrates how to register widgets with the overlay framework by defining a global OVERLAY_WIDGETS table in a plugin or script. The keys are widget names and values are widget classes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/overlay-dev-guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nOVERLAY_WIDGETS = {\n    cursor=CursorWidget,\n    date=DateWidget,\n    misery=MiseryWidget,\n    weather=WeatherWidget,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Game Mode in DFHack\nDESCRIPTION: Command to enter an interactive menu for changing the game mode. Allows switching between fortress, adventure, and arena modes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/mode.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmode set\n```\n\n----------------------------------------\n\nTITLE: DFHack Core Event Handler - Lua\nDESCRIPTION: Example of setting up a state change event handler in DFHack's core context.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_114\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.onStateChange.foo = function(code)\n  -- Handle state change\nend\n```\n\n----------------------------------------\n\nTITLE: Using cxxrandom Module with Normal Distribution in Lua\nDESCRIPTION: Example code demonstrating how to create and use a normal distribution with the cxxrandom module. Shows engine creation, distribution initialization, and number generation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_185\n\nLANGUAGE: Lua\nCODE:\n```\nlocal rng = require('plugins.cxxrandom')\nlocal norm_dist = rng.normal_distribution(6820, 116) -- avg, stddev\nlocal engID = rng.MakeNewEngine(0)\nprint(norm_dist:next(engID))\n\n-- alternate syntax\nlocal cleanup = true   -- delete engine on cleanup\nlocal number_generator = rng.crng:new(engID, cleanup, norm_dist)\nprint(number_generator:next())\n\n-- simplified\nprint(rng.rollNormal(engID, 6820, 116))\n```\n\n----------------------------------------\n\nTITLE: Modifying Unit Properties in DFHack Lua API\nDESCRIPTION: Functions to modify various properties of units, such as assigning trainers and setting path goals.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_46\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.assignTrainer(unit[,trainer_id])\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.unassignTrainer(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.makeown(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.setPathGoal(unit, pos, goal)\n```\n\n----------------------------------------\n\nTITLE: Advanced Autolabor Management Commands\nDESCRIPTION: Administrative commands for viewing labor status, configuring specific labors, and resetting configurations to defaults.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autolabor.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nautolabor list\nautolabor status\nautolabor <labor> <minimum> [<maximum>] [<talent pool>]\nautolabor <labor> haulers\nautolabor <labor> disable\nautolabor reset-all|<labor> reset\n```\n\n----------------------------------------\n\nTITLE: Parsing Number Lists in Lua with argparse.numberList\nDESCRIPTION: Shows how to use argparse.numberList to parse a comma-separated sequence of numeric strings into a list of numbers. This function can also validate the number of elements in the list.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_124\n\nLANGUAGE: lua\nCODE:\n```\nnumberList('10, -20 ,  30.5') => {10, -20, 30.5}\n```\n\n----------------------------------------\n\nTITLE: Zone Assignment with Age Filters\nDESCRIPTION: Command example for assigning alpacas between 3-10 years old to a selected pasture.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/zone.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nzone assign all own ALPACA minage 3 maxage 10\n```\n\n----------------------------------------\n\nTITLE: Declaring Class Attributes in DFHack Lua API\nDESCRIPTION: Declares instance fields to be attributes, which are auto-initialized from constructor arguments. Default values can be specified, and DEFAULT_NIL can be used when the default should be nil.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_144\n\nLANGUAGE: lua\nCODE:\n```\nClass.ATTRS { foo = xxx, bar = yyy }\n```\n\n----------------------------------------\n\nTITLE: DFHack C++ Code Style Guide\nDESCRIPTION: Code formatting requirements for C++ contributions to DFHack, including indentation rules, brace placement, and include directive ordering.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* Four space indents\n* Opening and closing braces on their own lines or opening brace at end of previous line\n* Braces at original indent level if on own lines\n* #include directives sorted: C++ libraries first, then DFHack modules, then df/ headers, then local includes\n* Within each category, includes should be sorted alphabetically\n```\n\n----------------------------------------\n\nTITLE: getplants Command Syntax for Designating Plants\nDESCRIPTION: Designates specified plant types for chopping/gathering with support for various option flags.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/getplants.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngetplants <id> [<id> ...] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Strangemood Tool with Multiple Options\nDESCRIPTION: Demonstrates how to use the strangemood tool with multiple options to force a specific type of strange mood on a selected unit, resulting in them becoming a legendary armorsmith.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/strangemood.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nstrangemood --force --unit --type secretive --skill armorsmith\n```\n\n----------------------------------------\n\nTITLE: Basic Mod Directory Structure Example in DFHack\nDESCRIPTION: Shows the basic file and directory structure for a DFHack mod, including locations for scripts, raws, and graphics.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ninfo.txt\ngraphics/...\nobjects/...\nblueprints/...\nscripts_modactive/example-mod.lua\nscripts_modactive/internal/example-mod/...\nscripts_modinstalled/...\nREADME.md (optional)\n```\n\n----------------------------------------\n\nTITLE: Labormanager Advanced Commands Reference\nDESCRIPTION: Complete list of advanced commands for labormanager, including status reporting, priority setting, maximum dwarf assignment, labor management toggling, and error handling configuration.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/labormanager.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nlabormanager list\nlabormanager status\nlabormanager priority <labor> <value>\nlabormanager max <labor> <value>\nlabormanager max <labor> none\nlabormanager max <labor> disable\nlabormanager reset-all|reset <labor>\nlabormanager allow-fishing|forbid-fishing\nlabormanager allow-hunting|forbid-hunting\nlabormanager pause-on-error yes|no\n```\n\n----------------------------------------\n\nTITLE: Calculating Effective Skill in DFHack Lua API\nDESCRIPTION: Computes the effective rating for a given skill, taking into account various factors such as skill rust, exhaustion, pain, and other conditions affecting performance.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_52\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getEffectiveSkill(unit, skill)\n```\n\n----------------------------------------\n\nTITLE: Basic DFHack Liquids Commands\nDESCRIPTION: Core commands for using the liquids functionality. 'liquids' starts the interactive interpreter while 'liquids-here' executes actions with current settings.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/liquids.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nliquids\nliquids-here\n```\n\n----------------------------------------\n\nTITLE: Creating a New Random Number Generator in DFHack\nDESCRIPTION: Creates a new random number generator object. Without arguments, initializes using current time. Can specify a seed as an integer or list of integers.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.random.new([seed[,perturb_count]])\n```\n\n----------------------------------------\n\nTITLE: Example: Causing Insanity with Custom Reaction Tokens\nDESCRIPTION: Example of using customRawTokens with an eventful onReactionComplete hook to trigger special effects when a reaction with a specific token is completed.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_157\n\nLANGUAGE: lua\nCODE:\n```\nif customRawTokens.getToken(reaction, \"EXAMPLE_MOD_CAUSES_INSANITY\") then\n    -- make unit who performed reaction go insane\n```\n\n----------------------------------------\n\nTITLE: Creating PenArray for Screen Rendering Optimization\nDESCRIPTION: Creates a new penarray instance with specified dimensions to cache screen output for better rendering performance.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_100\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.penarray.new(w, h)\n```\n\n----------------------------------------\n\nTITLE: Blueprint Command Examples\nDESCRIPTION: Demonstrates practical usage examples of the blueprint command including GUI mode and specific dimension exports with various options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/blueprint.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nblueprint gui\\nblueprint 30 40 bedrooms\\nblueprint 30 40 bedrooms dig --cursor 108,100,150\n```\n\n----------------------------------------\n\nTITLE: Loading Tileset Textures with dfhack.textures.loadTileset\nDESCRIPTION: Loads a tileset from an image file with specified tile dimensions and returns an array of TexposHandle objects. Includes an optional parameter to specify reserved or dynamic texture range.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_101\n\nLANGUAGE: lua\nCODE:\n```\nlocal logo_textures = dfhack.textures.loadTileset('hack/data/art/dfhack.png', 8, 12)\n```\n\n----------------------------------------\n\nTITLE: Alternative Pattern for Importable Scripts\nDESCRIPTION: An alternative structure for making scripts importable with reqscript(), using a main function to contain side-effect code while allowing the script's functions to be imported.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_196\n\nLANGUAGE: Lua\nCODE:\n```\n--@ module = true\n\n-- (function definitions)\nfunction main()\n    -- (main script code with side-effects)\n\n```\n\n----------------------------------------\n\nTITLE: Building Construction in Lua\nDESCRIPTION: Creates a building with specified parameters including position, type, size and materials. Returns the created building or nil on error.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_91\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.buildings.constructBuilding{...}\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Build Options in CMake\nDESCRIPTION: Defines user-configurable options for building different components of DFHack. These options control whether to build the library, plugins, and whether to install scripts and data files.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_LIBRARY \"Build the DFHack library.\" ON)\noption(BUILD_PLUGINS \"Build the DFHack plugins.\" ON)\noption(INSTALL_SCRIPTS \"Install DFHack scripts.\" ON)\noption(INSTALL_DATA_FILES \"Install DFHack platform independent files.\" ON)\n```\n\n----------------------------------------\n\nTITLE: Enabling work-now Plugin in DFHack\nDESCRIPTION: Commands for enabling the work-now plugin and checking its status. The plugin reduces dwarf idle time between jobs by automatically prompting them to pick up new tasks more quickly.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/work-now.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable work-now\nwork-now [status]\n```\n\n----------------------------------------\n\nTITLE: Example of Using Profiler in DFHack Lua API\nDESCRIPTION: A complete example of using the profiler to profile code and generate a report to a file.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_142\n\nLANGUAGE: lua\nCODE:\n```\nlocal prof = profiler.newProfiler()\nprof:start()\n\nprofiledCode()\n\nprof:stop()\n\nlocal out = io.open( \"lua-profile.txt\", \"w+\")\nprof:report(out)\nout:close()\n```\n\n----------------------------------------\n\nTITLE: Listing Skill Rating IDs and Captions in Lua\nDESCRIPTION: A Lua command to display all available skill rating IDs and their corresponding readable caption strings. This is used to reference valid values for the 'min_skill' and 'max_skill' properties when configuring workshops.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\n:lua for idx,name in ipairs(df.skill_rating) do cap=df.skill_rating.attrs[idx].caption if cap then print(('%22s %25s'):format(name, cap)) end end\n```\n\n----------------------------------------\n\nTITLE: Advanced Command-line Argument Processing in Lua with argparse.processArgsGetopt\nDESCRIPTION: Shows how to use the more feature-rich argparse.processArgsGetopt function for processing command-line arguments. This function supports both short and long-form options, positional arguments, and custom option handlers.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_122\n\nLANGUAGE: lua\nCODE:\n```\nlocal args = {...}\nlocal open_readonly, filename = false, nil     -- set defaults\n\nlocal positionals = argparse.processArgsGetopt(args, {\n  {'r', handler=function() open_readonly = true end},\n  {'f', 'filename', hasArg=true,\n   handler=function(optarg) filename = optarg end}\n  })\n```\n\n----------------------------------------\n\nTITLE: Getting Unit Profession Name in DFHack Lua API\nDESCRIPTION: Retrieves the profession name using custom profession, noble assignments, or raws with various display options. Can be used with both units and historical figures.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_61\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getProfessionName(unit[,ignore_noble[,plural[,land_title]]])\n```\n\n----------------------------------------\n\nTITLE: Struct Field Access\nDESCRIPTION: Demonstrates accessing structure fields including inheritance cases where subclass fields can be accessed with explicit type notation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nref.field -- Access normal field\nref['subclasstype.field'] -- Access shadowed subclass field\n```\n\n----------------------------------------\n\nTITLE: Lua Command Run Function Example\nDESCRIPTION: Example of improved dfhack.run_command() function that interfaces directly with the console to support interactive commands and proper console encoding detection.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.run_command()\n```\n\n----------------------------------------\n\nTITLE: Using the Aquifer Tool in DFHack\nDESCRIPTION: Command syntax for the 'aquifer' tool showing all available actions and options. The tool can list, add, drain, or convert aquifer tiles with various targeting options and parameters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/aquifer.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naquifer [list] [<pos> [<pos>] | <target option>] [<options>]\naquifer add (light|heavy) (<pos> [<pos>] | <target option>) [<options>]\naquifer drain [light|heavy] (<pos> [<pos>] | <target option>) [<options>]\naquifer convert (light|heavy) (<pos> [<pos>] | <target option>) [<options>]\n```\n\n----------------------------------------\n\nTITLE: Setting Timestream FPS Target in DFHack\nDESCRIPTION: This example demonstrates how to set a specific FPS target for the timestream tool. It adjusts the simulation to run at an apparent 50 frames per second.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/timestream.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntimestream set fps 50\n```\n\n----------------------------------------\n\nTITLE: Quickfort Modeline Examples\nDESCRIPTION: Provides several examples of Quickfort modelines with various optional elements, demonstrating different combinations of mode, label, start position, hidden flag, and messages.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n#dig start(3; 3; Center tile of a 5-tile square) Regular blueprint comment\n#build label(noblebedroom) No explicit 'start()' so cursor is in upper left\n#meta label(digwholefort) start(center of stairs on surface)\n#dig label(dig_dining) hidden() called by the digwholefort meta blueprint\n#zone label(pastures) message(remember to assign animals to the pastures)\n```\n\n----------------------------------------\n\nTITLE: Defining Classes in DFHack Lua API\nDESCRIPTION: Defines or updates a class with optional parent class. The syntax preserves class identity when modules or scripts are reloaded by keeping the global variable value.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_143\n\nLANGUAGE: lua\nCODE:\n```\nFoo = defclass(Foo[, ParentClass])\n```\n\n----------------------------------------\n\nTITLE: Chaining Painter Methods in Lua\nDESCRIPTION: Demonstrates how to chain multiple Painter methods together in a single statement to perform painting operations efficiently.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_164\n\nLANGUAGE: Lua\nCODE:\n```\npainter:pen(foo):seek(x,y):char(1):advance(1):string('bar')...\n```\n\n----------------------------------------\n\nTITLE: Zone Assignment for Caged Grazers\nDESCRIPTION: Command for assigning caged grazing animals to a pasture with nickname assignment.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/zone.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nzone assign all own caged grazer nick ineedgrass\n```\n\n----------------------------------------\n\nTITLE: Deleting Texture Handles\nDESCRIPTION: Deletes all metadata and textures related to the given handle or handles. Can accept either a single TexposHandle or an array of TexposHandle objects.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_105\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.textures.deleteHandle(handle)\n```\n\n----------------------------------------\n\nTITLE: Clean Command Examples in DFHack\nDESCRIPTION: Examples of the 'clean' command usage, showing how to clean everything or how to clean the map with specific options like mud, item spatter, and snow.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/cleaners.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nclean all\nclean map mud item snow\n```\n\n----------------------------------------\n\nTITLE: Help Command Examples in DFHack\nDESCRIPTION: Demonstrates practical examples of using the help command to get information about the 'blueprint' command, showing both the 'help' and 'man' variants.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/help.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhelp blueprint\nman blueprint\n```\n\n----------------------------------------\n\nTITLE: Converting Vein to Platinum in DFHack\nDESCRIPTION: Example of changing a vein at the cursor position into platinum ore using the changevein command with the NATIVE_PLATINUM RAW id.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changevein.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nchangevein NATIVE_PLATINUM\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Framework in CMake\nDESCRIPTION: Defines a macro for creating tests using the Google Test framework and includes CTest for test execution. The tests are only built on UNIX platforms (excluding Apple) when the library is being built.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Testing with CTest\nmacro(dfhack_test name files)\nif(BUILD_LIBRARY AND UNIX AND NOT APPLE) # remove this once our MSVC build env has been updated\n    add_executable(${name} ${files})\n    target_include_directories(${name} PUBLIC depends/googletest/googletest/include)\n    target_link_libraries(${name} dfhack gtest)\n    add_test(NAME ${name} COMMAND ${name})\nendif()\nendmacro()\ninclude(CTest)\n```\n\n----------------------------------------\n\nTITLE: Basic Misery Plugin Commands\nDESCRIPTION: Core commands for enabling and controlling the misery plugin. Includes commands for enabling the plugin, checking status, setting the misery factor, and clearing negative thoughts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/misery.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenable misery\nmisery [status]\nmisery <factor>\nmisery clear\n```\n\n----------------------------------------\n\nTITLE: Artifact Radar Widget Implementation in Lua for DFHack\nDESCRIPTION: A widget that highlights artifacts on the game map. It scans for visible artifacts every 10 seconds to avoid performance impact and renders highlights at their locations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/overlay-dev-guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal overlay = require('plugins.overlay')\nlocal widgets = require('gui.widgets')\n\nArtifactRadarWidget = defclass(ArtifactRadarWidget, overlay.OverlayWidget)\nArtifactRadarWidget.ATTRS{\n    desc='Sample widget that highlights artifacts on the game map.',\n    default_enabled=true,\n    viewscreens={'dwarfmode', 'dungeonmode'},\n    frame={w=0, h=0},\n    overlay_onupdate_max_freq_seconds=10,\n}\n\nfunction ArtifactRadarWidget:overlay_onupdate()\n    self.visible_artifacts_coords = getVisibleArtifactCoords()\nend\n\nfunction ArtifactRadarWidget:onRenderFrame()\n    for _,pos in ipairs(self.visible_artifacts_coords) do\n        -- highlight tile at given coordinates\n    end\nend\n\nOVERLAY_WIDGETS = {radar=ArtifactRadarWidget}\n```\n\n----------------------------------------\n\nTITLE: Unforbidding All Items in Dwarf Fortress with DFHack\nDESCRIPTION: This command unforbids all reachable items on the map, which is useful after events like sieges. It demonstrates a one-shot DFHack command.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Quickstart.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`unforbid all <unforbid>`\n```\n\n----------------------------------------\n\nTITLE: String Class Extension Methods - Lua\nDESCRIPTION: A set of utility methods added to Lua's string class for common string operations like prefix/suffix checking, splitting and trimming.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_113\n\nLANGUAGE: Lua\nCODE:\n```\nstring:startswith(prefix)\nstring:endswith(suffix)\nstring:split([delimiter[, plain]])\nstring:trim()\n```\n\n----------------------------------------\n\nTITLE: Enabling and Using Embark Assistant in DFHack\nDESCRIPTION: Console commands for enabling and launching the Embark Assistant tool. The tool must be used while on the pre-embark screen and requires a display height of at least 46 lines.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/embark-assistant.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nenable embark-assistant\nembark-assistant\n```\n\n----------------------------------------\n\nTITLE: Grow Plants Command\nDESCRIPTION: Command to grow saplings into trees, with optional position arguments to target specific areas and additional options for controlling growth parameters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/plant.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nplant grow [<pos> [<pos>]] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Basic Dig-Now Command Usage Syntax\nDESCRIPTION: Shows the basic command syntax for the dig-now tool, including optional position parameters and options. Positions can be specified as x,y,z coordinates or using 'here' for cursor position.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/dig-now.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndig-now [<pos> [<pos>]] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Fastdwarf Mode Examples\nDESCRIPTION: Example commands demonstrating different fastdwarf configurations including basic enable, status check, and teleportation mode.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/fastdwarf.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nenable fastdwarf\nfastdwarf 1\nfastdwarf\nfastdwarf 1 1\n```\n\n----------------------------------------\n\nTITLE: Creating Method Callbacks in DFHack Lua API\nDESCRIPTION: Returns a closure that invokes the specified method of the class with proper self-reference. Optional initial arguments can be provided that will be passed before any arguments given to the closure.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_147\n\nLANGUAGE: lua\nCODE:\n```\ninstance:callback(method_name, [args...])\n```\n\n----------------------------------------\n\nTITLE: Accessing the DFHack Overlay API in Lua\nDESCRIPTION: This code shows how to get a reference to the overlay plugin Lua interface, which provides functions for interacting with the framework.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/overlay-dev-guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal overlay = require('plugins.overlay')\n```\n\n----------------------------------------\n\nTITLE: Multilevel Dig Blueprint\nDESCRIPTION: Example of a multilevel blueprint for stairs leading down to a room, using #> syntax to indicate level changes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n#dig Stairs leading down to a small room below\nj  `  `  #\n`  `  `  #\n`  `  `  #\n#> #  #  #\nu  d  d  #\nd  d  d  #\nd  d  d  #\n#  #  #  #\n```\n\n----------------------------------------\n\nTITLE: Container Assignment Example in Lua\nDESCRIPTION: Shows how container data is assigned when using a numeric array-style table format. This code demonstrates resizing and element assignment for container types.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nref:resize(#table);\nfor i=1,#table do ref[i-1] = table[i] end\n```\n\n----------------------------------------\n\nTITLE: DFHack Liquids Mode Commands\nDESCRIPTION: Commands for switching between different liquid types and modes including magma, water, obsidian walls/floors, and river sources.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/liquids.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nm\nw\no\nof\nrs\nf\nwclean\n```\n\n----------------------------------------\n\nTITLE: Saving Persistent Site Data in DFHack\nDESCRIPTION: Persists the given data (usually a table of arbitrary complexity) in the world save, associated with the current site and the given key.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.persistent.saveSiteData(key, data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Booze Stockpile with Quickfort\nDESCRIPTION: Example of creating a 5x4 booze stockpile using Quickfort blueprint syntax. Equivalent to creating a food stockpile in the UI and importing the 'booze' preset.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n#place\nf:=booze(5x4)\n```\n\n----------------------------------------\n\nTITLE: Creating a Steel Weapons Stockpile in Quickfort\nDESCRIPTION: Shows how to chain multiple stockpile configurations to create a steel weapons stockpile, disabling certain categories and enabling specific presets.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n#place\np{name=\"Steel weapons\"}:-cat_weapons/mats/,other/+steelweapons(7x3)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Panel Behavior with Override Functions\nDESCRIPTION: New functions for the widgets.Panel class to override instead of setting corresponding properties, which is more useful when subclassing instead of just setting attributes directly.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_42\n\nLANGUAGE: Lua\nCODE:\n```\nonDragBegin()\nonDragEnd()\nonResizeBegin()\nonResizeEnd()\n```\n\n----------------------------------------\n\nTITLE: Spectate Command Examples in DFHack\nDESCRIPTION: Specific examples of 'spectate' commands, including starting the tool, toggling it on/off, checking status, configuring auto-unpause, setting follow duration, enabling overlays, and customizing tooltips.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/spectate.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nenable spectate\nspectate toggle\nspectate\nspectate set auto-unpause true\nspectate set follow-seconds 30\nspectate overlay enable\nspectate set tooltip-follow-job-shortenings \"Store item in stockpile\" \"Store\"\nspectate toggle tooltip-follow\n```\n\n----------------------------------------\n\nTITLE: Protected Function Call with Stack Trace in DFHack\nDESCRIPTION: Invokes a function via xpcall, using an error function that attaches a stack trace to the error. Used by SafeCall in C++ and dfhack.safecall.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.pcall(f[,args...])\n```\n\n----------------------------------------\n\nTITLE: Kitchen Exclusion Management in Lua\nDESCRIPTION: Functions to find, add and remove kitchen exclusions for cooking and brewing items using type and material specifications.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_93\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.kitchen.findExclusion(type, item_type, item_subtype, mat_type, mat_index)\ndfhack.kitchen.addExclusion(type, item_type, item_subtype, mat_type, mat_index)\ndfhack.kitchen.removeExclusion(type, item_type, item_subtype, mat_type, mat_index)\n```\n\n----------------------------------------\n\nTITLE: Showing a Screen in DFHack's GUI Framework\nDESCRIPTION: Demonstrates how to show a Screen object in DFHack's GUI framework, potentially with a parent screen specified.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_166\n\nLANGUAGE: Lua\nCODE:\n```\nlocal view = MyScreen{params=val}:show()\n```\n\n----------------------------------------\n\nTITLE: Map Functions in DFHack Lua API\nDESCRIPTION: Collection of functions for manipulating and querying map tiles, features, plants and pathfinding. Includes methods for handling aquifers, biomes, and walkability checks.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_87\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.maps.getGlobalInitFeature(index)\ndfhack.maps.getLocalInitFeature(region_coord2d,index)\ndfhack.maps.getTileBiomeRgn(coords)\ndfhack.maps.getPlantAtTile(pos)\ndfhack.maps.getWalkableGroup(pos)\ndfhack.maps.canWalkBetween(pos1, pos2)\n```\n\n----------------------------------------\n\nTITLE: Getting Units in a Box with Position Arguments in Lua\nDESCRIPTION: Lua API function for retrieving units within a specified 3D box using position arguments.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getUnitsInBox\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Special Properties in DFHack Lua API\nDESCRIPTION: Functions to check various special properties of units, such as being from the forest or mischievous.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_39\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isForest(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMischievous(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isAvailableForAdoption(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isPet(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.hasExtravision(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isOpposedToLife(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isBloodsucker(unit)\n```\n\n----------------------------------------\n\nTITLE: DwarfVet Usage Examples\nDESCRIPTION: Example commands demonstrating how to check treatment status and force immediate treatment assignment. The first command shows treatment statistics, while the second forces immediate hospital assignment.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/dwarfvet.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndwarfvet\ndwarfvet now\n```\n\n----------------------------------------\n\nTITLE: Building Filter Query in Lua\nDESCRIPTION: Function that returns item filters for a building type. Used to determine valid input items for construction based on building specifications.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_90\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.buildings.getFiltersByType(argtable,type,subtype,custom)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Options for DFHack\nDESCRIPTION: Examples of typical CMake commands for DFHack build configuration. The first example shows settings for plugin development with documentation, while the second example configures a minimal core-only build.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Plugin development with updated documentation\ncmake ./ -G Ninja -B builds/debug-info/ -DCMAKE_INSTALL_PREFIX=<path to DF> -DCMAKE_BUILD_TYPE:string=RelWithDebInfo -DBUILD_DOCS:bool=ON -DBUILD_PLUGINS=1\n# Core DFHack only\ncmake ../ -G Ninja -DCMAKE_INSTALL_PREFIX=<path to DF> -DCMAKE_BUILD_TYPE:string=RelWithDebInfo -DBUILD_TESTS -DBUILD_DOCS:0 -DBUILD_PLUGINS=0\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Properties in DFHack Lua API\nDESCRIPTION: Functions to check various properties of units, such as gender, age, and sexuality.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_36\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMale(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isFemale(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isBaby(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isChild(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isAdult(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isGay(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isNaked(unit[,no_items])\n```\n\n----------------------------------------\n\nTITLE: Construction Designation in Lua\nDESCRIPTION: Designates new construction at given position with specified type and materials. Returns true if successful, false if obstructed.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_92\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.constructions.designateNew(pos,type,item_type,mat_index)\n```\n\n----------------------------------------\n\nTITLE: Creating Wooden Logs Example\nDESCRIPTION: Creates 100 tower-cap logs, showing how to specify plant materials for crafting.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/createitem.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncreateitem WOOD PLANT_MAT:TOWER_CAP:WOOD 100\n```\n\n----------------------------------------\n\nTITLE: Creating Graphical DFHack Logo Button in Lua\nDESCRIPTION: Example demonstrating creation of a graphical button that displays differently in graphics vs ASCII mode. Uses a custom tileset for the DFHack logo with hover effects.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_177\n\nLANGUAGE: lua\nCODE:\n```\nlocal logo_textures=dfhack.textures.loadTileset(\n    'hack/data/art/logo.png', 8, 12, true),\nwidgets.Label{\n    text=widgets.makeButtonLabelText{\n        chars={\n            {179, 'D', 'F', 179},\n            {179, 'H', 'a', 179},\n            {179, 'c', 'k', 179},\n        },\n        tileset=logo_textures,\n        tileset_offset=1,\n        tileset_stride=8,\n        tileset_hover=logo_textures,\n        tileset_hover_offset=5,\n        tileset_hover_stride=8,\n```\n\n----------------------------------------\n\nTITLE: Using fpause Command in DFHack\nDESCRIPTION: This command forces Dwarf Fortress to pause. It's particularly useful when the game's FPS drops below 1, causing the player to lose control. The command is simple and takes no arguments.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/fpause.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfpause\n```\n\n----------------------------------------\n\nTITLE: DFHack Liquids Permaflow Commands\nDESCRIPTION: Commands for setting permanent flow directions and states for water, including directional flow and liquid amounts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/liquids.rst#2025-04-21_snippet_3\n\nLANGUAGE: dfhack\nCODE:\n```\npf.\npf-\npf[NS][EW]\n0-7\n```\n\n----------------------------------------\n\nTITLE: Reading Mod Data Files Using script-manager API\nDESCRIPTION: Example of reading static data files distributed with a mod using the script-manager API to locate the mod's source directory. This ensures that mods can access their bundled data files.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal scriptmanager = require('script-manager')\n\nlocal GLOBAL_KEY = 'mymodname'\n\nlocal function read_bulk_data_db()\n    local mod_source_path = scriptmanager.getModSourcePath(GLOBAL_KEY)\n    -- read data from files in the mod directory\n    return ...\nend\n\nbulk_data_db = bulk_data_db or read_bulk_data_db()\n```\n\n----------------------------------------\n\nTITLE: Lua API Clipboard Handling\nDESCRIPTION: Functions for handling multiline clipboard text in CP437 encoding\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.internal.getClipboardTextCp437Multiline\ndfhack.internal.setClipboardTextCp437Multiline\n```\n\n----------------------------------------\n\nTITLE: Creating a Distinctive UI Panel with BannerPanel\nDESCRIPTION: A panel with distinctive border for marking DFHack UI elements on otherwise vanilla screens, useful for creating clearly distinguishable DFHack interfaces.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_41\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.BannerPanel\n```\n\n----------------------------------------\n\nTITLE: Stonesense Command Usage\nDESCRIPTION: Basic command syntax for launching the Stonesense visualizer.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/stonesense.rst#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nstonesense or ssense\n```\n\n----------------------------------------\n\nTITLE: Attaching Items to Jobs in Lua\nDESCRIPTION: A Lua function that allows attaching specific items to a job, useful for custom job management and automation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_60\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.job.attachJobItem()\n```\n\n----------------------------------------\n\nTITLE: Reading XLSX Files with XlsxReader\nDESCRIPTION: A complete example of using the xlsxreader plugin to open an Excel spreadsheet, enumerate sheets, and read data. The example demonstrates proper resource handling with dfhack.with_finalize for both file and sheet handles.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_192\n\nLANGUAGE: Lua\nCODE:\n```\nlocal xlsxreader = require('plugins.xlsxreader')\n\nlocal function dump_sheet(reader, sheet_name)\n    print('reading sheet: ' .. sheet_name)\n    local sheet_reader = reader:open_sheet(sheet_name)\n    dfhack.with_finalize(\n        function() sheet_reader:close() end,\n        function()\n            local row_cells = sheet_reader:get_row()\n            while row_cells do\n                printall(row_cells)\n                row_cells = sheet_reader:get_row()\n            end\n        end\n    )\nend\n\nlocal filepath = 'path/to/some_file.xlsx'\nlocal reader = xlsxreader.open(filepath)\ndfhack.with_finalize(\n    function() reader:close() end,\n    function()\n        for _,sheet_name in ipairs(reader:list_sheets()) do\n            dump_sheet(reader, sheet_name)\n        end\n    end\n)\n```\n\n----------------------------------------\n\nTITLE: Sorting Vector Data with Utils Module\nDESCRIPTION: Example demonstrating how to use utils.make_sort_order to create a sorted permutation of objects by a specific field. This enables applying the same sort order to multiple arrays.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_119\n\nLANGUAGE: lua\nCODE:\n```\nlocal spec = { key = function(v) return v.foo end }\nlocal order = utils.make_sort_order(data, { spec })\nlocal output = {}\nfor i = 1,#order do output[i] = data[order[i]] end\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Race and Type in DFHack Lua API\nDESCRIPTION: Functions to check the race and type of units.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_40\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isDwarf(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isAnimal(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMerchant(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isDiplomat(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isVisitor(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isWildlife(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isAgitated(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isInvader(unit)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is Wildlife in C++\nDESCRIPTION: API function for checking if a unit is considered wildlife.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nUnits::isWildlife\n```\n\n----------------------------------------\n\nTITLE: Basic Autolabor Enable Command\nDESCRIPTION: The basic command to enable the autolabor plugin in DFHack. Once enabled, it persists until explicitly disabled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autolabor.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nenable autolabor\n```\n\n----------------------------------------\n\nTITLE: Using the Hide Command in DFHack on Windows\nDESCRIPTION: Simple usage of the 'hide' command that hides the DFHack terminal window. The terminal can be shown again using the 'show' command, which must be accessed through a keybinding or in-game command prompt.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/hide.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhide\n```\n\n----------------------------------------\n\nTITLE: Retrieving Units by Role in DFHack Lua API\nDESCRIPTION: Functions to retrieve units based on their noble roles.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_43\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getUnitByNobleRole(role_name)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getUnitsByNobleRole(role_name)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getCitizens([exclude_residents[,include_insane]])\n```\n\n----------------------------------------\n\nTITLE: Using the 'clean' and 'spotclean' Commands in DFHack\nDESCRIPTION: Examples of using the clean commands in DFHack. The 'clean' command can target specific categories (all, map, items, units, plants) with additional options for map cleaning (mud, item, snow). 'spotclean' focuses on cleaning the tile under the cursor.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/cleaners.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nclean all|map|items|units|plants [<options>]\nspotclean\n```\n\n----------------------------------------\n\nTITLE: Cursecheck Command Examples\nDESCRIPTION: Example commands showing different ways to use cursecheck, including basic counting, detailed information display, and nickname assignment for cursed creatures.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/cursecheck.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncursecheck\ncursecheck detail all\ncursecheck nick\n```\n\n----------------------------------------\n\nTITLE: Mining Toolbar Button with Hover Highlight in Lua\nDESCRIPTION: Example showing how to create a mining toolbar button with hover highlight effects using DF assets\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_179\n\nLANGUAGE: lua\nCODE:\n```\nwidgets.Label{\n    text=widgets.makeButtonLabelText{\n        chars={\n            {218, 196, 196, 191},\n            {179, '-', ')', 179},\n            {192, 196, 196, 217},\n        },\n        pens={\n            {COLOR_GRAY, COLOR_GRAY,  COLOR_GRAY, COLOR_GRAY},\n            {COLOR_GRAY, COLOR_BROWN, COLOR_GRAY, COLOR_GRAY},\n            {COLOR_GRAY, COLOR_GRAY,  COLOR_GRAY, COLOR_GRAY},\n        },\n        pens_hover={\n            {COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE},\n            {COLOR_WHITE, COLOR_BROWN, COLOR_GRAY,  COLOR_WHITE},\n            {COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE},\n        },\n        asset={page='INTERFACE_BITS', x=0, y=22},\n    },\n    on_click=self:callback('mining_menu'),\n}\n```\n\n----------------------------------------\n\nTITLE: getplants Command Syntax for Listing Plant IDs\nDESCRIPTION: Lists valid tree/shrub IDs with optional type filtering using the -t (trees only), -s (shrubs only), or -f (farming plants only) flags.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/getplants.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngetplants [-t|-s|-f]\n```\n\n----------------------------------------\n\nTITLE: Initializing Menu Screen Component in Lua\nDESCRIPTION: Defines a MenuScreen class initialization method that sets up a window with hotspot functionality. The code creates a derived frame from a hotspot frame and initializes a window widget with autoarranged subviews.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/overlay-dev-guide.rst#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction MenuScreen:init()\n        self.mouseover = false\n\n        -- derive the menu frame from the hotspot frame so it\n        -- can appear in a nearby location\n        local frame = copyall(self.hotspot_frame)\n        -- ...\n\n        self:addviews{\n            widgets.Window{\n                frame=frame,\n                autoarrange_subviews=true,\n                subviews={\n                    -- ...\n                    },\n                },\n            },\n        }\n    end\n```\n\n----------------------------------------\n\nTITLE: Zone Assignment for Milkable Creatures\nDESCRIPTION: Command for assigning female milkable non-grazing creatures to a selected pasture or cage.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/zone.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nzone assign all own female milkable not grazer\n```\n\n----------------------------------------\n\nTITLE: Enabling DFHack Manipulator\nDESCRIPTION: Basic command to enable the Manipulator interface within DFHack\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/manipulator.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-init\nCODE:\n```\nenable manipulator\n```\n\n----------------------------------------\n\nTITLE: Zone Assignment Excluding Categories\nDESCRIPTION: Command example showing how to assign animals while excluding specific types (grazers and cats).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/zone.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nzone assign all own not grazer not race CAT\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Strangemood Tool in DFHack\nDESCRIPTION: Shows the basic command structure for using the strangemood tool. This command can be used with various options to customize the strange mood trigger.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/strangemood.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstrangemood [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using Number Sequence for Randomized Iteration in Lua\nDESCRIPTION: Example of using the num_sequence class for randomly iterating through array indices. Creates a sequence, shuffles it, and iterates through a table applying a function to each element.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_186\n\nLANGUAGE: Lua\nCODE:\n```\nlocal rng = require('plugins.cxxrandom')\nlocal engID = rng.MakeNewEngine(0)\nlocal g = rng.crng:new(engId, true, rng.num_sequence:new(0, table_size))\ng:shuffle()\nfor _ = 1, table_size do\n    func(array[g:next()])\nend\n```\n\n----------------------------------------\n\nTITLE: Using the Flows Command in DFHack\nDESCRIPTION: Shows the basic usage of the 'flows' command which counts map blocks with flowing liquids. This tool is useful for detecting leaks between areas like the magma sea and HFS without needing to reveal the entire map.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/flows.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflows\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Libraries in CMake for DFHack\nDESCRIPTION: Configures platform-specific library dependencies for DFHack based on the operating system (macOS, Linux, or Windows). Each platform requires different system libraries to be linked.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n    set(PROJECT_LIBS dl dfhack-md5 ${DFHACK_TINYXML})\nelseif(UNIX)\n    set(PROJECT_LIBS rt dl dfhack-md5 ${DFHACK_TINYXML})\nelse(WIN32)\n    # FIXME: do we really need psapi?\n    set(PROJECT_LIBS psapi dbghelp dfhack-md5 ${DFHACK_TINYXML})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example: Modifying Crossbow Fire Rate with Custom Item Tokens\nDESCRIPTION: Example of using customRawTokens with onProjItemCheckMovement hook to modify firing rates for projectile weapons based on custom tokens.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_158\n\nLANGUAGE: lua\nCODE:\n```\n-- check projectile distance flown is zero, get firer, etc...\nlocal multiplier = tonumber(customRawTokens.getToken(bow, \"EXAMPLE_MOD_FIRE_RATE_MULTIPLIER\")) or 1\nif firer.counters.think_counter > 0 then\n  firer.counters.think_counter = math.max(math.floor(firer.counters.think_counter * multiplier), 1)\nend\n```\n\n----------------------------------------\n\nTITLE: DFHack Widget Access Example\nDESCRIPTION: Example showing how to access a DF widget from a widget container using chained names or indices.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_32\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.gui.getWidget(game.main_interface.info.labor, \"Tabs\", 0)\n```\n\n----------------------------------------\n\nTITLE: DFHack Console API Functions\nDESCRIPTION: Functions for manipulating the DFHack console output. Allows scripts to clear the console or flush output to ensure visibility of content.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_108\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.console.clear()\n```\n\n----------------------------------------\n\nTITLE: Getting Unit Stress Category in DFHack Lua API\nDESCRIPTION: Returns a number from 0-6 indicating stress level, where 0 is most stressed and 6 is least stressed. The return value mapping may change in future DF versions except for 0 remaining most stressed.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_69\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getStressCategory(unit)\n```\n\n----------------------------------------\n\nTITLE: Console Command Line Examples\nDESCRIPTION: Examples demonstrating the syntax for using the DFHack console, including how to handle whitespace in arguments by using double quotes and the colon prefix mode for command parsing.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Core.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n:foo a b \"c d\" e f\nfoo \"a b \\\"c d\\\" e f\"\n```\n\n----------------------------------------\n\nTITLE: Using the DFHack Enable Command in Plain Text\nDESCRIPTION: Shows the basic syntax for using the enable command, which can be used without arguments to display a list of enabled/disabled plugins or with plugin names to enable specific plugins.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/enable.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable\nenable <plugin> [<plugin> ...]\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Buildingplan Commands\nDESCRIPTION: Basic command syntax for the buildingplan tool, including status checking, setting configuration options, resetting settings, and ignoring burrows for material selection.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/buildingplan.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nbuildingplan [status]\nbuildingplan set <setting> (true|false)\nbuildingplan reset\nbuildingplan ignore [<burrow>]\n```\n\n----------------------------------------\n\nTITLE: Getting Unit Profession ID in DFHack Lua API\nDESCRIPTION: Returns unit's profession ID (df.profession), accounting for false identity if present. This function gives the raw profession enum value rather than a formatted name.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_60\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getProfession(unit)\n```\n\n----------------------------------------\n\nTITLE: Dig Commands Example Usage\nDESCRIPTION: Examples demonstrating the usage of various dig commands with specific parameters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/dig.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack-command\nCODE:\n```\ndigcircle filled 3 -p2\ndigcircle\nexpdig diag5 hidden\nexpdig ladder designated\nexpdig\n```\n\n----------------------------------------\n\nTITLE: Using filltraffic and alltraffic Commands\nDESCRIPTION: Examples of command syntax for the traffic control tools. filltraffic performs flood-filling starting at cursor position, alltraffic affects the entire map, and specialized commands restrictice and restrictliquids target specific terrain types.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/filltraffic.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfilltraffic <designation> [<options>]\nalltraffic <designation>\nrestrictice\nrestrictliquids\n```\n\n----------------------------------------\n\nTITLE: Panel Keyboard Interaction Methods in Lua\nDESCRIPTION: Method declarations for enabling keyboard-based panel dragging and resizing functionality.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_170\n\nLANGUAGE: Lua\nCODE:\n```\npanel:setKeyboardDragEnabled(bool)\npanel:setKeyboardResizeEnabled(bool)\npanel:onDragBegin()\npanel:onDragEnd(success, new_frame)\npanel:onResizeBegin()\npanel:onResizeEnd(success, new_frame)\n```\n\n----------------------------------------\n\nTITLE: Getting DFHack Version Information\nDESCRIPTION: Returns information about the DFHack build in use, including version, release status, and Git commit details.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.getDFHackVersion()\n```\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.getDFHackRelease()\n```\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.getDFHackBuildID()\n```\n\n----------------------------------------\n\nTITLE: Querying Available Races in DFHack\nDESCRIPTION: Command to list all available creature races in Dwarf Fortress that can potentially be managed by autobutcher.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autobutcher.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevel/query --table df.global.world.raws.creatures.all --search ^creature_id --maxdepth 1\n```\n\n----------------------------------------\n\nTITLE: Function Call with Cleanup Finalizer in DFHack\nDESCRIPTION: Invokes a function with arguments, and after it returns or throws an error calls a cleanup function with specified arguments. Returns values from the main function.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.call_with_finalizer(num_cleanup_args,always,cleanup_fn[,cleanup_args...],fn[,args...])\n```\n\n----------------------------------------\n\nTITLE: Scheduling Periodic Functions with repeat-util in DFHack\nDESCRIPTION: Example of using repeat-util to schedule a function to run every 1000 game ticks. This demonstrates how to set up periodic processing for a mod regardless of game state.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal repeatUtil = require('repeat-util')\n\nlocal GLOBAL_KEY = 'mymodname'\n\nrepeatUtil.scheduleEvery(GLOBAL_KEY, 1000, 'ticks', function()\n    -- Do something like iterating over all active units and\n    -- check for something interesting\n    for _, unit in ipairs(df.global.world.units.active) do\n        ...\n    end\nend)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Persistent Site Data in DFHack\nDESCRIPTION: Retrieves the Lua table associated with the current site and the given key. If default is supplied, it is returned when the key isn't found.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.persistent.getSiteData(key[, default])\n```\n\n----------------------------------------\n\nTITLE: Viewing Steam Engine Status in Dwarf Fortress\nDESCRIPTION: Shows how to view the status of a steam engine building in Dwarf Fortress using the 't' key command. This displays information such as the presence of 'boiling water' items, which indicate the engine's operational status.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/steam-engine.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:kbd:`t`\n```\n\n----------------------------------------\n\nTITLE: Logistics Command Examples\nDESCRIPTION: Detailed examples of logistics commands for stockpile management, including configuration of auto-melting, trading, and trainer assignment.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/logistics.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlogistics\nlogistics now\nlogistics add melt\nlogistics add melt trade -s goblinite\nlogistics clear\nlogistics clear -s 12,15,goblinite\nlogistics clear all\nlogistics enable autoretrain\n```\n\n----------------------------------------\n\nTITLE: Burrow Management Functions in DFHack\nDESCRIPTION: API functions for managing dwarf fortress burrows, including unit and tile assignments, burrow searching, and block management.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_88\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.burrows.findByName(name[, ignore_final_plus])\ndfhack.burrows.clearUnits(burrow)\ndfhack.burrows.isAssignedUnit(burrow,unit)\ndfhack.burrows.setAssignedUnit(burrow,unit,enable)\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Professions in DFHack Lua API\nDESCRIPTION: Sets appropriate labors on a unit based on current work detail settings, automating the labor assignment process according to the game's configuration.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_56\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.setAutomaticProfessions(unit)\n```\n\n----------------------------------------\n\nTITLE: Aquifer Tool Usage Examples\nDESCRIPTION: Example commands demonstrating various ways to use the 'aquifer' tool, including listing aquifers, draining specific areas, converting aquifer types, and adding new aquifers with different parameters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/aquifer.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naquifer\naquifer drain --all --skip-top 2\naquifer drain -z --leaky\naquifer convert light --zdown --levels 5\naquifer add heavy here --leaky\naquifer add light 87,29,126 111,53,126\naquifer add light --all --skip-top 2 --levels 20\n```\n\n----------------------------------------\n\nTITLE: Setting Unit Path Goal in Lua\nDESCRIPTION: Lua API function for setting a unit's path goal.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.setPathGoal\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Timestream in DFHack\nDESCRIPTION: This snippet shows the basic usage of the timestream tool in DFHack. It includes commands for enabling the tool, checking its status, setting parameters, and resetting to default values.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/timestream.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nenable timestream\ntimestream [status]\ntimestream set <key> <value>\ntimestream reset\n```\n\n----------------------------------------\n\nTITLE: Retrieving Skill Experience in DFHack Lua API\nDESCRIPTION: Returns the experience value for a given skill. When total is set to true, it adds the experience implied by the current skill level to the returned value.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_53\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getExperience(unit, skill[, total])\n```\n\n----------------------------------------\n\nTITLE: Checking Goal Achievement in DFHack Lua API\nDESCRIPTION: Checks if the given unit has achieved the goal of their dream. By default checks the status of the first dream goal (currently DF only supports one dream per unit).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_67\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isGoalAchieved(unit[,goalIndex])\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Cleanowned Command with Parameters\nDESCRIPTION: This example shows how to use the cleanowned command with specific parameters to target both scattered items and heavily worn items. This combination helps clean up floor clutter and encourages dwarves to replace damaged equipment.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/cleanowned.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncleanowned scattered X\n```\n\n----------------------------------------\n\nTITLE: Traffic Control Example Command\nDESCRIPTION: An example of using the filltraffic command with the High Traffic designation. When used in a room with doors, it will only affect that specific enclosed room.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/filltraffic.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfilltraffic H\n```\n\n----------------------------------------\n\nTITLE: Registering a Workshop with Auto-Gears in building-hacks\nDESCRIPTION: Example showing how to use the auto_gears feature of building-hacks plugin to automatically fill up gears and animations for a workshop.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_184\n\nLANGUAGE: lua\nCODE:\n```\nrequire('plugins.building-hacks').registerBuilding{name=\"BONE_GRINDER\",\n  consume=15,\n  auto_gears=true\n  }\n```\n\n----------------------------------------\n\nTITLE: Using 3dveins DFHack Tool with Verbose Output\nDESCRIPTION: Runs the 3dveins command with the verbose flag to display additional information during the vein transformation process.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/3dveins.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n3dveins verbose\n```\n\n----------------------------------------\n\nTITLE: DFHack Remote Server Configuration Example in JSON\nDESCRIPTION: Sample configuration for the DFHack remote server that can be set in dfhack-config/remote-server.json. It includes options for allowing remote connections and configuring the port number.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Remote.rst#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"allow_remote\": false,\n  \"port\": 5000\n}\n```\n\n----------------------------------------\n\nTITLE: Focus Path Specification for Overlay Widgets\nDESCRIPTION: Enhancement allowing overlay widgets to specify focus paths for viewscreens, enabling context-specific overlay display.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_70\n\nLANGUAGE: Lua\nCODE:\n```\noverlay\n```\n\n----------------------------------------\n\nTITLE: Getting Unit Goal Type in DFHack Lua API\nDESCRIPTION: Retrieves the goal type of the dream that the given unit has. By default returns the first dream, though goalIndex can be specified to get additional dreams (currently DF only supports one dream per unit).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_65\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getGoalType(unit[,goalIndex])\n```\n\n----------------------------------------\n\nTITLE: Getting Caste Profession Name in DFHack Lua API\nDESCRIPTION: Retrieves the profession name for a given race and caste using raws. The plural parameter determines whether to return the singular or plural form of the profession name.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_62\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getCasteProfessionName(race, caste, prof_id[, plural])\n```\n\n----------------------------------------\n\nTITLE: Scripting Multiple Quickfort Blueprints with Meta Mode\nDESCRIPTION: Shows how to use a #meta blueprint to combine multiple blueprints (zone, place, and build) into a single command in Quickfort.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_31\n\nLANGUAGE: csv\nCODE:\n```\n\"#meta label(bed234) combines zone, place, and build blueprints\"\n/bed2\n/bed3\n/bed4\n```\n\n----------------------------------------\n\nTITLE: Defining Stockpile Import Modes in Quickfort\nDESCRIPTION: Demonstrates the syntax for specifying stockpile import modes and filters in Quickfort blueprints. Shows how to use operators (=, -, +) to set, disable, or enable stockpile configurations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n: <op> <preset_name> [/<filter>] [<op> <preset_name> [/<filter>]...]\n```\n\n----------------------------------------\n\nTITLE: Updating Soul Skills with Insert_or_Update\nDESCRIPTION: Example showing how to add or update a skill in a soul's skill vector using the utils.insert_or_update function. The new=true flag indicates a new item to be created.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_120\n\nLANGUAGE: lua\nCODE:\n```\nutils.insert_or_update(soul.skills, {new=true, id=..., rating=...}, 'id')\n```\n\n----------------------------------------\n\nTITLE: Enabling Workflow and Setting Metal Bolt Production\nDESCRIPTION: Commands to enable the workflow plugin and set up production rules for metal bolts. Maintains a stock of 900-1000 metal bolts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/workflow.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable workflow\nworkflow amount AMMO:ITEM_AMMO_BOLTS/METAL 1000 100\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Project Versioning and Requirements\nDESCRIPTION: Sets up basic CMake requirements, DFHack version numbers, and build versioning information. Includes configuration for ccache usage.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18 FATAL_ERROR)\ncmake_policy(SET CMP0048 NEW)\ncmake_policy(SET CMP0074 NEW)\n\nset(DF_VERSION \"51.11\")\nset(DFHACK_RELEASE \"r1\")\nset(DFHACK_PRERELEASE FALSE)\n\nset(DFHACK_VERSION \"${DF_VERSION}-${DFHACK_RELEASE}\")\nset(DFHACK_ABI_VERSION 2)\nset(DFHACK_BUILD_ID \"\" CACHE STRING \"Build ID (should be specified on command line)\")\n```\n\n----------------------------------------\n\nTITLE: Panel Resize Configuration in Lua\nDESCRIPTION: Code example showing the default resize configuration options for a Panel, including minimum dimensions and resize event callbacks.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_169\n\nLANGUAGE: Lua\nCODE:\n```\nresize_min = {} --default: w and h from frame, or {w=5, h=5}\non_resize_begin = function() end --default: nil\non_resize_end = function(success, new_frame) end --default: nil\n```\n\n----------------------------------------\n\nTITLE: Preserve-Rooms Command Examples\nDESCRIPTION: Demonstrates specific usage examples including listing noble role room assignments, manual updates, feature management, and configuration reset commands.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/preserve-rooms.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npreserve-rooms\\npreserve-rooms now\\npreserve-rooms disable track-missions\\npreserve-rooms reset track-roles\n```\n\n----------------------------------------\n\nTITLE: Creating Military Squad in DFHack Lua API\nDESCRIPTION: Creates a new squad associated with the given entity position assignment and returns it. Fails if a squad already exists for that assignment or if the assignment isn't a player-controlled squad.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_78\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.military.makeSquad(assignment_id)\n```\n\n----------------------------------------\n\nTITLE: Multiplying Group Action Timers in DFHack Lua API\nDESCRIPTION: Multiplies the timers of actions that match the specified action type group that the unit is performing by the given float amount. Includes overflow/underflow protection.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_75\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.multiplyGroupActionTimers(unit, amount, affectedActionTypeGroup)\n```\n\n----------------------------------------\n\nTITLE: Removing Unit from Squad in DFHack Lua API\nDESCRIPTION: Removes a unit from its squad, updating unit military information, squad position information, entity links, and creating a history event to record the change.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_81\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.military.removeFromSquad(unit_id)\n```\n\n----------------------------------------\n\nTITLE: Getting Unit Social Activities in DFHack Lua API\nDESCRIPTION: Returns the df.activity_entry or df.activity_event representing the unit's current social activity, allowing scripts to determine what social interactions a unit is engaged in.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_68\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getMainSocialActivity(unit)\ndfhack.units.getMainSocialEvent(unit)\n```\n\n----------------------------------------\n\nTITLE: Advanced Labormanager Command Examples\nDESCRIPTION: Examples of how to configure labormanager with priority and max assignment settings. The first command increases brewing priority, while the second limits fishing assignments to one dwarf.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/labormanager.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlabormanager priority BREWER 500\nlabormanager max FISH 1\n```\n\n----------------------------------------\n\nTITLE: Using DFHack Follow Command\nDESCRIPTION: Simple command to enable unit tracking in Dwarf Fortress. When executed, the screen will remain centered on the currently selected unit until the cursor is manually moved.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/follow.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfollow\n```\n\n----------------------------------------\n\nTITLE: Listing Crop Type IDs with Lua\nDESCRIPTION: A Lua command that prints out all available crop type IDs in the current world by iterating through plants that have the SEED flag.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autofarm.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfor _,plant in ipairs(df.global.world.raws.plants.all) do if plant.flags.SEED then print(plant.id) end end\n```\n\n----------------------------------------\n\nTITLE: Using Function Search Keys in FilteredList Widget\nDESCRIPTION: Enhancement to the FilteredList widget allowing search keys to be functions that return a string.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.FilteredList\n```\n\n----------------------------------------\n\nTITLE: Finding Item Type in DFHack Lua API\nDESCRIPTION: Finds an item type by string and returns the df.item_type enumeration value. The function description was incomplete in the original documentation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_83\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.items.findType(string)\n```\n\n----------------------------------------\n\nTITLE: Example DFHack Burrow Commands\nDESCRIPTION: Demonstrates practical examples of using the burrow tool, including enabling auto-expansion, clearing burrows, setting burrows based on tile properties, managing units, and using box and flood operations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/burrow.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenable burrow\nburrow tiles clear Safety\nburrow units clear Farmhouse Workshops\nmulticmd burrow tiles set Inside INSIDE; burrow tiles remove Inside HIDDEN\nburrow units set \"Core Fort\" Peasants Skilled\nburrow tiles box-add Safety 0,0,0\nburrow tiles flood-add Safety --cur-zlevel\n```\n\n----------------------------------------\n\nTITLE: Unrevealing Map in Dwarf Fortress with DFHack\nDESCRIPTION: Command to revert the effects of reveal if run immediately afterwards. For restoring a saved revealed map, use revflood instead.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/reveal.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n``unreveal``\n```\n\n----------------------------------------\n\nTITLE: Configuring Buildingplan Autostart Settings\nDESCRIPTION: Example commands for configuring buildingplan to use only blocks for buildings and constructions on startup, disabling the use of boulders and logs.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/buildingplan.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nbuildingplan set boulders false\nbuildingplan set logs false\n```\n\n----------------------------------------\n\nTITLE: Lua Widget Retrieval Functions\nDESCRIPTION: New functions for retrieving vanilla DF widgets by path or getting child widgets of a container.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_24\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.gui.getWidget(path)\ndfhack.gui.getWidgetChildren(container)\n```\n\n----------------------------------------\n\nTITLE: Enabling Autochop in DFHack Control Panel\nDESCRIPTION: This snippet shows how to enable the autochop feature using the DFHack control panel. It automates tree designation for chopping when log stocks are low.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Quickstart.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/control-panel\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toolbar Button in Lua\nDESCRIPTION: Example code showing how to create a custom toolbar button with hotkey functionality using the widgets.Label class\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_178\n\nLANGUAGE: lua\nCODE:\n```\nwidgets.Label{\n    text=widgets.makeButtonLabelText{\n        chars={\n            {218, 196, 196, 191},\n            {179, '~', '~', 179},\n            {192, 196, 196, 217},\n        },\n        pens={\n            {COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE},\n            {COLOR_WHITE, COLOR_RED,   COLOR_GRAY,  COLOR_WHITE},\n            {COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE},\n        },\n        tileset=toolbar_textures,\n        tileset_offset=25,\n        tileset_stride=8,\n    },\n    on_click=launch_warm_damp_dig_config,\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Change Callback for Filtered Lists\nDESCRIPTION: Enhancement to FilteredList widget that allows specifying a custom callback to be invoked when the filter text changes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_68\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.FilteredList\n```\n\n----------------------------------------\n\nTITLE: Subtracting Action Timers in DFHack Lua API\nDESCRIPTION: Subtracts a specified amount from timers of actions the unit is performing of the given action type. Negative amounts add to timers. Includes overflow/underflow protection.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_72\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.subtractActionTimers(unit, amount, affectedActionType)\n```\n\n----------------------------------------\n\nTITLE: Autoclothing Command Basic Usage\nDESCRIPTION: Shows the basic command syntax for the autoclothing tool, including viewing current status and setting clothing requirements.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autoclothing.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nautoclothing\nautoclothing <material> <item>\nautoclothing <material> <item> <quantity>\n```\n\n----------------------------------------\n\nTITLE: Creating Pens with dfhack.pen.make Method\nDESCRIPTION: Creates a new pre-parsed pen by combining various arguments according to specific rules. The method handles different input formats and returns a new pre-parsed pen object.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_95\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.pen.make(base[,pen_or_fg[,bg[,bold]]])\n```\n\n----------------------------------------\n\nTITLE: Safe Function Call with Error Printing in DFHack\nDESCRIPTION: Works like pcall, but also prints the error using printerr before returning. Intended as a convenience function.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nsafecall(f[,args...])\n```\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.safecall(f[,args...])\n```\n\n----------------------------------------\n\nTITLE: Creating Steel Gauntlets Example\nDESCRIPTION: Creates 2 pairs of steel gauntlets, demonstrating the syntax for creating armor with specific materials.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/createitem.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncreateitem GLOVES:ITEM_GLOVES_GAUNTLETS INORGANIC:STEEL 2\n```\n\n----------------------------------------\n\nTITLE: Using Showmood Command in DFHack\nDESCRIPTION: Command syntax for showing items needed for the current strange mood. This command takes no parameters and displays information about required materials and items for any active strange mood in the fortress.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/showmood.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nshowmood\n```\n\n----------------------------------------\n\nTITLE: DFHack GUI Viewscreen Access\nDESCRIPTION: Function to retrieve the topmost underlying DF viewscreen.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_78\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.gui.getDFViewscreen()\n```\n\n----------------------------------------\n\nTITLE: Maintaining Stocks of Containers and Materials\nDESCRIPTION: Commands to maintain stocks of empty containers (bins, barrels, bags) and materials (coal, copper bars). Ensures 25-30 of each container type and specific amounts of materials.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/workflow.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nworkflow count BIN 30\nworkflow count BARREL 30\nworkflow count BOX/CLOTH,SILK,YARN 30\nworkflow count BAR//COAL 20\nworkflow count BAR//COPPER 30\n```\n\n----------------------------------------\n\nTITLE: Basic Autochop Usage Commands\nDESCRIPTION: Basic command examples for enabling autochop and checking its status. Sets up automatic tree harvesting to maintain a stock of 200 logs.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autochop.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable autochop\nautochop [status]\nautochop (designate|undesignate)\nautochop target <max> [<min>]\nautochop (chop|nochop) <burrow>[,<burrow>...]\nautochop (clearcut|noclearcut) <burrow>[,<burrow>...]\nautochop (protect|unprotect) <type>[,<type>...] <burrow>[,<burrow>...]\n```\n\n----------------------------------------\n\nTITLE: Example Text Widget Implementation in Lua for DFHack\nDESCRIPTION: A simple widget that displays a message at a specified position on compatible screens. The message is updated every 20 seconds or when the Alt+Z hotkey is pressed.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/overlay-dev-guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal overlay = require('plugins.overlay')\nlocal widgets = require('gui.widgets')\n\nMessageWidget = defclass(MessageWidget, overlay.OverlayWidget)\nMessageWidget.ATTRS{\n    desc='Sample widget that displays a message on the screen.',\n    default_pos={x=5,y=-2},\n    default_enabled=true,\n    viewscreens={'dwarfmode', 'dungeonmode'},\n    overlay_onupdate_max_freq_seconds=20,\n}\n\nfunction MessageWidget:init()\n    self:addviews{\n        widgets.Label{\n            view_id='label',\n            text='',\n        },\n    }\nend\n\nfunction MessageWidget:overlay_onupdate()\n    local text = getImportantMessage() -- defined in the host script/plugin\n    self.subviews.label:setText(text)\n    self.frame.w = #text\nend\n\nfunction MessageWidget:onInput(keys)\n    if keys.CUSTOM_ALT_Z then\n        self:overlay_onupdate()\n        return true\n    end\n    return MessageWidget.super.onInput(self, keys)\nend\n\nOVERLAY_WIDGETS = {message=MessageWidget}\n```\n\n----------------------------------------\n\nTITLE: Dismissing Screens with dfhack.screen.dismiss Method\nDESCRIPTION: Marks a screen for removal when the game enters its event loop. The to_first parameter can be set to dismiss all screens up to the first one.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_98\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.screen.dismiss(screen[,to_first])\n```\n\n----------------------------------------\n\nTITLE: Querying Item Information\nDESCRIPTION: Shows detailed information about a selected item without modifying it. Useful for discovering RAW ids of existing items.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changeitem.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchangeitem info\n```\n\n----------------------------------------\n\nTITLE: Toggling Map Reveal in Dwarf Fortress with DFHack\nDESCRIPTION: Command to switch between reveal and unreveal states. Convenient for binding to a hotkey.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/reveal.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n``revtoggle``\n```\n\n----------------------------------------\n\nTITLE: Getting Item Value in Lua\nDESCRIPTION: The dfhack.items.getValue() function has been modified to remove the caravan_buying parameter as per C++ API changes. The function can now accept optional caravan and caravan_buying parameters for prices that account for trader races and agreements.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_40\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.items.getValue()\n```\n\n----------------------------------------\n\nTITLE: Enabling Nestboxes Plugin in DFHack\nDESCRIPTION: Command to enable the nestboxes plugin which automatically forbids fertile eggs in nestboxes from being collected by dwarves. Once enabled, the plugin will scan for and protect any eggs that are incubating.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/nestboxes.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable nestboxes\n```\n\n----------------------------------------\n\nTITLE: Setting Wood/Bone Bolt and Food/Drink Production\nDESCRIPTION: Commands to set up production rules for wood/bone bolts and maintain food and drink stocks. Keeps 150-200 wood/bone bolts and 90-120 stacks of prepared food and drink.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/workflow.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nworkflow amount AMMO:ITEM_AMMO_BOLTS/WOOD,BONE 200 50\nworkflow count FOOD 120 30\nworkflow count DRINK 120 30\n```\n\n----------------------------------------\n\nTITLE: Blueprint Command Basic Syntax\nDESCRIPTION: Shows the basic command syntax for the blueprint tool with optional parameters for width, height, depth, name, phases and additional options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/blueprint.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nblueprint <width> <height> [<depth>] [<name> [<phases>]] [<options>]\\nblueprint gui [<name> [<phases>]] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Full Quickfort Modeline Syntax Example\nDESCRIPTION: Shows the complete syntax for a Quickfort modeline, including optional elements such as label, start position, hidden flag, and message.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n#mode label(mylabel) start(X;Y;startcomment) hidden() message(mymessage) comment\n```\n\n----------------------------------------\n\nTITLE: Throwing DFHack Exceptions in Lua\nDESCRIPTION: Demonstrates how to throw a DFHack exception object with location and stack trace. The verbose parameter controls whether the trace is printed by default.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.error(msg[,level[,verbose]])\n```\n\n----------------------------------------\n\nTITLE: DwarfVet Basic Commands\nDESCRIPTION: Core commands for checking status and manually triggering animal treatment in hospitals. Shows both the basic enable command and status check command.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/dwarfvet.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable dwarfvet\ndwarfvet [status]\ndwarfvet now\n```\n\n----------------------------------------\n\nTITLE: Clipboard Text Manipulation - Lua\nDESCRIPTION: DFHack internal functions for getting and setting clipboard text with CP437 encoding support.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_116\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.internal.getClipboardTextCp437()\ndfhack.internal.setClipboardTextCp437(text)\ndfhack.internal.getClipboardTextCp437Multiline()\ndfhack.internal.setClipboardTextCp437Multiline(text)\n```\n\n----------------------------------------\n\nTITLE: Autodump Command Examples\nDESCRIPTION: Examples demonstrating different ways to use the autodump command, including basic teleportation, mass destruction, and targeted destruction of items.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autodump.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nautodump\nautodump destroy\nautodump-destroy-here\n```\n\n----------------------------------------\n\nTITLE: Safe Coroutine Resume in DFHack\nDESCRIPTION: Compares to coroutine.resume like dfhack.safecall vs pcall, providing safer coroutine resumption with error handling.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.saferesume(coroutine[,args...])\n```\n\n----------------------------------------\n\nTITLE: Registering Goblins as Digging Invaders\nDESCRIPTION: Example command that registers members of the GOBLIN race as digging invaders. This allows goblins to dig through terrain and destroy buildings to reach player dwarves.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/diggingInvaders.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndiggingInvaders add GOBLIN\n```\n\n----------------------------------------\n\nTITLE: Enabling Siege Engine Plugin in DFHack\nDESCRIPTION: Command to enable the siege-engine plugin in DFHack, which activates the enhanced siege engine functionality.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/siege-engine.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable siege-engine\n```\n\n----------------------------------------\n\nTITLE: Creating a Button-Style UI Element with TextButton\nDESCRIPTION: The widgets.TextButton class wraps a HotkeyLabel and decorates it to look more like a button, providing a more visually distinct interactive UI element.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_46\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.TextButton\n```\n\n----------------------------------------\n\nTITLE: Using the Tweak Command in DFHack\nDESCRIPTION: Demonstrates the basic usage syntax for the 'tweak' command, including options for enabling, disabling, and suppressing output.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/tweak.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntweak [list]\ntweak <command> [disable] [quiet]\n```\n\n----------------------------------------\n\nTITLE: Resetting Performance Counters in Lua\nDESCRIPTION: Demonstrates how to reset DFHack performance counters to start a new measurement session using Lua.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Core.rst#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n:lua dfhack.internal.resetPerfCounters()\n```\n\n----------------------------------------\n\nTITLE: Updating Room Assignments in DFHack Lua API\nDESCRIPTION: Sets the sleep, train, individual equipment, and squad equipment flags when training at a barracks, managing which room functions are assigned to the squad.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_79\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.military.updateRoomAssignments(squad_id, assignment_id, squad_use_flags)\n```\n\n----------------------------------------\n\nTITLE: Lua Unit Citizens Query\nDESCRIPTION: Updated dfhack.units.getCitizens to include residents by default and only return units on the map.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_23\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getCitizens()\n```\n\n----------------------------------------\n\nTITLE: Managing Trade Items in Lua\nDESCRIPTION: Functions for working with trade mechanics, including marking items for trade and checking if items are requested trade goods.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_48\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.items.markForTrade\ndfhack.items.isRequestedTradeGood\n```\n\n----------------------------------------\n\nTITLE: Simple DFHack Script to Get Unit Pronouns\nDESCRIPTION: A basic Lua script that gets the selected unit and displays their pronoun type (he/she/it). This demonstrates accessing game data through the DFHack API.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal unit = dfhack.gui.getSelectedUnit()\nif not unit then\n    return\nend\nlocal pronounTypeString = df.pronoun_type[unit.sex]\nprint(pronounTypeString)\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Lighting with Rendermax Commands\nDESCRIPTION: Console commands for controlling the Rendermax plugin's lighting system. Includes commands for realistic lighting, sun cycle control, settings reload, special effects, and disabling filters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/rendermax.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nrendermax light\nrendermax light sun <hour>|cycle\nrendermax light reload\nrendermax trippy\nrendermax disable\n```\n\n----------------------------------------\n\nTITLE: Getting Time Since Last Save in C++\nDESCRIPTION: API function that returns the number of seconds since the game was last saved or loaded.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nPersistence::getUnsavedSeconds\n```\n\n----------------------------------------\n\nTITLE: Updating DFHack Init Script Logging in Lua\nDESCRIPTION: DFHack now logs the name of the init script it is running to the console and stderr for improved debugging and visibility.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example of how this might be implemented\nlocal function run_init_script(script_name)\n  print(\"Running init script: \" .. script_name)\n  dfhack.stderr(\"Running init script: \" .. script_name)\n  -- Actual script execution code here\nend\n```\n\n----------------------------------------\n\nTITLE: Tailor Plugin Usage Examples\nDESCRIPTION: Examples demonstrating how to enable the plugin, run immediate scans, and configure material preferences for clothing production.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/tailor.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nenable tailor\ntailor now\ntailor materials silk cloth yarn\n```\n\n----------------------------------------\n\nTITLE: Scheduling Pegasus Boots Function in DFHack Lua\nDESCRIPTION: This snippet schedules the pegasus boots function to run every tick using the repeat-util module in DFHack.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nrepeatUtil.scheduleEvery(GLOBAL_KEY, 1, 'ticks', do_pegasus)\n```\n\n----------------------------------------\n\nTITLE: Saving Persistent Site Data as String in DFHack\nDESCRIPTION: Persists the given string in the world save, associated with the current site and the given key.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.persistent.saveSiteDataString(key, data_str)\n```\n\n----------------------------------------\n\nTITLE: Tree Protection Configuration Example\nDESCRIPTION: Example demonstrating how to protect food-producing trees in a specific burrow while clearing other trees.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autochop.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nautochop clearcut PicnicArea\nautochop protect brewable,edible,cookable PicnicArea\nautochop designate\n```\n\n----------------------------------------\n\nTITLE: Basic Regrass Command Usage Syntax\nDESCRIPTION: Demonstrates the basic command syntax for the regrass tool. The command can take optional position arguments and modifiers to control the area and behavior of grass regrowth.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/regrass.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-command\nCODE:\n```\nregrass [<pos> [<pos>]] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Clipboard Operations in EditField Widget\nDESCRIPTION: DFHack edit fields now support cut/copy/paste operations with the system clipboard using standard keyboard shortcuts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_49\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.EditField\n```\n\n----------------------------------------\n\nTITLE: Setting Labor Validity in DFHack Lua API\nDESCRIPTION: Sets the specified labor to the given validity (boolean) for all units in your fortress civilization. Valid labors can be toggled in the game's labor management screens.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_55\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.setLaborValidity(unit_labor, isValid)\n```\n\n----------------------------------------\n\nTITLE: Executing Code with DF Core Suspended in DFHack\nDESCRIPTION: Calls a function with arguments after grabbing the DF core suspend lock. Suspending is necessary for accessing a consistent state of DF memory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.with_suspend(f[,args...])\n```\n\n----------------------------------------\n\nTITLE: Basic Overlay Commands\nDESCRIPTION: Core commands for enabling and managing overlay widgets\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/overlay.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nenable overlay\noverlay enable|disable all|<name or list number> [<name or list number> ...]\noverlay list [<filter>]\n```\n\n----------------------------------------\n\nTITLE: Using DFHack Alias Command\nDESCRIPTION: This snippet demonstrates the usage of the 'alias' command in DFHack. It shows how to add a new alias 'pargs' for the 'devel/print-args' command with an additional argument, and then how to use the newly created alias.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/alias.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[DFHack]# alias add pargs devel/print-args example\n[DFHack]# pargs text\nexample\ntext\n```\n\n----------------------------------------\n\nTITLE: Creating Sorted Stone Quantum Stockpiles in Quickfort\nDESCRIPTION: Shows how to set up multiple quantum stockpiles for different types of stone, with corresponding trackstops and hauling routes, using Quickfort syntax.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n#place\ns{name=\"Other stone quantum\" quantum=true}    ~ s5e{name=\"Rock feeder\"}(3x3)\ns{name=\"Ore/clay stone quantum\" quantum=true} ~\ns{name=\"Gem quantum\" quantum=true}            ~\n#build\n~ trackstopW{take_from=\"Rock feeder\" route=\"Other stone\"}:=otherstone\n~ trackstopW{take_from=\"Rock feeder\" route=\"Ore/clay\"}:=cat_stone-otherstone\n~ trackstopW{take_from=\"Rock feeder\" route=\"Gems\"}:=cat_gems\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Meta Blueprint for Digging Entire Fortress in Quickfort\nDESCRIPTION: Demonstrates a complex #meta blueprint that combines multiple dig blueprints from different spreadsheet sheets, including repetition and level changes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_32\n\nLANGUAGE: csv\nCODE:\n```\n#meta label(dig_it) dig the whole fortress\ndig_farming/1\n#>\ndig_industry/1\n#>\ndig_dining/main\n#>\ndig_dining/basement\n#>\ndig_dining/waterway\n#>\ndig_dining/cistern\n#>\ndig_guildhall/1\n#>\ndig_suites/1\n#>\ndig_bedrooms/1 repeat(down 5)\n```\n\n----------------------------------------\n\nTITLE: Using String Wrapping Function in Lua\nDESCRIPTION: Example of using the string:wrap function to manage string line lengths with a table of options for controlling the wrapping behavior.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_117\n\nLANGUAGE: lua\nCODE:\n```\nlocal scriptmanager = require('script-manager')\nlocal path = scriptmanager.getModSourcePath('my_awesome_mod')\nprint(path)\n```\n\n----------------------------------------\n\nTITLE: Lua String Utility Functions\nDESCRIPTION: New string manipulation functions including string wrapping, trimming and splitting functionality\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nstring:wrap(width) -- wraps string at word boundaries\nstring:trim() -- removes whitespace from string ends\nstring:split(delimiter, plain) -- splits string into table\n```\n\n----------------------------------------\n\nTITLE: Basic Documentation Header Example for build-now script\nDESCRIPTION: Shows the required header format for a script documentation file, including the dfhack-tool directive with summary and tags.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Documentation.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nbuild-now\n=========\n\n.. dfhack-tool::\n    :summary: Instantly completes unsuspended building construction jobs.\n    :tags: fort armok buildings\n\nBy default, all buildings on the map are completed, but the area of effect is configurable.\n```\n\n----------------------------------------\n\nTITLE: Using Autonestbox Plugin Commands in DFHack\nDESCRIPTION: Commands for controlling the autonestbox plugin functionality. Options include enabling automatic assignment, checking status, and running a manual scan cycle.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autonestbox.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable autonestbox\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nautonestbox\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nautonestbox now\n```\n\n----------------------------------------\n\nTITLE: Checking if an Entry Has a Tag in DFHack Help Database\nDESCRIPTION: Returns whether the given entry exists and has the specified tag.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_132\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.has_tag(entry, tag)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DFHack Script Command\nDESCRIPTION: Demonstrates how to use the 'script' command with a specific file named 'startup.txt' located in the DF game directory. This example shows how to execute multiple DFHack commands stored in a file.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/script.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nscript startup.txt\n```\n\n----------------------------------------\n\nTITLE: Getting Unsaved Time in DFHack\nDESCRIPTION: Returns the number of seconds since last save or load of a save, useful for tracking unsaved changes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.persistent.getUnsavedSeconds()\n```\n\n----------------------------------------\n\nTITLE: Computing Slowdown Factor in DFHack Lua API\nDESCRIPTION: Calculates the expected mean slowdown factor as a float for a unit meandering or floundering in liquid, which introduces additional random slowdown to movement.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_58\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.computeSlowdownFactor(unit)\n```\n\n----------------------------------------\n\nTITLE: Regrass Debug Commands\nDESCRIPTION: Commands for enabling and disabling debug logging to troubleshoot regrass issues. These commands help identify why regrass might be failing on specific tiles.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/regrass.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack-command\nCODE:\n```\ndebugfilter set Debug regrass log\ndebugfilter set Trace regrass log\ndebugfilter set Info regrass log\n```\n\n----------------------------------------\n\nTITLE: Functional Tile Property in Label Widget\nDESCRIPTION: Enhancement to the Label widget allowing tile properties to be specified as functions that return values, providing dynamic tile rendering.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_62\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.Label\n```\n\n----------------------------------------\n\nTITLE: Configuring a Metal Weapons Stockpile in Quickfort\nDESCRIPTION: Demonstrates how to create a customized metal weapons stockpile, disabling 'Other materials' types in the Weapons category using Quickfort syntax.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n#place\np{name=\"Metal weapons\"}:-cat_weapons/other/(7x3)\n```\n\n----------------------------------------\n\nTITLE: Accessing Siege Engine GUI in DFHack\nDESCRIPTION: Command to run the graphical user interface for configuring siege engines with the new features provided by the plugin.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/siege-engine.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/siege-engine\n```\n\n----------------------------------------\n\nTITLE: sc-script Map Load Event Example\nDESCRIPTION: Example command showing how to register a script to run whenever a new map is loaded in the game.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/sc-script.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsc-script add SC_MAP_LOADED spawn_extra_monsters.init\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Quantum Stone Stockpile in Quickfort\nDESCRIPTION: Demonstrates the creation of a quantum stone stockpile setup, including feeder stockpile and trackstop configuration, using both #place and #build modes in Quickfort.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n#place\ns{name=\"Stone quantum\" quantum=true} ~ s5{name=\"Stone feeder\"}(3x3)\n#build\n~ trackstopW{take_from=\"Stone feeder\" route=\"Stone dumper\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Probe Command Usage\nDESCRIPTION: Command for displaying properties of a tile using keyboard cursor or specified coordinates. Requires visible keyboard cursor or can use coordinate options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/probe.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nprobe [<options>]\n```\n\n----------------------------------------\n\nTITLE: Showing Screens with dfhack.screen.show Method\nDESCRIPTION: Displays a given screen, with an option to place it below another screen. Returns true if successful. The screen must not already be shown.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_97\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.screen.show(screen[,below])\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Creatures in DFHack\nDESCRIPTION: Command to list all generated creatures in the loaded save. The optional 'detailed' parameter will also show the creature descriptions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/generated-creature-renamer.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlist-generated [detailed]\n```\n\n----------------------------------------\n\nTITLE: Building Probe Command\nDESCRIPTION: Simple command to display properties of a selected building in the game.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/probe.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nbprobe\n```\n\n----------------------------------------\n\nTITLE: Looking Up Units by Noble Role in Lua\nDESCRIPTION: New functions in the dfhack.units namespace to look up units by their assigned noble roles in the fortress.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_47\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getUnitByNobleRole\ndfhack.units.getUnitsByNobleRole\n```\n\n----------------------------------------\n\nTITLE: Creating a New Profiler in DFHack Lua API\nDESCRIPTION: Creates a new profiler object with the specified variant ('time' or 'call') and optional sampling frequency. Default is 'time' variant with 10*1000 frequency.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_137\n\nLANGUAGE: lua\nCODE:\n```\nprofiler.newProfiler([variant[, sampling_frequency]])\n```\n\n----------------------------------------\n\nTITLE: Creating Perlin Noise Function in DFHack\nDESCRIPTION: Returns a closure that computes a classical Perlin noise function of specified dimension (1-3), initialized from the random generator.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nfn = rng:perlin([dim]); fn(x[,y[,z]])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unit Age in DFHack Lua API\nDESCRIPTION: Returns the age of a unit in years as a floating-point value. The optional true_age parameter, when set to true, ignores false identities.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_49\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getAge(unit[,true_age])\n```\n\n----------------------------------------\n\nTITLE: Using FixVeins Command in DFHack\nDESCRIPTION: Basic command to execute the fixveins tool in DFHack. This command repairs mineral inclusion issues without requiring any additional parameters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/fixveins.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfixveins\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Compiler Settings in CMake\nDESCRIPTION: Sets up compiler flags and build settings specific to each platform. For Unix/Linux, it configures GCC flags with proper visibility and CPU compatibility. For MSVC (Windows), it sets specific compiler and linker options for Windows builds.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\nif(UNIX)\n    ## flags for GCC\n    # default to hidden symbols\n    # ensure compatibility with older CPUs\n    add_definitions(-DLINUX_BUILD)\n    set(GCC_COMMON_FLAGS \"-fvisibility=hidden -mtune=generic -Wall -Werror -Wl,--disable-new-dtags -Wno-unknown-pragmas\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${GCC_COMMON_FLAGS}\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${GCC_COMMON_FLAGS}\")\n    if(DFHACK_BUILD_64)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m64 -mno-avx\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -m64 -mno-avx\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32 -march=i686\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -m32 -march=i686\")\n    endif()\n    string(REPLACE \"-DNDEBUG\" \"\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n    set(CMAKE_INSTALL_RPATH ${DFHACK_LIBRARY_DESTINATION})\nelseif(MSVC)\n    # for msvc, tell it to always use 8-byte pointers to member functions to avoid confusion\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /vmg /vmm /MP\")\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Od\")\n    string(REPLACE \"/O2\" \"\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n    string(REPLACE \"/DNDEBUG\" \"\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n\n    option(BUILD_PDBS \"Build PDB debug symbol files.\" OFF)\n    if(BUILD_PDBS)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Z7\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /DEBUG\")\n        set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} /DEBUG\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Stockpile Property Configuration\nDESCRIPTION: Example of configuring a seed stockpile with properties like name and linking to a feeder stockpile.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n#place\nf{name=Seeds links_only=true}:=seeds(3x2)\n\nf\nf{name=\"Seeds feeder\" give_to=Seeds}:=seeds\nf{containers=0}\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Token from Race and Caste by Name in DFHack Lua API\nDESCRIPTION: Retrieves the arguments of a custom token from a specified race definition and caste name. Similar to getting tokens from units but with explicit race and caste name specification.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_155\n\nLANGUAGE: lua\nCODE:\n```\ncustomRawTokens.getToken(raceDefinition, casteName, token)\n```\n\n----------------------------------------\n\nTITLE: Using Type Command in DFHack\nDESCRIPTION: Command syntax for using the 'type' command to check how a DFHack command is implemented. Takes a single command name as an argument and returns its implementation source.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/type.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ntype <command>\n```\n\n----------------------------------------\n\nTITLE: Getting Profession Color in DFHack Lua API\nDESCRIPTION: Retrieves the color associated with a unit's profession, using noble assignments or raws. The ignore_noble boolean disables the use of noble positions when determining the color.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_63\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getProfessionColor(unit[,ignore_noble])\n```\n\n----------------------------------------\n\nTITLE: List Plants Command\nDESCRIPTION: Command to display all available shrub and sapling raw IDs that can be used with other plant commands.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/plant.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nplant list\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Position in DFHack Lua API\nDESCRIPTION: Functions to check the position of units within a specified area.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_42\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isUnitInBox(unit, pos1, pos2)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isUnitInBox(unit,x1,y1,z1,x2,y2,z2)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getUnitsInBox(pos1, pos2[, filter])\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getUnitsInBox(x1,y1,z1,x2,y2,z2[,filter])\n```\n\n----------------------------------------\n\nTITLE: Manipulating Unit Position and References in DFHack Lua API\nDESCRIPTION: Functions to get and set unit positions, and retrieve unit references.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_44\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getPosition(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.teleport(unit, pos)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getGeneralRef(unit, type)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getSpecificRef(unit, type)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getContainer(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getOuterContainerRef(unit)\n```\n\n----------------------------------------\n\nTITLE: Setting Group Action Timers in DFHack Lua API\nDESCRIPTION: Sets the timers of any action the unit is performing that matches the specified action type group to the given amount. Includes overflow/underflow protection.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_77\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.setGroupActionTimers(unit, amount, affectedActionTypeGroup)\n```\n\n----------------------------------------\n\nTITLE: Getting Noble Positions in DFHack Lua API\nDESCRIPTION: Returns a list of tables describing noble position assignments for a unit or historical figure, or nil if none exist. Each table contains entity, assignment, and position fields.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_59\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getNoblePositions(unit or historical_figure)\n```\n\n----------------------------------------\n\nTITLE: Using the revealInDwarfmodeMap function with highlight parameter\nDESCRIPTION: The revealInDwarfmodeMap function in the dfhack.gui module now supports a highlight parameter to control whether the tile highlight is set on the zoom target.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_30\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.gui.revealInDwarfmodeMap(x, y, z, highlight)\n```\n\n----------------------------------------\n\nTITLE: Using dfhack-run from External Terminal\nDESCRIPTION: Examples demonstrating how to execute DFHack commands from an external terminal using the dfhack-run executable when DF and DFHack are already running.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Core.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./dfhack-run cursecheck\ndfhack-run kill-lua\n```\n\n----------------------------------------\n\nTITLE: Guaranteed Function Finalization in DFHack\nDESCRIPTION: Calls a function with arguments, then finalizes with cleanup_fn regardless of success or failure. Implemented using call_with_finalizer(0,true,...).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.with_finalize(cleanup_fn,fn[,args...])\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Status and Training in DFHack Lua API\nDESCRIPTION: Functions to check various statuses and training properties of units.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_37\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isVisiting(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isTrainableHunting(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isTrainableWar(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isTrained(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isHunter(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isWar(unit)\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Texture Tile\nDESCRIPTION: Creates and registers a new texture with specified dimensions and pixel data. Returns a TexposHandle for the created texture.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_103\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.textures.createTile(pixels, tile_px_w, tile_px_h[, reserved])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unit Kill Count in DFHack Lua API\nDESCRIPTION: Returns the number of units the specified unit has killed.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_50\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getKillCount(unit)\n```\n\n----------------------------------------\n\nTITLE: Changing Item Quality Example\nDESCRIPTION: Example command demonstrating how to change a selected item's quality to masterpiece level.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changeitem.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nchangeitem q 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Buildingplan Plugin Project in CMake\nDESCRIPTION: Sets up the buildingplan project, defines header files, and configures the plugin compilation with source files and dependencies. It uses CMake commands to organize the build process for the DFHack buildingplan plugin.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/buildingplan/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(buildingplan)\n\nset(COMMON_HDRS\n    buildingplan.h\n    buildingtypekey.h\n    defaultitemfilters.h\n    itemfilter.h\n    plannedbuilding.h\n)\nset_source_files_properties(${COMMON_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE)\n\ndfhack_plugin(buildingplan\n    buildingplan.cpp buildingplan_cycle.cpp buildingtypekey.cpp\n    defaultitemfilters.cpp itemfilter.cpp plannedbuilding.cpp\n    ${COMMON_HDRS}\n    LINK_LIBRARIES lua)\n```\n\n----------------------------------------\n\nTITLE: Lua Safe Pairs Implementation\nDESCRIPTION: New global function that safely iterates over a table or iterable userdata, silently skipping if iteration is not possible.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nsafe_pairs(iterable[, iterator_fn])\n```\n\n----------------------------------------\n\nTITLE: Configuring Track Stop with Multiple Sources\nDESCRIPTION: Demonstrates how to set up a track stop that takes items from multiple stockpiles with spaces in their names, using the #build command.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n#build\\ntrackstopW{name=\"Goods/wood dumper\" take_from=\"Wood feeder,Goods feeder,Furniture feeder\" route=\"Goods/wood quantum\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Title-Folder Plugin in DFHack\nDESCRIPTION: This command enables the title-folder plugin in DFHack, which displays the Dwarf Fortress folder name in the window title bar. The plugin is marked as unavailable and has no specific command associated with it.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/title-folder.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable title-folder\n```\n\n----------------------------------------\n\nTITLE: Generating Git Commit Information for DFHack\nDESCRIPTION: Creates a custom command to generate git-describe.h with current git commit information. This only runs when .git directories exist, ensuring version tracking for the main repository and XML module.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(git-describe.cmake.in ${CMAKE_CURRENT_SOURCE_DIR}/git-describe.cmake @ONLY)\nif(EXISTS ${dfhack_SOURCE_DIR}/.git/index AND EXISTS ${dfhack_SOURCE_DIR}/.git/modules/library/xml/index)\n    add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/include/git-describe.h\n    COMMAND ${CMAKE_COMMAND}\n        -D dfhack_SOURCE_DIR:STRING=${dfhack_SOURCE_DIR}\n        -D GIT_EXECUTABLE:STRING=${GIT_EXECUTABLE}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/git-describe.cmake\n    COMMENT \"Obtaining git commit information\"\n    DEPENDS ${dfhack_SOURCE_DIR}/.git/index\n        ${dfhack_SOURCE_DIR}/.git/modules/library/xml/index\n        ${CMAKE_CURRENT_SOURCE_DIR}/git-describe.cmake\n        include/git-describe.h.in\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic Cursecheck Command Usage\nDESCRIPTION: Basic syntax for using the cursecheck command with optional parameters. The command can be run with no parameters to show curse counts, or with various options for detailed information.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/cursecheck.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncursecheck [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using Burrow Tool Commands in DFHack\nDESCRIPTION: Shows the complete syntax for using the burrow tool, including enabling auto-expansion monitoring and various commands for managing tiles and units in burrows.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/burrow.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenable burrow\nburrow tiles|units clear <target burrow> [<target burrow> ...] [<options>]\nburrow tiles|units set|add|remove <target burrow> <burrow> [...] [<options>]\nburrow tiles box-add|box-remove <target burrow> [<pos>] [<pos>] [<options>]\nburrow tiles flood-add|flood-remove <target burrow> [<options>]\n```\n\n----------------------------------------\n\nTITLE: Zone Cage Assignment with Count\nDESCRIPTION: Command demonstrating how to assign up to 50 tame male non-grazing animals to cages in a zone.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/zone.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nzone tocages count 50 own tame male not grazer\n```\n\n----------------------------------------\n\nTITLE: Temporary Object Usage Pattern in DFHack\nDESCRIPTION: Calls a function with an object and arguments, then finalizes by deleting the object using its delete method.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.with_temp_object(obj,fn[,args...])\n```\n\n----------------------------------------\n\nTITLE: Creating a New Lua Object with Improved Error Handling\nDESCRIPTION: Improved error handling for the Lua new() function, allowing certain errors (like creating objects with members with unknown vtables) to be catchable with pcall().\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_39\n\nLANGUAGE: Lua\nCODE:\n```\nnew()\n```\n\n----------------------------------------\n\nTITLE: Recursive Table Assignment Example in Lua\nDESCRIPTION: Example demonstrating how recursive table assignment is implemented in DFHack's Lua API. This code shows the basic structure of how fields from a Lua table are assigned to target C++ structures.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction rec_assign(ref,table)\n    for key,value in pairs(table) do\n        ref[key] = value\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking if an Entry Exists in DFHack Help Database\nDESCRIPTION: Checks whether a string or list of strings are entries in the help database. Returns a boolean result.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_127\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.is_entry(str)\n```\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.is_entry(list)\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Civilization Zone\nDESCRIPTION: Function that returns the Zone that the user currently has selected in the interface, useful for zone-based tools and plugins.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_67\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.gui.getSelectedCivZone\n```\n\n----------------------------------------\n\nTITLE: getplants Command Example for Gathering All Farmable Plants\nDESCRIPTION: Designates all plants on the map that yield seeds for farming by combining the -f (farming) and -a (all) flags.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/getplants.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ngetplants -f -a\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for DFHack API\nDESCRIPTION: Sets up the CMake project, minimum version, and policies for the DFHack API library build.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(dfapi)\ncmake_minimum_required(VERSION 3.21)\n\n# prevent CMake warnings about INTERFACE_LINK_LIBRARIES vs LINK_INTERFACE_LIBRARIES\ncmake_policy(SET CMP0022 NEW)\n```\n\n----------------------------------------\n\nTITLE: Creating an Expanding Burrow in Quickfort\nDESCRIPTION: Shows how to create or extend a burrow named 'Inside+' that automatically grows as adjacent tiles are dug out, using Quickfort #burrow mode syntax.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n#burrow\na{create=true name=Inside+ civalert=true}(5x5)\n```\n\n----------------------------------------\n\nTITLE: Discarding Pre-Reveal Map Data in Dwarf Fortress with DFHack\nDESCRIPTION: Command to discard information about what was visible before revealing the map. Useful when loading a new fort after abandoning a revealed one.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/reveal.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n``revforget``\n```\n\n----------------------------------------\n\nTITLE: Painting Tiles and Clearing Interface Cursor in Lua\nDESCRIPTION: Function for manipulating map tiles in the UI, now with the ability to explicitly clear the interface cursor from a map tile by passing 0 as the tile value.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_61\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.screen.paintTile()\n```\n\n----------------------------------------\n\nTITLE: DFHack Orders Auto-sort Configuration\nDESCRIPTION: Configuration command for automatically sorting manager orders by repeat frequency on map load. Adds the command to the dfhack-config/init/onMapLoad.init file.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/orders.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nrepeat -name orders-sort -time 1 -timeUnits days -command [ orders sort ]\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Domestication and Training Status in DFHack Lua API\nDESCRIPTION: Functions to check various domestication and training statuses of units.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_38\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isTame(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isTamable(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isDomesticated(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMarkedForTraining(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMarkedForTaming(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMarkedForWarTraining(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMarkedForHuntTraining(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMarkedForSlaughter(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMarkedForGelding(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isGeldable(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isGelded(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isEggLayer(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isEggLayerRace(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isGrazer(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMilkable(unit)\n```\n\n----------------------------------------\n\nTITLE: Checking Labor Validity in DFHack Lua API\nDESCRIPTION: Returns whether the indicated labor is settable for the given unit, allowing scripts to determine if a labor can be enabled for a particular unit.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_54\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isValidLabor(unit, unit_labor)\n```\n\n----------------------------------------\n\nTITLE: Stockpile Placement Blueprint\nDESCRIPTION: Blueprint for placing a booze stockpile in a room with custom name and configuration\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\n#place personal booze stockpile\n` ` ` ` #\n` ~ ~ ` #\n` f f{name=\"bedroom booze\"}:=booze\n` `   ` #\n# # # # #\n```\n\n----------------------------------------\n\nTITLE: Creating Field Setter Closures in DFHack Lua API\nDESCRIPTION: Returns a closure that, when called with an argument, sets the specified field to that argument.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_149\n\nLANGUAGE: lua\nCODE:\n```\ninstance:cb_setfield(field_name)\n```\n\n----------------------------------------\n\nTITLE: Adding Function Ignore Filter to Profiler in DFHack Lua API\nDESCRIPTION: Adds an ignore filter for a function in the profiler. It will ignore the specified function and all of its children in profiling results.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_141\n\nLANGUAGE: lua\nCODE:\n```\nobj:prevent(function)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tables with ensure_keys\nDESCRIPTION: The ensure_keys function walks a series of keys, creating new tables for any missing values, useful for safely initializing nested table structures.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_52\n\nLANGUAGE: Lua\nCODE:\n```\nensure_keys\n```\n\n----------------------------------------\n\nTITLE: Lua API Additions and Function Exposure\nDESCRIPTION: New functions and methods exposed to the Lua API, including movement delta, hotkey targets, and command execution return codes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_21\n\nLANGUAGE: Lua\nCODE:\n```\n- Exposed ``gui.dwarfmode.get_movement_delta`` and ``gui.dwarfmode.get_hotkey_target``\n- ``dfhack.run_command`` now returns the command's return code\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Supernatural Properties in DFHack Lua API\nDESCRIPTION: Functions to check various supernatural properties of units, such as being undead or a night creature.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_41\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isUndead(unit[,hiding_curse])\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isNightCreature(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isSemiMegabeast(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMegabeast(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isTitan(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isForgottenBeast(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isDemon(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isDanger(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isGreatDanger(unit)\n```\n\n----------------------------------------\n\nTITLE: DFHack Console API Implementation\nDESCRIPTION: Addition of new console API functionality in DFHack's Lua interface\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_37\n\nLANGUAGE: Lua\nCODE:\n```\n- Added a new \"dfhack.console\" API\n- API can now wrap functions with 12 or 13 parameters\n```\n\n----------------------------------------\n\nTITLE: Tile Type Setting Function\nDESCRIPTION: New Lua API function for setting tile types.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_77\n\nLANGUAGE: Lua\nCODE:\n```\ntiletypes_setTile\n```\n\n----------------------------------------\n\nTITLE: Creating Text-Only Button Label in Lua\nDESCRIPTION: Example showing how to create a text-only button label with hover effects using the makeButtonLabelText function. Creates a civilian alert button with color changes on hover.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_176\n\nLANGUAGE: lua\nCODE:\n```\nwidgets.Label{\n    text=widgets.makeButtonLabelText{\n        chars={\n            ' Activate ',\n            ' civilian ',\n            '  alert   ',\n        },\n        pens={fg=COLOR_BLACK, bg=COLOR_LIGHTRED},\n        pens_hover={fg=COLOR_WHITE, bg=COLOR_RED},\n    },\n    on_click=sound_alarm,\n},\n```\n\n----------------------------------------\n\nTITLE: Alternative Linux Build with ccmake\nDESCRIPTION: An alternative approach to configuring DFHack on Linux using the curses-based ccmake interface, which provides a more interactive configuration experience.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd build\nccmake .. -G Ninja\nninja install\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Help Database in DFHack Lua API\nDESCRIPTION: Scans for changes in available commands and their documentation in the help database.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_126\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.refresh()\n```\n\n----------------------------------------\n\nTITLE: Lua Process Args GetOpt Extension\nDESCRIPTION: Enhancement to argparse allowing long form parameters without short form aliases.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nargparse.processArgsGetopt() --longparam\n```\n\n----------------------------------------\n\nTITLE: Text search utility function\nDESCRIPTION: A generalized text search routine moved from the FilteredList widget to the utils module for broader use in scripts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_37\n\nLANGUAGE: Lua\nCODE:\n```\nlocal match = utils.search_text(search_term, item_text)\n```\n\n----------------------------------------\n\nTITLE: Creating Field Getter Closures in DFHack Lua API\nDESCRIPTION: Returns a closure that, when called, returns the value of the specified field of the object.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_148\n\nLANGUAGE: lua\nCODE:\n```\ninstance:cb_getfield(field_name)\n```\n\n----------------------------------------\n\nTITLE: Adding Subviews with View IDs in Lua\nDESCRIPTION: Shows how to add subviews to a View object, including nested subviews with view_id attributes for easy access.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_165\n\nLANGUAGE: Lua\nCODE:\n```\nself:addviews{\n    Panel{\n        view_id = 'panel',\n        subviews = {\n            Label{ view_id = 'label' }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HotkeyLabel Hover Effect in Lua\nDESCRIPTION: Example implementation of the shouldHover() method for a HotkeyLabel class that inherits from the base Label class. Determines whether the label should show a hover effect based on mouse handlers.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_175\n\nLANGUAGE: lua\nCODE:\n```\nfunction HotkeyLabel:shouldHover()\n    -- When on_activate is set, text should also hover on mouseover\n    return HotkeyLabel.super.shouldHover(self) or self.on_activate\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Time Since Last Save in Lua\nDESCRIPTION: Lua API wrapper for the C++ Persistence::getUnsavedSeconds function.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.persistent.getUnsavedSeconds\n```\n\n----------------------------------------\n\nTITLE: Dragon Breath on Wound Contamination Event in Lua\nDESCRIPTION: Example of using the eventful plugin to spawn dragon breath whenever an item attempts to contaminate a wound. Uses the onItemContaminateWound event handler.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_187\n\nLANGUAGE: Lua\nCODE:\n```\nb=require \"plugins.eventful\"\nb.onItemContaminateWound.one=function(item,unit,un_wound,x,y)\n    local flw=dfhack.maps.spawnFlow(unit.pos,6,0,0,50000)\nend\n```\n\n----------------------------------------\n\nTITLE: Lua Bitfield Initialization Example\nDESCRIPTION: Example of setting bitfield value directly instead of using constructors in C++. Bitfield.whole now returns an integer instead of decimal in Lua.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_42\n\nLANGUAGE: Lua\nCODE:\n```\nbitfield.whole = value  -- Set value directly instead of using constructors\n```\n\n----------------------------------------\n\nTITLE: Retrieving Persistent Site Data as String in DFHack\nDESCRIPTION: Retrieves the underlying serialized string associated with the current site and the given key. Returns nil if the key isn't found.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.persistent.getSiteDataString(key)\n```\n\n----------------------------------------\n\nTITLE: Using Filesystem Module Functions in Lua\nDESCRIPTION: Examples of filesystem operations provided by DFHack's Lua API. These functions allow scripts to manipulate files and directories, check paths, and get modification times.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_106\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.filesystem.exists(path)\n```\n\n----------------------------------------\n\nTITLE: Replacing libstdc++ Library on macOS\nDESCRIPTION: Commands to replace the libstdc++ library with appropriate GCC version symlink for macOS builds.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd <path to df>/hack && mv libstdc++.6.dylib libstdc++.6.dylib.orig &&\nln -s [PATH_TO_LIBSTDC++] .\n```\n\n----------------------------------------\n\nTITLE: Getting Entry Tags from DFHack Help Database\nDESCRIPTION: Returns the set of tag names for the given entry.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_131\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.get_entry_tags(entry)\n```\n\n----------------------------------------\n\nTITLE: Managing Dye Production and Quality Crafts\nDESCRIPTION: Commands to maintain a stock of dimple dye and high-quality local crafts. Keeps 80-100 units of dye and 10-100 exceptional quality local crafts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/workflow.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nworkflow amount POWDER_MISC//MUSHROOM_CUP_DIMPLE:MILL 100 20\nworkflow count CRAFTS///LOCAL,EXCEPTIONAL 100 90\n```\n\n----------------------------------------\n\nTITLE: Plugin Documentation Header Example with Multiple Commands\nDESCRIPTION: Demonstrates how to document a plugin with multiple commands using the dfhack-tool directive with no-command parameter and separate dfhack-command directives for each command.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Documentation.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nautodump\n========\n\n.. dfhack-tool::\n    :summary: Automatically set items in a stockpile to be dumped.\n    :tags: fort armok fps productivity items stockpiles\n    :no-command:\n\n.. dfhack-command:: autodump\n    :summary: Teleports items marked for dumping to the cursor position.\n\n.. dfhack-command:: autodump-destroy-here\n    :summary: Destroy items marked for dumping under the cursor.\n\n.. dfhack-command:: autodump-destroy-item\n    :summary: Destroys the selected item.\n\nWhen `enabled <enable>`, this plugin adds an option to the :kbd:`q` menu for\nstockpiles.\n\nWhen invoked as a command, it can instantly move all unforbidden items marked\nfor dumping to the tile under the cursor.\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is Wildlife in Lua\nDESCRIPTION: Lua API function for checking if a unit is considered wildlife.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_15\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isWildlife\n```\n\n----------------------------------------\n\nTITLE: Tab Bar Widget Implementation\nDESCRIPTION: A new library widget for creating tabbed interfaces, migrated from the control-panel.lua module for wider usage.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_69\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.TabBar\n```\n\n----------------------------------------\n\nTITLE: Parsing Pens with dfhack.pen.parse Method\nDESCRIPTION: Similar to dfhack.pen.make but returns the base or pen_or_fg argument directly if they are already pre-parsed native objects.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_96\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.pen.parse(base[,pen_or_fg[,bg[,bold]]])\n```\n\n----------------------------------------\n\nTITLE: Basic Fastdwarf Commands\nDESCRIPTION: Core commands for enabling and configuring the fastdwarf functionality. Shows basic usage patterns for enabling fast movement and checking status.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/fastdwarf.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable fastdwarf\nfastdwarf [status]\nfastdwarf <fast mode> [<tele mode>]\n```\n\n----------------------------------------\n\nTITLE: Function Currying in DFHack\nDESCRIPTION: Returns a closure that invokes a function with arguments combined from both the curry call and the closure call itself.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.curry(func,args...)\n```\n\nLANGUAGE: lua\nCODE:\n```\ncurry(func,args...)\n```\n\n----------------------------------------\n\nTITLE: Checking Screen Dismissal Status with dfhack.screen.isDismissed\nDESCRIPTION: Checks if a screen is already marked for removal.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_99\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.screen.isDismissed(screen)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu\nDESCRIPTION: Command to install the required packages for building DFHack on Ubuntu, including build tools and dependencies.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Dependencies.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt-get install gcc cmake ccache ninja-build git zlib1g-dev libsdl2-dev libxml-libxml-perl libxml-libxslt-perl\n```\n\n----------------------------------------\n\nTITLE: sc-script Event Registration Commands\nDESCRIPTION: Commands for adding and removing script files that should be executed when specific events occur.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/sc-script.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsc-script add|remove <event> <file> [<file> ...]\n```\n\n----------------------------------------\n\nTITLE: Building Module Function Declarations\nDESCRIPTION: Declaration of new building-related functions added to the Buildings Module in DFHack 0.40.24-r2. These functions provide building property checks and location functions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_45\n\nLANGUAGE: Lua\nCODE:\n```\nisActivityZone\nisPenPasture\nisPitPond\nisActive\nfindPenPitAt\n```\n\n----------------------------------------\n\nTITLE: Using the Cleanconst Tool in DFHack\nDESCRIPTION: The command to run the cleanconst tool in DFHack. When executed, it alters all constructions on the map to improve performance by ensuring they spawn building components when disassembled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/cleanconst.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncleanconst\n```\n\n----------------------------------------\n\nTITLE: Getting Texture Position with dfhack.textures.getTexposByHandle\nDESCRIPTION: Retrieves the current texpos value for a given TexposHandle. This should always be used to get the texpos as it can change when game textures are reset.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_102\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.textures.getTexposByHandle(handle)\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Generator for DFHack\nDESCRIPTION: Command to generate Visual Studio project files for building DFHack, specifying Visual Studio 2022 as the generator.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -G \"Visual Studio 17 2022\"\n```\n\n----------------------------------------\n\nTITLE: Creating Notes Blueprint in Quickfort\nDESCRIPTION: Demonstrates how to create a #notes blueprint in Quickfort for displaying long, multi-line messages or help text.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_30\n\nLANGUAGE: csv\nCODE:\n```\n#notes label(help) blueprint set walkthrough\nThis is the help text for the blueprint set\ncontained in this file\n\nFirst, make sure that you embark in...\n```\n\n----------------------------------------\n\nTITLE: Basic Dig Mode Blueprint Definition\nDESCRIPTION: Example showing how to define a basic dig mode blueprint header in CSV format\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n#dig\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is Agitated in C++\nDESCRIPTION: API function for checking if a unit is in an agitated state.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nUnits::isAgitated\n```\n\n----------------------------------------\n\nTITLE: Context-Specific Keybinding for Mass Remove Tool\nDESCRIPTION: Binds Ctrl-M to run the 'gui/mass-remove' command, but only when on the main map with nothing else selected.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/keybinding.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nkeybinding add Ctrl-M@dwarfmode/Default gui/mass-remove\n```\n\n----------------------------------------\n\nTITLE: Parsing String Lists in Lua with argparse.stringList\nDESCRIPTION: Demonstrates the use of argparse.stringList to parse a comma-separated sequence of strings into a Lua list. This function can also validate the number of elements in the list.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_123\n\nLANGUAGE: lua\nCODE:\n```\nstringList('hello , world,alist', 'words') => {'hello', 'world', 'alist'}\n```\n\n----------------------------------------\n\nTITLE: Bridge Construction Blueprint\nDESCRIPTION: Three equivalent ways to specify construction of a 4x2 bridge using different area expansion syntax approaches.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n#build a 4x2 bridge from row 1, col 1\nga(4x2)  `  #\n`  `  `  `  #\n#  #  #  #  #\n\n#build a 4x2 bridge from row 1, col 1\nga ga ga ga #\nga ga ga ga #\n#  #  #  #  #\n\n#build a 4x2 bridge from row 2, col 4\n`  `  `  `  #\nga(4x-2) `  #\n#  #  #  #  #\n```\n\n----------------------------------------\n\nTITLE: Using thin frame for floating tooltips\nDESCRIPTION: A predefined thin panel frame style suitable for creating floating tooltips in custom GUIs.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_33\n\nLANGUAGE: Lua\nCODE:\n```\nlocal frame = gui.FRAME_THIN\n```\n\n----------------------------------------\n\nTITLE: Executing Spectate Commands in DFHack\nDESCRIPTION: Examples of how to use the 'spectate' command in DFHack. These commands demonstrate enabling the tool, toggling settings, and configuring various options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/spectate.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable spectate\nspectate [status]\nspectate toggle [<setting>]\nspectate set <setting> <value> [<subvalue>]\nspectate overlay enable|disable\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Dependencies on macOS\nDESCRIPTION: Commands to install the required dependencies for building DFHack on macOS using the Homebrew package manager.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Dependencies.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap homebrew/versions\nbrew install git\nbrew install cmake\nbrew install ninja\nbrew install gcc@7\n```\n\n----------------------------------------\n\nTITLE: Printing Values in Interactive Lua with @ Symbol\nDESCRIPTION: Special syntax for printing values in interactive Lua sessions with subtle semantic differences from standard printing.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_47\n\nLANGUAGE: lua\nCODE:\n```\n@\n```\n\n----------------------------------------\n\nTITLE: Setting Fast Mode Command\nDESCRIPTION: Command to set stockflow to check and enqueue orders daily instead of waiting for bookkeeper updates\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/stockflow.rst#2025-04-21_snippet_3\n\nLANGUAGE: dfhack\nCODE:\n```\nstockflow fast\n```\n\n----------------------------------------\n\nTITLE: Getting Tag Data from DFHack Help Database\nDESCRIPTION: Returns a list of entries that have the given tag. The returned table also includes a description key containing the string description of the tag.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_135\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.get_tag_data(tag)\n```\n\n----------------------------------------\n\nTITLE: Setting DFHack Installation Path\nDESCRIPTION: Command to specify where DFHack will be installed, using the CMAKE_INSTALL_PREFIX variable to point to the Dwarf Fortress directory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DCMAKE_INSTALL_PREFIX=<path to df>\n```\n\n----------------------------------------\n\nTITLE: Erasing a Tile from All Burrows in Quickfort\nDESCRIPTION: Demonstrates how to use Quickfort #burrow mode to remove a tile from all burrows that currently include it.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n#burrow\ne\n```\n\n----------------------------------------\n\nTITLE: Getting mouse position with optional out-of-bounds parameter\nDESCRIPTION: The getMousePos function now accepts an optional parameter to allow retrieving coordinates for mouse positions outside the game map area.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_32\n\nLANGUAGE: Lua\nCODE:\n```\nlocal x, y, z = dfhack.gui.getMousePos(allow_out_of_bounds)\n```\n\n----------------------------------------\n\nTITLE: Listing Valid Stone Types in Lua\nDESCRIPTION: This Lua snippet prints a list of valid stone types that can be used with the 'stone' command in tiletypes. It iterates through the world's inorganic materials and checks for stones that can be stockpiled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/tiletypes.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfor _,mat in ipairs(df.global.world.raws.inorganics) do\n    if mat.material.flags.IS_STONE and not mat.material.flags.NO_STONE_STOCKPILE then\n        print(mat.id)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Designating a Specialized Forge in Quickfort\nDESCRIPTION: Shows how to create a forge specialized for high-quality armor production, setting name, labor requirements, and minimum skill level using Quickfort syntax.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n#build\nwf{name=Armorer labors=Armoring min_skill=Master}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autochop Settings in DFHack\nDESCRIPTION: This command launches the autochop configuration interface, allowing customization of wood harvesting automation settings.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Quickstart.rst#2025-04-21_snippet_3\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/autochop\n```\n\n----------------------------------------\n\nTITLE: Designating Constructed Floors in Quickfort\nDESCRIPTION: Example of using the #build mode to designate a 5x5 square of constructed flooring in a Quickfort blueprint.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n#build\nCf(5x5)\n```\n\n----------------------------------------\n\nTITLE: Basic Tailor Commands in DFHack\nDESCRIPTION: Basic command syntax for enabling the tailor plugin and checking its status. This allows the plugin to start monitoring and replacing tattered clothes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/tailor.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable tailor\ntailor [status]\n```\n\n----------------------------------------\n\nTITLE: Help Database Refresh Function\nDESCRIPTION: New function to manually refresh the help database, replacing automatic refresh behavior.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_76\n\nLANGUAGE: Lua\nCODE:\n```\nhelpdb.refresh()\n```\n\n----------------------------------------\n\nTITLE: Basic Channel-Safely Commands\nDESCRIPTION: Shows the basic command syntax for enabling the plugin and configuring its settings.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/channel-safely.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenable channel-safely\nchannel-safely set <setting> <value>\nchannel-safely enable|disable <feature>\nchannel-safely <command>\n```\n\n----------------------------------------\n\nTITLE: Enabling DFHack Testing\nDESCRIPTION: Commands to enable building and installing tests for DFHack. BUILD_TESTS installs Lua tests, while BUILD_TESTING will build unit tests in the future.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DBUILD_TESTS:bool=ON\ncmake .. -DBUILD_TESTS=1\n```\n\n----------------------------------------\n\nTITLE: Bedroom Build Blueprint\nDESCRIPTION: Build blueprint for constructing walls and placing furniture in a bedroom\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\n#build\nCw Cw Cw Cw #\nCw b  h  Cw #\nCw       Cw #\nCw Cw    Cw #\n#  #  #  #  #\n```\n\n----------------------------------------\n\nTITLE: Room List Browser\nDESCRIPTION: Code for browsing rooms owned by a unit when assigning a new room.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_51\n\nLANGUAGE: Lua\nCODE:\n```\ngui/room-list\n```\n\n----------------------------------------\n\nTITLE: Unsuspend Command Usage\nDESCRIPTION: Command to perform a single cycle of job suspension management with optional flags for quiet operation, skipping blocking checks, and forcing all jobs to resume.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/suspendmanager.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\nunsuspend [-s|--skipblocking] [-q|--quiet] [-f|--force]\n```\n\n----------------------------------------\n\nTITLE: Workstation Job Tweaking\nDESCRIPTION: Example from GUI workshop-job script showing how to display and modify workshop job inputs.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_49\n\nLANGUAGE: Lua\nCODE:\n```\ngui/workshop-job\n```\n\n----------------------------------------\n\nTITLE: Create Plant Command\nDESCRIPTION: Command to create a new plant of a specified type at a given position or cursor location. Requires a plant ID and supports optional position and additional options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/plant.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nplant create <plant_id> [<pos>] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using 3dveins DFHack Tool (Basic Command)\nDESCRIPTION: Basic usage of the 3dveins command to transform flat mineral veins into 3D veins that span z-levels while preserving mineral counts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/3dveins.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n3dveins\n```\n\n----------------------------------------\n\nTITLE: Container Array Access\nDESCRIPTION: Shows how to access 2D array elements in DFHack's container references, which expose multi-dimensional arrays as one-dimensional.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\narray[x].value:_displace(y) -- Access 2D array element\n```\n\n----------------------------------------\n\nTITLE: Running a DFHack Script from Lua Code\nDESCRIPTION: Example of using dfhack.run_script() to execute a script programmatically with multiple arguments. This demonstrates the equivalent of running a command from the DFHack prompt but from within Lua code.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_193\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.run_script(\"repeat\", \"-time\", \"14\", \"-timeUnits\", \"days\", \"-command\", \"[\", \"workorder\", \"ShearCreature\", \"]\", \"-name\", \"autoShearCreature\")\n```\n\n----------------------------------------\n\nTITLE: Setting Global Filter Behavior in DFHack UI\nDESCRIPTION: Example command for configuring list filters to match any substring across the full text instead of the default behavior of matching word beginnings.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_181\n\nLANGUAGE: lua\nCODE:\n```\nrequire('utils').FILTER_FULL_TEXT=true\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers in DFHack\nDESCRIPTION: Returns a random integer. If limit is specified, the value is in the range [0, limit); otherwise it uses the whole 32-bit unsigned integer range.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nrng:random([limit])\n```\n\n----------------------------------------\n\nTITLE: Creating a Specialized Jeweler's Workshop in Quickfort\nDESCRIPTION: Demonstrates how to create a named Jeweler's workshop that takes materials from specific stockpiles using Quickfort #build mode syntax.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n#build\nwj{name=\"Encrusting center\" take_from=\"Furniture,Gem storage\"}\n```\n\n----------------------------------------\n\nTITLE: Building DFHack Documentation\nDESCRIPTION: Commands to enable building documentation for DFHack, which generates both HTML and plain text files for in-game use.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DBUILD_DOCS:bool=ON\ncmake .. -DBUILD_DOCS=1\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is in a Box with Position Arguments in Lua\nDESCRIPTION: Lua API function for checking if a unit is within a specified 3D box using position arguments.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isUnitInBox\n```\n\n----------------------------------------\n\nTITLE: Using the binpatch script for runtime patching\nDESCRIPTION: Shows the command syntax for checking, applying, or removing binary patches directly in memory at runtime using the binpatch script.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Binpatches.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbinpatch [check|apply|remove] <patchname>\n```\n\n----------------------------------------\n\nTITLE: Command History Management in Lua\nDESCRIPTION: Functions for accessing and managing command history in GUI scripts without requiring a terminal interface.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.getCommandHistory(history_id, history_filename)\ndfhack.addCommandToHistory(history_id, history_filename, command)\n```\n\n----------------------------------------\n\nTITLE: Querying Available Creature Races in Dwarf Fortress\nDESCRIPTION: Command to list all available creature races in the current Dwarf Fortress world, which can be used with the diggingInvaders plugin. The output will show race IDs that can be registered as digging invaders.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/diggingInvaders.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevel/query --table df.global.world.raws.creatures.all --search creature_id --maxdepth 1 --maxlength 5000\n```\n\n----------------------------------------\n\nTITLE: Units Module API Additions\nDESCRIPTION: Functions added to the Units module for stress category handling and management.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\n- Added to ``Units`` module:\n    - ``getStressCategory(unit)``\n    - ``getStressCategoryRaw(level)``\n    - ``stress_cutoffs`` (Lua: ``getStressCutoffs()``)\n```\n\n----------------------------------------\n\nTITLE: Setting Pet Pregnancy Duration in DFHack\nDESCRIPTION: Command to set the pregnancy duration for pets, specified in ticks.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/pet-uncapper.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\npet-uncapper pregtime <ticks>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Chocolatey on Windows\nDESCRIPTION: Series of commands to install DFHack build dependencies using the Chocolatey package manager on Windows, including Visual Studio with required components.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Dependencies.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchoco install cmake\nchoco install ccache\nchoco install strawberryperl\nchoco install python\nchoco install sphinx\n\n# Visual Studio\nchoco install visualstudio2022community --params \"--add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended\"\n# OR\n# Build Tools for Visual Studio\nchoco install visualstudio2022buildtools --params \"--add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended\"\n```\n\n----------------------------------------\n\nTITLE: World State Management API Functions - DFHack Lua\nDESCRIPTION: Functions for reading and modifying game world state including pause state, current time, weather, and game mode checks.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_85\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.world.ReadPauseState()\ndfhack.world.SetPauseState(paused)\ndfhack.world.ReadCurrentYear()\ndfhack.world.ReadCurrentTick()\ndfhack.world.SetCurrentWeather(weather)\n```\n\n----------------------------------------\n\nTITLE: Converting command arguments to boolean values\nDESCRIPTION: The argparse module now provides a boolean function to convert command line arguments to Lua boolean values.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_38\n\nLANGUAGE: Lua\nCODE:\n```\nlocal args = {...}\nlocal arg_parser = argparse.processArgs(args, validArgs)\nlocal my_bool = argparse.boolean(arg_parser.my_arg_name)\n```\n\n----------------------------------------\n\nTITLE: Multiplying Action Timers in DFHack Lua API\nDESCRIPTION: Multiplies the timers of actions of the specified type that the unit is performing by the given float amount. Includes overflow/underflow protection.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_74\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.multiplyActionTimers(unit, amount, affectedActionType)\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Visibility and Curses in DFHack Lua API\nDESCRIPTION: Functions to check if a unit is hidden or hiding a curse.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_35\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isHidden(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isHidingCurse(unit)\n```\n\n----------------------------------------\n\nTITLE: DFHack Infinite Sky Commands in RST Format\nDESCRIPTION: Command reference for the infinite-sky plugin, showing how to enable automatic sky level allocation, check status, and manually add sky levels. Includes usage examples and warning about potential cave-in issues.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/infinite-sky.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nenable infinite-sky\n    Enables monitoring of constructions. If you build anything in the second\n    highest z-level, it will allocate one more sky level. You can build stairs\n    up as high as you like!\ninfinite-sky\n    Print current status.\ninfinite-sky <n>\n    Raise the sky by n z-levels.\n```\n\n----------------------------------------\n\nTITLE: Building DFHack on macOS\nDESCRIPTION: Commands for configuring and building DFHack on macOS using CMake and Ninja, after setting the appropriate environment variables for GCC.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build-osx\ncd build-osx\ncmake .. -G Ninja -DCMAKE_BUILD_TYPE:string=Release -DCMAKE_INSTALL_PREFIX=<path to DF>\nninja install  # or ninja -jX install to specify the number of cores (X) to use\n```\n\n----------------------------------------\n\nTITLE: Using GRAY color aliases for GUI elements\nDESCRIPTION: The Lua API now provides GRAY color aliases for the existing GREY colors for more consistent color naming in scripts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_36\n\nLANGUAGE: Lua\nCODE:\n```\n-- These are now equivalent\nlocal color1 = COLOR_GREY\nlocal color2 = COLOR_GRAY\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Function Documentation - Lua\nDESCRIPTION: Core method of the Scrollbar widget class for updating scroll position and dimensions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_174\n\nLANGUAGE: lua\nCODE:\n```\nscrollbar:update(top_elem, elems_per_page, num_elems)\n```\n\n----------------------------------------\n\nTITLE: Building Tile Containment Check in DFHack API\nDESCRIPTION: Updated method for checking if a building contains a specific tile, now uses building extents instead of room parameters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_75\n\nLANGUAGE: Lua\nCODE:\n```\nBuildings::containsTile()\n```\n\n----------------------------------------\n\nTITLE: Running Dwarf Fortress with DFHack under Wine\nDESCRIPTION: Command for running the Windows version of Dwarf Fortress with DFHack using Wine on non-Windows platforms. This command launches the game through the Windows Explorer interface to ensure compatibility.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Installing.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwine64 explorer Dwarf\\ Fortress.exe\n```\n\n----------------------------------------\n\nTITLE: L-Shaped Stockpile Blueprint\nDESCRIPTION: Shows how to create a non-rectangular L-shaped food stockpile using individual cell designations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n#place A single L shaped food stockpile\nf f ` ` #\nf f ` ` #\nf f f f #\nf f f f #\n# # # # #\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is Active in C++\nDESCRIPTION: Function to check if a unit is currently active in the game. This is related to the renamed unit_flags1.inactive flag (previously called dead).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_30\n\nLANGUAGE: C++\nCODE:\n```\nUnits::isActive()\n```\n\n----------------------------------------\n\nTITLE: Using DFHack Lair Commands\nDESCRIPTION: Basic command usage for the lair tool. The first command marks the map to prevent item scatter, while the reset command restores normal map behavior.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/lair.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlair\nlair reset\n```\n\n----------------------------------------\n\nTITLE: Lua Unit Module Function Declarations\nDESCRIPTION: Declaration of new unit-related functions added to the Units Module in DFHack 0.40.24-r2. These functions provide various unit property checks and attribute access.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_44\n\nLANGUAGE: Lua\nCODE:\n```\nisWar\nisHunter\nisAvailableForAdoption\nisOwnCiv\nisOwnRace\ngetRaceName\ngetRaceNamePlural\ngetRaceBabyName\ngetRaceChildName\nisBaby\nisChild\nisAdult\nisEggLayer\nisGrazer\nisMilkable\nisTrainableWar\nisTrainableHunting\nisTamable\nisMale\nisFemale\nisMerchant\nisForest\nisMarkedForSlaughter\n```\n\n----------------------------------------\n\nTITLE: Triggering Immediate Pet Breeding in DFHack\nDESCRIPTION: Command to impregnate adult female pets with access to compatible males, up to the population cap.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/pet-uncapper.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npet-uncapper now\n```\n\n----------------------------------------\n\nTITLE: Quickfort Blueprint with Centered Start Position\nDESCRIPTION: Demonstrates how to use the start() marker to specify a centered cursor position for a workshop blueprint in Quickfort.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n#build start(2;2;center of workshop) label(stonew) a stonecutter workshop\nwm wm wm #\nwm wm wm #\nwm wm wm #\n#  #  #  #\n```\n\n----------------------------------------\n\nTITLE: Checking Out Stable Release Branch\nDESCRIPTION: Commands to switch to the stable master branch of DFHack and update submodules accordingly. This ensures you're working with stable code rather than development code.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit submodule update\n```\n\n----------------------------------------\n\nTITLE: Setting up Lua build with platform-specific flags in CMake\nDESCRIPTION: Initializes the Lua project with CMake and sets compiler flags for different platforms. Enables API checking in RelWithDebInfo builds and adds compatibility for bit32 library.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/lua/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(lua CXX)\ncmake_minimum_required(VERSION 3.21)\n\nset(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -DLUA_USE_APICHECK\")\n\n# Make bit32 library available (for things like bit32.extract())\nadd_definitions(-DLUA_COMPAT_BITLIB)\n```\n\n----------------------------------------\n\nTITLE: Getting Caste Profession Color in DFHack Lua API\nDESCRIPTION: Retrieves the profession color for a specified race, caste, and profession ID using the game's raw files. Used for determining display colors in the UI.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_64\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getCasteProfessionColor(race, caste, prof_id)\n```\n\n----------------------------------------\n\nTITLE: Listing Stockflow Work Orders Command\nDESCRIPTION: Command to display all configured work order settings for stockpiles\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/stockflow.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\nstockflow list\n```\n\n----------------------------------------\n\nTITLE: Getting Entry Types from DFHack Help Database\nDESCRIPTION: Returns the set of entry types for the given entry as a map of strings to true values.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_128\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.get_entry_types(entry)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for DFHack Rendermax Plugin\nDESCRIPTION: Configures the build system for the Rendermax plugin, including source files, headers, and linking requirements. Sets up proper installation paths for the plugin and its Lua script component.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/rendermax/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(rendermax)\n\n# A list of source files\nset(PROJECT_SRCS\n    rendermax.cpp\n    renderer_light.cpp\n)\n# A list of headers\nset(PROJECT_HDRS\n    renderer_opengl.hpp\n    renderer_light.hpp\n)\nset_source_files_properties(${PROJECT_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE)\n\n# mash them together (headers are marked as headers and nothing will try to compile them)\nlist(APPEND PROJECT_SRCS ${PROJECT_HDRS})\n\n# this makes sure all the stuff is put in proper places and linked to dfhack\ndfhack_plugin(rendermax ${PROJECT_SRCS} LINK_LIBRARIES lua)\ninstall(FILES rendermax.lua\n    DESTINATION ${DFHACK_DATA_DESTINATION}/raw)\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Instance Fields in DFHack Lua API\nDESCRIPTION: Assigns all values in the input table to the matching instance fields of a class instance.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_146\n\nLANGUAGE: lua\nCODE:\n```\ninstance:assign{ foo = xxx }\n```\n\n----------------------------------------\n\nTITLE: Generating In-Game Names in C++\nDESCRIPTION: API function that mirrors DF's internal logic for generating in-game names.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nTranslation::generateName\n```\n\n----------------------------------------\n\nTITLE: Using the 'load' Command in DFHack\nDESCRIPTION: Demonstrates the syntax for using the 'load' command in DFHack. Allows loading individual plugins by name or all plugins at once with the -a/--all flag. Note that plugins remain disabled after loading until explicitly enabled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/load.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nload <plugin> [<plugin> ...]\nload -a|--all\n```\n\n----------------------------------------\n\nTITLE: Executing Ramp Removal Command in DFHack\nDESCRIPTION: The basic command to remove designated ramps and floating down ramps from the map. No parameters are required.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/deramp.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nderamp\n```\n\n----------------------------------------\n\nTITLE: DFHack Map Access Functions\nDESCRIPTION: New Lua functions for accessing plant data at specific map coordinates\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.maps.getPlantAtTile(x, y, z)\ndfhack.maps.getPlantAtTile(pos)\ndfhack.units.teleport(unit, pos)\n```\n\n----------------------------------------\n\nTITLE: Querying Plant Types in DFHack\nDESCRIPTION: This command lists all plant types that can be used with seedwatch. It queries the game's raw data to display plant IDs.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/seedwatch.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/query --table df.global.world.raws.plants.all --search ^id --maxdepth 1\n```\n\n----------------------------------------\n\nTITLE: Running DF with GDB on Linux\nDESCRIPTION: Command to launch Dwarf Fortress with GDB debugger through the DFHack launcher script. Used for debugging and memory analysis on Linux systems.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Memory-research.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./dfhack -g\n```\n\n----------------------------------------\n\nTITLE: Using Updated Frame Naming Scheme in Lua GUI\nDESCRIPTION: The frame naming scheme in the gui module has changed from X_FRAME to FRAME_X, with aliases provided for backwards compatibility.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_51\n\nLANGUAGE: Lua\nCODE:\n```\n-- Old style\nBOLD_FRAME\n\n-- New style\nFRAME_BOLD\n```\n\n----------------------------------------\n\nTITLE: Generating a Profiler Report in DFHack Lua API\nDESCRIPTION: Writes a report from previously collected statistics to the specified output file. The optional sort_by_total_time parameter changes the sorting order from self time to total time.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_140\n\nLANGUAGE: lua\nCODE:\n```\nobj:report(outfile[, sort_by_total_time])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Operating System and DF Version in DFHack\nDESCRIPTION: Functions to get the current operating system type and Dwarf Fortress version from symbols.xml.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.getOSType()\n```\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.getDFVersion()\n```\n\n----------------------------------------\n\nTITLE: Displaying Live Performance Report in Lua\nDESCRIPTION: Shows how to use Lua to print a live performance report for DFHack, displaying measurements from when the game was loaded to the current time.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Core.rst#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n:lua require('script-manager').print_timers()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Label Text Updating in Hotkey Labels\nDESCRIPTION: New method for HotkeyLabel widget to update the label text without affecting the keyboard shortcut display.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_72\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.HotkeyLabel\n```\n\n----------------------------------------\n\nTITLE: Handling Dwarf Fortress Core Files\nDESCRIPTION: Downloads and includes Dwarf Fortress core files for testing purposes when DFHACK_INCLUDE_CORE is enabled. Handles platform-specific file formats and installation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nstring(REPLACE \".\" \"_\" DF_CORE_FILENAME \"${DF_VERSION}\")\nstring(REGEX REPLACE \"^0_\" \"df_\" DF_CORE_FILENAME \"${DF_CORE_FILENAME}\")\nif(UNIX)\n    if(APPLE)\n        string(APPEND DF_CORE_FILENAME \"_osx\")\n    else()\n        string(APPEND DF_CORE_FILENAME \"_linux\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Reading Tile Information with Extended Properties\nDESCRIPTION: The dfhack.screen.readTile() function now populates extended tile property fields (like top_of_text) in the returned Pen object, providing more detailed information about screen tiles.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_43\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.screen.readTile()\n```\n\n----------------------------------------\n\nTITLE: Lua GUI Screen Configuration\nDESCRIPTION: Example of DFHack GUI screen property usage for controlling keyboard focus\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\ngui.ZScreen.defocused = true\n```\n\n----------------------------------------\n\nTITLE: Getting Persistent World Data in DFHack\nDESCRIPTION: Retrieves the Lua table associated with the world context and the given key. If default is supplied, it is returned when the key isn't found.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.persistent.getWorldData(key[, default])\n```\n\n----------------------------------------\n\nTITLE: Using Help Command Syntax in DFHack\nDESCRIPTION: Shows the basic syntax for using the help command, either standalone to list all commands or with a specific command name to get detailed help for that command.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/help.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhelp|?|man\nhelp|?|man <command or plugin>\n```\n\n----------------------------------------\n\nTITLE: Improving Blueprint Generation in Lua\nDESCRIPTION: Updates to the blueprint plugin to support all building types, multi-type stockpiles, and include labels for quickfort compatibility.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\n-- Example of how multi-blueprint file syntax might be implemented\nlocal function generate_blueprint()\n  local blueprint = {\n    [\"#dig\"] = \"d(10x10)\",\n    [\"#build\"] = \"w(10x10)\",\n    [\"#query\"] = \"...\"\n  }\n  return blueprint\nend\n```\n\n----------------------------------------\n\nTITLE: Ruby Script Integration Example\nDESCRIPTION: Shows how to run DFHack commands from Ruby code by adding df.dfhack_run functionality.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_48\n\nLANGUAGE: Ruby\nCODE:\n```\ndf.dfhack_run \"somecommand\"\n```\n\n----------------------------------------\n\nTITLE: Basic Preserve-Rooms Command Usage\nDESCRIPTION: Shows the basic command syntax for the preserve-rooms tool, including status checking, immediate updates, and feature management.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/preserve-rooms.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npreserve-rooms [status]\\npreserve-rooms now\\npreserve-rooms enable|disable <feature>\\npreserve-rooms reset <feature>\n```\n\n----------------------------------------\n\nTITLE: Compact Two-Line Output for Cycle Hotkey Labels\nDESCRIPTION: Addition to the CycleHotkeyLabel widget that enables a more compact display format with a label positioned below the main content.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_63\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.CycleHotkeyLabel\n```\n\n----------------------------------------\n\nTITLE: Command Example - Quickfort Blueprint Filtering\nDESCRIPTION: Example of filtering quickfort blueprint listings to show only user blueprints\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nquickfort list --useronly\n```\n\n----------------------------------------\n\nTITLE: Using changevein Command Syntax in DFHack\nDESCRIPTION: Demonstrates the basic syntax for using the changevein command. The command requires a material RAW id parameter to specify what material the vein should be changed to.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changevein.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nchangevein <material RAW id>\n```\n\n----------------------------------------\n\nTITLE: Invoking Methods in Class Hierarchy (Child to Parent) in DFHack Lua API\nDESCRIPTION: Navigates the inheritance chain from most specific class upward, invoking the specified method if defined in each class. Order is from child to parent.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_150\n\nLANGUAGE: lua\nCODE:\n```\ninstance:invoke_before(method_name, args...)\n```\n\n----------------------------------------\n\nTITLE: Defining Steam Engine Boiler Stoking Reaction in Dwarf Fortress\nDESCRIPTION: This snippet defines a reaction for stoking a steam engine boiler. It specifies the reaction name, compatible buildings, fuel requirement, skill needed, and energy production. The reaction produces energy equivalent to a water wheel for 20 days.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/raw/reaction_steam_engine.txt#2025-04-21_snippet_0\n\nLANGUAGE: raw\nCODE:\n```\n[REACTION:STOKE_BOILER]\n    [NAME:stoke the boiler]\n    [BUILDING:STEAM_ENGINE:CUSTOM_S]\n    [BUILDING:MAGMA_STEAM_ENGINE:CUSTOM_S]\n    [FUEL]\n    [SKILL:SMELT]\n    [PRODUCT:100:1:LIQUID_MISC:NONE:WATER][PRODUCT_DIMENSION:2000]\n```\n\n----------------------------------------\n\nTITLE: Defining DFHack Design Tool Documentation Block\nDESCRIPTION: RST documentation block defining the design tool's properties including its summary and tags, indicating that it provides no direct commands.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/design.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. dfhack-tool::\n    :summary: Draws designations in shapes.\n    :tags: dev\n    :no-command:\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix-specific ref-index plugin in CMake\nDESCRIPTION: Conditionally builds the 'ref-index' plugin only on Unix systems using the dfhack_plugin macro.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/devel/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX)\n    dfhack_plugin(ref-index ref-index.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Lua Case Conversion Functions\nDESCRIPTION: New functions for converting string case while respecting CP437 encoding.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.upperCp437(string)\ndfhack.lowerCp437(string)\n```\n\n----------------------------------------\n\nTITLE: DFHack API Function Signature - Maps Module\nDESCRIPTION: Function signatures for biome type identification in the Maps module\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nMaps::getBiomeType\nMaps::getBiomeTypeWithRef\n```\n\n----------------------------------------\n\nTITLE: DFHack Liquids Brush Commands\nDESCRIPTION: Commands for setting the area of effect for liquid placement, including single points, ranges, blocks, columns, and flood fill options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/liquids.rst#2025-04-21_snippet_4\n\nLANGUAGE: dfhack\nCODE:\n```\np, point\nr, range\nblock\ncolumn\nflood\n```\n\n----------------------------------------\n\nTITLE: Lua EditField Widget Configuration\nDESCRIPTION: Updates to the EditField widget including new callback attributes and cursor control functionality.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nwidget.EditField {\n    onsubmit2 = function() end,  -- called on Shift-Enter\n    ignore_keys = keys_to_ignore,\n    setCursor = function(position) end\n}\n```\n\n----------------------------------------\n\nTITLE: Case Sensitivity Control for Filtered Lists\nDESCRIPTION: Added optional parameter to determine if filtering in FilteredList widget should be case sensitive or not.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_74\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.FilteredList\n```\n\n----------------------------------------\n\nTITLE: Forcing Tomb Assignment Update\nDESCRIPTION: Command to force an immediate update of tomb assignments, instead of waiting for the automatic 100-tick update interval.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/preserve-tombs.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\npreserve-tombs now\n```\n\n----------------------------------------\n\nTITLE: Example info.txt File for Quickfort Blueprints Mod\nDESCRIPTION: Sample content for an info.txt file that defines metadata for a blueprints mod, including version information, author, and Steam Workshop tags.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[ID:drooble_blueprints]\n[NUMERIC_VERSION:1]\n[DISPLAYED_VERSION:1.0.0]\n[EARLIEST_COMPATIBLE_NUMERIC_VERSION:1]\n[EARLIEST_COMPATIBLE_DISPLAYED_VERSION:1.0.0]\n[AUTHOR:Drooble]\n[NAME:Drooble's blueprints]\n[DESCRIPTION:Useful quickfort blueprints for any occasion.]\n[STEAM_TITLE:Drooble's blueprints]\n[STEAM_DESCRIPTION:Useful quickfort blueprints for any occasion.]\n[STEAM_TAG:dfhack]\n[STEAM_TAG:quickfort]\n[STEAM_TAG:blueprints]\n```\n\n----------------------------------------\n\nTITLE: Managing World-Specific Persistent State in DFHack Mods\nDESCRIPTION: Implementation of world-specific state management using the persistent-api. This code shows how to save and load mod state with a fort, handle enabling/disabling the mod, and react to world state changes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n--@ enable=true\n--@ module=true\n\nlocal utils = require('utils')\n\nlocal GLOBAL_KEY = 'mymodname'\n\nlocal function get_default_state()\n    return {\n        enabled=false,\n        somevar=0,\n        somesubtable={\n            someothervar=0,\n        },\n    }\nend\nstate = state or get_default_state()\n\n-- implement the enabled API so DFHack can read this script's status\nfunction isEnabled()\n    return state.enabled\nend\n\nlocal function persist_state()\n    dfhack.persistent.saveSiteData(GLOBAL_KEY, state)\nend\n\nlocal function do_enable()\n    -- initialization tasks, such as hooking events\nend\n\nlocal function do_disable()\n    -- cleanup tasks, such as removing event hooks\nend\n\ndfhack.onStateChange[GLOBAL_KEY] = function(sc)\n    if sc == SC_MAP_UNLOADED then\n        do_disable()\n\n        -- ensure our mod doesn't run when a different\n        -- world is loaded where we are *not* active\n        dfhack.onStateChange[GLOBAL_KEY] = nil\n\n        return\n    end\n\n    if sc ~= SC_MAP_LOADED or not dfhack.world.isFortressMode() then\n        return\n    end\n\n    -- retrieve state saved in game. merge with default state so config\n    -- saved from previous versions can pick up newer defaults.\n    state = get_default_state()\n    utils.assign(state, dfhack.persistent.getSiteData(GLOBAL_KEY, state))\n    if state.enabled then\n        do_enable()\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Building Control Framework for Menus in DF\nDESCRIPTION: Description of a framework added to DFHack for controlling and reading menus in DF, currently supporting only the building menu. This is part of a list of feature additions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n- added a basic framework for controlling and reading the menus in DF (currently only supports the building menu)\n```\n\n----------------------------------------\n\nTITLE: Subtracting Group Action Timers in DFHack Lua API\nDESCRIPTION: Subtracts a specified amount from timers of actions the unit is performing that match the specified action type group. Negative amounts add to timers. Includes overflow/underflow protection.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_73\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.subtractGroupActionTimers(unit, amount, affectedActionTypeGroup)\n```\n\n----------------------------------------\n\nTITLE: Coating Ammunition with Creature Extracts\nDESCRIPTION: Defines a reaction for coating ammunition with creature extracts at a greasing station. Requires 50 units of extract, a container, ammunition (minimum 5 units), and tallow. Uses dyeing skill.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/raw/reaction_spatter.txt#2025-04-21_snippet_2\n\nLANGUAGE: dfhack-reaction\nCODE:\n```\n[REACTION:SPATTER_ADD_AMMO_EXTRACT]\n    [NAME:coat ammo with extract]\n    [BUILDING:GREASING_STATION:CUSTOM_A]\n    [SKILL:DYER]\n    [REAGENT:extract:50:LIQUID_MISC:NONE:NONE:NONE]\n        [MIN_DIMENSION:50]\n        [REACTION_CLASS:CREATURE_EXTRACT]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [REAGENT:extract container:1:NONE:NONE:NONE:NONE]\n        [CONTAINS:extract]\n        [PRESERVE_REAGENT]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n        [CAN_USE_ARTIFACT]\n    [REAGENT:object:1:AMMO:NONE:NONE:NONE]\n        [PRESERVE_REAGENT]\n        [MIN_DIMENSION:5]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [REAGENT:grease:1:GLOB:NONE:NONE:NONE][REACTION_CLASS:TALLOW][UNROTTEN]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [TRANSFER_ARTIFACT_STATUS]\n    [IMPROVEMENT:200:object:COVERED:GET_MATERIAL_FROM_REAGENT:extract:NONE]\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Version Information in CMake\nDESCRIPTION: Sets up the dfhack-version static library with version information from CMake variables. Creates compile definitions for version numbers, release status, and other build metadata.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dfhack-version STATIC ${VERSION_SRCS})\nset_property(TARGET dfhack-version APPEND PROPERTY COMPILE_DEFINITIONS\n    DFHACK_VERSION=\"${DFHACK_VERSION}\"\n    DF_VERSION=\"${DF_VERSION}\"\n    DFHACK_RELEASE=\"${DFHACK_RELEASE}\"\n    DFHACK_ABI_VERSION=${DFHACK_ABI_VERSION}\n    DFHACK_RUN_URL=\"${DFHACK_RUN_URL}\"\n)\ntarget_include_directories(dfhack-version PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)\nif(DFHACK_PRERELEASE)\n    set_property(TARGET dfhack-version APPEND PROPERTY COMPILE_DEFINITIONS\n        DFHACK_PRERELEASE=1\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Deployment Target\nDESCRIPTION: Environment variable configuration for building on OS X 10.10 (Yosemite) or above.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport MACOSX_DEPLOYMENT_TARGET=10.9\n```\n\n----------------------------------------\n\nTITLE: Type Identity Core Methods Definition\nDESCRIPTION: Core public methods defined by the type_identity base class for handling data object metadata and Lua integration\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/data-identity.rst#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbyte_size()     // Returns object size in bytes\ntype()          // Returns identity_type enum classification\ngetFullName()    // Returns type description string\nlua_read()      // Reads C++ data into Lua state\nlua_write()     // Writes Lua data into C++ object\nbuild_metatable() // Creates Lua metatable for type\nis_primitive()   // Indicates if type has direct Lua representation\nis_constructed() // Indicates if type needs non-trivial constructor\nis_container()   // Indicates if type is a container\nallocate()      // Allocates and constructs C++ instance\ncopy()          // Copies object data between instances\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Plugins Build Option in CMake\nDESCRIPTION: Defines a CMake option to build supported plugins and sets up build configurations for various DFHack plugins if enabled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SUPPORTED \"Build the supported plugins (reveal, probe, etc.).\" ON)\nif(BUILD_SUPPORTED)\n    dfhack_plugin(3dveins 3dveins.cpp)\n    dfhack_plugin(army-controller-sanity army-controller-sanity.cpp)\n    dfhack_plugin(add-spatter add-spatter.cpp)\n    dfhack_plugin(aquifer aquifer.cpp LINK_LIBRARIES lua)\n    # ... (many more plugin definitions)\n    dfhack_plugin(zone zone.cpp LINK_LIBRARIES lua)\nendif(BUILD_SUPPORTED)\n```\n\n----------------------------------------\n\nTITLE: Generating In-Game Names in Lua\nDESCRIPTION: Lua API wrapper for the C++ Translation::generateName function.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.translation.generateName\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unit Race Names in DFHack Lua API\nDESCRIPTION: Functions to retrieve various forms of unit race names.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_48\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceNameById(race)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceName(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceReadableNameById(race)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceReadableName(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceNamePluralById(race)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceNamePlural(unit)\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceBabyNameById(race[,plural])\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceBabyName(unit[,plural])\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceChildNameById(race[,plural])\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getRaceChildName(unit[,plural])\n```\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getReadableName(unit or historical_figure)\n```\n\n----------------------------------------\n\nTITLE: Dig-Now Usage Examples\nDESCRIPTION: Demonstrates common usage patterns for the dig-now command, including basic usage, clean digging without item generation, and dumping generated items at a specific location.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/dig-now.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndig-now\ndig-now --clean\ndig-now --dump here\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Token from Type Definition in DFHack Lua API\nDESCRIPTION: Retrieves the arguments of a custom token from a type definition struct. Returns the arguments as strings using single or multiple return values, or returns true/false for tokens without arguments or non-existent tokens.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_152\n\nLANGUAGE: lua\nCODE:\n```\ncustomRawTokens.getToken(typeDefinition, token)\n```\n\n----------------------------------------\n\nTITLE: Accessing Biome Type Information in Lua\nDESCRIPTION: Function that exposes preexisting biome type functionality to Lua scripts, allowing them to query biome information.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_66\n\nLANGUAGE: Lua\nCODE:\n```\nmaps.getBiomeType\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Script Command\nDESCRIPTION: Shows the basic usage syntax for the DFHack 'script' command. It takes a filename as an argument and executes each line in the file as a DFHack command.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/script.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nscript <filename>\n```\n\n----------------------------------------\n\nTITLE: Getting Stress Cutoffs in DFHack Lua API\nDESCRIPTION: Returns a table of the cutoff values used by the stress level functions to determine which category a given stress level falls into.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_71\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getStressCutoffs()\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Stress Category in DFHack Lua API\nDESCRIPTION: Identical to getStressCategory but takes a raw stress level instead of a unit. Converts the numerical stress value to the 0-6 category scale.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_70\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getStressCategoryRaw(stress_level)\n```\n\n----------------------------------------\n\nTITLE: Building DFHack on Linux\nDESCRIPTION: Commands for configuring and building DFHack on Linux using CMake and Ninja. The build artifacts are installed to the specified Dwarf Fortress directory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd build\ncmake .. -G Ninja -DCMAKE_BUILD_TYPE:string=Release -DCMAKE_INSTALL_PREFIX=<path to DF>\nninja install  # or ninja -jX install to specify the number of cores (X) to use\n```\n\n----------------------------------------\n\nTITLE: Steam SDK Verification and Extraction in CMake\nDESCRIPTION: Verifies the Steam SDK zip file hash and extracts it if needed. Checks for correct SDK version and handles platform-specific library paths.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/package/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (STEAMAPI_DIR ${dfhack_SOURCE_DIR}/depends/steam)\nset (STEAMAPI_VER 156)\nset (STEAMAPI_ZIP_EXPECTED_HASH af5a579990dbe5ae4c1b0689260d001b)\nset (STEAMSDK_ZIP ${STEAMAPI_DIR}/steamworks_sdk_${STEAMAPI_VER}.zip)\n\nset (STEAM_SDK_HASH \"NOT FOUND\")\nfile(MD5 ${STEAMSDK_ZIP} STEAM_SDK_HASH)\nif (NOT (${STEAM_SDK_HASH} STREQUAL ${STEAMAPI_ZIP_EXPECTED_HASH}))\n    message(FATAL_ERROR \"You need the Steamworks SDK at ${STEAMSDK_ZIP} to build launchdf.exe. Please disable the BUILD_DFLAUNCH CMake option or download the Steam SDK from: https://partner.steamgames.com/downloads/steamworks_sdk_${STEAMAPI_VER}.zip\")\nendif()\nif (${STEAMSDK_ZIP} IS_NEWER_THAN ${STEAMAPI_DIR}/sdk)\n    file(ARCHIVE_EXTRACT\n        INPUT ${STEAMSDK_ZIP}\n        DESTINATION ${STEAMAPI_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Animal Training Status in Lua\nDESCRIPTION: New animal property check functions in the dfhack.units namespace to determine whether a unit is marked for various types of animal training or taming.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_44\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isMarkedForTraining(unit)\ndfhack.units.isMarkedForTaming(unit)\ndfhack.units.isMarkedForWarTraining(unit)\ndfhack.units.isMarkedForHuntTraining(unit)\n```\n\n----------------------------------------\n\nTITLE: Mouse Button Keybindings for Different Selection Contexts\nDESCRIPTION: Binds the fourth mouse button to different commands based on what is selected - teleport tool for units and autodump for items.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/keybinding.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkeybinding add MOUSE4@dwarfmode/ViewSheets/UNIT gui/teleport\nkeybinding add MOUSE4@dwarfmode/ViewSheets/ITEM gui/autodump\n```\n\n----------------------------------------\n\nTITLE: Linking DFHack Libraries and Dependencies in CMake\nDESCRIPTION: Links the DFHack libraries with their dependencies including Protobuf, clsocket, Lua, and JsonCPP. Sets platform-specific links for the client library and dfhack-run utility.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(dfhack protobuf-lite clsocket lua jsoncpp_static dfhack-version ${PROJECT_LIBS})\nset_target_properties(dfhack PROPERTIES INTERFACE_LINK_LIBRARIES \"\")\n\ntarget_link_libraries(dfhack-client protobuf-lite clsocket jsoncpp_static)\nif(WIN32)\n    target_link_libraries(dfhack-client dbghelp)\nendif()\ntarget_link_libraries(dfhack-run dfhack-client)\n```\n\n----------------------------------------\n\nTITLE: Getting item container capacity\nDESCRIPTION: Retrieves the capacity of an item as a container using the getCapacity function from the items module.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_35\n\nLANGUAGE: Lua\nCODE:\n```\nlocal capacity = dfhack.items.getCapacity(item)\n```\n\n----------------------------------------\n\nTITLE: Calling Ruby DF Print Color Method in DFHack Console\nDESCRIPTION: A Ruby method for printing colored text to the DFHack console. Takes a color and string parameter.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\ndf.print_color(color, string)\n```\n\n----------------------------------------\n\nTITLE: Batch Modifying Items at Cursor\nDESCRIPTION: Changes properties of all items at the cursor position. Requires an active in-game cursor.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/changeitem.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchangeitem here [<options>]\n```\n\n----------------------------------------\n\nTITLE: Documenting External DFHack Script\nDESCRIPTION: Example of header documentation for an external DFHack script, showing proper format for short description and main help text.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Documentation.rst#2025-04-21_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- A short description of my cool script.\n```\n\n----------------------------------------\n\nTITLE: Getting walkable group information for a tile\nDESCRIPTION: Use the getWalkableGroup function to retrieve the walkability group of a specific tile in the map.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_31\n\nLANGUAGE: Lua\nCODE:\n```\nlocal group = dfhack.maps.getWalkableGroup(x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Using the unload command in DFHack\nDESCRIPTION: Demonstrates the syntax for unloading individual plugins or all plugins at once. Users can specify one or more plugin names to unload specific plugins, or use the -a/--all flag to unload all plugins.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/unload.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nunload <plugin> [<plugin> ...]\nunload -a|--all\n```\n\n----------------------------------------\n\nTITLE: Re-initializing a Random Number Generator in DFHack\nDESCRIPTION: Re-initializes an already existing random number generator object with the specified seed and optional perturbation count.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nrng:init([seed[,perturb_count]])\n```\n\n----------------------------------------\n\nTITLE: Throwing User Errors in DFHack Scripts\nDESCRIPTION: Calls dfhack.error() with verbose being false, intended for user-caused errors in scripts where stack traces are not desirable.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nqerror(msg[,level])\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is Agitated in Lua\nDESCRIPTION: Lua API function for checking if a unit is in an agitated state.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.isAgitated\n```\n\n----------------------------------------\n\nTITLE: DFHack Architecture Detection API\nDESCRIPTION: New Lua API functions added for detecting DFHack architecture details\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_40\n\nLANGUAGE: Lua\nCODE:\n```\nlocal arch = dfhack.getArchitecture()\nlocal archName = dfhack.getArchitectureName()\n```\n\n----------------------------------------\n\nTITLE: Listing Stone Materials in Lua\nDESCRIPTION: Lua command to iterate through and display all valid stone materials that can be used in stockpiles.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/jobutils.rst#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlua \"for i,mat in ipairs(df.global.world.raws.inorganics) do if mat.material.flags.IS_STONE and not mat.material.flags.NO_STONE_STOCKPILE then print(i, mat.id) end end\"\n```\n\n----------------------------------------\n\nTITLE: Error-only Function Finalization in DFHack\nDESCRIPTION: Calls a function with arguments, then finalizes with cleanup_fn only if an error is thrown. Implemented using call_with_finalizer(0,false,...).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.with_onerror(cleanup_fn,fn[,args...])\n```\n\n----------------------------------------\n\nTITLE: Configuring Ninja Generator for DFHack\nDESCRIPTION: Command to set up the Ninja build system for compiling DFHack, which is generally preferred when available.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -G Ninja\n```\n\n----------------------------------------\n\nTITLE: DFHack Tool Definition - Pathable Plugin\nDESCRIPTION: RST-style documentation defining the pathable tool capabilities in DFHack. Specifies that it provides only an API without direct commands, intended for development use.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/pathable.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. dfhack-tool::\n    :summary: Highlights pathable tiles.\n    :tags: dev\n    :no-command:\n```\n\n----------------------------------------\n\nTITLE: Getting Squad Name in DFHack Lua API\nDESCRIPTION: Returns the name of a squad as a string, identified by its squad_id.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_80\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.military.getSquadName(squad_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Autohauler Plugin\nDESCRIPTION: Configuration commands for the autohauler plugin to manage civilian water feeding and wounded recovery labors\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/manipulator.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack-init\nCODE:\n```\non-new-fortress enable autohauler\non-new-fortress autohauler FEED_WATER_CIVILIANS allow\non-new-fortress autohauler RECOVER_WOUNDED allow\n```\n\n----------------------------------------\n\nTITLE: Logistics Basic Commands Usage\nDESCRIPTION: Core command syntax for the logistics plugin, showing basic enable/status operations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/logistics.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable logistics\nlogistics [status]\nlogistics now\nlogistics add [melt] [trade] [dump] [train] [forbid|claim] [<options>]\nlogistics clear [all] [<options>]\nlogistics (enable|disable) autoretrain\n```\n\n----------------------------------------\n\nTITLE: Defining DFHack Tool Metadata in reStructuredText\nDESCRIPTION: Specifies metadata for the 'sort' tool using DFHack's custom reStructuredText directives. It includes a summary and tags for categorization.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/sort.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. dfhack-tool::\n    :summary: Search and sort lists shown in the DF interface.\n    :tags: fort productivity interface\n    :no-command:\n```\n\n----------------------------------------\n\nTITLE: Completing a building construction programmatically\nDESCRIPTION: Use the completebuild function to link a newly created building into the world, making it functional.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_34\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.buildings.completebuild(building)\n```\n\n----------------------------------------\n\nTITLE: Using the Plug Command in DFHack\nDESCRIPTION: Shows the syntax for using the 'plug' command. When run without parameters, it lists all available plugins; when provided with plugin names as arguments, it only lists information about those specific plugins.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/plug.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nplug [<plugin> [<plugin> ...]]\n```\n\n----------------------------------------\n\nTITLE: Defining File Extensions for Linting in DFHack Project\nDESCRIPTION: This snippet lists the file extensions that the lint.py script should check in the DFHack project. It includes various programming languages, scripting languages, markup languages, and configuration file formats.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/ci/lint-check.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n*.bash\n*.bat\n*.c\n*.cc\n*.cmake\n*.cpp\n*.css\n*.gitignore\n*.h\n*.hh\n*.hpp\n*.in\n*.inc\n*.init\n*.init-example\n*.js\n*.lua\n*.manifest\n*.md\n*.mm\n*.pl\n*.proto\n*.py\n*.rb\n*.rst\n*.sh\n*.txt\n*.vbs\n*.yaml\n*.yml\n```\n\n----------------------------------------\n\nTITLE: Lua View Focus Implementation\nDESCRIPTION: Enhancement to GUI View classes allowing keyboard focus management via setFocus() function.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nView:setFocus()\n```\n\n----------------------------------------\n\nTITLE: DFHack Lua World API Functions\nDESCRIPTION: World state query functions in Lua API\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_29\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.world.getCurrentSite\ndfhack.isSiteLoaded\n```\n\n----------------------------------------\n\nTITLE: DFHack Painter API Enhancement\nDESCRIPTION: Addition of key_string() method to the Painter class in Lua API\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_41\n\nLANGUAGE: Lua\nCODE:\n```\nlocal painter = Painter.new()\npainter:key_string()\n```\n\n----------------------------------------\n\nTITLE: Generating Headers for DFHack API\nDESCRIPTION: Configures code generation for DFHack API headers using Perl scripts and XML files. Sets up custom commands and targets for header generation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CODEGEN_OUT ${dfapi_SOURCE_DIR}/include/df/codegen.out.xml)\n\nfile(GLOB GENERATE_INPUT_SCRIPTS ${dfapi_SOURCE_DIR}/xml/*.pm ${dfapi_SOURCE_DIR}/xml/*.xslt)\nfile(GLOB GENERATE_INPUT_XMLS ${dfapi_SOURCE_DIR}/xml/df.*.xml)\n\nexecute_process(COMMAND ${PERL_EXECUTABLE} xml/list.pl xml ${dfapi_SOURCE_DIR}/include/df \";\"\n    WORKING_DIRECTORY ${dfapi_SOURCE_DIR}\n    OUTPUT_VARIABLE GENERATED_HDRS)\n\nset_source_files_properties(${GENERATED_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE GENERATED TRUE)\n\nadd_custom_command(\n    OUTPUT ${CODEGEN_OUT}\n    BYPRODUCTS ${GENERATED_HDRS}\n    COMMAND ${PERL_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/xml/codegen.pl\n        ${CMAKE_CURRENT_SOURCE_DIR}/xml\n        ${CMAKE_CURRENT_SOURCE_DIR}/include/df\n    MAIN_DEPENDENCY ${dfapi_SOURCE_DIR}/xml/codegen.pl\n    COMMENT \"Generating codegen.out.xml and df/headers\"\n    DEPENDS ${GENERATE_INPUT_XMLS} ${GENERATE_INPUT_SCRIPTS}\n)\n\nif(NOT(\"${CMAKE_GENERATOR}\" STREQUAL Ninja))\n    # use BYPRODUCTS instead under Ninja to avoid rebuilds\n    list(APPEND CODEGEN_OUT ${GENERATED_HDRS})\nendif()\n\nadd_custom_target(generate_headers DEPENDS ${CODEGEN_OUT})\n```\n\n----------------------------------------\n\nTITLE: Configuring DwarfMonitor Widget Settings - JSON\nDESCRIPTION: Example configuration file for dwarfmonitor showing how to customize date format, coordinate display type, and coordinate display style in the dfhack-config/dwarfmonitor.json file.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/dwarfmonitor.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"date_format\": \"m/d/y\",\n    \"coords_type\": \"mouse_map\",\n    \"coords_short\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Livestock Management Configuration\nDESCRIPTION: Complete configuration example for managing multiple animal species including dogs, cats, geese, alpacas, sheep, llamas, and pigs with specific population targets.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autobutcher.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenable autobutcher\nautobutcher target 2 2 2 2 DOG\nautobutcher target 1 1 2 2 CAT\nautobutcher target 10 10 14 2 BIRD_GOOSE\nautobutcher target 2 2 4 2 ALPACA SHEEP LLAMA\nautobutcher target 5 5 6 2 PIG\nautobutcher target 0 0 0 0 new\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Build\nDESCRIPTION: Sets up file dependencies and build targets for Sphinx documentation generation. Configures build options for HTML and text output formats.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB SPHINX_GLOB_DEPS\n    LIST_DIRECTORIES false\n    \"${CMAKE_CURRENT_SOURCE_DIR}/docs/images/*.png\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/docs/styles/*\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/data/init/*init\"\n)\nfile(GLOB_RECURSE SPHINX_GLOB_RECURSE_DEPS\n    \"${CMAKE_CURRENT_SOURCE_DIR}/*.rst\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/changelog.txt\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/docs/*py\"\n)\n```\n\n----------------------------------------\n\nTITLE: Lua Persistence API Example\nDESCRIPTION: New table-driven API for world and site-associated persistent storage\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.persistent\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Starting DF/DFHack with Arguments\nDESCRIPTION: Examples showing how to run DFHack commands at startup from an OS terminal using the '+' syntax to pass commands directly to DFHack.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Core.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./dfhack +load-save region1\n\"Dwarf Fortress.exe\" +devel/print-args Hello! +enable workflow\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Definition\nDESCRIPTION: ReStructuredText toctree directive that defines the documentation structure and hierarchy for DFHack development guides.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   /docs/dev/Dev-intro\n   /docs/dev/compile/index\n   /docs/dev/Contributing\n   /docs/dev/Documentation\n   /docs/api/index\n   /docs/dev/Lua API\n   /docs/dev/overlay-dev-guide\n   /docs/dev/Structures-intro\n   /docs/dev/data-identity\n   /docs/dev/github-workflows\n   /docs/dev/release-process\n   /docs/dev/Memory-research\n   /docs/dev/Binpatches\n   /docs/dev/Remote\n   /docs/NEWS-dev\n```\n\n----------------------------------------\n\nTITLE: Configure Blocking Prevention\nDESCRIPTION: Command to configure whether construction jobs should be prevented from blocking each other.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/suspendmanager.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nsuspendmanager set preventblocking (true|false)\n```\n\n----------------------------------------\n\nTITLE: New Lua Widget Label Feature\nDESCRIPTION: Enhancement to widgets.Label allowing pen attributes to be either a pen object or a function that dynamically returns a pen.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_22\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.Label.pen = penObject -- or function that returns pen\n```\n\n----------------------------------------\n\nTITLE: Checking Preserve-Tombs Status\nDESCRIPTION: Command to check the plugin status and view current tomb assignments if enabled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/preserve-tombs.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\npreserve-tombs [status]\n```\n\n----------------------------------------\n\nTITLE: Enabling the Generated Creature Renamer in DFHack\nDESCRIPTION: Command to enable the plugin which will automatically rename generated creatures (like forgotten beasts, titans, etc.) when a world is loaded.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/generated-creature-renamer.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable generated-creature-renamer\n```\n\n----------------------------------------\n\nTITLE: Building and configuring Lua shared library with platform-specific options\nDESCRIPTION: Creates a shared Lua library with proper naming and linking. Applies platform-specific compiler options including header inclusion and warning suppression. Sets up installation directories.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/lua/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(lua SHARED ${SRC_LIBLUA})\nset_target_properties(lua PROPERTIES OUTPUT_NAME lua53)\ntarget_link_libraries(lua ${LIBS})\ntarget_include_directories(lua INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)\n\nif(MSVC)\n    # need no space to prevent /FI from being stripped: https://github.com/DFHack/dfhack/issues/1455\n    target_compile_options(lua PRIVATE \"/FIdfhack_llimits.h\")\nelse()\n    target_compile_options(lua PRIVATE -include dfhack_llimits.h)\n    set_source_files_properties(src/lstring.c PROPERTIES COMPILE_FLAGS \"-Wno-stringop-overflow\")\nendif()\n\ninstall(TARGETS lua\n    LIBRARY DESTINATION ${DFHACK_LIBRARY_DESTINATION}\n    RUNTIME DESTINATION ${DFHACK_LIBRARY_DESTINATION})\n\nide_folder(lua \"Depends\")\n```\n\n----------------------------------------\n\nTITLE: Backward Cycling in Cycle Hotkey Labels\nDESCRIPTION: Added backward cycling capability to CycleHotkeyLabel widget through an optional key_back parameter.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_71\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.CycleHotkeyLabel\n```\n\n----------------------------------------\n\nTITLE: Widget Positioning and Triggering Commands\nDESCRIPTION: Commands for positioning widgets and triggering widget actions\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/overlay.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\noverlay position <name or list number> [default|<x> <y>]\noverlay trigger <name or list number>\n```\n\n----------------------------------------\n\nTITLE: Using Tubefill Command in DFHack\nDESCRIPTION: Command syntax for the tubefill tool. The optional 'hollow' parameter determines whether naturally hollow adamantine veins should also be filled. Using the hollow parameter can trigger demon invasions when mining the restored areas.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/tubefill.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ntubefill [hollow]\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack 'channel-safely' Plugin Build\nDESCRIPTION: Sets up the project name, defines source files, and configures the DFHack plugin build process. The plugin is linked with the Lua library.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/channel-safely/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(channel-safely)\n\nSET(SOURCES\n        channel-groups.cpp\n        channel-manager.cpp\n        channel-safely-plugin.cpp)\n\ndfhack_plugin(${PROJECT_NAME} ${SOURCES} LINK_LIBRARIES lua)\n```\n\n----------------------------------------\n\nTITLE: Updating Activation Callback in Hotkey Labels\nDESCRIPTION: Method added to HotkeyLabel widget that allows easily updating the on_activate callback after widget creation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_73\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.HotkeyLabel\n```\n\n----------------------------------------\n\nTITLE: Mechanism GUI\nDESCRIPTION: Shows how to browse mechanism links for the current building.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_50\n\nLANGUAGE: Lua\nCODE:\n```\ngui/mechanisms\n```\n\n----------------------------------------\n\nTITLE: Setting Pet Population Cap in DFHack\nDESCRIPTION: Command to set a new population cap per species. A value of 0 means no cap.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/pet-uncapper.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\npet-uncapper cap <value>\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Search in Filtered Lists\nDESCRIPTION: Update to the FilteredList widget making search key matching case insensitive by default, improving user search experience.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_64\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.FilteredList\n```\n\n----------------------------------------\n\nTITLE: Deleting Persistent Site Data in DFHack\nDESCRIPTION: Removes the existing entry associated with the current site and the given key. Returns true if succeeded.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.persistent.deleteSiteData(key)\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Tweak Plugin in CMake\nDESCRIPTION: This CMake script configures the 'tweak' plugin for DFHack. It sets the project name, defines the source files, and specifies the plugin build settings including linking against the Lua library.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/tweak/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(tweak)\nset(PROJECT_SRCS\n    tweak.cpp\n)\n\ndfhack_plugin(tweak ${PROJECT_SRCS} LINK_LIBRARIES lua)\n```\n\n----------------------------------------\n\nTITLE: Building Full Protobuf Libraries and Compiler for Native Builds\nDESCRIPTION: Creates and configures the full protobuf library, protoc compiler library, and protoc executable for non-cross-compiling builds. Sets compile definitions, links required libraries, and exports the protoc binary for use in the build process.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/protobuf/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_CROSSCOMPILING)\n    add_library(protobuf SHARED ${LIBPROTOBUF_FULL_SRCS} ${LIBPROTOBUF_FULL_HDRS})\n    ide_folder(protobuf \"Depends\")\n    set_target_properties(protobuf PROPERTIES COMPILE_DEFINITIONS LIBPROTOBUF_EXPORTS)\n    target_link_libraries(protobuf ${CMAKE_THREAD_LIBS_INIT} ${ZLIB_LIBRARIES})\n\n    # Protobuf compiler shared library\n\n    add_library(protoc SHARED ${LIBPROTOC_SRCS} ${LIBPROTOC_HDRS})\n    ide_folder(protoc \"Depends\")\n\n    set_target_properties(protoc PROPERTIES COMPILE_DEFINITIONS LIBPROTOC_EXPORTS)\n    target_link_libraries(protoc protobuf)\n\n    # Protobuf compiler executable\n\n    add_executable(protoc-bin google/protobuf/compiler/main.cc google/protobuf/compiler/command_line_interface.h google/protobuf/compiler/cpp/cpp_generator.h)\n    ide_folder(protoc-bin \"Depends\")\n\n    set_target_properties(protoc-bin PROPERTIES OUTPUT_NAME protoc)\n    target_link_libraries(protoc-bin protoc)\n\n    export(TARGETS protoc-bin FILE ${CMAKE_BINARY_DIR}/ImportExecutables.cmake )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Computing Unit Movement Speed in DFHack Lua API\nDESCRIPTION: Computes the number of frames * 100 it takes the unit to move in its current state. This function is currently broken due to move speed changes and will always return 0.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_57\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.computeMovementSpeed(unit)\n```\n\n----------------------------------------\n\nTITLE: Defining DFHack Plugin Build Configuration\nDESCRIPTION: Configures the check-structures-sanity plugin build with Lua library dependency and specific compiler flags for GCC and MSVC.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/devel/check-structures-sanity/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ndfhack_plugin(check-structures-sanity ${PLUGIN_SRCS} LINK_LIBRARIES lua COMPILE_FLAGS_GCC \"-O0 -ggdb3\" COMPILE_FLAGS_MSVC \"/Od\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Multi-line Message in CSV Quickfort Blueprint\nDESCRIPTION: Shows how to use the message() marker in a CSV Quickfort blueprint to display a multi-line message after the blueprint is applied.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_29\n\nLANGUAGE: csv\nCODE:\n```\n\"#meta label(surface1) message(This would be a good time to start digging the industry level.\\nOnce the area is clear, continue with /surface2.) clear the embark site and set up pastures\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Plugin Source Files\nDESCRIPTION: Sets up source file list for the check-structures-sanity plugin including dispatch, main, types, and validate components.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/devel/check-structures-sanity/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLUGIN_SRCS\n    dispatch.cpp\n    main.cpp\n    types.cpp\n    validate.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Resetting Performance Counters for All Elapsed Time in Lua\nDESCRIPTION: Shows how to reset DFHack performance counters to measure performance over all elapsed time, not just unpaused time, using Lua.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Core.rst#2025-04-21_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n:lua dfhack.internal.resetPerfCounters(true)\n```\n\n----------------------------------------\n\nTITLE: Using dfhack.job.isSuitableMaterial with Item Type Parameter\nDESCRIPTION: Reference to an enhancement to the dfhack.job.isSuitableMaterial() function that now includes an item type parameter to properly handle the non_economic flag for specific item types like boulders.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_17\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.job.isSuitableMaterial()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pet Breeding Frequency in DFHack\nDESCRIPTION: Command to set how often the plugin will cause pregnancies, specified in ticks.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/pet-uncapper.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npet-uncapper every <ticks>\n```\n\n----------------------------------------\n\nTITLE: Interior Frame Style for UI Panels\nDESCRIPTION: A new panel frame style for highlighting interior areas of a UI, replacing the previous THIN_FRAME style.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_65\n\nLANGUAGE: Lua\nCODE:\n```\ngui.INTERIOR_FRAME\n```\n\n----------------------------------------\n\nTITLE: Installing DFHack Data Files in CMake\nDESCRIPTION: Configures installation of data files for DFHack when INSTALL_DATA_FILES is enabled. Includes XML symbols file, Lua scripts, and patches, placing them in their respective destination directories.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# install the offset file\nif(INSTALL_DATA_FILES)\n    install(FILES xml/symbols.xml\n        DESTINATION ${DFHACK_DATA_DESTINATION})\n\n    install(DIRECTORY lua/\n        DESTINATION ${DFHACK_LUA_DESTINATION}\n        FILES_MATCHING PATTERN \"*.lua\")\n\n    install(DIRECTORY ${dfhack_SOURCE_DIR}/patches\n        DESTINATION ${DFHACK_DATA_DESTINATION}\n        FILES_MATCHING PATTERN \"*.dif\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Examples of Tweak Command Usage\nDESCRIPTION: Provides specific examples of how to use the 'tweak' command with different options and tweaks.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/tweak.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntweak eggs-fertile\ntweak fast-heat quiet\ntweak fast-heat disable quiet\n```\n\n----------------------------------------\n\nTITLE: Creating Plant Growth Example\nDESCRIPTION: Creates a single bilberry fruit, demonstrating the syntax for plant growths.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/createitem.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ncreateitem PLANT_GROWTH BILBERRY:FRUIT\n```\n\n----------------------------------------\n\nTITLE: Adding DEV_PLUGIN definition in CMake\nDESCRIPTION: Adds a preprocessor definition for DEV_PLUGIN, likely used to enable development-specific features in the plugins.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/devel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DDEV_PLUGIN)\n```\n\n----------------------------------------\n\nTITLE: Displaying Valid Vein Types in Lua\nDESCRIPTION: This Lua snippet displays the valid vein types that can be used with the 'veintype' command in tiletypes. It uses the DFHack API to print the inclusion_type enum.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/tiletypes.rst#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n@df.inclusion_type\n```\n\n----------------------------------------\n\nTITLE: 4x4 Room Dig Blueprint\nDESCRIPTION: CSV blueprint for digging out a 4x4 room using 'd' designations with optional '#' boundary markers\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n#dig\nd d d d #\nd d d d #\nd d d d #\nd d d d #\n# # # # #\n```\n\n----------------------------------------\n\nTITLE: CMake Build Changes\nDESCRIPTION: Changes to CMake build system including ignoring custom CMakeLists and fixing dependency handling for generated headers.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\n- Changed ``plugins/CMakeLists.custom.txt`` to be ignored by git and created (if needed) at build time instead\n- Fixed CMake build dependencies for generated header files\n- Fixed custom ``CMAKE_CXX_FLAGS`` not being passed to plugins\n```\n\n----------------------------------------\n\nTITLE: Invoking Methods in Class Hierarchy (Parent to Child) in DFHack Lua API\nDESCRIPTION: Similar to invoke_before, but the methods are called after the recursive call to super, so invocations happen in parent to child order.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_151\n\nLANGUAGE: lua\nCODE:\n```\ninstance:invoke_after(method_name, args...)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is a Ghost in C++\nDESCRIPTION: Function to check if a unit is a ghost, which affects how the unit should be handled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_31\n\nLANGUAGE: C++\nCODE:\n```\nUnits::isGhost()\n```\n\n----------------------------------------\n\nTITLE: Designating Minecart Track Segments\nDESCRIPTION: Example of how to designate minecart tracks using area expansion syntax with height or width of 1\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n#dig\n`      T(1x3) ` #\nT(3x1) `      ` #\n`      `      ` #\n#      #      # #\n```\n\n----------------------------------------\n\nTITLE: Using Bold Frame Window Border in Lua\nDESCRIPTION: Reference to a window border constant for creating accented UI elements in Lua interfaces.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_57\n\nLANGUAGE: Lua\nCODE:\n```\ngui.BOLD_FRAME\n```\n\n----------------------------------------\n\nTITLE: getplants Command Example for Listing All IDs\nDESCRIPTION: Lists all valid plant IDs without any filtering.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/getplants.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngetplants\n```\n\n----------------------------------------\n\nTITLE: Importing Range Slider Widget in Lua\nDESCRIPTION: Reference to a new mouse-controlled two-headed slider widget available in the widgets namespace for Lua scripting.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_54\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.RangeSlider\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS-specific libstdc++ in CMake\nDESCRIPTION: Downloads and configures a custom libstdc++ for macOS that fixes a crash-on-unwind bug in DF's libstdc++. Different versions are downloaded based on the GCC version and architecture.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n    # libstdc++ (GCC 4.8.5 for OS X 10.6)\n    # fixes crash-on-unwind bug in DF's libstdc++\n    set(LIBSTDCXX_DOWNLOAD_DIR ${dfhack_SOURCE_DIR}/package/darwin/osx${DFHACK_BUILD_ARCH})\n\n    if(${GCC_VERSION_OUT} VERSION_LESS \"4.9\")\n        set(LIBSTDCXX_GCC_VER \"48\")\n    else()\n        set(LIBSTDCXX_GCC_VER \"7\")\n        set(LIBSTDCXX_DOWNLOAD_DIR \"${LIBSTDCXX_DOWNLOAD_DIR}-gcc7\")\n    endif()\n\n    if(${DFHACK_BUILD_ARCH} STREQUAL \"64\")\n        if(${LIBSTDCXX_GCC_VER} STREQUAL \"48\")\n            download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx64-gcc48-libstdcxx.6.dylib.gz\"\n                \"gz\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib.gz\n                \"cf26ed588be8e83c8e3a49919793b416\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n                \"16dc6dbd4ecde7f9b95bb6dc91f07404\")\n        else()\n            # GCC 7\n            download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx64-gcc7-libstdcxx.6.dylib.gz\"\n                \"gz\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib.gz\n                \"81314b7846f9e8806409bef2160c76e6\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n                \"93b6cf4b01e9a9084a508fd6a4a88992\")\n        endif()\n\n    else() # 32-bit\n\n        if(${LIBSTDCXX_GCC_VER} STREQUAL \"48\")\n            download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx32-gcc48-libstdcxx.6.dylib.gz\"\n                \"gz\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib.gz\n                \"40f3d83871b114f0279240626311621b\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n                \"c3f5678b8204917e03870834902c3e8b\")\n        else()\n            # GCC 7\n            download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx32-gcc7-libstdcxx.6.dylib.gz\"\n                \"gz\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib.gz\n                \"dbd213171f66edb90d204d525f10c969\"\n                ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n                \"b14c857e7e485a097c70a9ccd3132da7\")\n        endif()\n    endif()\n\n    if(NOT EXTERNAL_LIBSTDCXX)\n        install(PROGRAMS ${LIBSTDCXX_DOWNLOAD_DIR}/libstdc++.6.dylib\n            DESTINATION ./hack/)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Properties\nDESCRIPTION: Examples of zone declarations with various properties like names and location assignments\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n#zone a single tile garbage dump zone\nd\n\n#zone a single tile garbage dump zone named \"The Dump\"\nd{name=\"The Dump\"}\n\n#zone interrogation room\no{name=Interrogation assigned_unit=sheriff}\n\n#zone a small inactive pond zone\np{name=\"Fill me\" pond=true active=false}(3x3)\n```\n\n----------------------------------------\n\nTITLE: Stopping a Profiler in DFHack Lua API\nDESCRIPTION: Stops profile collection for the profiler object.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_139\n\nLANGUAGE: lua\nCODE:\n```\nobj:stop()\n```\n\n----------------------------------------\n\nTITLE: Basic sc-script Usage Commands\nDESCRIPTION: Core command syntax for the sc-script tool, showing the help and list operations for viewing event handlers.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/sc-script.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsc-script [help]\\nsc-script list [<event>]\n```\n\n----------------------------------------\n\nTITLE: DFHack Startup Command Syntax\nDESCRIPTION: Example showing how to specify commands to run on DFHack startup using command line arguments with the + prefix.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_43\n\nLANGUAGE: Shell\nCODE:\n```\n./dfhack +devel/print-args example\n\"Dwarf Fortress.exe\" +devel/print-args example\n```\n\n----------------------------------------\n\nTITLE: Script-Path Configuration for DFHack Development Environment\nDESCRIPTION: Example line to add to script-paths.txt file to enable DFHack to find scripts in a custom development directory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/modding-guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n+/path/to/mymods/example-mod/scripts_modinstalled\n```\n\n----------------------------------------\n\nTITLE: Command Example - Prospect with Show Option\nDESCRIPTION: Example of using the prospect command with the new show option to filter output\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nprospect all --show ores\n```\n\n----------------------------------------\n\nTITLE: Enabling Preserve-Tombs Plugin\nDESCRIPTION: Command to enable the preserve-tombs plugin in DFHack.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/preserve-tombs.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nenable preserve-tombs\n```\n\n----------------------------------------\n\nTITLE: DFHack Enable Command Examples in Plain Text\nDESCRIPTION: Demonstrates practical examples of using the enable command to activate one or multiple DFHack plugins at once.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/enable.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nenable manipulator\nenable manipulator search\n```\n\n----------------------------------------\n\nTITLE: Configuring Stonesense Keybinds in Configuration File\nDESCRIPTION: Code block showing the configuration file path dfhack-config/stonesense/keybinds.txt that contains customizable keybindings for zooming, rendering area dimensions, toggling views, fog and rotation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/stonesense.rst#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\ndfhack-config/stonesense/keybinds.txt\n```\n\n----------------------------------------\n\nTITLE: Checking Stockflow Status Command\nDESCRIPTION: Command to display the current enabled/disabled status of the stockflow plugin\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/stockflow.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nstockflow status\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building DFHack Dependencies with CMake\nDESCRIPTION: This CMake script manages the configuration and building of various third-party libraries required by DFHack. It adds subdirectories for each dependency, configures build options, sets compiler flags to suppress warnings, and includes necessary headers for integration with the main project.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# list depends here.\nadd_subdirectory(dfhooks)\ninstall(TARGETS dfhooks LIBRARY DESTINATION . RUNTIME DESTINATION .)\n\nadd_subdirectory(lodepng)\nadd_subdirectory(lua)\nadd_subdirectory(md5)\nadd_subdirectory(protobuf)\ntarget_include_directories(protobuf-lite INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/protobuf)\n\nif(UNIX)\n    set_target_properties(lua PROPERTIES COMPILE_FLAGS \"-Wno-deprecated-declarations -Wno-deprecated-enum-enum-conversion\")\n    set_target_properties(protoc PROPERTIES COMPILE_FLAGS \"-Wno-deprecated-declarations -Wno-restrict\")\n    set_target_properties(protoc-bin PROPERTIES COMPILE_FLAGS \"-Wno-deprecated-declarations -Wno-restrict\")\n    set_target_properties(protobuf-lite PROPERTIES COMPILE_FLAGS \"-Wno-deprecated-declarations -Wno-restrict\")\n    set_target_properties(protobuf PROPERTIES COMPILE_FLAGS \"-Wno-deprecated-declarations -Wno-restrict\")\nendif()\n\noption(INSTALL_GTEST \"Enable installation of googletest. (Projects embedding googletest may want to turn this OFF.)\" OFF)\nadd_subdirectory(googletest)\n\n# Don't build tinyxml if it's being externally linked against.\nif(NOT TinyXML_FOUND)\n    add_subdirectory(tinyxml)\n    target_include_directories(dfhack-tinyxml INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/tinyxml)\nendif()\n\noption(JSONCPP_WITH_TESTS \"Compile and (for jsoncpp_check) run JsonCpp test executables\" OFF)\noption(JSONCPP_WITH_POST_BUILD_UNITTEST \"Automatically run unit-tests as a post build step\" OFF)\noption(JSONCPP_BUILD_SHARED_LIBS \"Build jsoncpp_lib as a shared library.\" OFF)\noption(JSONCPP_BUILD_OBJECT_LIBS \"Build jsoncpp_lib as a object library.\" OFF)\noption(JSONCPP_WITH_CMAKE_PACKAGE \"Generate and install cmake package files\" OFF)\n\nadd_subdirectory(jsoncpp-sub EXCLUDE_FROM_ALL)\n# build clsocket static and only as a dependency. Setting those options here overrides its own default settings.\noption(CLSOCKET_SHARED \"Build clsocket lib as shared.\" OFF)\noption(CLSOCKET_DEP_ONLY \"Build for use inside other CMake projects as dependency.\" ON)\nadd_subdirectory(clsocket)\nide_folder(clsocket \"Depends\")\n\n# set the default values of libexpat options - the descriptions are left empty\n# because later option() calls *do* override those\nset(EXPAT_BUILD_EXAMPLES OFF CACHE BOOL \"\")\nset(EXPAT_BUILD_TESTS OFF CACHE BOOL \"\")\nset(EXPAT_BUILD_TOOLS OFF CACHE BOOL \"\")\nset(EXPAT_SHARED_LIBS OFF CACHE BOOL \"\")\nset(EXPAT_BUILD_DOCS OFF CACHE BOOL \"\")\nset(EXPAT_ENABLE_INSTALL OFF CACHE BOOL \"\")\nadd_subdirectory(libexpat/expat)\nif(UNIX)\n    set_target_properties(expat PROPERTIES COMPILE_FLAGS \"-Wno-maybe-uninitialized\")\nendif()\n\nset(CMAKE_REQUIRED_QUIET ON)\nset(LIBZIP_BUILD_DOC OFF CACHE BOOL \"\")\nset(LIBZIP_BUILD_EXAMPLES OFF CACHE BOOL \"\")\nset(LIBZIP_BUILD_REGRESS OFF CACHE BOOL \"\")\nset(LIBZIP_BUILD_SHARED_LIBS OFF CACHE BOOL \"\")\nset(LIBZIP_BUILD_OSSFUZZ OFF CACHE BOOL \"\")\nset(LIBZIP_BUILD_TOOLS OFF CACHE BOOL \"\")\nset(LIBZIP_ENABLE_BZIP2 OFF CACHE BOOL \"\")\nset(LIBZIP_ENABLE_COMMONCRYPTO OFF CACHE BOOL \"\")\nset(LIBZIP_ENABLE_GNUTLS OFF CACHE BOOL \"\")\nset(LIBZIP_ENABLE_LZMA OFF CACHE BOOL \"\")\nset(LIBZIP_ENABLE_MBEDTLS OFF CACHE BOOL \"\")\nset(LIBZIP_ENABLE_OPENSSL OFF CACHE BOOL \"\")\nset(LIBZIP_ENABLE_WINDOWS_CRYPTO OFF CACHE BOOL \"\")\nset(LIBZIP_DO_INSTALL OFF CACHE BOOL \"\")\nadd_subdirectory(libzip)\nif(MSVC)\n    target_compile_options(zip PRIVATE /wd4244)\nelseif(UNIX)\n    set_target_properties(zip PROPERTIES COMPILE_FLAGS \"-Wno-stringop-truncation -Wno-stringop-overflow\")\nendif()\n\nset(XLSXIO_USE_DFHACK_LIBS ON CACHE BOOL \"\")\nset(XLSXIO_BUILD_STATIC ON CACHE BOOL \"\")\nset(XLSXIO_BUILD_SHARED OFF CACHE BOOL \"\")\nset(XLSXIO_BUILD_DOCUMENTATION OFF CACHE BOOL \"\")\nset(XLSXIO_BUILD_EXAMPLES OFF CACHE BOOL \"\")\nset(XLSXIO_BUILD_TOOLS OFF CACHE BOOL \"\")\nset(XLSXIO_WITH_LIBZIP ON CACHE BOOL \"\")\nset(XLSXIO_ZLIB_DIR \"${ZLIB_DIR}\" CACHE PATH \"\")\nset(XLSXIO_LIBZIP_DIR \"${CMAKE_CURRENT_BINARY_DIR}/libzip\" CACHE PATH \"\")\nset(XLSXIO_EXPAT_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/libexpat\" CACHE PATH \"\")\nset(XLSXIO_ENABLE_INSTALL OFF CACHE BOOL \"\")\nadd_subdirectory(xlsxio)\nif(MSVC)\n    target_compile_options(xlsxio_read_STATIC PRIVATE /wd4013 /wd4244)\n    target_compile_options(xlsxio_write_STATIC PRIVATE /wd4013 /wd4244)\nendif()\ntarget_include_directories(xlsxio_read_STATIC INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/xlsxio/include)\ntarget_include_directories(xlsxio_write_STATIC INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/xlsxio/include)\n```\n\n----------------------------------------\n\nTITLE: Enabling Labormanager in DFHack\nDESCRIPTION: The basic command to enable the labormanager tool in DFHack. Once enabled, it remains active until explicitly disabled, even across game saves.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/labormanager.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable labormanager\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf Generation for DFHack API\nDESCRIPTION: Sets up protobuf file generation for the DFHack API, including custom commands and file management. Configures compiler flags for generated protobuf files.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PROJECT_PROTOS ${CMAKE_CURRENT_SOURCE_DIR}/proto/*.proto)\n\nstring(REPLACE \".proto\" \".pb.cc\" PROJECT_PROTO_SRCS \"${PROJECT_PROTOS}\")\nstring(REPLACE \".proto\" \".pb.h\" PROJECT_PROTO_HDRS \"${PROJECT_PROTOS}\")\nstring(REPLACE \"/proto/\" \"/proto/tmp/\" PROJECT_PROTO_TMP_FILES \"${PROJECT_PROTO_SRCS};${PROJECT_PROTO_HDRS}\")\nset_source_files_properties(${PROJECT_PROTO_SRCS} ${PROJECT_PROTO_HDRS}\n    PROPERTIES GENERATED TRUE)\n\nadd_custom_command(\n    OUTPUT ${PROJECT_PROTO_TMP_FILES}\n    COMMAND protoc-bin -I=${CMAKE_CURRENT_SOURCE_DIR}/proto/\n        --cpp_out=dllexport_decl=DFHACK_EXPORT:${CMAKE_CURRENT_SOURCE_DIR}/proto/tmp/\n        ${PROJECT_PROTOS}\n    COMMAND ${PERL_EXECUTABLE} ${dfhack_SOURCE_DIR}/depends/copy-if-different.pl\n        ${PROJECT_PROTO_TMP_FILES}\n        ${CMAKE_CURRENT_SOURCE_DIR}/proto/\n    COMMENT \"Generating core protobufs\"\n    DEPENDS protoc-bin ${PROJECT_PROTOS}\n)\n\nif(UNIX)\n    set_source_files_properties(${PROJECT_PROTO_SRCS} PROPERTIES COMPILE_FLAGS \"-Wno-misleading-indentation\")\nendif()\n\nadd_custom_target(generate_proto_core DEPENDS ${PROJECT_PROTO_TMP_FILES})\n```\n\n----------------------------------------\n\nTITLE: Checking if a Tag Exists in DFHack Help Database\nDESCRIPTION: Returns whether the given string (or list of strings) is a valid tag name (or are all valid tag names).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_133\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.is_tag(str)\n```\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.is_tag(list)\n```\n\n----------------------------------------\n\nTITLE: DFHack Build Commands for Windows Cross-Compilation\nDESCRIPTION: Git clone and build commands for compiling DFHack for Windows inside Docker container.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/DFHack/dfhack.git\ncd dfhack\ngit submodule update --init\ncd build\ndfhack-configure windows 64 Release\ndfhack-make\n```\n\n----------------------------------------\n\nTITLE: Quickfort Meta Blueprint with Referenced Start Position\nDESCRIPTION: Shows how to create a meta blueprint that references another blueprint's start position, useful for coordinating multiple blueprints.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n#meta start(center of workshop) a stonecutter workshop\n/stonew\n```\n\n----------------------------------------\n\nTITLE: Installing MacPorts Dependencies on macOS\nDESCRIPTION: Command to install the necessary dependencies for building DFHack on macOS using the MacPorts package manager.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Dependencies.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo port install gcc7 +universal cmake +universal git-core +universal ninja +universal\n```\n\n----------------------------------------\n\nTITLE: Remove Plants Command\nDESCRIPTION: Command to remove plants from specified locations, with options to target specific plant types and conditions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/plant.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nplant remove [<pos> [<pos>]] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Displaying Pet Uncapper Status in DFHack\nDESCRIPTION: Command to print out current settings of the pet-uncapper plugin.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/pet-uncapper.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npet-uncapper [status]\n```\n\n----------------------------------------\n\nTITLE: Setting Placement for Created Items\nDESCRIPTION: Specifies where new items will be placed - on the floor, inside a selected container, or as part of a building.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/createitem.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncreateitem floor|item|building\n```\n\n----------------------------------------\n\nTITLE: Build Architecture Detection and Configuration\nDESCRIPTION: Detects and configures build architecture (32 or 64 bit) based on Visual Studio generator or manual settings.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND NOT DEFINED DFHACK_BUILD_ARCH)\n    if ((${CMAKE_GENERATOR} MATCHES \"Win32\") OR (${CMAKE_GENERATOR} MATCHES \"x86\"))\n        message(SEND_ERROR \"DF v50 does not support 32-bit\")\n    else()\n        set(DFHACK_BUILD_ARCH \"64\")\n    endif()\nelse()\n    set(DFHACK_BUILD_ARCH \"64\" CACHE STRING \"Architecture to build ('32' or '64')\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Long Help Text from DFHack Help Database\nDESCRIPTION: Returns the full help text for the given entry, optionally wrapped at a specified width. Default wrap width is 80 characters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_130\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.get_entry_long_help(entry[, width])\n```\n\n----------------------------------------\n\nTITLE: Platform-specific compiler definitions for Windows and POSIX systems\nDESCRIPTION: Sets platform-specific compiler definitions for Windows (disabling deprecation warnings) and POSIX systems (enabling POSIX and dynamic loading features).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/lua/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    add_definitions(-D_CRT_SECURE_NO_DEPRECATE /wd4334)\nelse()\n    add_definitions(-DLUA_USE_POSIX -DLUA_USE_DLOPEN)\n    set(LIBS m dl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Options and Platform Definitions in CMake\nDESCRIPTION: Sets up shared library definitions for protobuf and Lua, and adds platform-specific definitions for macOS, Linux, and Windows to properly identify the operating system during compilation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# use shared libraries for protobuf\nadd_definitions(-DPROTOBUF_USE_DLLS)\nadd_definitions(-DLUA_BUILD_AS_DLL)\n\nif(APPLE)\n    add_definitions(-D_DARWIN)\n    set(CMAKE_MACOSX_RPATH 1)\nelseif(UNIX)\n    add_definitions(-D_LINUX)\nelseif(WIN32)\n    add_definitions(-DWIN32)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Ruby API Boolean Return Consistency\nDESCRIPTION: Modification to ensure the 'unit_ishostile' function consistently returns a boolean value in the Ruby API.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\n- Made ``unit_ishostile`` consistently return a boolean\n```\n\n----------------------------------------\n\nTITLE: Cloning DFHack Repository with Git\nDESCRIPTION: Commands to clone the DFHack repository and its submodules from GitHub. This is the first step in obtaining the source code for compilation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recursive https://github.com/DFHack/dfhack\ncd dfhack\n```\n\n----------------------------------------\n\nTITLE: Dig Mode Reference Table\nDESCRIPTION: Comprehensive reference table showing all available dig mode symbols and their meanings in Quickfort blueprints.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nd - dig (mine out walls but leave the floors)\\nh - channel (empty tile with a ramp in the z-level below)\\nu - up stair\\nj - down stair\\ni - up/down stair\\nr - ramp (produces empty tile in the z-level above)\\nz - remove up stairs/ramps\\nt - chop trees\\np - gather plants\\ns - smooth walls or floors\\ne - engrave smoothed walls or floors\\nF - carve fortification\\nT - carve track\\nv - toggle whether engraving details are visible\\nM - toggle marker (called \"blueprints\" by the DF interface)\\nn - remove construction\\nx - remove designation\\nbc - claim items on this tile\\nbf - forbid items on this tile\\nbm - melt items on this tile\\nbM - remove melt flag from items on this tile\\nbd - dump items on this tile\\nbD - remove dump flag from items on this tile\\nbh - hide items on this tile\n```\n\n----------------------------------------\n\nTITLE: Installing Required Perl Modules for DFHack\nDESCRIPTION: Commands for installing necessary Perl XML processing modules via CPAN. These modules are required for handling XML documentation or configuration files in the DFHack project.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Dependencies.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ninstall XML::LibXML\ninstall XML::LibXSLT\n```\n\n----------------------------------------\n\nTITLE: Listing DFHack Tool Categories with reStructuredText\nDESCRIPTION: This reStructuredText snippet defines the documentation structure for the 'tags' command in DFHack. It includes a summary, tags, usage instructions, and examples.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/tags.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. dfhack-tool::\n    :summary: List the categories of DFHack tools or the tools with those tags.\n    :tags: dfhack\n\nDFHack tools are labeled with tags so you can find groups of related commands.\nThis builtin command lists the tags that you can explore, or, if called with the\nname of a tag, lists the tools that have that tag.\n\nUsage\n-----\n\n``tags``\n    List the categories of DFHack tools and a description of those categories.\n``tags <tag>``\n    List the tools that are tagged with the given tag.\n\nExamples\n--------\n\n``tags``\n    List the defined tags.\n``tags design``\n    List all the tools that have the ``design`` tag.\n```\n\n----------------------------------------\n\nTITLE: Using the show command in DFHack\nDESCRIPTION: Basic usage of the show command to unhide the DFHack terminal window on Windows. This command has no parameters and simply makes the terminal visible again.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/show.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nshow\n```\n\n----------------------------------------\n\nTITLE: Checking DFHack Release Status\nDESCRIPTION: Functions to check if the current DFHack build is a release or prerelease version.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.isRelease()\n```\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.isPrerelease()\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Stockpiles Plugin in CMake\nDESCRIPTION: Sets up the project name, defines header and source files, configures protobuf files, and creates the DFHack plugin with necessary dependencies. The plugin links against protobuf-lite and lua libraries.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/stockpiles/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(stockpiles)\n\n# add *our* headers here.\nset(PROJECT_HDRS\n    StockpileUtils.h\n    OrganicMatLookup.h\n    StockpileSerializer.h\n)\n\nset(PROJECT_SRCS\n    OrganicMatLookup.cpp\n    StockpileSerializer.cpp\n    stockpiles.cpp\n)\n\nset(PROJECT_PROTOS\n    stockpiles\n)\n\nset_source_files_properties(${PROJECT_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE)\nlist(APPEND PROJECT_SRCS ${PROJECT_HDRS})\n\ndfhack_plugin(stockpiles ${PROJECT_SRCS} ${PROJECT_HDRS} PROTOBUFS ${PROJECT_PROTOS} LINK_LIBRARIES protobuf-lite lua)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for DFHack API Library\nDESCRIPTION: Defines lists of header and source files for the main library, modules, and platform-specific implementations. Organizes files into groups for Visual Studio.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MAIN_HEADERS\n    include/Internal.h\n    include/DFHackVersion.h\n    # ... (other headers)\n)\n\nset(MAIN_SOURCES\n    Core.cpp\n    ColorText.cpp\n    # ... (other sources)\n)\n\nset(MODULE_HEADERS\n    include/modules/Buildings.h\n    include/modules/Burrows.h\n    # ... (other module headers)\n)\n\nset(MODULE_SOURCES\n    modules/Buildings.cpp\n    modules/Burrows.cpp\n    # ... (other module sources)\n)\n\nif(WIN32)\n    source_group(\"Main\\\\Headers\" FILES ${MAIN_HEADERS} ${MAIN_HEADERS_WINDOWS})\n    source_group(\"Main\\\\Sources\" FILES ${MAIN_SOURCES} ${MAIN_SOURCES_WINDOWS})\n    source_group(\"Modules\\\\Headers\" FILES ${MODULE_HEADERS})\n    source_group(\"Modules\\\\Sources\" FILES ${MODULE_SOURCES})\n    source_group(\"Generated\" FILES ${GENERATED_HDRS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: C++ Units Range Implementation\nDESCRIPTION: C++20 range-based iteration over citizen units\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nUnits::citizensRange\nUnits::forCitizens\n```\n\n----------------------------------------\n\nTITLE: Checking Hash Map Availability in CMake\nDESCRIPTION: Verifies that a working hash map implementation is available. Displays an error message if none is found, specifying the required GCC version and development libraries.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/protobuf/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HAVE_HASH_MAP EQUAL 0)\n    message(SEND_ERROR \"Could not find a working hash map implementation. Please install GCC >= 4.4, and all necessary 32-bit C++ development libraries.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Misery Plugin Usage Examples\nDESCRIPTION: Example commands demonstrating how to enable the plugin, set a specific misery factor, and clear negative thoughts added by the plugin.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/misery.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenable misery\nmisery 5\nmisery clear\n```\n\n----------------------------------------\n\nTITLE: Configuring SizeCheck Shared Library Build in CMake\nDESCRIPTION: Creates and configures a shared library target called 'sizecheck' with installation rules. The library is compiled from sizecheck.cpp and installed to the DFHACK_LIBRARY_DESTINATION directory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/sizecheck/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(sizecheck)\nadd_library(sizecheck SHARED sizecheck.cpp)\nide_folder(sizecheck \"Depends\")\ninstall(TARGETS sizecheck\n    LIBRARY DESTINATION ${DFHACK_LIBRARY_DESTINATION}\n    RUNTIME DESTINATION ${DFHACK_LIBRARY_DESTINATION})\n```\n\n----------------------------------------\n\nTITLE: Listing Gemstone Names in Markdown\nDESCRIPTION: This snippet contains a markdown-formatted list of gemstone names, organized alphabetically. It includes major gemstone types as well as lesser-known varieties and related minerals.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/data/dfhack-config/autonick.txt#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Gemstones\nActinolite\nNephrite\nAdamite\nAegirine\nAfghanite\nAgrellite\nAlgodonite\nAlunite\nAmblygonite\nAnalcime\nAnatase\nAndalusite\nChiastolite\nAnglesite\nAnhydrite\nAnnabergite\nAnorthite\nAntigorite\nBowenite\nApatite\nApophyllite\nAragonite\nAsbestos\nAstrophyllite\nAugelite\nAustinite\nFerro\nMagnes\nMangan\nTinzenite\nAzurmalachite\nAzurite\nBaryte\nBast\nBayldonite\nBenitoite\nBeryl\nMaxixe\nGoshenite\nGolden beryl\nHeliodor\nMorganite\nRed beryl\nBeryllonite\nBeudantite\nBismutot\nBiotit\nBoracite\nBornite\nBrazilianite\nBrookite\nBrucite\nBustam\nBytown\nCalcite\nCaledonite\nCanasite\nCancrin\nVishnev\nCarleton\nCarnall\nCassiterite\nCataplei\nCavans\nCelestite\nCeruleite\nCerussite\nChalcopyr\nChambers\nCharlesite\nCharoite\nChildrenite\nChiolite\nChrysoberyl\nAlexandrite\nCymophane\nChromite\nChrysocolla\nClinochlore\nClinohumite\nClintonite\nCobaltite\nColeman\nCordierite\nIolite\nCornwallite\nCorundum\nRuby\nSapphire\nPadparadscha\nCovell\nCreedite\nCrocite\nCuprite\nDanburite\nDatolite\nDescloiz\nDiamond\nBort\nBallas\nDiaspore\nDickinsonite\nDiopside\nDioptase\nDolomite\nDumortier\nEkanite\nTrapiche\nEnstatite\nBronzite\nHypersthene\nEosphorite\nEpidote\nPiemont\nErythrite\nEsperite\nEttring\nEudialyte\nFaya\nFeldspar\nAndesine\nAlbite\nAnorth\nAnorthoc\nAmazon\nCelsian\nMicrocline\nMoonstone\nAdularia\nRainbow\nOrtho\nKite\nPlagioclase\nLabradorite\nOligoclase\nSunstone\nOregon Sunstone\nRainbow Lattice\nFergusonite\nFerroaxin\nFluora\nFluorapophyl\nFluorite\nForster\nFriedelite\nGadolin\nGahnite\nGahnospinel\nGarnet\nPyralspite\nAlmandine\nSpessartine\nUgrand\nDemantoid\nMelanite\nTopazolita\nGrossular\nHessonite\nHydrogrossular\nTsavorite\nPyrope\nRhodolite\nMali garnet\nMalaia\nUmbal\nGaspe\nGayluss\nGibbsite\nGlaucophane\nGoeth\nGoosecreek\nGrandidier\nGypsum\nGyro\nHalite\nHambergite\nHanksite\nHardystonite\nHelenite\nHematite\nHerder\nHexagonite\nHibonite\nHidden\nHodgkinsonite\nHoltite\nHowlite\nHuebnerite\nHumite\nHurlbut\nIlmenite\nInderite\nJadeite\nJasper\nJeremejevite\nKainite\nKämmerer\nKaolin\nKornerup\nKurnakov\nKyanite\nLangbein\nLawsonite\nLazulite\nLazurite\nLegrandite\nLepidolite\nLeucite\nLeucophan\nLinarite\nLizardite\nLondonite\nLudlamite\nLudwigite\nMaria-meionite\nWerner\nMarcasite\nMeliphanite\nMellite\nMesolite\nMilar\nMillerite\nMime\nMonazite\nMordenite\nMottram\nMuscovite\nFuchsite\nNambul\nNatrolite\nNepheline\nNeptunite\nNickeline\nNiccolite\nNosean\nNuumm\nOpal\nFire opal\nMoss opal\nPainite\nPapagoite\nPargas\nParisite\nPectol\nLarimar\nPentland\nPericlase\nPerthite\nPetal\nCastor\nPezzottaite\nPhena\nPhosgen\nPhospho\nPiemontite\nRealgar\nRhodizite\nRhodochros\nRhodon\nRichter\nRiebeck\nCrocidolite\nRosasite\nRutile\nSamarskite\nSanidine\nSapphirine\nSarcol\nScapol\nMarialite\nMeionite\nScheel\nSchizol\nScorod\nSelenite\nSella\nSenarmon\nSepio\nMeerschaum\nSérandite\nSeraph\nSerendibite\nSerpentine\nBowen\nStich\nShattuck\nShiga\nShortite\nShung\nSiderite\nSilliman\nSimpsonite\nSinhal\nSmalt\nSmithsonite\nSodalite\nHackman\nSogdian\nSperry\nSpessar\nSphaler\nSpinel\nCeylon\nSpodumene\nTriphane\nSpurrite\nStauro\nStrontian\nTitanate\nSulfur\nBustamite\nSylvite\nTaaffeita\nTalc\nTantalite\nTektites\nTephroite\nThomsonite\nThaumasite\nTopaz\nTourmaline\nAchroite\nChrome\nDravite\nElbaite\nIndicol\nOlenite\nParaiba\nRossman\nRubellite\nTremol\nTriphyl\nTriplite\nTugtup\nTurquoise\nUlex\nUssing\nVanadinite\nVariscite\nVesuvianite\nCalifornite\nVilliaum\nVivianite\nVlasov\nWardite\nWavell\nWelogan\nWhewell\nWilkeite\nWillemite\nWither\nWollastone\nWulfenite\nWurtzite\nXonot\nYugawara\nZektzer\nZeolites\nChabaz\nSteller\nStilbite\nZinc\nZinnwald\nZircon\nJacinth\nZoisite\nTanzan\nThulite\nZultan\nZany\nLapis lazuli\nDesert glass\nLlanite\nMaw sit-sit\nObsidian\nTears\nPallas\nPeridot\nSoapstone\nTact\nUnakite\nBauxite\nConcretions\nBloodstone\nHeliotrope\nEilat stone\nEpidos\nGlimmer\nGoldstone\nHawks eye\nIddings\nLampro\n```\n\n----------------------------------------\n\nTITLE: Using utils.addressof with Raw Userdata in Lua\nDESCRIPTION: A reference to a bug fix for the utils.addressof() function when used with raw userdata in Lua.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_16\n\nLANGUAGE: Lua\nCODE:\n```\nutils.addressof()\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL2 Dependency in CMake\nDESCRIPTION: Sets up SDL2 library dependency with an option to use system libraries or download the required headers. When downloading, it fetches the specific SDL2 version from the official GitHub repository.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(USE_SYSTEM_SDL2 OFF CACHE BOOL \"Set to ON to use the system SDL2 headers.\")\n\nif(BUILD_LIBRARY)\n    if(USE_SYSTEM_SDL2)\n        find_package(SDL2 REQUIRED CONFIG REQUIRED COMPONENTS SDL2)\n    else()\n        # Download SDL release and extract into depends in the build dir\n        # all we need are the header files (including generated headers), so the same release package\n        # will work for all platforms\n        # (the above statement is untested for OSX)\n        set(SDL_VERSION 2.26.2)\n        set(SDL_ZIP_MD5 574daf26d48de753d0b1e19823c9d8bb)\n        set(SDL_ZIP_FILE SDL2-devel-${SDL_VERSION}-VC.zip)\n        set(SDL_ZIP_PATH ${dfhack_SOURCE_DIR}/depends/SDL2/)\n        download_file(\"https://github.com/libsdl-org/SDL/releases/download/release-${SDL_VERSION}/${SDL_ZIP_FILE}\"\n            ${SDL_ZIP_PATH}${SDL_ZIP_FILE}\n            ${SDL_ZIP_MD5})\n        file(ARCHIVE_EXTRACT INPUT ${SDL_ZIP_PATH}${SDL_ZIP_FILE}\n            DESTINATION ${SDL_ZIP_PATH})\n        set(SDL2_INCLUDE_DIRS ${SDL_ZIP_PATH}/SDL2-${SDL_VERSION}/include)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format Reference\nDESCRIPTION: Documents the special syntax used in the changelog.txt file for organizing and formatting release notes. Includes markers for comments, release names, sections, and changelog entries.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n===help\n\nchangelog.txt uses a syntax similar to RST, with a few special sequences:\n\n- ``===`` indicates the start of a comment\n- ``#`` indicates the start of a release name (do not include \"DFHack\")\n- ``##`` indicates the start of a section name (this must be listed in ``gen_changelog.py``)\n- ``-`` indicates the start of a changelog entry. **Note:** an entry currently must be only one line.\n- ``:`` (colon followed by space) separates the name of a feature from a description of a change to that feature.\n    Changes made to the same feature are grouped if they end up in the same section.\n- ``:\\`` (colon, backslash, space) avoids the above behavior\n- ``- @`` (the space is optional) indicates the start of an entry that should only be displayed in NEWS-dev.rst.\n- Three ``[`` characters indicate the start of a block (possibly a comment) that\n  spans multiple lines. Three ``]`` characters indicate the end of such a block.\n- ``!`` immediately before a phrase set up to be replaced (see gen_changelog.py) stops that occurrence from being replaced.\n```\n\n----------------------------------------\n\nTITLE: 4x4 Bedroom Zone Blueprint\nDESCRIPTION: Zone blueprint for designating a 4x4 bedroom area using 'b' zone markers\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n#zone\nb b b b #\nb b b b #\nb b b b #\nb b b b #\n# # # # #\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Game Mode in DFHack\nDESCRIPTION: Basic command to display the current game mode in Dwarf Fortress. Returns the active game mode without making any changes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/mode.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmode\n```\n\n----------------------------------------\n\nTITLE: Basic Area Expansion Blueprint Example\nDESCRIPTION: Demonstrates two equivalent ways to specify a 3x3 dig area - one using individual designations and one using area expansion syntax.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n#dig a 3x3 area\nd d d #\nd d d #\nd d d #\n# # # #\n\n#dig the same area with d(3x3) specified in row 1, col 1\nd(3x3)#\n` ` ` #\n` ` ` #\n# # # #\n```\n\n----------------------------------------\n\nTITLE: Using the kill-lua Command in DFHack\nDESCRIPTION: Demonstrates the usage of the kill-lua command to stop running Lua scripts in DFHack. It shows both the standard and force options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/kill-lua.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nkill-lua\nkill-lua force\n```\n\n----------------------------------------\n\nTITLE: Configuring zlib Dependency in CMake\nDESCRIPTION: Sets up the zlib dependency, handling platform-specific paths and downloading precompiled binaries for Windows. For Linux, it uses system libraries with proper architecture configuration.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    set(ZLIB_FILE zlib.lib)\n    set(ZLIB_PATH ${dfhack_SOURCE_DIR}/depends/zlib/)\n    set(ZLIB_MD5 a3b2fc6b68efafa89b0882e354fc8418)\n    download_file(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/win64-${ZLIB_FILE}\"\n        ${ZLIB_PATH}lib/${ZLIB_FILE}\n        ${ZLIB_MD5})\n    set(ZLIB_ROOT ${ZLIB_PATH})\nelse()\n    # Rescan for pthread and zlib if the build arch changed\n    if(NOT \"${DFHACK_BUILD_ARCH}\" STREQUAL \"${DFHACK_BUILD_ARCH_PREV}\")\n        unset(ZLIB_LIBRARY CACHE)\n        unset(CMAKE_HAVE_PTHREAD_H CACHE)\n    endif()\n\n    if(NOT APPLE AND DFHACK_BUILD_32)\n        set(ZLIB_ROOT /usr/lib/i386-linux-gnu)\n    endif()\nendif()\nfind_package(ZLIB REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure for DFHack tools including sections for contents, categories, and tool listings.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Tools.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _tools:\n\nDFHack tools\n============\n\n.. contents:: Contents\n  :local:\n\n.. toctree::\n  :glob:\n  :maxdepth: 1\n  :titlesonly:\n\n  tools/*\n  tools/*/*\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusions for DFHack Linting Script\nDESCRIPTION: This gitignore-style configuration specifies patterns for files that should be skipped during linting. It excludes Git directories, legacy raw and stonesense text files, generated files (including protobuf headers and build artifacts), documentation outputs, and third-party dependencies.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/ci/lint-ignore.txt#2025-04-21_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n# Files that lint.py should ignore\n\n.git/*\n\n# Old files exempt from checks for now\nplugins/raw/*.txt\nplugins/stonesense/*.txt\n\n# Generated files\n*.pb.h\nbuild*/*\ndocs/changelogs/*\ndocs/html/*\ndocs/pdf/*\ndocs/pseudoxml/*\ndocs/tags/*\ndocs/text/*\ndocs/tools/*\ndocs/xml/*\nlibrary/include/df/*\n\n# Dependencies that we don't control\ndepends/*\nplugins/stonesense/allegro/*\n```\n\n----------------------------------------\n\nTITLE: Configuring dfhack-md5 Static Library in CMake\nDESCRIPTION: Sets up the dfhack-md5 static library with required source files, include directories, IDE organization, and platform-specific compiler flags. The library is marked as EXCLUDE_FROM_ALL to prevent it from being built unless specifically required by another target.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/md5/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(dfhack-md5)\nadd_library(dfhack-md5 STATIC EXCLUDE_FROM_ALL md5.cpp md5wrapper.cpp)\ntarget_include_directories(dfhack-md5 INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})\nide_folder(dfhack-md5 \"Depends\")\nif(UNIX)\n    set_target_properties(dfhack-md5 PROPERTIES COMPILE_FLAGS \"-Wno-strict-aliasing\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Interior Frame Window Border in Lua\nDESCRIPTION: Reference to an existing window border constant for creating signature-less frames in Lua interfaces.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_59\n\nLANGUAGE: Lua\nCODE:\n```\ngui.INTERIOR_FRAME\n```\n\n----------------------------------------\n\nTITLE: Defining Lua headers list and include directories\nDESCRIPTION: Creates a list of header files for the Lua library and sets properties to mark them as header-only files. Sets up include directories for the build.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/lua/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(HDR_LIBLUA\n    include/lapi.h\n    include/lauxlib.h\n    include/lcode.h\n    include/lctype.h\n    include/ldebug.h\n    include/ldo.h\n    include/lfunc.h\n    include/lgc.h\n    include/llex.h\n    include/llimits.h\n    include/lmem.h\n    include/lobject.h\n    include/lopcodes.h\n    include/lparser.h\n    include/lstate.h\n    include/lstring.h\n    include/ltable.h\n    include/ltm.h\n    include/lua.h\n    include/luaconf.h\n    include/lualib.h\n    include/lundump.h\n    include/lvm.h\n    include/lzio.h\n)\nset_source_files_properties(${HDR_LIBLUA} PROPERTIES HEADER_FILE_ONLY TRUE)\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: DFHack Environment Variable Update\nDESCRIPTION: Example showing the renamed environment variable format for library preloading\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nDF_PRELOAD=library.so\n```\n\n----------------------------------------\n\nTITLE: Defining Power Meter Plugin in reStructuredText\nDESCRIPTION: This snippet defines the 'power-meter' plugin for DFHack using reStructuredText directives. It specifies the plugin's summary, tags, and usage instructions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/power-meter.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. dfhack-tool::\n    :summary: Allow pressure plates to measure power.\n    :tags: unavailable\n    :no-command:\n```\n\n----------------------------------------\n\nTITLE: Creating a Tileset from Pixel Data\nDESCRIPTION: Creates and registers a new texture and slices it into tiles with specified dimensions. Returns an array of TexposHandle objects.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_104\n\nLANGUAGE: lua\nCODE:\n```\ndfhack.textures.createTileset(pixels, texture_px_w, texture_px_h, tile_px_w, tile_px_h[, reserved])\n```\n\n----------------------------------------\n\nTITLE: Using the Reload Command in DFHack\nDESCRIPTION: Shows the syntax for using the reload command to reload individual plugins or all plugins at once. After reloading, plugins remain disabled until explicitly enabled with the 'enable' command.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/reload.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nreload <plugin> [<plugin> ...]\nreload -a|--all\n```\n\n----------------------------------------\n\nTITLE: Using Profiler Module in Lua\nDESCRIPTION: Example of using the profiler module in Lua to measure script performance. The module was added in version 0.44.10-r1.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\nprofiler\n```\n\n----------------------------------------\n\nTITLE: MSVC Compiler Configuration\nDESCRIPTION: Configures Microsoft Visual Studio compiler options including warning levels, error handling, and specific warning suppressions for the DFHack build.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    add_compile_options(\"/WX\")\n    add_compile_options(\"/W3\")\n    add_compile_options(\"/wd4819\")\n    add_definitions(\"/D_CRT_NONSTDC_NO_WARNINGS /D_CRT_SECURE_NO_WARNINGS\")\n    add_compile_options(\"/wd4503\")\n    add_compile_options(\"/wd4267\")\n    add_compile_options(\"/wd4251\")\n    add_compile_options(\"/wd4068\")\n    add_compile_options(\"/wd4244\")\n    add_compile_options(\"/w15038\")\n    add_compile_options(\"/bigobj\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining XLSXReader Tool Documentation in RST\nDESCRIPTION: ReStructuredText documentation block defining the xlsxreader tool properties including summary, tags and command availability.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/xlsxreader.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. dfhack-tool::\n    :summary: Provides a Lua API for reading xlsx files.\n    :tags: dev\n    :no-command:\n```\n\n----------------------------------------\n\nTITLE: Defining cxxrandom Tool Documentation in RST\nDESCRIPTION: ReStructuredText documentation block defining the cxxrandom tool attributes including summary and tags. Specifies that this is a developer tool with no direct command interface.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/cxxrandom.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. dfhack-tool::\n    :summary: Provides a Lua API for random distributions.\n    :tags: dev\n    :no-command:\n```\n\n----------------------------------------\n\nTITLE: Displaying DFHack Hotkeys - Basic Command Usage\nDESCRIPTION: Basic usage of the hotkeys command to display keybindings either in-game or in the console.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/hotkeys.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nhotkeys\nhotkeys list\n```\n\n----------------------------------------\n\nTITLE: Configuring RemoteFortressReader Plugin Project in CMake\nDESCRIPTION: Sets up the project name, source files, headers, and protocol buffer files for the RemoteFortressReader plugin. It also configures platform-specific libraries and includes SDL2 headers for the build process.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/remotefortressreader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(remotefortressreader)\n# A list of source files\nset(PROJECT_SRCS\n    remotefortressreader.cpp\n    adventure_control.cpp\n    building_reader.cpp\n    dwarf_control.cpp\n    item_reader.cpp\n)\n# A list of headers\nset(PROJECT_HDRS\n    adventure_control.h\n    building_reader.h\n    dwarf_control.h\n    item_reader.h\n    df_version_int.h\n)\n# proto files to include.\nset(PROJECT_PROTO\n    RemoteFortressReader\n    AdventureControl\n    ItemdefInstrument\n    DwarfControl\n    ui_sidebar_mode\n)\n\nif(UNIX AND NOT APPLE)\n    set(PROJECT_LIBS ${PROJECT_LIBS})\nendif()\n\n# this makes sure all the stuff is put in proper places and linked to dfhack\ndfhack_plugin(RemoteFortressReader ${PROJECT_SRCS} LINK_LIBRARIES ${PROJECT_LIBS} PROTOBUFS ${PROJECT_PROTO})\nif(BUILD_PLUGINS)\n    target_include_directories(RemoteFortressReader PRIVATE ${SDL2_INCLUDE_DIRS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Customizing CycleHotkeyLabel Appearance in Lua\nDESCRIPTION: Reference to exposed attributes for the CycleHotkeyLabel widget that provide improved control over styling elements.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_56\n\nLANGUAGE: Lua\nCODE:\n```\nwidgets.CycleHotkeyLabel\n```\n\n----------------------------------------\n\nTITLE: Usage Documentation Format - Option 1 with Command Block\nDESCRIPTION: Shows how to document command usage with a code block containing all syntax variations, followed by an explanation of parameters.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Documentation.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nUsage\n-----\n\n::\n\n    build-now [<options>]\n    build-now here [<options>]\n    build-now [<pos> [<pos>]] [<options>]\n\nWhere the optional ``<pos>`` pair can be used to specify the\ncoordinate bounds within which ``build-now`` will operate. If\nthey are not specified, ``build-now`` will scan the entire map.\nIf only one ``<pos>`` is specified, only the building at that\ncoordinate is built.\n\nThe ``<pos>`` parameters can either be an ``<x>,<y>,<z>`` triple\n(e.g. ``35,12,150``) or the string ``here``, which means the\nposition of the active game cursor.\n```\n\n----------------------------------------\n\nTITLE: Getting All Tags from DFHack Help Database\nDESCRIPTION: Returns the full alphabetized list of valid tag names.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_134\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.get_tags()\n```\n\n----------------------------------------\n\nTITLE: Steam Launcher Executable Build Configuration\nDESCRIPTION: Configures the build and installation of the Steam launcher executable with platform-specific settings and dependencies.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/package/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlink_libraries(${STEAMAPI_LIBRARY})\nif(WIN32)\n    add_executable(launchdf WIN32 launchdf.cpp)\nelse()\n    add_executable(launchdf launchdf.cpp)\nendif()\ntarget_include_directories(launchdf PRIVATE ${STEAMAPI_SOURCE_DIR})\ninstall(TARGETS launchdf DESTINATION ${DFHACK_DATA_DESTINATION})\ninstall(FILES ${STEAMAPI_SHARED_LIBRARY} DESTINATION ${DFHACK_DATA_DESTINATION})\n```\n\n----------------------------------------\n\nTITLE: Getting Zone and Stockpile Information in Lua\nDESCRIPTION: New functions in the dfhack.gui namespace for accessing zone and stockpile information, with behavior changes to existing functions getSelectedCivZone and getSelectedStockpile.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_45\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.gui.getAnyCivZone\ndfhack.gui.getAnyStockpile\ndfhack.gui.getSelectedCivZone\ndfhack.gui.getSelectedStockpile\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Template\nDESCRIPTION: Template structure for documenting new DFHack versions, showing the standard sections used to organize different types of changes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_1\n\nLANGUAGE: RST\nCODE:\n```\n## New Tools\n\n## New Features\n\n## Fixes\n\n## Misc Improvements\n\n## Documentation\n\n## API\n\n## Lua\n\n## Removed\n```\n\n----------------------------------------\n\nTITLE: DFHack Heap Management and Debugging\nDESCRIPTION: Windows-specific functions for heap management and debugging. These functions allow inspection of heap state and validation of memory addresses.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_112\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.internal.heapTakeSnapshot()\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for macOS Build\nDESCRIPTION: Commands to set environment variables for building DFHack on macOS with Homebrew or Macports GCC installations, which is required as DFHack cannot be built with Clang.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Homebrew (if installed elsewhere, replace /usr/local with $(brew --prefix))\nexport CC=/usr/local/bin/gcc-7\nexport CXX=/usr/local/bin/g++-7\n\n# Macports\nexport CC=/opt/local/bin/gcc-mp-7\nexport CXX=/opt/local/bin/g++-mp-7\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation Flags for DFHack API\nDESCRIPTION: Configures compilation flags for specific source files in the DFHack API, handling symbol removal and optimization levels based on platform and build options.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(REMOVE_SYMBOLS_FROM_DF_STUBS)\n    if(UNIX)\n        # Don't produce debug info for generated stubs\n        set_source_files_properties(DataStatics.cpp DataStaticsCtor.cpp ${STATIC_FIELDS_FILES}\n            PROPERTIES COMPILE_FLAGS \"-g0 -O1\")\n    else(WIN32)\n        set_source_files_properties(DataStatics.cpp DataStaticsCtor.cpp ${STATIC_FIELDS_FILES}\n            PROPERTIES COMPILE_FLAGS \"/O1 /bigobj\")\n    endif()\nelse()\n    if(WIN32)\n        set_source_files_properties(DataStatics.cpp DataStaticsCtor.cpp ${STATIC_FIELDS_FILES}\n            PROPERTIES COMPILE_FLAGS \"/Od /bigobj\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure in RST for DFHack API Documentation\nDESCRIPTION: This RST (reStructuredText) snippet defines a table of contents for the DFHack API documentation. It uses the 'toctree' directive to organize documentation links with a maximum depth of 1, currently including only the Maps API documentation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/api/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    /docs/api/Maps\n```\n\n----------------------------------------\n\nTITLE: Default Material Preference Order\nDESCRIPTION: The default priority order of materials that the tailor plugin will use when creating new clothing orders.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/tailor.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsilk cloth yarn leather\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents\nDESCRIPTION: RST markup for generating a local table of contents\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Introduction.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. contents:: Contents\n  :local:\n```\n\n----------------------------------------\n\nTITLE: Getting Short Help Text from DFHack Help Database\nDESCRIPTION: Returns the short (~54 character) description for the given entry.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_129\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.get_entry_short_help(entry)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora\nDESCRIPTION: Command to install the necessary packages for building DFHack on Fedora, including development tools and dependencies.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Dependencies.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyum install gcc-c++ cmake ccache ninja-build git zlib-devel SDL2-devel perl-core perl-XML-LibXML perl-XML-LibXSLT ruby\n```\n\n----------------------------------------\n\nTITLE: Setting Action Timers in DFHack Lua API\nDESCRIPTION: Sets the timers of any action the unit is performing of the specified action type to the given amount. Includes overflow/underflow protection.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_76\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.setActionTimers(unit, amount, affectedActionType)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Steam API Library Configuration\nDESCRIPTION: Sets up platform-specific paths for Steam API libraries, handling both Windows and Linux environments.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/package/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    set(STEAMAPI_LIBRARY \"${STEAMAPI_DIR}/sdk/redistributable_bin/win64/steam_api64.lib\")\n    set(STEAMAPI_SHARED_LIBRARY \"${STEAMAPI_DIR}/sdk/redistributable_bin/win64/steam_api64.dll\")\nelse()\n    set(STEAMAPI_LIBRARY \"${STEAMAPI_DIR}/sdk/redistributable_bin/linux64/libsteam_api.so\")\n    set(STEAMAPI_SHARED_LIBRARY \"${STEAMAPI_LIBRARY}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: getplants Command Example with Plant Count Limit\nDESCRIPTION: Designates a maximum of 10 nether cap trees for chopping using the -n flag to set a numerical limit.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/getplants.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ngetplants NETHER_CAP -n 10\n```\n\n----------------------------------------\n\nTITLE: GCC Version Check Macro\nDESCRIPTION: Macro to verify GCC compiler version is 10 or later, essential for build compatibility.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(CHECK_GCC compiler_path)\n    execute_process(COMMAND ${compiler_path} -dumpversion OUTPUT_VARIABLE GCC_VERSION_OUT)\n    string(STRIP \"${GCC_VERSION_OUT}\" GCC_VERSION_OUT)\n    if(${GCC_VERSION_OUT} VERSION_LESS \"10\")\n        message(SEND_ERROR \"${compiler_path} version ${GCC_VERSION_OUT} cannot be used - use GCC 10 or later\")\n    endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Autolabor Plugin Build\nDESCRIPTION: Configures the build settings for the DFHack autolabor plugin, including source files, headers, and linking with the Lua library. Sets up header-only properties and combines source and header files into a single list.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/autolabor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(autolabor)\n# A list of source files\nset(COMMON_SRCS\n)\n# A list of headers\nset(COMMON_HDRS laborstatemap.h\n)\nset_source_files_properties(${COMMON_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE)\n\n# mash them together (headers are marked as headers and nothing will try to compile them)\nlist(APPEND COMMON_SRCS ${COMMON_HDRS})\n\n#dfhack_plugin(labormanager labormanager.cpp joblabormapper.cpp ${COMMON_SRCS})\n\ndfhack_plugin(autolabor autolabor.cpp ${COMMON_SRCS} LINK_LIBRARIES lua)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Floating-Point Numbers in DFHack\nDESCRIPTION: Returns a random floating-point number in the range [0,1). Part of the random number generation API.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nrng:drandom()\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Definition\nDESCRIPTION: Defines a table of contents tree structure for DFHack documentation using reStructuredText syntax, specifying a max depth of 1 and including links to key documentation files.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   /docs/about/Authors\n   /LICENSE\n   /docs/about/Removed\n   /docs/NEWS\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for DFHack on UNIX-like Systems\nDESCRIPTION: Demonstrates how to set environment variables to adjust DFHack's behavior when launching the program on UNIX-like systems.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Core.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nDFHACK_SOME_VAR=1 ./dfhack\n```\n\n----------------------------------------\n\nTITLE: RST Section Headers\nDESCRIPTION: RST markup showing the main document header and section structure\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Introduction.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n#########################\nIntroduction and overview\n#########################\n```\n\n----------------------------------------\n\nTITLE: Searching for Entries in DFHack Help Database\nDESCRIPTION: Returns a list of entry names that match the given filters. The list is alphabetized with special sorting rules. The optional include and exclude parameters allow filtering by substring, tag, or entry type.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_136\n\nLANGUAGE: lua\nCODE:\n```\nhelpdb.search_entries([include[, exclude]])\n```\n\n----------------------------------------\n\nTITLE: Creating Class Instances in DFHack Lua API\nDESCRIPTION: Creates and initializes a new instance of a class with the specified attribute values. Initialization follows a specific order of preinit, attrs initialization, init, and postinit calls.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_145\n\nLANGUAGE: lua\nCODE:\n```\nnew_obj = Class{ foo = arg, bar = arg, ... }\n```\n\n----------------------------------------\n\nTITLE: Coating Generic Objects with Liquids\nDESCRIPTION: Defines a reaction for coating objects with liquids. Requires 150 units of liquid, a container, the target object, and grease. Uses dyeing skill and can work with artifacts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/raw/reaction_spatter.txt#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-reaction\nCODE:\n```\n[REACTION:SPATTER_ADD_OBJECT_LIQUID]\n    [NAME:coat object with liquid]\n    [ADVENTURE_MODE_ENABLED]\n    [SKILL:DYER]\n    [REAGENT:extract:150:LIQUID_MISC:NONE:NONE:NONE]\n        [MIN_DIMENSION:150]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [REAGENT:extract container:1:NONE:NONE:NONE:NONE]\n        [CONTAINS:extract]\n        [PRESERVE_REAGENT]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [REAGENT:object:1:NONE:NONE:NONE:NONE]\n        [PRESERVE_REAGENT]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n        [CAN_USE_ARTIFACT]\n    [REAGENT:grease:1:GLOB:NONE:NONE:NONE][REACTION_CLASS:FAT][UNROTTEN]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [TRANSFER_ARTIFACT_STATUS]\n    [IMPROVEMENT:800:object:COVERED:GET_MATERIAL_FROM_REAGENT:extract:NONE]\n```\n\n----------------------------------------\n\nTITLE: Using the standalone binpatch utility for disk-based patching\nDESCRIPTION: Demonstrates how to use the standalone binpatch utility to check, apply, or remove binary patches from the Dwarf Fortress executable file on disk.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Binpatches.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbinpatch check \"Dwarf Fortress.exe\" patch.dif\nbinpatch apply \"Dwarf Fortress.exe\" patch.dif\nbinpatch remove \"Dwarf Fortress.exe\" patch.dif\n```\n\n----------------------------------------\n\nTITLE: Basic Keybinding Example for Hotkeys Command\nDESCRIPTION: Binds Ctrl-Shift-C to run the 'hotkeys' command on any screen at any time in DFHack.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/keybinding.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkeybinding add Ctrl-Shift-C hotkeys\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Protobuf\nDESCRIPTION: Sets up the include directories for Protocol Buffers, including the current source directory, ZLIB include directories, and the current binary directory.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/protobuf/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR})\nset(PROTOBUF_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR})\ninclude_directories(${ZLIB_INCLUDE_DIRS})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Embark Assistant Plugin Sources\nDESCRIPTION: Defines the list of source files (.cpp) and header files (.h) needed to build the embark-assistant plugin. Sets properties for header files and combines them with sources for the build process.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/embark-assistant/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(embark-assistant)\n# A list of source files\nset(PROJECT_SRCS\n    embark-assistant.cpp\n    finder_ui.cpp\n    help_ui.cpp\n    matcher.cpp\n    overlay.cpp\n    screen.cpp\n    survey.cpp\n)\n# A list of headers\nset(PROJECT_HDRS\n    defs.h\n    embark-assistant.h\n    finder_ui.h\n    help_ui.h\n    matcher.h\n    overlay.h\n    screen.h\n    survey.h\n)\nset_source_files_properties(${PROJECT_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE)\n\n# mash them together (headers are marked as headers and nothing will try to compile them)\nlist(APPEND PROJECT_SRCS ${PROJECT_HDRS})\n\ndfhack_plugin(embark-assistant ${PROJECT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access for DFHack Documentation\nDESCRIPTION: Robots.txt configuration that specifies crawler permissions for the DFHack documentation site. Allows access to the stable English documentation path and references the XML sitemap location.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\n\nAllow: /en/stable/\n\nSitemap: https://docs.dfhack.org/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for LibXML on macOS Snow Leopard\nDESCRIPTION: Command to create a symbolic link for LibXML on macOS 10.6 (Snow Leopard) or earlier, which is required for the Perl XML modules to work properly.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Dependencies.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /usr/include/libxml2/libxml /usr/include/libxml\n```\n\n----------------------------------------\n\nTITLE: Defining Greasing Station Building in Dwarf Fortress Raw Format\nDESCRIPTION: This code snippet defines a new building workshop called 'Greasing Station' in Dwarf Fortress. It specifies the building's name, dimensions, labor requirements, appearance (tiles and colors), and required materials for construction.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/raw/building_spatter.txt#2025-04-21_snippet_0\n\nLANGUAGE: raw\nCODE:\n```\n[OBJECT:BUILDING]\n\n[BUILDING_WORKSHOP:GREASING_STATION]\n    [NAME:Greasing Station]\n    [NAME_COLOR:2:0:1]\n    [DIM:1:1]\n    [WORK_LOCATION:1:1]\n    [BUILD_LABOR:DYER]\n    [BUILD_KEY:CUSTOM_ALT_G]\n    [BLOCK:1:0]\n    [TILE:0:1:150]\n    [COLOR:0:1:0:0:1]\n    [TILE:1:1:150]\n    [COLOR:1:1:MAT]\n    [TILE:2:1:8]\n    [COLOR:2:1:MAT]\n    [TILE:3:1:8]\n    [COLOR:3:1:7:5:0]\n    [BUILD_ITEM:1:BUCKET:NONE:NONE:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:NONE:NONE:NONE:NONE][BUILDMAT]\n```\n\n----------------------------------------\n\nTITLE: Defining Magma Steam Engine Building in Dwarf Fortress\nDESCRIPTION: This snippet defines the properties of a magma-powered steam engine building. It is similar to the regular steam engine but requires magma for operation. The definition includes its name, dimensions, build requirements, and visual representation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/raw/building_steam_engine.txt#2025-04-21_snippet_1\n\nLANGUAGE: Dwarf Fortress Raw\nCODE:\n```\n[BUILDING_WORKSHOP:MAGMA_STEAM_ENGINE]\n    [NAME:Magma Steam Engine]\n    [NAME_COLOR:4:0:1]\n    [DIM:3:3]\n    [WORK_LOCATION:2:3]\n    [BUILD_LABOR:MECHANIC]\n    [BUILD_KEY:CUSTOM_ALT_E]\n    [NEEDS_MAGMA]\n    [BLOCK:1:1:1:1]\n    [BLOCK:2:1:1:1]\n    [BLOCK:3:1:0:1]\n    [TILE:0:1:240:' ':254]\n    [TILE:0:2:' ':' ':128]\n    [TILE:0:3:246:' ':' ']\n    [COLOR:0:1:6:0:0:0:0:0:7:0:0]\n    [COLOR:0:2:0:0:0:0:0:0:7:0:0]\n    [COLOR:0:3:MAT:0:0:0:0:0:0]\n    [TILE:1:1:246:128:' ']\n    [TILE:1:2:' ':' ':254]\n    [TILE:1:3:254:'/':240]\n    [COLOR:1:1:MAT:7:0:0:0:0:0]\n    [COLOR:1:2:0:0:0:0:0:0:7:0:0]\n    [COLOR:1:3:7:0:0:6:0:0:6:0:0]\n    [TILE:2:1:21:' ':128]\n    [TILE:2:2:128:' ':246]\n    [TILE:2:3:177:19:177]\n    [COLOR:2:1:6:0:0:0:0:0:7:0:0]\n    [COLOR:2:2:7:0:0:0:0:0:MAT]\n    [COLOR:2:3:7:0:0:6:0:0:7:0:0]\n    [TILE:3:1:15:246:15]\n    [TILE:3:2:'\\':19:'/']\n    [TILE:3:3:7:' ':7]\n    [COLOR:3:1:7:0:0:MAT:7:0:0]\n    [COLOR:3:2:6:0:0:0:0:1:6:0:0]\n    [COLOR:3:3:1:7:1:0:0:0:4:7:1]\n    [BUILD_ITEM:1:BARREL:NONE:INORGANIC:NONE][EMPTY][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:PIPE_SECTION:NONE:INORGANIC:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:TRAPCOMP:ITEM_TRAPCOMP_STEAM_PISTON:INORGANIC:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:CHAIN:NONE:INORGANIC:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:TRAPPARTS:NONE:NONE:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:BLOCKS:NONE:NONE:NONE][BUILDMAT][MAGMA_BUILD_SAFE]\n```\n\n----------------------------------------\n\nTITLE: Finding thread libraries in CMake\nDESCRIPTION: Includes the FindThreads module to detect and configure thread libraries for the build process.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/devel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(FindThreads)\n```\n\n----------------------------------------\n\nTITLE: Configuring TinyXML Dependency in CMake\nDESCRIPTION: Sets up TinyXML library dependency with an option to use an external (system) TinyXML library or the internal DFHack-provided version. This allows flexibility for different build environments.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Support linking against external tinyxml\n# If we find an external tinyxml, set the DFHACK_TINYXML variable to \"tinyxml\"\n# Otherwise, set it to \"dfhack-tinyxml\"\noption(EXTERNAL_TINYXML \"Choose to link against external TinyXML\" OFF)\nif(EXTERNAL_TINYXML)\n    find_package(TinyXML REQUIRED)\n    if(NOT TinyXML_FOUND)\n        message(SEND_ERROR \"Could not find an external TinyXML, consider setting EXTERNAL_TINYXML to OFF.\")\n    endif()\n    set(DFHACK_TINYXML \"tinyxml\")\nelse()\n    set(DFHACK_TINYXML \"dfhack-tinyxml\")\nendif()\n\nif(BUILD_LIBRARY)\n    add_subdirectory(depends)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is a Diplomat in C++\nDESCRIPTION: Function to check if a unit is a diplomat, which affects how the unit should be handled in certain contexts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_34\n\nLANGUAGE: C++\nCODE:\n```\nUnits::isDiplomat(unit)\n```\n\n----------------------------------------\n\nTITLE: Starting a Profiler in DFHack Lua API\nDESCRIPTION: Resets collected statistics and starts collecting new statistics with the profiler object.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_138\n\nLANGUAGE: lua\nCODE:\n```\nobj:start()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Arch Linux\nDESCRIPTION: Command to install the necessary packages for building DFHack on Arch Linux, including compiler, build tools, and required Perl modules.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Dependencies.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npacman -Sy gcc cmake ccache ninja git dwarffortress zlib perl-xml-libxml perl-xml-libxslt\n```\n\n----------------------------------------\n\nTITLE: Retrieving Valid Vein Types with Lua in DFHack\nDESCRIPTION: A Lua script that prints all valid vein types that can be used with the digFlood tool. It iterates through all inorganic materials in the game, filtering for those that are stones and can be stored in stockpiles.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/digFlood.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfor i,mat in ipairs(df.global.world.raws.inorganics) do if mat.material.flags.IS_STONE and not mat.material.flags.NO_STONE_STOCKPILE then print(i, mat.id) end end\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Die Command\nDESCRIPTION: Command to instantly terminate Dwarf Fortress without saving the current game state. Used for quick and safe program exit.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/die.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndie\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Search Paths in DFHack\nDESCRIPTION: This is a configuration file template for DFHack that allows users to specify additional script search paths. Paths can be prioritized with '+' (searched first) or '-' (searched after defaults). Empty lines and lines starting with '#' are ignored.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/data/dfhack-config/script-paths.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Add additional script search paths here\n# Blank lines and lines that start with \"#\" will be ignored\n# Paths preceded by \"+\" will be searched first\n# Paths preceded by \"-\" will be searched after the default paths\n```\n\n----------------------------------------\n\nTITLE: Coating Weapons with Creature Extracts\nDESCRIPTION: Defines a reaction for coating weapons with creature extracts at a greasing station. Requires 100 units of extract, a container, the weapon, and tallow. Uses dyeing skill.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/raw/reaction_spatter.txt#2025-04-21_snippet_1\n\nLANGUAGE: dfhack-reaction\nCODE:\n```\n[REACTION:SPATTER_ADD_WEAPON_EXTRACT]\n    [NAME:coat weapon with extract]\n    [BUILDING:GREASING_STATION:CUSTOM_W]\n    [SKILL:DYER]\n    [REAGENT:extract:100:LIQUID_MISC:NONE:NONE:NONE]\n        [MIN_DIMENSION:100]\n        [REACTION_CLASS:CREATURE_EXTRACT]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [REAGENT:extract container:1:NONE:NONE:NONE:NONE]\n        [CONTAINS:extract]\n        [PRESERVE_REAGENT]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n        [CAN_USE_ARTIFACT]\n    [REAGENT:object:1:WEAPON:NONE:NONE:NONE]\n        [PRESERVE_REAGENT]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [REAGENT:grease:1:GLOB:NONE:NONE:NONE][REACTION_CLASS:TALLOW][UNROTTEN]\n        [DOES_NOT_DETERMINE_PRODUCT_AMOUNT]\n    [TRANSFER_ARTIFACT_STATUS]\n    [IMPROVEMENT:800:object:COVERED:GET_MATERIAL_FROM_REAGENT:extract:NONE]\n```\n\n----------------------------------------\n\nTITLE: Memory Analysis Functions in dfhack.internal\nDESCRIPTION: New memory analysis functions added to dfhack.internal for debugging and development purposes, allowing inspection of heap memory and object sizes.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_53\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.internal.msizeAddress\ndfhack.internal.getHeapState\ndfhack.internal.heapTakeSnapshot\ndfhack.internal.isAddressInHeap\ndfhack.internal.isAddressActiveInHeap\ndfhack.internal.isAddressUsedAfterFreeInHeap\ndfhack.internal.getAddressSizeInHeap\ndfhack.internal.getRootAddressOfHeapObject\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix-specific vector plugin in CMake\nDESCRIPTION: Conditionally builds the 'vectors' plugin only on Unix systems using the dfhack_plugin macro.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/devel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX)\n    dfhack_plugin(vectors vectors.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Package Generation\nDESCRIPTION: Sets up CPack configuration for creating distributable packages with platform-specific settings and version information.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(DFHACK_PACKAGE_SUFFIX \"\")\nif(UNIX)\n    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)\n    string(STRIP ${GCC_VERSION} GCC_VERSION)\n    set(DFHACK_PACKAGE_SUFFIX \"-gcc-${GCC_VERSION}\")\n    set(CPACK_GENERATOR \"TBZ2\")\nelseif(WIN32)\n    set(CPACK_GENERATOR \"ZIP\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Stockpile Type Configuration\nDESCRIPTION: Examples of configuring stockpiles with multiple item types and container settings\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n#place refuse heap\nyr(20x10)\n\n#place a stone stockpile with five wheelbarrows\ns{wheelbarrows=5}(3x3)\n\n#place a bar, ammo, weapon, and armor stockpile with 20 bins\nbzpd{bins=20}(5x5)\n\n#place a weapon stockpile with no bins\np{containers=0}(9x2)\n```\n\n----------------------------------------\n\nTITLE: Installing DFHack Data Directories with CMake\nDESCRIPTION: A collection of CMake install commands that define how various DFHack data directories and files should be copied to their target locations during installation. The configuration includes conditional logic for test blueprints that are only installed when BUILD_TESTS is enabled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/data/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/dfhack-config/\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/data/dfhack-config-defaults\")\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/init/\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/init\")\n\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/base_command_counts.json\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/data\")\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/orders/\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/data/orders\")\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/stockpiles/\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/data/stockpiles\")\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/art/\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/data/art\")\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/professions/\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/data/professions\")\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/blueprints/\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/data/blueprints\"\n        FILES_MATCHING PATTERN \"*\"\n                       PATTERN blueprints/test EXCLUDE)\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/patches/\n    DESTINATION ${DFHACK_DATA_DESTINATION}/patches\n)\n\nif(BUILD_TESTS)\n    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/blueprints/test/\n            DESTINATION \"${DFHACK_DATA_DESTINATION}/data/blueprints/test\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Tokens from Plant Growth Definitions in Lua\nDESCRIPTION: Examples of customRawTokens.getToken() function used to retrieve tokens from plant definitions with different methods of specifying growth stage.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_156\n\nLANGUAGE: lua\nCODE:\n```\ncustomRawTokens.getToken(plantDefinition, growthNumber, token)\n```\n\nLANGUAGE: lua\nCODE:\n```\ncustomRawTokens.getToken(plantDefinition, growthName, token)\n```\n\n----------------------------------------\n\nTITLE: Configuring Developer Plugins Build Option in CMake\nDESCRIPTION: Defines a CMake option to build developer plugins and adds them as a subdirectory if enabled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_DEV_PLUGINS \"Build developer plugins.\" OFF)\nif(BUILD_DEV_PLUGINS)\n    add_subdirectory(devel)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific DFHack Library Configuration in CMake\nDESCRIPTION: Sets platform-specific properties for the DFHack library, including naming conventions, compiler flags, and additional libraries. On Windows, the library is named \"dfhooks_dfhack\" while on Unix-like systems an additional hooks library is created.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    set_target_properties(dfhack PROPERTIES OUTPUT_NAME \"dfhooks_dfhack\" )\n    set_target_properties(dfhack PROPERTIES COMPILE_FLAGS \"/FI\\\"Export.h\\\"\" )\n    set_target_properties(dfhack-client PROPERTIES COMPILE_FLAGS \"/FI\\\"Export.h\\\"\" )\nelse()\n    set_target_properties(dfhack PROPERTIES COMPILE_FLAGS \"-include Export.h\" )\n    set_target_properties(dfhack-client PROPERTIES COMPILE_FLAGS \"-include Export.h\" )\n    add_library(dfhooks_dfhack SHARED Hooks.cpp)\n    target_link_libraries(dfhooks_dfhack dfhack)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Lua Screen Hide Guard Implementation\nDESCRIPTION: New function dfhack.screen.hideGuard() that exposes the C++ Screen::Hide functionality to Lua scripts.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.screen.hideGuard()\n```\n\n----------------------------------------\n\nTITLE: Basic Autodump Command Usage\nDESCRIPTION: Basic command syntax for using the autodump tool, showing the main command and its destroy-here variant.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/autodump.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nautodump [<options>]\nautodump-destroy-here\n```\n\n----------------------------------------\n\nTITLE: Designating a Hauling Route with Multiple Stops in Quickfort\nDESCRIPTION: Demonstrates how to create a hauling route with multiple stops using Quickfort #dig and #build modes, including track and trackstop designations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n#dig\ntrackE trackEW trackEW trackW\n#build\ntrackstop{route=\"Tick tock\"} ~ ~ trackstop{route=\"Tick tock\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Suspend Manager\nDESCRIPTION: Command to start monitoring jobs and enable the suspend manager functionality.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/suspendmanager.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nenable suspendmanager\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying Help Text for Units Using Custom Tokens\nDESCRIPTION: Example script that retrieves and displays custom help text associated with a selected unit using customRawTokens.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_159\n\nLANGUAGE: lua\nCODE:\n```\nlocal unit = dfhack.gui.getSelectedUnit()\nif not unit then return end\nlocal helpText = customRawTokens.getToken(unit, \"EXAMPLE_MOD_HELP_TEXT\")\nif helpText then print(helpText) end\n```\n\n----------------------------------------\n\nTITLE: Disabling DFHack Library Build\nDESCRIPTION: Command to disable building the core DFHack library, which is built by default. This option turns off the BUILD_LIBRARY flag.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DBUILD_LIBRARY:bool=OFF\ncmake .. -DBUILD_LIBRARY=0\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker for Windows Cross-Compilation\nDESCRIPTION: Docker configuration commands for setting up Windows cross-compilation environment on Linux.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nxhost +local:root\ndocker run -it --env=\"DISPLAY\" --env=\"QT_X11_NO_MITSHM=1\" --volume=/tmp/.X11-unix:/tmp/.X11-unix --user buildmaster --name dfhack-win ghcr.io/dfhack/build-env:master\n```\n\n----------------------------------------\n\nTITLE: DFHack Position Parameter Example\nDESCRIPTION: Example showing different ways to specify position parameters for DFHack GUI functions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_33\n\nLANGUAGE: Lua\nCODE:\n```\n{x = 5, y = 7, z = 11}\ngetSelectedUnit().pos\ncopyall(df.global.cursor)\n```\n\n----------------------------------------\n\nTITLE: Lua API Function Call Example\nDESCRIPTION: Example of API function call to get selected job with keyboard cursor\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.gui.getSelectedJob\n```\n\n----------------------------------------\n\nTITLE: Setting DFHack Default Initial Pause in Lua\nDESCRIPTION: Command to configure the DEFAULT_INITIAL_PAUSE setting for the current session.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_167\n\nLANGUAGE: lua\nCODE:\n```\nrequire('gui.widgets').DEFAULT_INITIAL_PAUSE = false\n```\n\n----------------------------------------\n\nTITLE: Getting Unit Goal Name in DFHack Lua API\nDESCRIPTION: Retrieves the short name describing the goal of the dream that the given unit has. By default returns information about the first dream (currently DF only supports one dream per unit).\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_66\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getGoalName(unit[,goalIndex])\n```\n\n----------------------------------------\n\nTITLE: BSD License Declaration\nDESCRIPTION: Text of the BSD license with additional clauses used by components like protobuf, clsocket, and linenoise.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/LICENSE.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in\n    the documentation and/or other materials provided with the\n    distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Configuring Stonesense Plugin Build Option in CMake\nDESCRIPTION: Defines a CMake option to build the Stonesense plugin and adds it as a subdirectory if enabled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_STONESENSE \"Build stonesense (needs a checkout first).\" OFF)\nif(BUILD_STONESENSE)\n    add_subdirectory(stonesense)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creature Probe Command\nDESCRIPTION: Command to display properties of a selected unit, including IDs of worn items.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/probe.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\ncprobe\n```\n\n----------------------------------------\n\nTITLE: Converting Non-ASCII Characters to ASCII Equivalents using DFHack API\nDESCRIPTION: Reference to a DFHack API function that converts non-ASCII alphabetic characters to their ASCII equivalents, available in both C++ and Lua.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_18\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.toSearchNormalized()\n```\n\n----------------------------------------\n\nTITLE: Configuring TinyXML Static Library Build in CMake\nDESCRIPTION: Sets up TinyXML as a static library if not found in the system. Configures build options including source files and IDE organization. The library is marked as EXCLUDE_FROM_ALL to only build when needed as a dependency.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/tinyxml/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT TinyXML_FOUND)\n    project(dfhack-tinyxml)\n    add_library(dfhack-tinyxml STATIC EXCLUDE_FROM_ALL tinystr.cpp tinyxml.cpp tinyxmlerror.cpp tinyxmlparser.cpp)\n    ide_folder(dfhack-tinyxml \"Depends\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling DFHack Plugin Development\nDESCRIPTION: Commands to enable building DFHack plugins, which is useful for plugin development.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DBUILD_PLUGINS:bool=ON\ncmake .. -DBUILD_PLUGINS=1\n```\n\n----------------------------------------\n\nTITLE: Setting Unit Path Goal in C++\nDESCRIPTION: API function for setting a unit's path goal.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nDFHack::Units::setPathGoal\n```\n\n----------------------------------------\n\nTITLE: Debug Trace and Logging Macros\nDESCRIPTION: New debug features related to the 'debug' plugin, including C++ classes and macros for debug output filtering and management.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\n- Classes (C++ only): ``Signal<Signature, type_tag>``, ``DebugCategory``, ``DebugManager``\n- Macros: ``TRACE``, ``DEBUG``, ``INFO``, ``WARN``, ``ERR``, ``DBG_DECLARE``, ``DBG_EXTERN``\n```\n\n----------------------------------------\n\nTITLE: Liquid Flow Operations\nDESCRIPTION: Script for handling fluid mechanics and flow in the game world.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_52\n\nLANGUAGE: Lua\nCODE:\n```\ngui/liquids\n```\n\n----------------------------------------\n\nTITLE: MIT License Declaration\nDESCRIPTION: Complete text of the MIT license used by several DFHack components including dirent, jsoncpp, and lua-related packages.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/LICENSE.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Building Protobuf-Lite Shared Library\nDESCRIPTION: Creates and configures the protobuf-lite shared library target. Sets compile definitions, links required libraries, and specifies installation locations.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/protobuf/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(protobuf-lite SHARED ${LIBPROTOBUF_LITE_SRCS} ${LIBPROTOBUF_LITE_HDRS})\nide_folder(protobuf-lite \"Depends\")\n\nset_target_properties(protobuf-lite PROPERTIES COMPILE_DEFINITIONS LIBPROTOBUF_EXPORTS)\n\ntarget_link_libraries(protobuf-lite ${CMAKE_THREAD_LIBS_INIT} ${ZLIB_LIBRARIES})\n\ninstall(TARGETS protobuf-lite\n    LIBRARY DESTINATION ${DFHACK_LIBRARY_DESTINATION}\n    RUNTIME DESTINATION ${DFHACK_LIBRARY_DESTINATION})\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Plugin 'diggingInvaders' in CMake\nDESCRIPTION: This CMake script sets up the build configuration for the 'diggingInvaders' DFHack plugin. It defines lists of source files and headers, sets properties for header files, combines all files into a single list, and uses the dfhack_plugin macro to create the plugin target.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/diggingInvaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(diggingInvaders)\n# A list of source files\nset(PROJECT_SRCS\n    diggingInvaders.cpp\n    edgeCost.cpp\n    assignJob.cpp\n)\n# A list of headers\nset(PROJECT_HDRS\n    edgeCost.h\n    assignJob.h\n)\nset_source_files_properties(${PROJECT_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE)\n\n# mash them together (headers are marked as headers and nothing will try to compile them)\nlist(APPEND PROJECT_SRCS ${PROJECT_HDRS})\n\ndfhack_plugin(diggingInvaders ${PROJECT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Pages Class Selection Methods in Lua\nDESCRIPTION: Methods for managing page selection in a Pages widget that maintains one visible child at a time.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_171\n\nLANGUAGE: Lua\nCODE:\n```\nPages{ ..., selected = ... } --Constructor with initial selection\npages:getSelected() --Returns index, child\npages:setSelected(index) --Selects specified child\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the DFHack user manual using reStructuredText syntax. It specifies the maximum depth of the table and lists the various sections of the documentation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   /docs/Introduction\n   /docs/Quickstart\n   /docs/Installing\n   /docs/Core\n   /docs/Tools\n   /docs/guides/index\n   /docs/dev/index\n   /docs/about/index\n```\n\n----------------------------------------\n\nTITLE: Setting DFHack Target Architecture\nDESCRIPTION: Command to explicitly set the target architecture for DFHack to 32-bit instead of the default 64-bit.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DDFHACK_BUILD_ARCH=32\n```\n\n----------------------------------------\n\nTITLE: DFHack Liquids Flow Control Commands\nDESCRIPTION: Commands for controlling liquid flow behavior and modification modes, including add, remove, and flow state settings.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/liquids.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\ns+\ns.\ns-\nf+\nf.\nf-\n```\n\n----------------------------------------\n\nTITLE: Listing Labor IDs and Captions in Lua\nDESCRIPTION: A Lua command to display all available labor IDs and their corresponding readable caption strings. This is used to reference valid values for the 'labor' and 'labor_mask' properties when configuring workshops.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/quickfort-user-guide.rst#2025-04-21_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\n:lua for idx,name in ipairs(df.unit_labor) do cap=df.unit_labor.attrs[idx].caption if cap then print(('%22s %25s'):format(name, cap)) end end\n```\n\n----------------------------------------\n\nTITLE: Using the disable Command in DFHack\nDESCRIPTION: Shows the syntax for using the 'disable' command in DFHack. This command takes one or more plugin names as arguments to deactivate plugins with persistent effects. It is the counterpart to the 'enable' command mentioned in the documentation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/disable.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndisable <plugin> [<plugin> ...]\n```\n\n----------------------------------------\n\nTITLE: Setting DFHack Build Type\nDESCRIPTION: Command to configure the build type for DFHack, affecting debugging information. Uses RelWithDebInfo which includes debugging symbols with optimized code.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Options.rst#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DCMAKE_BUILD_TYPE:string=RelWithDebInfo\n```\n\n----------------------------------------\n\nTITLE: Using the cls command in DFHack\nDESCRIPTION: The cls command clears the terminal screen in DFHack. It can also be invoked as 'clear'. This command only clears visible text on the screen without deleting command history.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/cls.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncls\n```\n\n----------------------------------------\n\nTITLE: Lua JSON I/O Error Handling\nDESCRIPTION: Fragment showing improved error message handling for JSON input/output operations in Lua\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_36\n\nLANGUAGE: Lua\nCODE:\n```\n- Improved \"json\" I/O error messages\n- Stopped a crash when trying to create instances of classes whose vtable addresses are not available\n```\n\n----------------------------------------\n\nTITLE: Lua OrderedTable Implementation\nDESCRIPTION: A new OrderedTable class added to the utils module in Lua.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_24\n\nLANGUAGE: Lua\nCODE:\n```\n- ``utils``: new ``OrderedTable`` class\n```\n\n----------------------------------------\n\nTITLE: Saving Generated Creature Raw Files in DFHack\nDESCRIPTION: Command to save a sample creature graphics file in the Dwarf Fortress root directory, which can be used as a starting point for creating custom graphics for the renamed creatures.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/generated-creature-renamer.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsave-generated-raws\n```\n\n----------------------------------------\n\nTITLE: Lua Enter Sidebar Mode Extension\nDESCRIPTION: Added support for the DesignateMine sidebar mode in dwarfmode.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\ndwarfmode.enterSidebarMode(df.ui_sidebar_mode.DesignateMine)\n```\n\n----------------------------------------\n\nTITLE: Enabling Pet Uncapper Plugin in DFHack\nDESCRIPTION: Command to enable the pet-uncapper plugin with default settings.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/pet-uncapper.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable pet-uncapper\n```\n\n----------------------------------------\n\nTITLE: Hiding DF Screens Temporarily\nDESCRIPTION: Method to temporarily hide DF screens, used by plugins like command-prompt. Added in version 0.44.11-beta2.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_33\n\nLANGUAGE: C++\nCODE:\n```\nScreen::Hide\n```\n\n----------------------------------------\n\nTITLE: Printing Tables Recursively in Lua\nDESCRIPTION: Function to recursively print tables and DF references in Lua. Can be used with the '^' shortcut in the Lua interpreter.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_27\n\nLANGUAGE: Lua\nCODE:\n```\nprintall_recurse\n```\n\n----------------------------------------\n\nTITLE: Dumping DFHack RPC Endpoint Info\nDESCRIPTION: Command to dump RPC endpoint information to a specified file. Takes a single parameter that specifies the output filename.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/devel/dump-rpc.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevel/dump-rpc <filename>\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and External Dependencies in CMake\nDESCRIPTION: Sets up Python finding preferences for pyenv compatibility and includes the DownloadFile CMake module that will be used for retrieving dependencies.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# fix for pyenv: default to `python3` before `python3.x`\nset(Python_FIND_UNVERSIONED_NAMES FIRST)\n\ninclude(CMake/DownloadFile.cmake)\n```\n\n----------------------------------------\n\nTITLE: Lua Version Update Example\nDESCRIPTION: Example showing the required changes for Lua 5.3 update, particularly around float-to-integer conversions in the DFHack API\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_39\n\nLANGUAGE: Lua\nCODE:\n```\n-- Before:\nlocal val = 1.0  -- Would be implicitly converted to integer\ndf.some_api_call(val)\n\n-- After:\nlocal val = 1    -- Must use explicit integer\ndf.some_api_call(val)\n```\n\n----------------------------------------\n\nTITLE: macOS-Specific DFHack Library Configuration in CMake\nDESCRIPTION: Configures macOS-specific settings for DFHack, including linking against the SDL framework, C++ standard library, zip library, and ncurses. Sets up library versions and includes a custom post-build command to fix library dependencies.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n    set(DF_SDL_LIBRARY ${CMAKE_INSTALL_PREFIX}/libs/SDL.framework/Versions/A/SDL)\n    if(NOT EXISTS ${DF_SDL_LIBRARY})\n        message(SEND_ERROR \"SDL framework not found. Make sure CMAKE_INSTALL_PREFIX is specified and correct.\")\n    endif()\n    set(SDL_LIBRARY ${CMAKE_BINARY_DIR}/SDL)\n    execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${DF_SDL_LIBRARY} ${SDL_LIBRARY})\n    set(CXX_LIBRARY ${CMAKE_INSTALL_PREFIX}/libs/libstdc++.6.dylib)\n    set(ZIP_LIBRARY /usr/lib/libz.dylib)\n    target_link_libraries(dfhack ${SDL_LIBRARY})\n    target_link_libraries(dfhack ${CXX_LIBRARY})\n    if(EXISTS ${ZIP_LIBRARY})\n        # doesn't exist on macOS 11, but DFHack seems to find the right library there\n        target_link_libraries(dfhack ${ZIP_LIBRARY})\n    endif()\n    target_link_libraries(dfhack ncurses)\n    set_target_properties(dfhack PROPERTIES VERSION 1.0.0)\n    set_target_properties(dfhack PROPERTIES SOVERSION 1.0.0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Quickfort for Rapid Construction in Dwarf Fortress\nDESCRIPTION: This command opens the quickfort interface, which allows players to quickly apply saved blueprints for digging and building structures.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Quickstart.rst#2025-04-21_snippet_5\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/quickfort\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Changelog Structure for DFHack Project\nDESCRIPTION: This snippet shows how the changelog is structured in ReStructuredText format, with section headers, table of contents configuration, and file inclusion directives.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/NEWS.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. comment\n    This is the changelog for stable releases. Entries are included from\n    changelog.txt.\n\n.. _changelog:\n\n#########\nChangelog\n#########\n\nThis file contains changes grouped by the stable release in which they first\nappeared. See `build-changelog` for more information.\n\nSee `dev-changelog` for a list of changes grouped by development releases.\n\n.. contents:: Contents\n  :local:\n  :depth: 1\n\n.. include:: /docs/changelogs/news.rst\n\n\nOlder Changelogs\n================\nAre kept in a separate file:  `History`\n\n.. that's ``docs/about/History.rst``, if you're reading the raw text.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for DFHack User Guides in reStructuredText\nDESCRIPTION: This snippet defines a table of contents (toctree) in reStructuredText format that links to various DFHack user guides. It sets the maximum depth to 1 and includes paths to four guide documents covering modding, quickfort functionality, and stonesense art.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/guides/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   /docs/guides/modding-guide\n   /docs/guides/quickfort-library-guide\n   /docs/guides/quickfort-user-guide\n   /docs/guides/stonesense-art-guide\n```\n\n----------------------------------------\n\nTITLE: Configuring multiple DFHack plugins in CMake\nDESCRIPTION: Defines the build configuration for multiple DFHack plugins using the dfhack_plugin macro. Some plugins have specific link libraries or compiler flags.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/devel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ndfhack_plugin(buildprobe buildprobe.cpp)\ndfhack_plugin(color-dfhack-text color-dfhack-text.cpp)\ndfhack_plugin(counters counters.cpp)\ndfhack_plugin(dumpmats dumpmats.cpp)\ndfhack_plugin(eventExample eventExample.cpp)\ndfhack_plugin(frozen frozen.cpp)\ndfhack_plugin(kittens kittens.cpp LINK_LIBRARIES ${CMAKE_THREAD_LIBS_INIT} COMPILE_FLAGS_MSVC \"/wd4316\")\ndfhack_plugin(memview memview.cpp memutils.cpp LINK_LIBRARIES lua)\ndfhack_plugin(onceExample onceExample.cpp)\n# dfhack_plugin(renderer-msg renderer-msg.cpp)\n# dfhack_plugin(rprobe rprobe.cpp)\n# dfhack_plugin(stepBetween stepBetween.cpp)\ndfhack_plugin(stockcheck stockcheck.cpp)\ndfhack_plugin(stripcaged stripcaged.cpp)\ndfhack_plugin(tilesieve tilesieve.cpp)\n# dfhack_plugin(zoom zoom.cpp)\n```\n\n----------------------------------------\n\nTITLE: Multi-Context Keybinding with Mouse Button Modifier\nDESCRIPTION: Binds Shift + fifth mouse button to toggle the keyboard cursor in either fortress mode or adventure mode.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/builtins/keybinding.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nkeybinding add Shift-MOUSE5@dwarfmode|dungeonmode toggle-kbd-cursor\n```\n\n----------------------------------------\n\nTITLE: Defining Steam Piston Trap Component in Dwarf Fortress Raw Format\nDESCRIPTION: Defines a trap component item for a steam piston with specifications for name, size, material properties, and attack characteristics. The component is configured as a metal item with blunt attack properties.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/raw/item_trapcomp_steam_engine.txt#2025-04-21_snippet_0\n\nLANGUAGE: raw\nCODE:\n```\n[OBJECT:ITEM]\n\n[ITEM_TRAPCOMP:ITEM_TRAPCOMP_STEAM_PISTON]\n[NAME:piston:pistons]\n[ADJECTIVE:heavy]\n[SIZE:1800]\n[HITS:1]\n[MATERIAL_SIZE:6]\n[METAL]\n[ATTACK:BLUNT:40:200:bash:bashes:NO_SUB:2000]\n```\n\n----------------------------------------\n\nTITLE: Defining Development Changelog in reStructuredText\nDESCRIPTION: This snippet defines the structure and content of the development changelog using reStructuredText syntax. It includes a title, description, table of contents, and references to other changelog files.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/NEWS-dev.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. comment\n    This is the changelog for development releases. Entries are included from\n    changelog.txt.\n\n.. _dev-changelog:\n\n#####################\nDevelopment changelog\n#####################\n\nThis file contains changes grouped by the release (stable or development) in\nwhich they first appeared. See `build-changelog` for more information.\n\nSee `changelog` for a list of changes grouped by stable releases.\n\n.. contents:: Contents\n  :local:\n  :depth: 1\n\n.. include:: /docs/changelogs/news-dev.rst\n```\n\n----------------------------------------\n\nTITLE: Unix-specific build flags with 32/64-bit architecture support\nDESCRIPTION: Configures Unix-specific build flags, adding a LINUX_BUILD definition and setting architecture-specific compiler flags for 32-bit or 64-bit builds.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/lua/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX)\n    add_definitions(-DLINUX_BUILD)\n    if(DFHACK_BUILD_64)\n        set(CMAKE_C_FLAGS \"-m64 -mno-avx\")\n    else()\n        set(CMAKE_C_FLAGS \"-m32\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: DFHack Lua Items API Functions\nDESCRIPTION: Item manipulation functions exposed to Lua\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_28\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.items.canMelt(item)\ndfhack.items.markForMelting(item)\ndfhack.items.cancelMelting(item)\n```\n\n----------------------------------------\n\nTITLE: Setting Choices in GUI List Widget\nDESCRIPTION: Method to set choices in the List widget from gui.widgets module. This method clones the choices table for internal modifications.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_28\n\nLANGUAGE: Lua\nCODE:\n```\ngui.widgets.List:setChoices\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Professions for Units in C++\nDESCRIPTION: API function provided by Bay12 to assign labors based on work details.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nUnits::setAutomaticProfessions\n```\n\n----------------------------------------\n\nTITLE: Configuring DFHack Installation Rules in CMake\nDESCRIPTION: Sets up installation rules for DFHack components, including platform-specific launch scripts, libraries, and executables. Handles differences between macOS, Linux, and Windows paths and conventions.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX)\n    if(APPLE)\n        install(PROGRAMS ${dfhack_SOURCE_DIR}/package/darwin/dfhack\n            DESTINATION .)\n        install(PROGRAMS ${dfhack_SOURCE_DIR}/package/darwin/dfhack-run\n            DESTINATION .)\n    else()\n        # On linux, copy our version of the df launch script which sets LD_PRELOAD\n        install(PROGRAMS ${dfhack_SOURCE_DIR}/package/linux/dfhack\n            DESTINATION .)\n        install(PROGRAMS ${dfhack_SOURCE_DIR}/package/linux/dfhack-run\n            DESTINATION .)\n    endif()\n    install(TARGETS dfhooks_dfhack\n        LIBRARY DESTINATION .\n        RUNTIME DESTINATION .)\nendif()\n\n# install the main lib\ninstall(TARGETS dfhack\n    LIBRARY DESTINATION ${DFHACK_LIBRARY_DESTINATION}\n    RUNTIME DESTINATION ${DFHACK_LIBRARY_DESTINATION})\n\ninstall(TARGETS dfhack-run dfhack-client binpatch\n    LIBRARY DESTINATION ${DFHACK_LIBRARY_DESTINATION}\n    RUNTIME DESTINATION ${DFHACK_LIBRARY_DESTINATION})\n```\n\n----------------------------------------\n\nTITLE: Using allocate Template Function with Type Identity\nDESCRIPTION: Demonstrates how the allocate<T> template function provides a convenient way to allocate memory using a type's identity object.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/data-identity.rst#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nreturn (T*)identity_traits<T>::get()->allocate()\n```\n\n----------------------------------------\n\nTITLE: Getting a Unit's Visible Name in C++\nDESCRIPTION: API function that returns a unit's name structure directly when it doesn't have an impersonated identity, rather than using the associated historical figure's name.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nUnits::getVisibleName\n```\n\n----------------------------------------\n\nTITLE: Defining DFHack Main Library and Client Targets in CMake\nDESCRIPTION: Configures the main DFHack shared library, client library, and utilities (dfhack-run and binpatch). Sets include directories, dependencies on protocol buffer generation, and links required libraries.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/library/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dfhack SHARED ${PROJECT_SOURCES})\ntarget_include_directories(dfhack PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/proto)\n\nget_target_property(xlsxio_INCLUDES xlsxio_read_STATIC INTERFACE_INCLUDE_DIRECTORIES)\ntarget_include_directories(dfhack PRIVATE ${xlsxio_INCLUDES} ${SDL2_INCLUDE_DIRS})\nadd_dependencies(dfhack generate_proto_core)\nadd_dependencies(dfhack generate_headers)\n\nadd_library(dfhack-client SHARED RemoteClient.cpp ColorText.cpp MiscUtils.cpp Error.cpp ${PROJECT_PROTO_SRCS} ${CONSOLE_SOURCES})\ntarget_include_directories(dfhack-client PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/proto)\nadd_dependencies(dfhack-client dfhack)\n\nadd_executable(dfhack-run dfhack-run.cpp)\ntarget_include_directories(dfhack-run PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/proto)\n\nadd_executable(binpatch binpatch.cpp)\ntarget_link_libraries(binpatch dfhack-md5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git and Library Building in CMake\nDESCRIPTION: Checks for Git requirement, adds the library subdirectory for building, and sets up an architecture configuration file installation for DFHack runtime configuration.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Git REQUIRED)\nif(NOT GIT_FOUND)\n    message(SEND_ERROR \"could not find git\")\nendif()\n\n# build the lib itself\nadd_subdirectory(library)\nif(BUILD_LIBRARY)\n    file(WRITE ${CMAKE_BINARY_DIR}/dfhack_setarch.txt ${DFHACK_SETARCH})\n    install(FILES ${CMAKE_BINARY_DIR}/dfhack_setarch.txt DESTINATION ${DFHACK_DATA_DESTINATION})\nendif()\n```\n\n----------------------------------------\n\nTITLE: DFHack Installation and Launch Commands\nDESCRIPTION: Commands for installing DFHack and running Dwarf Fortress in the cross-compilation environment.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/compile/Compile.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd dfhack/build\ncmake .. -DCMAKE_INSTALL_PREFIX=/home/buildmaster/df\nninja install\ncd ~/df\nwine64 \"Dwarf Fortress.exe\"\n```\n\n----------------------------------------\n\nTITLE: Ruby Unit Finding Function Update\nDESCRIPTION: Changes to Ruby's unit_find() function to use Gui::getSelectedUnit() for better compatibility\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_38\n\nLANGUAGE: Ruby\nCODE:\n```\n\"unit_find()\" now uses \"Gui::getSelectedUnit()\" and works in more places\n(e.g. `exterminate` now works from more screens, like `command-prompt`)\n```\n\n----------------------------------------\n\nTITLE: Including Changelog Help Section in RST\nDESCRIPTION: ReStructuredText directive to include a specific section of the changelog.txt file, specifically the help section between markers.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Documentation.rst#2025-04-21_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: /docs/changelog.txt\n   :start-after: ===help\n   :end-before: ===end\n```\n\n----------------------------------------\n\nTITLE: Checking if a Unit is Killed in C++\nDESCRIPTION: Function to check if a unit has been killed, which is the proper way to check for dead units in many cases instead of using the inactive flag.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_29\n\nLANGUAGE: C++\nCODE:\n```\nUnits::isKilled()\n```\n\n----------------------------------------\n\nTITLE: Command Example - Orders Import\nDESCRIPTION: Example command for importing library orders into DFHack\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\norders import library/basic\n```\n\n----------------------------------------\n\nTITLE: Using Screen Zoom Function in C++\nDESCRIPTION: Function to control screen zoom level, previously only available in Lua but now exposed to C++ code.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_35\n\nLANGUAGE: C++\nCODE:\n```\nScreen::zoom()\n```\n\n----------------------------------------\n\nTITLE: Setting Up External Plugins in CMake\nDESCRIPTION: Creates a CMakeLists.txt file for external plugins if it doesn't exist, and includes it in the build process. This allows for adding custom plugins without modifying the main DFHack repository.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/external/CMakeLists.txt\")\n    set(content_str\n\"# Add external plugins here - this file is ignored by git\n\n# Recommended: use add_subdirectory() for folders that you have created within\n# this folder, or dfhack_plugin() for single files that you have added here.\n\n# See the end of /plugins/CMakeLists.txt for more details.\n\")\n    subdirlist(SUBDIRS external)\n    foreach(subdir ${SUBDIRS})\n        set(content_str \"${content_str}add_subdirectory(${subdir})\\n\")\n    endforeach()\n    file(WRITE \"${CMAKE_CURRENT_SOURCE_DIR}/external/CMakeLists.txt\" ${content_str})\nendif()\n\nadd_subdirectory(external)\n```\n\n----------------------------------------\n\nTITLE: Lua Process Arguments GetOpt Implementation\nDESCRIPTION: Implementation of processArgsGetopt() in utils.lua providing callback interface for parameter parsing with getopt-like flexibility for parameter ordering and combination.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nprocessArgsGetopt()\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf Header Generation in CMake\nDESCRIPTION: Generates the config.h header file from a template by substituting CMake variables into the template file.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/protobuf/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/config.h.in\" \"${CMAKE_CURRENT_BINARY_DIR}/config.h\")\n```\n\n----------------------------------------\n\nTITLE: Finding Virtual Tables in DFHack\nDESCRIPTION: Using dlsym(3) to find vtables from libgraphics.so, as part of changes in the DFHack codebase.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_32\n\nLANGUAGE: C++\nCODE:\n```\ndlsym(3)\n```\n\n----------------------------------------\n\nTITLE: Installing DFHack Data Files in CMake\nDESCRIPTION: Sets up installation rules for Lua scripts and raw data files if the INSTALL_DATA_FILES option is enabled.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(INSTALL_DATA_FILES)\n    install(DIRECTORY lua/\n        DESTINATION ${DFHACK_LUA_DESTINATION}/plugins\n        FILES_MATCHING PATTERN \"*.lua\")\n    install(DIRECTORY raw/\n        DESTINATION ${DFHACK_DATA_DESTINATION}/raw\n        FILES_MATCHING PATTERN \"*.txt\")\n    install(DIRECTORY raw/\n        DESTINATION ${DFHACK_DATA_DESTINATION}/raw\n        FILES_MATCHING PATTERN \"*.diff\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Required Threads Package on Unix Systems\nDESCRIPTION: Finds and includes the Threads package on Unix systems, which is required for Protocol Buffers threading functionality.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/protobuf/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX)\n    find_package(Threads REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Reloading Overlays with overlay.rescan()\nDESCRIPTION: The overlay.reload() function has been renamed to overlay.rescan() to avoid conflict with the global reload() function. Developers should use the new name when reloading overlays during development.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_50\n\nLANGUAGE: Lua\nCODE:\n```\noverlay.rescan()\n```\n\n----------------------------------------\n\nTITLE: Primitive Reference Value Access\nDESCRIPTION: Example of accessing primitive reference values in DFHack's Lua API through numeric indices. Index 0 is equivalent to the 'value' field.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nref[0] -- Equivalent to ref.value\n```\n\n----------------------------------------\n\nTITLE: Referencing Steam Engine Raw Definitions Path\nDESCRIPTION: File path reference for the raw definitions required by the steam-engine plugin.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/about/History.rst#2025-04-21_snippet_53\n\nLANGUAGE: txt\nCODE:\n```\nhack/raw/*_steam_engine.txt\n```\n\n----------------------------------------\n\nTITLE: Probe Cursor Coordinate Option\nDESCRIPTION: Option flags for specifying map coordinates instead of using keyboard cursor position.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/probe.rst#2025-04-21_snippet_3\n\nLANGUAGE: dfhack\nCODE:\n```\n-c, --cursor <x>,<y>,<z>\n```\n\n----------------------------------------\n\nTITLE: Using Interior Medium Frame Window Border in Lua\nDESCRIPTION: Reference to a window border constant for creating signature-less frames that are thicker than the interior frame in Lua interfaces.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_58\n\nLANGUAGE: Lua\nCODE:\n```\ngui.INTERIOR_MEDIUM_FRAME\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Token from Race and Caste by Number in DFHack Lua API\nDESCRIPTION: Retrieves the arguments of a custom token from a specified race definition and caste number. Similar to getting tokens from units but with explicit race and caste specification. Caste -1 means no caste.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_154\n\nLANGUAGE: lua\nCODE:\n```\ncustomRawTokens.getToken(raceDefinition, casteNumber, token)\n```\n\n----------------------------------------\n\nTITLE: Channel-Safely Debug Commands\nDESCRIPTION: Debug filter commands for troubleshooting the plugin's operation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/channel-safely.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndebugfilter set Info channel manager\ndebugfilter set Debug channel plugin\ndebugfilter set Trace channel group\n```\n\n----------------------------------------\n\nTITLE: RST Note Block\nDESCRIPTION: RST markup for a note about DFHack GUI tools display conventions\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/Introduction.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n    In order to avoid user confusion, as a matter of policy all GUI tools\n    display the word :guilabel:`DFHack` on the screen somewhere while active.\n\n    When that is not appropriate because they merely add keybinding hints to\n    existing DF screens, they surround the added text or clickable buttons in red\n    square brackets.\n```\n\n----------------------------------------\n\nTITLE: Defining Steam Engine Building in Dwarf Fortress\nDESCRIPTION: This snippet defines the properties of a steam engine building, including its name, dimensions, build requirements, and visual representation. It specifies the items needed for construction and the building's appearance in the game.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/raw/building_steam_engine.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dwarf Fortress Raw\nCODE:\n```\n[BUILDING_WORKSHOP:STEAM_ENGINE]\n    [NAME:Steam Engine]\n    [NAME_COLOR:4:0:1]\n    [DIM:3:3]\n    [WORK_LOCATION:2:3]\n    [BUILD_LABOR:MECHANIC]\n    [BUILD_KEY:CUSTOM_ALT_S]\n    [BLOCK:1:1:1:1]\n    [BLOCK:2:1:1:1]\n    [BLOCK:3:1:0:1]\n    [TILE:0:1:240:' ':254]\n    [TILE:0:2:' ':' ':128]\n    [TILE:0:3:246:' ':' ']\n    [COLOR:0:1:6:0:0:0:0:0:7:0:0]\n    [COLOR:0:2:0:0:0:0:0:0:7:0:0]\n    [COLOR:0:3:MAT:0:0:0:0:0:0]\n    [TILE:1:1:246:128:' ']\n    [TILE:1:2:' ':' ':254]\n    [TILE:1:3:254:'/':240]\n    [COLOR:1:1:MAT:7:0:0:0:0:0]\n    [COLOR:1:2:0:0:0:0:0:0:7:0:0]\n    [COLOR:1:3:7:0:0:6:0:0:6:0:0]\n    [TILE:2:1:21:' ':128]\n    [TILE:2:2:128:' ':246]\n    [TILE:2:3:177:19:177]\n    [COLOR:2:1:6:0:0:0:0:0:7:0:0]\n    [COLOR:2:2:7:0:0:0:0:0:MAT]\n    [COLOR:2:3:7:0:0:6:0:0:7:0:0]\n    [TILE:3:1:15:246:15]\n    [TILE:3:2:'\\':19:'/']\n    [TILE:3:3:7:' ':7]\n    [COLOR:3:1:7:0:0:MAT:7:0:0]\n    [COLOR:3:2:6:0:0:0:0:1:6:0:0]\n    [COLOR:3:3:1:7:1:0:0:0:4:7:1]\n    [BUILD_ITEM:1:BARREL:NONE:INORGANIC:NONE][EMPTY][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:PIPE_SECTION:NONE:INORGANIC:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:TRAPCOMP:ITEM_TRAPCOMP_STEAM_PISTON:INORGANIC:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:CHAIN:NONE:INORGANIC:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:TRAPPARTS:NONE:NONE:NONE][CAN_USE_ARTIFACT]\n    [BUILD_ITEM:1:BLOCKS:NONE:NONE:NONE][BUILDMAT][FIRE_BUILD_SAFE]\n```\n\n----------------------------------------\n\nTITLE: Citizen List Retrieval\nDESCRIPTION: Function to get a list of all citizens in the game world.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/changelog.txt#2025-04-21_snippet_79\n\nLANGUAGE: Lua\nCODE:\n```\ndfhack.units.getCitizens()\n```\n\n----------------------------------------\n\nTITLE: Defining Lua source files and compiling with C++\nDESCRIPTION: Lists all Lua source files and configures them to be compiled with a C++ compiler instead of C. Appends headers to the source list for better IDE integration.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/lua/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Build Libraries\nset(SRC_LIBLUA\n    src/lapi.c\n    src/lauxlib.c\n    src/lbaselib.c\n    src/lbitlib.c\n    src/lcode.c\n    src/lcorolib.c\n    src/lctype.c\n    src/ldblib.c\n    src/ldebug.c\n    src/ldo.c\n    src/ldump.c\n    src/lfunc.c\n    src/lgc.c\n    src/linit.c\n    src/liolib.c\n    src/llex.c\n    src/lmathlib.c\n    src/lmem.c\n    src/loadlib.c\n    src/lobject.c\n    src/lopcodes.c\n    src/loslib.c\n    src/lparser.c\n    src/lstate.c\n    src/lstring.c\n    src/lstrlib.c\n    src/ltable.c\n    src/ltablib.c\n    src/ltm.c\n    src/lundump.c\n    src/lutf8lib.c\n    src/lvm.c\n    src/lzio.c\n)\n# compile with C++ compiler\nset_source_files_properties(${SRC_LIBLUA} PROPERTIES LANGUAGE CXX)\n# append headers to sources to make them show up in MSVC GUI\nlist(APPEND SRC_LIBLUA ${HDR_LIBLUA})\n```\n\n----------------------------------------\n\nTITLE: Zlib License Declaration\nDESCRIPTION: Full text of the Zlib license under which DFHack core is distributed. Specifies terms for software use, modification and redistribution.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/LICENSE.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any\ndamages arising from the use of this software.\n\nPermission is granted to anyone to use this software for any\npurpose, including commercial applications, and to alter it and\nredistribute it freely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must\n   not claim that you wrote the original software. If you use this\n   software in a product, an acknowledgment in the product\n   documentation would be appreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and\n   must not be misrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source\n   distribution.\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags Based on Compiler Type\nDESCRIPTION: Configures compiler-specific flags for GNU C Compiler and Microsoft Visual C++. For GCC, it disables several warnings, while for MSVC it disables warnings related to integer conversion and smaller types.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/protobuf/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-unused-result -Wno-unused-local-typedefs -Wno-misleading-indentation -Wno-class-memaccess -Wno-sign-compare\")\nelseif(MSVC)\n    # Disable warnings for integer conversion to smaller type\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4267 /wd4273\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Stockflow Plugin Command\nDESCRIPTION: Command to enable the stockflow plugin functionality in DFHack\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/stockflow.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nenable stockflow\n```\n\n----------------------------------------\n\nTITLE: Configuring Hash Map Implementation for Protobuf in CMake\nDESCRIPTION: Sets up the hash map implementation configuration for Protocol Buffers. Defines the hash map and hash set header files, namespace, and class names using C++ standard library's unordered_map and unordered_set.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/protobuf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HASH_MAP_H <unordered_map>)\nset(HASH_SET_H <unordered_map>)\nset(HASH_NAMESPACE std)\nset(HASH_MAP_CLASS unordered_map)\nset(HASH_SET_CLASS unordered_set)\nset(HAVE_HASH_MAP 1)\nset(HAVE_HASH_SET 1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Skeleton Plugin Build Option in CMake\nDESCRIPTION: Defines a CMake option to build the skeleton plugin, which serves as an example for creating custom plugins.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SKELETON \"Build the skeleton plugin.\" OFF)\nif(BUILD_SKELETON)\n    dfhack_plugin(skeleton examples/skeleton.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding check-structures-sanity subdirectory in CMake\nDESCRIPTION: Includes the 'check-structures-sanity' subdirectory in the build process, likely containing additional CMake configuration or source files.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/plugins/devel/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(check-structures-sanity)\n```\n\n----------------------------------------\n\nTITLE: Configuring LodePNG Static Library for DFHack in CMake\nDESCRIPTION: This CMake snippet sets up the LodePNG library as a static dependency for the DFHack project. It defines the project name, adds the library with its source files, and organizes it in the IDE folder structure.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/depends/lodepng/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(dfhack-lodepng)\nadd_library(dfhack-lodepng STATIC EXCLUDE_FROM_ALL lodepng.cpp lodepng.h)\nide_folder(dfhack-lodepng \"Depends\")\n```\n\n----------------------------------------\n\nTITLE: EditField Function Documentation - Lua\nDESCRIPTION: Core methods of the EditField widget class for cursor control and text manipulation.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/dev/Lua API.rst#2025-04-21_snippet_172\n\nLANGUAGE: lua\nCODE:\n```\neditfield:setCursor([cursor_pos])\neditfield:setText(text[, cursor_pos])\neditfield:insert(text)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Items with createitem\nDESCRIPTION: Obtains the item and material tokens of an existing item, which can be used to create matching items.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/createitem.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncreateitem inspect\n```\n\n----------------------------------------\n\nTITLE: Listing Item Types in Lua\nDESCRIPTION: Lua command to display all available item types in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/dfhack/blob/develop/docs/plugins/jobutils.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlua @df.item_type\n```"
  }
]