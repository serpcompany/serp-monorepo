[
  {
    "owner": "geldata",
    "repo": "gel",
    "content": "TITLE: Basic Insert of Hero Object in EdgeQL\nDESCRIPTION: This EdgeQL snippet demonstrates a basic insert operation for creating a Hero object with a name and secret identity.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Hero {\n  name := \"Spider-Man\",\n  secret_identity := \"Peter Parker\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating EdgeDB Schema for Flashcard Application\nDESCRIPTION: Defines the EdgeDB schema for Card and Deck types. Sets up a one-to-many relationship between Decks and Cards with an ordering capability and a deletion policy that allows removing cards without affecting decks.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/modeling/fastapi.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl-diff\nCODE:\n```\n  module default {\n+   type Card {\n+     required order: int64;\n+     required front: str;\n+     required back: str;\n+   };\n+\n+   type Deck {\n+     required name: str;\n+     description: str;\n+     multi cards: Card {\n+       constraint exclusive;\n+       on target delete allow;\n+     };\n+   };\n  };\n```\n\n----------------------------------------\n\nTITLE: Upsert Operation Using 'unless conflict' in EdgeQL\nDESCRIPTION: This EdgeQL query demonstrates an upsert operation, attempting to insert a Movie object and updating it if a conflict occurs on the title field.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  title := \"Eternals\",\n  release_year := 2021\ninsert Movie {\n  title := title,\n  release_year := release_year\n}\nunless conflict on .title\nelse (\n  update Movie set { release_year := release_year }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining BaseObject Type in SDL\nDESCRIPTION: Defines the root object type BaseObject with a required UUID identifier and a readonly __type__ property. The id property can be overridden by subtypes using specific UUID generation functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/objects.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type std::BaseObject {\n    # Universally unique object identifier\n    required id: uuid {\n        default := (select std::uuid_generate_v1mc());\n        readonly := true;\n        constraint exclusive;\n    }\n\n    # Object type in the information schema.\n    required readonly __type__: schema::ObjectType;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Document Embeddings Generation Script in TypeScript\nDESCRIPTION: The complete implementation of the embeddings generation script including imports, interfaces, helper functions, and the main execution. This script traverses documentation files, generates embeddings, and stores them in a database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { promises as fs } from \"fs\";\nimport { join } from \"path\";\nimport dotenv from \"dotenv\";\nimport { encode } from \"gpt-tokenizer\";\nimport * as gel from \"gel\";\nimport e from \"dbschema/edgeql-js\";\nimport { initOpenAIClient } from \"@/utils\";\n\ndotenv.config({ path: \".env.local\" });\n\nconst openai = initOpenAIClient();\n\ninterface Section {\n  id?: string;\n  tokens: number;\n  content: string;\n  embedding: number[];\n}\n\nasync function walk(dir: string): Promise<string[]> {\n  const entries = await fs.readdir(dir, { withFileTypes: true });\n\n  return (\n    await Promise.all(\n      entries.map((entry) => {\n        const path = join(dir, entry.name);\n        if (entry.isFile()) return [path];\n        else if (entry.isDirectory()) return walk(path);\n        return [];\n      })\n    )\n  ).flat();\n}\n\nasync function prepareSectionsData(\n  sectionPaths: string[]\n): Promise<Section[]> {\n  const contents: string[] = [];\n  const sections: Section[] = [];\n\n  for (const path of sectionPaths) {\n    const content = await fs.readFile(path, \"utf8\");\n    // OpenAI recommends replacing newlines with spaces for best results\n    // when generating embeddings\n    const contentTrimmed = content.replace(/\\n/g, \" \");\n    contents.push(contentTrimmed);\n    sections.push({\n      content,\n      tokens: encode(content).length,\n      embedding: [],\n    });\n  }\n\n  const embeddingResponse = await openai.embeddings.create({\n    model: \"text-embedding-ada-002\",\n    input: contents,\n  });\n\n  embeddingResponse.data.forEach((item, i) => {\n    sections[i].embedding = item.embedding;\n  });\n\n  return sections;\n}\n\nasync function storeEmbeddings() {\n  const client = gel.createClient();\n\n  const sectionPaths = await walk(\"docs\");\n\n  console.log(`Discovered ${sectionPaths.length} sections`);\n\n  const sections = await prepareSectionsData(sectionPaths);\n\n  // Delete old data from the DB.\n  await e.delete(e.Section).run(client);\n\n  // Bulk-insert all data into Gel database.\n  const query = e.params({ sections: e.json }, ({ sections }) => {\n    return e.for(e.json_array_unpack(sections), (section) => {\n      return e.insert(e.Section, {\n        content: e.cast(e.str, section.content!),\n        tokens: e.cast(e.int16, section.tokens!),\n        embedding: e.cast(e.OpenAIEmbedding, section.embedding!),\n      });\n    });\n  });\n\n  await query.run(client, { sections });\n  console.log(\"Embedding generation complete\");\n}\n\n(async function main() {\n  await storeEmbeddings();\n})();\n```\n\n----------------------------------------\n\nTITLE: Returning Deleted Objects in EdgeQL\nDESCRIPTION: Demonstrates how to retrieve information about deleted objects before they are permanently removed from the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/delete.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith movie := (delete Movie filter .title = \"Untitled\")\nselect movie {id, title};\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI Project Environment\nDESCRIPTION: Commands to clone the FastAPI starter template, create and activate a virtual environment, install dependencies, and initialize the Gel project.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/fastapi.rst#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone \\\n    git@github.com:geldata/quickstart-fastapi.git \\\n    flashcards\n$ cd flashcards\n$ python -m venv venv\n$ source venv/bin/activate # or venv\\Scripts\\activate on Windows\n$ pip install -r requirements.txt\n$ uvx gel project init\n```\n\n----------------------------------------\n\nTITLE: Using Complex Types in EdgeDB Parameters with TypeScript\nDESCRIPTION: Shows how to use complex types as parameters in EdgeDB queries. This example demonstrates inserting a movie with nested actor data using e.json and casting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst insertMovie = e.params(\n  {\n    title: e.str,\n    release_year: e.int64,\n    actors: e.json,\n  },\n  (params) =>\n    e.insert(e.Movie, {\n      title: params.title,\n      release_year: params.release_year,\n      actors: e.for(e.json_array_unpack(params.actors), (actor) =>\n        e.insert(e.Person, {\n          name: e.cast(e.str, actor.name),\n        })\n      ),\n    })\n);\n\nawait insertMovie.run(client, {\n  title: \"Dune\",\n  release_year: 2021,\n  actors: [{ name: \"Timmy\" }, { name: \"JMo\" }],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Gel Schema for Movie and Actor Types\nDESCRIPTION: SDL code defining the schema for the movie organization system, including Actor and Movie types with their properties and relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\n# dbschema/default.gel\n\nmodule default {\n  abstract type Auditable {\n    property created_at -> datetime {\n      readonly := true;\n      default := datetime_current();\n    }\n  }\n\n  type Actor extending Auditable {\n    required property name -> str {\n      constraint max_len_value(50);\n    }\n    property age -> int16 {\n      constraint min_value(0);\n      constraint max_value(100);\n    }\n    property height -> int16 {\n      constraint min_value(0);\n      constraint max_value(300);\n    }\n  }\n\n  type Movie extending Auditable {\n    required property name -> str {\n      constraint max_len_value(50);\n    }\n    property year -> int16{\n      constraint min_value(1850);\n    };\n    multi link actors -> Actor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Insert with Multiple Object Types in EdgeQL\nDESCRIPTION: This complex EdgeQL query demonstrates a nested insert operation, creating a Movie object along with new Hero and Villain objects, and linking them together.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Movie {\n  title := \"Black Widow\",\n  release_year := 2021,\n  characters := {\n    (select Hero filter .name = \"Black Widow\"),\n    (insert Hero { name := \"Yelena Belova\"}),\n    (insert Villain {\n      name := \"Dreykov\",\n      nemesis := (select Hero filter .name = \"Black Widow\")\n    })\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Executing a Transaction with Gel Blocking Client in Python\nDESCRIPTION: Illustrates how to use a transaction with the blocking client. This code snippet shows the syntax for creating a transaction context and executing a query within it.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclient = gel.create_client()\nfor tx in client.transaction():\n    with tx:\n        tx.query('SELECT {1, 2, 3}')\n```\n\n----------------------------------------\n\nTITLE: Abstract Types and Inheritance\nDESCRIPTION: Demonstrates how to create abstract types and implement inheritance in object types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_12\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Content {\n  required title: str;\n}\n\ntype Movie extending Content {\n  required release_year: int64;\n}\n\ntype TVShow extending Content {\n  required num_seasons: int64;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Gel AI Client with RAG Capabilities\nDESCRIPTION: Shows how to initialize a Gel client and create a RAG-enabled AI client with GPT-4 Turbo. Demonstrates the change from using query_rag to stream_rag method for processing queries with context.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/python.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport gel\nimport gel.ai\n\ngel_client = gel.create_client()\ngel_ai = gel.ai.create_rag_client(\n    client,\n    model=\"gpt-4-turbo-preview\"\n)\n\n- gel_ai.query_rag(\n+ gel_ai.stream_rag(\n    \"Who helps Komi make friends?\",\n    context=\"Friend\",\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Transactions with AsyncIO Client in Python\nDESCRIPTION: This example shows how to use the transaction() method to open a retryable transaction loop. It demonstrates updating a counter value within a transaction, ensuring atomicity and handling potential transient errors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nasync for tx in con.transaction():\n    async with tx:\n        value = await tx.query_single(\"SELECT Counter.value\")\n        await tx.execute(\n            \"UPDATE Counter SET { value := <int64>$value }\",\n            value=value + 1,\n        )\n```\n\n----------------------------------------\n\nTITLE: Basic Query Execution in Python\nDESCRIPTION: Demonstrates basic query execution using the client.query method, including connection setup and result handling.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport gel\n\nclient = gel.create_async_client()\n\nasync def main():\n  await client.ensure_connected()\n  result = await client.query(\"select 2 + 2;\")\n  print(result)\n\nasyncio.run(main())\n\n# Output:\n# [4]\n```\n\n----------------------------------------\n\nTITLE: Overloading Inherited Properties and Links in SDL\nDESCRIPTION: Demonstrates how to overload inherited properties and links in Gel SDL. It shows the 'Student' type overloading the 'name' property and 'friends' link from the 'Person' type with additional constraints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Person {\n  name: str;\n  multi friends: Person;\n}\n\ntype Student extending Person {\n  overloaded name: str {\n    constraint exclusive;\n  }\n  overloaded multi friends: Student;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Client Usage in Python\nDESCRIPTION: Python implementation demonstrating client creation and query execution\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/clients.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom gel import create_client\n\nclient = create_client()\n\nresult = client.query_single(\"select random()\")\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Answer Generation Implementation - Python\nDESCRIPTION: Implementation of answer generation using web sources and LLM\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nasync def generate_answer(\n    query: str,\n    web_sources: list[WebSource],\n) -> SearchResult:\n    system_prompt = (\n        \"You are a helpful assistant that answers user's questions\"\n        + \" by finding relevant information in Hacker News threads.\"\n        + \" When answering the question, describe conversations that people have around the subject,\"\n        + \" provided to you as a context, or say i don't know if they are completely irrelevant.\"\n    )\n\n    prompt = f\"User search query: {query}\\n\\nWeb search results:\\n\"\n\n    for i, source in enumerate(web_sources):\n        prompt += f\"Result {i} (URL: {source.url}):\\n\"\n        prompt += f\"{source.text}\\n\\n\"\n\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n\n    llm_response = get_llm_completion(\n        system_prompt=system_prompt,\n        messages=messages,\n    )\n\n    search_result = SearchResult(\n        response=llm_response,\n        sources=web_sources,\n    )\n\n    return search_result\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat and Message Endpoints in FastAPI\nDESCRIPTION: Python code defining the FastAPI endpoints for managing chats and messages. Includes imports for query functions and endpoint implementations for getting chats, creating chats, and retrieving messages.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom .queries.get_chats_async_edgeql import get_chats as get_chats_query, GetChatsResult\nfrom .queries.get_chat_by_id_async_edgeql import (\n    get_chat_by_id as get_chat_by_id_query,\n    GetChatByIdResult,\n)\nfrom .queries.get_messages_async_edgeql import (\n    get_messages as get_messages_query,\n    GetMessagesResult,\n)\nfrom .queries.create_chat_async_edgeql import (\n    create_chat as create_chat_query,\n    CreateChatResult,\n)\nfrom .queries.add_message_async_edgeql import (\n    add_message as add_message_query,\n)\n\n\n@app.get(\"/chats\")\nasync def get_chats(\n    username: str = Query(), chat_id: str = Query(None)\n) -> list[GetChatsResult] | GetChatByIdResult:\n    \"\"\"List user's chats or get a chat by username and id\"\"\"\n    if chat_id:\n        chat = await get_chat_by_id_query(\n            gel_client, username=username, chat_id=chat_id\n        )\n        if not chat:\n            raise HTTPException(\n                HTTPStatus.NOT_FOUND,\n                detail={\"error\": f\"Chat {chat_id} for user {username} does not exist.\"},\n            )\n        return chat\n    else:\n        return await get_chats_query(gel_client, username=username)\n\n\n@app.post(\"/chats\", status_code=HTTPStatus.CREATED)\nasync def post_chat(username: str) -> CreateChatResult:\n    return await create_chat_query(gel_client, username=username)\n\n\n@app.get(\"/messages\")\nasync def get_messages(\n    username: str = Query(), chat_id: str = Query()\n) -> list[GetMessagesResult]:\n    \"\"\"Fetch all messages from a chat\"\"\"\n    return await get_messages_query(gel_client, username=username, chat_id=chat_id)\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction in TypeScript/JS with EdgeQL Query String\nDESCRIPTION: This snippet demonstrates how to execute a transaction in TypeScript/JS using EdgeQL query strings to update bank customer balances.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/transactions.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclient.transaction(async tx => {\n  await tx.execute(`update BankCustomer\n    filter .name = 'Customer1'\n    set { bank_balance := .bank_balance -10 }`);\n  await tx.execute(`update BankCustomer\n    filter .name = 'Customer2'\n    set { bank_balance := .bank_balance +10 }`);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Similarity Search in Python\nDESCRIPTION: Python code demonstrating how to set up a Gel AI client, generate embeddings, and perform a similarity search query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/python.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport gel\nimport gel.ai\n\ngel_client = gel.create_client()\ngel_ai = gel.ai.create_rag_client(client)\n\ntext = \"Who helps Komi make friends?\"\nvector = gel_ai.generate_embeddings(\n    text,\n    \"text-embedding-3-small\",\n)\n\ngel_client.query(\n    \"select ext::ai::search(Friend, <array<float32>>$embedding_vector\",\n    embedding_vector=vector,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Object Type with Links in EdgeQL\nDESCRIPTION: Demonstrates how to query an object type including linked object properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person {\n  email,\n  best_friend: {\n    email\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Database Migration in Gel\nDESCRIPTION: Shell commands for creating and applying a migration to implement the schema in the database. The first command creates a migration file, and the second command applies the migration, after which the query builder is automatically generated.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/modeling/nextjs.rst#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ npx gel migration create\nCreated ./dbschema/migrations/00001-m125ajr.edgeql, id: m125ajrbqp7ov36s7aniefxc376ofxdlketzspy4yddd3hrh4lxmla\n$ npx gel migrate\nApplying m125ajrbqp7ov36s7aniefxc376ofxdlketzspy4yddd3hrh4lxmla (00001-m125ajr.edgeql)\n... parsed\n... applied\nGenerating query builder...\nDetected tsconfig.json, generating TypeScript files.\n  To override this, use the --target flag.\n  Run `npx @gel/generate --help` for full options.\nIntrospecting database schema...\nGenerating runtime spec...\nGenerating cast maps...\nGenerating scalars...\nGenerating object types...\nGenerating function types...\nGenerating operators...\nGenerating set impl...\nGenerating globals...\nGenerating index...\nWriting files to ./dbschema/edgeql-js\nGeneration complete! 🤘\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Route Handler for Question Answering in TypeScript\nDESCRIPTION: This is the main POST route handler that orchestrates the entire question answering process. It sanitizes the query, checks for flagged content, generates embeddings, retrieves context, creates the full prompt, and returns the streamed answer from OpenAI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(req: Request) {\n  try {\n    const { query } = await req.json();\n    const sanitizedQuery = query.trim();\n\n    const flagged = await isQueryFlagged(query);\n\n    if (flagged) throw new Error(errors.flagged);\n\n    const embedding = await getEmbedding(query);\n\n    const context = await getContext(embedding);\n\n    const prompt = createFullPrompt(sanitizedQuery, context);\n\n    const answer = await getOpenAiAnswer(prompt);\n\n    return new Response(answer.body, {\n      headers: {\n        \"Content-Type\": \"text/event-stream\",\n      },\n    });\n  } catch (error: any) {\n    console.error(error);\n\n    const uiError = error.message || errors.default;\n\n    return new Response(uiError, {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings for User Query with OpenAI API in TypeScript\nDESCRIPTION: This TypeScript function uses the OpenAI API to generate embeddings for a user's query, preparing it for similarity search.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getEmbedding(query: string) {\n  const embeddingResponse = await openai.embeddings.create({\n    model: \"text-embedding-ada-002\",\n    input: query.replaceAll(\"\\n\", \" \"),\n  });\n\n  const [{ embedding }] = embeddingResponse.data;\n\n  return embedding;\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Document Sections with OpenAI Embeddings in TypeScript\nDESCRIPTION: This function processes document section files, reads their content, calculates token counts, and generates embeddings using OpenAI's embedding model. It returns an array of Section objects ready to be stored in the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareSectionsData(\n  sectionPaths: string[]\n): Promise<Section[]> {\n  const contents: string[] = [];\n  const sections: Section[] = [];\n\n  for (const path of sectionPaths) {\n    const content = await fs.readFile(path, \"utf8\");\n    // OpenAI recommends replacing newlines with spaces for best results\n    // when generating embeddings\n    const contentTrimmed = content.replace(/\\n/g, \" \");\n    contents.push(contentTrimmed);\n    sections.push({\n      content,\n      tokens: encode(content).length,\n      embedding: [],\n    });\n  }\n\n  const embeddingResponse = await openai.embeddings.create({\n    model: \"text-embedding-ada-002\",\n    input: contents,\n  });\n\n  embeddingResponse.data.forEach((item, i) => {\n    sections[i].embedding = item.embedding;\n  });\n\n  return sections;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gel Project using CLI\nDESCRIPTION: Demonstrates the process of initializing a new Gel project using the 'gel project init' command. It shows the interactive prompts for specifying Gel version and instance name, followed by project setup steps.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/projects.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init\nNo `gel.toml` found in this repo or above.\nDo you want to initialize a new project? [Y/n]\n> Y\nChecking Gel versions...\nSpecify the version of Gel to use with this project [6.4]:\n> # left blank for default\nSpecify the name of Gel instance to use with this project:\n> my_instance\nInitializing Gel instance...\nBootstrap complete. Server is up and running now.\nProject initialialized.\n```\n\n----------------------------------------\n\nTITLE: Ordering and Pagination Query\nDESCRIPTION: Demonstrates ordering results with multiple criteria and implementing pagination using limit and offset.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Villain { name }\norder by .name\noffset 2\nlimit 2;\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Route for Individual Blog Posts\nDESCRIPTION: This code creates a dynamic route for individual blog posts in Next.js. It uses the generated query builder to fetch a specific post based on the ID from the URL parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from 'gel'\nimport e from '@/dbschema/edgeql-js'\nimport Link from 'next/link'\n\nconst client = createClient()\n\nexport default async function Post({ params }: { params: { id: string } }) {\n  const post = await e\n    .select(e.BlogPost, (post) => ({\n      id: true,\n      title: true,\n      content: true,\n      filter_single: e.op(post.id, '=', e.uuid(params.id)),\n    }))\n    .run(client)\n\n  if (!post) {\n    return <div>Post not found</div>\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 bg-black text-white\">\n      <nav>\n        <Link\n          href=\"/\"\n          className=\"text-blue-500 mb-4 block\"\n          replace\n        >\n          Back to list\n        </Link>\n      </nav>\n      <h1 className=\"text-3xl font-bold mb-4\">{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for EdgeQL Examples\nDESCRIPTION: Defines a sample schema with Person, Hero, Villain, and Movie types for demonstration purposes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  abstract type Person {\n    required name: str { constraint exclusive };\n  }\n\n  type Hero extending Person {\n    secret_identity: str;\n    multi villains := .<nemesis[is Villain];\n  }\n\n  type Villain extending Person {\n    nemesis: Hero;\n  }\n\n  type Movie {\n    required title: str { constraint exclusive };\n    required release_year: int64;\n    multi characters: Person;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cards with EdgeDB\nDESCRIPTION: Deletes a card from the database using EdgeDB. The card is automatically removed from its associated deck due to deletion policies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait e\n  .params({ id: e.uuid }, (params) =>\n    e.delete(e.Card, (c) => ({\n      filter_single: e.op(c.id, \"=\", params.id),\n    }))\n  )\n  .run(client, { id: cardId });\n```\n\n----------------------------------------\n\nTITLE: Defining Types in Gel Schema using ESDL\nDESCRIPTION: Demonstrates how to define object types in Gel's schema language. The example shows a Person type with a required name property and a Movie type with a title and a multi-link to Person objects representing actors.\nSOURCE: https://github.com/geldata/gel/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: esdl\nCODE:\n```\ntype Person {\n  required name: str;\n}\n\ntype Movie {\n  required title: str;\n  multi actors: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User in FastAPI with EdgeDB\nDESCRIPTION: FastAPI endpoint for updating a user's name with proper error handling for constraint violations and non-existent users. This code demonstrates integrating EdgeDB queries with HTTP routes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@router.put(\"/users\")\nasync def put_user(\n    user: RequestData, current_name: str\n) -> update_user_qry.UpdateUserResult:\n    try:\n        updated_user = await update_user_qry.update_user(\n            client,\n            new_name=user.name,\n            current_name=current_name,\n        )\n    except gel.errors.ConstraintViolationError:\n        raise HTTPException(\n            status_code=HTTPStatus.BAD_REQUEST,\n            detail={\"error\": f\"Username '{user.name}' already exists.\"},\n        )\n\n    if not updated_user:\n        raise HTTPException(\n            status_code=HTTPStatus.NOT_FOUND,\n            detail={\"error\": f\"User '{current_name}' was not found.\"},\n        )\n    return updated_user\n```\n\n----------------------------------------\n\nTITLE: Computed Properties Example\nDESCRIPTION: Shows how to define a computed property that dynamically generates an uppercase version of another property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;\n  uppercase_title := str_upper(.title);\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Update of Hero Names in EdgeQL\nDESCRIPTION: Shows how to update all hero names by trimming whitespace and converting to title case.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Hero\nset { name := str_trim(str_title(.name)) };\n```\n\n----------------------------------------\n\nTITLE: Limiting String Length with Max_len_value Constraint in EdgeDB SDL\nDESCRIPTION: Illustrates the use of 'max_len_value' constraint to specify the maximum allowed length for a string-based scalar type 'Username'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Username extending str {\n    constraint max_len_value(30);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Usage - AsyncIO API\nDESCRIPTION: Example of using Gel's AsyncIO API to insert and query user data asynchronously\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport datetime\nimport gel\n\nclient = gel.create_async_client()\n\nasync def main():\n    await client.query(\"\"\"\n        INSERT User {\n            name := <str>$name,\n            dob := <cal::local_date>$dob\n        }\n    \"\"\", name=\"Bob\", dob=datetime.date(1984, 3, 1))\n\n    user_set = await client.query(\n        \"SELECT User {name, dob} FILTER .name = <str>$name\", name=\"Bob\")\n    # *user_set* now contains\n    # Set{Object{name := 'Bob', dob := datetime.date(1984, 3, 1)}}\n\n    await client.aclose()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Complete React UI Component for a Chatbot with SSE Implementation\nDESCRIPTION: This is the full implementation of a chatbot UI in React and TypeScript. It includes state management for questions and answers, SSE connection handling, form submission logic, and a responsive UI with loading indicators and error messages.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { SSE } from \"sse.js\";\nimport { errors } from \"./constants\";\n\nexport default function Home() {\n  const eventSourceRef = useRef<SSE>();\n\n  const [prompt, setPrompt] = useState(\"\");\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | undefined>(undefined);\n\n  const handleSubmit = (\n    e: KeyboardEvent | React.MouseEvent<HTMLButtonElement>\n  ) => {\n    e.preventDefault();\n\n    setIsLoading(true);\n    setQuestion(prompt);\n    setAnswer(\"\");\n    setPrompt(\"\");\n    generateAnswer(prompt);\n  };\n\n  const generateAnswer = async (query: string) => {\n    if (eventSourceRef.current) eventSourceRef.current.close();\n\n    const eventSource = new SSE(`api/generate-answer`, {\n      payload: JSON.stringify({ query }),\n    });\n    eventSourceRef.current = eventSource;\n\n    eventSource.onerror = handleError;\n    eventSource.onmessage = handleMessage;\n    eventSource.stream();\n  };\n\n  function handleError(err: any) {\n    setIsLoading(false);\n\n    const errMessage =\n      err.data === errors.flagged ? errors.flagged : errors.default;\n\n    setError(errMessage);\n  }\n\n  function handleMessage(e: MessageEvent<any>) {\n    try {\n      setIsLoading(false);\n      if (e.data === \"[DONE]\") return;\n\n      const chunkResponse = JSON.parse(e.data);\n      const chunk = chunkResponse.choices[0].delta?.content || \"\";\n      setAnswer((answer) => answer + chunk);\n    } catch (err) {\n      handleError(err);\n    }\n  }\n\n  return (\n    <main className=\"w-screen h-screen flex items-center justify-center bg-[#2e2e2e]\">\n      <form className=\"bg-[#2e2e2e] w-[540px] relative\">\n        <input\n          className={`py-5 pl-6 pr-[40px] rounded-md bg-[#1f1f1f] w-full\n            outline-[#1f1f1f] focus:outline outline-offset-2 text-[#b3b3b3]\n            mb-8 placeholder-[#4d4d4d]`}\n          placeholder=\"Ask a question...\"\n          value={prompt}\n          onChange={(e) => {\n            setPrompt(e.target.value);\n          }}\n        ></input>\n        <button\n          onClick={handleSubmit}\n          className=\"absolute top-[25px] right-4\"\n          disabled={!prompt}\n        >\n          <ReturnIcon\n            className={`${!prompt ? \"fill-[#4d4d4d]\" : \"fill-[#1b9873]\"}` }\n          />\n        </button>\n        <div className=\"h-96 px-6\">\n          {question && (\n            <p className=\"text-[#b3b3b3] pb-4 mb-8 border-b border-[#525252] \">\n              {question}\n            </p>\n          )}\n          {(isLoading && <LoadingDots />) ||\n            (error && <p className=\"text-[#b3b3b3]\">{error}</p>) ||\n            (answer && <p className=\"text-[#b3b3b3]\">{answer}</p>)}\n        </div>\n      </form>\n    </main>\n  );\n}\n\nfunction ReturnIcon({ className }: { className?: string }) {\n  return (\n    <svg\n      width=\"20\"\n      height=\"12\"\n      viewBox=\"0 0 20 12\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d={`M12 0C11.4477 0 11 0.447715 11 1C11 1.55228 11.4477 2 12\n            2H17C17.5523 2 18 2.44771 18 3V6C18 6.55229 17.5523 7 17\n            7H3.41436L4.70726 5.70711C5.09778 5.31658 5.09778 4.68342 4.70726\n            4.29289C4.31673 3.90237 3.68357 3.90237 3.29304 4.29289L0.306297\n            7.27964L0.292893 7.2928C0.18663 7.39906 0.109281 7.52329 0.0608469\n            7.65571C0.0214847 7.76305 0 7.87902 0 8C0 8.23166 0.078771 8.44492\n            0.210989 8.61445C0.23874 8.65004 0.268845 8.68369 0.30107\n            8.71519L3.29289 11.707C3.68342 12.0975 4.31658 12.0975 4.70711\n            11.707C5.09763 11.3165 5.09763 10.6833 4.70711 10.2928L3.41431\n            9H17C18.6568 9 20 7.65685 20 6V3C20 1.34315 18.6568 0 17 0H12Z`}\n      />\n    </svg>\n  );\n}\n\nfunction LoadingDots() {\n  return (\n    <div className=\"grid gap-2\">\n      <div className=\"flex items-center space-x-2 animate-pulse\">\n        <div className=\"w-1 h-1 bg-[#b3b3b3] rounded-full\"></div>\n        <div className=\"w-1 h-1 bg-[#b3b3b3] rounded-full\"></div>\n        <div className=\"w-1 h-1 bg-[#b3b3b3] rounded-full\"></div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Decks and Cards with EdgeDB\nDESCRIPTION: Retrieves deck and card data using EdgeDB queries. Includes nested card selection with ordering and proper error handling for non-existent decks.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/fastapi.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/decks\", response_model=List[Deck])\nasync def get_decks():\n    decks = await client.query(\"\"\"\n        select Deck {\n            id,\n            name,\n            description,\n            cards := (\n                select .cards {\n                    id,\n                    front,\n                    back\n                }\n                order by .order\n            )\n        }\n    \"\"\")\n    return decks\n\n@app.get(\"/decks/{deck_id}\", response_model=Deck)\nasync def get_deck(deck_id: UUID):\n    deck = await client.query_single(\"\"\"\n        select Deck {\n            id,\n            name,\n            description,\n            cards := (\n                select .cards {\n                    id,\n                    front,\n                    back\n                }\n                order by .order\n            )\n        }\n        filter .id = <uuid>$id\n    \"\"\", id=deck_id)\n\n    if not deck:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Deck with id {deck_id} not found\"\n        )\n\n    return deck\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Creating an Actor\nDESCRIPTION: This GraphQL mutation shows how to create a new actor in the database, specifying the name, age, and height, and requesting the same fields in the response.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ActorMutation {\n  __typename\n  createActor(\n      name: \"Robert Downey Jr.\",\n      age: 57,\n      height: 173\n  ) {\n      age\n      height\n      name\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Gel Project Configuration\nDESCRIPTION: TOML configuration file for Gel project settings, specifying server version and post-migration hooks.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/fastapi.rst#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[instance]\nserver-version = 6.1\n\n[hooks]\nschema.update.after = \"uvx gel-py\"\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Definition in Gel SDL\nDESCRIPTION: Schema Definition Language (SDL) code that defines the data model in Gel. It creates Card and Deck types with their properties, establishes a one-to-many relationship between decks and cards, sets constraints, and defines a deletion policy.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/modeling/nextjs.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type Card {\n    required order: int64;\n    required front: str;\n    required back: str;\n  };\n\n  type Deck {\n    required name: str;\n    description: str;\n    multi cards: Card {\n      constraint exclusive;\n      on target delete allow;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Performing Upsert Operation in EdgeQL\nDESCRIPTION: This snippet shows how to perform an upsert operation using the 'unless conflict' clause. It tries to insert a new User, but updates an existing User if there's a conflict on the name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/insert.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    # Try to create a new User,\n    insert User {\n        name := \"Alice\",\n        image := \"my_face.jpg\",\n    }\n\n    # but if a User with this name already exists,\n    unless conflict on .name\n    else (\n        # update that User's record instead.\n        update User\n        set {\n            image := \"my_face.jpg\"\n        }\n    )\n) {\n    name,\n    image\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting an Object with EdgeDB Query Builder in TypeScript\nDESCRIPTION: Demonstrates how to insert a new Movie object into the database using the EdgeDB query builder. The query returns the id of the newly inserted object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.insert(e.Movie, {\n  title: 'Doctor Strange 2',\n  release_year: 2022\n});\n\nconst result = await query.run(client);\n// { id: string }\n// by default INSERT only returns the id of the new object\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Query Statements\nDESCRIPTION: Core query statements for data retrieval and computation including SELECT, FOR, and GROUP statements that allow retrieving data from database and performing computations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\nfor\ngroup\n```\n\n----------------------------------------\n\nTITLE: Processing User Registration in FastAPI with Gel Database\nDESCRIPTION: This code snippet handles user registration by exchanging tokens, creating a new user in the Gel database, and handling errors like duplicate users. It returns a response with an auth token cookie upon successful registration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nif token_response.status_code != 200:\n    return JSONResponse(status_code=400, content={\"message\": \"Token exchange failed\"})\n\nauth_token = token_response.json().get(\"auth_token\")\nidentity_id = token_response.json().get(\"identity_id\")\ntry:\n    created_user = await create_user_qry.create_user(client, name=name, identity_id=identity_id)\nexcept gel.errors.ConstraintViolationError:\n    raise HTTPException(\n        status_code=400,\n        detail={\"error\": f\"User with email '{email}' already exists.\"},\n    )\n\nresponse = JSONResponse(content={\"message\": \"User registered\"})\nresponse.set_cookie(key=\"gel-auth-token\", value=auth_token, httponly=True, secure=True, samesite='strict')\nreturn response\n```\n\n----------------------------------------\n\nTITLE: Bulk Character Updates with For Loop in TypeScript\nDESCRIPTION: This code shows how to perform bulk updates on multiple character records using EdgeDB's TypeScript query builder. It uses a for loop to iterate through an array of character data, filtering each character by name and updating their last_appeared field.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.params(\\n  {\\n    characters: e.array(\\n      e.tuple({\\n        name: e.str,\\n        last_appeared: e.int64,\\n      }),\\n    ),\\n  },\\n  (params) =>\\n    e.for(e.array_unpack(params.characters), (character) =>\\n      e.update(e.Character, () => ({\\n        filter_single: { name: character.name },\\n        set: {\\n          last_appeared: character.last_appeared,\\n        },\\n      })),\\n    ),\\n);\\n\\nawait query.run(client, {\\n  characters: [\\n    { name: \\\"Iron Man\\\", last_appeared: 2019 },\\n    { name: \\\"Captain America\\\", last_appeared: 2019 },\\n    { name: \\\"The Hulk\\\", last_appeared: 2021 },\\n  ],\\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Movie with Linked Characters Using Subquery in EdgeQL\nDESCRIPTION: This EdgeQL example shows how to insert a Movie object and link it to existing Person objects using a subquery.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Movie {\n  title := \"Spider-Man: No Way Home\",\n  release_year := 2021,\n  characters := (\n    select Person\n    filter .name in {\n      'Spider-Man',\n      'Doctor Strange',\n      'Doc Ock',\n      'Green Goblin'\n    }\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling AI Extension in EdgeDB Schema\nDESCRIPTION: Adding the AI extension to the schema to enable vector search and RAG capabilities.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/fastapi.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension ai;\n\nmodule default {\n    // ... rest of schema ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Object Types in SDL\nDESCRIPTION: This SDL code defines an abstract type 'Addressable' and a concrete type 'User' that extends Addressable. It demonstrates how to define properties, links, and an index in EdgeDB's schema definition language.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/objects.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Addressable {\n    address: str;\n}\n\ntype User extending Addressable {\n    # define some properties and a link\n    required name: str;\n\n    multi friends: User;\n\n    # define an index for User based on name\n    index on (.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Similar Cards Endpoint in Python\nDESCRIPTION: FastAPI endpoint implementation for fetching similar flashcards using vector similarity search.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/fastapi.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport gel\nimport gel.ai\n\nfrom fastapi import FastAPI\n\n\nclient = gel.create_async_client()\n\napp = FastAPI()\n\n\n@app.get(\"/fetch_similar\")\nasync def fetch_similar_cards(query: str):\n    rag = await gel.ai.create_async_rag_client(client, model=\"gpt-4-turbo-preview\")\n    embedding_vector = await rag.generate_embeddings(\n        query, model=\"text-embedding-3-small\"\n    )\n\n    similar_cards = await client.query(\n        \"select ext::ai::search(Card, <array<float32>>$embedding_vector)\",\n        embedding_vector=embedding_vector,\n    )\n\n    return similar_cards\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Routes in NodeJS Server\nDESCRIPTION: HTTP server implementation with routes for handling user sign-up, sign-in, email verification, and password reset functionality. Routes include request handlers for different authentication endpoints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/email_password.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = http.createServer(async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n\n  switch (requestUrl.pathname) {\n    case \"/auth/signup\": {\n      await handleSignUp(req, res);\n      break;\n    }\n\n    case \"/auth/signin\": {\n      await handleSignIn(req, res);\n      break;\n    }\n\n    case \"/auth/verify\": {\n      await handleVerify(req, res);\n      break;\n    }\n\n    case \"/auth/send-password-reset-email\": {\n      await handleSendPasswordResetEmail(req, res);\n      break;\n    }\n\n    case \"/auth/ui/reset-password\": {\n      await handleUiResetPassword(req, res);\n      break;\n    }\n\n    case \"/auth/reset-password\": {\n      await handleResetPassword(req, res);\n      break;\n    }\n\n    default: {\n      res.writeHead(404);\n      res.end(\"Not found\");\n      break;\n    }\n  }\n});\n\n/**\n * Handles sign up with email and password.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleSignUp = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const pkce = generatePKCE();\n    const { email, password, provider } = JSON.parse(body);\n    if (!email || !password || !provider) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'email', 'password', and 'provider' keys, but got: ${body}`,\n      );\n      return;\n    }\n\n    const registerUrl = new URL(\"register\", GEL_AUTH_BASE_URL);\n    const registerResponse = await fetch(registerUrl.href, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        challenge: pkce.challenge,\n        email,\n        password,\n        provider,\n        verify_url: `http://localhost:${SERVER_PORT}/auth/verify`,\n      }),\n    });\n\n    if (!registerResponse.ok) {\n      const text = await registerResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    const registerJson = await registerResponse.json();\n\n    if (\"code\" in registerJson) {\n      // No verification required, we can immediately get an auth token\n      const tokenUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n      tokenUrl.searchParams.set(\"code\", registerJson.code);\n      tokenUrl.searchParams.set(\"verifier\", pkce.verifier);\n      const tokenResponse = await fetch(tokenUrl.href, {\n        method: \"get\",\n      });\n\n      if (!tokenResponse.ok) {\n        const text = await tokenResponse.text();\n        res.status = 400;\n        res.end(`Error from the auth server: ${text}`);\n        return;\n      }\n\n      const { auth_token } = await tokenResponse.json();\n      res.writeHead(204, {\n        \"Set-Cookie\": `gel-auth-token=${auth_token}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n      });\n\n      res.end();\n    } else {\n      // Verification required, we need to render a notice to the user\n      // to check their email for a verification link\n      res.writeHead(200, { \"Content-Type\": \"text/html\" });\n      res.end(`\n        <html>\n          <body>\n            <p>Please check your email for a verification link.</p>\n          </body>\n        </html>\n      `);\n    }\n  });\n};\n\n/**\n * Handles sign in with email and password.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleSignIn = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const pkce = generatePKCE();\n    const { email, password, provider } = JSON.parse(body);\n    if (!email || !password || !provider) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'email', 'password', and 'provider' keys, but got: ${body}`,\n      );\n      return;\n    }\n\n    const authenticateUrl = new URL(\"authenticate\", GEL_AUTH_BASE_URL);\n    const authenticateResponse = await fetch(authenticateUrl.href, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        challenge: pkce.challenge,\n        email,\n        password,\n        provider,\n      }),\n    });\n\n    if (!authenticateResponse.ok) {\n      const text = await authenticateResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    const authenticateJson = await authenticateResponse.json();\n\n    if (\"code\" in authenticateJson) {\n      // User is verified, we can get an auth token\n      const tokenUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n      tokenUrl.searchParams.set(\"code\", authenticateJson.code);\n      tokenUrl.searchParams.set(\"verifier\", pkce.verifier);\n      const tokenResponse = await fetch(tokenUrl.href, {\n        method: \"get\",\n      });\n\n      if (!tokenResponse.ok) {\n        const text = await tokenResponse.text();\n        res.status = 400;\n        res.end(`Error from the auth server: ${text}`);\n        return;\n      }\n```\n\n----------------------------------------\n\nTITLE: Using ext::ai::search Function\nDESCRIPTION: Demonstrates how to use the ext::ai::search function to find semantically similar objects using embeddings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> with query := <array<float32>><json>$query\n... select ext::ai::search(Knowledge, query);\n\n{\n  (\n    object := default::Knowledge {id: 9af0d0e8-0880-11ef-9b6b-4335855251c4},\n    distance := 0.20410746335983276\n  ),\n  (\n    object := default::Knowledge {id: eeacf638-07f6-11ef-b9e9-57078acfce39},\n    distance := 0.7843298847773637\n  ),\n  (\n    object := default::Knowledge {id: f70863c6-07f6-11ef-b9e9-3708318e69ee},\n    distance := 0.8560434728860855\n  ),\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Type Using DDL\nDESCRIPTION: Shows how to create an object type using DDL commands.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate type User {\n    create property name: str;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Object Type with Property in SDL\nDESCRIPTION: Demonstrates how to define a simple Person object type with an email property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  email: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PUT and DELETE Endpoints for Events in FastAPI\nDESCRIPTION: FastAPI endpoints for updating (PUT) and deleting (DELETE) events, with error handling for various scenarios like invalid datetime formats and constraint violations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@router.put(\"/events\")\nasync def put_event(\n    event: RequestData, current_name: str\n) -> update_event_qry.UpdateEventResult:\n    try:\n        updated_event = await update_event_qry.update_event(\n            client,\n            current_name=current_name,\n            name=event.name,\n            address=event.address,\n            schedule=event.schedule,\n            host_name=event.host_name,\n        )\n\n    except gel.errors.InvalidValueError:\n        raise HTTPException(\n            status_code=HTTPStatus.BAD_REQUEST,\n            detail={\n                \"error\": \"Invalid datetime format. \"\n                \"Datetime string must look like this: '2010-12-27T23:59:59-07:00'\",\n            },\n        )\n\n    except gel.errors.ConstraintViolationError:\n        raise HTTPException(\n            status_code=HTTPStatus.BAD_REQUEST,\n            detail={\"error\": f\"Event name '{event.name}' already exists.\"},\n        )\n\n    if not updated_event:\n        raise HTTPException(\n            status_code=HTTPStatus.INTERNAL_SERVER_ERROR,\n            detail={\"error\": f\"Update event '{event.name}' failed.\"},\n        )\n\n    return updated_event\n\n\n@router.delete(\"/events\")\nasync def delete_event(name: str) -> delete_event_qry.DeleteEventResult:\n    deleted_event = await delete_event_qry.delete_event(client, name=name)\n\n    if not deleted_event:\n        raise HTTPException(\n            status_code=HTTPStatus.INTERNAL_SERVER_ERROR,\n            detail={\"error\": f\"Delete event '{name}' failed.\"},\n        )\n\n    return deleted_event\n```\n\n----------------------------------------\n\nTITLE: Composing Update with Subqueries in EdgeDB TypeScript\nDESCRIPTION: Shows how to use subqueries to select a movie and actors, then update the movie by adding the selected actors to its cast.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// select Doctor Strange\nconst drStrange = e.select(e.Movie, (movie) => ({\n  filter_single: { title: \"Doctor Strange\" }\n}));\n\n// select actors\nconst actors = e.select(e.Person, (person) => ({\n  filter: e.op(\n    person.name,\n    \"in\",\n    e.set(\"Benedict Cumberbatch\", \"Rachel McAdams\")\n  )\n}));\n\n// add actors to cast of drStrange\nconst query = e.update(drStrange, () => ({\n  actors: { \"+=\": actors }\n}));\n\nconst result = await query.run(client);\n```\n\n----------------------------------------\n\nTITLE: Querying Objects with EdgeQL\nDESCRIPTION: Shows how to use EdgeQL to query a Movie object and fetch related Person objects. The query retrieves a movie with title 'The Matrix' along with its actors, demonstrating EdgeQL's ability to fetch nested objects without JOINs.\nSOURCE: https://github.com/geldata/gel/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: esdl\nCODE:\n```\nselect Movie {\n  title,\n  actors: {\n    name\n  }\n}\nfilter .title = \"The Matrix\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js API Route for Posts\nDESCRIPTION: API route implementation for fetching blog posts from Gel database\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/post.ts\n\nimport type {NextApiRequest, NextApiResponse} from 'next';\nimport {createClient} from 'gel';\n\nexport const client = createClient();\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const posts = await client.query(`select BlogPost {\n    id,\n    title,\n    content\n  };`);\n  res.status(200).json(posts);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Handler for Answer Generation in Next.js API Route\nDESCRIPTION: This TypeScript snippet implements the main POST handler function for the answer generation API route, including error handling and response streaming.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST(req: Request) {\n  try {\n    const { query } = await req.json();\n    const sanitizedQuery = query.trim();\n\n    const flagged = await isQueryFlagged(query);\n\n    if (flagged) throw new Error(errors.flagged);\n\n    const embedding = await getEmbedding(query);\n\n    const context = await getContext(embedding);\n\n    const prompt = createFullPrompt(sanitizedQuery, context);\n\n    const answer = await getOpenAiAnswer(prompt);\n\n    return new Response(answer.body, {\n      headers: {\n        \"Content-Type\": \"text/event-stream\",\n      },\n    });\n  } catch (error: any) {\n    console.error(error);\n\n    const uiError = error.message || errors.default;\n\n    return new Response(uiError, {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Properties in Gel SDL\nDESCRIPTION: This example showcases how to add various constraints to properties. It demonstrates the use of built-in constraints like 'exclusive', 'min_len_value', 'max_len_value', 'regexp', 'one_of', 'min_value', and 'max_value'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype BlogPost {\n  title: str {\n    constraint exclusive; # all post titles must be unique\n    constraint min_len_value(8);\n    constraint max_len_value(30);\n    constraint regexp(r'^[A-Za-z0-9 ]+$');\n  }\n\n  status: str {\n    constraint one_of('Draft', 'InReview', 'Published');\n  }\n\n  upvotes: int64 {\n    constraint min_value(0);\n    constraint max_value(9999);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Links in EdgeDB SDL\nDESCRIPTION: Shows how to create polymorphic links using abstract types. The Movie type has a characters link that can target any non-abstract subtype of the abstract Person type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_15\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Person {\n  name: str;\n}\n\ntype Hero extending Person {\n  # additional fields\n}\n\ntype Villain extending Person {\n  # additional fields\n}\n\ntype Movie {\n  title: str;\n  multi characters: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Endpoint for Events in FastAPI\nDESCRIPTION: FastAPI endpoint handler for GET /events which can return all events or a specific event by name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n@router.get(\"/events\")\nasync def get_events(\n    name: str = Query(None, max_length=50)\n) -> List[get_events_qry.GetEventsResult] | get_event_by_name_qry.GetEventByNameResult:\n    if not name:\n        events = await get_events_qry.get_events(client)\n        return events\n    else:\n        event = await get_event_by_name_qry.get_event_by_name(client, name=name)\n        if not event:\n            raise HTTPException(\n                status_code=HTTPStatus.NOT_FOUND,\n                detail={\"error\": f\"Event '{name}' does not exist.\"},\n            )\n        return event\n```\n\n----------------------------------------\n\nTITLE: Requesting RAG (Retrieval-Augmented Generation) via Gel HTTP API\nDESCRIPTION: Example of using cURL to perform retrieval-augmented generation with the Gel server. The request specifies a query about Mars' sky color, uses the GPT-4 Turbo model, and sets the context to query from a 'Knowledge' collection. Authentication is required as with all Gel API endpoints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --user <username>:<password> --json '{\\\n    \"query\": \"What color is the sky on Mars?\",\\\n    \"model\": \"gpt-4-turbo-preview\",\\\n    \"context\": {\"query\":\"Knowledge\"}\\\n  }' http://<gel-host>:<port>/branch/main/ai/rag\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB Query Builder Packages\nDESCRIPTION: Commands for installing the required EdgeDB query builder packages using various package managers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-prod gel          # database client\n$ npm install --save-dev @gel/generate # generators\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add gel                 # database client\n$ yarn add --dev @gel/generate # generators\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add --save-prod gel          # database client\n$ pnpm add --save-dev @gel/generate # generators\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add gel                 # database client\n$ bun add --dev @gel/generate # generators\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ deno add npm:gel                 # database client\n$ deno add --dev npm:@gel/generate # generators\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Branch in EdgeQL\nDESCRIPTION: Creates a new Gel branch with both schema and data copied from an existing branch. This provides a complete clone of another branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/branches.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate data branch feature from main;\n```\n\n----------------------------------------\n\nTITLE: Selecting Objects in EdgeQL\nDESCRIPTION: Demonstrates how to select objects from the database, showing the default behavior of returning only object IDs.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Villain;\n{\n  default::Villain {id: 6c22bdf0...},\n  default::Villain {id: 6c22c3d6...},\n  default::Villain {id: 6c22c46c...},\n  default::Villain {id: 6c22c502...},\n  default::Villain {id: 6c42c4ec...},\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bulk Data Import with Gel in TypeScript\nDESCRIPTION: Demonstrates how to import deck and card data using Gel database operations. Includes creating cards and linking them to a deck using UUID casting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\n\nimport { client } from \"@/lib/gel\";\nimport e from \"@/dbschema/edgeql-js\";\nimport { revalidatePath } from \"next/cache\";\nimport { RawJSONDeck } from \"@/lib/models\";\n\nexport async function importDeck(formData: FormData) {\n  const file = formData.get(\"file\") as File;\n  const rawDeck = JSON.parse(await file.text()) as RawJSONDeck;\n  const deck = {\n    ...rawDeck,\n    cards: rawDeck.cards.map((card, index) => ({\n      ...card,\n      order: index,\n    })),\n  };\n  const cardIds: string[] = [];\n  for (const card of deck.cards) {\n    const createdCard = await e\n      .insert(e.Card, {\n        front: card.front,\n        back: card.back,\n        order: card.order,\n      })\n      .run(client);\n\n    cardIds.push(createdCard.id);\n  }\n\n  const cardIdsLiteral = e.literal(e.array(e.uuid), cardIds);\n\n  await e.insert(e.Deck, {\n    name: deck.name,\n    description: deck.description,\n    cards: e.select(e.Card, (c) => ({\n      filter: e.contains(cardIdsLiteral, c.id),\n    })),\n  }).run(client);\n\n  revalidatePath(\"/\");\n}\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Bulk Insert Example\nDESCRIPTION: Demonstrates using for loops for bulk insertion of hero records into the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/for.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nfor hero_name in {'Cersi', 'Ikaris', 'Thena'}\nunion (\n  insert Hero { name := hero_name }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Context Middleware for Express\nDESCRIPTION: Middleware function that sets up the tRPC context in Express by adding the authenticated session and Gel client to the request object, making them available to tRPC procedures.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type AuthRequest, type Response, type NextFunction } from \"express\";\n\n// Middleware to set up tRPC context in Express\nexport const createTRPCContextMiddleware = async (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  const session = req.auth?.session(); // Get authenticated session\n  req.context = {\n    session, // Add session to context\n    gelClient, // Add Gel client to context\n  };\n  next();\n};\n```\n\n----------------------------------------\n\nTITLE: Using RAG Endpoint for AI Query Processing\nDESCRIPTION: Example of using the built-in Retrieval-Augmented Generation (RAG) endpoint to process a natural language query against the Friend data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --user user:password --json '{\n    \"query\": \"Who helps Komi make friends?\",\n    \"model\": \"gpt-4-turbo-preview\",\n    \"context\": {\"query\":\"select Friend\"}\n  }' http://localhost:<port>/branch/main/ai/rag\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Queries with Parameters in TypeScript\nDESCRIPTION: Demonstrates how to execute a Gel query with parameters. Parameters can be passed as the second argument to query methods.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await client.querySingle<{ id: string }>(\n  `insert Movie { title := <str>$title }`,\n  { title: \"Iron Man\" }\n);\nconsole.log(result);\n// {id: \"047c5893...\"}\n```\n\n----------------------------------------\n\nTITLE: Managing Transactions with Gel Client in TypeScript\nDESCRIPTION: Demonstrates how to use the transaction API for atomic execution of multiple statements. Transactions are automatically retried on retryable errors and rolled back on non-retryable errors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.transaction(async (tx) => {\n  await tx.execute(\"insert Movie { title := <str>$title }\", { title: \"Iron Man\" });\n  await tx.execute(\"insert Person { name := <str>$name }\", { name: \"Anson Mount\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Types in Gel SDL with Object-Oriented Links\nDESCRIPTION: Schema Definition Language (SDL) example showing how Gel represents relationships between types as direct links rather than foreign keys, enabling more intuitive schema modeling.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/comparison.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;\n  required director: Person;\n}\n\ntype Person {\n  required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Queries with JSON Results in JavaScript\nDESCRIPTION: Demonstrates how to execute Gel queries and retrieve results as serialized JSON strings. This can be more performant than manual JSON serialization.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.queryJSON(`select {1, 2, 3};`);\n// \"[1, 2, 3]\"\n\nawait client.querySingleJSON(`select <int64>{};`);\n// \"null\"\n\nawait client.queryRequiredSingleJSON(`select 3.14;`);\n// \"3.14\"\n\nawait client.queryRequiredJSON(`select 3.14;`);\n// \"3.14\"\n```\n\n----------------------------------------\n\nTITLE: LLM Integration - Python\nDESCRIPTION: Implementation of LLM completion functionality using OpenAI's API\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom dotenv import load_dotenv\n\n_ = load_dotenv()\n\n\ndef get_llm_completion(system_prompt: str, messages: list[dict[str, str]]) -> str:\n    api_key = os.getenv(\"OPENAI_API_KEY\")\n    url = \"https://api.openai.com/v1/chat/completions\"\n    headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {api_key}\"}\n\n    response = requests.post(\n        url,\n        headers=headers,\n        json={\n            \"model\": \"gpt-4o-mini\",\n            \"messages\": [\n                {\"role\": \"developer\", \"content\": system_prompt},\n                *messages,\n            ],\n        },\n    )\n    response.raise_for_status()\n    result = response.json()\n    return result[\"choices\"][0][\"message\"][\"content\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Python Package\nDESCRIPTION: Commands to install the Gel Python package using different package managers (pip and uv)\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install gel\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ uv add gel\n```\n\n----------------------------------------\n\nTITLE: Initializing GelVectorstore Class in Python\nDESCRIPTION: Defines the GelVectorstore class, a framework-agnostic interface for interacting with Gel's vectorstore. It provides methods for storing, retrieving, and searching vector embeddings, supporting different embedding models.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GelVectorstore:\n    def __init__(self, embedding_model: BaseEmbeddingModel, collection_name: str, record_type: str, client_config: dict | None):\n        # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Using Splats in EdgeQL Queries\nDESCRIPTION: Explains how to use splats (* and **) to select all properties of a type or all properties including linked types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Movie {*};\n{\n  default::Movie {\n    id: 6c60c28a-5c03-11ee-99ff-dfa425012a05,\n    release_year: 2021,\n    title: 'Spider-Man: No Way Home',\n  },\n  default::Movie {\n    id: 6d1f430e-5c03-11ee-99ff-e731e8da06d9,\n    release_year: 2008,\n    title: 'Iron Man'\n  },\n}\n\ndb> select Movie {**};\n{\n  default::Movie {\n    id: 6c60c28a-5c03-11ee-99ff-dfa425012a05,\n    release_year: 2021,\n    title: 'Spider-Man: No Way Home',\n    characters: {\n      default::Hero {\n        id: 6be1c9c6-5c03-11ee-99ff-63b1127d75f2,\n        name: 'Spider-Man'\n      },\n      default::Villain {\n        id: 6c22bdf0-5c03-11ee-99ff-dfaea4d947ce,\n        name: 'Sandman'\n      },\n      default::Villain {\n        id: 6c22c3d6-5c03-11ee-99ff-734255881e5d,\n        name: 'Electro'\n      },\n      default::Villain {\n        id: 6c22c46c-5c03-11ee-99ff-c79f24cf638b,,\n        name: 'Green Goblin'\n      },\n      default::Villain {\n        id: 6c22c502-5c03-11ee-99ff-cbacc3918129,\n        name: 'Doc Ock'\n      },\n    },\n  },\n  default::Movie {\n    id: 6d1f430e-5c03-11ee-99ff-e731e8da06d9,\n    release_year: 2008,\n    title: 'Iron Man',\n    characters: {\n      default::Hero {\n        id: 6bf7115a-5c03-11ee-99ff-c79c07f0e2db,\n        name: 'Iron Man'\n      },\n      default::Villain {\n        id: 6c42c4ec-5c03-11ee-99ff-872c9906a467,\n        name: 'Obadiah Stane'\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Queries with Different Cardinalities in TypeScript\nDESCRIPTION: Shows how to use different query methods based on the expected cardinality of the result. Includes examples for query, querySingle, queryRequiredSingle, and queryRequired.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.query<number>(\"select 2 + 2;\"); // number[]: [4]\nawait client.query<number>(\"select <int64>{};\"); // number[]: []\nawait client.query<number>(\"select {1, 2, 3};\"); // number[]: [1, 2, 3]\n\nawait client.querySingle<number>(\"select 2 + 2;\"); // number | null: 4\nawait client.querySingle<number[]>(\"select [1, 2, 3];\"); // number[] | null: [1, 2, 3]\nawait client.querySingle<number>(\"select <int64>{};\"); // number | null: null\n\nawait client.queryRequiredSingle<number>(\"select 2 + 2;\"); // number: 4\n\nawait client.queryRequired<number>(\"select 2 + 2;\"); // [number, ...number[]]: 4\nawait client.queryRequired<number>(\"select {1, 2, 3};\"); // [number, ...number[]]: [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Client and Running Basic Query in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a client connection to a Gel database and run a simple static query. No explicit connection details are needed as Gel handles this through projects and environment variables.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/connecting/nextjs.rst#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nconst client = createClient();\n\nasync function main() {\n  console.log(await client.query(\"select 'Hello from Gel!';\"));\n}\n\nmain().then(\n  () => process.exit(0),\n  (err) => {\n    console.error(err);\n    process.exit(1);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Cards with EdgeDB\nDESCRIPTION: Creates a new card and links it to a deck using EdgeDB. Includes order calculation based on existing cards and updates the deck's card collection.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait e\n  .params(\n    {\n      front: e.str,\n      back: e.str,\n      deckId: e.uuid,\n    },\n    (params) => {\n      const deck = e.assert_exists(\n        e.select(e.Deck, (d) => ({\n          filter_single: e.op(d.id, \"=\", params.deckId),\n        }))\n      );\n\n      const order = e.cast(e.int64, e.max(deck.cards.order));\n      const card = e.insert(e.Card, {\n        front: params.front,\n        back: params.back,\n        order: e.op(order, \"+\", 1),\n      });\n      return e.update(deck, (d) => ({\n        set: {\n          cards: {\n            \"+=\": card\n          },\n        },\n      }))\n    }\n  )\n  .run(client, {\n    front,\n    back,\n    deckId,\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Movie Mutation with Strawberry and EdgeDB in Python\nDESCRIPTION: This snippet defines a GraphQL mutation for creating a movie using Strawberry and EdgeDB. It allows adding a movie with a name, optional year, and optional actor names. The mutation inserts the movie into the database and links it with existing actors if specified.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Mutation:\n    ...\n\n    @strawberry.mutation\n    async def create_movie(\n        self,\n        name: str,\n        year: int | None = None,\n        actor_names: list[str] | None = None,\n    ) -> Movie:\n        movie_json = await client.query_single_json(\n            \"\"\"\n            with\n                name := <str>$name,\n                year := <optional int16>$year,\n                actor_names := <optional array<str>>$actor_names,\n                new_movie := (\n                    insert Movie {\n                        name := name,\n                        year := year,\n                        actors := (\n                            select detached Actor\n                            filter .name in array_unpack(actor_names)\n                        )\n                    }\n                )\n            select new_movie {\n                name,\n                year,\n                actors: {name, age, height}\n            }\n            \"\"\",\n            name=name,\n            year=year,\n            actor_names=actor_names,\n        )\n\n        movie = json.loads(movie_json)\n        actors = [\n            Actor(name) for d in movie.get(\"actors\", [])\n            for name in d.values()]\n\n        return Movie(\n            movie.get(\"name\"),\n            movie.get(\"year\"),\n            actors\n        )\n```\n\n----------------------------------------\n\nTITLE: Querying All Decks with EdgeDB in TypeScript\nDESCRIPTION: This snippet shows the transition from reading deck data from a JSON file to querying it from an EdgeDB database. It selects all decks with their cards, including specific fields like id, name, description, and card details.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst decks = await e.select(e.Deck, (deck) => ({\n  id: true,\n  name: true,\n  description: true,\n  cards: e.select(deck.cards, (card) => ({\n    id: true,\n    front: true,\n    back: true,\n    order_by: card.order,\n  })),\n})).run(client);\n\nreturn decks;\n```\n\n----------------------------------------\n\nTITLE: Using fts::search Function for Full-text Search in EdgeDB\nDESCRIPTION: This function performs full-text search on a target object. It returns a tuple containing the matched object and its relevance score if a match is found, or an empty set otherwise. The function supports customizing language and weight parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/fts.rst#2025-04-16_snippet_5\n\nLANGUAGE: eql\nCODE:\n```\nfts::search( \\\n                    object: anyobject, \\\n                    query: str, \\\n                    named only language: str = <str>fts::Language.eng, \\\n                    named only weights: optional array<float64> = {}, \\\n                  ) -> optional tuple<object: anyobject, score: float32>\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeDB Schema for User and Chat Entities\nDESCRIPTION: This snippet defines the schema for User and Chat entities in EdgeDB, including their relationships and constraints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\nconstraint exclusive;\n}\nmulti chats: Chat;\n}\n```\n\n----------------------------------------\n\nTITLE: Update Operations in EdgeQL\nDESCRIPTION: Shows how to perform update operations with filters and modify links between objects\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter .title = \"Doctor Strange 2\"\nset {\n  title := \"Doctor Strange in the Multiverse of Madness\"\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.update(e.Movie, (movie) => ({\n  filter: e.op(movie.title, '=', 'Doctor Strange 2'),\n  set: {\n    title: 'Doctor Strange in the Multiverse of Madness',\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Inserts in EdgeQL\nDESCRIPTION: This snippet demonstrates how to perform bulk inserts in EdgeQL using a JSON array as a query parameter. It unpacks the JSON array and uses a for loop to insert multiple hero objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  raw_data := <json>$data,\nfor item in json_array_unpack(raw_data) union (\n  insert Hero { name := <str>item['name'] }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gel project with TOML\nDESCRIPTION: This TOML configuration file (gel.toml) sets up the Gel project instance, specifying the server version and a hook to generate EdgeQL JS code after migrations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/nextjs.rst#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[instance]\nserver-version = 6.1\n\n[hooks]\nschema.update.after = \"npx @gel/generate edgeql-js\"\n```\n\n----------------------------------------\n\nTITLE: Using Gel Query Builder API for CRUD Operations in TypeScript\nDESCRIPTION: This enhanced code example shows how to use the TypeScript query builder API to perform more complex operations. It demonstrates inserting Deck objects, selecting them back with specific fields, and then deleting them.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/connecting/nextjs.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript-diff\nCODE:\n```\n  import { createClient } from \"gel\";\n+ import e from \"@/dbschema/edgeql-js\";\n\n  const client = createClient();\n\n  async function main() {\n    console.log(await client.query(\"select 'Hello from Gel!';\"));\n\n+   await e.insert(e.Deck, { name: \"I am one\" }).run(client);\n+\n+   await e.insert(e.Deck, { name: \"I am two\" }).run(client);\n+\n+   const decks = await e\n+     .select(e.Deck, () => ({\n+       id: true,\n+       name: true,\n+     }))\n+     .run(client);\n+\n+   console.table(decks);\n+\n+   await e.delete(e.Deck).run(client);\n  }\n\n  main().then(\n    () => process.exit(0),\n    (err) => {\n      console.error(err);\n      process.exit(1);\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Access Policies in Gel SDL\nDESCRIPTION: This snippet demonstrates how to define basic access policies for User and BlogPost types in Gel SDL. It shows the use of global variables and access policy declarations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\nglobal current_user_id: uuid;\nglobal current_user := (\n  select User filter .id = global current_user_id\n);\n\ntype User {\n  required email: str { constraint exclusive; }\n  required is_admin: bool { default := false };\n\n  access policy admin_only\n    allow all\n    using (global current_user.is_admin ?? false);\n}\n\ntype BlogPost {\n  required title: str;\n  author: User;\n\n  access policy author_has_full_access\n    allow all\n    using (global current_user ?= .author.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ext::ai::to_context Function\nDESCRIPTION: Example of how to define a schema with ext::ai::index and use the to_context function to retrieve indexed expression values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type Astronomy {\n    topic: str;\n    content: str;\n    deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n      on (.topic ++ ' ' ++ .content);\n  }\n};\n```\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert Astronomy {\n...   topic := 'Mars',\n...   content := 'Skies on Mars are red.'\n... }\ndb> insert Astronomy {\n...   topic := 'Earth',\n...   content := 'Skies on Earth are blue.'\n... }\n```\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::ai::to_context(Astronomy);\n\n{'Mars Skies on Mars are red.', 'Earth Skies on Earth are blue.'}\n```\n\n----------------------------------------\n\nTITLE: Installing gel and @gel/generate packages\nDESCRIPTION: Commands to install the gel package and @gel/generate as a dev dependency using various package managers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/queries.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install gel       # npm users\n$ yarn add gel          # yarn users\n$ bun add gel           # bun users\n$ deno add npm:gel      # deno users\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @gel/generate --save-dev      # npm users\n$ yarn add @gel/generate --dev              # yarn users\n$ bun add --dev @gel/generate               # bun users\n$ deno add --dev npm:@gel/generate          # deno users\n```\n\n----------------------------------------\n\nTITLE: Creating a Movie using GraphQL Mutation\nDESCRIPTION: This GraphQL mutation creates a movie named 'Avengers' with the year 2012 and links it to the actor 'Robert Downey Jr.'. It demonstrates how to use the create_movie mutation defined in the Python code.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nmutation MovieMutation {\n  __typename\n  createMovie(\n    name: \"Avengers\",\n    actorNames: [\"Robert Downey Jr.\"],\n    year: 2012\n  ) {\n      actors {\n        name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Prohibit Frenemies Trigger in EdgeDB SDL\nDESCRIPTION: Defines a trigger to prevent a Person from being both a friend and an enemy. It uses the 'assert' function to check for intersections between friends and enemies sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\nmulti friends: Person;\nmulti enemies: Person;\n\ntrigger prohibit_frenemies after insert, update for each do (\n  assert(\n    not exists (__new__.friends intersect __new__.enemies),\n    message := \"Invalid frenemies\",\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Movies with Strawberry GraphQL in Python\nDESCRIPTION: This snippet demonstrates how to create a GraphQL query resolver for fetching movies. It includes optional filtering by movie name and handles the deserialization of JSON responses from the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# strawberry-gql/app/schema.py\n...\n\n@strawberry.type\nclass Query:\n    ...\n\n    @strawberry.field\n    async def get_movies(\n        self, filter_name: str | None = None,\n    ) -> list[Movie]:\n\n        if filter_name:\n            movies_json = await client.query_json(\n                \"\"\"\n                select Movie {name, year, actors: {name, age, height}}\n                filter .name=<str>$filter_name\n            \"\"\",\n                filter_name=filter_name,\n            )\n        else:\n            movies_json = await client.query_json(\n                \"\"\"\n                select Movie {name, year, actors: {name, age, height}}\n            \"\"\"\n            )\n\n        # Deserialize.\n        movies = json.loads(movies_json)\n        for idx, movie in enumerate(movies):\n            actors = [\n                Actor(name) for d in movie.get(\"actors\", [])\n                for name in d.values()\n            ]\n\n            movies[idx] = Movie(\n                            movie.get(\"name\"),\n                            movie.get(\"year\"), actors\n                        )\n        return movies\n```\n\n----------------------------------------\n\nTITLE: Using EdgeDB Query Builder in TypeScript\nDESCRIPTION: Example of using the EdgeDB query builder to select movies with their actors, demonstrating type inference and autocompletion.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\nimport e from \"./dbschema/edgeql-js\";\n\nconst client = createClient();\n\nconst query = e.select(e.Movie, () => ({\n  id: true,\n  title: true,\n  actors: {\n    name: true,\n  },\n}));\n\nconst result = await query.run(client)\n/*\n  {\n    id: string;\n    title: string;\n    actors: { name: string; }[];\n  }[]\n*/\n```\n\n----------------------------------------\n\nTITLE: Searching Similar Items in Vectorstore in Python\nDESCRIPTION: Method to search for similar items in the vector store. It generates an embedding for the input item, finds records with similar embeddings, optionally filters results, and returns the most similar items up to the specified limit.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef search_by_item(self, item: Any, filters: Optional[CompositeFilter] = None, limit: Optional[int] = 4) -> list[SearchResult]:\n    # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Adding Prebuild Script for Query Builder Generation\nDESCRIPTION: This snippet shows how to add a prebuild script to package.json. This script generates the query builder before Vercel starts building the project, ensuring the latest schema is used.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// package.json\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\",\n  \"prebuild\": \"npx @gel/generate edgeql-js\"\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Types in Gel SDL\nDESCRIPTION: Example showing how to define basic data types (Movie and Person) in Gel's schema definition language, demonstrating required properties and links between types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\n# dbschema/default.gel\n\ntype Movie {\n  required title: str;\n  required director: Person;\n}\n\ntype Person {\n  required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Types in Geldata SDL\nDESCRIPTION: This SDL code defines two object types: Author with a name property, and Book with title, synopsis, author reference, and isbn properties. The title is required and isbn has a max length constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Author {\n    name: str;\n}\n\ntype Book {\n    # to make the examples simpler only the title is\n    # a required property\n    required title: str;\n    synopsis: str;\n    author: Author;\n    isbn: str {\n        constraint max_len_value(10);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gel AI Package with pip\nDESCRIPTION: Command to install the gel package with AI support using pip.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/python.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install 'gel[ai]'\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamped Abstract Type and Extending Object Types in EdgeDB SDL\nDESCRIPTION: This snippet demonstrates creating an abstract 'Timestamped' type with 'created_at' and 'updated_at' properties, and extending it to 'Deck' and 'Card' types. It uses the 'datetime_of_statement()' function as a default value for both properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/inheritance/fastapi.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  abstract type Timestamped {\n    required created_at: datetime {\n      default := datetime_of_statement();\n    };\n    required updated_at: datetime {\n      default := datetime_of_statement();\n    };\n  }\n\n  type Deck extending Timestamped {\n    required name: str;\n    description: str;\n\n    cards := (\n      select .<deck[is Card]\n      order by .order\n    );\n  };\n\n  type Card extending Timestamped {\n    required order: int64;\n    required front: str;\n    required back: str;\n\n    required deck: Deck;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Grouping with Tuples and Sets in TypeScript and EdgeQL\nDESCRIPTION: Demonstrates a complex grouping scenario using a combination of tuples and grouping sets in both TypeScript and EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\ne.group(e.Movie, (movie) => {\n  const release_year = movie.release_year;\n  const first_letter = movie.title[0];\n  const cast_size = e.count(movie.actors);\n  return {\n    title: true,\n    by: e.group.tuple(release_year, e.group.set({ first_letter, cast_size }))\n  };\n});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie { title }\nusing\n  first_letter := .title[0],\n  cast_size := count(.actors)\nby .release_year, {first_letter, cast_size}\n```\n\n----------------------------------------\n\nTITLE: Inserting Objects in EdgeQL and TypeScript\nDESCRIPTION: Demonstrates how to insert a new object into the database using EdgeQL's insert statement and the equivalent TypeScript code using the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Movie {\n  title := 'Doctor Strange 2',\n  release_year := 2022\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.insert(e.Movie, {\n  title: 'Doctor Strange 2',\n  release_year: 2022\n});\n\nconst result = await query.run(client);\n// {id: string}\n// by default INSERT only returns\n// the id of the new object\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Nested Queries in EdgeQL\nDESCRIPTION: Demonstrates a nested mutation in EdgeQL that inserts a new Movie object and links it to existing Person objects. It shows EdgeQL's composability by using a subquery to find specific actors to link to the movie.\nSOURCE: https://github.com/geldata/gel/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: esdl\nCODE:\n```\ninsert Movie {\n  title := \"The Matrix Resurrections\",\n  actors := (\n    select Person\n    filter .name in {\n      'Keanu Reeves',\n      'Carrie-Anne Moss',\n      'Laurence Fishburne'\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Filtering with Multiple Conditions in EdgeQL TypeScript\nDESCRIPTION: Demonstrates combining multiple filter conditions with logical operators.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, (movie) => {\n  const isAMatrixMovie = e.op(movie.title, \"ilike\", \"The Matrix%\");\n  const wasReleased1999 = e.op(movie.release_year, \"=\", 1999);\n  const isIronMan = e.op(movie.title, \"=\", \"Iron Man\");\n  return {\n    id: true,\n    title: true,\n    filter: e.op(\n      e.op(\n        isAMatrixMovie,\n        \"and\",\n        wasReleased1999\n      ),\n      \"or\",\n      isIronMan\n    )\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Gel via CLI\nDESCRIPTION: Shows the commands to install the Gel CLI, initialize a project, and start an interactive EdgeQL shell. This demonstrates Gel's developer-friendly setup process that can be completed in just three commands.\nSOURCE: https://github.com/geldata/gel/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --proto '=https' --tlsv1.2 -sSf https://geldata.com/sh | sh\n$ edgedb project init\n$ edgedb\nedgedb> select \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Query on Person Type in EdgeQL\nDESCRIPTION: Shows how to perform a polymorphic query on the abstract Person type, returning a mix of Hero and Villain objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person { name };\n```\n\n----------------------------------------\n\nTITLE: Enhancing AI Index with Multi-Property Text Concatenation\nDESCRIPTION: Improves the AI index by concatenating multiple text properties, allowing for more comprehensive vector search across all relevant fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl-diff\nCODE:\n```\n  module default {\n      type Friend {\n          required name: str {\n              constraint exclusive;\n          };\n\n          summary: str;               # A brief description of personality and role\n          relationship_to_komi: str;  # Relationship with Komi\n          defining_trait: str;        # Primary character trait or quirk\n\n          deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n-             on (.summary);\n+             on (\n+                 .name ++ ' ' ++ .summary ++ ' '\n+                 ++ .relationship_to_komi ++ ' '\n+                 ++ .defining_trait\n+             );\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Composing Insert and Select Queries in EdgeDB TypeScript\nDESCRIPTION: Demonstrates query composition by selecting properties of a newly inserted Movie object, including a count of related actors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst newMovie = e.insert(e.Movie, {\n  title: \"Iron Man\",\n  release_year: 2008\n});\n\nconst query = e.select(newMovie, () => ({\n  title: true,\n  release_year: true,\n  num_actors: e.count(newMovie.actors)\n}));\n\nconst result = await query.run(client);\n// { title: string; release_year: number; num_actors: number }\n```\n\n----------------------------------------\n\nTITLE: Using Operators and Functions in EdgeDB Queries with TypeScript\nDESCRIPTION: Demonstrates the usage of operators and functions in EdgeDB queries. It shows how to use the e.op function for various operators and how to call EdgeDB functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Operators\ne.op(\"not\", e.bool(true));      // not true\ne.op(\"exists\", e.set(\"hi\"));    // exists {\"hi\"}\n\ne.op(e.int64(2), \"+\", e.int64(2)); // 2 + 2\ne.op(e.str(\"Hello \"), \"++\", e.str(\"World!\")); // \"Hello \" ++ \"World!\"\n\ne.op(e.str(\"😄\"), \"if\", e.bool(true), \"else\", e.str(\"😢\"));\n// \"😄\" if true else \"😢\"\n\n// Functions\ne.datetime_of_statement();\ne.sum(e.set(e.int64(1), e.int64(2), e.int64(3)));\ne.assert_single(e.select(/* some query */));\n```\n\n----------------------------------------\n\nTITLE: Defining Retry Options for EdgeDB Operations\nDESCRIPTION: Class definition for RetryOptions that configures automatic retry behavior for EdgeQL commands with customizable attempts and backoff strategies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/advanced.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass RetryOptions(attempts, backoff=default_backoff):\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Schema\nDESCRIPTION: SDL schema definition for user authentication and post access control\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_12\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension auth;\n\nmodule default {\n  global current_user := (\n    assert_single((\n      select User\n      filter .identity = global ext::auth::ClientTokenIdentity\n    ))\n  );\n\n  type User {\n    required name: str;\n    required identity: ext::auth::Identity;\n  }\n\n  type Post {\n    required text: str;\n    required author: User;\n\n    access policy author_has_full_access\n      allow all\n      using (.author ?= global current_user);\n\n    access policy others_read_only\n      allow select;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Vector Distance in EdgeQL\nDESCRIPTION: Example of querying vectors within a specific distance threshold from a query vector using Euclidean distance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ngel> select Item {*}\n.... filter ext::pgvector::euclidean_distance(\n....   .embedding, <v3>[3, 1, 2]) < 5;\n{\n  default::Item {\n    id: f119d64e-0995-11ee-8804-ff8cd739d8b7,\n    embedding: [1.2, 3, 4.5],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Books by Author Name in GraphQL vs EdgeQL\nDESCRIPTION: Comparison of filtering Book objects by the author's name in both GraphQL and EdgeQL, showing how to navigate object relationships in filters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Book(\n        filter: {\n            author: {\n                name: {\n                    eq: \"Lewis Carroll\"\n                }\n            }\n        }\n    ) {\n        title\n        synopsis\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Book {\n        title,\n        synopsis\n    }\nfilter\n    Book.author.name = 'Lewis Carroll';\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Expressions for Filtering in Gel TypeScript\nDESCRIPTION: Demonstrates how to use a boolean expression with operators or standard library functions for filtering, with explicit type casting for UUID values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, (movie) => ({\n  id: true,\n  title: true,\n  release_year: true,\n  filter_single: e.op(\n    movie.id,\n    \"=\",\n    e.uuid(\"00000000-0000-0000-0000-000000000000\"),\n  ),\n}));\n\nconst result = await query.run(client);\n// { id: string; title: string; release_year: number | null } | null\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context for Question Answering in TypeScript\nDESCRIPTION: This function executes the previously defined query to retrieve related documentation sections. It processes the results to create a context string, ensuring the total token count doesn't exceed a specified limit.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getContext(embedding: number[]) {\n    const sections = await getSectionsQuery.run(client, {\n        target: embedding,\n        matchThreshold: 0.3,\n        matchCount: 8,\n        minContentLength: 20,\n    });\n\n    let tokenCount = 0;\n    let context = \"\";\n\n    for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const content = section.content;\n        tokenCount += section.tokens;\n\n        if (tokenCount >= 1500) {\n            tokenCount -= section.tokens;\n            break;\n        }\n\n        context += `${content.trim()}\\n---\\n`;\n    }\n\n    return context;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with pgvector Extension\nDESCRIPTION: EdgeDB schema definition for storing embeddings using pgvector extension.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_10\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension pgvector;\n\nmodule default {\n  scalar type OpenAIEmbedding extending\n    ext::pgvector::vector<1536>;\n\n  type Section {\n    required content: str;\n    required tokens: int16;\n    required embedding: OpenAIEmbedding;\n\n    index ext::pgvector::ivfflat_cosine(lists := 1)\n      on (.embedding);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert with JSON Parameters in EdgeDB TypeScript\nDESCRIPTION: Demonstrates how to perform bulk inserts by passing a JSON array of items as a parameter, then using e.for and json_array_unpack to iterate and insert each item.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.params(\n  { items: e.json },\n  (params) => e.for(\n    e.json_array_unpack(params.items),\n    (item) => e.insert(e.Movie, {\n      title: e.cast(e.str, item.title),\n      release_year: e.cast(e.int64, item.release_year),\n    })\n  )\n);\n\nconst result = await query.run(client, {\n  items: [\n    { title: \"Deadpool\", release_year: 2016 },\n    { title: \"Deadpool 2\", release_year: 2018 },\n    { title: \"Deadpool 3\", release_year: 2024 },\n    { title: \"Deadpool 4\", release_year: null },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Transaction Rollback in Python\nDESCRIPTION: Shows how to implement transaction rollback by raising an exception within the transaction block.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass RollBack(Exception):\n    \"A user defined exception.\"\n\ntry:\n    for tx in client.transaction():\n        with tx:\n            raise RollBack\nexcept RollBack:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Object-Level Constraints\nDESCRIPTION: Shows how to define constraints at the object level, including composite unique constraints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\ntype BlogPost {\n  title: str;\n  author: User;\n\n  constraint exclusive on ((.title, .author));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Shapes in EdgeQL\nDESCRIPTION: Demonstrates how to use nested shapes to fetch linked objects and their properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Villain {\n...   name,\n...   nemesis: { name }\n... };\n{\n  default::Villain {\n    name: 'Sandman',\n    nemesis: default::Hero {name: 'Spider-Man'},\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Schema in EdgeDB SDL\nDESCRIPTION: Initial schema definition for the flashcard application with Timestamped, Deck, and Card types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/fastapi.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    abstract type Timestamped {\n        required created_at: datetime {\n            default := datetime_of_statement();\n        };\n        required updated_at: datetime {\n            default := datetime_of_statement();\n        };\n    }\n\n    type Deck extending Timestamped {\n        required name: str;\n        description: str;\n\n        multi cards: Card {\n            constraint exclusive;\n            on target delete allow;\n        };\n    };\n\n    type Card extending Timestamped {\n        required order: int64;\n        required front: str;\n        required back: str;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Creation Modifying Function\nDESCRIPTION: Defines a modifying function that creates a new user with a name and timestamp.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\nfunction add_user(name: str) -> User\n  using (\n    insert User {\n      name := name,\n      joined_at := std::datetime_current(),\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Executing Required JSON Query in TypeScript\nDESCRIPTION: Examples of using queryRequiredJSON method to execute queries that must return at least one element as JSON string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await client.queryRequiredJSON(\"select 2 + 2;\"); // string: \"4\"\nconst result = await client.queryRequiredJSON(\"select <int64>{}\"); // Throws a ResultCardinalityMismatchError\nconst result = await client.queryRequiredJSON(\"select {1, 2, 3}\"); // Throws a ResultCardinalityMismatchError\n```\n\n----------------------------------------\n\nTITLE: Grouping with Shape in TypeScript and EdgeQL\nDESCRIPTION: Shows how to group movies with a shape applied to elements, including nested shapes and computed properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\ne.group(e.Movie, (movie) => ({\n  title: true,\n  actors: { name: true },\n  num_actors: e.count(movie.characters),\n  by: { release_year: movie.release_year },\n}));\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie {\n  title,\n  num_actors := count(.actors)\n}\nby .release_year\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Mutation in Strawberry GraphQL Schema\nDESCRIPTION: This code defines a GraphQL mutation for creating an actor in the database. It uses Strawberry decorators to define the mutation and specifies the input parameters and return type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# strawberry-gql/app/schema.py\n...\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    async def create_actor(\n        self, name: str,\n        age: int | None = None,\n        height: int | None = None\n    ) -> ResponseActor:\n\n        actor_json = await client.query_single_json(\n            \"\"\"\n            with new_actor := (\n                insert Actor {\n                    name := <str>$name,\n                    age := <optional int16>$age,\n                    height := <optional int16>$height\n                }\n            )\n            select new_actor {name, age, height}\n        \"\"\",\n            name=name,\n            age=age,\n            height=height,\n        )\n\n        actor = json.loads(actor_json)\n        return Actor(\n            actor.get(\"name\"),\n            actor.get(\"age\"),\n            actor.get(\"height\")\n        )\n\n# Mutation class needs to be registered here.\nschema = strawberry.Schema(query=Query, mutation=Mutation)\n```\n\n----------------------------------------\n\nTITLE: Required vs Optional Properties\nDESCRIPTION: Shows how to define required and optional properties in an object type using the required keyword.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;       # required\n  release_year: int64;       # optional\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Objects with EdgeDB Query Builder in TypeScript\nDESCRIPTION: Shows how to update objects using the EdgeDB query builder. This example updates the title of a specific movie.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.update(e.Movie, (movie) => ({\n  filter_single: { title: \"Doctor Strange 2\" },\n  set: {\n    title: \"Doctor Strange in the Multiverse of Madness\",\n  },\n}));\n\nconst result = await query.run(client);\n```\n\n----------------------------------------\n\nTITLE: Query JSON Method (Python)\nDESCRIPTION: Executes a query and returns results in JSON format within a transaction block. Manages connection acquisition and release automatically.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync def query_json(query, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Initial Schema Definition in SDL\nDESCRIPTION: Defines basic User and Post types in Gel's schema definition language.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/migrations.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n}\n\ntype Post {\n  required title: str;\n  required author: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Inserts in EdgeQL and TypeScript\nDESCRIPTION: Shows how to perform nested inserts, creating related objects in a single query, using both EdgeQL and TypeScript with the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Movie {\n  title := 'Doctor Strange 2',\n  release_year := 2022,\n  director := (insert Person {\n    name := 'Sam Raimi'\n  })\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.insert(e.Movie, {\n  title: 'Doctor Strange 2',\n  release_year: 2022,\n  director: e.insert(e.Person, {\n    name: 'Sam Raimi'\n  })\n});\n\nconst result = await query.run(client);\n// {id: string}\n// by default INSERT only returns\n// the id of the new object\n```\n\n----------------------------------------\n\nTITLE: Creating User with EdgeQL\nDESCRIPTION: EdgeQL query to insert a new user and return their details\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (insert User {\n    name := <str>$name\n}) {\n    name,\n    created_at\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Related Documentation Sections using EdgeDB in TypeScript\nDESCRIPTION: This TypeScript snippet defines a query to retrieve related documentation sections from an EdgeDB database based on embedding similarity.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst getSectionsQuery = e.params(\n    {\n        target: e.OpenAIEmbedding,\n        matchThreshold: e.float64,\n        matchCount: e.int16,\n        minContentLength: e.int16,\n    },\n    (params) => {\n        return e.select(e.Section, (section) => {\n        const dist = e.ext.pgvector.cosine_distance(\n            section.embedding,\n            params.target\n        );\n        return {\n            content: true,\n            tokens: true,\n            dist,\n            filter: e.op(\n                e.op(\n                  e.len(section.content),\n                  \">\",\n                  params.minContentLength\n                ),\n                \"and\",\n                e.op(dist, \"<\", params.matchThreshold)\n            ),\n            order_by: {\n                expression: dist,\n```\n\n----------------------------------------\n\nTITLE: Executing EdgeQL Queries with gel query Command\nDESCRIPTION: The 'gel query' command is used to execute one or more EdgeQL queries. It can take queries as space-separated strings or read them from a file. The command supports various output formats and connection options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_query.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel query [<options>] <edgeql-query>...\n```\n\n----------------------------------------\n\nTITLE: Grouping Movie Data by Release Year in EdgeQL\nDESCRIPTION: This EdgeQL snippet demonstrates how to group Movie objects by release year, selecting the title and actor names in each group. The group statement is a top-level operation in EdgeQL unlike SQL's GROUP BY clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie { title, actors: { name }}\nby .release_year;\n```\n\n----------------------------------------\n\nTITLE: Parameterized Query Execution in Python\nDESCRIPTION: Shows how to execute queries with parameters using named arguments in the query method.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport gel\n\nclient = gel.create_async_client()\n\nasync def main():\n  await client.ensure_connected()\n  result = await client.query(\"select 2 + $addend;\", addend=2)\n  print(result)\n\nasyncio.run(main())\n\n# Output:\n# [4]\n```\n\n----------------------------------------\n\nTITLE: Complete storeEmbeddings Function Implementation in TypeScript\nDESCRIPTION: The complete implementation of the storeEmbeddings function that combines creating a client, discovering sections, preparing data, and storing it in the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nasync function storeEmbeddings() {\n  const client = gel.createClient();\n\n  const sectionPaths = await walk(\"docs\");\n\n  console.log(`Discovered ${sectionPaths.length} sections`);\n\n  const sections = await prepareSectionsData(sectionPaths);\n\n  // Delete old data from the DB.\n  await e.delete(e.Section).run(client);\n\n  // Bulk-insert all data into Gel database.\n  const query = e.params({ sections: e.json }, ({ sections }) => {\n    return e.for(e.json_array_unpack(sections), (section) => {\n      return e.insert(e.Section, {\n        content: e.cast(e.str, section.content!),\n        tokens: e.cast(e.int16, section.tokens!),\n        embedding: e.cast(e.OpenAIEmbedding, section.embedding!),\n      });\n    });\n  });\n\n  await query.run(client, { sections });\n  console.log(\"Embedding generation complete\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Provider\nDESCRIPTION: EdgeQL query to set up a generic OpenID Connect provider using Google as an example\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH\nINSERT ext::auth::OpenIDConnectProvider {\n    name := 'google',\n    display_name := 'Google',\n    issuer_url := 'https://accounts.google.com',\n    logo_url := 'https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png',\n    client_id := '1234567890',\n    secret := '1234567890',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in SQL with Foreign Key Relationships\nDESCRIPTION: SQL example showing how to create tables with foreign key relationships between People and Movies tables. This demonstrates the traditional relational approach with explicit references.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/comparison.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE people (\n  id            uuid  PRIMARY KEY,\n  name          text,\n);\nCREATE TABLE movies (\n  id            uuid  PRIMARY KEY,\n  title         text,\n  director_id   uuid  REFERENCES people(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTP routes for WebAuthn flow in NodeJS\nDESCRIPTION: Establishes the HTTP routing for a WebAuthn authentication server, handling various WebAuthn operations like registration, authentication, and verification. This code configures the server to respond to different endpoints required for the WebAuthn authentication flow.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webauthn.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = http.createServer(async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n\n  switch (requestUrl.pathname) {\n    case \"/auth/webauthn/register/options\": {\n      await handleRegisterOptions(req, res);\n      break;\n    }\n\n    case \"/auth/webauthn/register\": {\n      await handleRegister(req, res);\n      break;\n    }\n\n    case \"/auth/webauthn/authenticate/options\": {\n      await handleAuthenticateOptions(req, res);\n      break;\n    }\n\n    case \"/auth/webauthn/authenticate\": {\n      await handleAuthenticate(req, res);\n      break;\n    }\n\n    case \"/auth/webauthn/verify\": {\n      await handleVerify(req, res);\n      break;\n    }\n\n    default: {\n      res.writeHead(404);\n      res.end(\"Not found\");\n      break;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Required Single Query in TypeScript\nDESCRIPTION: Examples of using queryRequiredSingle method to execute queries that must return exactly one result. Shows successful case and error cases.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.queryRequiredSingle<number>(\"select 2 + 2;\"); // number: 4\nawait client.queryRequiredSingle<number>(\"select <int64>{};\"); // Throws a NoDataError\nawait client.queryRequiredSingle<number>(\"select {1, 2, 3};\"); // Throws a ResultCardinalityMismatchError\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Client and Generator Packages\nDESCRIPTION: Commands for installing the Gel client and generator packages using different package managers like npm, yarn, pnpm, bun, and deno.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-prod gel          # database client\n$ npm install --save-dev @gel/generate # generators\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add gel                 # database client\n$ yarn add --dev @gel/generate # generators\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add --save-prod gel          # database client\n$ pnpm add --save-dev @gel/generate # generators\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add gel                 # database client\n$ bun add --dev @gel/generate # generators\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ deno add npm:gel                 # database client\n$ deno add --dev npm:@gel/generate # generators\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-based Visibility for Blog Posts in Gel SDL\nDESCRIPTION: This snippet shows how to implement 'disappearing' posts that become invisible after 24 hours. It introduces a 'created_at' field and uses a datetime comparison in the access policy.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_12\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str { constraint exclusive; }\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n  required created_at: datetime {\n    default := datetime_of_statement() # non-volatile\n  }\n\n  access policy author_has_full_access\n    allow all\n    using (global current_user ?= .author.id);\n  access policy hide_after_24hrs\n    allow select\n    using (\n      datetime_of_statement() - .created_at < <duration>'24 hours'\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction in Python\nDESCRIPTION: This snippet demonstrates how to execute a transaction in Python to update bank customer balances using EdgeQL query strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/transactions.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync for tx in client.transaction():\n    async with tx:\n        await tx.execute(\"\"\"update BankCustomer\n            filter .name = 'Customer1'\n            set { bank_balance := .bank_balance -10 };\"\"\")\n        await tx.execute(\"\"\"update BankCustomer\n            filter .name = 'Customer2'\n            set { bank_balance := .bank_balance +10 };\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Data with ext::pgvector in EdgeQL\nDESCRIPTION: Shows how to perform vector similarity searches using the ext::pgvector extension, including filtering and ordering results based on cosine distance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  vec as module ext::pgvector,\n  target := <GPTEmbedding>$target_embedding,\n  threshold := <float64>$threshold\n\nselect Document {\n  *,\n  dist := vec::cosine_distance(target, .embedding)\n}\nfilter .dist < threshold\norder by .dist empty last\nlimit 5\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Properties in Gel SDL\nDESCRIPTION: This example shows how to set default values for properties. Default values can be static or dynamic, using EdgeQL expressions that are evaluated upon insertion.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Player {\n  required points: int64 {\n    default := 0;\n  }\n\n  required latitude: float64 {\n    default := (360 * random() - 180);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect User Creation with Profile Data\nDESCRIPTION: Extends user creation by incorporating OpenID Connect id_token data, including email, name, and locale information from the JWT payload.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { email, name, locale } = id_token\n  ? await decodeJwt(id_token)\n  : { email: null, name: null, locale: null };\nconst authedClient = client.withGlobals({\n  \"ext::auth::client_token\": auth_token,\n});\nawait authedClient.query(`\n  insert User {\n    identity := (global ext::auth::ClientTokenIdentity)\n    email := <optional str>email,\n    name := <optional str>name,\n    locale := <optional str>locale\n  };\n`, { email, name, locale });\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Assignment Operator Example\nDESCRIPTION: Demonstrates the EdgeQL assignment operator syntax, which uses := for setting values, showing how EdgeQL employs a more code-like syntax compared to traditional SQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\n:=\n```\n\n----------------------------------------\n\nTITLE: Replacing Search Endpoint with Message Posting Functionality\nDESCRIPTION: A Python code diff showing how the /search endpoint is replaced with /messages endpoint. The new implementation adds user messages to a chat, retrieves chat history, performs web searches, and generates AI responses.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n- @app.post(\"/search\")\n- async def search(search_terms: SearchTerms) -> SearchResult:\n-     web_sources = await search_web(search_terms.query)\n-     search_result = await generate_answer(search_terms.query, web_sources)\n-     return search_result\n\n+ @app.post(\"/messages\", status_code=HTTPStatus.CREATED)\n+ async def post_messages(\n+     search_terms: SearchTerms,\n+     username: str = Query(),\n+     chat_id: str = Query(),\n+ ) -> SearchResult:\n+     chat_history = await get_messages_query(\n+         gel_client, username=username, chat_id=chat_id\n+     )\n\n+     _ = await add_message_query(\n+         gel_client,\n+         username=username,\n+         message_role=\"user\",\n+         message_body=search_terms.query,\n+         sources=[],\n+         chat_id=chat_id,\n+     )\n\n+     search_query = search_terms.query\n+     web_sources = await search_web(search_query)\n\n+     search_result = await generate_answer(\n+         search_terms.query, chat_history, web_sources\n+     )\n\n+     _ = await add_message_query(\n+         gel_client,\n+         username=username,\n+         message_role=\"assistant\",\n+         message_body=search_result.response,\n+         sources=search_result.sources,\n+         chat_id=chat_id,\n+     )\n\n+     return search_result\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints on Custom Scalars in SDL\nDESCRIPTION: Examples of defining constraints on custom scalar types using regexp and expression constraints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type username extending str {\n  constraint regexp(r'^[A-Za-z0-9_]{4,20}$');\n}\n\nscalar type title extending str {\n  constraint expression on (\n    __subject__ = str_trim(__subject__)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints on Links in SDL\nDESCRIPTION: Example of defining a constraint on a link in a User object type to ensure exclusive ownership.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n\n  # Make sure none of the \"owned\" items belong\n  # to any other user.\n  multi owns: Item {\n    constraint exclusive;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Friend Schema with Vector Index\nDESCRIPTION: SDL code defining the Friend type with a deferred index for AI vector search across multiple properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/python.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    type Friend {\n        required name: str {\n            constraint exclusive;\n        };\n\n        summary: str;               # A brief description of personality and role\n        relationship_to_komi: str;  # Relationship with Komi\n        defining_trait: str;        # Primary character trait or quirk\n\n        deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n            on (\n                .name ++ ' ' ++ .summary ++ ' '\n                ++ .relationship_to_komi ++ ' '\n                ++ .defining_trait\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Basic Gel Database Connection\nDESCRIPTION: Demonstrates the basic connection setup and query execution across different programming languages. Shows how to create a client instance and execute a simple query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/clients.rst#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nconst client = createClient();\n\nconst result = await client.queryRequiredSingle(\"select 42\");\n```\n\nLANGUAGE: python\nCODE:\n```\nimport gel\n\nclient = gel.create_client()\n\nresult = client.query_required_single(\"select 42\")\n\nclient.close()\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n\n    \"github.com/geldata/gel-go\"\n    \"github.com/geldata/gel-go/gelcfg\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    client, err := gel.CreateClient(gelcfg.Options{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer client.Close()\n\n    var (\n        answer int64\n    )\n\n    query := \"select 42\"\n    err = client.QuerySingle(ctx, query, &answer)\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    let conn = gel_tokio::create_client().await?;\n    let val = conn.query_required_single::<i64, _>(\n        \"select 42\",\n        &(),\n    ).await?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeJS Server and PKCE Implementation for Authentication\nDESCRIPTION: Setup for a NodeJS HTTP server with PKCE (Proof Key of Code Exchange) implementation for secure authentication. Includes function to generate verifier and challenge strings required for the authentication flow.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/email_password.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from \"node:http\";\nimport { URL } from \"node:url\";\nimport crypto from \"node:crypto\";\n\n/**\n * You can get this value by running `gel instance credentials`.\n * Value should be:\n * `${protocol}://${host}:${port}/branch/${branch}/ext/auth/\n */\nconst GEL_AUTH_BASE_URL = process.env.GEL_AUTH_BASE_URL;\nconst SERVER_PORT = 3000;\n\n/**\n * Generate a random Base64 url-encoded string, and derive a \"challenge\"\n * string from that string to use as proof that the request for a token\n * later is made from the same user agent that made the original request\n *\n * @returns {Object} The verifier and challenge strings\n */\nconst generatePKCE = () => {\n   const verifier = crypto.randomBytes(32).toString(\"base64url\");\n\n   const challenge = crypto\n      .createHash(\"sha256\")\n      .update(verifier)\n      .digest(\"base64url\");\n\n   return { verifier, challenge };\n};\n```\n\n----------------------------------------\n\nTITLE: Transaction Management in Python\nDESCRIPTION: Demonstrates how to manage transactions using the client.transaction() API with atomic execution guarantees.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync for tx in client.transaction():\n    async with tx:\n        await tx.execute(\"insert Movie { title := 'Iron Man' }\")\n        await tx.execute(\"insert Person { name := 'Robert Downey Jr.' }\")\n```\n\n----------------------------------------\n\nTITLE: Insert with Link Properties in TypeScript\nDESCRIPTION: Demonstrates how to insert data with link properties using nested queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.insert(e.Movie, {\n  title: \"Iron Man\",\n  actors: e.select(e.Person, person => ({\n    filter_single: { name: \"Robert Downey Jr.\" },\n    \"@character_name\": e.str(\"Tony Stark\")\n  }))\n});\n```\n\n----------------------------------------\n\nTITLE: Delete Operations with Filtering\nDESCRIPTION: Demonstrates how to delete objects with filtering and limiting results\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\ndelete Movie\nfilter .title ilike \"the avengers%\"\nlimit 3;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.delete(e.Movie, (movie) => ({\n  filter: e.op(movie.title, 'ilike', \"the avengers%\"),\n}));\n```\n\n----------------------------------------\n\nTITLE: Enabling Auth Extension in SDL\nDESCRIPTION: Basic schema configuration to enable the auth extension in a Gel application.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension auth;\n```\n\n----------------------------------------\n\nTITLE: Using Parameters for Filtering in Gel TypeScript\nDESCRIPTION: Shows how to use e.params to explicitly pass parameters to a query, making it more reusable and avoiding explicit type casting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nconst id = \"00000000-0000-0000-0000-000000000000\";\nconst query = e.params(\n  { id: e.uuid },\n  (params) => e.select(e.Movie, (movie) => ({\n    id: true,\n    title: true,\n    release_year: true,\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying EdgeDB Migrations\nDESCRIPTION: Commands to create and apply a migration that implements the schema changes in the database. The migration creates the necessary structures for the Card and Deck types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/modeling/fastapi.rst#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ uvx gel migration create\nCreated ./dbschema/migrations/00001-m125ajr.edgeql, id: m125ajrbqp7ov36s7aniefxc376ofxdlketzspy4yddd3hrh4lxmla\n$ uvx gel migrate\nApplying m125ajrbqp7ov36s7aniefxc376ofxdlketzspy4yddd3hrh4lxmla (00001-m125ajr.edgeql)\n... parsed\n... applied\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Client Usage in .NET\nDESCRIPTION: C# implementation showing async client creation and query execution\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/clients.rst#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Gel;\n\nvar client = new GelClient();\nvar result = await client.QuerySingleAsync<double>(\"select random();\");\nConsole.WriteLine(result);\n```\n\n----------------------------------------\n\nTITLE: Filtering Polymorphic Links in EdgeQL\nDESCRIPTION: Shows how to filter polymorphic links by subtype, fetching only Hero characters from Movies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_20\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  title,\n  characters[is Hero]: {\n    secret_identity\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Results with EdgeDB Query Builder in TypeScript\nDESCRIPTION: Shows how to filter results using the special 'filter' key in the EdgeDB query builder. It also demonstrates nested filtering on related objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, (movie) => ({\n  // special \"filter\" key\n  filter: e.op(movie.release_year, \">\", 1999),\n\n  id: true,\n  title: true,\n  actors: (a) => ({\n    // nested filter\n    filter: e.op(a.name, \"ilike\", \"a%\"),\n    name: true,\n    id: true,\n  }),\n}));\n\nconst result = await query.run(client);\n// { id: string; title: number }[]\n```\n\n----------------------------------------\n\nTITLE: Using Object Types and Paths in EdgeDB Query Builder\nDESCRIPTION: Examples of using object types and constructing paths in the EdgeDB query builder.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ne.default.Person;\ne.default.Movie;\ne.default.TVShow;\ne.my_module.SomeType;\n\ne.Person;\ne.Movie;\ne.TVShow;\n\ne.Person.name;              // Person.name\ne.Movie.title;              // Movie.title\ne.TVShow.actors.name;          // Movie.actors.name\n\ne.select(e.Person).name;\n// EdgeQL: (select Person).name\n\ne.op(e.Movie, \"union\", e.TVShow).actors;\n// EdgeQL: (Movie union TVShow).actors\n\nconst ironMan = e.insert(e.Movie, {\n  title: \"Iron Man\"\n});\nironMan.title;\n// EdgeQL: (insert Movie { title := \"Iron Man\" }).title\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relationship with Exclusive Constraint\nDESCRIPTION: Demonstrates how to create a one-to-one relationship between Movie and MovieStats using an exclusive constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;\n  required stats: MovieStats {\n    constraint exclusive;\n  };\n}\n\ntype MovieStats {\n  required budget: int64;\n  required box_office: int64;\n}\n```\n\n----------------------------------------\n\nTITLE: Using RAGClient for AI Queries\nDESCRIPTION: Example demonstrating how to create and use a RAGClient for astronomy-related queries using GPT-4 Turbo. Shows client initialization, context setting, and query execution.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/javascript.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\nimport { createRAGClient } from \"@gel/ai\";\n\n\nconst client = createClient();\n\nconst gpt4Ai = createRAGClient(client, {\n  model: \"gpt-4-turbo-preview\",\n});\n\nconst astronomyAi = gpt4Ai.withContext({\n  query: \"Astronomy\"\n});\n\nconsole.log(\n  await astronomyAi.queryRag(\"What color is the sky on Mars?\")\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Schema with User and BlogPost Types\nDESCRIPTION: Initial schema definition showing basic User and BlogPost type structures before adding access policies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str { constraint exclusive; }\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Semantic Similarity Index in EdgeDB\nDESCRIPTION: Shows how to add a semantic similarity index on a type using the ext::ai::index in SDL, with embedding model configuration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl-diff\nCODE:\n```\n  module default {\n    type Astronomy {\n      content: str;\n+     deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n+       on (.content);\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Free Object Selection in EdgeQL\nDESCRIPTION: Demonstrates using free objects for intermediate results and output reshaping.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nwith U := (select User filter .name like '%user%')\nselect {\n    matches := U {name},\n    total := count(U),\n    total_users := count(User),\n};\n```\n\n----------------------------------------\n\nTITLE: Using Array Expressions with Indexing and Slicing in Gel TypeScript\nDESCRIPTION: Demonstrates how to create array expressions and perform indexing and slicing operations on them. The example shows both direct indexing/slicing and using the equivalent .index and .slice methods.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst myArray = e.array(['a', 'b', 'c', 'd', 'e']);\n// ['a', 'b', 'c', 'd', 'e']\n\nmyArray[1];\n// ['a', 'b', 'c', 'd', 'e'][1]\n\nmyArray['1:3'];\n// ['a', 'b', 'c', 'd', 'e'][1:3]\n```\n\n----------------------------------------\n\nTITLE: Calculating Multiple Vector Distances in EdgeQL\nDESCRIPTION: Comprehensive example showing how to calculate various vector distances: Euclidean distance, inner product, and cosine similarity between stored vectors and a query vector.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ngel> select Item {\n....   id,\n....   distance := ext::pgvector::euclidean_distance(\n....     .embedding, <v3>[3, 1, 2]),\n....   inner_product := -ext::pgvector::neg_inner_product(\n....     .embedding, <v3>[3, 1, 2]),\n....   cosine_similarity := 1 - ext::pgvector::cosine_distance(\n....     .embedding, <v3>[3, 1, 2]),\n.... };\n{\n  default::Item {\n    id: f119d64e-0995-11ee-8804-ff8cd739d8b7,\n    distance: 3.6728735110725803,\n    inner_product: 15.600000143051147,\n    cosine_similarity: 0.7525964057358976,\n  },\n  default::Item {\n    id: f410c844-0995-11ee-8804-176f28167dd1,\n    distance: 7.043436619202443,\n    inner_product: 6.699999988079071,\n    cosine_similarity: 0.2557810894509498,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Conditional Log Update Trigger in EdgeDB SDL\nDESCRIPTION: Creates a trigger that inserts a Log object when an update query changes a User object. It uses a condition to check if the object has actually changed before executing the trigger.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_10\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n\n  trigger log_update after update for each\n  when (<json>__old__ {**} != <json>__new__ {**})\n  do (\n    insert Log {\n      action := 'update',\n      target_name := __new__.name,\n      change := __old__.name ++ '->' ++ __new__.name\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Property Index in SDL\nDESCRIPTION: Demonstrates how to create a simple index on a property of a User type. This index can improve performance for queries filtering, ordering, or grouping by the 'name' property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n  index on (.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Delete Operation in EdgeQL\nDESCRIPTION: Demonstrates a simple delete operation to remove an object from the database based on a filter condition.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/delete.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndelete Hero\nfilter .name = 'Iron Man';\n```\n\n----------------------------------------\n\nTITLE: Querying Object Type Properties in EdgeQL\nDESCRIPTION: Shows how to query the email property of a Person object type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person {\n  email\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated tRPC Procedure\nDESCRIPTION: TypeScript code demonstrating an authenticated tRPC procedure using Gel Auth and Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appRouter = t.router({\n  getUserData: t.procedure.query(async ({ ctx }) => {\n    if (!(await ctx.session.isSignedIn())) {\n      throw new Error(\"Not authenticated\");\n    }\n    // Fetch data from Gel using the authenticated client\n    const userData = await ctx.session.client.query(`\n      select User { name, email }\n    `);\n\n    return userData;\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Magic Link Callback for Token Exchange\nDESCRIPTION: Processes the callback after a user clicks on a magic link. Extracts the authorization code from the URL, retrieves the PKCE verifier from cookies, and exchanges them for an authentication token with Gel Auth.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Handles the PKCE callback and exchanges the `code` and `verifier`\n * for an auth_token, setting the auth_token as an HttpOnly cookie.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleCallback = async (req, res) => {\n   const requestUrl = getRequestUrl(req);\n\n   const code = requestUrl.searchParams.get(\"code\");\n   if (!code) {\n      const error = requestUrl.searchParams.get(\"error\");\n      res.status = 400;\n      res.end(\n         `Magic link callback is missing 'code'. Provider responded with error: ${error}`,\n      );\n      return;\n   }\n\n   const cookies = req.headers.cookie?.split(\"; \");\n   const verifier = cookies\n      ?.find((cookie) => cookie.startsWith(\"gel-pkce-verifier=\"))\n      ?.split(\"=\")[1];\n   if (!verifier) {\n      res.status = 400;\n      res.end(\n         `Could not find 'verifier' in the cookie store. Is this the same user agent/browser that started the authorization flow?`,\n      );\n      return;\n   }\n\n   const codeExchangeUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n   codeExchangeUrl.searchParams.set(\"code\", code);\n   codeExchangeUrl.searchParams.set(\"verifier\", verifier);\n   const codeExchangeResponse = await fetch(codeExchangeUrl.href, {\n      method: \"GET\",\n   });\n\n   if (!codeExchangeResponse.ok) {\n      const text = await codeExchangeResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n```\n\n----------------------------------------\n\nTITLE: Generating Google Search Query from Chat History in Python\nDESCRIPTION: This function prepares LLM inputs to generate a search query based on the entire chat history. It formats the message history and uses an LLM to extract the most relevant keyword for search.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nasync def generate_search_query(\n    query: str, message_history: list[GetMessagesResult]\n) -> str:\n    system_prompt = (\n        \"You are a helpful assistant.\"\n        + \" Your job is to extract a keyword search query\"\n        + \" from a chat between an AI and a human.\"\n        + \" Make sure it's a single most relevant keyword to maximize matching.\"\n        + \" Only provide the query itself as your response.\"\n    )\n\n    formatted_history = \"\\n---\\n\".join(\n        [\n            f\"{message.role}: {message.body} (sources: {message.sources})\"\n            for message in message_history\n        ]\n    )\n    prompt = f\"Chat history: {formatted_history}\\n\\nUser message: {query} \\n\\n\"\n\n    llm_response = get_llm_completion(\n        system_prompt=system_prompt, messages=[{\"role\": \"user\", \"content\": prompt}]\n    )\n\n    return llm_response\n```\n\n----------------------------------------\n\nTITLE: Using Gel EdgeQL-JS Query Builder in TypeScript\nDESCRIPTION: Shows how to use the edgeql-js generator to create a type-safe query builder for writing code-first queries in TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/index.rst#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\nimport e from \"./dbschema/edgeql-js\";\n\nconst client = createClient();\n\nconst result = await e\n  .params({ title: e.str }, (params) =>\n    e.select(e.Movie, (m) => ({\n      filter_single: e.op(m.title, \"=\", params.title),\n      id: true,\n      title: true,\n      actors: { name: true },\n    })),\n  )\n  .run(client, {\n    title: \"The Matrix\",\n  });\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Using coalesce operator (??) in EdgeQL\nDESCRIPTION: The coalesce operator (??) returns the first non-empty set from its operands, commonly used to provide default values for optional properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\n# Get a set of tuples (<issue name>, <priority>)\n# for all issues.\nselect (Issue.name, Issue.priority.name ?? 'n/a');\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Redirect URLs for Authentication\nDESCRIPTION: EdgeQL command to set the allowed redirect URLs for the authentication flow, ensuring redirects only go to trusted domains.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_31\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH SET\next::auth::AuthConfig::allowed_redirect_urls := {\n    'http://localhost:8000',\n    'http://localhost:8000/auth'\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Using Backlinks\nDESCRIPTION: Shows how to use backlinks to filter and find items, including UUID casting to object types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Villain filter .<characters =\n  <Movie><uuid>'6c60c28a-5c03-11ee-99ff-dfa425012a05' {\n    name := .name ++ ', who got to see Spider-Man!'\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration with Explicit EdgeQL Commands\nDESCRIPTION: Example of using the 'create migration' DDL command to define a migration that creates a User type with a username property using explicit EdgeQL statements.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate migration {\n    create type default::User {\n        create property username: str;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Interfaces\nDESCRIPTION: Example of TypeScript interfaces automatically generated from the Gel schema. It shows how Gel types are mapped to TypeScript interfaces, including handling of required fields, optional fields, and relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Person {\n  id: string;\n  name: string;\n}\n\nexport type Genre = \"Horror\" | \"Comedy\" | \"Drama\";\n\nexport interface Movie {\n  id: string;\n  title: string;\n  genre?: Genre | null;\n  actors: Person[];\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Filtering Before Aggregation in EdgeQL\nDESCRIPTION: This snippet shows the correct way to filter users before counting them. It applies the filter within a nested select, ensuring that only users matching the condition are counted.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/select.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nselect count(\n    (select User\n     filter User.name like 'Alice%')\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Insert Query in TypeScript\nDESCRIPTION: Shows how to insert new data using e.insert with direct values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\ne.insert(e.Movie, {\n  title: e.str(\"Spider-Man: No Way Home\"),\n  release_year: e.int64(2021),\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Gel Instance Outside Project Directory\nDESCRIPTION: Demonstrates how to connect to a Gel instance using the -I flag when outside the project directory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~\n$ gel\ngel error: no `gel.toml` found and no connection options are specified\n  Hint: Run `gel project init` or use any of `-H`, `-P`, `-I` arguments to\n  specify connection parameters. See `--help` for details\n$ gel -I my_instance\nGel x.x+cc4f3b5 (repl x.x+da2788e)\nType \\help for help, \\quit to quit.\nmy_instance:main>\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Endpoint for User Retrieval\nDESCRIPTION: This Python code implements a FastAPI endpoint to retrieve all users or a specific user by username using EdgeDB queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom edgedb import create_async_client\nfrom .queries.get_users_async_edgeql import get_users as get_users_query, GetUsersResult\n\n\ngel_client = create_async_client()\n\n@app.get(\"/users\")\nasync def get_users() -> list[GetUsersResult]:\n    return await get_users_query(gel_client)\n```\n\n----------------------------------------\n\nTITLE: Updating Gel Schema for User Authentication\nDESCRIPTION: This SDL diff shows the changes made to the Gel schema to include a new field in the User type for storing the Gel Auth identity and a new 'current_user' global. These changes are necessary for linking users to their Gel Auth identities.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_36\n\nLANGUAGE: sdl\nCODE:\n```\n+ global current_user := assert_single(\n+     ((\n+         select User\n+         filter .identity = global ext::auth::ClientTokenIdentity\n+     ))\n+ );\n\n  type User extending Auditable {\n+    required identity: ext::auth::Identity;\n     required name: str {\n        constraint exclusive;\n        constraint max_len_value(50);\n     };\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Built-in RAG in Python\nDESCRIPTION: Python code showing how to use the built-in Retrieval-Augmented Generation (RAG) functionality in Gel AI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/python.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport gel\nimport gel.ai\n\ngel_client = gel.create_client()\ngel_ai = gel.ai.create_rag_client(\n    client,\n    model=\"gpt-4-turbo-preview\"\n)\n\ngel_ai.query_rag(\n    \"Who helps Komi make friends?\",\n    context=\"Friend\",\n)\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Excluding Generated Files\nDESCRIPTION: Configuration line to add to .gitignore to exclude the generated TypeScript interfaces file from version control.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ndbschema/interfaces.ts\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with EdgeQL\nDESCRIPTION: Basic EdgeQL query to select all users with their names and creation timestamps\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User {name, created_at};\n```\n\n----------------------------------------\n\nTITLE: Specifying Property Cardinality in Gel SDL\nDESCRIPTION: This snippet demonstrates how to declare properties with different cardinalities. It shows the use of 'single' (default) and 'multi' keywords to define properties that can hold one value or multiple values respectively.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n\n  # \"single\" keyword isn't necessary here:\n  # properties are single by default\n  single name: str;\n\n  # an unordered set of strings\n  multi nicknames: str;\n\n  # an unordered set of string arrays\n  multi set_of_arrays: array<str>;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Second User with Friend Reference\nDESCRIPTION: Creates second user and establishes friendship with first user.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/paths.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert User {\n... email := \"user2@me.com\",\n... friends := (select detached User filter .email = \"user1@me.com\")\n... };\n```\n\n----------------------------------------\n\nTITLE: Querying Related Sections with Gel TypeScript\nDESCRIPTION: This snippet defines a query using Gel's TypeScript query builder to retrieve related documentation sections based on embedding similarity. It uses cosine distance for comparison and includes filtering, ordering, and limiting of results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst getSectionsQuery = e.params(\n  {\n    target: e.OpenAIEmbedding,\n    matchThreshold: e.float64,\n    matchCount: e.int16,\n    minContentLength: e.int16,\n  },\n  (params) => {\n    return e.select(e.Section, (section) => {\n      const dist = e.ext.pgvector.cosine_distance(\n        section.embedding,\n        params.target\n      );\n      return {\n        content: true,\n        tokens: true,\n        dist,\n        filter: e.op(\n          e.op(\n            e.len(section.content),\n            \">\",\n            params.minContentLength\n          ),\n          \"and\",\n          e.op(dist, \"<\", params.matchThreshold)\n        ),\n        order_by: {\n          expression: dist,\n          empty: e.EMPTY_LAST,\n        },\n        limit: params.matchCount,\n      };\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Scalar Type in SDL\nDESCRIPTION: Example of creating a non-negative custom int64 variant using SDL. This demonstrates how to extend built-in scalars with additional constraints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type posint64 extending int64 {\n    constraint min_value(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Management with AsyncIO Client\nDESCRIPTION: Example demonstrating how to use transactions with the async client implementation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclient = gel.create_async_client()\nasync for tx in client.transaction():\n    async with tx:\n        await tx.query('SELECT {1, 2, 3}')\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction with Counter Update in Python\nDESCRIPTION: Example showing how to use a transaction loop to read and update a counter value atomically. The transaction will automatically retry on transient errors like network issues or serialization conflicts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfor tx in client.transaction():\n    with tx:\n        value = tx.query_single(\"SELECT Counter.value\")\n        tx.execute(\n            \"UPDATE Counter SET { value := <int64>$value }\",\n            value=value + 1,\n        )\n```\n\n----------------------------------------\n\nTITLE: Checking Gel Client Connection Status in TypeScript\nDESCRIPTION: Shows how to explicitly ensure the client is connected before executing a query. This can help catch connection configuration errors early.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nconst client = createClient();\n\nasync function main() {\n  await client.ensureConnected();\n  const answer = await client.queryRequiredSingle<number>(\"select 2 + 2;\");\n  console.log(answer); // number: 4\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Gel Client in JavaScript\nDESCRIPTION: Demonstrates how to create a Gel client and use various query methods with different cardinalities. It shows examples of query, querySingle, queryRequired, and queryRequiredSingle methods.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"gel\";\nimport assert from \"node:assert\";\n\nconst client = createClient(); // get connection details automatically\n\n// Query always returns an array of result, even for single object queries\nconst queryResult = await client.query(\"select 1\");\nassert.equal(queryResult, [1]);\n\n// querySingle will throw an error if the query returns more than one row\nconst singleQueryResult = await client.querySingle(\"select 1\");\nassert.equal(singleQueryResult, 1);\n\n// queryRequired will throw an error if the query returns no rows\nconst requiredQueryResult = await client.queryRequired(\"select 1\");\nassert.equal(requiredQueryResult, 1);\n\n// queryRequiredSingle will throw an error if\n// - the query returns more than one row\n// - the query returns no rows\nconst requiredSingleQueryResult = await client.queryRequiredSingle(\"select 1\");\nassert.equal(requiredSingleQueryResult, 1);\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Callback Handler for Token Exchange in Node.js\nDESCRIPTION: This JavaScript code handles the OAuth callback, exchanging the authorization code and PKCE verifier for an auth token, which is then stored in an HttpOnly cookie for future authenticated requests.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Handles the PKCE callback and exchanges the `code` and `verifier\n * for an auth_token, setting the auth_token as an HttpOnly cookie.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleCallback = async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n\n  const code = requestUrl.searchParams.get(\"code\");\n  if (!code) {\n    const error = requestUrl.searchParams.get(\"error\");\n    res.status = 400;\n    res.end(\n      `OAuth callback is missing 'code'. OAuth provider responded with error: ${error}`\n    );\n    return;\n  }\n\n  const cookies = req.headers.cookie?.split(\"; \");\n  const verifier = cookies\n    ?.find((cookie) => cookie.startsWith(\"gel-pkce-verifier=\"))\n    ?.split(\"=\")[1];\n  if (!verifier) {\n    res.status = 400;\n    res.end(\n      `Could not find 'verifier' in the cookie store. Is this the same user agent/browser that started the authorization flow?`\n    );\n    return;\n  }\n\n  const codeExchangeUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n  codeExchangeUrl.searchParams.set(\"code\", code);\n  codeExchangeUrl.searchParams.set(\"verifier\", verifier);\n  const codeExchangeResponse = await fetch(codeExchangeUrl.href, {\n    method: \"GET\",\n  });\n\n  if (!codeExchangeResponse.ok) {\n    const text = await codeExchangeResponse.text();\n    res.status = 400;\n    res.end(`Error from the auth server: ${text}`);\n    return;\n  }\n\n  const { auth_token } = await codeExchangeResponse.json();\n  res.writeHead(204, {\n    \"Set-Cookie\": `gel-auth-token=${auth_token}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n  });\n  res.end();\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Generated TypeScript Interfaces\nDESCRIPTION: Example of how to import the generated TypeScript interfaces in your application code to use them for type checking.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Genre, Movie} from \"./dbschema/interfaces\";\n```\n\n----------------------------------------\n\nTITLE: Starting and Populating a Migration\nDESCRIPTION: Example of starting a migration to create a User type and then using the 'populate migration' command to auto-generate the necessary DDL statements.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nstart migration to {\n    module default {\n        type User;\n    };\n};\n\npopulate migration;\n```\n\n----------------------------------------\n\nTITLE: Querying Linked Data in EdgeQL without JOINs\nDESCRIPTION: EdgeQL query example demonstrating how to retrieve movie titles along with their directors' names using a simple traversal syntax without requiring explicit JOIN operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/comparison.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  title,\n  director: {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints on Properties in SDL\nDESCRIPTION: Example of defining constraints on a User object type to enforce unique usernames with a maximum length.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required username: str {\n    # usernames must be unique\n    constraint exclusive;\n\n    # max length (built-in)\n    constraint max_len_value(25);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @gel/generate Package\nDESCRIPTION: This snippet shows how to install the @gel/generate package using various package managers. The package is used to generate a schema-aware query builder for Gel.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev @gel/generate\n$ # or yarn add --dev @gel/generate\n$ # or pnpm add --dev @gel/generate\n$ # or bun add --dev @gel/generate\n```\n\n----------------------------------------\n\nTITLE: Selecting Inserted Hero Object with Custom Shape in EdgeQL\nDESCRIPTION: This EdgeQL query demonstrates how to insert a Hero object and immediately select specific fields from the inserted object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (insert Hero {\n  name := \"Spider-Man\"\n  # secret_identity is omitted\n}) {id, name};\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Search Index to Card Type\nDESCRIPTION: Modifying the Card type to include a deferred index for vector embeddings of card content.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/fastapi.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Card extending Timestamped {\n    required order: int64;\n    required front: str;\n    required back: str;\n\n    deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n        on (.front ++ ' ' ++ .back);\n}\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Query Operations\nDESCRIPTION: Shows how to query abstract types and handle polymorphic data with type-specific property selection\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Content {\n  title,\n  [is TVShow].num_seasons,\n  [is Movie].release_year\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Content, (content) => ({\n  title: true,\n  ...e.is(e.Movie, {release_year: true}),\n  ...e.is(e.TVShow, {num_seasons: true}),\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Gel Schema\nDESCRIPTION: SDL schema definition for the blog post type in Gel\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\n# dbschema/default.gel\n\nmodule default {\n  type BlogPost {\n    required property title -> str;\n    required property content -> str {\n      default := \"\"\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Alias Using DDL Command in EdgeQL\nDESCRIPTION: Demonstrates how to create an alias using the CREATE ALIAS DDL command in EdgeQL. This example creates an alias for selecting superusers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/aliases.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate alias Superusers := (\n    select User filter User.groups.name = 'Superusers'\n);\n```\n\n----------------------------------------\n\nTITLE: Static Blog Homepage Implementation in Next.js\nDESCRIPTION: Initial implementation of the blog homepage using static data with TypeScript and Next.js components.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\n\ntype Post = {\n  id: string\n  title: string\n  content: string\n}\n\nexport default async function Home() {\n  const posts: Post[] = [\n    {\n      id: 'post1',\n      title: 'This one weird trick makes using databases fun',\n      content: 'Use Gel',\n    },\n    {\n      id: 'post2',\n      title: 'How to build a blog with Gel and Next.js',\n      content: \"Let's start by scaffolding our app with `create-next-app`.\",\n    },\n  ]\n\n  return (\n    <div className=\"container mx-auto p-4 bg-black text-white\">\n      <h1 className=\"text-3xl font-bold mb-4\">Posts</h1>\n      <ul>\n        {posts.map((post) => (\n          <li\n            key={post.id}\n            className=\"mb-4\"\n          >\n            <Link\n              href={`/post/${post.id}`}\n              className=\"text-blue-500\"\n            >\n              {post.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Upsert Result in EdgeQL\nDESCRIPTION: This snippet demonstrates how to perform an upsert operation and query the result to determine if the object was inserted or updated. It uses a select statement to wrap the upsert and returns an 'is_new' flag along with the object's data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  title := \"Eternals\",\n  release_year := 2021,\n  movie := (\n    insert Movie {\n      title := title,\n      release_year := release_year\n    }\n    unless conflict on .title\n    else (\n      update Movie set { release_year := release_year }\n    )\n  )\nselect {\n  data := (select movie {*}),\n  is_new := (movie not in Movie)\n};\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Endpoints with httpx\nDESCRIPTION: Bash commands demonstrating how to test the API endpoints using httpx CLI tool, including PUT, DELETE for users and POST for events.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ httpx -m PUT http://localhost:5001/users \\\n        -p 'current_name' 'Jonathan Harker' \\\n        --json '{\"name\" : \"Dr. Van Helsing\"}'\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ httpx -m PUT http://localhost:5001/users \\\n        -p 'current_name' 'Count Dracula' \\\n        --json '{\"name\" : \"Dr. Van Helsing\"}'\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ httpx -m DELETE http://localhost:5001/users \\\n        -p 'name' 'Count Dracula'\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ httpx -m POST http://localhost:5001/events \\\n        --json '{\n                  \"name\":\"Resuscitation\",\n                  \"address\":\"Britain\",\n                  \"schedule\":\"1889-07-27T23:59:59-07:00\",\n                  \"host_name\":\"Mina Murray\"\n                }'\n```\n\n----------------------------------------\n\nTITLE: Using withGlobals Method in TypeScript\nDESCRIPTION: Demonstrates how to create a new client with global variables set, specifically setting a userId global that is then used in a query filter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await client.withGlobals({\n  userId: \"00000000-0000-0000-0000-000000000000\"\n}).querySingle<{ name: string }>(`\n  select User { name } filter .id = global userId;\n`);\n```\n\n----------------------------------------\n\nTITLE: Working with JSON in EdgeQL and TypeScript\nDESCRIPTION: Demonstrates various operations with JSON data, including type casting, conversion from strings, and indexing in both EdgeQL and TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <json>5;\nselect <json>[1,2,3];\nselect to_json('[{ \"name\": \"Peter Parker\" }]');\nselect to_json('[{ \"name\": \"Peter Parker\" }]')[0]['name'];\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n  The result of an query returning `json` is represented\n  with `unknown` in TypeScript.\n*/\ne.json(5);  // => unknown\ne.json([1, 2, 3]);  // => unknown\ne.to_json('[{ \"name\": \"Peter Parker\" }]');  // => unknown\ne.to_json('[{ \"name\": \"Peter Parker\" }]')[0][\"name\"];  // => unknown\n```\n\n----------------------------------------\n\nTITLE: Inserting Book with Existing Author Reference\nDESCRIPTION: Shows how to insert a new book and link it to an existing author using filters\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/mutations.rst#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_book {\n    insert_Book(\n        data: [{\n            title: \"Four\",\n            author: {\n                filter: {\n    name: {eq: \"Unknown\"}\n                }\n            }\n        }]\n    ) {\n        id\n        title\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    insert Book {\n        title := \"Four\",\n        author := (\n            select Author\n            filter\n            Author.name = \"Unknown\"\n        )\n    }\n) {\n    id,\n    title\n```\n\n----------------------------------------\n\nTITLE: Using tRPC Hooks in React Component\nDESCRIPTION: TypeScript React component using tRPC hooks to query and display user data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { trpc } from '../utils/trpc';\n\nconst UsersComponent = () => {\n  const { data, isLoading } = trpc.getUsers.useQuery();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      {data?.map(user => (\n        <p key={user.email}>{user.name}</p>\n      ))}\n    </div>\n  );\n};\n\nexport default UsersComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Endpoints in FastAPI with Gel AI (Python)\nDESCRIPTION: This snippet demonstrates how to create FastAPI endpoints for fetching similar cards and querying a RAG model using the Gel AI extension. It includes methods for generating embeddings and performing semantic search.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/fastapi.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport gel\nimport gel.ai\n\nfrom fastapi import FastAPI\n\n\nclient = gel.create_async_client()\n\napp = FastAPI()\n\n\n@app.get(\"/fetch_similar\")\nasync def fetch_similar_cards(query: str):\n    rag = await gel.ai.create_async_rag_client(client, model=\"gpt-4-turbo-preview\")\n    embedding_vector = await rag.generate_embeddings(\n        query, model=\"text-embedding-3-small\"\n    )\n\n    similar_cards = await client.query(\n        \"select ext::ai::search(Card, <array<float32>>$embedding_vector)\",\n        embedding_vector=embedding_vector,\n    )\n\n    return similar_cards\n\n\n@app.get(\"/fetch_rag\")\nasync def fetch_rag_response(query: str):\n    rag = await gel.ai.create_async_rag_client(client, model=\"gpt-4-turbo-preview\")\n    response = await rag.query_rag(\n        message=query,\n        context=gel.ai.QueryContext(query=\"select Card\"),\n    )\n    return response\n```\n\n----------------------------------------\n\nTITLE: Filtering, Ordering, and Pagination in EdgeQL and TypeScript\nDESCRIPTION: Demonstrates how to use filter, order by, offset, and limit clauses in select statements for both EdgeQL and TypeScript using the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  id,\n  title\n}\nfilter .release_year > 2017\norder by .title\noffset 10\nlimit 10;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, (movie) => ({\n  id: true,\n  title: true,\n  filter: e.op(movie.release_year, \">\", 1999),\n  order_by: movie.title,\n  offset: 10,\n  limit: 10,\n}));\n\nconst result = await query.run(client);\n// {id: string; title: number}[]\n```\n\n----------------------------------------\n\nTITLE: Array Slicing in EdgeQL\nDESCRIPTION: Shows how to use array slicing to produce sub-arrays, including various slice notations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select [1, 2, 3][0:2];\n{[1, 2]}\ndb> select [1, 2, 3][2:];\n{[3]}\ndb> select [1, 2, 3][:1];\n{[1]}\ndb> select [1, 2, 3][:-2];\n{[1]}\ndb> select [1, 2, 3][1:20];\n{[2, 3]}\ndb> select [1, 2, 3][10:20];\n{[]}\n```\n\n----------------------------------------\n\nTITLE: Querying an Object in TypeScript with EdgeDB\nDESCRIPTION: Shows how to query an EdgeDB object (Movie with characters) and define its TypeScript type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.query<{\n  title: string;\n  characters: {\n    name: string;\n    \"@character_name\": string;\n  }[];\n}>(`\n  select Movie {\n    title,\n    characters: {\n      name,\n      @character_name\n    }\n  };\n`);\n```\n\n----------------------------------------\n\nTITLE: Grouping Sets in TypeScript and EdgeQL\nDESCRIPTION: Shows how to use grouping sets to group by several expressions simultaneously in both TypeScript and EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\ne.group(e.Movie, (movie) => {\n  const release_year = movie.release_year;\n  const first_letter = movie.title[0];\n  return {\n    title: true,\n    by: e.group.set({release_year, first_letter})\n  };\n});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie { title }\nusing first_letter := .title[0]\nby {.release_year, first_letter}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in Endpoint in FastAPI\nDESCRIPTION: This code snippet demonstrates the implementation of a sign-in endpoint in FastAPI. It handles user authentication by sending a POST request to the Gel Auth server, exchanging the received code for an auth token, and setting the token as an HttpOnly cookie in the response.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n@router.post(\"/auth/signin\")\nasync def handle_signin(request: Request):\n    body = await request.json()\n    email = body.get(\"email\")\n    password = body.get(\"password\")\n    provider = body.get(\"provider\")\n\n    if not email or not password or not provider:\n        raise HTTPException(status_code=400, detail=\"Missing email, password, or provider.\")\n\n    verifier, challenge = generate_pkce()\n    authenticate_url = f\"{GEL_AUTH_BASE_URL}/authenticate\"\n    response = httpx.post(authenticate_url, json={\n        \"challenge\": challenge,\n        \"email\": email,\n        \"password\": password,\n        \"provider\": provider,\n    })\n\n    if response.status_code != 200:\n        return JSONResponse(status_code=400, content={\"message\": \"Authentication failed\"})\n\n    code = response.json().get(\"code\")\n    token_url = f\"{GEL_AUTH_BASE_URL}/token\"\n    token_response = httpx.get(token_url, params={\"code\": code, \"verifier\": verifier})\n\n    if token_response.status_code != 200:\n        return JSONResponse(status_code=400, content={\"message\": \"Token exchange failed\"})\n\n    auth_token = token_response.json().get(\"auth_token\")\n    response = JSONResponse(content={\"message\": \"Authentication successful\"})\n    response.set_cookie(key=\"gel-auth-token\", value=auth_token, httponly=True, secure=True, samesite='strict')\n    return response\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Type in SDL\nDESCRIPTION: Demonstrates how to define an abstract type with shared properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type HasName {\n  first_name: str;\n  last_name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Event Details in EdgeDB\nDESCRIPTION: EdgeQL query to update an event's details including its name, address, schedule, and host. The query uses parameters to receive the values and returns the updated event.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql\nCODE:\n```\nwith current_name := <str>$current_name,\n    new_name := <str>$name,\n    address := <str>$address,\n    schedule := <str>$schedule,\n    host_name := <str>$host_name\n\nselect (\n    update Event filter .name = current_name\n    set {\n        name := new_name,\n        address := address,\n        schedule := <datetime>schedule,\n        host := (select User filter .name = host_name)\n    }\n) {name, address, schedule, host: {name}};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhooks in EdgeDB\nDESCRIPTION: Example of configuring webhook URLs and events using EdgeQL. Shows how to set up multiple events for a single webhook endpoint and optionally configure signature verification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webhooks.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current branch insert\n  ext::auth::WebhookConfig {\n    url := 'https://example.com/auth/webhook',\n    events := {\n      ext::auth::WebhookEvent.EmailVerificationRequested,\n      ext::auth::WebhookEvent.PasswordResetRequested,\n    },\n    # Optional, only needed if you want to verify the webhook request\n    signing_secret_key := '1234567890',\n  };\n```\n\n----------------------------------------\n\nTITLE: Updating Link Properties in EdgeQL\nDESCRIPTION: Demonstrates how to update an existing link property on a Person object. The family_members link is updated to change the @relationship property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Person\nfilter .name = \"Bob\"\nset {\n  family_members := (\n    select .family_members {\n      @relationship := \"step-sister\"\n    }\n    filter .name = \"Alice\"\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Provider in EdgeDB\nDESCRIPTION: Example of how to configure an OpenAI provider for use with AI features in EdgeDB.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current database\ninsert ext::ai::OpenAIProviderConfig {\n  secret := 'sk-....',\n};\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Objects with EdgeDB Query Builder in TypeScript\nDESCRIPTION: Demonstrates how to insert multiple objects at once using the EdgeDB query builder. It uses e.for and e.array_unpack to iterate over an array of input values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst movies = [\n  {\n    title: \"Doctor Strange 2\",\n    release_year: 2022,\n  },\n  {\n    title: \"The Avengers\",\n    release_year: 2012,\n  },\n];\nconst query = e.params(\n  {\n    movies: e.array(e.tuple({\n      title: e.str,\n      release_year: e.int64,\n    }))\n  },\n  (params) => e.for(\n    e.array_unpack(params.movies),\n    (movie) => e.insert(e.Movie, {\n      title: movie.title,\n      release_year: movie.release_year,\n    })\n  )\n);\n\nconst result = await query.run(client, { movies });\n// { id: string }[]\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Support to Bulk Import in TypeScript\nDESCRIPTION: Updates the bulk import function to use transactions for atomic operations, ensuring data consistency when importing decks and cards.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.transaction(async (tx) => {\n  const cardIds: string[] = [];\n  for (const card of deck.cards) {\n    const createdCard = await e\n      .insert(e.Card, {\n        front: card.front,\n        back: card.back,\n        order: card.order,\n      })\n      .run(tx);\n\n    cardIds.push(createdCard.id);\n  }\n\n  const cardIdsLiteral = e.literal(e.array(e.uuid), cardIds);\n\n  await e.insert(e.Deck, {\n    name: deck.name,\n    description: deck.description,\n    cards: e.select(e.Card, (c) => ({\n      filter: e.contains(cardIdsLiteral, c.id),\n    })),\n  }).run(tx);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Deck Properties with EdgeDB\nDESCRIPTION: Updates deck properties using EdgeDB's query system. Dynamically builds update sets based on provided fields and handles non-existent deck scenarios.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/fastapi.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsets = []\nparams = {\"id\": deck_id}\n\nif deck_update.name is not None:\n    sets.append(\"name := <str>$name\")\n    params[\"name\"] = deck_update.name\n\nif deck_update.description is not None:\n    sets.append(\"description := <optional str>$description\")\n    params[\"description\"] = deck_update.description\n\nif not sets:\n    return await get_deck(deck_id)\n\nupdated_deck = await client.query(f\"\"\"\n    with updated := (\n        update Deck\n        filter .id = <uuid>$id\n        set {{ {', '.join(sets)} }}\n    )\n    select updated { ** }\n\"\"\", **params)\n\nif not updated_deck:\n    raise HTTPException(status_code=404, detail=\"Deck not found\")\n\nreturn updated_deck\n```\n\n----------------------------------------\n\nTITLE: Using Custom Constraint Expressions in Gel SDL\nDESCRIPTION: This snippet shows how to use custom EdgeQL expressions as constraints. It demonstrates the use of the special '__subject__' keyword to reference the property value within the constraint expression.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype BlogPost {\n  title: str {\n    constraint expression on (\n      __subject__ = str_trim(__subject__)\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Constraint in EdgeDB\nDESCRIPTION: This snippet demonstrates how to create an abstract constraint named 'uppercase' that checks if a string value is in uppercase. It includes setting an annotation, defining the constraint logic, and specifying an error message.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate abstract constraint uppercase {\n  create annotation title := \"Upper case constraint\";\n\n  using (str_upper(__subject__) = __subject__);\n\n  set errmessage := \"{__subject__} is not in upper case\";\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in Gel SDL\nDESCRIPTION: Schema definition for the event management system, including User and Event types with their properties and constraints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  abstract type Auditable {\n    required created_at: datetime {\n      readonly := true;\n      default := datetime_current();\n    }\n  }\n\n  type User extending Auditable {\n    required name: str {\n      constraint exclusive;\n      constraint max_len_value(50);\n    };\n  }\n\n  type Event extending Auditable {\n    required name: str {\n      constraint exclusive;\n      constraint max_len_value(50);\n    }\n    address: str;\n    schedule: datetime;\n    link host: User;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using assert_exists() Function in EdgeQL\nDESCRIPTION: Demonstrates the assert_exists() function which checks that the input set contains at least one element, raising a CardinalityViolationError if the set is empty.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_exists((select User filter .name = \"Administrator\"))\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_exists((select User filter .name = \"Nonexistent\"))\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_exists(\n  (select User filter .name = \"Nonexistent\"),\n  message := \"no users!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Data Migration EdgeQL Script\nDESCRIPTION: Shows the generated migration script for adding a required body field with a default value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/migrations.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nCREATE MIGRATION m1pjiibv4sa4cao7txpgsbuw2erctmacyrj4qmn45ggapsaztmvxfa\n    ONTO m1nlvzbm7buwktkp4vu4shylq6zp2shruokbbssyeidqmmmfqz77yq\n{\n  ALTER TYPE default::Post {\n      CREATE REQUIRED PROPERTY body: std::str {\n          SET REQUIRED USING ('No content');\n      };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Data with EdgeQL\nDESCRIPTION: Demonstrates how to query nested data structures using EdgeQL, including ordering and shape selection with nested object relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Book {\n  title,\n  release_year,\n  author: {\n    name\n  }\n} order by .title;\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Gel Cloud instance using cURL with bearer token\nDESCRIPTION: Example cURL command showing how to query a Gel Cloud instance with bearer token authentication, submitting an EdgeQL query as a GET request parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/http.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G https://<cloud-instance-host>:<cloud-instance-port>/branch/main/edgeql \\\n   -H \"Authorization: Bearer <secret-key> \\\n   --data-urlencode \"query=select Person {*};\"\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple EdgeQL Commands\nDESCRIPTION: Example demonstrating how to execute multiple EdgeQL commands in a single transaction, including type creation and data insertion. Shows using the execute() method for DDL operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> client.execute('''\n...     CREATE TYPE MyType {\n...         CREATE PROPERTY a -> int64\n...     };\n...     FOR x IN {100, 200, 300}\n...     UNION INSERT MyType { a := x };\n... ''')\n```\n\n----------------------------------------\n\nTITLE: Updating API Route with Query Builder\nDESCRIPTION: TypeScript code showing how to update the Next.js API route to use the generated query builder instead of raw queries\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/post.ts\n\nimport type {NextApiRequest, NextApiResponse} from 'next';\nimport {createClient} from 'gel';\nimport e, {$infer} from '../../dbschema/edgeql-js';\n\nexport const client = createClient();\n\nconst selectPosts = e.select(e.BlogPost, () => ({\n  id: true,\n  title: true,\n  content: true,\n}));\n\nexport type Posts = $infer<typeof selectPosts>;\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const posts = await selectPosts.run(client);\n  res.status(200).json(posts);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AsyncIO Client in Python\nDESCRIPTION: Demonstrates how to create an async client instance using the gel package's create_async_client function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport gel\n\nclient = gel.create_async_client()\n```\n\n----------------------------------------\n\nTITLE: Processing Authentication Token Response in Node.js\nDESCRIPTION: Processes an authentication token response from an auth server. If the response is not OK, returns a 400 error. Otherwise, extracts the auth_token from the JSON response, sets it as an HTTP-only secure cookie, and returns a 204 status code.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/email_password.rst#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = await tokenResponse.text();\nres.status = 400;\nres.end(`Error from the auth server: ${text}`);\nreturn;\n}\nconst { auth_token } = await tokenResponse.json();\nres.writeHead(204, {\n  \"Set-Cookie\": `gel-auth-token=${auth_token}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n});\nres.end();\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Client for Non-Next.js Apps\nDESCRIPTION: TypeScript code to create a tRPC client for use in non-Next.js applications.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTRPCClient, httpBatchLink } from '@trpc/client';\nimport { AppRouter } from './routers/_app';\n\nconst trpc = createTRPCClient<AppRouter>({\n  links: [\n    httpBatchLink({\n      url: 'http://localhost:4000/trpc',\n    }),\n  ],\n});\n\nasync function fetchUsers() {\n  const users = await trpc.getUsers.query();\n  console.log(users);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbor with EdgeQL\nDESCRIPTION: Demonstrates finding the nearest vector to a query vector using Euclidean distance and ordering. Uses the limit clause to retrieve only the closest match.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ngel> select Item {*}\n.... order by ext::pgvector::euclidean_distance(\n....   .embedding, <v3>[3, 1, 2])\n.... empty last\n.... limit 1;\n{\n  default::Item {\n    id: f119d64e-0995-11ee-8804-ff8cd739d8b7,\n    embedding: [1.2, 3, 4.5],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Inferred Types in EdgeDB Query Builder\nDESCRIPTION: Examples of extracting the inferred TypeScript types from EdgeDB query builder expressions using the $infer type helper.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport e, { type $infer } from \"./dbschema/edgeql-js\";\n\nconst query = e.select(e.Movie, () => ({ id: true, title: true }));\ntype result = $infer<typeof query>;\n// { id: string; title: string }[]\n\nconst query = e.select(e.Movie, () => ({\n  filter_single: { id: \"00000000-0000-0000-0000-000000000000\" },\n  id: true,\n  title: true,\n```\n\n----------------------------------------\n\nTITLE: Selecting Linked Objects in EdgeQL and TypeScript\nDESCRIPTION: Shows how to select linked objects using nested shapes in both EdgeQL and TypeScript with the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  id,\n  title,\n  actors: {\n    name\n  }\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, () => ({\n  id: true,\n  title: true,\n  actors: {\n    name: true,\n  }\n}));\n\nconst result = await query.run(client);\n// {id: string; title: string, actors: {name: string}[]}[]\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in Query - EdgeQL & Multiple Languages\nDESCRIPTION: Example of querying User data filtered by global current_user_id variable, with implementations in multiple languages.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User {\n  id,\n  posts: { title, content }\n}\nfilter .id = global current_user_id;\n```\n\nLANGUAGE: python\nCODE:\n```\nawait client.with_globals({'user_id': user_id}).qeury('''\n  select User {\n    id,\n    posts: { title, content }\n  }\n  filter .id = global current_user_id;\n''')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.withGlobals({user_id}).qeury('''\n  select User {\n    id,\n    posts: { title, content }\n  }\n  filter .id = global current_user_id;\n''')\n```\n\n----------------------------------------\n\nTITLE: Full-text Search Integration with Unaccent\nDESCRIPTION: Demonstrates how to create a Post type with full-text search index using unaccent function for accent-insensitive searching.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_unaccent.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Post {\n    title: str;\n\n    index fts::index on ((\n        fts::with_options(\n            ext::pg_unaccent::unaccent(.title),\n            language := fts::Language.fra\n        ),\n    ));\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing GraphQL and EdgeQL Pagination Syntax\nDESCRIPTION: These snippets demonstrate various pagination techniques in GraphQL and their EdgeQL equivalents, including ordering and limiting results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Author(\n        order: {\n            name: {\n                dir: ASC\n            }\n        },\n        first: 10\n    ) {\n        name\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Author {\n        name,\n    }\norder by\n    Author.name asc\nlimit 10;\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Author(\n        order: {\n            name: {\n                dir: ASC\n            }\n        },\n        after: \"19\",\n        first: 10\n    ) {\n        name\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Author {\n        name,\n    }\norder by\n    Author.name asc\noffset 20 limit 10;\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Author(\n        order: {\n            name: {\n                dir: ASC\n            }\n        },\n        after: \"19\",\n        before: \"30\"\n    ) {\n        name\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Author {\n        name,\n    }\norder by\n    Author.name asc\noffset 20 limit 10;\n```\n\n----------------------------------------\n\nTITLE: Ordering and Pagination with EdgeDB Query Builder in TypeScript\nDESCRIPTION: Shows how to use ordering and pagination in EdgeDB queries using the special keys 'order_by', 'limit', and 'offset'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, (movie) => ({\n  id: true,\n  title: true,\n\n  order_by: movie.title,\n  limit: 10,\n  offset: 10\n}));\n\nconst result = await query.run(client);\n// { id: true; title: true }[]\n```\n\n----------------------------------------\n\nTITLE: Filtering Books by Title in GraphQL vs EdgeQL\nDESCRIPTION: Example showing how to filter Book objects by title in both GraphQL and EdgeQL, demonstrating the use of the filter argument with an equality condition.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Book(\n        filter: {\n            title: {\n                eq: \"Spam\"\n            }\n        }\n    ) {\n        title\n        synopsis\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Book {\n        title,\n        synopsis\n    }\nfilter\n    Book.title = 'Spam';\n```\n\n----------------------------------------\n\nTITLE: Backlinks Implementation\nDESCRIPTION: Demonstrates how to create backlinks between Person and Movie types to establish bidirectional relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;\n  multi actors: Person;\n}\n\ntype Person {\n  required name: str;\n  multi acted_in := .<actors[is Movie];\n}\n```\n\n----------------------------------------\n\nTITLE: FastAPI Main Application Setup\nDESCRIPTION: Configuration of the main FastAPI application with CORS middleware\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom app import users\n\nfast_api = FastAPI()\n\n# Set all CORS enabled origins.\nfast_api.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\nfast_api.include_router(users.router)\n```\n\n----------------------------------------\n\nTITLE: Nested Computed Fields in EdgeQL Select Query\nDESCRIPTION: Shows how to use computed fields in nested shapes, demonstrating scope changes within the query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Villain {\n  id,\n  name,\n  name_upper := str_upper(.name),\n  nemesis: {\n    secret_identity,\n    real_name_upper := str_upper(.secret_identity)\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Fields in EdgeQL Select Query\nDESCRIPTION: Demonstrates how to use polymorphic fields to fetch different properties conditional on the subtype of each object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person {\n  name,\n  [is Hero].secret_identity,\n  [is Villain].nemesis: {\n    name\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Alias in SDL\nDESCRIPTION: Demonstrates how to create a scalar alias for a set of digits in SDL. This alias can be used in queries to represent the set of digits from 0 to 9.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/aliases.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nalias digits := {0,1,2,3,4,5,6,7,8,9};\n```\n\n----------------------------------------\n\nTITLE: Basic Type Casting in EdgeQL\nDESCRIPTION: Examples of basic type casting operations converting between primitive types like integers, strings and arrays.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/types.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <str>10;\nselect <bigint>10;\nselect <array<str>>[1, 2, 3];\nselect <tuple<str, float64, bigint>>(1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Updating Deck Properties with EdgeDB\nDESCRIPTION: Updates a deck's name and description using EdgeDB. Takes form data, validates inputs, and performs a conditional update based on provided fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst nameSet = typeof name === \"string\" ? { name } : {};\nconst descriptionSet =\n  typeof description === \"string\" ? { description: description || null } : {};\n\nawait e\n  .update(e.Deck, (d) => ({\n    filter_single: e.op(d.id, \"=\", e.uuid(id)),\n    set: {\n      ...nameSet,\n      ...descriptionSet,\n    },\n  })).run(client);\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript function for user retrieval\nDESCRIPTION: The TypeScript code generated by the queries generator for the getUser EdgeQL query, including type definitions and the query function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/queries.rst#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Client } from \"gel\";\n\nexport type GetUserArgs = {\n  user_id: string;\n};\n\nexport type GetUserReturns = {\n  name: string;\n  email: string;\n} | null;\n\nexport async function getUser(\n  client: Client,\n  args: GetUserArgs\n): Promise<GetUserReturns> {\n  return await client.querySingle(\n    `select User { name, email } filter .id = <uuid>$user_id;`,\n    args\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Triggers for Person Type in EdgeDB SDL\nDESCRIPTION: Defines triggers on the Person type to automatically log insert, update, and delete actions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str;\n\n  trigger log_insert after insert for each do (\n    insert Log {\n      action := 'insert',\n      target_name := __new__.name\n    }\n  );\n\n  trigger log_update after update for each do (\n    insert Log {\n      action := 'update',\n      target_name := __new__.name,\n      change := __old__.name ++ '->' ++ __new__.name\n    }\n  );\n\n  trigger log_delete after delete for each do (\n    insert Log {\n      action := 'delete',\n      target_name := __old__.name\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebAuthn Registration in Node.js\nDESCRIPTION: This snippet handles the WebAuthn registration process. It receives registration data, forwards it to the Gel Auth extension, and manages the authentication token flow.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webauthn.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleAuthenticate = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const { challenge, verifier } = generatePKCE();\n    const { email, provider, assertion } = JSON.parse(body);\n    if (!email || !provider || !assertion) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'email', 'provider', and 'assertion' keys, but got: ${body}`,\n      );\n      return;\n    }\n\n    const authenticateUrl = new URL(\"webauthn/authenticate\", GEL_AUTH_BASE_URL);\n\n    const authenticateResponse = await fetch(authenticateUrl.href, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        provider,\n        email,\n        assertion,\n        challenge,\n      }),\n    });\n\n    if (!authenticateResponse.ok) {\n      const text = await authenticateResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    const authenticateData = await authenticateResponse.json();\n    if (\"code\" in authenticateData) {\n      const tokenUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n      tokenUrl.searchParams.set(\"code\", authenticateData.code);\n      const tokenResponse = await fetch(tokenUrl.href, {\n        method: \"get\",\n      });\n\n      if (!tokenResponse.ok) {\n        const text = await authenticateResponse.text();\n        res.status = 400;\n        res.end(`Error from the auth server: ${text}`);\n        return;\n      }\n\n      const { auth_token } = await tokenResponse.json();\n      res.writeHead(204, {\n        \"Set-Cookie\": `gel-auth-token=${auth_token}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n      });\n      res.end();\n    } else {\n      res.writeHead(400, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify({ error: \"Email must be verified before being able to authenticate.\" }));\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Generating PKCE codes for WebAuthn in NodeJS\nDESCRIPTION: Creates a cryptographically secure verifier and challenge pair for the PKCE (Proof Key for Code Exchange) flow to secure authentication tokens. The function generates a random verifier string and derives a challenge string by hashing the verifier with SHA256.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webauthn.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from \"node:http\";\nimport { URL } from \"node:url\";\nimport crypto from \"node:crypto\";\n\n/**\n * You can get this value by running `gel instance credentials`.\n * Value should be:\n * `${protocol}://${host}:${port}/branch/${branch}/ext/auth/\n */\nconst GEL_AUTH_BASE_URL = process.env.GEL_AUTH_BASE_URL;\nconst SERVER_PORT = 3000;\n\n/**\n * Generate a random Base64 url-encoded string, and derive a \"challenge\"\n * string from that string to use as proof that the request for a token\n * later is made from the same user agent that made the original request\n *\n * @returns {Object} The verifier and challenge strings\n */\nconst generatePKCE = () => {\n   const verifier = crypto.randomBytes(32).toString(\"base64url\");\n\n   const challenge = crypto\n      .createHash(\"sha256\")\n      .update(verifier)\n      .digest(\"base64url\");\n\n   return { verifier, challenge };\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Tuple Elements in EdgeQL\nDESCRIPTION: Examples demonstrating how to access elements of tuples using both numeric indices and element names (for named tuples). The examples show accessing the first element (index 0) of an unnamed tuple, accessing an element by name, and accessing an element by index in a named tuple.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/tuple.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select (1, 'Gel').0;\n{1}\n\ndb> select (number := 1, name := 'Gel').name;\n{\"Gel\"}\n\ndb> select (number := 1, name := 'Gel').1;\n{\"Gel\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Provider in EdgeDB\nDESCRIPTION: EdgeQL command to configure OpenAI API credentials for the AI extension.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/fastapi.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current database\n    insert ext::ai::OpenAIProviderConfig {\n        secret := 'sk-....',\n    };\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Limit as a Super Constraint in Gel SDL\nDESCRIPTION: This snippet demonstrates how to use access policies as 'super constraints'. It implements a policy that limits the number of blog posts a User can create to 500.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_13\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str { constraint exclusive; }\n  multi posts := .<author[is BlogPost]\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n\n  access policy author_has_full_access\n    allow all\n    using (global current_user ?= .author.id);\n  access policy max_posts_limit\n    deny insert\n    using (count(.author.posts) > 500);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Sign-Up with Magic Link Authentication\nDESCRIPTION: Handles user registration through Magic Link by collecting the user's email, generating PKCE values, and requesting Gel Auth to send a registration magic link to the user. Stores the PKCE verifier in an HttpOnly cookie for later verification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Handles sign up with email and password.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleSignUp = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const pkce = generatePKCE();\n    const { email, provider } = JSON.parse(body);\n    if (!email || !provider) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'email' and 'provider' keys, but got: ${body}`,\n      );\n      return;\n    }\n\n    const registerUrl = new URL(\"magic-link/register\", GEL_AUTH_BASE_URL);\n    const callbackUrl = new URL(\"auth/magic-link/callback\", \"http://localhost:${SERVER_PORT}\");\n    const registerResponse = await fetch(registerUrl.href, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        challenge: pkce.challenge,\n        email,\n        provider,\n        callback_url: callbackUrl.href,\n        // The following endpoint will be called if there is an error\n        // processing the magic link, such as expiration or malformed token,\n        // etc.\n        redirect_on_failure: `http://localhost:${SERVER_PORT}/auth_error.html`,\n      }),\n    });\n\n    if (!registerResponse.ok) {\n      const text = await registerResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    res.writeHead(204, {\n      \"Set-Cookie\": `gel-pkce-verifier=${pkce.verifier}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n    });\n    res.end();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema with SDL in Gel\nDESCRIPTION: Example of defining a basic schema using Gel's Schema Definition Language (SDL). Shows how to create two object types (Book and Person) with properties and a relationship between them.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type Book {\n    required title: str;\n    release_year: int16;\n    author: Person;\n  }\n  type Person {\n    required name: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gel Client with Globals in Python\nDESCRIPTION: Demonstrates how to create an async client, set global variables, and execute a query. This example shows the usage of the 'with_globals' method to set the current user ID for the query context.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient = gel.create_async_client()\nawait client.with_globals(\n    current_user_id=\"00000000-0000-0000-0000-000000000000\",\n).query_single(\n    \"select User { * } filter .id ?= global current_user_id;\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Visibility with Author-only Write Access in Gel SDL\nDESCRIPTION: This snippet demonstrates how to implement a policy where blog posts are publicly visible but only writable by the author. It introduces a 'published' flag for public visibility.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\nglobal current_user: uuid;\n\ntype User {\n  required email: str { constraint exclusive; }\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n  required published: bool { default := false };\n\n  access policy author_has_full_access\n    allow all\n    using (global current_user ?= .author.id);\n  access policy visible_if_published\n    allow select\n    using (.published);\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Character Data with Movie Relationships in TypeScript\nDESCRIPTION: This code demonstrates how to insert character data with movie relationships using EdgeDB's TypeScript query builder. It utilizes the `with` clause to handle movie data at the top level of the query, then iterates through character data to establish the many-to-many relationship.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n...\\n    return e.with(\\n      [movies],\\n      e.for(e.array_unpack(params.characters), (character) =>\\n        e.insert(e.Character, {\\n          name: character.name,\\n          portrayed_by: character.portrayed_by,\\n          movies: e.assert_distinct(\\n            e.select(movies, (movie) => ({\\n              filter: e.op(movie.title, \\\"in\\\", e.array_unpack(character.movies)),\\n            })),\\n          ),\\n        }),\\n      ),\\n    );\\n  },\\n);\\n...\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries with Gel Client in TypeScript\nDESCRIPTION: Shows how to execute SQL queries using the Gel client. The querySQL method returns results as an array of objects, while executeSQL is used for queries without results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await client.querySQL<{ result: number }>(`select 2 + 2 as result;`);\nconsole.log(result); // [{result: 4}]\n\nawait client.executeSQL(`insert into \"Movie\" (name) values (\"Iron Man\")`); // void\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Indexes in SDL\nDESCRIPTION: Shows how to define IVFFlat indexes on vector fields to accelerate similarity searches. Each index optimizes a different distance calculation method (Euclidean, inner product, cosine).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\ntype Item {\n    embedding: v3;\n\n  index ext::pgvector::ivfflat_euclidean(lists := 10) on (.embedding);\n  index ext::pgvector::ivfflat_ip(lists := 10) on (.embedding);\n  index ext::pgvector::ivfflat_cosine(lists := 10) on (.embedding);\n}\n```\n\n----------------------------------------\n\nTITLE: RAGRequest Class Definition in Python\nDESCRIPTION: A data class that defines requests to text generation models, containing model name, prompt, context, query string, and streaming preferences. Includes a to_httpx_request() method for HTTP request conversion.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/python.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass RAGRequest:\n    \"\"\"\n    A data class defining a request to a text generation model.\n    \n    :ivar model: The name of the AI model to query.\n    :ivar prompt: An optional Prompt associated with the request.\n    :ivar context: The QueryContext defining the query context.\n    :ivar query: The specific query string to be sent to the model.\n    :ivar stream: A boolean indicating whether the response should be streamed (True) or returned in a single response (False).\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Full Prompt for OpenAI Chat Completion in TypeScript\nDESCRIPTION: This function combines the user's query, retrieved context, and a system message to create a full prompt for the OpenAI chat completion API. It uses template literals for formatting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createFullPrompt(query: string, context: string) {\n    const systemMessage = `\n        As an enthusiastic Gel expert keen to assist,\n        respond to questions referencing the given Gel\n        sections.\n\n        If unable to help based on documentation, respond\n        with: \"Sorry, I don't know how to help with that.\"`;\n\n    return stripIndents`\n        ${oneLineTrim`${systemMessage}`}\n\n        Gel sections: \"\"\"\n        ${context}\n        \"\"\"\n\n        Question: \"\"\"\n        ${query}\n        \"\"\"`;\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Database Migration in EdgeQL\nDESCRIPTION: Example of how to commit a migration to apply changes to the database schema. This must be executed within a migration block.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ncommit migration;\n```\n\n----------------------------------------\n\nTITLE: Using With Blocks for Complex Updates in EdgeQL\nDESCRIPTION: Shows how to use a with block to update the results of a complex query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nwith people := (\n    select Person\n    order by .name\n    offset 3\n    limit 3\n  )\nupdate people\nset { name := str_trim(.name) };\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Mutation Rewrite in SDL\nDESCRIPTION: This snippet shows how to define a mutation rewrite that updates a 'modified' property on both insert and update operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/mutation_rewrites.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Post {\n  required title: str;\n  required body: str;\n  modified: datetime {\n    rewrite insert, update using (datetime_of_statement())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth UI Routes in NodeJS HTTP Server\nDESCRIPTION: Implements the HTTP server routes for handling sign-in and sign-up requests. This code creates server endpoints that generate PKCE values, store verifiers in secure cookies, and redirect users to the appropriate Gel Auth UI pages with challenge parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/built_in_ui.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * In Node, the `req.url` is only the `pathname` portion of a URL. In\n * order to generate a full URL, we need to build the protocol and host\n * from other parts of the request.\n *\n * One reason we like to use `URL` objects here is to easily parse the\n * `URLSearchParams` from the request, and rather than do more error\n * prone string manipulation, we build a `URL`.\n *\n * @param {Request} req\n * @returns {URL}\n */\nconst getRequestUrl = (req) => {\n   const protocol = req.connection.encrypted ? \"https\" : \"http\";\n   return new URL(req.url, `${protocol}://${req.headers.host}`);\n};\n\nconst server = http.createServer(async (req, res) => {\n   const requestUrl = getRequestUrl(req);\n\n   switch (requestUrl.pathname) {\n      case \"/auth/ui/signin\": {\n         await handleUiSignIn(req, res);\n         break;\n      }\n\n      case \"/auth/ui/signup\": {\n         await handleUiSignUp(req, res);\n         break;\n      }\n\n      case \"/auth/callback\": {\n         await handleCallback(req, res);\n         break;\n      }\n\n      default: {\n         res.writeHead(404);\n         res.end(\"Not found\");\n         break;\n      }\n   }\n});\n\n/**\n * Redirects browser requests to Gel Auth UI sign in page with the\n * PKCE challenge, and saves PKCE verifier in an HttpOnly cookie.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleUiSignIn = async (req, res) => {\n   const { verifier, challenge } = generatePKCE();\n\n   const redirectUrl = new URL(\"ui/signin\", GEL_AUTH_BASE_URL);\n   redirectUrl.searchParams.set(\"challenge\", challenge);\n\n   res.writeHead(301, {\n      \"Set-Cookie\": `gel-pkce-verifier=${verifier}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n      Location: redirectUrl.href,\n   });\n   res.end();\n};\n\n/**\n * Redirects browser requests to Gel Auth UI sign up page with the\n * PKCE challenge, and saves PKCE verifier in an HttpOnly cookie.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleUiSignUp = async (req, res) => {\n   const { verifier, challenge } = generatePKCE();\n\n   const redirectUrl = new URL(\"ui/signup\", GEL_AUTH_BASE_URL);\n   redirectUrl.searchParams.set(\"challenge\", challenge);\n\n   res.writeHead(301, {\n      \"Set-Cookie\": `gel-pkce-verifier=${verifier}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n      Location: redirectUrl.href,\n   });\n   res.end();\n};\n\nserver.listen(SERVER_PORT, () => {\n   console.log(`HTTP server listening on port ${SERVER_PORT}...`);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining tRPC Router with Gel Integration\nDESCRIPTION: TypeScript code defining a tRPC router with a query that interacts with Gel database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initTRPC } from '@trpc/server';\nimport gelClient from './gel';\n\nconst t = initTRPC.create();\n\nexport const appRouter = t.router({\n  getUsers: t.procedure.query(async () => {\n    const users = await gelClient.query('SELECT User { name, email }');\n    return users;\n  }),\n});\n\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated tRPC Procedure\nDESCRIPTION: Example of a tRPC procedure that uses the authenticated session to verify the user is signed in before fetching user data from Gel using the authenticated client in the context.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appRouter = t.router({\n  getUserData: t.procedure.query(async ({ ctx }) => {\n    if (!(await ctx.session.isSignedIn())) {\n      throw new Error(\"Not authenticated\");\n    }\n    // Fetch data from Gel using the authenticated client\n    const userData = await ctx.session.client.query(`\n      select User { name, email }\n    `);\n\n    return userData;\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Link Definition\nDESCRIPTION: Demonstrates how to create links between object types, connecting Movie and Person objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;\n  director: Person;\n}\n\ntype Person {\n  required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Webhooks\nDESCRIPTION: Sets up webhook configuration for authentication events like email verification and password reset.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH INSERT ext::auth::WebhookConfig {\n    url := 'https://example.com/auth/webhook',\n    events := {\n        ext::auth::WebhookEvent.EmailVerificationRequested,\n        ext::auth::WebhookEvent.PasswordResetRequested,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Link Properties\nDESCRIPTION: Example of updating a link property between existing objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Person\nfilter .name = \"Bob\"\nset {\n  friends += (\n    select .friends {\n      @strength := 3.7\n    }\n    filter .name = \"Alice\"\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Bulk Insert with Conflict Handling in EdgeDB TypeScript\nDESCRIPTION: A complex example showing how to handle conflicts when inserting nested data structures with duplicate movie titles across characters, using distinct and unlessConflict.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.params(\n  {\n    characters: e.array(\n      e.tuple({\n        portrayed_by: e.str,\n        name: e.str,\n        movies: e.array(e.str),\n      }),\n    ),\n  },\n  (params) => {\n    const movies = e.for(\n      e.op(\n        \"distinct\",\n        e.array_unpack(e.array_unpack(params.characters).movies),\n      ),\n      (movieTitle) =>\n        e.insert(e.Movie, { title: movieTitle }).unlessConflict((movie) => ({\n          on: movie.title,\n          else: movie,\n        })),\n    );\n    return e.with(\n      [movies],\n      e.for(e.array_unpack(params.characters), (character) =>\n        e.insert(e.Character, {\n          name: character.name,\n          portrayed_by: character.portrayed_by,\n          movies: e.assert_distinct(\n            e.select(movies, (movie) => ({\n              filter: e.op(movie.title, \"in\", e.array_unpack(character.movies)),\n            })),\n          ),\n        }),\n      ),\n    );\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Building Gel and Installing Dependencies\nDESCRIPTION: Commands to build Gel and install development dependencies in the virtual environment\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/code.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cd gel\n$ pip install -v -e \".[test]\"\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized Queries in EdgeDB with TypeScript\nDESCRIPTION: Shows how to execute a parameterized query by passing the parameter data as the second argument to the run method. The parameter types are fully enforced.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait helloQuery.run(client, { name: \"Harry Styles\" })\n// => \"Yer a wizard, Harry Styles\"\n\nawait helloQuery.run(client, { name: 16 })\n// => TypeError: number is not assignable to string\n```\n\n----------------------------------------\n\nTITLE: Array Parameter Unpacking\nDESCRIPTION: Shows how to unpack array parameters into sets for multi links or properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/parameters.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nwith friends := (\n  select User filter .id in array_unpack(<array<uuid>>$friend_ids)\n)\ninsert User {\n  name := <str>$name,\n  friends := friends,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic FTS Index in SDL\nDESCRIPTION: Demonstrates how to create a basic full-text search index on an Item type with English language specification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/fts.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Item {\n  required available: bool {\n    default := false;\n  };\n  required name: str;\n  description: str;\n\n  index fts::index on (\n    fts::with_options(\n      .name,\n      language := fts::Language.eng\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Client and Auth for Next.js\nDESCRIPTION: TypeScript code to initialize Gel client and Gel Auth for Next.js application.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\nimport createAuth from \"@gel/auth-nextjs/app\";\n\n// Initialize Gel client\nexport const gelClient = createClient();\n\n// Initialize Gel Auth\nexport const auth = createAuth(gelClient, {\n  baseUrl: process.env.VERCEL_ENV === \"production\"\n    ? \"https://production.yourapp.com\"\n    : \"http://localhost:3000\",\n});\n```\n\n----------------------------------------\n\nTITLE: User Creation with Optional DateTime\nDESCRIPTION: Defines a modifying function for user creation with an optional join date parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nfunction add_user(name: str, joined_at: optional datetime) -> User\n  using (\n    insert User {\n      name := name,\n      joined_at := joined_at ?? std::datetime_current(),\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Command to create the app directory and initialize an empty Python package\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir app && touch app/__init__.py\n```\n\n----------------------------------------\n\nTITLE: Querying Auth Providers Configuration with EdgeQL\nDESCRIPTION: This EdgeQL query retrieves the configuration of authentication providers from the database, including their names and display names for OAuth providers, which can be used to dynamically build a UI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect cfg::Config.extensions[is ext::auth::AuthConfig].providers {\n    name,\n    [is ext::auth::OAuthProviderConfig].display_name,\n};\n```\n\n----------------------------------------\n\nTITLE: Counting User Reviews in EdgeQL\nDESCRIPTION: Shows how to select user names along with their review count.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    User.name,\n    count(User.<author[is Review])\n)\n```\n\n----------------------------------------\n\nTITLE: Ordering and Pagination in EdgeQL TypeScript\nDESCRIPTION: Demonstrates ordering results with multiple criteria and adding pagination with offset and limit.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, (movie) => ({\n  title: true,\n  order_by: [\n    {\n      expression: movie.title,\n      direction: e.DESC,\n    },\n    {\n      expression: e.count(movie.actors),\n      direction: e.ASC,\n      empty: e.EMPTY_LAST,\n    },\n  ],\n  offset: 50,\n  limit: e.int64(10),\n}));\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction in TypeScript/JS with Query Builder\nDESCRIPTION: This snippet shows how to use the query builder in TypeScript/JS to construct and execute a transaction for updating bank customer balances.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/transactions.rst#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst query1 = e.update(e.BankCustomer, () => ({\n  filter_single: { name: \"Customer1\" },\n  set: {\n    bank_balance: { \"-=\":  10 }\n  },\n}));\nconst query2 = e.update(e.BankCustomer, () => ({\n  filter_single: { name: \"Customer2\" },\n  set: {\n    bank_balance: { \"+=\":  10 }\n  },\n}));\n\nclient.transaction(async (tx) => {\n  await query1.run(tx);\n  await query2.run(tx);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Migrations using Gel CLI\nDESCRIPTION: Example of using Gel CLI commands to create and apply a migration. The 'gel migration create' command generates a new migration file, while 'gel migrate' applies the migration to the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\nCreated dbschema/migrations/00001.edgeql\n\n$ gel migrate\nApplied dbschema/migrations/00001.edgeql\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation Endpoint in FastAPI\nDESCRIPTION: A FastAPI endpoint that handles POST requests to '/users' for creating new users. It uses the create_user_query to interact with EdgeDB and handles constraint violations when a username already exists.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom gel import ConstraintViolationError\nfrom .queries.create_user_async_edgeql import (\n    create_user as create_user_query,\n    CreateUserResult,\n)\n\n@app.post(\"/users\", status_code=HTTPStatus.CREATED)\nasync def post_user(username: str = Query()) -> CreateUserResult:\n    try:\n        return await create_user_query(gel_client, username=username)\n    except ConstraintViolationError:\n        raise HTTPException(\n            status_code=HTTPStatus.BAD_REQUEST,\n            detail={\"error\": f\"Username '{username}' already exists.\"},\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Friend-only Visibility with Author-only Modification in Gel SDL\nDESCRIPTION: This snippet shows how to implement a policy where blog posts are visible to friends and only modifiable by the author. It introduces a 'friends' relationship in the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_10\n\nLANGUAGE: sdl\nCODE:\n```\nglobal current_user: uuid;\n\ntype User {\n  required email: str { constraint exclusive; }\n  multi friends: User;\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n\n  access policy author_has_full_access\n    allow all\n    using (global current_user ?= .author.id);\n  access policy friends_can_read\n    allow select\n    using ((global current_user in .author.friends.id) ?? false);\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Query in a Transaction with EdgeDB in TypeScript\nDESCRIPTION: Shows how to execute a query within a transaction using the EdgeDB client. This ensures atomicity of operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.insert(e.Movie, {\n  title: 'Doctor Strange 2',\n  release_year: 2022\n});\n\nawait client.transaction(async (tx) => {\n  const result = await query.run(tx);\n  // { id: string }\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Book with Nested Author Creation\nDESCRIPTION: Demonstrates inserting a new book while simultaneously creating and linking a new author\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/mutations.rst#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_books {\n    insert_Book(\n        data: [{\n            title: \"Three\",\n            author: {\n                data: {\n                    name: \"Unknown\"\n                }\n            }\n        }]\n    ) {\n        id\n        title\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    insert Book {\n        title := \"Three\",\n        author := (\n            insert Author {\n                name := \"Unknown\"\n            }\n        )\n   }\n) {\n    id,\n    title\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing GraphQL and EdgeQL Ordering Syntax\nDESCRIPTION: This snippet demonstrates how to order query results in both GraphQL and EdgeQL, including handling of null values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Author(\n        order: {\n            name: {\n                dir: ASC,\n                nulls: BIGGEST\n            }\n        }\n    ) {\n        name\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Author {\n        name,\n    }\norder by\n    Author.name asc\n        empty last;\n```\n\n----------------------------------------\n\nTITLE: Comparing Book Query in GraphQL and EdgeQL\nDESCRIPTION: A comparison showing how to query Book objects with their title, synopsis, and author information in both GraphQL and EdgeQL syntax.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Book {\n        title\n        synopsis\n        author {\n            name\n        }\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Book {\n        title,\n        synopsis,\n        author: {\n            name\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Query with Timestamp Sorting\nDESCRIPTION: Modified TypeScript query to fetch decks sorted by updated_at timestamp in descending order, including card relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/inheritance/nextjs.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getDecks() {\n  const decks = await e.select(e.Deck, (deck) => ({\n    id: true,\n    name: true,\n    description: true,\n    cards: e.select(deck.cards, (card) => ({\n      id: true,\n      front: true,\n      back: true,\n      order_by: card.order,\n    })),\n    order_by: {\n      expression: deck.updated_at,\n      direction: e.DESC,\n    },\n  })).run(client);\n\n  return decks;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Movie Reviews\nDESCRIPTION: Retrieves a movie's details along with its three most recent reviews, including review author information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    MovieAlias(\n        filter: {\n            title: {eq: \"Dune\"},\n            year: {eq: 2020}\n        }\n    ) {\n        id\n        title\n        year\n        description\n        reviews(\n            order: {creation_time: {dir: DESC}},\n            first: 3\n        ) {\n            id\n            body\n            rating\n            creation_time\n            author {\n                id\n                name\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Gel Queries Generator in TypeScript\nDESCRIPTION: Demonstrates how to use the queries generator to create TypeScript functions for EdgeQL queries defined in separate files.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/index.rst#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\nimport { getMovies } from \"./get-movies.query\";\n\nconst client = createClient();\n\nconst result = await getMovies(client);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction in Go\nDESCRIPTION: This snippet shows how to execute a transaction in Go to update bank customer balances using EdgeQL query strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/transactions.rst#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nerr = client.Tx(ctx, func(ctx context.Context, tx *gel.Tx) error {\n\tquery1 := `update BankCustomer\n\t\tfilter .name = 'Customer1'\n\t\tset { bank_balance := .bank_balance -10 };`\n\tif e := tx.Execute(ctx, query1); e != nil {\n\t\treturn e\n\t}\n\tquery2 := `update BankCustomer\n\t\tfilter .name = 'Customer2'\n\t\tset { bank_balance := .bank_balance +10 };`\n\tif e := tx.Execute(ctx, query2); e != nil {\n\t\treturn e\n\t}\n\treturn nil\n})\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for New User Registration in Callback Handler\nDESCRIPTION: This JavaScript code snippet shows how to extend the callback handler to create a new User object when the callback indicates a new user signup through the isSignUp parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  const { auth_token } = await codeExchangeResponse.json();\n\nconst isSignUp = requestUrl.searchParams.get(\"isSignUp\");\nif (isSignUp === \"true\") {\n  const authedClient = client.withGlobals({\n```\n\n----------------------------------------\n\nTITLE: Creating a Superuser Role in EdgeDB\nDESCRIPTION: This snippet demonstrates how to create a new superuser role named 'alice' with a password. It uses the 'create role' command with the 'superuser' qualifier and 'set password' subcommand.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/roles.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate role alice {\n    set password := 'wonderland';\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Error Messages to Access Policies in Gel SDL\nDESCRIPTION: This snippet shows how to add custom error messages to access policies in Gel SDL. It modifies the previous example to include specific error messages for policy violations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\nglobal current_user_id: uuid;\nglobal current_user := (\n  select User filter .id = global current_user_id\n);\n\ntype User {\n  required email: str { constraint exclusive; };\n  required is_admin: bool { default := false };\n\n  access policy admin_only\n    allow all\n    using (global current_user.is_admin ?? false) {\n      errmessage := 'Only admins may query Users'\n    };\n}\n\ntype BlogPost {\n  required title: str;\n  author: User;\n\n  access policy author_has_full_access\n    allow all\n    using (global current_user ?= .author) {\n      errmessage := 'BlogPosts may only be queried by their authors'\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Password Reset Implementation - JavaScript\nDESCRIPTION: Implementation of password reset flow including email sending, UI rendering, and password update functionality with PKCE verification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/email_password.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleSendPasswordResetEmail = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const { email } = JSON.parse(body);\n    const reset_url = `http://localhost:${SERVER_PORT}/auth/ui/reset-password`;\n    const provider = \"builtin::local_emailpassword\";\n    const pkce = generatePKCE();\n\n    const sendResetUrl = new URL(\"send-reset-email\", GEL_AUTH_BASE_URL);\n    const sendResetResponse = await fetch(sendResetUrl.href, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email,\n        provider,\n        reset_url,\n        challenge: pkce.challenge,\n      }),\n    });\n\n    if (!sendResetResponse.ok) {\n      const text = await sendResetResponse.text();\n      res.status = 400;\n      res.end(`Error from auth server: ${text}`);\n      return;\n    }\n\n    const { email_sent } = await sendResetResponse.json();\n\n    res.writeHead(200, {\n      \"Set-Cookie\": `gel-pkce-verifier=${pkce.verifier}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n    });\n    res.end(`Reset email sent to '${email_sent}'`);\n  });\n};\n\nconst handleUiResetPassword = async (req, res) => {\n  const url = new URL(req.url);\n  const reset_token = url.searchParams.get(\"reset_token\");\n  res.writeHead(200, { \"Content-Type\": \"text/html\" });\n  res.end(`\n    <html>\n      <body>\n        <form method=\\\"POST\\\" action=\\\"http://localhost:${SERVER_PORT}/auth/reset-password\\\">\n          <input type=\\\"hidden\\\" name=\\\"reset_token\\\" value=\\\"${reset_token}\\\">\n          <label>\n            New password:\n            <input type=\\\"password\\\" name=\\\"password\\\" required>\n          </label>\n          <button type=\\\"submit\\\">Reset Password</button>\n        </form>\n      </body>\n    </html>\n  `);\n};\n\nconst handleResetPassword = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const { reset_token, password } = JSON.parse(body);\n    if (!reset_token || !password) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'reset_token' and 'password' keys, but got: ${body}`\n      );\n      return;\n    }\n    const provider = \"builtin::local_emailpassword\";\n    const cookies = req.headers.cookie.split(\"; \");\n    const verifier = cookies\n      .find((cookie) => cookie.startsWith(\"gel-pkce-verifier=\"))\n      .split(\"=\")[1];\n    if (!verifier) {\n      res.status = 400;\n      res.end(\n        `Could not find 'verifier' in the cookie store. Is this the same user agent/browser that started the authorization flow?`\n      );\n      return;\n    }\n    const resetUrl = new URL(\"reset-password\", GEL_AUTH_BASE_URL);\n    const resetResponse = await fetch(resetUrl.href, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        reset_token,\n        provider,\n        password,\n      }),\n    });\n    if (!resetResponse.ok) {\n      const text = await resetResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n    const { code } = await resetResponse.json();\n    const tokenUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n    tokenUrl.searchParams.set(\"code\", code);\n    tokenUrl.searchParams.set(\"verifier\", verifier);\n    const tokenResponse = await fetch(tokenUrl.href, {\n      method: \"get\",\n    });\n    if (!tokenResponse.ok) {\n\n```\n\n----------------------------------------\n\nTITLE: Setting up PKCE Authentication Flow with NodeJS\nDESCRIPTION: Initializes a NodeJS HTTP server implementation that generates PKCE (Proof Key of Code Exchange) verification and challenge strings for secure authentication. This code creates the foundation for a secure authentication flow by generating random verifier strings and their corresponding SHA-256 hashed challenges.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/built_in_ui.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from \"node:http\";\nimport { URL } from \"node:url\";\nimport crypto from \"node:crypto\";\n\n/**\n * You can get this value by running `gel instance credentials`.\n * Value should be:\n * `${protocol}://${host}:${port}/branch/${branch}/ext/auth/\n */\nconst GEL_AUTH_BASE_URL = process.env.GEL_AUTH_BASE_URL;\nconst SERVER_PORT = 3000;\n\n/**\n * Generate a random Base64 url-encoded string, and derive a \"challenge\"\n * string from that string to use as proof that the request for a token\n * later is made from the same user agent that made the original request\n *\n * @returns {Object} The verifier and challenge strings\n */\nconst generatePKCE = () => {\n   const verifier = crypto.randomBytes(32).toString(\"base64url\");\n\n   const challenge = crypto\n      .createHash(\"sha256\")\n      .update(verifier)\n      .digest(\"base64url\");\n\n   return { verifier, challenge };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Enum-like Type with One_of Constraint in EdgeDB SDL\nDESCRIPTION: Illustrates the use of 'one_of' constraint to create an enum-like scalar type 'Status' with predefined allowed values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Status extending str {\n    constraint one_of ('Open', 'Closed', 'Merged');\n}\n```\n\n----------------------------------------\n\nTITLE: Data Migration Queries in EdgeDB\nDESCRIPTION: Demonstrates how to perform data operations (insert and delete) in an EdgeDB migration file. Shows operations on a User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nCREATE MIGRATION m1xseswmheqzxutr55cu66ko4oracannpddujg7gkna2zsjpqm2g3a\n    ONTO m1n5lfw7n74626cverbjwdhcafnhmbezjhwec2rbt46gh3ztoo7mqa\n{\n    insert User { name := 'User 1'};\n    insert User { name := 'User 2'};\n    delete User filter .name = 'User 2';\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS centroid function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_centroid function, which calculates the geometric center of a geography object. Takes a geography object and an optional use_spheroid parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_31\n\nLANGUAGE: eql\nCODE:\n```\na0: ext::postgis::geography, \\\nuse_spheroid: std::bool = true, \\\n) ->  ext::postgis::geography\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Token Retrieval Callback\nDESCRIPTION: Creates a callback handler that exchanges authorization codes for auth tokens using PKCE verification. This function retrieves the code from the URL parameters and the verifier from cookies, validates them, exchanges them for an auth token with the Gel Auth server, and stores the token in a secure cookie.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/built_in_ui.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Handles the PKCE callback and exchanges the `code` and `verifier\n * for an auth_token, setting the auth_token as an HttpOnly cookie.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleCallback = async (req, res) => {\n   const requestUrl = getRequestUrl(req);\n\n   const code = requestUrl.searchParams.get(\"code\");\n   if (!code) {\n      const error = requestUrl.searchParams.get(\"error\");\n      res.status = 400;\n      res.end(\n         `OAuth callback is missing 'code'. \\\nOAuth provider responded with error: ${error}`,\n      );\n      return;\n   }\n\n   const cookies = req.headers.cookie?.split(\"; \");\n   const verifier = cookies\n      ?.find((cookie) => cookie.startsWith(\"gel-pkce-verifier=\"))\n      ?.split(\"=\")[1];\n   if (!verifier) {\n      res.status = 400;\n      res.end(\n         `Could not find 'verifier' in the cookie store. Is this the \\\nsame user agent/browser that started the authorization flow?`,\n      );\n      return;\n   }\n\n   const codeExchangeUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n   codeExchangeUrl.searchParams.set(\"code\", code);\n   codeExchangeUrl.searchParams.set(\"verifier\", verifier);\n   const codeExchangeResponse = await fetch(codeExchangeUrl.href, {\n      method: \"GET\",\n   });\n\n   if (!codeExchangeResponse.ok) {\n      const text = await codeExchangeResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n   }\n\n   const { auth_token } = await codeExchangeResponse.json();\n   res.writeHead(204, {\n      \"Set-Cookie\": `gel-auth-token=${auth_token}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n   });\n   res.end();\n};\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Links\nDESCRIPTION: Demonstrates how to create polymorphic links using abstract types and inheritance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_14\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Content {\n  required title: str;\n}\n\ntype Movie extending Content {\n  required release_year: int64;\n}\n\ntype TVShow extending Content {\n  required num_seasons: int64;\n}\n\ntype Franchise {\n  required name: str;\n  multi entries: Content;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Computed Property in EdgeDB SDL\nDESCRIPTION: Demonstrates defining a computed property that converts a Person's name to uppercase using the str_upper function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/computeds.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  name: str;\n  all_caps_name := str_upper(__source__.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shapes to Select Multiple Properties in Gel TypeScript\nDESCRIPTION: Demonstrates how to use shapes to specify which properties to include in query results, corresponding to EdgeQL's shape syntax, with proper type inference.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, () => ({\n  id: true,\n  title: true,\n  release_year: true,\n}));\n/*\n  EdgeQL:\n  select Movie {\n    id,\n    title,\n    release_year\n  }\n*/\n/*\n  Inferred type:\n  {\n    id: string;\n    title: string;\n    release_year: number | null;\n  }[]\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Gel Client Instance\nDESCRIPTION: TypeScript code to create and export a Gel client instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'gel';\n\nconst gelClient = createClient();\nexport default gelClient;\n```\n\n----------------------------------------\n\nTITLE: FastAPI Integration with Gel\nDESCRIPTION: Example of integrating Gel with FastAPI for building a web API server with connection pooling\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport gel\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    \"\"\"Initialize the database client on startup.\"\"\"\n    app.state.client = gel.create_async_client()\n    # Optional: explicitly start up the connection pool\n    await app.state.client.ensure_connected()\n\n@app.get(\"/users\")\nasync def handle(\n  name: str = Query(None)\n):\n    \"\"\"Handle incoming requests.\"\"\"\n    client = app.state.client\n\n    # Execute the query on any pool connection\n    if name:\n      result = await client.query_single(\n          '''\n              SELECT User {first_name, email, bio}\n              FILTER .name = <str>$username\n          ''', username=name)\n    else:\n      result = await client.query(\n          '''\n              SELECT User {first_name, email, bio}\n          ''')\n    return result\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Link Cardinality Examples\nDESCRIPTION: Shows different link cardinality options including optional, required, multi, and required multi relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;\n\n  cinematographer: Person;             # zero or one\n  required director: Person;           # exactly one\n  multi writers: Person;               # zero or more\n  required multi actors: Person;       # one or more\n}\n\ntype Person {\n  required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Intersections in EdgeDB Query Builder\nDESCRIPTION: Example of using type intersections to narrow the type of a set of objects in the EdgeDB query builder.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ne.Person.acted_in.is(e.TVShow);\n// Person.acted_in[is TVShow]\n```\n\n----------------------------------------\n\nTITLE: Modifying Link Deletion Policy in SDL\nDESCRIPTION: Shows how to update the schema definition to allow deletion of linked objects without constraint violations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/delete.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str { constraint exclusive };\n  required release_year: int64;\n  multi characters: Person {\n    on target delete allow;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebAuthn registration in NodeJS\nDESCRIPTION: This function processes credential registration requests by parsing the request body for necessary WebAuthn registration data. It generates new PKCE values and forwards the credential payload to the Gel Auth extension for verification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webauthn.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleRegister = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const { challenge, verifier } = generatePKCE();\n    const { email, provider, credentials, verify_url, user_handle } = JSON.parse(body);\n    if (!email || !provider || !credentials || !verify_url || !user_handle) {\n      res.status = 400;\n      res.end(\n\n```\n\n----------------------------------------\n\nTITLE: Inserting User with Auth Token\nDESCRIPTION: Creates a new user record using an authentication token and sets up secure cookie headers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait authedClient.query(`\n  insert User {\n    identity := (global ext::auth::ClientTokenIdentity)\n  };\n`);\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Deck by ID with EdgeDB in TypeScript\nDESCRIPTION: This snippet demonstrates the modification of the getDeck function to use EdgeDB for fetching a single deck by its ID. It replaces the previous implementation that used a JSON file and array filtering.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"@/lib/gel\";\nimport e from \"@/dbschema/edgeql-js\";\n\nexport async function getDeck({ id }: { id: string }) {\n  return await e\n    .select(e.Deck, (deck) => ({\n      filter_single: e.op(deck.id, \"=\", e.uuid(id)),\n      id: true,\n      name: true,\n      description: true,\n      cards: e.select(deck.cards, (card) => ({\n        id: true,\n        front: true,\n        back: true,\n        order_by: card.order,\n      })),\n    }))\n    .run(client);\n}\n```\n\n----------------------------------------\n\nTITLE: Index Definitions\nDESCRIPTION: Shows various ways to define indexes including simple, composite, and computed indexes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_11\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;\n  required release_year: int64;\n\n  index on (.title);                        # simple index\n  index on ((.title, .release_year));       # composite index\n  index on (str_trim(str_lower(.title)));   # computed index\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pre-computed Vectors to Vectorstore in Python\nDESCRIPTION: Method to add pre-computed vector embeddings to the store. It's used when embeddings have already been generated and need to be stored directly without re-computing.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef add_vectors(self, records: list[InsertRecord]) -> list[uuid.UUID]:\n    # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Backlink Query Example\nDESCRIPTION: Shows how to traverse links in reverse using EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Author {\n  articles := .<authors[is Article]\n}\nfilter .name = \"John Doe\";\n```\n\n----------------------------------------\n\nTITLE: Introspecting Custom User Type in EdgeQL\nDESCRIPTION: This query performs a detailed introspection of the custom 'User' type, retrieving information about its name, abstract status, bases, ancestors, annotations, links, properties, constraints, and indexes. It demonstrates advanced introspection techniques in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/objects.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    abstract,\n    bases: { name },\n    ancestors: { name },\n    annotations: { name, @value },\n    links: {\n        name,\n        cardinality,\n        required,\n        target: { name },\n    },\n    properties: {\n        name,\n        cardinality,\n        required,\n        target: { name },\n    },\n    constraints: { name },\n    indexes: { expr },\n}\nfilter .name = 'default::User';\n```\n\n----------------------------------------\n\nTITLE: Defining User Type in SDL (3.0+)\nDESCRIPTION: Example of defining a User type in EdgeDB SDL for version 3.0 and later, using simplified syntax.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str;\n  multi friends: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gel CLI with Environment Variables - Bash\nDESCRIPTION: Shows how to run the Gel CLI without flags when connection parameters are specified through environment variables.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gel  # no flags needed\nGel x.x\nType \\help for help, \\quit to quit.\ngel>\n```\n\n----------------------------------------\n\nTITLE: Group Analytics with Aggregates in EdgeQL\nDESCRIPTION: Combines grouping with aggregate functions to calculate movie counts and average word count in titles.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/group.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  M := (select Movie filter .release_year > 2015),\n  groups := (\n    group M {title}\n    using\n      decade := .release_year // 10 - 200,\n      has_colon := .title like '%:%'\n    by decade, has_colon\n  )\nselect groups {\n  key := .key {decade, has_colon},\n  count := count(.elements),\n  avg_words := math::mean(\n    len(str_split(.elements.title, ' ')))\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Event in FastAPI with EdgeDB\nDESCRIPTION: FastAPI endpoint for creating a new event with input validation for datetime format and event name uniqueness. This endpoint demonstrates handling EdgeDB errors as HTTP responses.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom http import HTTPStatus\nfrom typing import List\n\nimport gel\nfrom fastapi import APIRouter, HTTPException, Query\nfrom pydantic import BaseModel\n\nfrom .queries import create_event_async_edgeql as create_event_qry\n\nrouter = APIRouter()\nclient = gel.create_async_client()\n\n\nclass RequestData(BaseModel):\n    name: str\n    address: str\n    schedule: str\n    host_name: str\n\n\n@router.post(\"/events\", status_code=HTTPStatus.CREATED)\nasync def post_event(event: RequestData) -> create_event_qry.CreateEventResult:\n    try:\n        created_event = await create_event_qry.create_event(\n            client,\n            name=event.name,\n            address=event.address,\n            schedule=event.schedule,\n            host_name=event.host_name,\n        )\n\n    except gel.errors.InvalidValueError:\n        raise HTTPException(\n            status_code=HTTPStatus.BAD_REQUEST,\n            detail={\n                \"error\": \"Invalid datetime format. \"\n                \"Datetime string must look like this: \"\n                \"'2010-12-27T23:59:59-07:00'\",\n            },\n        )\n\n    except gel.errors.ConstraintViolationError:\n        raise HTTPException(\n            status_code=HTTPStatus.BAD_REQUEST,\n            detail=f\"Event name '{event.name}' already exists,\",\n        )\n\n    return created_event\n```\n\n----------------------------------------\n\nTITLE: Configuring Gel Client for Gel Cloud\nDESCRIPTION: Shows how to set up the Gel client for use with Gel Cloud in a Cloudflare Worker. It uses environment variables for the instance name and secret key.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = gel.createHttpClient({\n  instanceName: env.GEL_INSTANCE,\n  secretKey: env.GEL_SECRET_KEY,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Migration to Convert String to Enum in EdgeDB\nDESCRIPTION: Example of creating a migration that converts a string property to an enum type, with interactive confirmation steps.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\ndid you create scalar type 'default::CharacterClass'? [y,n,l,c,b,s,q,?]\n> y\ndid you alter the type of property 'class' of object type\n'default::Character'? [y,n,l,c,b,s,q,?]\n> y\nCreated ./dbschema/migrations/00004.edgeql, id:\nm1hc4yynkejef2hh7fvymvg3f26nmynpffksg7yvfksqufif6lulgq\n$ gel migrate\nApplied m1hc4yynkejef2hh7fvymvg3f26nmynpffksg7yvfksqufif6lulgq\n(00004.edgeql)\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAI Chat Completion Answer in TypeScript\nDESCRIPTION: This function sends a request to the OpenAI chat completion API with the prepared prompt. It configures the model, maximum tokens, temperature, and enables streaming of the response.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getOpenAiAnswer(prompt: string) {\n  const completion = await openai.chat.completions\n    .create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{ role: \"user\", content: prompt }],\n      max_tokens: 1024,\n      temperature: 0.1,\n      stream: true,\n    })\n    .asResponse();\n\n  return completion;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Single JSON Query in TypeScript\nDESCRIPTION: Examples of using querySingleJSON method to execute optional singleton-returning queries that return results as JSON strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await client.querySingleJSON(\"select 2 + 2;\"); // string: \"4\"\nawait client.querySingleJSON(\"select <int64>{}\"); // Throws a ResultCardinalityMismatchError\nawait client.querySingleJSON(\"select {1, 2, 3}\"); // Throws a ResultCardinalityMismatchError\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Transaction Control Statements\nDESCRIPTION: Statements for managing database transactions including starting, committing, rolling back transactions and managing savepoints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nstart transaction\ncommit\nrollback\ndeclare savepoint\nrollback to savepoint\nrelease savepoint\n```\n\n----------------------------------------\n\nTITLE: Adding Cards to Deck with EdgeDB\nDESCRIPTION: Creates a new card and adds it to a deck's card collection using EdgeDB. Automatically determines card order and handles relationships between deck and cards.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/fastapi.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnew_card = await client.query_single(\n    \"\"\"\n    with\n        deck := (select Deck filter .id = <uuid>$id),\n        order := (max(deck.cards.order) + 1),\n        new_card := (\n            insert Card {\n                front := <str>$front,\n                back := <str>$back,\n                order := order,\n            }\n        ),\n        updated := (\n            update deck\n            set {\n                cards += new_card\n            }\n        ),\n    select new_card { ** }\n    \"\"\",\n    id=deck_id,\n    front=card.front,\n    back=card.back,\n)\n\nif not new_card:\n    raise HTTPException(status_code=404, detail=\"Deck not found\")\n\nreturn new_card\n```\n\n----------------------------------------\n\nTITLE: Querying Movie Table in SQL\nDESCRIPTION: SQL query to select Movie records with their properties and link IDs from the mapped PostgreSQL table.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, title, release_year, director_id, star_id FROM \"Movie\";\n```\n\n----------------------------------------\n\nTITLE: Basic For Statement with Insert Operation in EdgeQL\nDESCRIPTION: Demonstrates basic usage of the for statement to iterate over a set of tuples and insert new User records. Each iteration processes a tuple containing name and theme values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/for.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nfor x in {\n    (name := 'Alice', theme := 'fire'),\n    (name := 'Bob', theme := 'rain'),\n    (name := 'Carol', theme := 'clouds'),\n    (name := 'Dave', theme := 'forest')\n}\nunion (\n    insert\n        User {\n            name := x.name,\n            theme := x.theme,\n        }\n);\n```\n\n----------------------------------------\n\nTITLE: Grouping with Rollup in TypeScript and EdgeQL\nDESCRIPTION: Shows how to use the rollup function for grouping in both TypeScript and EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\ne.group(e.Movie, (movie) => {\n  const release_year = movie.release_year;\n  const first_letter = movie.title[0];\n  const cast_size = e.count(movie.actors);\n  return {\n    title: true,\n    by: e.group.rollup({release_year, first_letter, cast_size})\n  };\n});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie { title }\nusing\n  first_letter := .title[0],\n  cast_size := count(.actors)\nby rollup(.release_year, first_letter, cast_size)\n```\n\n----------------------------------------\n\nTITLE: Execute EdgeQL Command Method (Python)\nDESCRIPTION: Executes one or more EdgeQL commands within a transaction block. Handles connection acquisition and release automatically.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nasync def execute(query)\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Updates in gel.toml\nDESCRIPTION: Configuration for automatically running generators after schema updates using the hooks section in gel.toml.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[instance]\nserver-version = \"6.4\"\n\n[hooks]\nschema.update.after = \"npx @gel/generate queries --file\"\n```\n\n----------------------------------------\n\nTITLE: Python Client Parameters\nDESCRIPTION: Examples of using parameters with Python client, including string and datetime parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/parameters.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait client.query(\n    \"select 'I ❤️ ' ++ <str>$var ++ '!';\",\n    var=\"lamp\")\n\nawait client.query(\n    \"select <datetime>$date;\",\n    date=datetime.today())\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert of Users Using For Loop in EdgeQL\nDESCRIPTION: Shows how to perform a bulk insert of User objects based on an explicit list of names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/insert.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nfor x in {'Alice', 'Bob', 'Carol', 'Dave'}\nunion (insert User {\n    name := x\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Client Usage in Go\nDESCRIPTION: Go implementation demonstrating context-aware client creation and query execution\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/clients.rst#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n\n  \"github.com/geldata/gel-go\"\n)\n\nfunc main() {\n  ctx := context.Background()\n  client, err := gel.CreateClient(ctx, gel.Options{})\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer client.Close()\n\n  var result float64\n  err = client.\n    QuerySingle(ctx, \"select random();\", &result)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting User in FastAPI with EdgeDB\nDESCRIPTION: FastAPI endpoint for deleting a user with error handling for users attached to events or non-existent users. The endpoint demonstrates integration with EdgeDB delete operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@router.delete(\"/users\")\nasync def delete_user(name: str) -> delete_user_qry.DeleteUserResult:\n    try:\n        deleted_user = await delete_user_qry.delete_user(\n            client,\n            name=name,\n        )\n    except gel.errors.ConstraintViolationError:\n        raise HTTPException(\n            status_code=HTTPStatus.BAD_REQUEST,\n            detail={\"error\": \"User attached to an event. Cannot delete.\"},\n        )\n\n    if not deleted_user:\n        raise HTTPException(\n            status_code=HTTPStatus.NOT_FOUND,\n            detail={\"error\": f\"User '{name}' was not found.\"},\n        )\n    return deleted_user\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Objects Using an Array in EdgeDB TypeScript\nDESCRIPTION: Demonstrates how to delete multiple Movie objects by specifying an array of titles, using array_unpack and literal to convert array to set for the 'in' operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst titles = [\"The Avengers\", \"Doctor Strange 2\"];\nconst query = e.delete(e.Movie, (movie) => ({\n  filter: e.op(\n    movie.title,\n    \"in\",\n    e.array_unpack(e.literal(e.array(e.str), titles))\n  )\n}));\nconst result = await query.run(client);\n// { id: string }[]\n```\n\n----------------------------------------\n\nTITLE: Inserting or Selecting Existing Record in EdgeQL\nDESCRIPTION: This snippet demonstrates how to use the 'unless conflict' clause to insert a new record or select an existing one. It's used here to handle potentially new or existing users when creating a review.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/insert.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\n# Create a new review and a new user in one step.\ninsert Review {\n    body := 'Loved it!!!',\n    rating := 5,\n    # The movie record already exists, so select it.\n    movie := (\n        select Movie\n        filter\n            .title = 'Dune'\n            and\n            .year = 2020\n        # the limit is needed to satisfy the single\n        # link requirement validation\n        limit 1\n    ),\n\n    # This might be a new user or an existing user. Some\n    # other part of the app handles authentication, this\n    # endpoint is used as a generic way to post a review.\n    author := (\n        # Try to create a new User,\n        insert User {\n            name := \"dune_fan_2020\",\n            image := \"default_avatar.jpg\",\n        }\n\n        # but if a User with this name already exists,\n        unless conflict on .name\n        # just pick that existing User as the author.\n        else User\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Property Rewrites in EdgeQL\nDESCRIPTION: This query demonstrates how to retrieve rewrites for a specific property (modified) on a particular object type (default::Post). It returns the kind of rewrite and the associated expression.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/mutation_rewrites.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect schema::Rewrite {kind, expr}\nfilter .subject.source.name = 'default::Post'\nand .subject.name = 'modified';\n```\n\n----------------------------------------\n\nTITLE: EdgeQL JSON Bulk Insert\nDESCRIPTION: Shows how to perform bulk inserts using JSON data through parameter unpacking.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/for.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  raw_data := <json>$data,\nfor item in json_array_unpack(raw_data) union (\n  insert Hero { name := <str>item['name'] }\n);\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert of Issues Based on Query in EdgeQL\nDESCRIPTION: Demonstrates a bulk insert of Issue objects based on a query selecting Users whose names start with 'A'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/insert.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    module example,\n    Elvis := (select User filter .name = 'Elvis'),\n    Open := (select Status filter .name = 'Open')\n\nfor Q in (select User filter .name ilike 'A%')\n\nunion (insert Issue {\n    name := Q.name + ' access problem',\n    body := 'This user was affected by recent system glitch',\n    owner := Elvis,\n    status := Open\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authorization Route Handler in Node.js\nDESCRIPTION: This JavaScript code creates HTTP server routes for handling OAuth authorization flow, including redirecting users to identity providers with PKCE challenge and storing the verifier in an HttpOnly cookie.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = http.createServer(async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n\n  switch (requestUrl.pathname) {\n    case \"/auth/authorize\": {\n      await handleAuthorize(req, res);\n      break;\n    }\n\n    case \"/auth/callback\": {\n      await handleCallback(req, res);\n      break;\n    }\n\n    default: {\n      res.writeHead(404);\n      res.end(\"Not found\");\n      break;\n    }\n  }\n});\n\n/**\n * Redirects OAuth requests to Gel Auth OAuth authorize redirect\n * with the PKCE challenge, and saves PKCE verifier in an HttpOnly\n * cookie for later retrieval.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleAuthorize = async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n  const provider = requestUrl.searchParams.get(\"provider\");\n\n  if (!provider) {\n    res.status = 400;\n    res.end(\"Must provider a 'provider' value in search parameters\");\n    return;\n  }\n\n  const pkce = generatePKCE();\n  const redirectUrl = new URL(\"authorize\", GEL_AUTH_BASE_URL);\n  redirectUrl.searchParams.set(\"provider\", provider);\n  redirectUrl.searchParams.set(\"challenge\", pkce.challenge);\n  redirectUrl.searchParams.set(\n    \"redirect_to\",\n    `http://localhost:${SERVER_PORT}/auth/callback`\n  );\n  redirectUrl.searchParams.set(\n    \"redirect_to_on_signup\",\n    `http://localhost:${SERVER_PORT}/auth/callback?isSignUp=true`\n  );\n\n  res.writeHead(302, {\n    \"Set-Cookie\": `gel-pkce-verifier=${pkce.verifier}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n    Location: redirectUrl.href,\n  });\n  res.end();\n};\n```\n\n----------------------------------------\n\nTITLE: Rollback to Savepoint Example in EdgeQL\nDESCRIPTION: Demonstrates how to use savepoints within a transaction, including starting a transaction, declaring a savepoint, rolling back to that savepoint, and finally rolling back the entire transaction.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_sp_rollback.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nstart transaction;\n# ...\ndeclare savepoint f1;\n# ...\nrollback to savepoint f1;\n# ...\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Links in SDL\nDESCRIPTION: Demonstrates basic link definitions between Person and Company types showing directional links.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  link best_friend: Person;\n}\n\ntype Company {\n  multi link employees: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Webhook Requests Query\nDESCRIPTION: EdgeQL query to list all scheduled webhook requests and their responses for debugging purposes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webhooks.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect net::http::ScheduledRequest {\n    **,\n    response: { ** }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Delete Operation with Clauses in EdgeQL\nDESCRIPTION: Shows a more complex delete operation using filter, order by, offset, and limit clauses to selectively delete objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/delete.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndelete Hero\nfilter .name ilike 'the %'\norder by .name\noffset 10\nlimit 5;\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Index in SDL\nDESCRIPTION: Demonstrates how to create a partial index that excludes certain objects. This example indexes user names, but excludes archived users, which can optimize queries for active users.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n  required email: str;\n  archived_at: datetime;\n\n  index on (.name) except (exists .archived_at);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI with GraphQL and Authentication in Python\nDESCRIPTION: This snippet shows how to set up a FastAPI application with a GraphQL endpoint and basic HTTP authentication. It demonstrates integrating Strawberry's GraphQL router and implementing a custom authentication function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# strawberry-gql/app/main.py\nfrom __future__ import annotations\n\nimport secrets\nfrom typing import Literal\n\nfrom fastapi import (\n    Depends, FastAPI, HTTPException, Request,\n    Response, status\n)\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom strawberry.fastapi import GraphQLRouter\n\nfrom app.schema import schema\n\napp = FastAPI()\nrouter = GraphQLRouter(schema)\nsecurity = HTTPBasic()\n\n\ndef auth(\n    credentials: HTTPBasicCredentials = Depends(security)\n) -> Literal[True]:\n\n    \"\"\"Simple HTTP Basic Auth.\"\"\"\n\n    correct_username = secrets.compare_digest(\n        credentials.username, \"ubuntu\"\n    )\n    correct_password = secrets.compare_digest(\n        credentials.password, \"debian\"\n    )\n\n    if not (correct_username and correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect email or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return True\n\n\n@router.api_route(\"/\", methods=[\"GET\", \"POST\"])\nasync def graphql(request: Request) -> Response:\n    return await router.handle_graphql(request=request)\n\napp.include_router(\n    router, prefix=\"/graphql\", dependencies=[Depends(auth)]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Deletion Policies for Links in EdgeDB SDL\nDESCRIPTION: Demonstrates how to set deletion policies for links using the 'on target delete' and 'on source delete' clauses. This example shows a cascade delete for Messages when a MessageThread is deleted.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_14\n\nLANGUAGE: sdl\nCODE:\n```\ntype MessageThread {\n  title: str;\n}\n\ntype Message {\n  content: str;\n  chat: MessageThread {\n    on target delete delete source;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamped Abstract Type in EdgeDB Schema\nDESCRIPTION: Schema definition showing the creation of a Timestamped abstract type and extending Deck and Card types to inherit timestamp properties. Adds created_at and updated_at datetime fields with default values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/inheritance/nextjs.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  abstract type Timestamped {\n    required created_at: datetime {\n      default := datetime_of_statement();\n    };\n    required updated_at: datetime {\n      default := datetime_of_statement();\n    };\n  }\n\n  type Deck extending Timestamped {\n    required name: str;\n    description: str;\n\n    multi cards: Card {\n      constraint exclusive;\n      on target delete allow;\n    };\n  };\n\n  type Card extending Timestamped {\n    required order: int64;\n    required front: str;\n    required back: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Insert Conflicts in EdgeQL\nDESCRIPTION: This snippet shows how to suppress failures on insert conflicts by using the 'unless conflict' clause without an 'else' clause. It demonstrates inserting a hero twice, with the second insert returning an empty set due to the conflict.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Hero { name := \"The Wasp\" } # initial insert\nunless conflict;\ninsert Hero { name := \"The Wasp\" } # The Wasp now exists\nunless conflict;\n```\n\n----------------------------------------\n\nTITLE: Handling WebAuthn registration and authentication options in NodeJS\nDESCRIPTION: These functions proxy requests to the Gel Auth extension to obtain options for WebAuthn registration and authentication ceremonies. They parse the email from the request body, construct API requests to the Auth extension, and return the response to the client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webauthn.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleRegisterOptions = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const { email } = JSON.parse(body);\n    if (!email) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'email' key, but got: ${body}`,\n      );\n      return;\n    }\n\n    const registerUrl = new URL(\n      \"webauthn/register/options\",\n      GEL_AUTH_BASE_URL\n    );\n    registerUrl.searchParams.set(\"email\", email);\n\n    const registerResponse = await fetch(registerUrl.href);\n\n    if (!registerResponse.ok) {\n      const text = await registerResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    const registerData = await registerResponse.json();\n\n    res.writeHead(200, { \"Content-Type\": \"application/json\" });\n    res.end(JSON.stringify(registerData));\n  });\n};\n\nconst handleAuthenticateOptions = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const { email } = JSON.parse(body);\n    if (!email) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'email' key, but got: ${body}`,\n      );\n      return;\n    }\n\n    const authenticateUrl = new URL(\n      \"webauthn/authenticate/options\",\n      GEL_AUTH_BASE_URL\n    );\n    authenticateUrl.searchParams.set(\"email\", email);\n\n    const authenticateResponse = await fetch(authenticateUrl.href);\n\n    if (!authenticateResponse.ok) {\n      const text = await authenticateResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    const authenticateData = await authenticateResponse.json();\n\n    res.writeHead(200, { \"Content-Type\": \"application/json\" });\n    res.end(JSON.stringify(authenticateData));\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Updating User with EdgeQL\nDESCRIPTION: EdgeQL query to update an existing user's name\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    update User filter .name = <str>$current_name\n        set {name := <str>$new_name}\n) {name, created_at};\n```\n\n----------------------------------------\n\nTITLE: Defining Inheritable Annotations in SDL\nDESCRIPTION: Illustrates how to create inheritable custom annotations in Gel SDL. It defines an abstract, inheritable 'admin_note' annotation that can be inherited by subtypes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\nabstract inheritable annotation admin_note;\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Value Constraint in EdgeDB SDL\nDESCRIPTION: Demonstrates the use of 'min_value' constraint to enforce a minimum allowed value for a custom scalar type 'NonNegative'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type NonNegative extending int64 {\n    constraint min_value(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Single-Query Bulk Import in TypeScript\nDESCRIPTION: Refactors the bulk import to use a single efficient query with parameterized inputs and array unpacking for better performance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait e\n  .params(\n    {\n      name: e.str,\n      description: e.optional(e.str),\n      cards: e.array(e.tuple({ front: e.str, back: e.str, order: e.int64 })),\n    },\n    (params) =>\n      e.insert(e.Deck, {\n        name: params.name,\n        description: params.description,\n        cards: e.for(e.array_unpack(params.cards), (card) =>\n          e.insert(e.Card, {\n            front: card.front,\n            back: card.back,\n            order: card.order,\n          })\n        ),\n      })\n  )\n  .run(client, deck);\n```\n\n----------------------------------------\n\nTITLE: Link Filtering in EdgeQL TypeScript\nDESCRIPTION: Shows how to filter on linked objects and their properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, (movie) => ({\n  title: true,\n  actors: (actor) => ({\n    name: true,\n    filter: e.op(actor.name.slice(0, 1), \"=\", \"A\"),\n  }),\n  filter_single: { title: \"Iron Man\" },\n}));\n```\n\n----------------------------------------\n\nTITLE: Query Composition with Insert and Select\nDESCRIPTION: Shows how to combine insert and select operations in a single query, demonstrating EdgeQL's composability\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n  insert Movie { title := 'The Marvels' }\n) {\n  id,\n  title\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst newMovie = e.insert(e.Movie, {\n  title: \"The Marvels\"\n});\nconst query = e.select(newMovie, () => ({\n  id: true,\n  title: true\n}));\n```\n\n----------------------------------------\n\nTITLE: Conditional expression with if-else in EdgeQL\nDESCRIPTION: The if-else operator produces one of two possible results based on a boolean condition.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 'real life' if 2 * 2 = 4 else 'dream';\n{'real life'}\n```\n\n----------------------------------------\n\nTITLE: Date and Time Literals in EdgeQL\nDESCRIPTION: Examples of declaring various date and time literals in EdgeQL using string casting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <datetime>'1999-03-31T15:17:00Z';\nselect <datetime>'1999-03-31T17:17:00+02';\nselect <cal::local_datetime>'1999-03-31T15:17:00';\nselect <cal::local_date>'1999-03-31';\nselect <cal::local_time>'15:17:00';\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Movie Object Type with Property\nDESCRIPTION: Demonstrates how to define a basic object type with a string property in Gel SDL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  title: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Primitive Values in EdgeQL\nDESCRIPTION: Demonstrates simple queries that select primitive values like strings and arrays.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 'hello world';\n{'hello world'}\ndb> select [1, 2, 3];\n{[1, 2, 3]}\ndb> select {1, 2, 3};\n{1, 2, 3}\n```\n\n----------------------------------------\n\nTITLE: Executing EdgeQL Commands with AsyncIO Client in Python\nDESCRIPTION: This snippet demonstrates how to use the execute() method of an AsyncIO client to run EdgeQL commands. It creates a new type and inserts multiple records in a single operation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nawait con.execute('''\n    CREATE TYPE MyType {\n        CREATE PROPERTY a -> int64\n    };\n    FOR x IN {100, 200, 300}\n    UNION INSERT MyType { a := x };\n''')\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Database Migration\nDESCRIPTION: Commands to create a new migration based on the schema changes and apply it to the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\n$ gel migrate\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Links in EdgeDB SDL\nDESCRIPTION: Demonstrates how to create abstract links that can be extended by concrete types. This example defines an abstract link with a strength property and an index, which is then extended in a concrete Person type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_16\n\nLANGUAGE: sdl\nCODE:\n```\nabstract link link_with_strength {\n  strength: float64;\n  index on (__subject__@strength);\n}\n\ntype Person {\n  multi friends: Person {\n    extending link_with_strength;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: User Type Definition - SDL\nDESCRIPTION: Schema definition for User type with email, name fields and a required one-to-one relationship with ext::auth::Identity.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/email_password.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n    email: str;\n    name: str;\n\n    required identity: ext::auth::Identity {\n        constraint exclusive;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Extension Schema Example\nDESCRIPTION: SDL schema showing how to use the auth extension with customer and cart types including access policies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension auth;\n\nmodule default {\n    global current_customer := (\n        assert_single((\n            select Customer\n            filter .identity = global ext::auth::ClientTokenIdentity\n        ))\n    );\n\n    type Customer {\n        required text: str;\n        required identity: ext::auth::Identity;\n    }\n\n    type Item {\n        required sku: str;\n        required description: str;\n    }\n\n    type Cart {\n        required customer: Customer;\n        multi items: Item {\n            quantity: int32;\n        };\n\n        access policy customer_has_full_access\n            allow all\n            using (global current_customer ?= .customer);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract and Concrete Object Types in SDL\nDESCRIPTION: Demonstrates how to define abstract and concrete object types using inheritance in Gel SDL. It shows the extension of an abstract 'Animal' type by a concrete 'Dog' type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Animal {\n  species: str;\n}\n\ntype Dog extending Animal {\n  breed: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Shape Selection in EdgeQL TypeScript\nDESCRIPTION: Shows how to create nested shape selections to fetch deeply related objects like movies with their actors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, () => ({\n  id: true,\n  title: true,\n  actors: {\n    name: true\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Basic FTS Query Example\nDESCRIPTION: Example of performing a basic full-text search query on Item type with scoring.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/fts.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith res := (\n  select fts::search(Item, 'corn treat', language := 'eng')\n)\nselect res.object {name, description, score := res.score}\norder by res.score desc;\n```\n\n----------------------------------------\n\nTITLE: User Type Definition in Gel\nDESCRIPTION: Defines the User type in Gel with required fields, unique constraints, and optional links to Badge and Status types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ntype User {\n        required app_id: int32 {\n            # It was unique originally, so this should be preserved.\n            constraint exclusive;\n        }\n        required name: str {\n            constraint exclusive;\n        }\n        required email: str {\n            constraint exclusive;\n        }\n        required password: str;\n        client_settings: json;\n\n        # Both badge and status are optional.\n        badge: Badge;\n        status: Status;\n    }\n```\n\n----------------------------------------\n\nTITLE: Preparing Section Data for Embedding\nDESCRIPTION: Implements the prepareSectionsData function to read file contents, preprocess text, and prepare Section objects for embedding generation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareSectionsData(\n  sectionPaths: string[]\n): Promise<Section[]> {\n  const contents: string[] = [];\n  const sections: Section[] = [];\n\n  for (const path of sectionPaths) {\n    const content = await fs.readFile(path, \"utf8\");\n    // OpenAI recommends replacing newlines with spaces for best results\n    // when generating embeddings\n    const contentTrimmed = content.replace(/\\n/g, \" \");\n    contents.push(contentTrimmed);\n    sections.push({\n      content,\n      tokens: encode(content).length,\n      embedding: [],\n    });\n  }\n  // The rest of the function\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gel CLI Command with Instance Flag\nDESCRIPTION: Demonstrates how to run a Gel CLI command with the -I flag to specify an instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Creating a Blocking Gel Client in Python\nDESCRIPTION: Shows how to create a blocking client and execute a simple query. This example demonstrates the basic usage of the create_client() function and the query() method on the resulting client object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclient = gel.create_client()\nclient.query('SELECT {1, 2, 3}')\n```\n\n----------------------------------------\n\nTITLE: Creating an Expression Index in SDL\nDESCRIPTION: Shows how to create an index on an expression that combines multiple properties. This index can optimize queries that use the lowercase combination of first and last names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required first_name: str;\n  required last_name: str;\n  index on (str_lower(.first_name + ' ' + .last_name));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Post Data from JSON to EdgeDB\nDESCRIPTION: This Python script demonstrates how to import Post data from a JSON dump into EdgeDB, including linking to User and Thread objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfor line in open('posts.json'):\n    client.query('''\n        with data := to_json(<str>$line)\n        insert Post {\n            app_id := <int32>data['id'],\n            body := <str>data['body'],\n            creation_time := <datetime>data['creation_time'],\n            edited_time := <datetime>data['edited_time'],\n            user := (\n                select User filter .app_id = <int32>data['user_id']\n            ),\n            thread := (\n                select Thread filter .app_id = <int32>data['thread_id']\n            ),\n            reply_to := (\n                select detached Post\n                filter .app_id = <int32>data['reply_to_id']\n            ),\n        }\n    ''',\n    line=line.replace(r'\\\\', '\\\\'))\n```\n\n----------------------------------------\n\nTITLE: Composing Arrays, Tuples, and JSON in EdgeQL and TypeScript\nDESCRIPTION: Shows how to create and work with composite data types like arrays, tuples, and JSON in both EdgeQL and TypeScript using the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect ['hello', 'world'];\nselect ('Apple', 7, true);\nselect (fruit := 'Apple', quantity := 3.14, fresh := true);\nselect <json>[\"this\", \"is\", \"an\", \"array\"];\n```\n\nLANGUAGE: typescript\nCODE:\n```\ne.array([\"hello\", \"world\"]);\n// string[]\ne.tuple([\"Apple\", 7, true]);\n// [string, number, boolean]\ne.tuple({fruit: \"Apple\", quantity: 3.14, fresh: true});\n// {fruit: string; quantity: number; fresh: boolean}\ne.json([\"this\", \"is\", \"an\", \"array\"]);\n// unknown\n```\n\n----------------------------------------\n\nTITLE: Managing Gel Instances and Versions\nDESCRIPTION: Commands to manage Gel instances and list installed server versions\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance destroy <instance_name>\n$ gel instance status\n$ gel server list-versions --installed-only\n```\n\n----------------------------------------\n\nTITLE: Integrating Gel with Cloudflare Worker (Local Instance)\nDESCRIPTION: Demonstrates how to use Gel in a Cloudflare Worker, connecting to a local Gel instance. It creates a client, executes a query, and returns the results as a JSON response.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as gel from \"gel\";\n\nexport default {\n  async fetch(\n    _request: Request,\n    env: Env,\n    ctx: ExecutionContext,\n  ): Promise<Response> {\n    const client = gel.createHttpClient({\n      tlsSecurity: \"insecure\",\n      dsn: \"<your-gel-dsn>\",\n    });\n    const movies = await client.query(`select Movie { title }`);\n    return new Response(JSON.stringify(movies, null, 2), {\n      headers: {\n        \"content-type\": \"application/json;charset=UTF-8\",\n      },\n    });\n  },\n} satisfies ExportedHandler<Env>;\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::ScalarType in EdgeQL\nDESCRIPTION: This query introspects the schema::ScalarType object, retrieving its name, links, and properties. It demonstrates how to examine the structure of a core schema type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/scalars.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::ScalarType';\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query for Fetching Actors\nDESCRIPTION: Python code defining a GraphQL query resolver to fetch actor objects from the database, with optional name filtering.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# strawberry-gql/app/schema.py\n...\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    async def get_actors(\n        self, filter_name: str | None = None\n    ) -> list[Actor]:\n\n        if filter_name:\n            actors_json = await client.query_json(\n                \"\"\"\n                select Actor {name, age, height}\n                filter .name=<str>$filter_name\n            \"\"\",\n                filter_name=filter_name,\n            )\n        else:\n            actors_json = await client.query_json(\n                \"\"\"\n                select Actor {name, age, height}\n            \"\"\"\n            )\n        actors = json.loads(actors_json)\n        return [\n            Actor(name, age, height)\n            for (name, age, height) in (\n                d.values() for d in actors\n            )\n        ]\n\n# Register the Query.\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Introspecting Custom Scalar Type with Constraint in EdgeQL\nDESCRIPTION: This EdgeQL query introspects the custom scalar type 'maxex_100', focusing on its constraint. It demonstrates how to examine the details of a constraint, including its expression, parameters, and error message.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/constraints.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ScalarType {\n    name,\n    constraints: {\n        name,\n        expr,\n        annotations: { name, @value },\n        subject: { name },\n        params: { name, @value, type: { name } },\n        return_typemod,\n        return_type: { name },\n        errmessage,\n    },\n}\nfilter .name = 'default::maxex_100';\n```\n\n----------------------------------------\n\nTITLE: Inserting Link Properties in EdgeQL\nDESCRIPTION: Shows how to insert a new Person object with a link property on the family_members link. The @relationship property is set when creating the link.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Person {\n  name := \"Bob\",\n  family_members := (\n    select detached Person {\n      @relationship := \"sister\"\n    }\n    filter .name = \"Alice\"\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Basic EdgeDB Query Example\nDESCRIPTION: Shows a simple query execution using the EdgeDB client with assertion checking. Demonstrates basic client setup and query execution.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\nimport assert from \"node:assert\";\n\nasync function main() {\n  const client = createClient();\n\n  const data: number = await client.queryRequiredSingle<number>(\n    \"select 1 + 1\"\n  );\n\n  assert(data === 2, \"Result is exactly the number 2\");\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Subquery in EdgeQL Select for Villain's Nemesis Movies\nDESCRIPTION: Demonstrates the use of a subquery to select all movies containing a villain's nemesis.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Villain {\n  name,\n  nemesis_name := .nemesis.name,\n  movies_with_nemesis := (\n    select Movie { title }\n    filter Villain.nemesis in .characters\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Using Splats in EdgeQL Queries\nDESCRIPTION: Shows how to use splats (*) and double-splats (**) to select all properties of an object and its linked objects in a single layer, simplifying queries and data exploration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {*};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {**};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic User Friend Link in EdgeDB\nDESCRIPTION: Creates a multi-link named 'friends' on the User type that can reference other User objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  create multi link friends: User\n};\n```\n\n----------------------------------------\n\nTITLE: Converting EdgeDB Expressions to EdgeQL\nDESCRIPTION: Examples of converting EdgeDB query builder expressions to their equivalent EdgeQL representations using the .toEdgeQL() method.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ne.str(\"hello world\").toEdgeQL();\n// => select \"hello world\"\n\ne.set(e.int64(1), e.int64(2), e.int64(3)).toEdgeQL();\n// => select {1, 2, 3}\n\ne.select(e.Movie, () => ({\n  title: true,\n  actors: { name: true }\n})).toEdgeQL();\n// => select Movie { title, actors: { name }}\n```\n\n----------------------------------------\n\nTITLE: Using Shapes in EdgeQL Queries\nDESCRIPTION: Shows how to use shapes to specify which properties to select when querying objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Villain { id, name };\n{\n  default::Villain {id: 6c22bdf0..., name: 'Sandman'},\n  default::Villain {id: 6c22c3d6..., name: 'Electro'},\n  default::Villain {id: 6c22c46c..., name: 'Green Goblin'},\n  default::Villain {id: 6c22c502..., name: 'Doc Ock'},\n  default::Villain {id: 6c42c4ec..., name: 'Obadiah Stane'},\n}\n```\n\n----------------------------------------\n\nTITLE: Element-wise Operations in EdgeQL\nDESCRIPTION: Demonstrates element-wise operations that are applied to each element in a set individually.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nselect str_upper({'aaa', 'bbb'});\nselect {1, 2, 3} ^ 2;\nselect str_split({\"hello world\", \"hi again\"}, \" \");\n```\n\n----------------------------------------\n\nTITLE: Verifying Passwords with ext::pgcrypto::crypt Function\nDESCRIPTION: Shows how to verify a password against a stored hash by using the hash as the salt value and checking if the results match. This is the standard pattern for password verification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgcrypto.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nwith hash := '0ddkJUiOnUFq6'\nselect hash = ext::pgcrypto::crypt(\n  'new password',\n  hash,\n);\n```\n\n----------------------------------------\n\nTITLE: Query Single JSON Method (Python)\nDESCRIPTION: Executes an optional singleton-returning query and returns the result in JSON format within a transaction block. Handles connection lifecycle automatically.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nasync def query_single_json(query, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Grouping Movie Data Using TypeScript EdgeDB Query Builder\nDESCRIPTION: This TypeScript example shows the equivalent grouping operation using the EdgeDB query builder. It groups Movie objects by release_year and selects the title field, with a comment showing the expected return type structure.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ne.group(e.Movie, (movie) => {\n  const release_year = movie.release_year;\n  return {\n    title: true,\n    by: {release_year},\n  };\n});\n/* {\n  grouping: string[];\n  key: { release_year: number | null };\n  elements: { title: string; }[];\n}[] */\n```\n\n----------------------------------------\n\nTITLE: Filter Definitions in GraphQL Schema\nDESCRIPTION: Defines the GraphQL schema for filtering Book and Author objects, including comparison operators for strings and boolean operations for combining filters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_2\n\nLANGUAGE: graphql-schema\nCODE:\n```\n# this is Book-specific\ninput FilterBook {\n    # basic boolean operators that combine conditions\n    and: [FilterBook!]\n    or: [FilterBook!]\n    not: FilterBook\n\n    # fields available for filtering (properties in EdgeQL)\n    title: FilterString\n    synopsis: FilterString\n    isbn: FilterString\n    author: NestedFilterAuthor\n}\n\n# this is Author-specific\ninput NestedFilterAuthor {\n    # instead of boolean operations, \"exists\" check is available\n    # for links\n    exists: Boolean\n\n    # fields available for filtering (properties in EdgeQL)\n    name: FilterString\n}\n\n# this is generic\ninput FilterString {\n    # \"exists\" check is available for every property, too\n    exists: Boolean\n\n    # equality\n    eq: String\n    neq: String\n\n    # lexicographical comparison\n    gt: String\n    gte: String\n    lt: String\n    lte: String\n\n    # other useful operations\n    like: String\n    ilike: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a Gel Database Branch\nDESCRIPTION: Commands to create a new 'feature' branch in Gel and switch to it. This allows for database schema changes that correspond to a VCS feature branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/branches.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel branch create feature\nCreating branch 'feature'...\nOK: CREATE BRANCH\n$ gel branch switch feature\nSwitching from 'main' to 'feature'\n```\n\n----------------------------------------\n\nTITLE: Creating a Gel Client in TypeScript\nDESCRIPTION: Demonstrates how to create a Gel client instance and execute a simple query. The client automatically manages a pool of connections to the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nconst client = createClient();\n\nconst answer = await client.queryRequiredSingle<number>(\"select 2 + 2;\");\nconsole.log(answer); // number: 4\n```\n\n----------------------------------------\n\nTITLE: Creating Free Objects in EdgeQL\nDESCRIPTION: Shows how to create ad-hoc objects with multiple properties including scalar values, sets, and nested queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_24\n\nLANGUAGE: edgeql\nCODE:\n```\nselect {\n  my_string := \"This is a string\",\n  my_number := 42,\n  several_numbers := {1, 2, 3},\n  all_heroes := Hero { name }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Sign-up Endpoint to Create User in Database\nDESCRIPTION: This Python diff shows the changes made to the sign-up endpoint to create a new user in the database using the updated 'create_user_async_edgeql' query. It includes importing Gel, creating a Gel client, and handling the new 'name' field in the request.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n+ import gel\n+ client = gel.create_async_client()\n\n  @router.post(\"/auth/signup\")\n  async def handle_signup(request: Request):\n      body = await request.json()\n      email = body.get(\"email\")\n+     name = body.get(\"name\")\n      password = body.get(\"password\")\n\n-     if not email or not password:\n+     if not email or not password or not name:\n-         raise HTTPException(status_code=400, detail=\"Missing email or password.\")\n+         raise HTTPException(status_code=400, detail=\"Missing email, password, or name.\")\n\n      verifier, challenge = generate_pkce()\n      register_url = f\"{GEL_AUTH_BASE_URL}/register\"\n      register_response = httpx.post(register_url, json={\n          \"challenge\": challenge,\n          \"email\": email,\n          \"password\": password,\n          \"provider\": \"builtin::local_emailpassword\",\n          \"verify_url\": \"http://localhost:8000/auth/verify\",\n      })\n\n      if register_response.status_code != 200 and register_response.status_code != 201:\n          return JSONResponse(status_code=400, content={\"message\": \"Registration failed\"})\n\n      code = register_response.json().get(\"code\")\n      token_url = f\"{GEL_AUTH_BASE_URL}/token\"\n      token_response = httpx.get(token_url, params={\"code\": code, \"verifier\": verifier})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Vector Types in SDL\nDESCRIPTION: Demonstrates creating a custom scalar type extending pgvector's vector type with a specific length (3 dimensions). The vector length specification is required for using indexes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type v3 extending ext::pgvector::vector<3>;\n\ntype Item {\n    embedding: v3\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Type in SDL\nDESCRIPTION: Defines a custom User type in SDL with email, name, and a required identity link to ext::auth::Identity.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n    email: str;\n    name: str;\n\n    required identity: ext::auth::Identity {\n        constraint exclusive;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting List Order for Multiple Actors in EdgeQL\nDESCRIPTION: This query uses a 'for' loop to set specific list_order values for multiple actors in the movie 'Dune' directed by Villeneuve.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/update.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter\n    .title = 'Dune'\n    and\n    .directors.last_name = 'Villeneuve'\nset {\n    actors := (\n        for x in {\n            ('Timothee Chalamet', 1),\n            ('Zendaya', 2),\n            ('Rebecca Ferguson', 3),\n            ('Jason Momoa', 4),\n        }\n        union (\n            select Person {@list_order := x.1}\n            filter .full_name = x.0\n        )\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Inheritance with Abstract Types in SDL\nDESCRIPTION: Shows how to use multiple inheritance to build complex object types from combinations of more basic types in Gel SDL. It defines abstract 'HasName' and 'HasEmail' types, which are then extended by a concrete 'Person' type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type HasName {\n  first_name: str;\n  last_name: str;\n}\n\nabstract type HasEmail {\n  email: str;\n}\n\ntype Person extending HasName, HasEmail {\n  profession: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting User in EdgeDB Query\nDESCRIPTION: EdgeQL query to delete a user by name from the database, returning the user's name and creation timestamp after deletion.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    delete User filter .name = <str>$name\n) {name, created_at};\n```\n\n----------------------------------------\n\nTITLE: Basic EdgeQL Queries\nDESCRIPTION: Example queries demonstrating basic EdgeQL operations including simple selection, aggregation, and working with structured data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/fastapi.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 42;\n{42}\ndb> select sum({1, 2, 3});\n{6}\ndb> with cards := {\n...   (\n...     front := \"What is the highest mountain in the world?\",\n...     back := \"Mount Everest\",\n...   ),\n...   (\n...     front := \"Which ocean contains the deepest trench on Earth?\",\n...     back := \"The Pacific Ocean\",\n...   ),\n... }\n... select cards order by random() limit 1;\n{\n  (\n    front := \"What is the highest mountain in the world?\",\n    back := \"Mount Everest\",\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Link Properties in EdgeQL\nDESCRIPTION: Shows how to query link properties along with regular object properties. The @relationship property is included in the shape of the family_members link.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person {\n  name,\n  family_members: {\n    name,\n    @relationship\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Executing EdgeDB Expressions in TypeScript\nDESCRIPTION: Examples of executing various EdgeDB expressions using the query builder's .run() method.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.str(\"hello world\").run(client);\n// => \"hello world\"\n\nawait e.set(e.int64(1), e.int64(2), e.int64(3)).run(client);\n// => [1, 2, 3]\n\nawait e\n  .select(e.Movie, () => ({\n    title: true,\n    actors: { name: true },\n  }))\n  .run(client);\n// => [{ title: \"The Avengers\", actors: [...]}]\n```\n\n----------------------------------------\n\nTITLE: Querying String Similarity with pg_trgm Extension in EdgeQL\nDESCRIPTION: Demonstrates using the pg_trgm extension to determine string similarity in EdgeQL. The query selects a set of strings and orders them by similarity to 'hello world' using the word_similarity function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> with x := {'hello world', 'word hero', 'help the world'}\n... select res := (x, ext::pg_trgm::word_similarity(x, 'hello world'))\n... order by res.1 desc;\n{('hello world', 1), ('help the world', 0.5), ('word hero', 0.35714287)}\n```\n\n----------------------------------------\n\nTITLE: Using withRetryOptions Method in JavaScript\nDESCRIPTION: Shows how to create a non-retrying client by setting the retry attempts to 1, which is then used in a transaction.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst nonRetryingClient = client.withRetryOptions({\n  attempts: 1\n});\n\n// This transaction will not retry\nawait nonRetryingClient.transaction(async (tx) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Event in EdgeDB Query\nDESCRIPTION: EdgeQL query to insert a new event with specified name, address, schedule, and host, returning the event details including host information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\nwith name := <str>$name,\n    address := <str>$address,\n    schedule := <str>$schedule,\n    host_name := <str>$host_name\n\nselect (\n    insert Event {\n        name := name,\n        address := address,\n        schedule := <datetime>schedule,\n        host := assert_single(\n            (select detached User filter .name = host_name)\n        )\n    }\n) {name, address, schedule, host: {name}};\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship Example\nDESCRIPTION: Shows how to model a one-to-many relationship with exclusive constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str;\n  multi shirts: Shirt {\n    constraint exclusive;\n  }\n}\n\ntype Shirt {\n  required color: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Many-to-One Relationship Example\nDESCRIPTION: Demonstrates modeling a many-to-one relationship between Person and Shirt.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str\n}\n\ntype Shirt {\n  required color: str;\n  owner: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Using detached operator in EdgeQL\nDESCRIPTION: The detached operator detaches a set reference from the current scope, allowing reference to the original set in nested contexts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate User\nfilter .name = 'Dave'\nset {\n    friends := (select detached User filter .name = 'Alice'),\n    coworkers := (select detached User filter .name = 'Bob')\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints on Computed Properties in SDL\nDESCRIPTION: Example of defining a constraint on a computed property in a User object type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required username: str;\n  required clean_username := str_trim(str_lower(.username));\n\n  constraint exclusive on (.clean_username);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using AsyncIO Client\nDESCRIPTION: Example showing how to create an async client and execute a basic query using the EdgeDB Gel library.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclient = gel.create_async_client()\nawait client.query('SELECT {1, 2, 3}')\n```\n\n----------------------------------------\n\nTITLE: Dynamic Blog Post Page Implementation\nDESCRIPTION: TSX code implementing a dynamic route page for displaying individual blog posts using server-side props\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {GetServerSidePropsContext, InferGetServerSidePropsType} from 'next';\n\nimport {client} from '../api/post';\nimport e from '../../dbschema/edgeql-js';\n\nexport const getServerSideProps = async (\n  context?: GetServerSidePropsContext\n) => {\n  const post = await e\n    .select(e.BlogPost, (post) => ({\n      id: true,\n      title: true,\n      content: true,\n      filter_single: e.op(\n        post.id,\n        '=',\n        e.uuid(context!.params!.id as string)\n      ),\n    }))\n    .run(client);\n  return {props: {post: post!}};\n};\n\nexport type GetPost = InferGetServerSidePropsType<typeof getServerSideProps>;\n\nconst Post: React.FC<GetPost> = (props) => {\n  return (\n    <div\n      style={{\n        margin: 'auto',\n        width: '100%',\n        maxWidth: '600px',\n      }}\n    >\n      <h1 style={{padding: '50px 0px'}}>{props.post.title}</h1>\n      <p style={{color: '#666'}}>{props.post.content}</p>\n    </div>\n  );\n};\n\nexport default Post;\n```\n\n----------------------------------------\n\nTITLE: Query Required Single Method (Python)\nDESCRIPTION: Executes a singleton-returning query within a transaction block. Acquires a connection if needed and automatically returns it to the pool after execution.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nasync def query_required_single(query, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Combined Embedding and Search with Curl\nDESCRIPTION: Complex bash command that gets an embedding vector for a text query via the AI embeddings API endpoint and uses it to perform a similarity search on Friend objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --user user:password \\\n  --json '{\"input\": \"Who helps Komi make friends?\", \"model\": \"text-embedding-3-small\"}' \\\n  http://localhost:<port>/branch/main/ai/embeddings \\\n  | jq -r '.data[0].embedding' \\                                                    # extract the embedding out of the JSON\n  | tr -d '\\n' \\                                                                    # remove newlines\n  | sed 's/^\\[//;s/\\]$//' \\                                                         # remove square brackets\n  | awk '{print \"select ext::ai::search(Friend, <array<float32>>[\" $0 \"]);\"}' \\     # assemble the query\n  | gel query --file -  # pass the query into Gel CLI\n```\n\n----------------------------------------\n\nTITLE: Computed Property with Filtering in EdgeDB SDL\nDESCRIPTION: Shows how to create a computed property that filters a set of members based on an active status.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/computeds.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Club {\n  multi members: Person;\n  multi active_members := (\n    select .members filter .is_active = true\n  )\n}\n\ntype Person {\n  name: str;\n  is_active: bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Movie with Actors\nDESCRIPTION: Retrieves a specific movie by title and year, including its directors and actors ordered by last name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Movie(\n        filter: {\n            title: {eq: \"Dune\"},\n            year: {eq: 2020}\n        }\n    ) {\n        id\n        title\n        year\n        description\n\n        directors {\n            id\n            full_name\n        }\n\n        actors(order: {last_name: {dir: ASC}}) {\n            id\n            full_name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Link Property Update in EdgeQL\nDESCRIPTION: Shows how to use for statement to update link properties, demonstrating a complex case of associating friends with nicknames using nested for statements and array operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/for.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    module example,\n    U2 := User\nfor x in {\n    (\n        name := 'Alice',\n        friends := [('Bob', 'coffee buff'),\n                    ('Carol', 'dog person')]\n    ),\n    (\n        name := 'Bob',\n        friends := [('Alice', 'movie buff'),\n                    ('Dave', 'cat person')]\n    )\n}\nunion (\n    update User\n    filter .name = x.name\n    set {\n        friends := assert_distinct(\n            (\n                for f in array_unpack(x.friends)\n                union (\n                    select U2 {@nickname := f.1}\n                    filter U2.name = f.0\n                )\n            )\n        )\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring Future Behavior in SDL for Gel Database\nDESCRIPTION: Example of how to declare a future behavior flag in Gel database schema using SDL syntax. This snippet shows how to enable the 'simple_scoping' future behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/future.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing future simple_scoping;\n```\n\n----------------------------------------\n\nTITLE: Implementing PKCE Flow Helper Functions in Node.js\nDESCRIPTION: This JavaScript snippet implements helper functions for PKCE (Proof Key of Code Exchange) authentication flow, generating a verifier and challenge for secure token exchange.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from \"node:http\";\nimport { URL } from \"node:url\";\nimport crypto from \"node:crypto\";\n\n/**\n * You can get this value by running `gel instance credentials`.\n * Value should be:\n * `${protocol}://${host}:${port}/branch/${branch}/ext/auth/\n */\nconst GEL_AUTH_BASE_URL = process.env.GEL_AUTH_BASE_URL;\nconst SERVER_PORT = 3000;\n\n/**\n * Generate a random Base64 url-encoded string, and derive a \"challenge\"\n * string from that string to use as proof that the request for a token\n * later is made from the same user agent that made the original request\n *\n * @returns {Object} The verifier and challenge strings\n */\nconst generatePKCE = () => {\n  const verifier = crypto.randomBytes(32).toString(\"base64url\");\n\n  const challenge = crypto\n    .createHash(\"sha256\")\n    .update(verifier)\n    .digest(\"base64url\");\n\n  return { verifier, challenge };\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Set Construction in EdgeQL\nDESCRIPTION: Demonstrates creating sets using curly brace syntax and union operator equivalence.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select {\"set\", \"of\", \"strings\"};\n{\"set\", \"of\", \"strings\"}\ndb> select {1, 2, 3};\n{1, 2, 3}\n```\n\n----------------------------------------\n\nTITLE: Creating Gel Database Instance\nDESCRIPTION: Create a new Gel instance with optional version specification. Supports latest stable version by default or specific version selection including nightly builds.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/instances.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance create my_instance\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance create my_instance --version 6.1\n$ gel instance create my_instance --version nightly\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Constraints in SDL\nDESCRIPTION: Example of defining a composite constraint on a BlogPost object type using multiple properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  username: str;\n}\n\ntype BlogPost {\n  title: str;\n\n  author: User;\n\n  constraint exclusive on ((.title, .author));\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Database Connection in JavaScript\nDESCRIPTION: Example of using ensureConnected method to verify database connection before executing queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nasync function getClient() {\n  try {\n    return await createClient().ensureConnected();\n  } catch (err) {\n    // handle connection error\n  }\n}\n\nasync function main() {\n  const client = await getClient();\n\n  await client.query(\"select 2 + 2;\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Homepage Component\nDESCRIPTION: React component for the blog homepage displaying static post data with TypeScript typing\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/index.tsx\n\nimport type {NextPage} from 'next';\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\n\ntype Post = {\n  id: string;\n  title: string;\n  content: string;\n};\n\nconst HomePage: NextPage = () => {\n  const posts: Post[] = [\n    {\n      id: 'post1',\n      title: 'This one weird trick makes using databases fun',\n      content: 'Use Gel',\n    },\n    {\n      id: 'post2',\n      title: 'How to build a blog with Gel and Next.js',\n      content: \"Let's start by scaffolding our app with `create-next-app`.\",\n    },\n  ];\n\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>My Blog</title>\n        <meta name=\"description\" content=\"An awesome blog\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main className={styles.main}>\n        <h1 className={styles.title}>Blog</h1>\n        <div style={{height: '50px'}}></div>\n        {posts.map((post) => {\n          return (\n            <a href={`/post/${post.id}`} key={post.id}>\n              <div className={styles.card}>\n                <p>{post.title}</p>\n              </div>\n            </a>\n          );\n        })}\n      </main>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining Gel Schema for User Model\nDESCRIPTION: Example Gel schema defining a User model with required name and email fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    required name: str;\n    required email: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Chat Prompt in EdgeDB\nDESCRIPTION: This snippet demonstrates how to create a custom chat prompt using the ext::ai::ChatPrompt and ext::ai::ChatPromptMessage types. It sets a name for the prompt and includes a system message.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert ext::ai::ChatPrompt {\n  name := 'test-prompt',\n  messages := (\n    insert ext::ai::ChatPromptMessage {\n      participant_role := ext::ai::ChatParticipantRole.System,\n      content := \"Your message content\"\n    }\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Requesting Text Embeddings via Gel HTTP API\nDESCRIPTION: Example of using cURL to request text embeddings from the Gel server. The request includes authentication, specifies the text to embed, and indicates which embedding model to use. This command sends the request to the local Gel server on port 10931, targeting the 'main' branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --user <username>:<password> --json '{\\\n    \"inputs\": [\"What color is the sky on Mars?\"],\\\n    \"model\": \"text-embedding-3-small\"\\\n  }' http://localhost:10931/branch/main/ai/embeddings\n```\n\n----------------------------------------\n\nTITLE: Specifying Plain Parameters in Gel DSN\nDESCRIPTION: Shows how to include plain parameters in a Gel DSN to provide values for options that can't be reflected in the main DSN structure, such as TLS settings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngel://hostname.com:1234?tls_security=insecure\n```\n\n----------------------------------------\n\nTITLE: Inheritance Example in SDL\nDESCRIPTION: Shows how to use type inheritance to extend an abstract type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type HasName {\n  first_name: str;\n  last_name: str;\n}\n\ntype Person extending HasName {\n  email: str;\n  best_friend: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Expressions with Different Volatilities\nDESCRIPTION: This code block illustrates various EdgeQL expressions and their corresponding volatilities. It includes examples of immutable, stable, volatile, and modifying expressions, as well as function calls with different volatilities.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/volatility.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\n1 + 1:                    Immutable\n1 + global one:           Stable\nglobal one + random():    Volatile\n(insert One).val:         Modifying\nplus_primitive(1):        Immutable\nplus_stable(1):           Stable\nplus_random(global one):  Volatile\nplus_insert(random()):    Immutable\n```\n\n----------------------------------------\n\nTITLE: Basic EdgeQL For Loop Example\nDESCRIPTION: Demonstrates basic for loop iteration over a set of numbers, showing both pre-5.0 syntax with union and post-5.0 simplified syntax.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/for.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nfor number in {0, 1, 2, 3}\nunion (\n  select { number, number + 0.5 }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Index using EdgeQL DDL\nDESCRIPTION: Shows how to create an index using EdgeQL DDL commands. This example creates a User type with a 'name' property and an index on that property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate type User {\n  create property name: str {\n    set default := '';\n  };\n\n  create index on (.name);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Type Schema in SDL\nDESCRIPTION: Schema definition for a User type with a name property and multi-link to other users as friends.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/shapes.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n    required name: str;\n    multi friends: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract Properties in Gel SDL\nDESCRIPTION: This snippet shows how to declare abstract properties and extend them in concrete types. Abstract properties can contain annotations, constraints, and other property features that are inherited when extended.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\nabstract property email_prop {\n  annotation title := 'An email address';\n  readonly := true;\n}\n\ntype Student {\n  # inherits annotations and \"readonly := true\"\n  email: str {\n    extending email_prop;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: User Creation with Google Profile Integration\nDESCRIPTION: Creates a new user by combining OAuth authentication token with Google profile data retrieved from the OAuth provider.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst profile = await getUserProfile(provider_token);\nconst authedClient = client.withGlobals({\n  \"ext::auth::client_token\": auth_token,\n});\nawait authedClient.query(\n  `\n  with\n    email := <optional str>$email,\n    name := <optional str>$name,\n  insert User {\n    email := email,\n    name := name,\n    identity := (global ext::auth::ClientTokenIdentity)\n  };\n  `,\n  { email: profile.email, name: profile.name }\n);\n```\n\n----------------------------------------\n\nTITLE: Flagging Reviews for a Specific Movie in EdgeQL\nDESCRIPTION: This query updates all reviews for the movie 'Dune' directed by Villeneuve, setting their 'flag' property to True.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/update.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Review\nfilter\n    Review.movie.title = 'Dune'\n    and\n    Review.movie.director.last_name = 'Villeneuve'\nset {\n    flag := True\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc Sine in EdgeQL\nDESCRIPTION: Shows how to use math::asin() function to calculate the arc sine of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::asin(-1);\n{-1.5707963267948966}\ndb> select math::asin(0);\n{0}\ndb> select math::asin(1);\n{1.5707963267948966}\n```\n\n----------------------------------------\n\nTITLE: Selecting Nested Shapes with EdgeDB Query Builder in TypeScript\nDESCRIPTION: Demonstrates how to select nested shapes and create computed properties on nested objects using the EdgeDB query builder.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, () => ({\n  id: true,\n  title: true,\n  actors: {\n    name: true,\n  }\n}));\n\nconst result = await query.run(client);\n/*\n  {\n    id: string;\n    title: string;\n    actors: { name: string; }[];\n  }[]\n*/\n\nconst queryComputed = e.select(e.Movie, () => ({\n  id: true,\n  title: true,\n  actors: (a) => ({\n    id: true,\n    name: true,\n    lower_name: e.str_lower(a.name),\n    upper_name: e.str_upper(a.name),\n  }),\n}));\n\nconst resultComputed = await queryComputed.run(client);\n/*\n  {\n    id: string;\n    title: string;\n    actors: {\n      id: string;\n      name: string;\n      lower_name: string;\n      upper_name: string;\n    }[];\n  }[]\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining Badge and Status Types in EdgeDB\nDESCRIPTION: This snippet defines the Badge and Status types in EdgeDB schema language. It includes constraints and required fields for each type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ntype Badge {\n    required name: str {\n        constraint exclusive;\n    }\n    required description: str;\n}\n\ntype Status {\n    required title: str {\n        constraint exclusive;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in EdgeDB Queries with TypeScript\nDESCRIPTION: Illustrates how to use strongly-typed parameters in EdgeDB queries. Parameters are defined using e.params and can be used within the query closure.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloQuery = e.params({name: e.str}, (params) =>\n  e.op('Yer a wizard, ', '++', params.name)\n);\n/*  with name := <str>$name\n    select name;\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining Weighted FTS Index in SDL\nDESCRIPTION: Shows how to create a full-text search index with different weight categories for name and description fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/fts.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Item {\n  required available: bool {\n    default := false;\n  };\n  required name: str;\n  description: str;\n\n  index fts::index on ((\n    fts::with_options(\n      .name,\n      language := fts::Language.eng,\n      weight_category := fts::Weight.A,\n    ),\n    fts::with_options(\n      .description,\n      language := fts::Language.eng,\n      weight_category := fts::Weight.B,\n    )\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Embeddings to Section Objects\nDESCRIPTION: Assigns the generated embeddings to their corresponding Section objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareSectionsData(\n  sectionPaths: string[]\n): Promise<Section[]> {\n  // The stuff we already talked about\n\n  embeddingResponse.data.forEach((item, i) => {\n    sections[i].embedding = item.embedding;\n  });\n\n  return sections;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gel Client in TypeScript\nDESCRIPTION: Demonstrates how to create a Gel client in TypeScript within a project directory for automatic connection.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// clientTest.js\nimport {createClient} from 'gel';\n\nconst client = createClient();\nawait client.query(\"select 5\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scalar Literals in EdgeQL and TypeScript\nDESCRIPTION: Shows how to declare basic scalar literals like strings, booleans, numbers, and more complex types like UUIDs and dates in both EdgeQL and TypeScript using the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect \"I ❤️ EdgeQL\"; # str\nselect false; # bool\nselect 42; # int64\nselect 3.14; # float64\nselect 12345678n; # bigint\nselect 15.0e+100n;  # decimal\nselect b'bina\\x01ry'; # bytes\n```\n\nLANGUAGE: typescript\nCODE:\n```\ne.str(\"I ❤️ EdgeQL\")\n// string\ne.bool(false)\n// boolean\ne.int64(42)\n// number\ne.float64(3.14)\n// number\ne.bigint(BigInt(12345678))\n// bigint\ne.decimal(\"1234.4567\")\n// n/a (not supported by JS clients)\ne.bytes(Buffer.from(\"bina\\x01ry\"))\n// Buffer\n```\n\n----------------------------------------\n\nTITLE: Basic EdgeQL Parameter Usage\nDESCRIPTION: Demonstrates basic parameter syntax in EdgeQL queries using $ notation with explicit type casting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/parameters.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <str>$var;\nselect <int64>$a + <int64>$b;\nselect BlogPost filter .id = <uuid>$blog_id;\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance Example\nDESCRIPTION: Shows how to implement multiple inheritance by extending multiple abstract types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_13\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type HasTitle {\n  required title: str;\n}\n\nabstract type HasReleaseYear {\n  required release_year: int64;\n}\n\ntype Movie extending HasTitle, HasReleaseYear {\n  sequel_to: Movie;\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Geometry in EdgeDB with PostGIS\nDESCRIPTION: Collection of functions to simplify geometries with various algorithms including standard simplify, preserve topology, Visvalingam-Whyatt algorithm, and polygon hull simplification. These functions reduce the complexity of geometries while preserving key characteristics.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_234\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::simplify( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n  a2: std::bool, \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::simplifypolygonhull( \\\n  geom: ext::postgis::geometry, \\\n  vertex_fraction: std::float64, \\\n  is_outer: std::bool = true, \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::simplifypreservetopology( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::simplifyvw( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Async Gel AI Client in Python\nDESCRIPTION: Example of creating and using an asynchronous Gel AI client to query astronomical information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/python.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport gel\nimport gel.ai\nimport asyncio\n\nclient = gel.create_async_client()\n\nasync def main():\n    gpt4ai = await gel.ai.create_async_rag_client(\n        client,\n        model=\"gpt-4-turbo-preview\"\n    )\n    astronomy_ai = gpt4ai.with_context(\n        query=\"Astronomy\"\n    )\n    query = \"What color is the sky on Mars?\"\n    print(\n        await astronomy_ai.query_rag(query)\n    );\n\n    #or streamed\n    async for data in blog_ai.stream_rag(query):\n        print(data)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: OpenAI API Integration in TypeScript\nDESCRIPTION: Async function that sends prompt to OpenAI API and returns streamed completion response.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getOpenAiAnswer(prompt: string) {\n  const completion = await openai.chat.completions\n    .create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{ role: \"user\", content: prompt }],\n      max_tokens: 1024,\n      temperature: 0.1,\n      stream: true,\n    })\n    .asResponse();\n\n  return completion;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Vectorstore in Python\nDESCRIPTION: Method to add multiple items to the vector store in a single transaction. It generates and stores embeddings for all items, returning a list of database record IDs for the inserted items.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef add_items(self, items: list[InsertItem]) -> list[uuid.UUID]:\n    # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Using With Blocks in EdgeQL\nDESCRIPTION: Demonstrates how to use a with block to create an alias that can be referenced in the main query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_25\n\nLANGUAGE: edgeql\nCODE:\n```\nwith hero_name := \"Iron Man\"\nselect Hero { secret_identity }\nfilter .name = hero_name;\n```\n\n----------------------------------------\n\nTITLE: Aggregate Operations in EdgeQL\nDESCRIPTION: Shows examples of aggregate operations that work on sets as a whole and return singleton results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nselect count({'aaa', 'bbb'});\nselect sum({1, 2, 3});\nselect min({1, 2, 3});\n```\n\n----------------------------------------\n\nTITLE: Introspecting Built-in count Function in EdgeDB\nDESCRIPTION: This query demonstrates how to introspect a specific function, in this case the built-in count function. It retrieves detailed information about the function, including its name, annotations, parameters, return type, and type modifiers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/functions.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect `Function` {\n    name,\n    annotations: { name, @value },\n    params: {\n        kind,\n        name,\n        num,\n        typemod,\n        type: { name },\n        default,\n    },\n    return_typemod,\n    return_type: { name },\n}\nfilter .name = 'std::count';\n```\n\n----------------------------------------\n\nTITLE: Updating BankCustomer Balance in EdgeQL\nDESCRIPTION: These queries update the balance of two bank customers, subtracting 10 from Customer1 and adding 10 to Customer2.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/transactions.rst#2025-04-16_snippet_1\n\nLANGUAGE: eql\nCODE:\n```\nupdate BankCustomer\n    filter .name = 'Customer1'\n    set { bank_balance := .bank_balance -10 };\nupdate BankCustomer\n    filter .name = 'Customer2'\n    set { bank_balance := .bank_balance +10 }\n```\n\n----------------------------------------\n\nTITLE: Set Membership Testing\nDESCRIPTION: Shows how to check if an element exists in a set using the 'in' operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 'aaa' in {'aaa', 'bbb', 'ccc'};\n{true}\ndb> select 'ddd' in {'aaa', 'bbb', 'ccc'};\n{false}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Project\nDESCRIPTION: Shows the interactive process of initializing a new Gel project using the gel project init command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init\nNo `gel.toml` found in this repo or above.\nDo you want to initialize a new project? [Y/n]\n> Y\nSpecify the name of Gel instance to use with this project\n[default: my_instance]:\n> my_instance\nChecking Gel versions...\nSpecify the version of Gel to use with this project [default: x.x]:\n> # (left blank for default)\n...\nSuccessfully installed x.x+cc4f3b5\nInitializing Gel instance...\nApplying migrations...\nEverything is up to date. Revision initial\nProject initialized.\nTo connect to my_instance, run `gel`\n```\n\n----------------------------------------\n\nTITLE: Defining Required and Optional Properties in Gel SDL\nDESCRIPTION: This example shows how to declare required and optional properties for a User type. The 'required' keyword is used to ensure a property must have a value, while 'optional' is the default and can be omitted.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str;\n  optional name: str;\n}\n```\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str;\n  name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Union Operation in EdgeQL\nDESCRIPTION: Shows how set construction is equivalent to using union operators.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select \"set\" union \"of\" union \"strings\";\n{\"set\", \"of\", \"strings\"}\ndb> select 1 union 2 union 3;\n{1, 2, 3}\n```\n\n----------------------------------------\n\nTITLE: Adding Movie Review Mutation\nDESCRIPTION: Creates a new review for an existing movie by an existing user, with rating and review text.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation add_review {\n    insert_Review(\n        data: {\n            movie: {\n                filter: {title: {eq: \"Dune\"}, year: {eq: 2020}},\n                first: 1\n            },\n            body: \"Yay!\",\n            rating: 5,\n            author: {\n                filter: {name: {eq: \"Atreides\"}},\n                first: 1\n            }\n        }\n    ) {\n        id\n        body\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Required Single JSON Method (Python)\nDESCRIPTION: Executes a singleton-returning query and returns the result in JSON format within a transaction block. Manages connection automatically within the transaction scope.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nasync def query_required_single_json(query, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Querying Tuples in TypeScript with EdgeDB\nDESCRIPTION: Demonstrates querying both regular and named tuples in EdgeDB and their TypeScript representations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.queryRequiredSingle<[number, string]>(`select (1, \"hello\");`);\n// [number, string]: [1, 'hello']\n\nawait client.queryRequiredSingle<{\n  foo: number;\n  bar: string;\n}>(`select (foo := 1, bar := \"hello\");`);\n// { foo: number; bar: string }: { foo: 1; bar: 'hello' }\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type with Link in SDL\nDESCRIPTION: Shows how to define a Person object type with both a property and a self-referential link.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  email: str;\n  best_friend: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: QueryContext Class Definition in Python\nDESCRIPTION: A data class that encapsulates query context parameters including the base query string, variables, global settings, and object count limits. Includes a derive() method for creating new instances with updated attributes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/python.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass QueryContext:\n    \"\"\"\n    A data class defining the context for a query to an AI model.\n    \n    :ivar query: The base query string.\n    :ivar variables: An optional dictionary of variables used in the query.\n    :ivar globals: An optional dictionary of global settings affecting the query.\n    :ivar max_object_count: An optional integer specifying the maximum number of objects the query should return.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Auth for Express\nDESCRIPTION: Code for initializing the Gel client and setting up Gel Auth for an Express application. It creates an authentication handler with the specified base URL for the server.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport createExpressAuth from \"@gel/auth-express\";\n\n// Initialize Gel client\nconst gelClient = createClient();\n\n// Initialize Gel Auth for Express\nexport const auth = createExpressAuth(gelClient, {\n  baseUrl: `http://localhost:${process.env.PORT || 3000}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up EdgeQL HTTP extension in Gel using SDL\nDESCRIPTION: Code to enable the edgeql_http extension in your Gel schema to expose an HTTP endpoint for EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/http.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension edgeql_http;\n```\n\n----------------------------------------\n\nTITLE: Creating and Confirming Property Rename Migration in EdgeDB\nDESCRIPTION: Example of creating a migration that renames a property and confirming the change, followed by applying the migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\ndid you rename property 'description' of object type 'default::Character'\nto 'class'? [y,n,l,c,b,s,q,?]\n> y\nCreated ./dbschema/migrations/00002.edgeql, id:\nm1ljrgrofsqkvo5hsxc62mnztdhlerxp6ucdto262se6dinhuj4mqq\n$ gel migrate\nApplied m1ljrgrofsqkvo5hsxc62mnztdhlerxp6ucdto262se6dinhuj4mqq\n(00002.edgeql)\n```\n\n----------------------------------------\n\nTITLE: Type Checking with 'is' Operator in EdgeQL\nDESCRIPTION: Shows examples of using the 'is' and 'is not' operators for type checking in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/type.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect 1 is int64;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User is not SystemUser\nfilter User.name = 'Alice';\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User is (Text | Named);\n```\n\n----------------------------------------\n\nTITLE: Defining Various Aliases for Arbitrary Expressions in SDL\nDESCRIPTION: Shows examples of creating aliases for different types of EdgeQL expressions, including tuples, named tuples, and query results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/aliases.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\n# Tuple alias\nalias Color := (\"Purple\", 128, 0, 128);\n\n# Named tuple alias\nalias GameInfo := (\n  name := \"Li Europan Lingues\",\n  country := \"Iceland\",\n  date_published := 2023,\n  creators := (\n    (name := \"Bob Bobson\", age := 20),\n    (name := \"Trina Trinadóttir\", age := 25),\n  ),\n);\n\ntype BlogPost {\n  required title: str;\n  required is_published: bool;\n}\n\n# Query alias\nalias PublishedPosts := (\n  select BlogPost\n  filter .is_published = true\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Future Behavior with EdgeQL in Gel Database\nDESCRIPTION: Example of how to create a future behavior flag using EdgeQL DDL command. This snippet demonstrates enabling the 'simple_scoping' future behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/future.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate future simple_scoping;\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Project\nDESCRIPTION: Creates a new Gel project in the current directory, generating a gel.toml file and dbschema directory if they don't exist.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/cli.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init\n```\n\n----------------------------------------\n\nTITLE: Multiple Variable Declarations in EdgeQL With Clause\nDESCRIPTION: Shows how to declare multiple variables in a 'with' clause, including referencing earlier variables in later declarations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/with.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith a := 5,\n  b := 2,\n  c := a ^ b\nselect c;\n```\n\n----------------------------------------\n\nTITLE: Executing Required Single JSON Query in TypeScript\nDESCRIPTION: Examples of using queryRequiredSingleJSON method to execute queries that must return exactly one element as JSON string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await client.queryRequiredSingleJSON(\"select 2 + 2;\"); // string: \"4\"\nawait client.queryRequiredSingleJSON(\"select <int64>{}\"); // Throws a ResultCardinalityMismatchError\nawait client.queryRequiredSingleJSON(\"select {1, 2, 3}\"); // Throws a ResultCardinalityMismatchError\n```\n\n----------------------------------------\n\nTITLE: Querying Media Types with Type Intersection\nDESCRIPTION: Demonstrates how to query Media types and filter by subtypes using the type intersection operator [is <type>].\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Media;\nselect Media[is Movie];\nselect Media[is TVShow];\n```\n\n----------------------------------------\n\nTITLE: Defining DSN Structure for Gel Connection in Plain Text\nDESCRIPTION: Demonstrates the structure of a Data Source Name (DSN) used to specify connection information for Gel. It includes optional components for user, password, host, port, and branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngel://<user>:<password>@<host>:<port>/<branch>\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Page to Use Generated Query Builder\nDESCRIPTION: This code snippet shows how to update a Next.js page component to use the generated query builder instead of raw SQL queries. It demonstrates importing the query builder and using it to select blog posts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\nimport { createClient } from 'gel';\nimport e from '@/dbschema/edgeql-js';\n\nconst client = createClient();\n\nexport default async function Home() {\n  const selectPosts = e.select(e.BlogPost, () => ({\n    id: true,\n    title: true,\n    content: true,\n  }));\n  const posts = await selectPosts.run(client);\n\n  return (\n    <div className=\"container mx-auto p-4 bg-black text-white\">\n      <h1 className=\"text-3xl font-bold mb-4\">Posts</h1>\n      <ul>\n        {posts.map((post) => (\n          <li\n            key={post.id}\n            className=\"mb-4\"\n          >\n            <Link\n              href={`/post/${post.id}`}\n              className=\"text-blue-500\"\n            >\n              {post.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PGVector Extension in EdgeQL\nDESCRIPTION: Example showing how to configure extension-specific parameters using ext::pgvector::Config.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/cfg.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> configure session\n... set ext::pgvector::Config::probes := 5;\nOK: CONFIGURE SESSION\ndb> select cfg::Config.extensions[is ext::pgvector::Config]{*};\n{\n  ext::pgvector::Config {\n    id: 12b5c70f-0bb8-508a-845f-ca3d41103b6f,\n    probes: 5,\n    ef_search: 40,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Type for Audit Logging in EdgeDB SDL\nDESCRIPTION: Defines a Log type to store audit information including action, timestamp, target name, and change details.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Log {\n  action: str;\n  timestamp: datetime {\n    default := datetime_current();\n  }\n  target_name: str;\n  change: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting a Specific Trigger in EdgeQL\nDESCRIPTION: This query retrieves details of a specific trigger named 'log_insert' on the User type. It shows how to inspect the name, kinds, timing, scope, expression, and subject of a trigger in EdgeDB.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/triggers.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect Trigger {\n  name,\n  kinds,\n  timing,\n  scope,\n  expr,\n  subject: {\n    name\n  }\n} filter .name = 'log_insert';\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional Log Update Trigger Using EdgeDB DDL\nDESCRIPTION: Shows how to create a conditional trigger using DDL commands. This trigger inserts a Log object when an update query changes a User object, checking if the object has actually changed.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  create trigger log_update after update for each\n  when (<json>__old__ {**} != <json>__new__ {**})\n  do (\n    insert Log {\n      action := 'update',\n      target_name := __new__.name,\n      change := __old__.name ++ '->' ++ __new__.name\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Select or Insert User with Coalesce Operator in EdgeQL\nDESCRIPTION: Shows how to use the coalesce operator to express a 'select or insert if missing' operation in EdgeQL. It attempts to select a User with a specific name, and if not found, inserts a new User.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (select User filter .name = 'Alice') ??\n       (insert User { name := 'Alice' });\n```\n\n----------------------------------------\n\nTITLE: Applying Regular Expression Constraint in EdgeDB SDL\nDESCRIPTION: Demonstrates the use of 'regexp' constraint to limit string values to those matching a specific regular expression pattern.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type LettersOnly extending str {\n    constraint regexp(r'[A-Za-z]*');\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Blog Homepage with Gel Integration\nDESCRIPTION: Updated Next.js homepage component that fetches blog posts from Gel database using the client library.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Link from 'next/link'\nimport { createClient } from 'gel';\n\ntype Post = {\n  id: string\n  title: string\n  content: string\n}\nconst client = createClient();\n\nexport default async function Home() {\n  const posts = await client.query<Post>(`\\\n   select BlogPost {\n     id,\n     title,\n     content\n  };`)\n\n  return (\n    <div className=\"container mx-auto p-4 bg-black text-white\">\n      <h1 className=\"text-3xl font-bold mb-4\">Posts</h1>\n      <ul>\n        {posts.map((post) => (\n          <li\n            key={post.id}\n            className=\"mb-4\"\n          >\n            <Link\n              href={`/post/${post.id}`}\n              className=\"text-blue-500\"\n            >\n              {post.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Weighted FTS Query\nDESCRIPTION: Demonstrates FTS query with custom weight values to modify relevance scoring.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/fts.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith res := (\n  select fts::search(\n    Item, 'corn treat',\n    language := 'eng',\n    weights := [0.2, 1],\n  )\n)\nselect res.object {name, description, score := res.score}\norder by res.score desc;\n```\n\n----------------------------------------\n\nTITLE: Slicing JSON Arrays and Strings in EdgeQL\nDESCRIPTION: Demonstrates slicing operations on JSON arrays and strings to produce new JSON values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/json.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <json>'hello'[0:2];\nselect <json>'hello'[2:];\nselect to_json('[1, 2, 3]')[0:2];\nselect to_json('[1, 2, 3]')[2:];\nselect to_json('[1, 2, 3]')[:1];\nselect to_json('[1, 2, 3]')[:-2];\n```\n\n----------------------------------------\n\nTITLE: Using contains() with strings and bytes in EdgeQL\nDESCRIPTION: Demonstrates how the contains() function works with string and bytes types in EdgeQL. The function returns true if the haystack contains the needle as a subsequence.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select contains('qwerty', 'we');\n{true}\n\ndb> select contains(b'qwerty', b'42');\n{false}\n```\n\n----------------------------------------\n\nTITLE: Implementing Similarity Search Query in EdgeQL\nDESCRIPTION: This EdgeQL query fetches chats with messages most similar to the current message, using the ext::ai::search function for similarity comparison.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_41\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    user := (select User filter .name = <str>$username),\n        chats := (\n            select Chat\n            filter .<chats[is User] = user\n                   and .id != <uuid>$current_chat_id\n        )\n\nselect chats {\n    distance := min(\n        ext::ai::search(\n            .messages,\n            <array<float32>>$embedding,\n        ).distance,\n    ),\n    messages: {\n        role, body, sources\n    }\n}\n\norder by .distance\nlimit <int64>$limit;\n```\n\n----------------------------------------\n\nTITLE: Using @source and @target in Link Constraints in SDL\nDESCRIPTION: Examples of using @source and @target in link constraints for a library book management app and a color-based memory game.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\ntype Book {\n  required title: str;\n}\n\ntype User {\n  name: str;\n  multi checked_out: Book {\n    date: cal::local_date;\n\n    # Ensures a given Book can be checked out\n    # only once on a given day.\n    constraint exclusive on ((@target, @date));\n  }\n}\n\ntype Player {\n  required name: str;\n\n  multi picks: Color {\n    order: int16;\n\n    constraint exclusive on ((@source, @order));\n  }\n}\n\ntype Color {\n  required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Comparison in Trigger Condition for EdgeDB SDL\nDESCRIPTION: Uses JSON casting to compare all properties of an object in a trigger condition.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl-invalid\nCODE:\n```\ntrigger log_update after update for each\nwhen (<json>__old__ {**} != <json>__new__ {**})\ndo (\n  insert Log {\n    action := 'update',\n    target_name := __new__.name,\n    change := __old__.name ++ '->' ++ __new__.name\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Query Filtering in EdgeQL/TypeScript\nDESCRIPTION: Demonstrates filtering in a query that searches for movies with 'avengers' in the title and characters with names starting with 'chris'\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncharacters: c => ({\n  name: true,\n  filter: e.op(c.name, \"ilike\", \"chris%\"),\n}),\nfilter: e.op(movie.title, \"ilike\", \"%avengers%\"),\n}));\n```\n\n----------------------------------------\n\nTITLE: Selecting Objects in Gel TypeScript\nDESCRIPTION: Shows how selecting a set of objects will return their id property only by default, which is reflected in the TypeScript type of the result.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie);\n// select Movie;\n\nconst result = await query.run(client);\n// {id:string}[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-up Endpoint in FastAPI\nDESCRIPTION: This code snippet shows the implementation of a sign-up endpoint in FastAPI. It handles user registration by sending a POST request to the Gel Auth server, exchanging the received code for an auth token, and setting the token as an HttpOnly cookie in the response.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter, HTTPException, Request\nfrom fastapi.responses import JSONResponse\nimport httpx\n\nrouter = APIRouter()\n\n# Value should be:\n# {protocol}://${host}:${port}/branch/${branch}/ext/auth/\nGEL_AUTH_BASE_URL = os.getenv('GEL_AUTH_BASE_URL')\n\n@router.post(\"/auth/signup\")\nasync def handle_signup(request: Request):\n    body = await request.json()\n    email = body.get(\"email\")\n    password = body.get(\"password\")\n\n    if not email or not password:\n        raise HTTPException(status_code=400, detail=\"Missing email or password\")\n\n    verifier, challenge = generate_pkce()\n    register_url = f\"{GEL_AUTH_BASE_URL}/register\"\n    register_response = httpx.post(register_url, json={\n        \"challenge\": challenge,\n        \"email\": email,\n        \"password\": password,\n        \"provider\": \"builtin::local_emailpassword\",\n        \"verify_url\": \"http://localhost:8000/auth/verify\",\n    })\n\n    if register_response.status_code != 200 and register_response.status_code != 201:\n        return JSONResponse(status_code=400, content={\"message\": \"Registration failed\"})\n\n    code = register_response.json().get(\"code\")\n    token_url = f\"{GEL_AUTH_BASE_URL}/token\"\n    token_response = httpx.get(token_url, params={\"code\": code, \"verifier\": verifier})\n\n    if token_response.status_code != 200:\n        return JSONResponse(status_code=400, content={\"message\": \"Token exchange failed\"})\n\n    auth_token = token_response.json().get(\"auth_token\")\n\n    response = JSONResponse(content={\"message\": \"User registered\"})\n    response.set_cookie(key=\"gel-auth-token\", value=auth_token, httponly=True, secure=True, samesite='strict')\n    return response\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Models for Flashcard Application\nDESCRIPTION: Defines Pydantic models for the flashcard application data structure. Includes base models and implementation models for Cards and Decks, establishing the relationships between them.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/modeling/fastapi.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass CardBase(BaseModel):\n  front: str\n  back: str\n\nclass Card(CardBase):\n  id: str\n\nclass DeckBase(BaseModel):\n  name: str\n  description: Optional[str] = None\n\nclass Deck(DeckBase):\n  id: str\n  cards: List[Card]\n```\n\n----------------------------------------\n\nTITLE: Enabling Email Password Provider\nDESCRIPTION: Configures the email/password authentication provider with verification settings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH\nINSERT ext::auth::EmailPasswordProviderConfig {\n    require_verification := false,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Log Insert Trigger in EdgeDB SDL\nDESCRIPTION: Creates a trigger that inserts a Log object for each new User object. The trigger is executed after insert operations on the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n\n  trigger log_insert after insert for each do (\n    insert Log {\n      action := 'insert',\n      target_name := __new__.name\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policies for BlogPost\nDESCRIPTION: Implementation of access policies for BlogPost type with full and read-only access conditions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype BlogPost {\n  required title: str;\n  required author: User;\n\n  access policy author_has_full_access\n    allow all\n    using (global current_user    ?= .author.id\n      and  global current_country ?= Country.Full) {\n      errmessage := \"User does not have full access\";\n    }\n\n  access policy author_has_read_access\n    allow select\n    using (global current_user    ?= .author.id\n      and  global current_country ?= Country.ReadOnly);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query via POST Request in Gel\nDESCRIPTION: This curl command demonstrates how to send a GraphQL query using a POST request to a Gel instance. It includes query variables and global variables in the JSON payload.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl \\\n    -H \"Content-Type: application/json\" \\\n    -X POST http://localhost:10787/branch/main/graphql \\\n    -d '{ \"query\": \"query getMovie($title: String!) { Movie(filter: {title:{eq: $title}}) { id title }}\", \"variables\": { \"title\": \"The Batman\" }, \"globals\": {\"default::current_user\": \"04e52807-6835-4eaa-999b-952804ab40a5\"}}'\n{\"data\": {...}}\n```\n\n----------------------------------------\n\nTITLE: Enhancing System Prompt with Chat History Context in Python\nDESCRIPTION: Updates the system prompt to instruct the AI to reference previous conversations when they are relevant to the current query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n    + \" You can reference previous conversation with the user that\"\n    + \" are provided to you, if they are relevant, by explicitly referring\"\n    + \" to them by saying as we discussed in the past.\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Schema for Gel Auth\nDESCRIPTION: Bash commands to create and apply a migration for the Gel Auth extension.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ngel migration create\ngel migrate\n```\n\n----------------------------------------\n\nTITLE: Updating Book Data in GraphQL and EdgeQL\nDESCRIPTION: This code snippet demonstrates how to update a book's synopsis and author using both GraphQL and EdgeQL. It filters for a book with the title 'One', sets its synopsis to 'TBD', and updates its author to an Author with the name 'Unknown'. The mutation returns the updated book's id and title.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/mutations.rst#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_book {\n    update_Book(\n        filter: {\n            title: {\n                eq: \"One\"\n            }\n        }\n        data: {\n            synopsis: {\n                set: \"TBD\"\n            }\n            author: {\n                set: {\n        filter: {\n            name: {\n                eq:\n                \"Unknown\"\n            }\n        }\n                }\n            }\n        }\n    ) {\n        id\n        title\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    Upd := (\n        update Book\n        filter\n            Book.title =\n                \"One\"\n        set {\n            synopsis :=\n                \"TBD\",\n            author := (\n            select Author\n            filter\n            Author.name =\n                \"Unknown\"\n            )\n        }\n    )\nselect Upd {\n    id,\n    title\n};\n```\n\n----------------------------------------\n\nTITLE: Introspecting User.name Index in EdgeQL\nDESCRIPTION: This EdgeQL query retrieves the expression of indexes that match the pattern '%.name', which corresponds to the index defined on the User.name property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/indexes.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect Index {\n    expr,\n}\nfilter .expr like '%.name';\n```\n\n----------------------------------------\n\nTITLE: Handling Email Verification for WebAuthn in Node.js\nDESCRIPTION: This function handles the email verification process for WebAuthn authentication. It verifies the token, exchanges it for an auth token, and sets a cookie with the token.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webauthn.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleVerify = async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n  const verification_token = requestUrl.searchParams.get(\"verification_token\");\n  if (!verification_token) {\n    res.status = 400;\n    res.end(\n      `Verify request is missing 'verification_token' search param. The verification email is malformed.`,\n    );\n    return;\n  }\n\n  const cookies = req.headers.cookie?.split(\"; \");\n  const verifier = cookies\n    ?.find((cookie) => cookie.startsWith(\"gel-pkce-verifier=\"))\n    ?.split(\"=\")[1];\n  if (!verifier) {\n    res.status = 400;\n    res.end(\n      `Could not find 'verifier' in the cookie store. Is this the same user agent/browser that started the authorization flow?`,\n    );\n    return;\n  }\n\n  const verifyUrl = new URL(\"verify\", GEL_AUTH_BASE_URL);\n  const verifyResponse = await fetch(verifyUrl.href, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      verification_token,\n      verifier,\n      provider: \"builtin::local_webauthn\",\n    }),\n  });\n\n  if (!verifyResponse.ok) {\n    const text = await verifyResponse.text();\n    res.status = 400;\n    res.end(`Error from the auth server: ${text}`);\n    return;\n  }\n\n  const { code } = await verifyResponse.json();\n\n  const tokenUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n  tokenUrl.searchParams.set(\"code\", code);\n  tokenUrl.searchParams.set(\"verifier\", verifier);\n  const tokenResponse = await fetch(tokenUrl.href, {\n    method: \"get\",\n  });\n\n  if (!tokenResponse.ok) {\n    const text = await tokenResponse.text();\n    res.status = 400;\n    res.end(`Error from the auth server: ${text}`);\n    return;\n  }\n\n  const { auth_token } = await tokenResponse.json();\n  res.writeHead(204, {\n    \"Set-Cookie\": `gel-auth-token=${auth_token}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n  });\n  res.end();\n};\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Schema for Gel Types\nDESCRIPTION: This GraphQL query introspects the 'Query' type to retrieve information about available fields and their arguments.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/introspection.rst#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    __type(name: \"Query\") {\n        name\n        fields {\n            name\n            args {\n                name\n                type {\n                    kind\n                    name\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Indexing in EdgeQL\nDESCRIPTION: Demonstrates how to access array elements using indexing, including positive and negative indices.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select [1, 2, 3][0];\n{1}\ndb> select [(x := 1, y := 1), (x := 2, y := 3.3)][1];\n{(x := 2, y := 3.3)}\ndb> select [1, 2, 3][-1];\n{3}\ndb> select [1, 2, 3][4];\nInvalidValueError: array index 4 is out of bounds\n```\n\n----------------------------------------\n\nTITLE: Defining std::anyint Abstract Numeric Type in EdgeDB\nDESCRIPTION: Defines the 'std::anyint' abstract type, which serves as the base type for integer types int16, int32, and int64.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_5\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anyint\n```\n\n----------------------------------------\n\nTITLE: Set Difference Operation\nDESCRIPTION: Shows how to remove elements that appear in another set using the except operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select {1, 2, 3, 4, 5} except {3, 4, 5, 6, 7};\n{1, 2}\ndb> select {'a', 'b', 'c', 'd', 'e'} except {'c', 'd', 'e', 'f', 'g'};\n{'b', 'a'}\n```\n\n----------------------------------------\n\nTITLE: Using withWarningHandler Method in TypeScript\nDESCRIPTION: Demonstrates setting a custom warning handler that processes EdgeDB query warnings, using a filter operation that might return multiple elements as an example.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst warningHandler = (warnings: errors.GelError[]) => {\n  warnings.forEach((gelError) => {\n    console.warn(\"Warning:\", gelError.message);\n  });\n};\n\nconst clientWithWarningHandler = client.withWarningHandler(warningHandler);\n\nawait clientWithWarningHandler.query(`\n  select User filter .friends.name = \"John\";\n`);\n// Warning: Gel warning: possibly more than one element returned by an expression in a FILTER clause\n```\n\n----------------------------------------\n\nTITLE: Analyzing EdgeQL Query Performance\nDESCRIPTION: Example demonstrating how to analyze a query that selects Hero data with nested relationships to villains and nemeses. The analysis shows execution time, cost, loops, rows, and width metrics for different parts of the query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/analyze.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nanalyze select Hero {\n  name,\n  secret_identity,\n  villains: {\n    name,\n    nemesis: {\n      name\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Movies by Actor\nDESCRIPTION: Finds all movies featuring a specific actor (Keanu Reeves).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Movie(\n        filter: {\n            actors: {full_name: {eq: \"Keanu Reeves\"}}\n        }\n    ) {\n        id\n        title\n        year\n        description\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using if-else for conditional object creation in EdgeQL\nDESCRIPTION: The if-else expression can be used to conditionally create different types of objects based on a boolean flag.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  name := <str>$0,\n  admin := <bool>$1\nselect (insert AdminUser { name := name }) if admin\n  else (insert User { name := name });\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in EdgeQL 6.0+\nDESCRIPTION: Shows how to use string interpolation with \\(expr) syntax to embed expression values directly into strings in EdgeQL version 6.0 and later.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select '1 + 1 = \\(1+1)';\n{'1 + 1 = 2'}\ndb> select User { name := '\\(.first_name) \\(.last_name)' };\n{\n  default::User {\n    name := 'Keanu Reeves',\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Basic Movie Record in EdgeQL\nDESCRIPTION: This snippet demonstrates how to insert a basic movie record into the database. It includes setting the title, year, image, and linking to a director.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/insert.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Movie {\n    title := 'Dune',\n    year := 2020,\n    image := 'dune2020.jpg',\n    directors := (\n        select Person\n        filter\n            .full_name = 'Denis Villeneuve'\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Constraints in SDL\nDESCRIPTION: Example of defining a partial constraint on a User object type that is not enforced when a specific condition is met.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required username: str;\n  deleted: bool;\n\n  # Usernames must be unique unless marked deleted\n  constraint exclusive on (.username) except (.deleted);\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing GraphQL and EdgeQL Variable Usage\nDESCRIPTION: This snippet demonstrates how variables are used in GraphQL queries and their equivalent usage in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($title: String!) {\n    Book(\n      filter: {\n        title: {\n          eq: $title\n        }\n      }\n    ) {\n        title\n        synopsis\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n   Book {\n       title,\n       synopsis,\n   }\nfilter\n    .title = $title;\n```\n\n----------------------------------------\n\nTITLE: Updating Post Messages Endpoint for Search Query Generation in Python\nDESCRIPTION: This code snippet shows the modifications to the post_messages endpoint to incorporate the new search query generation function and update the SearchResult model.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nclass SearchResult(BaseModel):\n    response: str | None = None\n    search_query: str | None = None\n    sources: list[WebSource] | None = None\n\n\n@app.post(\"/messages\", status_code=HTTPStatus.CREATED)\nasync def post_messages(\n    search_terms: SearchTerms,\n    username: str = Query(),\n    chat_id: str = Query(),\n) -> SearchResult:\n    # 1. Fetch chat history\n    chat_history = await get_messages_query(\n        gel_client, username=username, chat_id=chat_id\n    )\n\n    # 2. Add incoming message to Gel\n    _ = await add_message_query(\n        gel_client,\n        username=username,\n        message_role=\"user\",\n        message_body=search_terms.query,\n        sources=[],\n        chat_id=chat_id,\n    )\n\n    # 3. Generate a query and perform googling\n    search_query = await generate_search_query(search_terms.query, chat_history)\n    web_sources = await search_web(search_query)\n\n\n    # 5. Generate answer\n    search_result = await generate_answer(\n        search_terms.query,\n        chat_history,\n        web_sources,\n    )\n    search_result.search_query = search_query  # add search query to the output\n                                               # to see what the bot is searching for\n    # 6. Add LLM response to Gel\n    _ = await add_message_query(\n        gel_client,\n        username=username,\n        message_role=\"assistant\",\n        message_body=search_result.response,\n        sources=[s.url for s in search_result.sources],\n        chat_id=chat_id,\n    )\n\n    # 7. Send result back to the client\n    return search_result\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Object with EdgeDB Query Builder in TypeScript\nDESCRIPTION: Demonstrates how to select a single object using the 'filter_single' key in the EdgeDB query builder. It shows both the standard syntax and a simplified syntax for exclusive properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, (movie) => ({\n  id: true,\n  title: true,\n  release_year: true,\n\n  filter_single: e.op(\n    movie.id,\n    \"=\",\n    e.uuid(\"2053a8b4-49b1-437a-84c8-e1b0291ccd9f\")\n  ),\n}));\n\nconst result = await query.run(client);\n// { id: string; title: string; release_year: number | null }\n\n// Simplified syntax\nconst simplifiedQuery = e.select(e.Movie, (movie) => ({\n  id: true,\n  title: true,\n  release_year: true,\n\n  filter_single: { id: \"2053a8b4-49b1-437a-84c8-e1b0291ccd9f\" },\n}));\n\n// Composite exclusive constraint example\nconst compositeQuery = e.select(e.Movie, (movie) => ({\n  title: true,\n  filter_single: {\n    title: \"The Avengers\",\n    release_year: 2012\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Constraints in SDL\nDESCRIPTION: Demonstrates the creation of reusable, user-defined constraint types in Gel SDL. It defines an abstract 'in_range' constraint and applies it to a property in the 'Player' type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\nabstract constraint in_range(min: anyreal, max: anyreal) {\n  errmessage :=\n    'Value must be in range [{min}, {max}].';\n  using (min <= __subject__ and __subject__ < max);\n}\n\ntype Player {\n  points: int64 {\n    constraint in_range(0, 100);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Altering Function Properties in EdgeQL\nDESCRIPTION: Demonstrates altering a function's volatility and annotations, followed by modifying its implementation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nalter function mysum(a: int64, b: int64) {\n    set volatility := 'Immutable';\n    drop annotation title;\n};\n\nalter function mysum(a: int64, b: int64) {\n    using (\n        select (a + b) * 100\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Gel Schema Definition\nDESCRIPTION: An example Gel schema that defines Person and Movie types along with a Genre scalar type extending an enum. This schema is used as the basis for generating TypeScript interfaces.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type Person {\n    required name: str;\n  }\n\n  scalar type Genre extending enum<Horror, Comedy, Drama>;\n\n  type Movie {\n    required title: str;\n    genre: Genre;\n    multi actors: Person;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Signature Verification in Node.js\nDESCRIPTION: TypeScript implementation for verifying webhook signatures using SHA256 hashing. Validates incoming webhook requests by comparing the signature header with computed hash.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webhooks.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function assertSignature(\n  request: Request,\n  signingKey: string,\n): Promise<boolean> {\n    const signatureHeader = request.headers.get('x-ext-auth-signature-sha256');\n    if (!signatureHeader) {\n      return false;\n    }\n\n    const requestBody = await request.text();\n    const encoder = new TextEncoder();\n    const data = encoder.encode(requestBody);\n    const key = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(signingKey),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['sign']\n    );\n    const signature = await crypto.subtle.sign('HMAC', key, data);\n    const signatureHex = Buffer.from(signature).toString('hex');\n\n    assert.strictEqual(\n      signatureHeader,\n      signatureHex,\n      \"Signature header is set, but the signature is invalid\"\n    );\n\n    return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Array-based Magnitude Function\nDESCRIPTION: Defines a function that calculates magnitude for an array of float values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nfunction magnitude(xs: array<float64>) -> float64\n  using (\n    with x := array_unpack(xs)\n    select math::sqrt(sum(x * x))\n  );\n```\n\n----------------------------------------\n\nTITLE: Constructing Arrays in EdgeQL\nDESCRIPTION: Demonstrates how to construct arrays using square bracket notation in EdgeQL. Arrays can contain elements of the same type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select [1, 2, 3];\n{[1, 2, 3]}\ndb> select [('a', 1), ('b', 2), ('c', 3)];\n{[('a', 1), ('b', 2), ('c', 3)]}\n```\n\n----------------------------------------\n\nTITLE: Tuple Parameters in EdgeQL\nDESCRIPTION: Shows how to use named and unnamed tuple parameters in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/parameters.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <tuple<str, bool>>$var;\nselect <optional tuple<str, bool>>$var;\nselect <tuple<name: str, flag: bool>>$var;\nselect <optional tuple<name: str, flag: bool>>$var;\n```\n\n----------------------------------------\n\nTITLE: Specifying Conflict Property in EdgeQL Insert\nDESCRIPTION: This snippet demonstrates how to specify which property should be considered when detecting conflicts during an insert operation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/insert.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\n# Try to create a new User\ninsert User {\n    name := \"Alice\",\n    image := \"default_avatar.jpg\",\n}\n# and do nothing if a User with this name already exists\nunless conflict on .name\n```\n\n----------------------------------------\n\nTITLE: Selecting Movie with Related Data in EdgeQL\nDESCRIPTION: Demonstrates how to select a movie by UUID with its associated actors and reviews including author details.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n    id,\n    title,\n    year,\n    description,\n\n    actors: {\n        id,\n        full_name,\n    },\n\n    reviews := .<movie[is Review] {\n        id,\n        body,\n        rating,\n        author: {\n            id,\n            name,\n        }\n    },\n}\nfilter .id = <uuid>'09c34154-4148-11ea-9c68-5375ca908326'\n```\n\n----------------------------------------\n\nTITLE: Querying Properties with Mutation Rewrites in EdgeQL\nDESCRIPTION: This query finds all properties in the default schema that have mutation rewrites. It returns the object type name, property name, and the kinds of rewrites associated with each property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/mutation_rewrites.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect schema::ObjectType {\n  name,\n  properties := (\n    select .properties {\n       name,\n       rewrites: {\n         kind\n       }\n    } filter exists .rewrites\n  )\n} filter .name ilike 'default::%'\nand exists .properties.rewrites;\n```\n\n----------------------------------------\n\nTITLE: Defining Link Properties in EdgeDB SDL\nDESCRIPTION: Demonstrates how to define link properties on a Person type with a family_members link. Link properties can store metadata about the link, such as the relationship between family members.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_10\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  name: str;\n  multi family_members: Person {\n    relationship: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting ext::ai Configuration\nDESCRIPTION: Demonstrates how to reset the AI extension configuration using EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current branch\nreset ext::ai::Config::indexer_naptime;\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Constraint List Table Definition\nDESCRIPTION: RST formatted list-table showing all available EdgeDB constraints including exclusive, expression, one_of, value ranges, length restrictions and regexp pattern matching. Each constraint is documented with its purpose and applicability.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraint_table.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n\n    * - :eql:constraint:`exclusive`\n      - Enforce uniqueness (disallow duplicate values)\n\n    * - :eql:constraint:`expression`\n      - Custom constraint expression (followed by keyword ``on``)\n\n    * - :eql:constraint:`one_of`\n      - A list of allowable values\n\n    * - :eql:constraint:`max_value`\n      - Maximum value numerically/lexicographically\n\n    * - :eql:constraint:`max_ex_value`\n      - Maximum value numerically/lexicographically (exclusive range)\n\n    * - :eql:constraint:`min_value`\n      - Minimum value numerically/lexicographically\n\n    * - :eql:constraint:`min_ex_value`\n      - Minimum value numerically/lexicographically (exclusive range)\n\n    * - :eql:constraint:`max_len_value`\n      - Maximum length (``str`` only)\n\n    * - :eql:constraint:`min_len_value`\n      - Minimum length (``str`` only)\n\n    * - :eql:constraint:`regexp`\n      - Regex constraint (``str`` only)\n```\n\n----------------------------------------\n\nTITLE: Group Using Alias in EdgeQL\nDESCRIPTION: Groups movies by release year using an alias 'year' defined in the using clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/group.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie {title}\nusing year := .release_year by year;\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Less Than or Equal Examples\nDESCRIPTION: Shows usage of the less than or equal operator (<=) for comparing values. Includes examples with numbers, strings, tuples and empty set handling.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 1 <= 2;\n{true}\ndb> select 2 <= 2;\n{true}\ndb> select 3 <= 2;\n{false}\ndb> select 'hello' <= 'world';\n{true}\ndb> select (1, 'hello') <= (1, 'world');\n{true}\n```\n\n----------------------------------------\n\nTITLE: Using array_agg() function in EdgeQL\nDESCRIPTION: This example demonstrates the array_agg() function, which converts a set of elements into a singleton array.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/cardinality.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select array_agg({1,2,3});\n{[1, 2, 3]}\n```\n\n----------------------------------------\n\nTITLE: Defining std::anyobject Abstract Type in EdgeDB\nDESCRIPTION: Defines the 'std::anyobject' abstract type, which represents a generic object. It's used for polymorphic parameters and conforms to the actual passed type, unlike BaseObject which only has an 'id' property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_1\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anyobject\n```\n\n----------------------------------------\n\nTITLE: Array Unpacking in EdgeQL\nDESCRIPTION: Shows how to use the array_unpack function to convert an array into a set of elements.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select array_unpack([2, 3, 5]);\n{3, 2, 5}\n\ndb> select enumerate(array_unpack([2, 3, 5]));\n{(1, 3), (0, 2), (2, 5)}\n```\n\n----------------------------------------\n\nTITLE: Basic String Function Definition in SDL\nDESCRIPTION: Defines a simple function that appends an exclamation mark to a string input.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nfunction exclamation(word: str) -> str\n  using (word ++ '!');\n```\n\n----------------------------------------\n\nTITLE: Altering a Constraint's Error Message (EdgeQL)\nDESCRIPTION: This snippet demonstrates how to change the error message on the minimum value constraint of the 'score' property in the 'User' type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User alter property score\n  alter constraint min_value(0)\n    set errmessage := 'Score cannot be negative';\n```\n\n----------------------------------------\n\nTITLE: Safe Array Element Access in EdgeQL\nDESCRIPTION: Demonstrates the array_get function, which safely retrieves an array element by index, returning a default value if out of bounds.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select array_get([2, 3, 5], 1);\n{3}\ndb> select array_get([2, 3, 5], 100);\n{}\ndb> select array_get([2, 3, 5], 100, default := 42);\n{42}\n```\n\n----------------------------------------\n\nTITLE: Database Operations for Storing Embeddings in TypeScript\nDESCRIPTION: Second part of the storeEmbeddings function that handles the database operations. It deletes old data and then performs a bulk insert of the new Section objects into the Gel database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nasync function storeEmbeddings() {\n  // The parts we just talked about\n\n  // Delete old data from the DB.\n  await e.delete(e.Section).run(client);\n\n  // Bulk-insert all data into Gel database.\n  const query = e.params({ sections: e.json }, ({ sections }) => {\n    return e.for(e.json_array_unpack(sections), (section) => {\n      return e.insert(e.Section, {\n        content: e.cast(e.str, section.content!),\n        tokens: e.cast(e.int16, section.tokens!),\n        embedding: e.cast(e.OpenAIEmbedding, section.embedding!),\n      });\n    });\n  });\n\n  await query.run(client, { sections });\n  console.log(\"Embedding generation complete\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the AI Extension in EdgeQL Schema\nDESCRIPTION: Shows how to enable the Gel AI extension in your application schema using SDL. This is the first required step for using any AI capabilities.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension ai;\n```\n\n----------------------------------------\n\nTITLE: Named Argument Function Call Example\nDESCRIPTION: Shows how to use named arguments in a function call with array_get(), demonstrating the use of the 'default' named parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/functions.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect array_get(['hello', 'world'], 10, default := 'n/a');\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Context with Gel Auth in Next.js\nDESCRIPTION: TypeScript code to create tRPC context with Gel Auth session for Next.js application.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initTRPC } from '@trpc/server';\nimport { headers } from \"next/headers\";\nimport { auth } from \"src/gel.ts\";\n\n// Create tRPC context with session and Gel client\nexport const createTRPCContext = async () => {\n  const session = await auth.getSession(); // Retrieve session from Gel Auth\n\n  return {\n    session, // Pass the session to the context\n  };\n};\n\n// Initialize tRPC with context\nconst t = initTRPC.context<typeof createTRPCContext>().create({});\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Client with Environment Variables - JavaScript\nDESCRIPTION: Creates a Gel client instance using environment variables for connection configuration, demonstrating a simple query execution.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nconst client = createClient();\nconst result = await client.querySingle(\"select 2 + 2;\");\nconsole.log(result); // 4\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Updating Actor Information\nDESCRIPTION: This GraphQL mutation shows how to update an actor's information, specifically changing the age of an actor filtered by name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ActorMutation {\n  __typename\n  updateActors(filterName: \"Robert Downey Jr.\", age: 60) {\n    name\n    age\n    height\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Villains with Computed Fields in EdgeQL\nDESCRIPTION: Demonstrates a select query on the Villain type with a computed field for the uppercase name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Villain {\n  name,\n  name_upper := str_upper(.name)\n};\n```\n\n----------------------------------------\n\nTITLE: Using Type Intersection Operator in EdgeQL\nDESCRIPTION: Shows how to use the type intersection operator to filter a set based on its type, allowing access to type-specific properties like 'title' from the Issue type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User.<owner;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User.<owner[is Issue];\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User.<owner[is Issue].title;\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Object Fields in EdgeQL\nDESCRIPTION: Demonstrates how to access fields of JSON objects using key notation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/json.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect to_json('{\"a\": 2, \"b\": 5}')['b'];\nselect j := <json>(schema::Type {\n    name,\n    timestamp := cal::to_local_date(datetime_current(), 'UTC')\n})\nfilter j['name'] = <json>'std::bool';\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Server with tRPC\nDESCRIPTION: TypeScript code to set up an Express server with tRPC integration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport { appRouter } from './routers/_app';\nimport * as trpcExpress from '@trpc/server/adapters/express';\n\nconst app = express();\n\napp.use(\n  '/trpc',\n  trpcExpress.createExpressMiddleware({\n    router: appRouter,\n  })\n);\n\napp.listen(4000, () => {\n  console.log('Server is running on port 4000');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tuple Types in EdgeQL Queries\nDESCRIPTION: Examples of using tuple types in EdgeQL queries, including casting to tuple types, creating named tuples, and checking if values match tuple types. These examples demonstrate type conversions and type checking with tuples.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/tuple.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <tuple<int64, str>>('1', 3);\n{(1, '3')}\ndb> select <tuple<x: int64, y: int64>>(1, 2);\n{(x := 1, y := 2)}\ndb> select (1, '3') is (tuple<int64, str>);\n{true}\ndb> select ([1, 2], 'a') is (tuple<array<int64>, str>);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Blocking Gel AI Client in Python\nDESCRIPTION: Example of creating and using a blocking Gel AI client to query astronomical information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/python.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport gel\nimport gel.ai\n\nclient = gel.create_client()\ngpt4ai = gel.ai.create_rag_client(\n    client,\n    model=\"gpt-4-turbo-preview\"\n)\n\nastronomy_ai = gpt4ai.with_context(\n    query=\"Astronomy\"\n)\n\nprint(\n    astronomy_ai.query_rag(\"What color is the sky on Mars?\")\n);\n\nfor data in astronomy_ai.stream_rag(\"What color is the sky on Mars?\"):\n    print(data)\n```\n\n----------------------------------------\n\nTITLE: Defining BaseEmbeddingModel Abstract Class in Python\nDESCRIPTION: Abstract base class for embedding models used with GelVectorstore. It defines methods for converting input data into vector representations, getting embedding dimensions, and specifying the expected input data type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass BaseEmbeddingModel:\n    def __call__(self, item) -> list[float]:\n        # Must be implemented in subclasses\n        pass\n\n    def dimensions(self) -> int:\n        # Must be implemented in subclasses\n        pass\n\n    def target_type(self) -> TypeVar:\n        # Must be implemented in subclasses\n        pass\n```\n\n----------------------------------------\n\nTITLE: Deleting an Event in EdgeDB\nDESCRIPTION: EdgeQL query to delete an event by name and return the deleted event's details.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_20\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    delete Event filter .name = <str>$name\n) {name, address, schedule, host : {name}};\n```\n\n----------------------------------------\n\nTITLE: Processing Similar Chats for LLM Prompt in Python\nDESCRIPTION: Adds code to format similar chats into a structured format for inclusion in the LLM prompt. This enables the AI to reference past conversations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nprompt += \"Similar chats with the same user:\\n\"\n\nformatted_chats = []\nfor i, chat in enumerate(similar_chats):\n    formatted_chat = f\"Chat {i}: \\n\"\n    for message in chat.messages:\n        formatted_chat += f\"{message.role}: {message.body}\\n\"\n    formatted_chats.append(formatted_chat)\n\nprompt += \"\\n\".join(formatted_chats)\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects Using Parameterized Queries in EdgeDB TypeScript\nDESCRIPTION: Shows how to delete Movie objects using a parameterized query to pass an array of titles, which is more secure and reusable than inlining values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst titles = [\"The Avengers\", \"Doctor Strange 2\"];\nconst query = e.params(\n  { titles: e.array(e.str) },\n  (params) => e.delete(e.Movie, (movie) => ({\n    filter: e.op(movie.title, \"in\", e.array_unpack(params.titles)),\n  }))\n);\n\nconst result = await query.run(client, { titles });\n// { id: string }[]\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Utility Types with Generated Interfaces\nDESCRIPTION: Example of manipulating the generated interfaces with TypeScript utility types like Omit to create a function for creating a new movie without specifying an ID.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createMovie(data: Omit<Movie, \"id\">) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Migration Groups in EdgeQL\nDESCRIPTION: This EdgeQL query groups migrations by their generation method, showing the name and script for each migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_29\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup schema::Migration {\n    name,\n    script\n} by .generated_by;\n```\n\n----------------------------------------\n\nTITLE: Filtering Movies by Actor in EdgeQL\nDESCRIPTION: Shows how to select movies featuring a specific actor (Keanu Reeves).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n    id,\n    title,\n    year,\n    description,\n}\nfilter .actors.full_name = 'Keanu Reeves'\n```\n\n----------------------------------------\n\nTITLE: Using contains() with arrays in EdgeQL\nDESCRIPTION: Demonstrates how the contains() function works with array types in EdgeQL. The function returns true if the array contains the specified element.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select contains([2, 5, 7, 2, 100], 2);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Filtering Initialized Accounts in EdgeQL\nDESCRIPTION: Shows how to filter accounts that have an initialized 'steps' field but have not completed 5 steps.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Account filter .steps != 5;\n```\n\n----------------------------------------\n\nTITLE: Gel Transactions Example\nDESCRIPTION: Examples of using transactions in both blocking and async contexts\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/index.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor tx in client.transaction():\n    with tx:\n        tx.execute(\"INSERT User {name := 'Don'}\")\n```\n\nLANGUAGE: python\nCODE:\n```\nasync for tx in client.transaction():\n    async with tx:\n        await tx.execute(\"INSERT User {name := 'Don'}\")\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Execute Command Example\nDESCRIPTION: Demonstrates executing an EdgeDB command that inserts multiple records using a for loop. No results are returned.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.execute(`\n  for x in {100, 200, 300}\n  insert MyType { a := x };\n`)\n```\n\n----------------------------------------\n\nTITLE: Querying Auth Configuration with EdgeQL\nDESCRIPTION: EdgeQL query to retrieve configured authentication providers from the database, used to dynamically build a custom UI. Returns provider names and display names for OAuth providers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/email_password.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect cfg::Config.extensions[is ext::auth::AuthConfig].providers {\n    name,\n    [is ext::auth::OAuthProviderConfig].display_name,\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Available Auth Providers with EdgeQL\nDESCRIPTION: This query retrieves the configured authentication providers from the database, allowing applications to dynamically build the UI based on available login options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect cfg::Config.extensions[is ext::auth::AuthConfig].providers {\n    name,\n    [is ext::auth::OAuthProviderConfig].display_name,\n};\n```\n\n----------------------------------------\n\nTITLE: Activating pgvector Extension in SDL\nDESCRIPTION: Shows how to activate the pgvector extension in your schema using the SDL extension mechanism. This enables access to vector types and distance functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension pgvector;\n```\n\n----------------------------------------\n\nTITLE: Defining Message Stop Event in JSON\nDESCRIPTION: This JSON snippet shows the structure for a message_stop event, which marks the end of the entire message in the SSE stream.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"message_stop\"}\n```\n\n----------------------------------------\n\nTITLE: Selecting Objects with EdgeDB Query Builder in TypeScript\nDESCRIPTION: Shows how to select objects and specific properties using the EdgeDB query builder. It also demonstrates how to select all properties of an object using the spread operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, () => ({\n  id: true,\n  title: true,\n}));\n\nconst result = await query.run(client);\n// { id: string; title: string; }[]\n\nconst queryAll = e.select(e.Movie, () => ({\n  ...e.Movie['*']\n}));\n\nconst resultAll = await queryAll.run(client);\n/*\n  {\n    id: string;\n    title: string;\n    release_year: number | null;  # optional property\n  }[]\n*/\n```\n\n----------------------------------------\n\nTITLE: Filtering, Ordering, and Pagination in EdgeQL\nDESCRIPTION: Shows how to use 'with' blocks to add filters, ordering, and pagination clauses to queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> with x := {1, 2, 3, 4, 5}\n... select x\n... filter x >= 3;\n{3, 4, 5}\ndb> with x := {1, 2, 3, 4, 5}\n... select x\n... order by x desc;\n{5, 4, 3, 2, 1}\ndb> with x := {1, 2, 3, 4, 5}\n... select x\n... offset 1 limit 3;\n{2, 3, 4}\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints on Object Types in SDL\nDESCRIPTION: Example of defining a constraint on a ConstrainedVector object type to enforce a maximum magnitude.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype ConstrainedVector {\n  required x: float64;\n  required y: float64;\n\n  constraint expression on (\n    (.x ^ 2 + .y ^ 2) ^ 0.5 <= 5\n    # or, long form: `(__subject__.x + __subject__.y) ^ 0.5 <= 5`\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Assignment Cast Example in EdgeQL\nDESCRIPTION: Demonstrates automatic type casting during object insertion, converting int64 to int16.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/casts.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\n# Automatically cast a literal 42 (which is int64\n# by default) into an int16 value.\ninsert MyObject {\n    int16_val := 42\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Path Scoping in EdgeQL\nDESCRIPTION: Shows how the new simple scoping algorithm works with shapes and filters in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/path_resolution.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User {\n  name := User.first_name ++ ' ' ++ User.last_name\n}\nfilter User.first_name = 'Peter'\n```\n\n----------------------------------------\n\nTITLE: Automatic With Block Creation in TypeScript\nDESCRIPTION: Shows how expressions occurring multiple times are automatically extracted into a 'with' block during query rendering in TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = e.int64(3);\nconst y = e.select(e.op(x, '^', x));\n\ny.toEdgeQL();\n// with x := 3\n// select x ^ x\n\nconst result = await y.run(client);\n// => 27\n```\n\n----------------------------------------\n\nTITLE: Nested Modules with Function Definition\nDESCRIPTION: Complex example showing nested module structure with type and function definitions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nmodule dracula {\n  type Person {\n    required name: str;\n    multi places_visited: City;\n    strength: int16;\n  }\n\n  module combat {\n    function fight(\n      one: dracula::Person,\n      two: dracula::Person\n    ) -> str\n      using (\n        (one.name ?? 'Fighter 1') ++ ' wins!'\n        IF (one.strength ?? 0) > (two.strength ?? 0)\n        ELSE (two.name ?? 'Fighter 2') ++ ' wins!'\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Deferred Index for Message Embeddings in Gel Schema\nDESCRIPTION: This SDL diff shows how to add a deferred index to the Message type for automatically creating and updating message embeddings using the OpenAI model.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_40\n\nLANGUAGE: sdl\nCODE:\n```\ntype Message {\n    role: str;\n    body: str;\n    timestamp: datetime {\n        default := datetime_current();\n    }\n    multi sources: str;\n\n    deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n        on (.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Hero with Optional Property Omitted in EdgeQL\nDESCRIPTION: This EdgeQL example shows how to insert a Hero object while omitting an optional property (secret_identity).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Hero {\n  name := \"Spider-Man\"\n  # secret_identity is omitted\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting Objects in EdgeQL and TypeScript\nDESCRIPTION: Demonstrates how to select objects and specify which properties to retrieve using shapes in both EdgeQL and TypeScript with the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  id,\n  title\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, () => ({\n  id: true,\n  title: true\n}));\nconst result = await query.run(client);\n// {id: string; title: string; }[]\n\n// To select all properties of an object, use the\n// spread operator with the special \"*\"\" property:\nconst query = e.select(e.Movie, () => ({\n  ...e.Movie['*']\n}));\n```\n\n----------------------------------------\n\nTITLE: Backlink Computed Property in EdgeDB SDL\nDESCRIPTION: Demonstrates using backlinks to create a computed property that shows all blog posts authored by a user.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/computeds.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype BlogPost {\n  title: str;\n  author: User;\n}\n\ntype User {\n  name: str;\n  multi blog_posts := .<author[is BlogPost]\n}\n```\n\n----------------------------------------\n\nTITLE: Using coalesce for select-or-insert pattern in EdgeQL\nDESCRIPTION: The coalesce operator can implement a \"select or insert if missing\" pattern in a single expression.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n  (select User filter .name = 'Alice') ??\n  (insert User { name := 'Alice' });\n```\n\n----------------------------------------\n\nTITLE: Creating Access Policy in EdgeDB\nDESCRIPTION: Syntax for creating a new access policy on a type. Defines rules for allowing/denying actions with optional conditions and custom error messages.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_14\n\nLANGUAGE: eql\nCODE:\n```\n[ with <with-item> [, ...] ]\n{ create | alter } type <TypeName> \"{\"\n  [ ... ]\n  create access policy <name>\n    [ when (<condition>) ; ]\n    { allow | deny } action [, action ... ; ]\n    [ using (<expr>) ; ]\n    [ \"{\"\n       [ set errmessage := value ; ]\n       [ create annotation <annotation-name> := value ; ]\n      \"}\" ]\n\"}\"\n```\n\n----------------------------------------\n\nTITLE: Exclusive Constraint on Links\nDESCRIPTION: Shows how to add an exclusive constraint to ensure unique link targets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  name: str;\n}\n\ntype GroupChat {\n  required multi members: Person {\n    constraint exclusive;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Variables and Country Enum\nDESCRIPTION: Extended schema showing the addition of global variables for user authentication and country-based access control.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Country extending enum<Full, ReadOnly, None>;\nglobal current_user: uuid;\nrequired global current_country: Country {\n  default := Country.None\n}\n\ntype User {\n  required email: str { constraint exclusive; }\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenating JSON Values in EdgeQL\nDESCRIPTION: Shows how to concatenate JSON arrays, objects, and strings using the ++ operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/json.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect to_json('[1, 2]') ++ to_json('[3]');\nselect to_json('{\"a\": 1}') ++ to_json('{\"b\": 2}');\nselect to_json('{\"a\": 1, \"b\": 2}') ++ to_json('{\"b\": 3}');\nselect to_json('\"123\"') ++ to_json('\"456\"');\n```\n\n----------------------------------------\n\nTITLE: Creating a Computed Property in EdgeQL\nDESCRIPTION: Defines a new computed property 'number_of_connections' on the 'User' object type that counts the number of interests.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  create property number_of_connections :=\n    count(.interests)\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Literals in Gel TypeScript\nDESCRIPTION: Shows how to use e.literal to create literals for various types, including primitives and collection types like tuples and arrays, by specifying a type and a value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\ne.literal(e.str, \"sup\");\n// equivalent to: e.str(\"sup\")\n\ne.literal(e.array(e.int16), [1, 2, 3]);\n// <array<int16>>[1, 2, 3]\n\ne.literal(e.tuple([e.str, e.int64]), ['baz', 9000]);\n// <tuple<str, int64>>(\"Goku\", 9000)\n\ne.literal(\n  e.tuple({name: e.str, power_level: e.int64}),\n  {name: 'Goku', power_level: 9000}\n);\n// <tuple<name: str, power_level: bool>>(\"asdf\", false)\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Release Savepoint Basic Example\nDESCRIPTION: Demonstrates the basic usage of release savepoint within a transaction context. Shows how to start a transaction, declare a savepoint, release it, and then rollback the transaction.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_sp_release.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nstart transaction;\n# ...\ndeclare savepoint f1;\n# ...\nrelease savepoint f1;\n# ...\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Declaring Multi-Cardinality Links\nDESCRIPTION: Shows how to declare a many-to-many relationship using the multi keyword.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  multi friends: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping with Cube in TypeScript and EdgeQL\nDESCRIPTION: Demonstrates the use of the cube function for grouping in both TypeScript and EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\ne.group(e.Movie, (movie) => {\n  const release_year = movie.release_year;\n  const first_letter = movie.title[0];\n  const cast_size = e.count(movie.actors);\n  return {\n    title: true,\n    by: e.group.cube({release_year, first_letter, cast_size})\n  };\n});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie { title }\nusing\n  first_letter := .title[0],\n  cast_size := count(.actors)\nby cube(.release_year, first_letter, cast_size)\n```\n\n----------------------------------------\n\nTITLE: Normalized Discrete Ranges in EdgeQL\nDESCRIPTION: Demonstration of range normalization for discrete types where boundaries are adjusted automatically.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range(1, 10) = range(1, 9, inc_upper := true);\n{true}\ndb> select range(1, 10) = range(0, 10, inc_lower := false);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Initial Migration in EdgeDB\nDESCRIPTION: Commands to create and apply the first migration for a Character type schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\ndid you create object type 'default::Character'? [y,n,l,c,b,s,q,?]\n> y\nCreated ./dbschema/migrations/00001.edgeql, id:\nm1xvu7o4z5f5xfwuun2vee2cryvvzh5lfilwgkulmqpifo5m3dnd6a\n$ gel migrate\nApplied m1xvu7o4z5f5xfwuun2vee2cryvvzh5lfilwgkulmqpifo5m3dnd6a\n(00001.edgeql)\n```\n\n----------------------------------------\n\nTITLE: Linking to Existing Object with Link Property\nDESCRIPTION: Demonstrates how to insert a Person while linking to an existing Person with a strength property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Person {\n  name := \"Bob\",\n  friends := (\n    select detached Person {\n      @strength := 3.14\n    }\n    filter .name = \"Alice\"\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Nested Objects in EdgeQL\nDESCRIPTION: This snippet demonstrates how to insert several nested objects at once. It creates a new review and a new user in one step, while linking to an existing movie.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/insert.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\n# Create a new review and a new user in one step.\ninsert Review {\n    body := 'Dune is cool',\n    rating := 5,\n    # The movie record already exists, so select it.\n    movie := (\n        select Movie\n        filter\n            .title = 'Dune'\n            and\n            .year = 2020\n        # the limit is needed to satisfy the single\n        # link requirement validation\n        limit 1\n    ),\n    # This is a new user, so insert one.\n    author := (\n        insert User {\n            name := 'dune_fan_2020',\n            image := 'default_avatar.jpg',\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'with' Block for Detached References in EdgeQL\nDESCRIPTION: Demonstrates how to use the 'with' block to create detached references to the same type (User) for use in an update statement. This allows referencing the same type multiple times in different contexts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nwith U1 := User,\n     U2 := User\nupdate User\nfilter .name = 'Dave'\nset {\n    friends := (select U1 filter .name = 'Alice'),\n    coworkers := (select U2 filter .name = 'Bob')\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Migration Status Command in CLI\nDESCRIPTION: This snippet shows the basic syntax for running the 'gel migration status' command. It allows users to view the current migration state of the schema in a Gel instance compared to the migrations stored in the schema directory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/gel_migration_status.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. cli:synopsis::\n\n    gel migration status [<options>]\n```\n\n----------------------------------------\n\nTITLE: Defining Type with Constraints and Defaults in EdgeDB SDL\nDESCRIPTION: Illustrates the creation of a 'Review' type with various property constraints, default values, and links to other object types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/objects.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Review {\n    required body: str;\n    required rating: int64 {\n        constraint min_value(0);\n        constraint max_value(5);\n    }\n    required flag: bool {\n        default := False;\n    }\n\n    required author: User;\n    required movie: Movie;\n\n    required creation_time: datetime {\n        default := datetime_current();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Query with Conditions in TypeScript\nDESCRIPTION: Demonstrates how to update objects with conditional logic and reference current values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\ne.update(e.Movie, (movie) => ({\n  filter: e.op(movie.title[0], '=', ' '),\n  set: {\n    title: e.str_trim(movie.title)\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Inserting Post and User Objects in EdgeDB\nDESCRIPTION: This snippet defines multiple Post objects, each associated with a User object. It includes the post body, user name, and optional notes. The code demonstrates how to structure nested object definitions in EdgeDB.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_14\n\nLANGUAGE: EdgeDB\nCODE:\n```\n@note: 'rendering glitch',\n          },\n          default::Post {\n            body: 'Funny you ask, Alice. I actually work at Gel!',\n            user: default::User {name: 'Dana'},\n            @note: 'follow-up',\n          },\n          default::Post {\n            body: 'Pineapple on pizza? No way! It\\'s a crime against taste buds.',\n            user: default::User {name: 'Billie'},\n            @note: {},\n          },\n        },\n      },\n    }\n\n.. lint-on\n```\n\n----------------------------------------\n\nTITLE: Using contains() with JSON in EdgeQL\nDESCRIPTION: Demonstrates how the contains() function works with JSON types in EdgeQL. The function returns true if the JSON data contains the specified element.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> with haystack := to_json('{\n...   \"city\": \"Baerlon\",\n...   \"city\": \"Caemlyn\"\n... }'),\n... needle := to_json('{\n...   \"city\": \"Caemlyn\"\n... }'),\n... select contains(haystack, needle);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Using With Blocks for Readable Data Return in EdgeQL\nDESCRIPTION: Demonstrates how to use a with block to make returning additional data from an update more readable.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nwith UpdatedHero := (update Hero\n  filter .name = \"Hawkeye\"\n  set { name := \"Ronin\" }\n)\nselect UpdatedHero {\n  id,\n  name\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic String Type Casting in EdgeQL\nDESCRIPTION: Shows examples of casting between strings and other primitive types in EdgeQL, including numbers, booleans, and Unicode strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <str>42;\n{'42'}\ndb> select <bool>'true';\n{true}\ndb> select \"I ❤️ Gel\";\n{'I ❤️ Gel'}\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating User Objects with Friends Relationships in EdgeDB\nDESCRIPTION: Creates three User objects and updates them to establish friend relationships between each user and all other users.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_35\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert User {\n... name := 'User 1'\n... };\n{default::User {id: d44a19bc-8bc1-11ee-8f28-47d7ec5238fe}}\ndb> insert User {\n... name := 'User 2'\n... };\n{default::User {id: d5f941c0-8bc1-11ee-8f28-b3f56009a7b0}}\ndb> insert User {\n... name := 'User 3'\n... };\n{default::User {id: d79cb03e-8bc1-11ee-8f28-43fe3f68004c}}\ndb> update User set {\n...    friends := (select detached User filter User.name != .name)\n...  };\n```\n\n----------------------------------------\n\nTITLE: Conditional Trigger for Person Update in EdgeDB SDL\nDESCRIPTION: Defines a trigger that only logs updates when the name actually changes, using a 'when' clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl-invalid\nCODE:\n```\ntrigger log_update after update for each\nwhen (__old__.name != __new__.name)\ndo (\n  insert Log {\n    action := 'update',\n    target_name := __new__.name,\n    change := __old__.name ++ '->' ++ __new__.name\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Gel Schema\nDESCRIPTION: Extends the default Gel schema to define custom data models for Movies and Persons. This schema can be used in the Cloudflare Worker code.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type Movie {\n    required title: str {\n      constraint exclusive;\n    };\n    multi actors: Person;\n  }\n\n  type Person {\n    required name: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Project for GraphQL API\nDESCRIPTION: Commands to initialize a new Gel project and create a database instance named 'strawberry_crud'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init\nInitializing project...\n\nSpecify the name of Gel instance to use with this project\n[default: strawberry_crud]:\n> strawberry_crud\n\nDo you want to start instance automatically on login? [y/n]\n> y\nChecking Gel versions...\n```\n\n----------------------------------------\n\nTITLE: Basic Group By Release Year in EdgeQL\nDESCRIPTION: Simple grouping of movies by their release year, demonstrating the basic group statement structure and output format.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/group.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie by .release_year;\n```\n\n----------------------------------------\n\nTITLE: Using Optional Parameters in EdgeDB Queries with TypeScript\nDESCRIPTION: Demonstrates how to define and use optional parameters in EdgeDB queries using the e.optional function. This allows for flexible query execution with or without certain parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.params(\n  {\n    title: e.str,\n    duration: e.optional(e.duration),\n  },\n  (params) => {\n    return e.insert(e.Movie, {\n      title: params.title,\n      duration: params.duration,\n    });\n  }\n);\n\n// works with duration\nconst result = await query.run(client, {\n  title: \"The Eternals\",\n  duration: Duration.from({hours: 2, minutes: 3})\n});\n\n// or without duration\nconst result = await query.run(client, { title: \"The Eternals\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Options in EdgeDB Python Client\nDESCRIPTION: Class definition for TransactionOptions that allows customizing transaction isolation level, read-only status, and deferrable behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/advanced.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TransactionOptions(isolation=IsolationLevel.Serializable, readonly=False, deferrable=False):\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Match All Example - EdgeQL\nDESCRIPTION: Demonstrates re_match_all function finding all regex matches in string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_21\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select re_match_all(r'a\\w+', 'an abstract concept');\n{['an'], ['abstract']}\n```\n\n----------------------------------------\n\nTITLE: Querying Characters with Their Classes in EdgeDB\nDESCRIPTION: This query selects all Characters and their associated CharacterClass names, demonstrating the result of the previous migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_36\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Character {\n    name,\n    class: {\n        name\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Functions in EdgeQL and TypeScript\nDESCRIPTION: Shows how to use various built-in functions in EdgeQL and their equivalent expressions in TypeScript using the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect str_upper('oh hi mark');\nselect len('oh hi mark');\nselect uuid_generate_v1mc();\nselect contains(['a', 'b', 'c'], 'd');\n```\n\nLANGUAGE: typescript\nCODE:\n```\ne.str_upper(\"oh hi mark\");\n// string\ne.len(\"oh hi mark\");\n// number\ne.uuid_generate_v1mc();\n// string\ne.contains([\"a\", \"b\", \"c\"], \"d\");\n// boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Schema Types in SDL\nDESCRIPTION: Defines the basic schema types User, BlogPost and Comment with their relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/paths.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str;\n  multi friends: User;\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n}\n\ntype Comment {\n  required text: str;\n  required author: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Ordering Input and Enums\nDESCRIPTION: This snippet defines the structure for ordering in GraphQL, including an input type for ordering and enums for direction and null ordering.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ninput Ordering {\n    dir: directionEnum\n    nulls: nullsOrderingEnum\n}\n\nenum directionEnum {\n    ASC\n    DESC\n}\n\nenum nullsOrderingEnum {\n    SMALLEST    # null < any other value\n    BIGGEST     # null > any other value\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Provider\nDESCRIPTION: Sets up SMTP configuration for email-based authentication features.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current branch\n  insert cfg::SMTPProviderConfig {\n    name := 'local_mailpit',\n    sender := 'hello@example.com',\n    host := 'localhost',\n    port := <int32>1025,\n    username := 'smtpuser',\n    password := 'smtppassword',\n    security := 'STARTTLSOrPlainText',\n    validate_certs := false,\n    timeout_per_email := <duration>'60 seconds',\n    timeout_per_attempt := <duration>'15 seconds',\n  };\n```\n\n----------------------------------------\n\nTITLE: Message Start Event Format for Streaming RAG Response\nDESCRIPTION: The first event in a streaming RAG response using Server-Sent Events (SSE). This event marks the beginning of the message and includes message identification, model information, and initial token usage statistics.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"message_start\",\n  \"message\": {\n    \"id\": \"<message_id>\",\n    \"role\": \"assistant\",\n    \"model\": \"<model_name>\",\n    \"usage\": { \"prompt_tokens\": 10 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Standard Library Functions and Operators in Gel TypeScript\nDESCRIPTION: Demonstrates how to use built-in standard library functions and operators in Gel queries, including string operations, arithmetic, and set operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\ne.str_upper(e.str(\"hello\"));\n// str_upper(\"hello\")\n\ne.op(e.int64(2), '+', e.int64(2));\n// 2 + 2\n\nconst nums = e.set(e.int64(3), e.int64(5), e.int64(7))\ne.op(e.int64(4), 'in', nums);\n// 4 in {3, 5, 7}\n\ne.math.mean(nums);\n// math::mean({3, 5, 7})\n```\n\n----------------------------------------\n\nTITLE: Defining Type with Abstract Links and Computed Property in EdgeDB SDL\nDESCRIPTION: Demonstrates the creation of a 'Movie' type using abstract links, indexes, and a computed property that aggregates values from linked 'Review' objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/objects.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie extending HasImage {\n    required title: str;\n    required year: int64;\n\n    # Add an index for accessing movies by title and year,\n    # separately and in combination.\n    index on (.title);\n    index on (.year);\n    index on ((.title, .year));\n\n    description: str;\n\n    multi directors: Person {\n        extending crew;\n    };\n    multi actors: Person {\n        extending crew\n    };\n\n    avg_rating := math::mean(.<movie[is Review].rating);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Type with Tuple in SDL\nDESCRIPTION: Example of defining a schema that includes a tuple type as a property. The GameElement type has a position property of tuple type with named elements x and y, both of type int64.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/tuple.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype GameElement {\n    required name: str;\n    required position: tuple<x: int64, y: int64>;\n}\n```\n\n----------------------------------------\n\nTITLE: UUID to Object Casting\nDESCRIPTION: Example of casting a UUID to an object type and handling non-existent object IDs.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/types.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <Hero><uuid>'01d9cc22-b776-11ed-8bef-73f84c7e91e7';\nselect <Hero><uuid>'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';\n```\n\n----------------------------------------\n\nTITLE: Using Standard Library Functions in EdgeQL\nDESCRIPTION: Examples of using built-in functions from Gel's standard library, including count(), len(), and math functions for data analysis.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect count(Book);\nselect Book {\n  title,\n  title_length := len(.title)\n} order by .title_length;\nselect math::stddev(len(Book.title));\n```\n\n----------------------------------------\n\nTITLE: Sending Magic Link for User Sign-In\nDESCRIPTION: Implements the functionality to send a magic link to an existing user's email for authentication. Generates PKCE values, sends a request to Gel Auth to generate and send the magic link, and stores the verifier for later verification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Send magic link to existing user's email for sign in.\n *\n * @param {Request} req\n * @param {Response} res\n */\nconst handleSendMagicLink = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const pkce = generatePKCE();\n    const { email, provider } = JSON.parse(body);\n    if (!email || !provider) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'email' and 'provider' keys, but got: ${body}`,\n      );\n      return;\n    }\n\n    const emailUrl = new URL(\"magic-link/email\", GEL_AUTH_BASE_URL);\n    const callbackUrl = new URL(\"auth/magic-link/callback\", \"http://localhost:${SERVER_PORT}\");\n    const authenticateResponse = await fetch(emailUrl.href, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        challenge: pkce.challenge,\n        email,\n        provider,\n        callback_url: callbackUrl.href,\n      }),\n    });\n\n    if (!authenticateResponse.ok) {\n      const text = await authenticateResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    res.writeHead(204, {\n      \"Set-Cookie\": `gel-pkce-verifier=${pkce.verifier}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n    });\n    res.end();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Links with Constraints in SDL\nDESCRIPTION: Illustrates the definition of abstract links with properties, constraints, and indexes in Gel SDL. It shows an abstract 'link_with_strength' being extended in a concrete 'Person' type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\nabstract link link_with_strength {\n  strength: float64;\n  index on (__subject__@strength);\n}\n\ntype Person {\n  multi friends: Person {\n    extending link_with_strength;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using GEL Client State Methods - Python\nDESCRIPTION: Reference implementation showing state modification method usage with GEL clients. These methods modify client state for globals, module settings, and configuration in a way similar to with_state.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/advanced.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith_globals()\\nwithout_globals()\\nwith_default_module()\\nwith_module_aliases()\\nwithout_module_aliases()\\nwith_config()\\nwithout_config()\\nwith_globals()\\nwithout_globals()\n```\n\n----------------------------------------\n\nTITLE: Connection Status Check in Python\nDESCRIPTION: Shows how to explicitly check connection status using ensure_connected() method, which is useful for catching configuration errors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/client.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport gel\n\nclient = gel.create_async_client()\n\nasync def main():\n  await client.ensure_connected()\n```\n\n----------------------------------------\n\nTITLE: Nested Insert of Issue and User in EdgeQL\nDESCRIPTION: Demonstrates how to create nested objects in a single atomic insert operation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/insert.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\ninsert Issue {\n    number := '101',\n    body := 'Nested insert',\n    owner := (\n        insert User {\n            name := 'Nested User'\n        }\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Type Intersection Operations\nDESCRIPTION: Demonstrates filtering sets of objects by type using the type intersection operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/types.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Media;\nselect Media[is Movie];\n```\n\n----------------------------------------\n\nTITLE: Client-side WebAuthn Authentication Script in JavaScript\nDESCRIPTION: This client-side script sets up event listeners for sign-up and sign-in buttons, and uses the WebAuthnClient from @gel/auth-core to handle WebAuthn ceremonies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/webauthn.rst#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebAuthnClient } from \"@gel/auth-core/webauthn\";\n\nconst webAuthnClient = new WebAuthnClient({\n  signupOptionsUrl: \"http://localhost:3000/auth/webauthn/register/options\",\n  signupUrl: \"http://localhost:3000/auth/webauthn/register\",\n  signinOptionsUrl: \"http://localhost:3000/auth/webauthn/authenticate/options\",\n  signinUrl: \"http://localhost:3000/auth/webauthn/authenticate\",\n  verifyUrl: \"http://localhost:3000/auth/webauthn/verify\",\n});\n\ndocument.addEventListener(\"DOMContentReady\", () => {\n  const signUpButton = document.querySelector(\"button#sign-up\");\n  const signInButton = document.querySelector(\"button#sign-in\");\n  const emailInput = document.querySelector(\"input#email\");\n\n  if (signUpButton) {\n    signUpButton.addEventListener(\"click\", async (event) => {\n      event.preventDefault();\n      const email = emailInput.value.trim();\n      if (!email) {\n        throw new Error(\"No email provided\");\n      }\n      try {\n        await webAuthnClient.signUp(email);\n        window.location = \"http://localhost:3000/signup-success\";\n      } catch (err) {\n        console.error(err);\n        window.location = \"http://localhost:3000/signup-error\";\n      }\n    });\n  }\n\n  if (signInButton) {\n    signInButton.addEventListener(\"click\", async (event) => {\n      event.preventDefault();\n      const email = emailInput.value.trim();\n      if (!email) {\n        throw new Error(\"No email provided\");\n      }\n      try {\n        await webAuthnClient.signIn(email);\n        window.location = \"http://localhost:3000\";\n      } catch (err) {\n        console.error(err);\n        window.location = \"http://localhost:3000/signup-error\";\n      }\n    })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance and Abstract Types in SDL\nDESCRIPTION: Illustrates multiple inheritance and the use of abstract types in Gel SDL. It defines an abstract 'CanBark' type, a concrete 'Animal' type, and a 'Dog' type that extends both.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type CanBark {\n  required bark_sound: str;\n}\n\ntype Animal {\n  species: str;\n}\n\ntype Dog extending Animal, CanBark {\n  breed: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Geometric Distance in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_distance function to calculate distance between geometries or geographies. Multiple overloads are provided for different input types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_62\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::distance( \\\n                    a0: std::str, \\\n                    a1: std::str, \\\n                  ) ->  std::float64\n                  ext::postgis::distance( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n                  ext::postgis::distance( \\\n                    geog1: ext::postgis::geography, \\\n                    geog2: ext::postgis::geography, \\\n                    use_spheroid: std::bool = true, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Filtering Books with No Authors in GraphQL vs EdgeQL\nDESCRIPTION: Example showing how to query Book objects that don't have an associated author in both GraphQL and EdgeQL, using the exists filter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Book(\n        filter: {\n            author: {\n              exists: false\n            }\n        }\n    ) {\n        id\n        title\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Book {\n        id,\n        title\n    }\nfilter\n    not exists\n        Book.author;\n```\n\n----------------------------------------\n\nTITLE: Migration Creation Dialog in EdgeDB CLI\nDESCRIPTION: Shows the interactive dialog when creating a migration in EdgeDB, asking for confirmation about schema changes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ndb> did you create property 'nickname' of object type 'default::User'?\n[y,n,l,c,b,s,q,?]\n> y\nSquash is complete.\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum Type in SDL\nDESCRIPTION: Example of creating an enum type for colors in SDL. This shows how to extend the abstract enum type to create a custom enumeration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Color extending enum<Red, Green, Blue>;\n\ntype Shirt {\n  color: Color;\n}\n```\n\n----------------------------------------\n\nTITLE: Altering Access Policy in EdgeDB\nDESCRIPTION: Syntax for modifying an existing access policy including changing conditions, actions, error messages and annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_15\n\nLANGUAGE: eql\nCODE:\n```\n[ with <with-item> [, ...] ]\nalter type <TypeName> \"{\"\n  [ ... ]\n  alter access policy <name> \"{\"\n    [ when (<condition>) ; ]\n    [ reset when ; ]\n    { allow | deny } <action> [, <action> ... ; ]\n    [ using (<expr>) ; ]\n    [ set errmessage := value ; ]\n    [ reset expression ; ]\n    [ create annotation <annotation-name> := <value> ; ]\n    [ alter annotation <annotation-name> := <value> ; ]\n    [ drop annotation <annotation-name>; ]\n  \"}\"\n\"}\"\n```\n\n----------------------------------------\n\nTITLE: Using assert_single() Function in EdgeQL\nDESCRIPTION: Demonstrates the assert_single() function which checks that the input set contains no more than one element, raising a CardinalityViolationError if multiple elements are found.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_single((select User filter .name = \"Unique\"))\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_single((select User))\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_single((select User), message := \"too many users!\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema Branch in EdgeQL\nDESCRIPTION: Creates a new Gel branch with schema copied from an existing branch. This allows you to clone the structure without copying the data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/branches.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate schema branch feature from main;\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries in TypeScript\nDESCRIPTION: Examples of using querySQL method to execute SQL queries with both object and array row modes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst sqlQuery = `SELECT 1 as foo, \"hello\" as bar`;\nawait client.querySQL<{foo: number; bar: string }>(sqlQuery);\n// { foo: number; bar: string }[]: [{'foo': 1, 'bar': 'hello'}]\n\nconst arrayModeClient = client.withSQLRowMode('array');\nawait arrayModeClient.querySQL<[number, string]>(sqlQuery);\n// [number, string][]: [[1, 'hello']]\n```\n\n----------------------------------------\n\nTITLE: Schema Update with Link Properties\nDESCRIPTION: Adds a 'since' date property to the friends link in User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/paths.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str;\n  multi friends: User {\n    since: cal::local_date;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Hero's Name in EdgeQL\nDESCRIPTION: Demonstrates how to update a specific hero's name using the update command with a filter clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Hero\nfilter .name = \"Hawkeye\"\nset { name := \"Ronin\" };\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Syntax for Vector Similarity Search\nDESCRIPTION: Basic EdgeQL query syntax for performing a vector similarity search on the Friend type using a query vector.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nselect ext::ai::search(Friend, query_vector);\n```\n\n----------------------------------------\n\nTITLE: Using all() Aggregate Function in EdgeQL\nDESCRIPTION: Demonstrates the all() function which returns true if all values in the given set are true or if the set is empty, false otherwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_22\n\nLANGUAGE: edgeql\nCODE:\n```\nselect all(<bool>{});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect all({1, 2, 3, 4} < 4);\n```\n\n----------------------------------------\n\nTITLE: Calculating Sample Standard Deviation in EdgeQL\nDESCRIPTION: Shows how to use math::stddev() function to calculate the sample standard deviation of a set of numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::stddev({1, 3, 5});\n{2}\n```\n\n----------------------------------------\n\nTITLE: Duration Get Examples in EdgeQL\nDESCRIPTION: Examples of using duration_get() function to extract time units from various duration types including relative_duration, date_duration and standard duration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select duration_get(\n  <cal::relative_duration>'400 months', 'year');\n{33}\ndb> select duration_get(\n  <cal::date_duration>'400 months', 'month');\n{4}\ndb> select duration_get(\n  <cal::relative_duration>'1 month 20 days 30 hours',\n  'day');\n{20}\n```\n\n----------------------------------------\n\nTITLE: Inserting Movie Using JSON Input in EdgeQL\nDESCRIPTION: This snippet shows how to insert a movie using JSON input. It casts the JSON input into a tuple and uses it to populate the Movie record, including linking to directors and actors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/insert.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    # Cast the JSON $input into a tuple, which we will\n    # use to populate the Person record.\n    data := <tuple<\n        title: str,\n        year: int64,\n        image: str,\n        directors: array<str>,\n        actors: array<str>\n    >> <json>$input\ninsert Movie {\n    title := data.title,\n    year := data.year,\n    image := data.image,\n    directors := (\n        select Person\n        filter\n            .full_name in array_unpack(data.directors)\n    ),\n    actors := (\n        select Person\n        filter\n            .full_name in array_unpack(data.actors)\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating handleCallback Function to Create Custom User\nDESCRIPTION: Modifies the handleCallback function to create a new User object and attach it to the ext::auth::Identity object during the sign-up process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleCallback = async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n\n  const code = requestUrl.searchParams.get(\"code\");\n  if (!code) {\n    const error = requestUrl.searchParams.get(\"error\");\n    res.status = 400;\n    res.end(\n        `Magic link callback is missing 'code'. Provider responded with error: ${error}`,\n    );\n    return;\n  }\n\n  const cookies = req.headers.cookie?.split(\"; \");\n  const verifier = cookies\n    ?.find((cookie) => cookie.startsWith(\"gel-pkce-verifier=\"))\n    ?.split(\"=\")[1];\n  if (!verifier) {\n    res.status = 400;\n    res.end(\n        `Could not find 'verifier' in the cookie store. Is this the same user agent/browser that started the authorization flow?`,\n    );\n    return;\n  }\n\n  const codeExchangeUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n  codeExchangeUrl.searchParams.set(\"code\", code);\n  codeExchangeUrl.searchParams.set(\"verifier\", verifier);\n  const codeExchangeResponse = await fetch(codeExchangeUrl.href, {\n    method: \"GET\",\n  });\n\n  if (!codeExchangeResponse.ok) {\n    const text = await codeExchangeResponse.text();\n    res.status = 400;\n    res.end(`Error from the auth server: ${text}`);\n    return;\n  }\n\n  const {\n    auth_token,\n    identity_id\n  } = await codeExchangeResponse.json();\n\n  if (requestUrl.searchParams.get(\"isSignUp\") === \"true\") {\n    await client.query(`\n      with\n        identity := <ext::auth::Identity><uuid>$identity_id,\n        emailFactor := (\n          select ext::auth::EmailFactor filter .identity = identity\n        ),\n      insert User {\n        email := emailFactor.email,\n        identity := identity\n      };\n    `, { identity_id });\n  }\n\n  res.writeHead(204, {\n    \"Set-Cookie\": `gel-auth-token=${auth_token}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n  });\n  res.end();\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Gel Schema Migrations\nDESCRIPTION: Commands to create and apply Gel schema migrations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dlx gel migration create # or npx gel migration create\n$ pnpm dlx gel migration apply # or npx gel migration apply\n```\n\n----------------------------------------\n\nTITLE: Annotating Accounts with Completion Status in EdgeQL\nDESCRIPTION: Demonstrates how to use the '?=' operator to annotate accounts with their completion status, handling optional properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Account {\n    completed := .steps ?= 5\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Status Type with Standard Annotations in SDL\nDESCRIPTION: Example showing how to use standard annotations (title and description) when defining a Status type with a unique name constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/annotations.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Status {\n  annotation title := 'Activity status';\n  annotation description := 'All possible user activities';\n\n  required name: str {\n    constraint exclusive\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CharacterClass and Updating Character Schema in EdgeDB\nDESCRIPTION: This migration creates a new CharacterClass type, adds a class link to Character, and inserts initial data for character classes and assignments.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_35\n\nLANGUAGE: edgeql\nCODE:\n```\nCREATE MIGRATION m1jie3xamsm2b7ygqccwfh2degdi45oc7mwuyzjkanh2qwgiqvi2ya\n    ONTO m1juin65wriqmb4vwg23fiyajjxlzj2jyjv5qp36uxenit5y63g2iq\n{\n  CREATE TYPE default::CharacterClass {\n      CREATE REQUIRED PROPERTY name -> std::str;\n      CREATE MULTI PROPERTY skills -> std::str;\n  };\n  ALTER TYPE default::Character {\n      CREATE LINK class -> default::CharacterClass;\n  };\n\n  insert default::CharacterClass {\n      name := 'Warrior',\n      skills := {'punch', 'kick', 'run', 'jump'},\n  };\n  insert default::CharacterClass {\n      name := 'Scholar',\n      skills := {'read', 'write', 'analyze', 'refine'},\n  };\n  insert default::CharacterClass {\n      name := 'Rogue',\n      skills := {'impress', 'sing', 'steal', 'run', 'jump'},\n  };\n  # All warriors\n  update default::Character\n  filter .name in {'Alice'}\n  set {\n      class := assert_single((\n          select default::CharacterClass\n          filter .name = 'Warrior'\n      )),\n  };\n  # All scholars\n  update default::Character\n  filter .name in {'Billie'}\n  set {\n      class := assert_single((\n          select default::CharacterClass\n          filter .name = 'Scholar'\n      )),\n  };\n  # All rogues\n  update default::Character\n  filter .name in {'Cameron', 'Dana'}\n  set {\n      class := assert_single((\n          select default::CharacterClass\n          filter .name = 'Rogue'\n      )),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring EdgeDB Client with Global Variables\nDESCRIPTION: Demonstrates setting global variables on an EdgeDB client using withGlobals method. The client instance shares a connection pool with the original client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient();\nawait client\n  .withGlobals({\n    current_user_id: \"00000000-0000-0000-0000-000000000000\",\n  })\n  .querySingle(\n    \"select User { * } filter .id ?= global current_user_id;\"\n  );\n```\n\n----------------------------------------\n\nTITLE: Returning Data on Update in EdgeQL\nDESCRIPTION: Demonstrates how to return additional data after an update operation using a select wrapper.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (update Hero\n  filter .name = \"Hawkeye\"\n  set { name := \"Ronin\" }\n) {id, name};\n```\n\n----------------------------------------\n\nTITLE: Inserting with Conflict Handling in EdgeQL\nDESCRIPTION: This snippet shows how to use the 'unless conflict' clause to make an insert command idempotent. It tries to create a new User and does nothing if a User with the same name already exists.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/insert.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\n# Try to create a new User\ninsert User {\n    name := \"Alice\",\n    image := \"default_avatar.jpg\",\n}\n# and do nothing if a User with this name already exists\nunless conflict\n```\n\n----------------------------------------\n\nTITLE: Creating datetime Values in EdgeQL\nDESCRIPTION: Demonstrates how to create timezone-aware datetime values using casting in EdgeQL. The datetime strings must follow ISO 8601 format with timezone included.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <datetime>'2018-05-07T15:01:22.306916+00';\nselect <datetime>'2018-05-07T15:01:22+00';\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Scalar Type with Constraint in SDL\nDESCRIPTION: This SDL snippet defines a custom scalar type 'maxex_100' that extends int64 and includes a max_ex_value constraint. It showcases how to create a new type with a built-in constraint in EdgeDB.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/constraints.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type maxex_100 extending int64 {\n    constraint max_ex_value(100);\n}\n```\n\n----------------------------------------\n\nTITLE: Type Casting in EdgeQL\nDESCRIPTION: Illustrates various examples of type casting in EdgeQL, including scalar casts, array casts, and tuple casts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/type.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <int64>\"42\";\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <array<str>>[1, 2, 3];\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <str>example::Issue.number;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <tuple<int64, str>>(1, 3);\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    # a test tuple set, that could be a result of\n    # some other computation\n    stuff := (1, 'foo', 42)\nselect (\n    # cast the tuple into something more convenient\n    <tuple<a: int64, name: str, b: int64>>stuff\n).name;  # access the 'name' element\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nselect Text {\n    name :=\n        Text[is Issue].name if Text is Issue else\n        <str>{},\n        # the cast to str is necessary here, because\n        # the type of the computed expression must be\n        # defined\n    body,\n};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nselect User {\n    name,\n    friends := <User>{}\n    # the cast is the only way to indicate that the\n    # computed link 'friends' is supposed to refer to\n    # a set of Users\n};\n```\n\n----------------------------------------\n\nTITLE: Introspecting All Rewrites with Detailed Information in EdgeQL\nDESCRIPTION: This query retrieves comprehensive information about all rewrites in the schema, including the subject (property and its source object), the kind of rewrite, and the rewrite expression.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/mutation_rewrites.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect schema::Rewrite {\n  subject := (\n    select .subject {\n      name,\n      source: {\n        name\n      }\n    }\n  ),\n  kind,\n  expr\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Badge and Status Data from JSON to EdgeDB\nDESCRIPTION: This Python script demonstrates how to import Badge and Status data from JSON dumps into EdgeDB using the EdgeDB Python client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfor line in open('badges.json'):\n    client.query('''\n        with data := to_json(<str>$line)\n        insert Badge {\n            name := <str>data['name'],\n            description := <str>data['description'],\n        }\n    ''',\n    line=line.replace(r'\\\\', '\\\\'))\n\nfor line in open('statuses.json'):\n    client.query('''\n        with data := to_json(<str>$line)\n        insert Status {\n            title := <str>data['title'],\n        }\n    ''',\n    line=line.replace(r'\\\\', '\\\\'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Type Information in Polymorphic Queries\nDESCRIPTION: Demonstrates how to access the type information of objects in polymorphic queries using the __type__ link.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_21\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <json>Person {\n __type__: {\n   name\n   }\n } limit 1;\n```\n\n----------------------------------------\n\nTITLE: User Creation with Nicknames Array\nDESCRIPTION: Defines a modifying function that creates a user with a name and array of nicknames.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\nfunction add_user(name: str, nicknames: array<str>) -> User\n  using (\n    insert User {\n      name := name,\n      nicknames := array_unpack(nicknames),\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI API Client\nDESCRIPTION: Utility function to create and initialize OpenAI API client with environment variables.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport OpenAI from \"openai\";\n\nexport function initOpenAIClient() {\n  if (!process.env.OPENAI_API_KEY)\n    throw new Error(\"Missing environment variable OPENAI_API_KEY\");\n\n  return new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gel CLI on Linux/MacOS\nDESCRIPTION: Command to install the Gel CLI tool on Linux or MacOS systems using curl with HTTPS and TLS 1.2\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --proto '=https' --tlsv1.2 -sSf https://www.geldata.com/sh | sh\n```\n\n----------------------------------------\n\nTITLE: Testing Prohibit Frenemies Trigger in EdgeDB REPL\nDESCRIPTION: Demonstrates the usage of the prohibit_frenemies trigger by inserting Person objects and attempting to set them as both friends and enemies, which results in an error.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert Person {name := 'Quincey Morris'};\n{default::Person {id: e4a55480-d2de-11ed-93bd-9f4224fc73af}}\ndb> insert Person {name := 'Dracula'};\n{default::Person {id: e7f2cff0-d2de-11ed-93bd-279780478afb}}\ndb> update Person\n... filter .name = 'Quincey Morris'\n... set {\n...   enemies := (\n...     select detached Person filter .name = 'Dracula'\n...   )\n... };\n{default::Person {id: e4a55480-d2de-11ed-93bd-9f4224fc73af}}\ndb> update Person\n... filter .name = 'Quincey Morris'\n... set {\n...   friends := (\n...     select detached Person filter .name = 'Dracula'\n...   )\n... };\ngel error: GelError: Invalid frenemies\n```\n\n----------------------------------------\n\nTITLE: RelativeDuration Type Example\nDESCRIPTION: Shows how to work with Gel's cal::relative_duration type and access its components.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/types.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import gel\n>>> client = gel.create_client()\n>>> r = client.query_single('''SELECT <cal::relative_duration>\"1 year 2 days 3 seconds\"''')\n>>> r\n<gel.RelativeDuration \"P1Y2DT3S\">\n>>> r.months\n12\n>>> r.days\n2\n>>> r.microseconds\n3000000\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Client with Explicit Parameters - JavaScript\nDESCRIPTION: Creates a Gel client instance by explicitly specifying connection parameters. This approach is useful for debugging but not recommended for production use due to security concerns.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nconst pool = createClient({\n  instance: \"my_instance\"\n});\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Update with Add/Remove Operations\nDESCRIPTION: Examples demonstrating how to add and remove tags from posts using += and -= operators.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/update.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nupdate Post\nfilter .author.name = 'Alice Smith'\nset {\n    # add tags\n    tags += {'example', 'edgeql'}\n};\n\nwith module example\nupdate Post\nfilter .author.name = 'Alice Smith'\nset {\n    # remove a tag, if it exist\n    tags -= 'todo'\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Time in EdgeQL\nDESCRIPTION: Functions for getting the current time, transaction start time, and statement start time. Includes notes on volatility and usage in computed properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select datetime_current();\n{<datetime>'2018-05-14T20:07:11.755827Z'}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Books\nDESCRIPTION: Shows how to insert multiple books in a single mutation\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/mutations.rst#2025-04-16_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_books {\n    insert_Book(\n        data: [{\n            title: \"One\"\n        }, {\n            title: \"Two\"\n        }]\n    ) {\n        id\n        title\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect {\n    (insert Book {\n        title := \"One\"\n    }),\n    (insert Book {\n        title := \"Two\"\n    })\n} {\n    id,\n    title\n};\n```\n\n----------------------------------------\n\nTITLE: Activating pg_trgm Extension in EdgeDB Schema\nDESCRIPTION: SDL code snippet showing how to activate the pg_trgm extension in an EdgeDB schema. This makes the ext::pg_trgm module and its functions available for use.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension pg_trgm;\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Client Usage in Elixir\nDESCRIPTION: Elixir implementation demonstrating client creation and query execution\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/clients.rst#2025-04-16_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule GelQuickstart do\n  def run do\n    {:ok, client} = Gel.start_link()\n    result = Gel.query_single!(client, \"select random()\")\n    IO.inspect(result)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Retrying Transactions in Python for EdgeDB\nDESCRIPTION: Demonstrates how to use the new retrying_transaction() method in the Python driver to automatically retry transactions. This method helps in handling transient errors without manual intervention.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor tx in con.retrying_transaction():\n    with tx:\n        tx.execute('''\n            insert Message {\n                body := 'Hello'\n            };\n        ''')\n```\n\n----------------------------------------\n\nTITLE: Declaring Flattening Alias in EdgeDB SDL\nDESCRIPTION: Demonstrates how to define an alias that merges information from linked objects into computed properties. This pattern is useful for flattening nested data structures to simplify queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/aliases.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nalias ReviewAlias := Review {\n    # It will already have all the Review\n    # properties and links.\n    author_name := .author.name,\n    movie_title := .movie.title,\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Initialization in EdgeQL With Clause\nDESCRIPTION: Demonstrates initializing a query parameter using the 'with' clause for use in the main query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/with.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith user_id := <uuid>$user_id\nselect User { name }\nfilter .id = user_id;\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::Constraint Object Type in EdgeQL\nDESCRIPTION: This query introspects the schema::Constraint object type, showing its links and properties. It demonstrates how to examine the structure of the Constraint type in EdgeDB's schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/constraints.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Constraint';\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Length Function Examples\nDESCRIPTION: Shows usage of the len() function for getting the length of strings, bytes and arrays. Demonstrates different input types and their corresponding length calculations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select len('foo');\n{3}\n\ndb> select len(b'bar');\n{3}\n\ndb> select len([2, 5, 7]);\n{3}\n```\n\n----------------------------------------\n\nTITLE: Using the generated getUser function\nDESCRIPTION: Example of how to use the generated getUser function in a TypeScript file, including client creation and type usage.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/queries.rst#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUser } from \"./queries/getUser.query\";\nimport {\n  createClient,\n  type GetUserArgs,\n  type GetUserReturns,\n} from \"gel\";\n\nconst client = await createClient();\n\nconst newUser: GetUserArgs = {\n  user_id: \"00000000-0000-0000-0000-000000000000\"\n};\n\nconst user = await getUser(client, newUser); // GetUserReturns\n\nif (user) {\n  user.name; // string\n  user.email; // string\n}\n```\n\n----------------------------------------\n\nTITLE: Complex With Block Creation in TypeScript\nDESCRIPTION: Demonstrates how complex expressions are automatically extracted into a 'with' block during query rendering in TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nconst robert = e.insert(e.Person, {\n  name: \"Robert Pattinson\"\n});\nconst colin = e.insert(e.Person, {\n  name: \"Colin Farrell\"\n});\nconst newMovie = e.insert(e.Movie, {\n  title: \"The Batman\",\n  actors: e.set(colin, robert)\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Arrays with Type Casting in EdgeQL\nDESCRIPTION: Shows how to create empty arrays using type casting, as EdgeDB cannot infer the type of an empty array otherwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select [];\nQueryError: expression returns value of indeterminate type\nHint: Consider using an explicit type cast.\n### select [];\n###        ^\n\ndb> select <array<int64>>[];\n{[]}\n```\n\n----------------------------------------\n\nTITLE: Deleting Books by Title Filter\nDESCRIPTION: Shows how to delete books filtered by a specific title ('Spam') and return basic book information\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/mutations.rst#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_book_spam {\n    delete_Book(\n        filter: {\n            title: {\n                eq: \"Spam\"\n            }\n        }\n    ) {\n        title\n        synopsis\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    delete Book\n    filter\n        Book.title = 'Spam'\n) {\n    title,\n    synopsis\n};\n```\n\n----------------------------------------\n\nTITLE: Spatial Relationship Testing\nDESCRIPTION: Function for testing spatial relationship between geometries. The touches function determines if two geometries have at least one point in common but their interiors do not intersect.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_241\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::touches( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Visibility with Author Blocking in Gel SDL\nDESCRIPTION: This snippet demonstrates a policy where blog posts are publicly visible except to users blocked by the author. It introduces a 'blocked' relationship in the User type and uses both allow and deny policies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_11\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str { constraint exclusive; }\n  multi blocked: User;\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n\n  access policy author_has_full_access\n    allow all\n    using (global current_user ?= .author.id);\n  access policy anyone_can_read\n    allow select;\n  access policy exclude_blocked\n    deny select\n    using ((global current_user in .author.blocked.id) ?? false);\n}\n```\n\n----------------------------------------\n\nTITLE: Cartesian Product Operations in EdgeQL\nDESCRIPTION: Shows how element-wise operations on multiple inputs create Cartesian products.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nselect {'aaa', 'bbb'} ++ {'ccc', 'ddd'};\nselect <str>{} ++ 'ccc';\nselect count(<str>{});\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC API Handler for Next.js\nDESCRIPTION: TypeScript code to create a Next.js API handler for tRPC integration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNextApiHandler } from '@trpc/server/adapters/next';\nimport { appRouter } from '../../../server/routers/_app';\n\nexport default createNextApiHandler({\n  router: appRouter,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Superuser Role for SQL Access\nDESCRIPTION: EdgeQL command to create a superuser role with a password for SQL client authentication.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate superuser role sql {\n  set password := 'your-password'\n};\n```\n\n----------------------------------------\n\nTITLE: Schema Definition in SDL\nDESCRIPTION: Example schema defining Named abstract type and User type with properties and constraints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/describe.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Named {\n    required name: str {\n        delegated constraint exclusive;\n    }\n}\n\ntype User extending Named {\n    required email: str {\n        annotation title := 'Contact email';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Migration Watch Command in Bash\nDESCRIPTION: Shows how to start the watch command that monitors schema files and automatically applies changes to the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/migrations.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel watch --migrate\n```\n\n----------------------------------------\n\nTITLE: Calculating Sample Variance in EdgeQL\nDESCRIPTION: Shows how to use math::var() function to calculate the sample variance of a set of numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::var({1, 3, 5});\n{4}\n```\n\n----------------------------------------\n\nTITLE: Filtering Events by Name in EdgeDB\nDESCRIPTION: EdgeQL query to select an event by name, returning its details including name, address, schedule, and host.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Event {\n    name, address, schedule,\n    host : {name}\n} filter .name = <str>$name;\n```\n\n----------------------------------------\n\nTITLE: Setting Vector Search Probes in EdgeQL\nDESCRIPTION: Example of using multi-statement queries to set the number of probes for approximate vector searches and then immediately perform a search. This improves the trade-off between search accuracy and performance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresult = client.query(\"\"\"\n    select set_probes(10);\n    select Item { id, name }\n    order by ext::pgvector::euclidean_distance(\n\t.embedding, <v3>$vector)\n    empty last\n    limit 1;\n\"\"\", vector=vector)\n```\n\n----------------------------------------\n\nTITLE: Declaring Enum Type in EdgeDB SDL\nDESCRIPTION: This snippet demonstrates how to declare an enum type in EdgeDB's schema definition language (SDL). It creates a scalar type 'Color' that extends the enum type with values Red, Green, and Blue.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/enum.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Color extending enum<Red, Green, Blue>;\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Equality Comparison Examples\nDESCRIPTION: Demonstrates the equality operator (=) for comparing different types in EdgeQL including numbers, arrays, tuples and strings. Shows behavior with empty sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 3 = 3.0;\n{true}\ndb> select 3 = 3.14;\n{false}\ndb> select [1, 2] = [1, 2];\n{true}\ndb> select (1, 2) = (x := 1, y := 2);\n{true}\ndb> select (x := 1, y := 2) = (a := 1, b := 2);\n{true}\ndb> select 'hello' = 'world';\n{false}\n```\n\n----------------------------------------\n\nTITLE: Defining User Type with Name Property in SDL\nDESCRIPTION: This SDL code snippet defines a module with a scalar type 'Name' extending string, and a 'User' type with a 'name' property of type 'Name'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    scalar type Name extending std::str;\n    type User {\n        property name: default::Name;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS Chaikin smoothing function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_chaikinsmoothing function, which smooths a geometry using the Chaikin algorithm. Takes a geometry object and optional parameters for iteration count and preserving end points.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_32\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::chaikinsmoothing( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::int64 = 1, \\\n  a2: std::bool = false, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Constructing JSON Values in EdgeQL\nDESCRIPTION: Demonstrates various methods to construct JSON values in EdgeDB, including casting, using to_json() function, and json_object_pack() function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/json.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect to_json('{\"hello\": \"world\"}');\nselect <json>'hello world';\nselect <json>2019;\nselect <json>cal::to_local_date(datetime_current(), 'UTC');\nselect json_object_pack({(\"hello\", <json>\"world\")});\nselect <json>(\n    select schema::Object {\n        name,\n        timestamp := cal::to_local_date(\n            datetime_current(), 'UTC')\n    }\n    filter .name = 'std::bool');\n```\n\n----------------------------------------\n\nTITLE: Running gel-python Code Generator\nDESCRIPTION: Commands to run the gel-python code generator from the command line. It can be executed directly or as a Python module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/codegen.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel-py\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m gel.codegen\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data for EdgeQL Examples\nDESCRIPTION: Inserts sample data into the defined schema, including heroes, villains, and movies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert Hero {\n...   name := \"Spider-Man\",\n...   secret_identity := \"Peter Parker\"\n... };\n{default::Hero {id: 6be1c9c6...}}\n\ndb> insert Hero {\n...   name := \"Iron Man\",\n...   secret_identity := \"Tony Stark\"\n... };\n{default::Hero {id: 6bf7115a... }}\n\ndb> for n in { \"Sandman\", \"Electro\", \"Green Goblin\", \"Doc Ock\" }\n...   union (\n...     insert Villain {\n...     name := n,\n...     nemesis := (select Hero filter .name = \"Spider-Man\")\n...  });\n{\n  default::Villain {id: 6c22bdf0...},\n  default::Villain {id: 6c22c3d6...},\n  default::Villain {id: 6c22c46c...},\n  default::Villain {id: 6c22c502...},\n}\n\ndb> insert Villain {\n...   name := \"Obadiah Stane\",\n...   nemesis := (select Hero filter .name = \"Iron Man\")\n... };\n{default::Villain {id: 6c42c4ec...}}\n\ndb> insert Movie {\n...  title := \"Spider-Man: No Way Home\",\n...  release_year := 2021,\n...  characters := (select Person filter .name in\n...    { \"Spider-Man\", \"Sandman\", \"Electro\", \"Green Goblin\", \"Doc Ock\" })\n...  };\n{default::Movie {id: 6c60c28a...}}\n\ndb> insert Movie {\n...  title := \"Iron Man\",\n...  release_year := 2008,\n...  characters := (select Person filter .name in\n...   { \"Iron Man\", \"Obadiah Stane\" })\n...  };\n{default::Movie {id: 6d1f430e...}}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Gel\nDESCRIPTION: Sample Docker Compose configuration for setting up a Gel database service with schema migrations support\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/docker.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  gel:\n    image: geldata/gel\n    environment:\n      GEL_SERVER_SECURITY: insecure_dev_mode\n    volumes:\n      - \"./dbschema:/dbschema\"\n    ports:\n      - \"5656:5656\"\n```\n\n----------------------------------------\n\nTITLE: Unpacking JSON Arrays in EdgeQL\nDESCRIPTION: Demonstrates how to unpack JSON arrays into sets of JSON values using json_array_unpack() function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/json.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nselect json_array_unpack(to_json('[1, \"a\"]'));\n```\n\n----------------------------------------\n\nTITLE: Creating Variadic Sum Function in EdgeQL\nDESCRIPTION: Defines a sum function using variadic arguments to handle multiple inputs, using explicit EdgeQL language specification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate function mysum(variadic argv: int64) -> int64\nusing edgeql $$\n    select sum(array_unpack(argv))\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Index in SDL\nDESCRIPTION: Demonstrates the creation of a composite index on multiple properties. This can improve performance for queries that filter, order, or group by both name and email simultaneously.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n  required email: str;\n  index on ((.name, .email));\n}\n```\n\n----------------------------------------\n\nTITLE: Checking and Configuring Access Policies in EdgeQL\nDESCRIPTION: Example demonstrating how to check and modify access policy configuration using the cfg::Config object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/cfg.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select cfg::Config.apply_access_policies;\n{true}\ndb> configure session set apply_access_policies := false;\nOK: CONFIGURE SESSION\ndb> select cfg::Config.apply_access_policies;\n{false}\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeQL Query to Get User by Name\nDESCRIPTION: This EdgeQL query selects a user by their name, using a parameter for filtering.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User { name }\nfilter .name = <str>$name;\n```\n\n----------------------------------------\n\nTITLE: Converting datetime to local_time with Timezone in EdgeQL\nDESCRIPTION: Shows how to convert a timezone-aware datetime to a local_time in a specified timezone using the cal::to_local_time function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_36\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_time(\n  <datetime>'2018-12-31T22:00:00+08',\n  'America/Los_Angeles');\n{<cal::local_time>'06:00:00'}\n```\n\n----------------------------------------\n\nTITLE: Testing the Enhanced Chat API with curl in Bash\nDESCRIPTION: A curl command example for testing the updated API endpoint, sending a query that references previous conversations to verify the chat history functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X 'POST' \\\n    'http://localhost:8000/messages?username=alice&chat_id=d4eed420-e903-11ef-b8a7-8718abdafbe1' \\\n    -H 'accept: application/json' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n          \"query\": \"remember that cool db i was talking to you about?\"\n        }'\n```\n\n----------------------------------------\n\nTITLE: Creating Tuples in Gel TypeScript\nDESCRIPTION: Demonstrates how to create both unnamed and named tuples using e.tuple. Unnamed tuples take an array as input, while named tuples accept an object with named properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ne.tuple([e.str(\"Peter Parker\"), e.int64(18)]);\n// (\"Peter Parker\", 18)\n\ne.tuple({\n  name: e.str(\"Peter Parker\"),\n  age: e.int64(18)\n});\n// (name := \"Peter Parker\", age := 18)\n```\n\n----------------------------------------\n\nTITLE: Type Union Operator in EdgeDB SDL and EdgeQL\nDESCRIPTION: Demonstrates the use of the type union operator '|' in EdgeDB schema definition and queries for polymorphic types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/type.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Named {\n    required name: str;\n}\n\nabstract type Text {\n    required body: str;\n}\n\ntype Item extending Named;\n\ntype Note extending Text;\n\ntype User extending Named {\n    multi stuff: Named | Text;\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Item {name := 'cube'};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Note {body := 'some reminder'};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert User {\n    name := 'Alice',\n    stuff := Note,  # all the notes\n};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert User {\n    name := 'Bob',\n    stuff := Item,  # all the items\n};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User {\n    name,\n    stuff: {\n        [is Named].name,\n        [is Text].body\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BankCustomer Schema in EdgeQL\nDESCRIPTION: This snippet defines a BankCustomer type with name and balance fields in the default module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/transactions.rst#2025-04-16_snippet_0\n\nLANGUAGE: eql\nCODE:\n```\nmodule default {\n  type BankCustomer {\n    required name: str;\n    required balance: int64;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation for Computed Properties in EdgeDB SDL\nDESCRIPTION: Shows how to use the dot notation shorthand to create a computed full_name property by concatenating first and last names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/computeds.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  first_name: str;\n  last_name: str;\n  full_name := .first_name ++ ' ' ++ .last_name;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring String Literals in EdgeQL\nDESCRIPTION: Examples of declaring string literals using single quotes, double quotes, raw strings, and multiline strings in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect 'I ❤️ EdgeQL';\nselect \"hello there!\";\nselect 'hello\\nthere!';\nselect 'hello\nthere!';\nselect r'hello\nthere!';\nselect r'hello\\nthere';\nselect $$one\ntwo\nthree$$;\nselect $label$You can add an interstitial label\nif you need to use \"$$\" in your string.$label$;\n```\n\n----------------------------------------\n\nTITLE: Deleting Reviews by User Name - Backlink Approach\nDESCRIPTION: Shows an alternative method to delete reviews using backlink notation. This approach selects the user first and then traverses backward through the author relationship to find associated reviews.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/delete.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndelete (\n    select User\n    filter .name = 'troll2020'\n).<author[is Review]\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Usage - Blocking API\nDESCRIPTION: Example of using Gel's blocking API to insert and query user data with date handling\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport gel\n\nclient = gel.create_client()\n\nclient.query(\"\"\"\n    INSERT User {\n        name := <str>$name,\n        dob := <cal::local_date>$dob\n    }\n\"\"\", name=\"Bob\", dob=datetime.date(1984, 3, 1))\n\nuser_set = client.query(\n    \"SELECT User {name, dob} FILTER .name = <str>$name\", name=\"Bob\")\n# *user_set* now contains\n# Set{Object{name := 'Bob', dob := datetime.date(1984, 3, 1)}}\n\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: Defining Sequence Properties in SDL\nDESCRIPTION: Example of creating a custom sequence type and using it as an auto-incrementing property in SDL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type ticket_number extending sequence;\ntype Ticket {\n  number: ticket_number;\n  rendered_number := 'TICKET-\\(.number)';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sequence Type in SDL\nDESCRIPTION: Example of creating an auto-incrementing TicketNo scalar type extending the sequence type and using it in a Ticket object type with an exclusive constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sequence.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type TicketNo extending sequence;\n\ntype Ticket {\n    number: TicketNo {\n        constraint exclusive;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Current Database in EdgeQL\nDESCRIPTION: Demonstrates how to set query_work_mem configuration for the current database using the new 'current database' configuration scope.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a7.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current database set query_work_mem := '4MB';\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Management\nDESCRIPTION: Shows how to implement transaction management across different programming languages, demonstrating the automatic retry mechanism for handling serialization errors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/clients.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nconst client = createClient();\n\nawait client.transaction(async (tx) => {\n  await tx.execute(\"insert User { name := 'Don' }\");\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nimport gel\n\nclient = gel.create_client()\n\nfor tx in client.transaction():\n    with tx:\n        tx.execute(\"insert User { name := 'Don' }\")\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n\n    \"github.com/geldata/gel-go\"\n    \"github.com/geldata/gel-go/geltypes\"\n)\n\nerr := client.Tx(ctx, func(ctx context.Context, tx geltypes.Tx) error {\n  return tx.Execute(ctx, \"insert User { name := 'Don' }\")\n})\nif err != nil {\n  log.Println(err)\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet client = gel_tokio::create_client().await?;\n\nclient\n    .transaction(|mut conn| async move {\n        conn.execute(\"insert User { name := 'Don' }\", &()).await?;\n        Ok(())\n    })\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DateDuration Usage with EdgeDB\nDESCRIPTION: This code snippet shows how to use the DateDuration type with EdgeDB's cal::local_date type for date calculations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <cal::date_duration>'5 days';\n{<cal::date_duration>'P5D'}\ndb> select <cal::local_date>'2022-06-25' + <cal::date_duration>'5 days';\n{<cal::local_date>'2022-06-30'}\ndb> select <cal::local_date>'2022-06-30' - <cal::local_date>'2022-06-25';\n{<cal::date_duration>'P5D'}\n```\n\n----------------------------------------\n\nTITLE: Updating Links in EdgeQL\nDESCRIPTION: Shows how to replace the set of linked values for a movie's characters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate movie\nfilter .title = \"Black Widow\"\nset {\n characters := (\n  select Person\n  filter .name in { \"Black Widow\", \"Yelena\", \"Dreykov\" }\n )\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Parameters in Gel TypeScript\nDESCRIPTION: Shows how to supply named parameters to customize range behavior, such as inclusion/exclusion of bounds and defining empty ranges.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\ne.range({inc_lower: true, inc_upper: true, empty: true}, 0, 8);\n// => std::range(0, 8, true, true);\n```\n\n----------------------------------------\n\nTITLE: DateTime Creation in EdgeQL\nDESCRIPTION: Examples of creating datetime values using to_datetime() function with different input formats and timezone specifications.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_22\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select to_datetime('2018-05-07T15:01:22.306916+00');\n{<datetime>'2018-05-07T15:01:22.306916Z'}\ndb> select to_datetime('May 7th, 2018 15:01:22 +00',\n                   'Mon DDth, YYYY HH24:MI:SS TZH');\n{<datetime>'2018-05-07T15:01:22Z'}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records by IDs from Vectorstore in Python\nDESCRIPTION: Method to retrieve specific records from the vector store by their IDs. It returns a list of retrieved records containing ID, text content, vector embedding, and metadata.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_by_ids(self, ids: list[uuid.UUID]) -> list[Record]:\n    # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Starting and Rolling Back a Transaction in EdgeQL\nDESCRIPTION: Demonstrates how to start a new transaction, execute a simple query, and then rollback the transaction.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_start.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nstart transaction;\nselect 'Hello World!';\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Creating Gel client in TypeScript\nDESCRIPTION: This TypeScript file (lib/gel.ts) exports a Gel client instance, which will be used to interact with the database throughout the application.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/nextjs.rst#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\n\nexport const client = createClient();\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Query with Joins and Subqueries\nDESCRIPTION: Example of a more complex SQL query with string concatenation, joins, and an EXISTS subquery to filter data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, 'Title is: ' || tittle\nFROM \"Movie\" m\nJOIN \"Person\" d ON m.director_id = d.id\nWHERE EXISTS (\n    SELECT 1\n    FROM \"Movie.actors\" act\n    WHERE act.source = m.id\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a custom enumerated scalar type in SDL\nDESCRIPTION: This SDL snippet defines a custom enumerated scalar type named Color with three possible values: Red, Green, and Blue. It demonstrates how to create a simple enum type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/scalars.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Color extending enum<Red, Green, Blue>;\n```\n\n----------------------------------------\n\nTITLE: Adding an Actor to a Movie with List Order in EdgeQL\nDESCRIPTION: This query adds an actor (Timothee Chalamet) to the movie 'Dune' directed by Villeneuve, setting the list_order link property to 1.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/update.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter\n    .title = 'Dune'\n    and\n    .directors.last_name = 'Villeneuve'\nset {\n    actors := (\n        insert Person {\n            first_name := 'Timothee',\n            last_name := 'Chalamet',\n            image := 'tchalamet.jpg',\n            @list_order := 1,\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Multirange Operations in EdgeQL\nDESCRIPTION: Examples of creating and manipulating multiranges, showing automatic ordering and normalization.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select multirange([range(1, 5), range(8,10)]);\n{[range(1, 5), range(8, 10)]}\ndb> select contains(multirange([range(1, 5), range(8,10)]), 9);\ntrue\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Handshake Protocol Messages\nDESCRIPTION: Defines the structure of handshake-related protocol messages including ClientHandshake, ServerHandshake, ConnectionParam, and ProtocolExtension used for protocol negotiation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_17\n\nLANGUAGE: protocol\nCODE:\n```\nedb.protocol.ClientHandshake\nedb.protocol.ConnectionParam\nedb.protocol.ProtocolExtension\nedb.protocol.ServerHandshake\n```\n\n----------------------------------------\n\nTITLE: Querying Index Schema Information in EdgeQL\nDESCRIPTION: This EdgeQL query retrieves information about the schema::Index object type, including its name, links, and properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/indexes.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Index';\n```\n\n----------------------------------------\n\nTITLE: Using count() Aggregate Function in EdgeQL\nDESCRIPTION: Demonstrates the count() function which returns the number of elements in a set, useful for counting records or elements in a collection.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_20\n\nLANGUAGE: edgeql\nCODE:\n```\nselect count({2, 3, 5});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect count(User);  # number of User objects in db\n```\n\n----------------------------------------\n\nTITLE: Defining Range Properties in SDL\nDESCRIPTION: Example of a range property definition in SDL, demonstrating the use of range types for numeric intervals.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\ntype DieRoll {\n  values: range<int64>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using distinct operator in EdgeQL\nDESCRIPTION: The distinct operator removes duplicate elements from a set, returning a new set with only unique values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select distinct {1, 2, 2, 3};\n{1, 2, 3}\n```\n\n----------------------------------------\n\nTITLE: Creating Range Literals in Gel TypeScript\nDESCRIPTION: Demonstrates how to create range literals using the e.range function, which takes lower and upper bounds as arguments.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst myRange = e.range(0, 8);\n\nmyRange.toEdgeQL();\n// => std::range(0, 8);\n```\n\n----------------------------------------\n\nTITLE: Calculating CPA Distance in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_distancecpa function to calculate the distance of closest point of approach (CPA) between two geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_64\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::distancecpa( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: ext::postgis::geometry, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Hello World Setup\nDESCRIPTION: Initial FastAPI application setup with a basic root endpoint returning Hello World\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Classes for Vectorstore Operations in Python\nDESCRIPTION: Defines data classes used in vectorstore operations, including InsertItem for items to be embedded, InsertRecord for pre-computed embeddings, Record for retrieved or update records, and SearchResult for search results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass InsertItem:\n    def __init__(self, text: str, metadata: dict[str, Any] = {}):\n        # Implementation details not provided\n\nclass InsertRecord:\n    def __init__(self, embedding: list[float], text: str | None = None, metadata: dict[str, Any] = {}):\n        # Implementation details not provided\n\nclass Record:\n    def __init__(self, id: uuid.UUID, text: str | None = None, embedding: list[float] | None = None, metadata: dict[str, Any] = {}):\n        # Implementation details not provided\n\nclass SearchResult(Record):\n    def __init__(self, cosine_similarity: float = 0.0, **kwargs):\n        # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Enabling the ext::ai Extension in EdgeDB\nDESCRIPTION: Shows how to enable the AI extension in EdgeDB using the extension mechanism in SDL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension ai;\n```\n\n----------------------------------------\n\nTITLE: Installing Vectorstore Extension with Gel CLI\nDESCRIPTION: Command to install the vectorstore extension using the gel extension CLI command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extvectorstore.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension install vectorstore\n```\n\n----------------------------------------\n\nTITLE: Initializing PKCE Flow with Node.js for Magic Link Authentication\nDESCRIPTION: Sets up the necessary imports and functions to generate PKCE (Proof Key for Code Exchange) values for secure authentication. Creates a verifier and challenge pair used to protect the authentication flow.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from \"node:http\";\nimport { URL } from \"node:url\";\nimport crypto from \"node:crypto\";\n\n/**\n * You can get this value by running `gel instance credentials`.\n * Value should be:\n * `${protocol}://${host}:${port}/branch/${branch}/ext/auth/\n */\nconst GEL_AUTH_BASE_URL = process.env.GEL_AUTH_BASE_URL;\nconst SERVER_PORT = 3000;\n\n/**\n * Generate a random Base64 url-encoded string, and derive a \"challenge\"\n * string from that string to use as proof that the request for a token\n * later is made from the same user agent that made the original request\n *\n * @returns {Object} The verifier and challenge strings\n */\nconst generatePKCE = () => {\n   const verifier = crypto.randomBytes(32).toString(\"base64url\");\n\n   const challenge = crypto\n      .createHash(\"sha256\")\n      .update(verifier)\n      .digest(\"base64url\");\n\n   return { verifier, challenge };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Object-Level Security in EdgeDB SDL\nDESCRIPTION: Example of defining object-level access policies in EdgeDB schema definition language.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_11\n\nLANGUAGE: sdl\nCODE:\n```\nglobal current_user -> uuid;\n\ntype User {\n  required property email -> str { constraint exclusive; };\n}\n\ntype BlogPost {\n  required property title -> str;\n  link author -> User;\n  access policy own_posts allow all using (\n    .author.id ?= global current_user\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial User Schema in SDL\nDESCRIPTION: This snippet shows the initial schema definition for a User type with a single name property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_26\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    name: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Logarithm with Custom Base in EdgeQL\nDESCRIPTION: Shows how to use math::log() function to calculate the logarithm of a given value in a specified base.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 3 ^ math::log(15n, base := 3n);\n{15.0000000000000005n}\n```\n\n----------------------------------------\n\nTITLE: Using find() with strings, bytes, and arrays in EdgeQL\nDESCRIPTION: Demonstrates how the find() function works with string, bytes, and array types in EdgeQL. The function returns the index of the first occurrence of the needle in the haystack, or -1 if not found.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select find('qwerty', 'we');\n{1}\n\ndb> select find(b'qwerty', b'42');\n{-1}\n\ndb> select find([2, 5, 7, 2, 100], 2);\n{0}\n\ndb> select find([2, 5, 7, 2, 100], 2, 1);\n{3}\n```\n\n----------------------------------------\n\nTITLE: Importing User Data from JSON to EdgeDB\nDESCRIPTION: This Python script demonstrates how to import User data from a JSON dump into EdgeDB, including linking to Badge and Status objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor line in open('users.json'):\n    client.query('''\n        with data := to_json(<str>$line)\n        insert User {\n            app_id := <int32>data['id'],\n            name := <str>data['name'],\n            email := <str>data['email'],\n            password := <str>data['password'],\n            client_settings := data['client_settings'],\n            badge := (\n                select Badge filter .name = <str>data['badge_name']\n            ),\n            status := (\n                select Status filter .title = <str>data['status']\n            ),\n        }\n    ''',\n    line=line.replace(r'\\\\', '\\\\'))\n```\n\n----------------------------------------\n\nTITLE: String Case Conversion Functions in EdgeQL\nDESCRIPTION: Shows the use of str_lower, str_upper, and str_title functions for converting string case in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_lower('Some Fancy Title');\n{'some fancy title'}\ndb> select str_upper('Some Fancy Title');\n{'SOME FANCY TITLE'}\ndb> select str_title('sOmE fAnCy TiTlE');\n{'Some Fancy Title'}\n```\n\n----------------------------------------\n\nTITLE: Computed Properties in Queries\nDESCRIPTION: Demonstrates how to use computed properties in selection shapes, including string operations and counting relationships\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  title,\n  title_upper := str_upper(.title),\n  cast_size := count(.actors)\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, movie => ({\n  title: true,\n  title_upper: e.str_upper(movie.title),\n  cast_size: e.count(movie.actors)\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating Ranges with the range() Function in EdgeQL\nDESCRIPTION: Shows how to construct range objects using the range() function. The function supports specifying lower and upper bounds, inclusivity flags, and can create empty ranges.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select range(1, 10);\n{range(1, 10)}\ndb> select range(1.5, 7.5, inc_lower := false);\n{range(1.5, 7.5, inc_lower := false)}\n```\n\n----------------------------------------\n\nTITLE: Extracting Exterior Ring in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_exteriorring function to extract the exterior ring of a polygon geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_73\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::exteriorring( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Unsetting a Property in EdgeQL\nDESCRIPTION: Demonstrates how to unset a non-required property by setting it to an empty set.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Person filter .id = <uuid>$id set { middle_name := {} };\n```\n\n----------------------------------------\n\nTITLE: Running Generators with bun\nDESCRIPTION: Command to run a generator using bun's bunx command with a specific generator name and options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ bunx @gel/generate <generator> [options]\n```\n\n----------------------------------------\n\nTITLE: Referencing Global Variables in EdgeDB TypeScript\nDESCRIPTION: Shows how to reference global variables from different modules in EdgeDB using the global namespace.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ne.global.user_id;\ne.default.global.user_id;  // same as above\ne.my_module.global.some_value;\n```\n\n----------------------------------------\n\nTITLE: Rotating Geometry in EQL\nDESCRIPTION: Rotates a geometry around a point or origin by a specified angle. This function exposes the PostGIS st_rotate functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_226\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::rotate( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using Assert Function in SDL Constraints\nDESCRIPTION: Shows how to use the new assert function to create powerful constraints, particularly when combined with triggers for complex data validation scenarios.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_19\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str;\n  multi friends: Person;\n  multi enemies: Person;\n\n  trigger prohibit_frenemies after insert, update for each do (\n    assert(\n      not exists (__new__.friends intersect __new__.enemies),\n      message := \"Invalid frenemies\",\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic EdgeQL Delete Query\nDESCRIPTION: Demonstrates deleting a specific user record by filtering on the name field. Uses the example module and User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/delete.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\ndelete User\nfilter User.name = 'Alice Smith';\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL Database Extension\nDESCRIPTION: Sets up GraphQL access to the database by adding the graphql extension.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension graphql;\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Array and String Elements in EdgeQL\nDESCRIPTION: Shows how to access elements of JSON arrays and strings using index notation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/json.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <json>'hello'[1];\nselect <json>'hello'[-1];\nselect to_json('[1, \"a\", null]')[1];\nselect to_json('[1, \"a\", null]')[-1];\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS area Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_area function in EdgeQL. Calculates the area of a geometry or geography. Returns a float64 value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_5\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::area( \\\n                    a0: std::str \\\n                  ) ->  std::float64\n                  ext::postgis::area( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n                  ext::postgis::area( \\\n                    geog: ext::postgis::geography, \\\n                    use_spheroid: std::bool = true, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Using contains() with ranges in EdgeQL\nDESCRIPTION: Demonstrates how the contains() function works with range types in EdgeQL. The function returns true if the range contains either the specified sub-range or element.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select contains(range(1, 10), range(2, 5));\n{true}\n\ndb> select contains(range(1, 10), range(2, 15));\n{false}\n\ndb> select contains(range(1, 10), 2);\n{true}\n\ndb> select contains(range(1, 10), 10);\n{false}\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Objects by ID in EdgeQL TypeScript\nDESCRIPTION: Demonstrates how to select multiple objects by their UUIDs using array parameters and filtering.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.params(\n  { ids: e.array(e.uuid) },\n  (params) =>\n    e.select(e.Movie, (movie) => ({\n      id: true,\n      title: true,\n      release_year: true,\n      filter: e.op(movie.id, \"in\", e.array_unpack(params.ids)),\n    }))\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Operators in EdgeQL and TypeScript\nDESCRIPTION: Illustrates the use of various operators in EdgeQL and how to express them using the Gel TypeScript client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect not true;\nselect exists 'hi';\nselect 2 + 2;\nselect 'Hello' ++ ' world!';\nselect '😄' if true else '😢';\nselect <duration>'5 minutes' + <duration>'2 hours';\n```\n\nLANGUAGE: typescript\nCODE:\n```\ne.op(\"not\", e.bool(true));\n// booolean\ne.op(\"exists\", e.set(\"hi\"));\n// boolean\ne.op(\"exists\", e.cast(e.str, e.set()));\n// boolean\ne.op(e.int64(2), \"+\", e.int64(2));\n// number\ne.op(e.str(\"Hello \"), \"++\", e.str(\"World!\"));\n// string\ne.op(e.str(\"😄\"), \"if\", e.bool(true), \"else\", e.str(\"😢\"));\n// string\ne.op(e.duration(\"5 minutes\"), \"+\", e.duration(\"2 hours\"))\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigMemory Class in JavaScript\nDESCRIPTION: This snippet defines the ConfigMemory class, which represents a Gel cfg::memory value. It includes a constructor that takes bytes as a BigInt and provides various unit conversions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass ConfigMemory(bytes: BigInt)\n```\n\n----------------------------------------\n\nTITLE: Querying Object Type Using __type__ Link in EdgeQL\nDESCRIPTION: Demonstrates how to query an object's type using the __type__ link, which provides information about the object's type, including its name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/type.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <json>Person {\n __type__: {\n   name\n   }\n } limit 1;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <json>Person { type := .__type__.name } limit 1;\n```\n\n----------------------------------------\n\nTITLE: Simple Grouping in TypeScript and EdgeQL\nDESCRIPTION: Demonstrates how to group a set of objects (movies) by a simple property (release year) using both TypeScript and EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\ne.group(e.Movie, movie => {\n  return {\n    by: {release_year: movie.release_year}\n  }\n});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie\nby .release_year\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Casting Examples\nDESCRIPTION: Shows error cases for invalid type casting operations including object types and out-of-range values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/types.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <BlogPost>10;\nselect <int64>'asdf';\nselect <int16>100000000000000n;\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Match Example - EdgeQL\nDESCRIPTION: Shows re_match function finding first regex match in string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_20\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select re_match(r'\\w{4}ql', 'I ❤️ edgeql');\n{['edgeql']}\n```\n\n----------------------------------------\n\nTITLE: Inserting Person with Linked Object and Link Property\nDESCRIPTION: Shows how to insert a Person object while creating a link to another new Person with a strength property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Person {\n  name := \"Bob\",\n  email := \"bob@bob.com\",\n  friends := (\n    insert Person {\n      name := \"Jane\",\n      email := \"jane@jane.com\",\n      @strength := 3.14\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_makeline Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_makeline function in EdgeDB. It has two overloads, one taking an array of geometries and another taking two geometry inputs, both returning a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_159\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::makeline( \\\n                    a0: array<ext::postgis::geometry> \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::makeline( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Project\nDESCRIPTION: Commands to initialize a new Gel project, creating a new database instance named 'fastapi_crud'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init\n```\n\n----------------------------------------\n\nTITLE: Context Retrieval Function in TypeScript\nDESCRIPTION: Async function that retrieves context sections based on embeddings with token count limits. Returns formatted context string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getContext(embedding: number[]) {\n  const sections = await getSectionsQuery.run(client, {\n    target: embedding,\n    matchThreshold: 0.3,\n    matchCount: 8,\n    minContentLength: 20,\n  });\n\n  let tokenCount = 0;\n  let context = \"\";\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i];\n    const content = section.content;\n    tokenCount += section.tokens;\n\n    if (tokenCount >= 1500) {\n      tokenCount -= section.tokens;\n      break;\n    }\n\n    context += `${content.trim()}\\n---\\n`;\n  }\n\n  return context;\n}\n```\n\n----------------------------------------\n\nTITLE: Group By Decade in EdgeQL\nDESCRIPTION: Groups movies by decade using integer division on the release year.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/group.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie {title}\nusing decade := .release_year // 10\nby decade;\n```\n\n----------------------------------------\n\nTITLE: Creating HMACs with ext::pgcrypto::hmac Function\nDESCRIPTION: Examples of creating hashed message authentication codes (HMACs) using a key and specified algorithm. Unlike digest, HMAC requires a key and cannot be recalculated without it.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgcrypto.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect ext::pgcrypto::hmac('encrypt this', 'my key', 'sha1');\nselect ext::pgcrypto::hmac(b'encrypt this', b'my key', 'md5');\n```\n\n----------------------------------------\n\nTITLE: User Schema with Unique Name Constraint in EdgeDB SDL\nDESCRIPTION: Final User schema with required and unique name property using exclusive constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str {\n    constraint exclusive;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overloading Links in EdgeDB SDL\nDESCRIPTION: Shows how to use the 'overloaded' keyword when modifying an inherited link. In this example, the User type overloads the friends link from the Friendly type to specify a more specific target type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_17\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Friendly {\n  # this type can have \"friends\"\n  multi friends: Friendly;\n}\n\ntype User extending Friendly {\n  # overload the link target to to be specifically User\n  overloaded multi friends: User;\n\n  # ... other links and properties\n}\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Transaction Rollback Example\nDESCRIPTION: Simple example showing how to abort the current transaction using the ROLLBACK command in EdgeQL. This will discard all changes made in the transaction.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_rollback.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Actor-Director Intersection in EdgeQL\nDESCRIPTION: Demonstrates how to find people who are both actors and directors using set intersection.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    # get the set of actors and set of directors\n    Actor := Movie.actors,\n    Director := Movie.director,\n# set intersection is done via the filter clause\nselect Actor filter Actor in Director;\n```\n\n----------------------------------------\n\nTITLE: Running Schema Migration Commands\nDESCRIPTION: Shell commands for creating and applying the migration to add the Timestamped type and extend existing types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/inheritance/nextjs.rst#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npx gel migration create\n$ npx gel migrate\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Combinations with Exclusive Constraint in EdgeDB SDL\nDESCRIPTION: Illustrates how to use the 'exclusive' constraint to ensure uniqueness of property combinations within a type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_11\n\nLANGUAGE: sdl\nCODE:\n```\ntype UniqueCoordinates {\n    required x: int64;\n    required y: int64;\n\n    # Each combination of x and y must be unique.\n    constraint exclusive on ( (.x, .y) );\n}\n```\n\n----------------------------------------\n\nTITLE: Array Aggregation in EdgeQL\nDESCRIPTION: Shows how to use the array_agg function to create an array from a set of elements, preserving order if specified.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select array_agg({2, 3, 5});\n{[2, 3, 5]}\n\ndb> select array_agg(User.name order by User.name);\n{['Alice', 'Bob', 'Joe', 'Sam']}\n```\n\n----------------------------------------\n\nTITLE: Creating duration Values in EdgeQL\nDESCRIPTION: Shows how to create duration values using casting in EdgeQL. Valid units include microseconds, milliseconds, seconds, minutes, and hours.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <duration>'45.6 seconds';\n{<duration>'0:00:45.6'}\ndb> select <duration>'15 milliseconds';\n{<duration>'0:00:00.015'}\ndb> select <duration>'48 hours 45 minutes';\n{<duration>'48:45:00'}\ndb> select <duration>'11 months';\ngel error: InvalidValueError: invalid input syntax for type\nstd::duration: '11 months'\n  Hint: Units bigger than hours cannot be used for std::duration.\n```\n\n----------------------------------------\n\nTITLE: Introspecting the built-in str type in EdgeQL\nDESCRIPTION: This query introspects the built-in str scalar type, retrieving its name, default value, enum values, abstract status, bases, ancestors, annotations, and constraints. It shows how to examine the properties of a standard scalar type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/scalars.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ScalarType {\n    name,\n    default,\n    enum_values,\n    abstract,\n    bases: { name },\n    ancestors: { name },\n    annotations: { name, @value },\n    constraints: { name },\n}\nfilter .name = 'std::str';\n```\n\n----------------------------------------\n\nTITLE: Full-text Search Schema Definition\nDESCRIPTION: SDL schema defining an Item type with full-text search index on the name field.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Item {\n  required available: bool {\n    default := false;\n  };\n  required name: str;\n  required description: str;\n\n  index fts::index on (\n    fts::with_options(\n      .name,\n      language := fts::Language.eng\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prefix Operators in Gel TypeScript\nDESCRIPTION: Shows how to use prefix operators such as 'not', 'exists', and 'distinct' with the e.op function in Gel queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ne.op('not', e.bool(true));      // not true\ne.op('exists', e.set('hi'));    // exists {'hi'}\ne.op('distinct', e.set('hi', 'hi'));    // distinct {'hi', 'hi'}\n```\n\n----------------------------------------\n\nTITLE: Starting a Serializable Deferrable Transaction in EdgeQL\nDESCRIPTION: Shows how to start a transaction with specific isolation level (serializable), access mode (read-only), and deferrable status.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_start.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nstart transaction isolation serializable, read only, deferrable;\n```\n\n----------------------------------------\n\nTITLE: If-then-else alternative syntax in EdgeQL\nDESCRIPTION: An alternative syntax for conditional expressions using if-then-else order, introduced in version 4.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select if 2 * 2 = 4 then 'real life' else 'dream';\n{'real life'}\n```\n\n----------------------------------------\n\nTITLE: Calculating Spherical Distance in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_distancesphere function to calculate spherical distance between two geometries. An optional radius parameter can be provided.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_65\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::distancesphere( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n                  ext::postgis::distancesphere( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                    radius: std::float64, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Sets up environment variables for Gel client configuration\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nGEL_DSN=<your-dsn>\nGEL_CLIENT_TLS_SECURITY=\"insecure\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fetching Movies with Actor Details\nDESCRIPTION: This GraphQL query demonstrates how to fetch all movies from the database, including detailed information about the actors in each movie.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery MovieQuery {\n  __typename\n  getMovies {\n    actors {\n      age\n      height\n      name\n    }\n    name\n    year\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Readonly Properties in Gel SDL\nDESCRIPTION: This snippet demonstrates how to declare a readonly property. The 'readonly' keyword is used to specify that a property can be set at creation time but not modified thereafter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required external_id: uuid {\n    readonly := true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Projecting Geometry Points in EQL\nDESCRIPTION: Projects a point from a start point by a distance and bearing. This function exposes the PostGIS st_project functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_217\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::project( \\\n  geom1: ext::postgis::geometry, \\\n  distance: std::float64, \\\n  azimuth: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Adding a Deferred Index for Single Property Vector Search\nDESCRIPTION: Schema modification that adds a deferred AI index on the Friend.summary property, enabling vector similarity search on that single field.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl-diff\nCODE:\n```\n  module default {\n      type Friend {\n          required name: str {\n              constraint exclusive;\n          };\n\n          summary: str;               # A brief description of personality and role\n          relationship_to_komi: str;  # Relationship with Komi\n          defining_trait: str;        # Primary character trait or quirk\n\n+         deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n+             on (.summary);\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Migration Code to Add friend_names Property with Data Population\nDESCRIPTION: EdgeDB migration that adds the friend_names property and populates it with data from the existing friends link using array_agg function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_38\n\nLANGUAGE: edgeql\nCODE:\n```\nCREATE MIGRATION m1hvciatdgpo3a74wagbmwhbunxbridda4qvdbrr3z2a34opks63rq\n    ONTO m1vktopcva7l6spiinh5e5nnc4dtje4ygw2fhismbmczbyaqbws7jq\n{\nALTER TYPE default::User {\n    CREATE PROPERTY friend_names: array<std::str>;\n};\nupdate User set { friend_names := array_agg(.friends.name) };\n};\n```\n\n----------------------------------------\n\nTITLE: Using fts::with_options Function to Configure Document Portions for Indexing\nDESCRIPTION: This special function is used within fts::index expressions to assign language and weight categories to document portions. It specifies which text will be indexed and how it will be processed based on language rules.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/fts.rst#2025-04-16_snippet_6\n\nLANGUAGE: eql\nCODE:\n```\nfts::with_options( \\\n                    text: str, \\\n                    NAMED ONLY language: anyenum, \\\n                    NAMED ONLY weight_category: optional fts::Weight = \\\n                    fts::Weight.A, \\\n                  ) -> fts::document\n```\n\n----------------------------------------\n\nTITLE: Creating Module Aliases in EdgeQL\nDESCRIPTION: Shows how to create and use module aliases to provide alternative names for modules in queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/sess_set_alias.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\n# Use the fully-qualified name.\nselect foo::FooType;\n\n# Use the WITH clause to define a custom alias\n# for the \"foo\" module.\nwith bar as module foo\nselect bar::FooType;\n\n# Define \"bar\" as an alias for the \"foo\" module for\n# the current session ...\nset alias bar as module foo;\n# ... and use \"bar\" instead of \"foo\".\nselect bar::FooType;\n```\n\n----------------------------------------\n\nTITLE: Setting up tRPC Router in Express\nDESCRIPTION: Configuration for integrating tRPC into an Express application by applying the Gel Auth middleware, custom context middleware, and setting up the tRPC router with the appropriate context.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { appRouter } from \"./path-to-router\";\nimport { auth } from \"./path-to-auth\";\nimport { createTRPCContextMiddleware } from \"./path-to-context\";\nimport { createExpressMiddleware } from \"@trpc/server/adapters/express\";\n\nconst app = express();\n\n// Gel Auth middleware to handle sessions\napp.use(auth.middleware);\n\n// Custom middleware to pass tRPC context\napp.use(createTRPCContextMiddleware);\n\n// tRPC route setup\napp.use(\n  \"/trpc\",\n  createExpressMiddleware({\n    router: appRouter,\n    createContext: (req) => req.context, // Use context from middleware\n  })\n);\n\napp.listen(4000, () => {\n  console.log('Server running on port 4000');\n});\n```\n\n----------------------------------------\n\nTITLE: Rounding Numbers in EdgeQL with std::round Function\nDESCRIPTION: Examples of the round() function for different numeric types. Float64 ties round to nearest even number, while decimal ties round away from zero. For decimals, precision can be specified with the optional parameter d.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select round(1.2);\n{1}\n\ndb> select round(1.5);\n{2}\n\ndb> select round(2.5);\n{2}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select round(1.2n);\n{1n}\n\ndb> select round(1.5n);\n{2n}\n\ndb> select round(2.5n);\n{3n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select round(163.278n, 2);\n{163.28n}\n\ndb> select round(163.278n, 1);\n{163.3n}\n\ndb> select round(163.278n, 0);\n{163n}\n\ndb> select round(163.278n, -1);\n{160n}\n\ndb> select round(163.278n, -2);\n{200n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Object by Composite Constraint in Gel TypeScript\nDESCRIPTION: Shows how to select an object using filter_single with a composite exclusive constraint, such as a combination of title and release_year.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n  type Movie {\n    ...\n    constraint exclusive on (.title, .release_year);\n  }\n*/\n\ne.select(e.Movie, () => ({\n  title: true,\n  filter_single: { title: \"The Avengers\", release_year: 2012 },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating local_date with Custom Format in EdgeQL\nDESCRIPTION: Shows how to create a local_date value using a custom format string with the cal::to_local_date function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_30\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_date('May 7th, 2018', 'Mon DDth, YYYY');\n{<cal::local_date>'2018-05-07'}\n```\n\n----------------------------------------\n\nTITLE: Forcing 3D Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_force3d function to force a geometry into a 3-dimensional representation with an optional Z value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_77\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::force3d( \\\n                    geom: ext::postgis::geometry, \\\n                    zvalue: std::float64 = 0.0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Executing Database Transaction in JavaScript\nDESCRIPTION: Example of using transaction method to execute a counter increment operation in a retryable transaction.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.transaction(async (tx) => {\n  const value = await tx.queryRequiredSingle<number>(\"select Counter.value\");\n  await tx.execute(\n    `update Counter set { value := <int64>$value }`,\n    {value: value + 1},\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing Gel Project Information\nDESCRIPTION: Demonstrates how to view information about the current Gel project using the gel project info command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project info\n┌───────────────┬──────────────────────────────────────────┐\n│ Instance name │ my_instance                              │\n│ Project root  │ /path/to/project                         │\n└───────────────┴──────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Comparing Full-text Search with Trigram Word Similarity Search in EdgeDB\nDESCRIPTION: This example demonstrates the difference between full-text search and trigram matching. When searching for a misspelled term 'thaco', the full-text search fails, but the trigram word similarity search succeeds because the term is close enough to the actual acronym 'THAC0'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select fts::search(Doc, 'thaco').object{text};\n{}\n\ndb> select Doc{text} filter ext::pg_trgm::word_similar('thaco', Doc.text);\n{\n  default::Doc {\n    text: 'THAC0 is used in AD&D 2 to determine likelihood of hitting',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Python\nDESCRIPTION: Example of setting global variables in a Python client implementation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom gel import create_client\n\nclient = create_client().with_globals({\n    'current_user': '580cc652-8ab8-4a20-8db9-4c79a4b1fd81'\n})\n\nresult = client.query(\"\"\"\n    select global current_user;\n\"\"\")\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Restoring Backup in Gel Cloud\nDESCRIPTION: Command to restore a complete backup to an empty Gel Cloud instance\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/index.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel restore \\\n    --all \\\n    -I <org-name>/<instance-name> \\\n    <local-dump-path>\n```\n\n----------------------------------------\n\nTITLE: Using Helper Utilities with Generated Interfaces\nDESCRIPTION: Example of using the helper namespace utilities to extract property and link types from an object type interface.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Movie, helper } from \"./dbschema/interfaces\";\n\ntype MovieProperties = helper.Props<Movie>;\n// { id: string; title: string; ... }\n\ntype MovieLinks = helper.Links<Movie>;\n// { actors: Person[]; }\n```\n\n----------------------------------------\n\nTITLE: Nested Set Flattening in EdgeQL\nDESCRIPTION: Demonstrates how nested sets are automatically flattened into a single level set.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select {1, {2, {3, 4}}};\n{1, 2, 3, 4}\ndb> select 1 union (2 union (3 union 4));\n{1, 2, 3, 4}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Actor to a Movie's Cast in EdgeQL\nDESCRIPTION: This query adds a new actor (Dave Bautista) to the existing cast of the movie 'Dune' directed by Villeneuve.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/update.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter\n    .title = 'Dune'\n    and\n    .directors.last_name = 'Villeneuve'\nset {\n    actors += (\n        insert Person {\n            first_name := 'Dave',\n            last_name := 'Bautista',\n            image := 'dbautista.jpg',\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Altering an Existing Role in EdgeDB\nDESCRIPTION: This example shows how to alter an existing role named 'alice' by changing its password. It uses the 'alter role' command with the 'set password' subcommand to update the role's credentials.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/roles.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nalter role alice {\n    set password := 'new password';\n};\n```\n\n----------------------------------------\n\nTITLE: Casting UUID to Object Type in EdgeQL\nDESCRIPTION: Demonstrates how a UUID can be cast to an object type if an object with a matching ID exists in the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/uuid.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <Hero><uuid>'01d9cc22-b776-11ed-8bef-73f84c7e91e7';\n{default::Hero {id: 01d9cc22-b776-11ed-8bef-73f84c7e91e7}}\n```\n\n----------------------------------------\n\nTITLE: Comparing Ranges with Greater Than Operator in EdgeQL\nDESCRIPTION: Shows how the greater than operator compares ranges and multiranges. The comparison first checks lower bounds, then upper bounds if lower bounds are equal. Unspecified upper bounds are considered greater than specified ones.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select range(1, 10) > range(2, 5);\n{false}\ndb> select range(1, 10) > range(1, 5);\n{true}\ndb> select range(1, 10) > range(1);\n{false}\ndb> select range(1, 10) > range(<int64>{}, 10);\n{true}\n\ndb> select multirange([range(2, 4), range(5, 7)]) >\n...   multirange([range(7, 10), range(20)]);\n{false}\n\ndb> select range(1, 10) > range(10, 10);\n{true}\ndb> select range(1, 10) > range(<int64>{}, empty := true);\n{true}\n\ndb> select multirange(<array<range<int64>>>[]) >\n...   multirange([range(7, 10), range(20)]);\n{false}\n```\n\n----------------------------------------\n\nTITLE: Assert Usage in Order By Clause\nDESCRIPTION: Demonstrates using assert within order by clauses to validate data during sorting operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nselect File { name, size }\norder by assert(.size <= 128*1024, message := \"file too big\");\n\nselect File { name, size }\norder by assert(.size <= 64*1024, message := \"file too big\");\n\nselect File { name, size }\nfilter .size <= 64*1024\norder by assert(.size <= 64*1024, message := \"file too big\");\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Annotation in SDL\nDESCRIPTION: Example demonstrating how to declare and use a custom annotation named admin_note.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/annotations.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nabstract annotation admin_note;\n\ntype Status {\n  annotation admin_note := 'system-critical';\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing a Link Property in SDL\nDESCRIPTION: Shows how to create an index on a link property. This example indexes the 'strength' property of a 'friendship' link, which could optimize queries involving friend relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\nabstract link friendship {\n  strength: float64;\n  index on (__subject__@strength);\n}\n\ntype User {\n  multi friends: User {\n    extending friendship;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: User Type Schema in EdgeDB SDL\nDESCRIPTION: Shows a simple EdgeDB schema definition for a User type with a name property using Schema Definition Language (SDL).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_17\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Properties in Shape Selectors in Gel TypeScript\nDESCRIPTION: Shows how to make properties optional by using boolean values instead of true literals, and how to exclude properties by using false.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, () => ({\n  id: true,\n  title: Math.random() > 0.5,\n  release_year: false,\n}));\n\nconst result = await query.run(client);\n// { id: string; title: string | undefined; }[]\n```\n\n----------------------------------------\n\nTITLE: Searching by Vector in Vectorstore in Python\nDESCRIPTION: Method to search using a pre-computed vector embedding. It's useful when the embedding is already computed or when searching with a modified/combined embedding vector.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef search_by_vector(self, vector: list[float], filter_expression: str = \"\", limit: Optional[int] = 4) -> list[SearchResult]:\n    # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Special Group Link in EdgeDB\nDESCRIPTION: Creates a computed link 'special_group' that filters friends based on matching towns.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  create link special_group := (\n    select __source__.friends\n    filter .town = __source__.town\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_Intersects Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_Intersects function which tests if two geometries spatially intersect. It supports multiple signatures including string geometries, geometry objects, and geography objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_119\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::intersects( \\\n                    a0: optional std::str, \\\n                    a1: optional std::str, \\\n                  ) -> optional std::bool\n                  ext::postgis::intersects( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::bool\n                  ext::postgis::intersects( \\\n                    geog1: ext::postgis::geography, \\\n                    geog2: ext::postgis::geography, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python 3.12 virtual environment for Gel development\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/code.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ python3.12 -m venv gel-dev\n$ source gel-dev/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining Auto-incrementing Scalar Type and Object Type in EdgeDB SDL\nDESCRIPTION: Shows how to create an auto-incrementing scalar type 'TicketNo' and use it in an object type 'Ticket' with an exclusivity constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/objects.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type TicketNo extending sequence;\n\ntype Ticket {\n    number: TicketNo {\n        constraint exclusive;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Parameter Grouping in EdgeQL\nDESCRIPTION: Groups recent movies by both decade and title format (presence of colon), with filtering for movies after 2015.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/group.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  M := (select Movie filter .release_year > 2015)\ngroup M {title}\nusing\n  decade := .release_year // 10,\n  has_colon := .title like '%:%'\nby decade, has_colon;\n```\n\n----------------------------------------\n\nTITLE: Chaining if-else expressions in EdgeQL\nDESCRIPTION: Multiple if-else expressions can be chained together to check multiple conditions sequentially.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> with color := 'yellow'\n... select 'Apple' if color = 'red' else\n...        'Banana' if color = 'yellow' else\n...        'Orange' if color = 'orange' else\n...        'Other';\n{'Banana'}\n```\n\n----------------------------------------\n\nTITLE: Required Multi-Link Example\nDESCRIPTION: Demonstrates required multi-link that must point to at least one target object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  name: str;\n}\n\ntype GroupChat {\n  required multi members: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Length Constraint to User Address Property in EdgeDB\nDESCRIPTION: Alters the User type to add a maximum length constraint of 500 characters to the address property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  alter property address {\n    create constraint max_len_value(500);\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Coalescing Equality Examples\nDESCRIPTION: Demonstrates the coalescing equality operator (?=) which handles comparison with empty sets. Shows equality comparison between regular values and empty sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select {1} ?= {1.0};\n{true}\ndb> select {1} ?= <int64>{};\n{false}\ndb> select <int64>{} ?= <int64>{};\n{true}\n```\n\n----------------------------------------\n\nTITLE: Creating Tuple Literals in EdgeQL\nDESCRIPTION: Examples of creating tuple literals in EdgeQL, including both unnamed and named tuples. Demonstrates tuple indexing.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nselect ('Apple', 7, true);\nselect (fruit := 'Apple', quantity := 3.14, fresh := true);\nselect (1, 3.14, 'red').0;\nselect (1, 3.14, 'red').2;\nselect (name := 'george', age := 12).name;\nselect (name := 'george', age := 12).0;\n```\n\n----------------------------------------\n\nTITLE: Initializing a New EdgeDB Project with CLI\nDESCRIPTION: Shows how to use the 'edgedb project init' command to set up an EdgeDB instance for a new project, including creating schema and migrations directories and linking credentials. The interactive prompt guides through instance naming and deployment options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b2.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init\nNo `edgedb.toml` found in `/home/username/dev/hw` or above\nDo you want to initialize a new project? [Y/n]\n> Y\nSpecify the name of EdgeDB instance to use with this project\n[default: myproject]:\n> myproject\nType a number to select an option:\nHow would you like to run EdgeDB for this project?\n1. Local (docker)\n> 1\nChecking EdgeDB versions...\nSpecify the version of EdgeDB to use with this project\n[default: 1-beta2]:\n> 1-beta2\n┌─────────────────────┬──────────────────────────────────────────┐\n│ Project directory   │ /home/username/dev/myproject             │\n│ Project config      │ /home/username/dev/myproject/edgedb.toml │\n│ Schema dir (empty)  │ /home/username/dev/myproject/dbschema    │\n│ Installation method │ Docker Container                         │\n│ Version             │ 1-beta2-c23b7a1                          │\n│ Instance name       │ myproject                                │\n└─────────────────────┴──────────────────────────────────────────┘\nInitializing EdgeDB instance...\ne740091d317687d1628f96e43a77ec02f098de68df3b8b95b3bd987f7c30080d\nApplying migrations...\nEverything is up to date. Revision initial\nProject initialialized.\nTo connect to myproject, just run `edgedb`\n```\n\n----------------------------------------\n\nTITLE: Using __specified__ in Mutation Rewrites\nDESCRIPTION: This example demonstrates using the __specified__ special value to conditionally update a property only when a specific field is modified.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/mutation_rewrites.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Post {\n  required title: str;\n  required body: str;\n  title_modified: datetime {\n    rewrite update using (\n      datetime_of_statement()\n      if __specified__.title\n      else __old__.title_modified\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Property in EdgeQL\nDESCRIPTION: Defines a new property 'address' on the 'User' object type with a string data type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  create property address: str\n};\n```\n\n----------------------------------------\n\nTITLE: Creating local_date from String in EdgeQL\nDESCRIPTION: Demonstrates creating a local_date value by parsing a string using the cal::to_local_date function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_29\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_date('2018-05-07');\n{<cal::local_date>'2018-05-07'}\n```\n\n----------------------------------------\n\nTITLE: Referencing Entities from Other Modules in EdgeDB TypeScript\nDESCRIPTION: Demonstrates how to reference entities and globals from modules other than the default module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ne.characters.Vampire;\n```\n\n----------------------------------------\n\nTITLE: Defining Thread and Post Types in EdgeDB\nDESCRIPTION: This snippet defines the Thread and Post types in EdgeDB, including fields, links, and a computed link for Thread to access related posts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ntype Thread {\n    required app_id: int32 {\n        constraint exclusive;\n    }\n    title: str;\n\n    # Let's add a computed link back to posts.\n    posts := .<thread[is Post];\n}\n\ntype Post {\n    required app_id: int32 {\n        constraint exclusive;\n    }\n    required body: str {\n        constraint exclusive;\n    }\n    required creation_time: datetime {\n        default := datetime_current();\n    }\n    edited_time: datetime;\n\n    required user: User;\n    thread: Thread;\n    reply_to: Post;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Log Insert Trigger Using EdgeDB DDL\nDESCRIPTION: Demonstrates how to create a trigger using DDL commands. This trigger inserts a Log object for each new User object, similar to the SDL example.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  create trigger log_insert after insert for each do (\n    insert Log {\n      action := 'insert',\n      target_name := __new__.name\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Interpolating Point Position on Line\nDESCRIPTION: Function that calculates the position of a point when projected onto a line, returning a value between 0 and 1. Maps to the PostGIS st_interpolatepoint function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_117\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::interpolatepoint( \\\n                    line: ext::postgis::geometry, \\\n                    point: ext::postgis::geometry, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Defining Search API Models\nDESCRIPTION: Pydantic model definitions for search request and response schemas\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\n\nclass SearchTerms(BaseModel):\n    query: str\n\nclass SearchResult(BaseModel):\n    response: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Flashcard Data Model\nDESCRIPTION: TypeScript interfaces describing the data model for a flashcards application. It defines a Card interface with front and back text, and a Deck interface containing a name, optional description, and an array of Card objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/modeling/nextjs.rst#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Card {\n  front: string;\n  back: string;\n}\n\ninterface Deck {\n  name: string;\n  description: string | null;\n  cards: Card[];\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Log Entries in EdgeQL\nDESCRIPTION: Demonstrates how to insert, update, and delete Person objects and query the resulting Log entries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert Person {name := 'Jonathan Harker'};\n{default::Person {id: b4d4e7e6-bd19-11ed-8363-1737d8d4c3c3}}\ndb> select Log {action, timestamp, target_name, change};\n{\n  default::Log {\n    action: 'insert',\n    timestamp: <datetime>'2023-03-07T18:56:02.403817Z',\n    target_name: 'Jonathan Harker',\n    change: {}\n  }\n}\ndb> update Person filter .name = 'Jonathan Harker'\n... set {name := 'Mina Murray'};\n{default::Person {id: b4d4e7e6-bd19-11ed-8363-1737d8d4c3c3}}\ndb> select Log {action, timestamp, target_name, change};\n{\n  default::Log {\n    action: 'insert',\n    timestamp: <datetime>'2023-03-07T18:56:02.403817Z',\n    target_name: 'Jonathan Harker',\n    change: {}\n  },\n  default::Log {\n    action: 'update',\n    timestamp: <datetime>'2023-03-07T18:56:39.520889Z',\n    target_name: 'Mina Murray',\n    change: 'Jonathan Harker->Mina Murray'\n  },\n}\ndb> delete Person filter .name = 'Mina Murray';\n{default::Person {id: b4d4e7e6-bd19-11ed-8363-1737d8d4c3c3}}\ndb> select Log {action, timestamp, target_name, change};\n{\n  default::Log {\n    action: 'insert',\n    timestamp: <datetime>'2023-03-07T18:56:02.403817Z',\n    target_name: 'Jonathan Harker',\n    change: {}\n  },\n  default::Log {\n    action: 'update',\n    timestamp: <datetime>'2023-03-07T18:56:39.520889Z',\n    target_name: 'Mina Murray',\n    change: 'Jonathan Harker->Mina Murray'\n  },\n  default::Log {\n    action: 'delete',\n    timestamp: <datetime>'2023-03-07T19:00:52.636084Z',\n    target_name: 'Mina Murray',\n    change: {}\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying EdgeDB Migration with gel Command\nDESCRIPTION: Example of applying a migration with the gel command and viewing the confirmation that it was applied successfully.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migrate\nApplied m1paw3ogpsdtxaoywd6pl6beg2g64zj4ykhd43zby4eqh64yjad47a\n(00001.edgeql)\n```\n\n----------------------------------------\n\nTITLE: Executing Interactive Migration in Gel CLI\nDESCRIPTION: This bash command shows how to create an interactive migration using the Gel CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Name with EdgeQL\nDESCRIPTION: EdgeQL query to filter users by name using a parameter binding\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User {name, created_at}\nfilter User.name = <str>$name\n```\n\n----------------------------------------\n\nTITLE: Removing Linked Items in EdgeQL\nDESCRIPTION: Shows how to remove linked items using the -= operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter .title = \"Black Widow\"\nset {\n characters -= Villain # remove all villains\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from GeoJSON\nDESCRIPTION: Function that creates a geometry value from GeoJSON representation, accepting either a string or JSON object. Maps to the PostGIS st_geomfromgeojson function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_103\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromgeojson( \\\n                    a0: std::str \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::geomfromgeojson( \\\n                    a0: std::json \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Defining DateDuration Class in JavaScript\nDESCRIPTION: This snippet defines the DateDuration class, which represents a Gel cal::date_duration value. It includes constructor parameters for years, months, weeks, and days.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass DateDuration( \n      years: number = 0, \n      months: number = 0, \n      weeks: number = 0, \n      days: number = 0, \n    )\n```\n\n----------------------------------------\n\nTITLE: Merging Gel Database Feature Branch\nDESCRIPTION: Commands to switch back to the main database branch in Gel and merge the feature branch, completing the integration of schema changes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/branches.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel branch switch main\nSwitching from 'feature' to 'main'\n$ gel branch merge feature\n```\n\n----------------------------------------\n\nTITLE: Phrase-Based FTS Query\nDESCRIPTION: Shows how to perform exact phrase matching in full-text search.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/fts.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith res := (\n  select fts::search(\n    Item, '\"corn sugar\"',\n    language := 'eng',\n  )\n)\nselect res.object {name, description, score := res.score}\norder by res.score desc;\n```\n\n----------------------------------------\n\nTITLE: Computing Range and Multirange Intersection in EdgeQL\nDESCRIPTION: Demonstrates finding the intersection of ranges and multiranges using the * operator. The result contains only the elements that are in both operands.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select range(1, 10) * range(5, 15);\n{range(5, 10)}\ndb> select range(1, 10) * range(-15, 15);\n{range(1, 10)}\ndb> select range(1) * range(-15, 15);\n{range(1, 15)}\ndb> select range(10) * range(<int64>{}, 1);\n{range({}, inc_lower := false, empty := true)}\n\ndb> select multirange([range(1, 10)]) *\n...   multirange([range(0, 3), range(5, 6), range(9)]);\n{[range(1, 3), range(5, 6), range(9, 10)]}\ndb> select multirange([range(2, 3), range(5, 6), range(9, 10)]) *\n...   multirange([range(-10, 0), range(4, 8)]);\n{[range(5, 6)]}\n```\n\n----------------------------------------\n\nTITLE: Creating User with EdgeQL\nDESCRIPTION: An EdgeQL query to insert a new User object with a specified username. The query returns the name field of the newly created user.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_26\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert User {\n    name := <str>$username\n}) {\n    name\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Actor from a Movie's Cast in EdgeQL\nDESCRIPTION: This query removes a specific actor (Jason Momoa) from the cast of the movie 'Dune' directed by Villeneuve.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/update.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter\n    .title = 'Dune'\n    and\n    .directors.last_name = 'Villeneuve'\nset {\n    actors -= (\n        select Person\n        filter\n            .full_name = 'Jason Momoa'\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Decimal Literal Examples in EdgeQL\nDESCRIPTION: Shows the syntax for decimal literals in EdgeQL using float numbers and exponential notation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 1.23n is decimal;\n{true}\n\ndb> select 1.0e+100n is decimal;\n{true}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_makepoint Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_makepoint function in EdgeDB. It has multiple overloads taking 2, 3, or 4 float64 inputs to create point geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_160\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::makepoint( \\\n                    a0: std::float64, \\\n                    a1: std::float64, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::makepoint( \\\n                    a0: std::float64, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::makepoint( \\\n                    a0: std::float64, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                    a3: std::float64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: FastAPI User Router Implementation\nDESCRIPTION: Implementation of FastAPI router with GET endpoint for user retrieval\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport datetime\nfrom http import HTTPStatus\nfrom typing import List\n\nimport gel\nfrom fastapi import APIRouter, HTTPException, Query\nfrom pydantic import BaseModel\n\nfrom .queries import get_user_by_name_async_edgeql as get_user_by_name_qry\nfrom .queries import get_users_async_edgeql as get_users_qry\n\nrouter = APIRouter()\nclient = gel.create_async_client()\n\n\nclass RequestData(BaseModel):\n    name: str\n\n\n@router.get(\"/users\")\nasync def get_users(\n    name: str = Query(None, max_length=50)\n) -> List[get_users_qry.GetUsersResult] | get_user_by_name_qry.GetUserByNameResult:\n\n    if not name:\n        users = await get_users_qry.get_users(client)\n        return users\n    else:\n        user = await get_user_by_name_qry.get_user_by_name(client, name=name)\n        return user\n```\n\n----------------------------------------\n\nTITLE: Starting Gel REPL\nDESCRIPTION: This command starts the Gel REPL (Read-Eval-Print Loop) from the project root, allowing exploration of the empty database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/nextjs.rst#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npx gel\n```\n\n----------------------------------------\n\nTITLE: Calculating Perimeter in EdgeQL\nDESCRIPTION: Calculates the perimeter of a geometry or geography, with option to use spheroid calculations for geography. This function exposes the PostGIS st_perimeter function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_199\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::perimeter( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n                  ext::postgis::perimeter( \\\n                    geog: ext::postgis::geography, \\\n                    use_spheroid: std::bool = true, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Activating the pgcrypto Extension in EdgeDB SDL\nDESCRIPTION: Shows how to activate the pgcrypto extension in EdgeDB using SDL. This extension provides tools for hashing and encryption needs, and is available since EdgeDB 4.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgcrypto.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension pgcrypto;\n```\n\n----------------------------------------\n\nTITLE: Checking if Range or Multirange is Empty in EdgeQL\nDESCRIPTION: Demonstrates the use of range_is_empty() function to check if a range or multirange contains no values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range_is_empty(range(1, 10));\n{false}\ndb> select range_is_empty(range(1, 1));\n{true}\ndb> select range_is_empty(range(<int64>{}, empty := true));\n{true}\ndb> select range_is_empty(multirange(<array<range<int64>>>[]));\n{true}\ndb> select range_is_empty(multirange([range(1, 10)]));\n{false}\n```\n\n----------------------------------------\n\nTITLE: Working with Range Results in Gel TypeScript\nDESCRIPTION: Demonstrates how range values returned from queries are represented as instances of the Range class, which provides properties for accessing range bounds and other attributes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.range(0, 8);\nconst result = await query.run(client);\n// => Range<number>;\n\nconsole.log(result.lower);       // 0\nconsole.log(result.upper);       // 8\nconsole.log(result.isEmpty);     // false\nconsole.log(result.incLower);    // true\nconsole.log(result.incUpper);    // false\n```\n\n----------------------------------------\n\nTITLE: Creating Friend Schema for Vector Search\nDESCRIPTION: Defines a Friend type schema with various text properties that will later be used for vector-based similarity search.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    type Friend {\n        required name: str {\n            constraint exclusive;\n        };\n\n        summary: str;               # A brief description of personality and role\n        relationship_to_komi: str;  # Relationship with Komi\n        defining_trait: str;        # Primary character trait or quirk\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Gel Application\nDESCRIPTION: Commands to download and apply Kubernetes configuration, verify deployment, and expose the service.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/gcp.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wget \"https://raw.githubusercontent.com\\\n/geldata/gel-deploy/dev/gcp/deployment.yaml\"\n\n$ kubectl apply -f deployment.yaml\n\n$ kubectl get pods\n$ kubectl expose deploy/gel --type LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Scalar Type with DDL\nDESCRIPTION: Example of creating a non-negative integer type using DDL commands. This demonstrates the low-level approach to defining custom scalar types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate scalar type posint64 extending int64 {\n    create constraint min_value(0);\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance Example in SDL\nDESCRIPTION: Demonstrates how to use multiple inheritance in type definitions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type HasName {\n  first_name: str;\n  last_name: str;\n}\n\nabstract type HasEmail {\n  email: str;\n}\n\ntype Person extending HasName, HasEmail {\n  best_friend: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Introspection to Examine Types in EdgeDB\nDESCRIPTION: This EdgeQL REPL session demonstrates how to use 'introspect' to examine type information for a scalar type (int16), an object type (Foo), and a property's type (Foo.bar).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/type.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select (introspect int16).name;\n{'std::int16'}\ndb> select (introspect Foo).name;\n{'default::Foo'}\ndb> select (introspect typeof Foo.bar).name;\n{'std::int16'}\n```\n\n----------------------------------------\n\nTITLE: Backlink Query for Hero's Movies in EdgeQL\nDESCRIPTION: Illustrates how to use backlinks to fetch movies starring a particular hero.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Hero {\n  name,\n  movies := .<characters[is Movie] { title }\n} filter .name = \"Iron Man\";\n```\n\n----------------------------------------\n\nTITLE: Array to String Conversion in EdgeQL\nDESCRIPTION: Example of converting arrays to strings using to_str() with a delimiter parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_26\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_str(['one', 'two', 'three'], ', ');\n{'one, two, three'}\n```\n\n----------------------------------------\n\nTITLE: Using 'for' Query for Per-Object Evaluation in EdgeQL\nDESCRIPTION: Demonstrates how to use a 'for' query to evaluate a condition for every account, handling cases where 'steps' might be undefined.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nfor A in Account\nunion (A.steps <= 2) ?? true;\n```\n\n----------------------------------------\n\nTITLE: Conditional DML with User Insertion in EdgeQL\nDESCRIPTION: Demonstrates conditional DML in EdgeQL, inserting either an AdminUser or a regular User based on a boolean condition. It uses parameters for the name and admin status.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  name := <str>$0,\n  admin := <bool>$1\nselect if admin then (\n    insert AdminUser { name := name }\n) else (\n    insert User { name := name }\n)\n```\n\n----------------------------------------\n\nTITLE: Extension DDL Commands in EdgeQL\nDESCRIPTION: Creating and dropping extensions using EdgeQL DDL commands\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/extensions.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate extension graphql;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate extension edgeql_http;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop extension graphql;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop extension edgeql_http;\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters in EdgeDB REPL\nDESCRIPTION: Shows how to use query parameters in the EdgeDB REPL, where the user is prompted for parameter values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/repl.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 5 + <int64>$num;\nParameter <int64>$num: 6\n{11}\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Client for React\nDESCRIPTION: TypeScript code to create a tRPC client for use in React components.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTRPCReact } from \"@trpc/react-query\";\nimport { AppRouter } from './routers/_app';\n\nexport const api = createTRPCReact<AppRouter>();\n```\n\n----------------------------------------\n\nTITLE: Forcing SFS Compliance in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_forcesfs function to force a geometry to comply with the Simple Features Specification. An optional version parameter can be provided.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_86\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::forcesfs( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::forcesfs( \\\n                    a0: ext::postgis::geometry, \\\n                    version: std::str, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using withConfig Method in TypeScript\nDESCRIPTION: Demonstrates setting client session configuration parameters, specifically setting a query timeout before executing a query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await client\n  .withConfig({ \"query_timeout\": 10000 })\n  .query<{ name: string }>(`\n    select User { name };\n  `);\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Branch in EdgeDB REPL\nDESCRIPTION: Shows how to connect to a specific branch using the \\c command in the EdgeDB REPL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/repl.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> \\c my_new_project\nmy_new_project>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Literals in EdgeQL\nDESCRIPTION: This snippet shows examples of integer literals in EdgeQL, including regular int64, explicit casts to int16 and int32, and bigint literals.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/lexical.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 0;\n{0}\n\ndb> select 123;\n{123}\n\ndb> select <int16>456;\n{456}\n\ndb> select <int32>789;\n{789}\n\ndb> select 123n;\n{123n}\n\ndb> select 12345678901234567890n;\n{12345678901234567890n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Migration for GraphQL in Gel\nDESCRIPTION: These commands create a new migration and apply it to enable GraphQL access to the database. This is necessary after adding the GraphQL extension to the schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\n$ gel migrate\n```\n\n----------------------------------------\n\nTITLE: Querying an Array in JavaScript with EdgeDB\nDESCRIPTION: Demonstrates how to query an EdgeDB array and receive it as a JavaScript array of numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.querySingle<number[]>(\"select [1, 2, 3];\");\n// number[]: [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining Array Properties in SDL\nDESCRIPTION: Examples of valid and invalid array property definitions in SDL. This shows the limitations and possibilities of array types in Gel.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  str_array: array<str>;\n  json_array: array<json>;\n  tuple_array: array<tuple<float32, float32>>;\n\n  # INVALID: arrays of object types not allowed:\n  # friends: array<Person>\n\n  # INVALID: arrays cannot be nested:\n  # nested_array: array<array<str>>\n\n  # VALID: arrays can contain tuples with arrays in them\n  nested_array_via_tuple: array<tuple<array<str>>>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cached Computed Property with Mutation Rewrites\nDESCRIPTION: This snippet shows how to use mutation rewrites to create a cached computed property that combines multiple fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/mutation_rewrites.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype Post {\n  required title: str;\n  required body: str;\n  author: str;\n  created: datetime {\n    rewrite insert using (datetime_of_statement())\n  }\n  byline: str {\n    rewrite insert, update using (\n      'by ' ++\n      __subject__.author ++\n      ' on ' ++\n      to_str(__subject__.created, 'Mon DD, YYYY')\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Range and Multirange Overlap in EdgeQL\nDESCRIPTION: Illustrates the use of overlaps() function to check if ranges or multiranges have any elements in common.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_20\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select overlaps(range(1, 10), range(5));\n{true}\ndb> select overlaps(range(1, 10), range(10));\n{false}\n\ndb> select overlaps(\n...   multirange([\n...     range(1, 4), range(7),\n...   ]),\n...   multirange([\n...     range(-1, 2), range(8, 10),\n...   ]),\n... );\n{true}\ndb> select overlaps(\n...   multirange([\n...     range(1, 4), range(7),\n...   ]),\n...   multirange([\n...     range(-1, 1), range(5, 6),\n...   ]),\n... );\n{false}\n```\n\n----------------------------------------\n\nTITLE: Querying All Users\nDESCRIPTION: Retrieves basic user information including ID, name, and image for all users in the system.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    User {\n        id\n        name\n        image\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition - SDL\nDESCRIPTION: Definition of database schema using Gel's SDL including Message, Chat, and User types\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_15\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    type Message {\n        role: str;\n        body: str;\n        timestamp: datetime {\n            default := datetime_current();\n        }\n        multi sources: str;\n    }\n\n    type Chat {\n        multi messages: Message;\n    }\n\n    type User {\n        name: str {\n\n```\n\n----------------------------------------\n\nTITLE: Backlinks Schema Definition\nDESCRIPTION: Defines types for demonstrating backlink traversal functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype Author {\n  name: str;\n}\n\ntype Article {\n  title: str;\n  multi authors: Author;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Properties in Gel SDL\nDESCRIPTION: This example demonstrates how to add annotations to properties. Annotations are used to provide additional metadata or documentation for schema elements.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  email: str {\n    annotation title := 'Email address';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relative Duration Year Comparison\nDESCRIPTION: Demonstrates how relative_duration calculations differ between leap and non-leap years\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql-repl\nCODE:\n```\nwith\n    first_day_of_2020 := <datetime>'2020-01-01T00:00:00Z',\n    one_year := <cal::relative_duration>'1 year',\n    first_day_of_next_year := first_day_of_2020 + one_year\nselect first_day_of_next_year - first_day_of_2020;\n{<duration>'8784:00:00'}\ndb> with\n    first_day_of_2019 := <datetime>'2019-01-01T00:00:00Z',\n    one_year := <cal::relative_duration>'1 year',\n    first_day_of_next_year := first_day_of_2019 + one_year\nselect first_day_of_next_year - first_day_of_2019;\n{<duration>'8760:00:00'}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Sets with Type Casting in Gel TypeScript\nDESCRIPTION: Demonstrates how to declare an empty set by casting it to the desired type, as EdgeDB does not allow empty sets without a cast.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ne.cast(e.int64, e.set());\n// <std::int64>{}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Literals in EdgeQL\nDESCRIPTION: Examples of creating array literals in EdgeQL. Arrays are ordered collections of values of the same type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nselect [1, 2, 3];\nselect ['hello', 'world'];\nselect [(1, 2), (100, 200)];\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Global Property in EdgeQL\nDESCRIPTION: Example of defining a computed global property 'current_user' based on the previously defined 'current_user_id' in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate global current_user := (\n    select User filter .id = global current_user_id\n);\n```\n\n----------------------------------------\n\nTITLE: Computed Links with Same Title Query\nDESCRIPTION: Shows how to create a computed link that returns all movies with the same title using a dynamic query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str;\n  multi actors: Person;\n\n  # returns all movies with same title\n  multi same_title := (\n    with t := .title\n    select detached Movie filter .title = t\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Constraints in SDL\nDESCRIPTION: Example of defining an abstract constraint for minimum value and using it on a scalar type and object type property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nabstract constraint min_value(min: anytype) {\n    errmessage :=\n      'Minimum allowed value for {__subject__} is {min}.';\n\n    using (__subject__ >= min);\n}\n\n# use it like this:\n\nscalar type posint64 extending int64 {\n    constraint min_value(0);\n}\n\n# or like this:\n\ntype User {\n  required age: int16 {\n    constraint min_value(12);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Query Selection in TypeScript\nDESCRIPTION: Demonstrates how to select polymorphic fields with nullable properties across different types using the EdgeQL query builder.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Cast_Character, (obj) => ({\n  title: true,\n  ...e.is(e.Movie, { release_year: true }),\n  ...e.is(e.TVShow, { num_seasons: true }),\n}));\n```\n\n----------------------------------------\n\nTITLE: JavaScript Transaction API Example\nDESCRIPTION: Shows how to use the new transaction API in the JavaScript client binding, including nested transactions with savepoints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a5.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait con.transaction(async () => {\n    await con.execute(`\n        insert Example {\n            name := 'Test Transaction 1'\n        };\n    `);\n    await con.execute(\"select 1 / 0;\");\n});\n\n// nested transactions are supported\n// and handle save points\nawait con.transaction(async () => {\n\n    // nested transaction\n    await con.transaction(async () => {\n        await con.execute(`\n            insert Example {\n                name := 'Test Transaction 2'\n            };\n        `);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Profile Retrieval\nDESCRIPTION: Fetches user profile information from Google's OAuth service using OpenID Connect discovery and provider token authentication.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getUserProfile(providerToken) {\n  const response = await fetch(\n    \"https://accounts.google.com/.well-known/openid-configuration\"\n  );\n  const discoveryDocument = await response.json();\n  const response = await fetch(discoveryDocument.userinfo_endpoint, {\n    headers: {\n      Authorization: `Bearer ${providerToken}`,\n      Accept: \"application/json\",\n    },\n  });\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query via GET Request in Gel\nDESCRIPTION: This curl command shows how to send a GraphQL query using a GET request to a Gel instance. Query parameters, variables, and globals are passed as URL-encoded data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl \\\n    -H application/x-www-form-urlencoded \\\n    -X GET http://localhost:10787/branch/main/graphql \\\n    -G \\\n    --data-urlencode 'query=query getMovie($title: String!) { Movie(filter: {title:{eq: $title}}) { id title }}' \\\n    --data-urlencode 'variables={ \"title\": \"The Batman\" }'\n    --data-urlencode 'globals={ \"default::current_user\": \"04e52807-6835-4eaa-999b-952804ab40a5\" }'\n{\"data\": {...}}\n```\n\n----------------------------------------\n\nTITLE: Preparing PostGIS Geometry for Mapbox Vector Tiles\nDESCRIPTION: Transforms PostGIS geometry for use in Mapbox Vector Tiles (MVT). Allows specifying bounds, extent, buffer, and clipping options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::asmvtgeom( \n  geom: optional ext::postgis::geometry, \n  bounds: optional ext::postgis::box2d, \n  extent: optional std::int64 = 4096, \n  buffer: optional std::int64 = 256, \n  clip_geom: optional std::bool = true, \n) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using bounded_below Function in EdgeDB\nDESCRIPTION: Shows usage of the bounded_below function which checks if the first range is bounded below by the lower bound of the second range. Supports both ranges and multiranges.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_25\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bounded_below(\n  range(1, 7), range(3, 6)\n);\n{false}\ndb> select bounded_below(\n  range(1, 7), range(0, 6)\n);\n{true}\n\ndb> select bounded_below(\n  multirange([\n    range(-1, 0), range(5, 7),\n  ]),\n  multirange([\n    range(1, 2), range(3, 7),\n  ]),\n);\n{false}\n\ndb> select bounded_below(\n  range(5, 7),\n  multirange([\n    range(1, 2), range(3, 7),\n  ]),\n);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Properties in Gel SDL\nDESCRIPTION: This snippet demonstrates how to declare basic properties for an object type in Gel's schema definition language. It shows both the use of the 'property' keyword and its omission.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Player {\n  property email: str;\n  points: int64;\n  is_online: bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Bytes to String Conversion in EdgeQL\nDESCRIPTION: Converting bytes to string using UTF-8 encoding, with error handling for invalid UTF-8 sequences.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_27\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_str(b'\\xe3\\x83\\x86');\n{'テ'}\ndb> select to_str(b'\\xe3\\x83');\ngel error: InvalidValueError: invalid byte sequence for\nencoding \"UTF8\": 0xe3 0x83\n```\n\n----------------------------------------\n\nTITLE: Computing Digests with ext::pgcrypto::digest Function\nDESCRIPTION: Demonstrates the use of the digest function to compute hashes using various algorithms like SHA1 and MD5. The function accepts string or bytes input and returns a binary hash result.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgcrypto.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect ext::pgcrypto::digest('encrypt this', 'sha1');\nselect ext::pgcrypto::digest(b'encrypt this', 'md5');\n```\n\n----------------------------------------\n\nTITLE: Inserting First User\nDESCRIPTION: Creates the first user in the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/paths.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert User {\n... email := \"user1@me.com\",\n... };\n```\n\n----------------------------------------\n\nTITLE: Range JSON Representation in EdgeQL\nDESCRIPTION: Examples of converting ranges to and from JSON format with various boundary conditions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <json>range(1, 10);\n{\"inc_lower\": true, \"inc_upper\": false, \"lower\": 1, \"upper\": 10}\n```\n\n----------------------------------------\n\nTITLE: Enabling Extensions in SDL\nDESCRIPTION: How to enable extensions like auth and ai using SDL syntax\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/extensions.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension auth;\n# or / and\nusing extension ai;\n```\n\n----------------------------------------\n\nTITLE: String Slicing in EdgeQL\nDESCRIPTION: Shows how string slicing works in EdgeQL with various combinations of positive and negative indices, including behavior with out-of-bounds indices.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 'some text'[1:3];\n{'om'}\ndb> select 'some text'[-4:];\n{'text'}\ndb> select 'some text'[:-5];\n{'some'}\ndb> select 'some text'[5:-2];\n{'te'}\ndb> select 'some text'[-4:100];\n{'text'}\ndb> select 'some text'[-100:-5];\n{'some'}\n```\n\n----------------------------------------\n\nTITLE: Creating Point from WKB in EdgeQL\nDESCRIPTION: Creates a Point geometry from WKB (Well-Known Binary) representation with an optional SRID parameter. This function exposes the PostGIS st_pointfromwkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_205\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointfromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::pointfromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Declaration in EdgeQL With Clause\nDESCRIPTION: Demonstrates a simple variable declaration using the 'with' clause to define a string and use it in a query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/with.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith my_str := \"hello world\"\nselect str_title(my_str);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Gel Instance using CLI\nDESCRIPTION: This snippet demonstrates how to connect to a deployed Gel instance using the gel CLI. It uses the public hostname and admin password to establish a connection.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/aws_aurora_ecs.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --dsn gel://admin:<password>@<hostname> --tls-security insecure\nGel x.x\nType \\help for help, \\quit to quit.\ngel>\n```\n\n----------------------------------------\n\nTITLE: Calculating Fréchet Distance in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_frechetdistance function to calculate the Fréchet distance between two geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_87\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::frechetdistance( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Comment\nDESCRIPTION: Creates a comment on the blog post by the first user.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/paths.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert Comment {\n... text := \"Nice post, user2!\",\n... author := assert_single((select User filter .email = \"user1@me.com\"))\n... };\n```\n\n----------------------------------------\n\nTITLE: Checking if Range or Multirange is Strictly Above Another in EdgeQL\nDESCRIPTION: Shows how to use strictly_above() function to check if all values of the first range or multirange appear after the second.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_22\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select strictly_above(\n...   range(7), range(1, 5)\n... );\n{true}\ndb> select strictly_above(\n...   range(3, 7), range(1, 5)\n... );\n{false}\n\ndb> select strictly_above(\n...   multirange([\n...     range(2, 4), range(5, 7),\n...   ]),\n...   multirange([\n...     range(-5, -2), range(-1, 1),\n...   ]),\n... );\n{true}\n\ndb> select strictly_above(\n...   range(8),\n...   multirange([\n...     range(1, 2), range(3, 7),\n...   ]),\n... );\n{true}\n```\n\n----------------------------------------\n\nTITLE: Updated User Schema with Array-Based Friends in EdgeDB SDL\nDESCRIPTION: Shows the target schema after changing the 'friends' link to a property of type array<str>.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_36\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n      name: str;\n      multi friends: array<str>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gel Code Generation Example\nDESCRIPTION: Example of using code generation with EdgeQL files and the generated Python code\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/index.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    name := <str>$name,\nselect User { first_name, email, bio }\nfilter .name = name;\n```\n\nLANGUAGE: python\nCODE:\n```\nimport gel\nfrom .queries import get_user_by_name_sync_edgeql as get_user_by_name_qry\n\nclient = gel.create_async_client()\n\nasync def main():\n    result = await get_user_by_name_qry.get_user_by_name(client, name=\"John\")\n    print(result)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Flexible Server\nDESCRIPTION: Command to provision a new PostgreSQL Flexible Server with specified configurations including admin user, location, and version\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ az postgres flexible-server create \\\n    --resource-group $GROUP \\\n    --name $PG_SERVER_NAME \\\n    --location westus \\\n    --admin-user gel_admin \\\n    --admin-password $PASSWORD \\\n    --sku-name Standard_D2s_v3 \\\n    --version 14 \\\n    --yes\n```\n\n----------------------------------------\n\nTITLE: Creating a Type with Direct DDL in EdgeQL\nDESCRIPTION: This snippet shows how to create a new type 'SomeType' using a direct DDL statement after allowing bare DDL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_32\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate type SomeType;\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Signing Key\nDESCRIPTION: Commands to generate a secure signing key for JWT authentication, using either OpenSSL or Python.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Array Operations in EdgeQL\nDESCRIPTION: Basic array operations in EdgeQL, demonstrating array creation and indexing.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect [1, 2, 3];\nselect [1, 2, 3][1] = 2;  # true\n```\n\n----------------------------------------\n\nTITLE: Defining Exclusive Upper Bound with Max_ex_value Constraint in EdgeDB SDL\nDESCRIPTION: Shows how to use 'max_ex_value' constraint to set a non-inclusive upper bound for a custom scalar type 'Under100'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Under100 extending int64 {\n    constraint max_ex_value(100);\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Character Schema Definition in SDL\nDESCRIPTION: Initial schema definition for a character type with enum-based class property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type CharacterClass extending enum<warrior, scholar, rogue>;\n\ntype Character {\n  required name: str;\n  required class: CharacterClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Gel Instances\nDESCRIPTION: Display a table of all Gel instances on the machine showing their kind, name, port, version, and status.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/instances.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance list\n┌────────┬──────────────────┬──────────┬────────────────┬──────────┐\n│ Kind   │ Name             │ Port     │ Version        │ Status   │\n├────────┼──────────────────┼──────────┼────────────────┼──────────┤\n│ local  │ my_instance      │ 10700    │ x.x+cc4f3b5    │ active   │\n│ local  │ my_instance_2    │ 10701    │ x.x+cc4f3b5    │ active   │\n│ local  │ my_instance_3    │ 10702    │ x.x+cc4f3b5    │ active   │\n└────────┴──────────────────┴──────────┴────────────────┴──────────┘\n```\n\n----------------------------------------\n\nTITLE: Inserting Vector Data in EdgeQL\nDESCRIPTION: Examples of inserting vector data into the database. Shows how to populate vector fields by direct assignment or casting from numeric arrays.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ngel> insert Item {embedding := <v3>[1.2, 3, 4.5]};\n{default::Item {id: f119d64e-0995-11ee-8804-ff8cd739d8b7}}\ngel> insert Item {embedding := [-0.1, 7, 0]};\n{default::Item {id: f410c844-0995-11ee-8804-176f28167dd1}}\n```\n\n----------------------------------------\n\nTITLE: Using Endian Enum for Integer Encoding in EdgeQL\nDESCRIPTION: Examples of using the Endian enum to specify big-endian or little-endian encoding when converting between bytes and integers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bytes.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_bytes(<int32>16908295, Endian.Big);\n{b'\\x01\\x02\\x00\\x07'}\ndb> select to_int32(b'\\x01\\x02\\x00\\x07', Endian.Big);\n{16908295}\ndb> select to_bytes(<int32>16908295, Endian.Little);\n{b'\\x07\\x00\\x02\\x01'}\ndb> select to_int32(b'\\x07\\x00\\x02\\x01', Endian.Little);\n{16908295}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types with Properties and Inheritance in EdgeDB SDL\nDESCRIPTION: This SDL code defines two related EdgeDB object types: Foo with scalar and object properties, and Bar that extends Foo. The example demonstrates property definition and type inheritance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/type.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype Foo {\n    bar: int16;\n    baz: Bar;\n}\n\ntype Bar extending Foo;\n```\n\n----------------------------------------\n\nTITLE: Converting datetime to local_datetime with Timezone in EdgeQL\nDESCRIPTION: Shows how to convert a timezone-aware datetime to a local_datetime in a specified timezone using the cal::to_local_datetime function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_28\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_datetime(\n  <datetime>'2018-12-31T22:00:00+08',\n  'America/Chicago');\n{<cal::local_datetime>'2018-12-31T08:00:00'}\n```\n\n----------------------------------------\n\nTITLE: Computed Properties in EdgeQL TypeScript\nDESCRIPTION: Shows how to add computed properties to queries using string operations and other functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Movie, movie => ({\n  title: true,\n  uppercase_title: e.str_upper(movie.title),\n  title_length: e.len(movie.title),\n}));\n```\n\n----------------------------------------\n\nTITLE: Connecting to EdgeDB via PostgreSQL CLI\nDESCRIPTION: Example of connecting to a local EdgeDB instance using the psql command-line interface on port 10701 with the 'admin' user and 'main' branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ psql -h localhost -p 10701 -U admin -d main\n```\n\n----------------------------------------\n\nTITLE: Revised Schema with Optional Link in EdgeDB SDL\nDESCRIPTION: Modified schema definition making the class link optional, which is a necessary intermediate step when adding a required link to existing data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_33\n\nLANGUAGE: sdl\nCODE:\n```\ntype CharacterClass {\n  required name: str;\n  multi skills: str;\n}\n\ntype Character {\n  required name: str;\n  class: CharacterClass;\n}\n```\n\n----------------------------------------\n\nTITLE: User-Movie Review Status in EdgeQL\nDESCRIPTION: Queries whether each user has reviewed each movie, producing a cartesian product.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    User.name,\n    Movie.title,\n    Movie in User.<author[is Review].movie\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating count() function in EdgeQL\nDESCRIPTION: This snippet shows how the count() function works as an aggregate operation, returning a singleton integer regardless of input set size.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/cardinality.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select count('hello');\n{1}\ndb> select count({'this', 'is', 'a', 'set'});\n{4}\ndb> select count(<str>{});\n{0}\n```\n\n----------------------------------------\n\nTITLE: Using 'exists' Operator in EdgeQL\nDESCRIPTION: Demonstrates the 'exists' aggregate operator which returns a singleton set containing true if the input set is not empty, and false otherwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\nselect exists {1, 2};\n```\n\n----------------------------------------\n\nTITLE: Basic Movie Grouping by Release Year\nDESCRIPTION: Groups movies by their release year, demonstrating basic group statement usage with a simple field reference.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/group.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie {title} by .release_year;\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Conditional DML Pattern\nDESCRIPTION: Demonstrates the workaround pattern for conditional DML operations using for loops.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/for.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  admin := (select User filter .role = 'admin'),\n  new := (for _ in (select () filter not exists admin) union (\n    insert User {role := 'admin'}\n  )),\nselect {admin, new};\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Replace Example - EdgeQL\nDESCRIPTION: Shows re_replace function replacing regex matches in string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_22\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select re_replace('a', 'A', 'Alabama');\n{'AlAbama'}\ndb> select re_replace('a', 'A', 'Alabama', flags := 'g');\n{'AlAbAmA'}\ndb> select re_replace('A', 'A', 'Alabama', flags := 'ig');\n{'AlAbAmA'}\n```\n\n----------------------------------------\n\nTITLE: Using assert_single Function in EdgeQL\nDESCRIPTION: Shows how to use assert_single to perform runtime cardinality checks on query results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b3.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select assert_single((select User filter .name = \"Unique\"));\n{default::User {id: ...}}\n\ndb> select assert_single((select User))\nERROR: CardinalityViolationError: assert_single violation: more than\n       one element returned by an expression\n```\n\n----------------------------------------\n\nTITLE: Filtering Heroes with Nested Villain Filter\nDESCRIPTION: Demonstrates nested filtering on both Hero objects and their linked villains using pattern matching.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Hero {\n  name,\n  villains: {\n    name\n  } filter .name like \"%O%\"\n} filter .name ilike \"%man\";\n```\n\n----------------------------------------\n\nTITLE: Using Detached Keyword in EdgeQL Update Query\nDESCRIPTION: Demonstrates the use of the 'detached' keyword to refer to a set as if it were defined in the top-level 'with' block, ignoring current scopes and allowing unrelated references.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/with.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nupdate User\nfilter .name = 'Dave'\nset {\n    friends := (select detached User filter .name = 'Alice'),\n    coworkers := (select detached User filter .name = 'Bob')\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Exclusive Lower Bound with Min_ex_value Constraint in EdgeDB SDL\nDESCRIPTION: Shows how to use 'min_ex_value' constraint to set a non-inclusive lower bound for a custom scalar type 'PositiveFloat'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type PositiveFloat extending float64 {\n    constraint min_ex_value(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Search Parameters in EdgeQL\nDESCRIPTION: Demonstrates how to set vector search parameters at the session level. This example sets the number of probes to 5 for improved search accuracy.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> configure session\n... set ext::pgvector::Config::probes := 5;\nOK: CONFIGURE SESSION\n```\n\n----------------------------------------\n\nTITLE: Constructing Basic Ranges in EdgeQL\nDESCRIPTION: Examples of creating basic numeric ranges using the range() constructor function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range(1, 10);\n{range(1, 10)}\ndb> select range(2.2, 3.3);\n{range(2.2, 3.3)}\n```\n\n----------------------------------------\n\nTITLE: Basic Person Insert without Links\nDESCRIPTION: Example of inserting a Person object with basic properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Person {\n  name := \"Jane\",\n  email := \"jane@jane.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global Variables in EdgeQL\nDESCRIPTION: Demonstrates the syntax for creating global variables in EdgeQL, including both regular and computed forms. The snippet shows the structure for setting defaults and annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\n[ \"{\" <subcommand>; [...] \"}\" ] ;\n\n# Computed global variable form:\n\n[ with <with-item> [, ...] ]\ncreate [{required | optional}] [{single | multi}]\n  global <name> := <expression>;\n\n# where <subcommand> is one of\n\n  set default := <expression>\n  create annotation <annotation-name> := <value>\n```\n\n----------------------------------------\n\nTITLE: Creating Detached Alias in TypeScript\nDESCRIPTION: Demonstrates how to create a detached 'alias' of another expression using e.alias in TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = e.set(1, 2, 3);\nconst b = e.alias(a);\n\nconst query = e.select(e.op(a, '*', b))\n// WITH\n//   a := {1, 2, 3},\n//   b := a\n// SELECT a + b\n\nconst result = await query.run(client);\n// => [1, 2, 3, 2, 4, 6, 3, 6, 9]\n```\n\n----------------------------------------\n\nTITLE: Adding Actor to Movie Mutation\nDESCRIPTION: Updates an existing movie by adding a new actor to its cast list.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation add_actor {\n    update_Movie(\n        filter: {title: {eq: \"Dune\"}, year: {eq: 2020}},\n        data: {\n            actors: {\n                add: [{\n                    filter: {\n                        full_name: {eq: \"Charlotte Rampling\"}\n                    }\n                }]\n            }\n        }\n    ) {\n        id\n        actors {\n            id\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subquery in EdgeQL With Clause for Complex Filtering\nDESCRIPTION: Illustrates using a subquery in the 'with' clause to create a set of values for filtering in the main query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/with.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith avengers := (select Hero filter .name in {\n    'Iron Man',\n    'Black Widow',\n    'Captain America',\n    'Thor',\n    'Hawkeye',\n    'The Hulk'\n  })\nselect Movie {title}\nfilter avengers in .characters;\n```\n\n----------------------------------------\n\nTITLE: Using 'all' and 'any' Functions with Sets in EdgeQL\nDESCRIPTION: Demonstrates how the 'all' and 'any' functions handle sets including empty sets, producing results for all possible input sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select all({false, {}});\n{false}\ndb> select any({true, {}});\n{true}\n```\n\n----------------------------------------\n\nTITLE: Creating Set Literals in Gel TypeScript\nDESCRIPTION: Demonstrates how to create sets with the e.set function. EdgeDB sets cannot contain elements with incompatible types, a rule enforced by TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ne.set(e.str(\"asdf\"), e.str(\"qwer\"));\n// {'asdf', 'qwer'}\n```\n\n----------------------------------------\n\nTITLE: Casting Complex Types in EdgeQL and TypeScript\nDESCRIPTION: Demonstrates how to declare more complex type literals like UUIDs, datetimes, and durations by casting appropriately structured strings in EdgeQL and using type-specific methods in TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <uuid>'a5ea6360-75bd-4c20-b69c-8f317b0d2857';\nselect <datetime>'1999-03-31T15:17:00Z';\nselect <duration>'5 hours 4 minutes 3 seconds';\nselect <cal::relative_duration>'2 years 18 days';\n```\n\nLANGUAGE: typescript\nCODE:\n```\ne.uuid(\"a5ea6360-75bd-4c20-b69c-8f317b0d2857\")\n// string\ne.datetime(\"1999-03-31T15:17:00Z\")\n// Date\ne.duration(\"5 hours 4 minutes 3 seconds\")\n// gel.Duration (custom class)\ne.cal.relative_duration(\"2 years 18 days\")\n// gel.RelativeDuration (custom class)\n```\n\n----------------------------------------\n\nTITLE: Querying Enum Types in EdgeQL\nDESCRIPTION: Example of querying an enum type in EdgeQL. This demonstrates how to filter objects based on an enum property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Shirt filter .color = Color.Red;\n```\n\n----------------------------------------\n\nTITLE: Default Link Values\nDESCRIPTION: Example of setting default values for links using EdgeQL expressions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str;\n  multi friends: Person {\n    default := (select Person order by random() limit 3);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Interior Ring from Polygon\nDESCRIPTION: Function that returns a specific interior ring (hole) from a polygon geometry by index. Maps to the PostGIS st_interiorringn function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_116\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::interiorringn( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Querying Maximum Value with std::max in EdgeQL\nDESCRIPTION: This snippet demonstrates the usage of the std::max function in EdgeQL to find the largest value in a set of numbers. The function takes a set of any type and returns an optional value of the same type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_26\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select max({-1, 100});\n{100}\n```\n\n----------------------------------------\n\nTITLE: Basic Type Casting in EdgeQL\nDESCRIPTION: Demonstrates basic explicit type casting from integer to string using EdgeQL syntax.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/casts.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <str>10;\n{\"10\"}\n```\n\n----------------------------------------\n\nTITLE: Normalizing Hours in relative_duration in EdgeQL\nDESCRIPTION: Demonstrates converting 24-hour chunks into days using the cal::duration_normalize_hours function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_41\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::duration_normalize_hours(\n  <cal::relative_duration>'1312 hours');\n{<cal::relative_duration>'P54DT16H'}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Call Length Example\nDESCRIPTION: Demonstrates a simple function call using the len() function to compute the length of a string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/functions.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect len('foo');\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Events\nDESCRIPTION: EdgeQL query to set up webhook configuration for authentication events\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH INSERT ext::auth::WebhookConfig {\n    url := 'https://example.com/auth/webhook',\n    events := {\n        ext::auth::WebhookEvent.EmailVerificationRequested,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using the word_similarity Function in ext::pg_trgm\nDESCRIPTION: Examples of using the word_similarity function which returns the greatest similarity between the first string and any continuous extent of the second string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::word_similarity('cat', 'Lazy dog');\n{0}\ndb> select ext::pg_trgm::word_similarity('cat', 'Dog in a car');\n{0.5}\ndb> select ext::pg_trgm::word_similarity('cat', 'Dog catastrophe');\n{0.75}\ndb> select ext::pg_trgm::word_similarity('cat', 'Lazy dog and cat');\n{1}\n```\n\n----------------------------------------\n\nTITLE: Defining User Type with Identity Link in SDL\nDESCRIPTION: This SDL schema defines a User type with email and name fields, linked to an ext::auth::Identity through a required one-to-one relationship enforced by an exclusivity constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/oauth.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n    email: str;\n    name: str;\n\n    required identity: ext::auth::Identity {\n        constraint exclusive;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Static vs Runtime Type Information in EdgeDB\nDESCRIPTION: This EdgeQL REPL session illustrates the difference between 'introspect typeof' (static typing) and '__type__' (runtime typing). It shows how inheritance affects the actual types available at runtime versus what is statically inferred.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/type.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> # first let's make sure we don't have any Foo objects\n... delete Foo;\n{ there may be some deleted objects here }\ndb> select (introspect typeof Foo).name;\n{'default::Foo'}\ndb> select Foo.__type__.name;\n{}\ndb> # let's add an object of type Foo\n... insert Foo;\n{Object { id: <uuid>'...' }}\ndb> # Bar is also of type Foo\n... insert Bar;\n{Object { id: <uuid>'...' }}\ndb> select (introspect typeof Foo).name;\n{'default::Foo'}\ndb> select Foo.__type__.name;\n{'default::Bar', 'default::Foo'}\n```\n\n----------------------------------------\n\nTITLE: Verifying Array Data Conversion in EdgeDB\nDESCRIPTION: Query that confirms the data from the friends link was properly converted to the friend_names array property by comparing both.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_39\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select User { f:= array_agg(.friends.name), friend_names };\n{\ndefault::User {\n  f: ['User 2', 'User 3'],\n  friend_names: ['User 2', 'User 3']\n  },\ndefault::User {\n  f: ['User 1', 'User 3'],\n  friend_names: ['User 1', 'User 3']\n  },\ndefault::User {\n  f: ['User 1', 'User 2'],\n  friend_names: ['User 1', 'User 2']\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Link Deletion Constraints in EdgeQL\nDESCRIPTION: Demonstrates the process of deleting an object with linked references, including updating the linked object to remove the reference before deletion.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/delete.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter .title = \"Black Widow\"\nset {\n  characters -= (select Hero filter .name = \"Yelena Belova\")\n};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndelete Hero filter .name = \"Yelena Belova\";\n```\n\n----------------------------------------\n\nTITLE: Documenting EdgeQL CLI Commands\nDESCRIPTION: Shows how to document CLI commands using cli:synopsis directive and command arguments.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_14\n\nLANGUAGE: rst\nCODE:\n```\n.. cli:synopsis::\n\n    gel dump [<options>] <path>\n```\n\n----------------------------------------\n\nTITLE: Exposing st_locatebetweenelevations Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_locatebetweenelevations function in EdgeDB. It takes a geometry input and from/to elevation values, returning a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_152\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::locatebetweenelevations( \\\n                    geometry: ext::postgis::geometry, \\\n                    fromelevation: std::float64, \\\n                    toelevation: std::float64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Altering Global Variables in EdgeQL\nDESCRIPTION: Syntax for altering global variables in EdgeQL, including various subcommands for modifying attributes, renaming, setting defaults, and managing annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\n[ with <with-item> [, ...] ]\nalter global <name>\n  [ \"{\" <subcommand>; [...] \"}\" ] ;\n\n# where <subcommand> is one of\n\n  set default := <expression>\n  reset default\n  rename to <newname>\n  set required\n  set optional\n  reset optionalily\n  set single\n  set multi\n  reset cardinality\n  set type <typename> reset to default\n  using (<computed-expr>)\n  create annotation <annotation-name> := <value>\n  alter annotation <annotation-name> := <value>\n  drop annotation <annotation-name>\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying EdgeDB Migration\nDESCRIPTION: These commands create a new migration and apply it to update the database schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\n$ gel migrate\n```\n\n----------------------------------------\n\nTITLE: Using Globals in Schema Definitions - SDL\nDESCRIPTION: Examples showing how to reference global variables within schema declarations and access policies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  name: str;\n  is_self := (.id = global current_user_id)\n};\n\ntype Person {\n  required name: str;\n\n  access policy my_policy allow all\n    using (.id = global current_user_id);\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Interfaces Generator with Different JavaScript Runtimes\nDESCRIPTION: Commands to run the interfaces generator using Node.js, Deno, or Bun runtime environments. The generator will introspect the schema and create TypeScript interfaces.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate interfaces\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ deno run --allow-all npm:@gel/generate interfaces\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bunx @gel/generate interfaces\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Less Than Comparison Examples\nDESCRIPTION: Shows usage of the less than operator (<) for comparing values. Includes examples with numbers, strings, tuples and demonstrates handling of empty sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 1 < 2;\n{true}\ndb> select 2 < 2;\n{false}\ndb> select 'hello' < 'world';\n{true}\ndb> select (1, 'hello') < (1, 'world');\n{true}\n```\n\n----------------------------------------\n\nTITLE: Person Type Schema with Trigger\nDESCRIPTION: Schema definition showing assert usage in a trigger to enforce business rules.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str;\n  multi friends: Person;\n  multi enemies: Person;\n\n  trigger prohibit_frenemies after insert, update for each do (\n```\n\n----------------------------------------\n\nTITLE: Generating SVG from PostGIS Geometry/Geography\nDESCRIPTION: Converts PostGIS geometry or geography to SVG (Scalable Vector Graphics) format. Allows specifying relative or absolute coordinates and decimal precision.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::assvg( \n  a0: std::str \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::assvg( \n  geom: ext::postgis::geometry, \n  rel: std::int64 = 0, \n  maxdecimaldigits: std::int64 = 15, \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::assvg( \n  geog: ext::postgis::geography, \n  rel: std::int64 = 0, \n  maxdecimaldigits: std::int64 = 15, \n) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: JavaScript Client Parameters\nDESCRIPTION: Examples of using parameters with JavaScript client, including string and date parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/parameters.rst#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.query(\"select 'I ❤️ ' ++ <str>$name ++ '!';\", {\n  name: \"rock and roll\"\n});\n\nawait client.query(\"select <datetime>$date;\", {\n  date: new Date()\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Global Variable Attributes in EdgeQL\nDESCRIPTION: Example of making the 'current_user_id' global variable required and setting a default value in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nalter global current_user_id {\n    set required;\n    # A required global variable MUST have a default value.\n    set default := <uuid>'00ea8eaa-02f9-11ed-a676-6bd11cc6c557';\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Query to Sort by Updated_at in Python\nDESCRIPTION: This snippet updates the 'get_decks' query in Python to sort the decks by the newly added 'updated_at' property in descending order. It demonstrates how to use the new shared property in a query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/inheritance/fastapi.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/decks\", response_model=List[Deck])\nasync def get_decks():\n    decks = await client.query(\"\"\"\n        select Deck {\n            id,\n            name,\n            description,\n            cards := (\n                select .cards {\n                    id,\n                    front,\n                    back\n                }\n                order by .order\n            )\n        }\n        order by .updated_at desc\n    \"\"\")\n    return decks\n```\n\n----------------------------------------\n\nTITLE: Creating Alias for Remote Gel Instance\nDESCRIPTION: This snippet shows how to create an alias for a remote Gel instance using the 'instance link' command. It simplifies future connections to the instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/aws_aurora_ecs.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance link \\\n     --trust-tls-cert \\\n     --dsn gel://admin:<password>@<hostname> \\\n     my_aws_instance\n```\n\n----------------------------------------\n\nTITLE: Accessing Tuple Elements in Gel TypeScript\nDESCRIPTION: Shows how to access elements of both unnamed and named tuples. Unnamed tuples use numeric indices, while named tuples allow access through property names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// Unnamed tuples\nconst spidey = e.tuple([\n  e.str(\"Peter Parker\"),\n  e.int64(18)\n]);\nspidey[0];                 // => (\"Peter Parker\", 18)[0]\n\n// Named tuples\nconst spidey = e.tuple({\n  name: e.str(\"Peter Parker\"),\n  age: e.int64(18)\n});\nspidey.name;\n// (name := \"Peter Parker\", age := 18).name\n```\n\n----------------------------------------\n\nTITLE: Rounding Down Numbers in EdgeQL\nDESCRIPTION: Demonstrates the use of math::floor() function to round down a given value to the nearest integer.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::floor(1.1);\n{1}\ndb> select math::floor(-1.1);\n{-2}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Endpoint\nDESCRIPTION: FastAPI endpoint implementation for the search functionality\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/search\")\nasync def search(search_terms: SearchTerms) -> SearchResult:\n    return SearchResult(response=search_terms.query)\n```\n\n----------------------------------------\n\nTITLE: Schema Update with Comment Type in SDL\nDESCRIPTION: Shows a schema diff adding a new Comment type to the existing schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/migrations.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl-diff\nCODE:\n```\ntype User {\n  required name: str;\n}\n\ntype Post {\n  required title: str;\n  required author: User;\n}\n\n+ type Comment {\n+   required content: str;\n+ }\n```\n\n----------------------------------------\n\nTITLE: Normalizing Days in relative_duration in EdgeQL\nDESCRIPTION: Shows how to convert 30-day chunks into months for a relative_duration using the cal::duration_normalize_days function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_42\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::duration_normalize_days(\n  <cal::relative_duration>'1312 days');\n{<cal::relative_duration>'P3Y7M22D'}\n```\n\n----------------------------------------\n\nTITLE: Converting Various Types to Bytes in EdgeQL\nDESCRIPTION: Examples of using the to_bytes function to convert strings, integers, and UUIDs to their binary representation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bytes.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_bytes('テキスト');\n{b'\\xe3\\x83\\x86\\xe3\\x82\\xad\\xe3\\x82\\xb9\\xe3\\x83\\x88'}\ndb> select to_bytes(<int16>31, Endian.Big);\n{b'\\x00\\x1f'}\ndb> select to_bytes(<int32>31, Endian.Big);\n{b'\\x00\\x00\\x00\\x1f'}\ndb> select to_bytes(123456789123456789, Endian.Big);\n{b'\\x01\\xb6\\x9bK\\xac\\xd0_\\x15'}\ndb> select to_bytes(<uuid>'1d70c86e-cc92-11ee-b4c7-a7aa0a34e2ae');\n{b'\\x1dp\\xc8n\\xcc\\x92\\x11\\xee\\xb4\\xc7\\xa7\\xaa\\n4\\xe2\\xae'}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers in EdgeQL\nDESCRIPTION: Example of the random() function, which returns a pseudo-random number between 0.0 (inclusive) and 1.0 (exclusive).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select random();\n{0.62649393780157}\n```\n\n----------------------------------------\n\nTITLE: Creating local_datetime from Components in EdgeQL\nDESCRIPTION: Demonstrates creating a local_datetime value using individual components with the cal::to_local_datetime function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_27\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_datetime(\n    2018, 5, 7, 15, 1, 22.306916);\n{<cal::local_datetime>'2018-05-07T15:01:22.306916'}\n```\n\n----------------------------------------\n\nTITLE: Cartesian product operations in EdgeQL\nDESCRIPTION: These examples demonstrate how element-wise operations with multiple arguments apply to the cartesian product of input sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/cardinality.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select {'aaa', 'bbb'} ++ {'ccc', 'ddd'};\n{'aaaccc', 'aaaddd', 'bbbccc', 'bbbddd'}\ndb> select {true, false} or {true, false};\n{true, true, true, false}\n```\n\n----------------------------------------\n\nTITLE: Analytical Grouping with Select\nDESCRIPTION: Combines group with select to produce analytical results including counts and average title lengths.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/group.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  M := (select Movie filter .release_year > 2015),\n  groups := (\n    group M {title}\n    using vowel := re_test('(?i)^[aeiou]', .title)\n    by vowel\n  )\nselect groups {\n  starts_with_vowel := .key.vowel,\n  count := count(.elements),\n  mean_title_length :=\n    round(math::mean(len(.elements.title)))\n};\n```\n\n----------------------------------------\n\nTITLE: Using typeof Operator\nDESCRIPTION: Examples of using the typeof operator to extract and work with types dynamically.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/types.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <typeof 5>'100';\nselect \"tuna\" is typeof \"trout\";\n```\n\n----------------------------------------\n\nTITLE: Deleting Authenticated Post\nDESCRIPTION: TypeScript/JavaScript example of deleting a post with authentication\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nawait client.query(`delete Post filter .id = <str>$id`, {\n  id: inserted.id\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling HTTP GET Request with net::http::schedule_request in EdgeDB\nDESCRIPTION: This snippet demonstrates the usage of the net::http::schedule_request function to schedule an HTTP GET request. It shows the function signature and parameter descriptions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/net.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nSELECT net::http::schedule_request(\n  'https://example.com',\n  method := net::http::Method.POST,\n  headers := [('Content-Type', 'application/json')],\n  body := <bytes>$${\"key\": \"value\"}$$\n);\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to String in EdgeQL\nDESCRIPTION: Examples of converting JSON values to strings using to_str() function, with optional pretty-printing.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_25\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_str(<json>2);\n{'2'}\n\ndb> select to_str(<json>['hello', 'world']);\n{'[\"hello\", \"world\"]'}\n\ndb> select to_str(<json>(a := 2, b := 'hello'), 'pretty');\n{'{\n    \"a\": 2,\n    \"b\": \"hello\"\n}'}\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Schema in Gel\nDESCRIPTION: SDL schema definition for the blog post type in Gel database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type BlogPost {\n    required title: str;\n    required content: str {\n      default := \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Filtering with Nested 'for' Query in EdgeQL\nDESCRIPTION: Shows how to filter projects based on the progress of linked accounts, handling cases where 'steps' might be undefined for some accounts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Project\nfilter (\n    for A in .accounts\n    union (A.steps < 3) ?? true\n);\n```\n\n----------------------------------------\n\nTITLE: Viewing Current ext::ai Configuration\nDESCRIPTION: Shows how to query the current AI extension configuration using EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect cfg::Config.extensions[is ext::ai::Config]{*};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Constraint Inheritance in EdgeQL\nDESCRIPTION: Example of how constraints are inherited and applied across extended types, and the use of the 'delegated' keyword.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\ngel> insert Administrator {\n....  name := 'Jan'\n.... };\n{default::Administrator {id: 7aeaa146-f5a5-11ed-a598-53ddff476532}}\n\ngel> insert Moderator {\n....  name := 'Jan'\n.... };\ngel error: ConstraintViolationError: name violates exclusivity constraint\n  Detail: value of property 'name' of object type 'default::Moderator'\n  violates exclusivity constraint\n\ngel> insert User {\n....  name := 'Jan'\n.... };\ngel error: ConstraintViolationError: name violates exclusivity constraint\n  Detail: value of property 'name' of object type 'default::User'\n  violates exclusivity constraint\n\ngel> insert Administrator {\n....  name := 'Jan'\n.... };\n{default::Administrator {id: 7aeaa146-f5a5-11ed-a598-53ddff476532}}\n\ngel> insert User {\n....  name := 'Jan'\n.... };\n{default::User {id: a6e3fdaf-c44b-4080-b39f-6a07496de66b}}\n\ngel> insert Moderator {\n....  name := 'Jan'\n.... };\n{default::Moderator {id: d3012a3f-0f16-40a8-8884-7203f393b63d}}\n\ngel> insert Moderator {\n....  name := 'Jan'\n.... };\ngel error: ConstraintViolationError: name violates exclusivity constraint\n  Detail: value of property 'name' of object type 'default::Moderator'\n  violates exclusivity constraint\n```\n\n----------------------------------------\n\nTITLE: Casting to Enum Type in EdgeQL\nDESCRIPTION: These EdgeQL snippets demonstrate casting operations with enum types. They show the difference between comparing a string directly and casting it to the enum type before comparison.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/enum.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 'Red' is Color;\n{false}\ndb> select <Color>'Red' is Color;\n{true}\ndb> select <Color>'Red' = Color.Red;\n{true}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Commands in TypeScript\nDESCRIPTION: Example of using executeSQL method to execute SQL INSERT command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.executeSQL(`\n  INSERT INTO \"MyType\" (prop) VALUES (\"value\");\n`)\n```\n\n----------------------------------------\n\nTITLE: Using the similar Function in ext::pg_trgm\nDESCRIPTION: Examples of using the similar function to determine if two strings are similar. Returns true if the similarity between the strings is greater than the configured similarity_threshold.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::similar('cat', 'dog');\n{false}\ndb> select ext::pg_trgm::similar('cat', 'cart');\n{false}\ndb> select ext::pg_trgm::similar('cat', 'car');\n{true}\ndb> select ext::pg_trgm::similar('cat', 'cat');\n{true}\n```\n\n----------------------------------------\n\nTITLE: Detached Query Selection in TypeScript\nDESCRIPTION: Shows how to use the detached function to reference sets outside the current scope in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.select(e.Person, (outer) => ({\n  name: true,\n  castmates: e.select(e.detached(e.Person), (inner) => ({\n    name: true,\n    filter: e.op(outer.acted_in, 'in', inner.acted_in)\n  })),\n}));\n```\n\n----------------------------------------\n\nTITLE: Complex Insert with Conditional Logic\nDESCRIPTION: Shows how to insert or select an existing Person and create a link with a strength property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  alice := (\n\n    insert Person {\n      name := \"Alice\"\n    }\n    unless conflict on .name\n    else (\n      select Person\n      filter .name = \"Alice\" limit 1\n    )\n  )\n\ninsert Person {\n  name := \"Bob\",\n  friends := alice {\n    @strength := 3.14\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Literals in EdgeQL\nDESCRIPTION: Examples of creating JSON literals in EdgeQL by casting other types or using to_json function. Demonstrates JSON indexing.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <json>5;\nselect <json>\"a string\";\nselect <json>[\"this\", \"is\", \"an\", \"array\"];\nselect <json>(\"unnamed tuple\", 2);\nselect <json>(name := \"named tuple\", count := 2);\nselect to_json('{\"a\": 2, \"b\": 5}');\nselect to_json('{\"a\": 2, \"b\": 5}')['a'];\nselect to_json('[\"a\", \"b\", \"c\"]')[2];\n```\n\n----------------------------------------\n\nTITLE: Enforcing a Cooling Off Period with Mutation Rewrites\nDESCRIPTION: This snippet shows how to use the __subject__ special value in a rewrite to enforce a 10-day delay before publishing a post.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/mutation_rewrites.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Post {\n  required title: str;\n  required body: str;\n  publish_time: datetime {\n    rewrite insert, update using (\n      __subject__.publish_time ?? datetime_of_statement() +\n      cal::to_relative_duration(days := 10)\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting BlogPost\nDESCRIPTION: Creates a blog post authored by the second user.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/paths.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> insert BlogPost {\n... title := \"Gel is awesome\",\n... author := assert_single((select User filter .email = \"user2@me.com\"))\n... };\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Gel and Strawberry GraphQL Project\nDESCRIPTION: Commands to clone the project repository, create a Python virtual environment, and install the required dependencies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:geldata/gel-examples.git\n$ cd gel-examples/strawberry-gql\n\n$ python3.10 -m venv .venv\n$ source .venv/bin/activate\n$ pip install gel fastapi strawberry-graphql uvicorn[standard]\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS cluster within function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_clusterwithin function, which groups geometries into clusters where each member is within a specified distance of at least one other member of the cluster.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_39\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::clusterwithin( \\\n  a0: array<ext::postgis::geometry>, \\\n  a1: std::float64, \\\n) ->  array<ext::postgis::geometry>\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeQL Query in Separate File\nDESCRIPTION: Example of defining an EdgeQL query in a separate .edgeql file for use with the queries generator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  **,\n  actors: { ** },\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction in Rust\nDESCRIPTION: This snippet demonstrates how to execute a transaction in Rust to update bank customer balances using a parameterized EdgeQL query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/transactions.rst#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet balance_change_query = \"update BankCustomer\n  filter .name = <str>$0\n  set { bank_balance := .bank_balance + <int32>$1 }\";\n\nclient\n    .transaction(|mut conn| async move {\n        conn.execute(balance_change_query, &(\"Customer1\", -10))\n            .await\n            .expect(\"Execute should have worked\");\n        conn.execute(balance_change_query, &(\"Customer2\", 10))\n            .await\n            .expect(\"Execute should have worked\");\n        Ok(())\n    })\n    .await\n    .expect(\"Transaction should have worked\");\n```\n\n----------------------------------------\n\nTITLE: Using Object Type Alias with Computed Property in EdgeQL Query\nDESCRIPTION: Demonstrates how to use the 'PostWithTrimmedTitle' alias in an EdgeQL query to select the computed 'trimmed_title' property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/aliases.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect PostWithTrimmedTitle {\n  trimmed_title\n};\n```\n\n----------------------------------------\n\nTITLE: Using the word_similar Function in ext::pg_trgm\nDESCRIPTION: Examples of using the word_similar function which returns true if the word_similarity between two strings is greater than the configured word_similarity_threshold.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::word_similar('cat', 'Lazy dog');\n{false}\ndb> select ext::pg_trgm::word_similar('cat', 'Dog in a car');\n{false}\ndb> select ext::pg_trgm::word_similar('cat', 'Dog catastrophe');\n{true}\ndb> select ext::pg_trgm::word_similar('cat', 'Lazy dog and cat');\n{true}\n```\n\n----------------------------------------\n\nTITLE: Creating Review Count Function in EdgeQL\nDESCRIPTION: Defines a function that counts reviews for a given user name. The function takes a string parameter and returns an integer count of reviews.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/functions.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate function review_count(name: str) -> int64\nusing (\n    with module default\n    select count(\n        (\n            select Review\n            filter .author.name = name\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Vector Length Function Schema Definition\nDESCRIPTION: Schema defining a custom len function for calculating vector length, which masks built-in len functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/describe.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    function len(v: tuple<float64, float64>) -> float64 using (\n        select (v.0 ^ 2 + v.1 ^ 2) ^ 0.5\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Annotations in SDL\nDESCRIPTION: Shows how to declare custom user-defined annotation types in Gel SDL. It defines an abstract 'admin_note' annotation and applies it to a 'Status' type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\nabstract annotation admin_note;\n\ntype Status {\n  annotation admin_note := 'system-critical';\n  # more properties\n}\n```\n\n----------------------------------------\n\nTITLE: Email Verification Handler Implementation - JavaScript\nDESCRIPTION: Handles email verification flow by processing verification tokens and managing authentication state. Includes logic for both same-browser and cross-browser verification scenarios.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/email_password.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleVerify = async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n  const verification_token = requestUrl.searchParams.get(\"verification_token\");\n  if (!verification_token) {\n    res.status = 400;\n    res.end(\n      `Verify request is missing 'verification_token' search param. The verification email is malformed.`,\n    );\n    return;\n  }\n\n  const verifyUrl = new URL(\"verify\", GEL_AUTH_BASE_URL);\n  const verifyResponse = await fetch(verifyUrl.href, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      verification_token,\n      provider: \"builtin::local_emailpassword\",\n    }),\n  });\n\n  if (!verifyResponse.ok) {\n    const text = await verifyResponse.text();\n    res.status = 400;\n    res.end(`Error from the auth server: ${text}`);\n    return;\n  }\n\n  const { code } = await verifyResponse.json();\n\n  const cookies = req.headers.cookie?.split(\"; \");\n  const verifier = cookies\n    ?.find((cookie) => cookie.startsWith(\"gel-pkce-verifier=\"))\n    ?.split(\"=\")[1];\n  if (verifier) {\n    const tokenUrl = new URL(\"token\", GEL_AUTH_BASE_URL);\n    tokenUrl.searchParams.set(\"code\", code);\n    tokenUrl.searchParams.set(\"verifier\", verifier);\n    const tokenResponse = await fetch(tokenUrl.href, {\n      method: \"get\",\n    });\n\n    if (!tokenResponse.ok) {\n      const text = await tokenResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    const { auth_token } = await tokenResponse.json();\n    res.writeHead(204, {\n      \"Set-Cookie\": `gel-auth-token=${auth_token}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n    });\n    res.end();\n    return;\n  }\n\n  res.status = 200;\n  res.end(\n    `\n    <html>\n      <body>\n        <p>Email verified! Please sign in to continue.</p>\n      </body>\n    </html>`,\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for Function Overloading with Object Types\nDESCRIPTION: Example demonstrating restrictions on overloading functions with object type parameters in EdgeDB. Illustrates how single dispatch is enforced with object types while scalar type overloading has more flexibility.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc1.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nfunction func(a: Foo, b: int32) -> int64 using ( BODY );\nfunction func(a: Bar, b: int32) -> int64 using ( BODY );\nfunction func(a: str, b: int32, c: int64) -> int64 using ( BODY );\n```\n\n----------------------------------------\n\nTITLE: Creating Geography from WKT Text Representation\nDESCRIPTION: Function that creates a geography value from Well-Known Text (WKT) or Extended Well-Known Text (EWKT) representation. Wraps the PostGIS st_geogfromtext function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_89\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geogfromtext( \\\n                    a0: std::str \\\n                  ) ->  ext::postgis::geography\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsCollection Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsCollection function which tests if a geometry is a collection type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_123\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::iscollection( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Exposing st_minimumclearance Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_minimumclearance function in EdgeDB. It takes a geometry input and returns the minimum clearance as a float64.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_168\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::minimumclearance( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Using WITH for Cartesian Products in EdgeQL\nDESCRIPTION: Shows how to use the WITH clause to achieve cartesian product behavior in legacy path scoping.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/path_resolution.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith U := User\nselect U.first_name ++ ' ' ++ User.last_name;\n```\n\n----------------------------------------\n\nTITLE: Defining Movie Type in Gel SDL\nDESCRIPTION: Equivalent Gel Schema Definition Language (SDL) for the Movie type, translated from the Hibernate ORM model.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_17\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n    title: str;\n\n    required releaseYear: int32;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PKCE for Enhanced Security in Python\nDESCRIPTION: This snippet demonstrates how to generate a PKCE (Proof Key for Code Exchange) verifier and challenge for enhanced security in server-to-server authentication. It uses Python's built-in libraries to create a unique verifier and its corresponding challenge.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport secrets\nimport hashlib\nimport base64\n\ndef generate_pkce():\n    verifier = secrets.token_urlsafe(32)\n    challenge = hashlib.sha256(verifier.encode()).digest()\n    challenge_base64 = base64.urlsafe_b64encode(challenge).decode('utf-8').rstrip('=')\n    return verifier, challenge_base64\n```\n\n----------------------------------------\n\nTITLE: Basic User Type Schema Definition in SDL\nDESCRIPTION: Simple schema definition showing a User type with a name property in SDL format.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    name: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SSE Type Definitions in TypeScript\nDESCRIPTION: Type definitions for Server-Sent Events extending EventSource with payload support.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\ntype SSEOptions = EventSourceInit & {\n    payload?: string;\n};\n\ndeclare module \"sse.js\" {\n    class SSE extends EventSource {\n        constructor(url: string | URL, sseOptions?: SSEOptions);\n        stream(): void;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple User Schema with Name Property in EdgeDB SDL\nDESCRIPTION: The initial schema definition with just a User type containing a name property, used as a starting point for demonstration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_42\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    name: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Ranges with Greater Than or Equal Operator in EdgeQL\nDESCRIPTION: Shows how the greater than or equal operator works with ranges and multiranges. Returns true if ranges are identical or if the first comes after the second according to range comparison rules.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select range(1, 10) >= range(2, 5);\n{false}\ndb> select range(1, 10) >= range(1, 10);\n{true}\ndb> select range(1, 10) >= range(1, 5);\n{true}\ndb> select range(1, 10) >= range(1);\n{false}\ndb> select range(1, 10) >= range(<int64>{}, 10);\n{true}\n\ndb> select multirange([range(2, 4), range(5, 7)]) >=\n...   multirange([range(7, 10), range(20)]);\n{false}\ndb> select multirange([range(2, 4), range(5, 7)]) >=\n...   multirange([range(5, 7), range(2, 4)]);\n{true}\n\ndb> select range(1, 10) >= range(10, 10);\n{true}\ndb> select range(1, 1) >= range(10, 10);\n{true}\ndb> select range(1, 10) >= range(<int64>{}, empty := true);\n{true}\n\ndb> select multirange(<array<range<int64>>>[]) >=\n...   multirange([range(7, 10), range(20)]);\n{false}\n```\n\n----------------------------------------\n\nTITLE: Go Client Parameters\nDESCRIPTION: Examples of using parameters with Go client, including string and time parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/parameters.rst#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result string\nerr = db.QuerySingle(ctx,\n  `select 'I ❤️ ' ++ <str>$var ++ '!';\"`,\n  &result, \"Golang\")\n\nvar date time.Time\nerr = db.QuerySingle(ctx,\n  `select <datetime>$date;`,\n  &date, time.Now())\n```\n\n----------------------------------------\n\nTITLE: For Loop Expression in TypeScript\nDESCRIPTION: Shows how to create expressions that iterate over sets of values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.for(e.set(1, 2, 3, 4), (number) => {\n  return e.op(2, '^', number);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type Alias in SDL\nDESCRIPTION: Illustrates the creation of an object type alias in SDL. This alias can be used interchangeably with the original type name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/aliases.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nalias UserAlias := User;\n```\n\n----------------------------------------\n\nTITLE: Working with Link Properties Example\nDESCRIPTION: Shows how to work with link properties and annotations in Gel objects using LinkSet access.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/types.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import gel\n>>> client = gel.create_client()\n>>> r = client.query_single('''\n...     SELECT schema::Property {name, annotations: {name, @value}}\n...     FILTER .name = 'listen_port'\n...            AND .source.name = 'cfg::Config'\n...     LIMIT 1''')\n>>> r\nObject {\n    name: 'listen_port',\n    annotations: {\n        Object {\n            name: 'cfg::system',\n            @value: 'true'\n        }\n    }\n}\n>>> r['annotations']\nLinkSet(name='annotations')\n>>> l = list(r['annotations])[0]\n>>> l.value\n'true'\n```\n\n----------------------------------------\n\nTITLE: Power Operation in EdgeQL\nDESCRIPTION: Example of the power operator (^) used for exponentiation in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 2 ^ 4;\n{16}\n```\n\n----------------------------------------\n\nTITLE: DateTime Arithmetic Operations\nDESCRIPTION: Examples of arithmetic operations with datetime and relative_duration\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <datetime>'2019-01-01T00:00:00Z' -\n       <cal::relative_duration>'3 years';\n{<datetime>'2016-01-01T00:00:00+00:00'}\ndb> select <cal::local_time>'22:00' +\n       <cal::relative_duration>'1 hour';\n{<cal::local_time>'23:00:00'}\n```\n\n----------------------------------------\n\nTITLE: Generating Single Output File\nDESCRIPTION: Command to generate a single file containing all generated functions, instead of separate files for each query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/codegen.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel-py --file\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine in EdgeQL\nDESCRIPTION: Demonstrates the use of math::sin() function to calculate the sine of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::sin(0);\n{0}\ndb> select math::sin(math::pi() / 2);\n{1}\ndb> select math::sin(math::pi());\n{0.000000000}\ndb> select math::sin(math::pi() * 3 / 2);\n{-1}\n```\n\n----------------------------------------\n\nTITLE: Dropping an Index using EdgeQL DDL\nDESCRIPTION: Shows how to remove an index using EdgeQL DDL. This example drops the index on the 'name' property of the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  drop index on (.name);\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Bounding Diagonal of PostGIS Geometry\nDESCRIPTION: Calculates the bounding diagonal of a PostGIS geometry. Optionally can return a geometry that fits within the bounding box.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::boundingdiagonal( \n  geom: ext::postgis::geometry, \n  fits: std::bool = false, \n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Analyzing EdgeQL Query Performance\nDESCRIPTION: This snippet demonstrates how to use the 'analyze' keyword to perform a performance analysis on an EdgeQL query. The query retrieves information about heroes, their secret identities, and associated villains.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/analyze.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nanalyze select Hero {\n  name,\n  secret_identity,\n  villains: {\n    name,\n    nemesis: {\n      name\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration with Docker Compose\nDESCRIPTION: Command to create a new database migration using the Gel CLI through Docker Compose\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/docker.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose exec gel \\\n   gel --tls-security=insecure -P 5656 migration create\n```\n\n----------------------------------------\n\nTITLE: Inserting Elements into Arrays using array_insert in EdgeDB\nDESCRIPTION: The array_insert function takes an array, an index, and a value as parameters. It returns a new array with the specified value inserted at the given index. This function is useful for adding elements to arrays at specific positions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select array_insert(['the', 'brown', 'fox'], 1, 'quick');\n{['the', 'quick', 'brown', 'fox']}\ndb> select array_insert([1, 1, 2, 3], 1, 99);\n{[1, 99, 1, 2, 3]}\n```\n\n----------------------------------------\n\nTITLE: Using sum() Aggregate Function in EdgeQL\nDESCRIPTION: Demonstrates the sum() function which returns the sum of the elements in a set of numbers, with return type dependent on the input set type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_21\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sum({2, 3, 5});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sum({0.2, 0.3, 0.5});\n```\n\n----------------------------------------\n\nTITLE: String Pattern Matching with LIKE in EdgeQL\nDESCRIPTION: Shows the LIKE and NOT LIKE operators for case-sensitive pattern matching in EdgeQL, including wildcards and escape sequences.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 'abc' like 'abc';\n{true}\ndb> select 'abc' like 'a%';\n{true}\ndb> select 'abc' like '_b_';\n{true}\ndb> select 'abc' like 'c';\n{false}\ndb> select 'a%%c' not like r'a\\%c';\n{true}\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Inequality Comparison Examples\nDESCRIPTION: Shows usage of the inequality operator (!=) for comparing values of different types. Includes examples with numbers, arrays, tuples and demonstrates behavior with empty sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 3 != 3.0;\n{false}\ndb> select 3 != 3.14;\n{true}\ndb> select [1, 2] != [2, 1];\n{false}\ndb> select (1, 2) != (x := 1, y := 2);\n{false}\ndb> select (x := 1, y := 2) != (a := 1, b := 2);\n{false}\ndb> select 'hello' != 'world';\n{true}\n```\n\n----------------------------------------\n\nTITLE: Querying Scheduled HTTP Request Status in EdgeDB\nDESCRIPTION: This snippet shows how to query the status of a previously scheduled HTTP request in EdgeDB. It retrieves the state, failure information, and response data if available.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/net.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    request := <std::net::http::ScheduledRequest><uuid>$request_id,\nselect request {\n    state,\n    failure,\n    response: {\n        status,\n        headers,\n        body,\n    },\n} filter .state in {net::RequestState.Failed, net::RequestState.Completed};\n```\n\n----------------------------------------\n\nTITLE: String Padding Functions in EdgeQL\nDESCRIPTION: Demonstrates str_pad_start for padding strings to a specified length with custom fill characters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_pad_start('short', 10);\n{'     short'}\ndb> select str_pad_start('much too long', 10);\n{'much too l'}\ndb> select str_pad_start('short', 10, '.:')\n{'.:.:.short'}\n```\n\n----------------------------------------\n\nTITLE: Array Concatenation in EdgeQL\nDESCRIPTION: Demonstrates how to concatenate two arrays of the same type using the ++ operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select [1, 2, 3] ++ [99, 98];\n{[1, 2, 3, 99, 98]}\n```\n\n----------------------------------------\n\nTITLE: Using assert_distinct() Function in EdgeQL\nDESCRIPTION: Demonstrates the assert_distinct() function which checks that the input set contains only unique elements, raising a ConstraintViolationError if duplicates are found.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_distinct(\n  (select User filter .groups.name = \"Administrators\")\n  union\n  (select User filter .groups.name = \"Guests\")\n)\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_distinct(\n  (select User filter .groups.name = \"Users\")\n  union\n  (select User filter .groups.name = \"Guests\")\n)\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect assert_distinct(\n  (select User filter .groups.name = \"Users\")\n  union\n  (select User filter .groups.name = \"Guests\"),\n  message := \"duplicate users!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Link Property Constraints in SDL\nDESCRIPTION: Example of defining a constraint on a link property in a User object type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  name: str;\n\n  multi friends: User {\n    strength: float64;\n\n    constraint expression on (\n      @strength >= 0\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Query in Jupyter Notebook\nDESCRIPTION: This snippet demonstrates how to import the Gel library, create a client, execute a query, and close the connection in a Jupyter Notebook. It includes a basic example query that adds two numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/jupyter_notebook.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gel\n\nclient = gel.create_client()\n\ndef main():\n    query = \"SELECT 1 + 1;\" # Swap in any query you want\n    result = client.query(query)\n    print(result[0])\n\nmain()\n\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: Overloading Inherited Properties in Gel SDL\nDESCRIPTION: This example demonstrates how to overload inherited properties. The 'overloaded' keyword is used to explicitly indicate that a property is being modified from its inherited form.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Named {\n    optional name: str;\n}\n\ntype User extending Named {\n    # make \"name\" required\n    overloaded required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Population Standard Deviation in EdgeQL\nDESCRIPTION: Demonstrates the use of math::stddev_pop() function to calculate the population standard deviation of a set of numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::stddev_pop({1, 3, 5});\n{1.63299316185545}\n```\n\n----------------------------------------\n\nTITLE: Assert Function Usage\nDESCRIPTION: Demonstrates the use of assert function for validation with optional error messages.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select assert(true);\n{true}\n\ndb> select assert(false);\ngel error: QueryAssertionError: assertion failed\n\ndb> select assert(false, message := 'value is not true');\ngel error: QueryAssertionError: value is not true\n```\n\n----------------------------------------\n\nTITLE: Empty Set Boolean Operations\nDESCRIPTION: Shows how empty sets interact with boolean operators and functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select {true, false} and <bool>{};\n{}\ndb> select true and <bool>{};\n{}\ndb> select all(<bool>{});\n{true}\ndb> select any(<bool>{});\n{false}\n```\n\n----------------------------------------\n\nTITLE: Executing Non-Interactive Migration in Gel CLI\nDESCRIPTION: This bash command demonstrates how to create a non-interactive migration using the Gel CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Basic EdgeDB JavaScript Driver Usage Example\nDESCRIPTION: Example showing how to connect to EdgeDB and execute a basic query using the JavaScript driver with async/await.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst edgedb = require(\"edgedb\");\n\nasync function main() {\n  const conn = await edgedb.connect({\n    user: \"edgedb\",\n    host: \"127.0.0.1\",\n  });\n\n  try {\n    console.log(await conn.fetchOne(\"select 1 + 1\"));\n  } finally {\n    await conn.close();\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Comparing Ranges with Less Than or Equal Operator in EdgeQL\nDESCRIPTION: Demonstrates the less than or equal operator for ranges and multiranges. Returns true if ranges are identical or if the first is before the second according to the comparison rules.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select range(1, 10) <= range(1, 10);\n{true}\ndb> select range(1, 10) <= range(2, 5);\n{true}\ndb> select range(1, 10) <= range(1, 15);\n{true}\ndb> select range(1, 10) <= range(1);\n{true}\ndb> select range(1, 10) <= range(<int64>{}, 10);\n{false}\n\ndb> select multirange([range(2, 4), range(5, 7)]) <=\n...   multirange([range(7, 10), range(20)]);\n{true}\ndb> select multirange([range(2, 4), range(5, 7)]) <=\n...   multirange([range(5, 7), range(2, 4)]);\n{true}\n\ndb> select range(1, 10) <= range(10, 10);\n{false}\ndb> select range(1, 1) <= range(10, 10);\n{true}\ndb> select range(1, 10) <= range(<int64>{}, empty := true);\n{false}\n\ndb> select multirange(<array<range<int64>>>[]) <=\n...   multirange([range(7, 10), range(20)]);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Querying Movies using GraphQL\nDESCRIPTION: This GraphQL query fetches all movies with their names, years, and associated actor names. It demonstrates how to retrieve movie data after creating entries in the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery MovieQuery {\n  __typename\n  getMovies {\n    name\n    year\n    actors {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Gel Environment Variables for Vercel Deployment\nDESCRIPTION: Instructions for setting up required Gel environment variables when deploying to Vercel. This includes setting the DSN and disabling TLS checks for the tutorial.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- Set :gelenv:`DSN` to your database's DSN\n- Set :gelenv:`CLIENT_TLS_SECURITY` to ``insecure``. This will disable\n  Gel's default TLS checks; configuring TLS is beyond the scope of this\n  tutorial.\n```\n\n----------------------------------------\n\nTITLE: Enum Literals in EdgeQL\nDESCRIPTION: Examples of declaring enum literals using dot notation and string casting in EdgeQL, after defining a custom enum type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Color extending enum<Red, Green, Blue>;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Color.Red;\nselect <Color>\"Red\";\n```\n\n----------------------------------------\n\nTITLE: Querying Object Type ID in EdgeQL\nDESCRIPTION: Shows how to query an object's ID and filter by UUID.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person { id };\nselect Person { email } filter .id = <uuid>'123e4567-e89b-...';\n```\n\n----------------------------------------\n\nTITLE: Exposing st_m Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_m function in EdgeDB. It takes a geometry input and returns the M coordinate as a float64.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_155\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::m( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS CPA within function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_cpawithin function, which tests if the closest point of approach of two trajectories is within the specified distance. Used for spatial analysis of moving objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_52\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::cpawithin( \\\n  a0: ext::postgis::geometry, \\\n  a1: ext::postgis::geometry, \\\n  a2: std::float64, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Extracting Bits from Bytes in EdgeQL\nDESCRIPTION: Example of using the bytes_get_bit function to extract individual bits from a bytes value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bytes.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> for n in {0, 1, 2, 3, 4, 5, 6, 7,\n...           8, 9, 10, 11, 12, 13 ,14, 15}\n... union bytes_get_bit(b'ab', n);\n{1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0}\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated User Type in EdgeQL\nDESCRIPTION: DDL command showing how to create a User type with a title annotation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/annotations.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate type User {\n  create annotation title := \"User type\";\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing PostGIS Point Functions in EdgeQL\nDESCRIPTION: Functions for creating and manipulating geometry points, including pointz (3D point), pointzm (4D point), and extracting points from geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_210\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::points(\n                    a0: ext::postgis::geometry \n                  ) ->  ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointz(\n                    xcoordinate: std::float64, \n                    ycoordinate: std::float64, \n                    zcoordinate: std::float64, \n                    srid: std::int64 = 0, \n                  ) ->  ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointzm(\n                    xcoordinate: std::float64, \n                    ycoordinate: std::float64, \n                    zcoordinate: std::float64, \n                    mcoordinate: std::float64, \n                    srid: std::int64 = 0, \n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sum Function in EdgeQL\nDESCRIPTION: Defines a function that returns the sum of two int64 arguments using a simple select expression.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate function mysum(a: int64, b: int64) -> int64\nusing (\n    select a + b\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Query Builder with @gel/generate\nDESCRIPTION: This command generates the query builder by introspecting the database schema. It creates TypeScript files in the dbschema/edgeql-js directory and offers to update .gitignore.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate edgeql-js\nGenerating query builder...\nDetected tsconfig.json, generating TypeScript files.\n   To override this, use the --target flag.\n   Run `npx @gel/generate --help` for full options.\nIntrospecting database schema...\nWriting files to ./dbschema/edgeql-js\nGeneration complete! 🤘\nChecking the generated query builder into version control\nis not recommended. Would you like to update .gitignore to ignore\nthe query builder directory? The following line will be added:\n\n   dbschema/edgeql-js\n\n[y/n] (leave blank for \"y\")\n> y\n```\n\n----------------------------------------\n\nTITLE: Schema Update with Required Body in SDL\nDESCRIPTION: Demonstrates adding a required body field to the Post type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/migrations.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl-diff\nCODE:\n```\ntype User {\n  required name: str;\n}\n\ntype Post {\n  required title: str;\n+   required body: str;\n  required author: User;\n}\n\ntype Comment {\n  required content: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Type with Multi-link in EdgeDB\nDESCRIPTION: This snippet defines the User type in EdgeDB, including various fields, links to Badge and Status, and a multi-link to Post objects for bookmarks.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ntype User {\n    required app_id: int32 {\n        constraint exclusive;\n    }\n    required name: str {\n        constraint exclusive;\n    }\n    required email: str {\n        constraint exclusive;\n    }\n    required password: str;\n    client_settings: json;\n\n    badge: Badge;\n    status: Status;\n\n    # Multi link to the Post objects\n    multi bookmark: Post {\n        note: str;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic std Module Selection in EdgeQL With Clause\nDESCRIPTION: Shows how EdgeQL automatically selects a module from std if it doesn't exist at the top level.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/with.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module math select abs(-1);\n```\n\n----------------------------------------\n\nTITLE: Interactive Shell Access to Gel Database\nDESCRIPTION: Command to open an interactive shell connected to the Gel database instance\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/docker.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm --link=gel \\\n   -v gel-cli-config:/.config/edgedb geldata/gel-cli \\\n   -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Exposing st_linelocatepoint Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_linelocatepoint function in EdgeDB. It takes geometry inputs and returns a float64 value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_145\n\nLANGUAGE: EdgeQL\nCODE:\n```\n) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: String Replace Example - EdgeQL\nDESCRIPTION: Demonstrates str_replace function replacing all occurrences of substring.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_replace('hello world', 'h', 'H');\n{'Hello world'}\ndb> select str_replace('hello world', 'l', '[L]');\n{'he[L][L]o wor[L]d'}\ndb> select str_replace('hello world', 'o', '😄');\n{'hell😄 w😄rld'}\n```\n\n----------------------------------------\n\nTITLE: Defining Type with Computed Property in EdgeDB SDL\nDESCRIPTION: Demonstrates how to create a 'Person' type with a computed 'full_name' property that combines other properties of the type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/objects.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person extending HasImage {\n    required first_name: str {\n        default := '';\n    }\n    required middle_name: str {\n        default := '';\n    }\n    required last_name: str;\n    full_name :=\n        (\n            (\n                (.first_name ++ ' ')\n                if .first_name != '' else\n                ''\n            ) ++\n            (\n                (.middle_name ++ ' ')\n                if .middle_name != '' else\n                ''\n            ) ++\n            .last_name\n        );\n    bio: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Common-tags Package for Next.js Project\nDESCRIPTION: This bash snippet demonstrates the installation of the common-tags package and its TypeScript types for use in the Next.js project.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install common-tags\n$ npm install @types/common-tags --save-dev\n```\n\n----------------------------------------\n\nTITLE: Dropping Type Annotation in EdgeQL\nDESCRIPTION: DDL command showing how to remove a title annotation from a User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/annotations.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  drop annotation title;\n};\n```\n\n----------------------------------------\n\nTITLE: DDL Migration Creating User Type\nDESCRIPTION: Auto-generated DDL commands to create a new User type with a name property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nCREATE TYPE default::User {\n    CREATE PROPERTY name: std::str;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating duration from Components in EdgeQL\nDESCRIPTION: Demonstrates creating a duration value using named arguments with the to_duration function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_37\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_duration(hours := 1,\n                   minutes := 20,\n                   seconds := 45);\n{4845s}\n```\n\n----------------------------------------\n\nTITLE: Defining anytuple Abstract Type in EdgeDB\nDESCRIPTION: Defines the 'anytuple' abstract type, which represents a generic tuple without specifying its component types. It's useful for defining polymorphic parameters in functions and operators.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_4\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: anytuple\n```\n\n----------------------------------------\n\nTITLE: Generating GML from PostGIS Geometry/Geography\nDESCRIPTION: Converts PostGIS geometry or geography to GML format. Allows specifying version, precision, options, namespace prefix, and ID.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::asgml( \n  version: std::int64, \n  geom: ext::postgis::geometry, \n  maxdecimaldigits: std::int64 = 15, \n  options: std::int64 = 0, \n  nprefix: std::str = 'gml', \n  id: std::str = '', \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::asgml( \n  version: std::int64, \n  geog: ext::postgis::geography, \n  maxdecimaldigits: std::int64 = 15, \n  options: std::int64 = 0, \n  nprefix: std::str = 'gml', \n  id: std::str = '', \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::asgml( \n  version: optional std::int64, \n  geom: optional ext::postgis::geometry, \n  maxdecimaldigits: optional std::int64 = 15, \n  options: optional std::int64 = 0, \n  nprefix: optional std::str = {}, \n  id: optional std::str = {}, \n) -> optional std::str\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS asgeojson Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_asgeojson function in EdgeQL. Converts geometry or geography to GeoJSON format. Returns a string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_11\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::asgeojson( \\\n                    a0: std::str \\\n                  ) ->  std::str\n                  ext::postgis::asgeojson( \\\n                    geom: ext::postgis::geometry, \\\n                    maxdecimaldigits: std::int64 = 9, \\\n                    options: std::int64 = 8, \\\n                  ) ->  std::str\n                  ext::postgis::asgeojson( \\\n                    geog: ext::postgis::geography, \\\n                    maxdecimaldigits: std::int64 = 9, \\\n                    options: std::int64 = 0, \\\n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Using tRPC Context in Next.js API Handler\nDESCRIPTION: TypeScript code to set up a Next.js API handler with tRPC router and context.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNextApiHandler } from '@trpc/server/adapters/next';\nimport { createTRPCContext } from 'src/trpc.ts';\nimport { appRouter } from 'src/routers/_app';\n\nexport default createNextApiHandler({\n  router: appRouter, // Your tRPC router\n  createContext: createTRPCContext,\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining if-then-else expressions in EdgeQL\nDESCRIPTION: Multiple if-then-else expressions can be chained for checking multiple conditions in sequence.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> with color := 'yellow', select\n... if color = 'red' then\n...   'Apple'\n... else if color = 'yellow' then\n...   'Banana'\n... else if color = 'orange' then\n...   'Orange'\n... else\n...   'Other';\n{'Banana'}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Type Hierarchy in EdgeQL\nDESCRIPTION: Defines an abstract Media type with required title field and two extending types Movie and TVShow with their specific fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nabstract type Media {\n  required title: str;\n}\n\ntype Movie extending Media {\n  release_year: int64;\n}\n\ntype TVShow extending Media {\n  num_seasons: int64;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating local_datetime from String in EdgeQL\nDESCRIPTION: Demonstrates creating a local_datetime value by parsing a string using the cal::to_local_datetime function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_25\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_datetime('2018-05-07T15:01:22.306916');\n{<cal::local_datetime>'2018-05-07T15:01:22.306916'}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Mutation Rewrites in EdgeQL\nDESCRIPTION: Example showing how to create two mutation rewrites on new properties - one for setting a created timestamp on insert and another for setting a modified timestamp on update.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/mutation_rewrites.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  create property created: datetime {\n    create rewrite insert using (datetime_of_statement());\n  };\n  create property modified: datetime {\n    create rewrite update using (datetime_of_statement());\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Gel Database\nDESCRIPTION: Execute a query against a Gel instance using the -I flag to specify the target instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/instances.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel query \"select 3.14\" -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Basic Module Declaration in SDL\nDESCRIPTION: Shows how to declare a basic module named 'default' in SDL format. The default module is commonly used to contain the entire schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  # declare types here\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Patch from PolyhedralSurface in EdgeQL\nDESCRIPTION: Returns the Nth patch (face) from a PolyhedralSurface geometry. This function exposes the PostGIS st_patchn function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_198\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::patchn( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Parameter in EdgeQL\nDESCRIPTION: Demonstrates how to set the 'listen_addresses' configuration parameter using the EdgeQL REPL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/configuration.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ngel> configure instance set listen_addresses := {'127.0.0.1', '::1'};\nCONFIGURE: OK\n```\n\n----------------------------------------\n\nTITLE: Array Element Setting in EdgeQL\nDESCRIPTION: Shows how to use the array_set function to replace a value at a specific index in an array.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select array_set(['hello', 'world'], 0, 'goodbye');\n{['goodbye', 'world']}\ndb> select array_set([1, 1, 2, 3], 1, 99);\n{[1, 99, 2, 3]}\n```\n\n----------------------------------------\n\nTITLE: Converting Vectors to Arrays in EdgeQL\nDESCRIPTION: Shows how to cast vector values to standard arrays of float32 for processing or display.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ngel> select <array<float32>>Item.embedding;\n{[1.2, 3, 4.5], [-0.1, 7, 0]}\n```\n\n----------------------------------------\n\nTITLE: Raw String Literals and Line Continuation in EdgeQL\nDESCRIPTION: Shows how raw string literals and regular strings handle escape sequences differently in EdgeQL, including the line continuation behavior in regular strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select r'A raw \\n string';\n{'A raw \\\\n string'}\ndb> select 'Not a raw \\n string';\n{\n  'Not a raw\n string',\n}\ndb> select $$something$$;\n{'something'}\ndb> select $marker$something $$\n... nested \\!$$$marker$;\n{'something $$\nnested \\!$$'}\n```\n\n----------------------------------------\n\nTITLE: Module with Type Declaration\nDESCRIPTION: Example of a module containing a simple type definition.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\nmodule my_module {\n  type User {\n    required name: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Division Operation in EdgeQL\nDESCRIPTION: Demonstrates arithmetic division and division by zero error handling in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 10 / 4;\n{2.5}\n\ndb> select 10 / 0;\nDivisionByZeroError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Duration Truncate Function in EdgeQL\nDESCRIPTION: Examples of using duration_truncate() to reduce duration precision for both standard duration and relative_duration types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_21\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select duration_truncate(\n  <duration>'15:01:22', 'hours');\n{<duration>'15:00:00'}\ndb> select duration_truncate(\n  <duration>'15:01:22.306916', 'minutes');\n{<duration>'15:01:00'}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Migration for Data Updates in EdgeDB\nDESCRIPTION: Command to create an empty migration file that will be used for data updates rather than schema changes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create --allow-empty\nCreated ./dbschema/migrations/00003.edgeql, id:\nm1qv2pdksjxxzlnujfed4b6to2ppuodj3xqax4p3r75yfef7kd7jna\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding and Decoding in EdgeQL\nDESCRIPTION: Demonstrates the use of enc::base64_encode and enc::base64_decode functions in EdgeQL for encoding and decoding base64 strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select enc::base64_encode(b'hello');\n{'aGVsbG8='}\ndb> select enc::base64_decode('aGVsbG8=');\n{b'hello'}\n```\n\n----------------------------------------\n\nTITLE: Module Merge Example\nDESCRIPTION: Demonstrates how multiple module blocks with the same name are merged into a single module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\nmodule my_module {\n  abstract type Named {\n    required name: str;\n  }\n}\n\nmodule my_module {\n  type User extending Named;\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting All Aliases in EdgeQL\nDESCRIPTION: Shows how to reset all aliases defined in the current EdgeQL session using the 'reset alias *' command. This affects aliases set with 'set alias' and 'set module', resetting the default module to 'default'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/sess_reset_alias.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\n# Reset all custom aliases for the current session.\nreset alias *;\n```\n\n----------------------------------------\n\nTITLE: Specifying a Postgres Index Type in SDL\nDESCRIPTION: Shows how to use a specific Postgres index type. This example creates a space-partitioned GiST index on the 'name' property of the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n  index pg::spgist on (.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from Date Values in EdgeQL\nDESCRIPTION: The cal::date_get function extracts specific elements from local_date values, such as year, month, day of year, or century.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select cal::date_get(\n    <cal::local_date>'2018-05-07', 'century');\n{21}\n\ndb> select cal::date_get(\n    <cal::local_date>'2018-05-07', 'year');\n{2018}\n\ndb> select cal::date_get(\n    <cal::local_date>'2018-05-07', 'month');\n{5}\n\ndb> select cal::date_get(\n    <cal::local_date>'2018-05-07', 'doy');\n{127}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Chain with Backlinks in EdgeDB SDL\nDESCRIPTION: Initial schema definition for Event type with a prev link to create a linked-list structure for event sequences.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Event {\n  required name: str;\n  prev: Event;\n\n  # ... more properties and links\n}\n```\n\n----------------------------------------\n\nTITLE: Altering User Object Type in EdgeQL\nDESCRIPTION: This snippet demonstrates how to alter the 'User' object type to make the 'name' property required using the 'alter type' command in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n    alter property name {\n        set required;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: SDL Post Type Definition\nDESCRIPTION: Schema definition for a Post type with title, body, tags, and author fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/update.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\n# ... Assume some User type is already defined\ntype Post {\n    required title: str;\n    required body: str;\n    # A \"tags\" property containing a set of strings\n    multi tags: str;\n    author: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Operator Examples\nDESCRIPTION: Shows basic boolean operations using comparison and set membership operators.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select true and 2 < 3;\n{true}\ndb> select '!' IN {'hello', 'world'};\n{false}\n```\n\n----------------------------------------\n\nTITLE: String Split Example - EdgeQL\nDESCRIPTION: Demonstrates str_split function splitting string into array by delimiter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_split('1, 2, 3', ', ');\n{['1', '2', '3']}\ndb> select str_split('123', '');\n{['1', '2', '3']}\n```\n\n----------------------------------------\n\nTITLE: Calculating 3D Geometric Distance in PostGIS using EdgeQL\nDESCRIPTION: Returns the 3D cartesian minimum distance between two geometries in projected units, based on spatial reference.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_63\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::distance3d( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Pattern Matching with ILIKE in EdgeQL\nDESCRIPTION: Demonstrates the ILIKE operator for case-insensitive pattern matching in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 'Abc' ilike 'a%';\n{true}\n```\n\n----------------------------------------\n\nTITLE: Reversing Geometry in EQL\nDESCRIPTION: Reverses the order of vertices in a geometry. This function exposes the PostGIS st_reverse functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_225\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::reverse( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: DateDuration Type Example\nDESCRIPTION: Demonstrates the usage of Gel's cal::date_duration type and its properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/types.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import gel\n>>> client = gel.create_client()\n>>> r = client.query_single('''SELECT <cal::date_duration>\"1 year 2 days\"''')\n>>> r\n<gel.DateDuration \"P1Y2D\">\n>>> r.months\n12\n>>> r.days\n2\n```\n\n----------------------------------------\n\nTITLE: Dropping Function in EdgeQL\nDESCRIPTION: Demonstrates how to drop a previously created function that takes a string parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/functions.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop function review_count(name: str);\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Next Link using Backlinks in EdgeDB SDL\nDESCRIPTION: Enhanced Event schema with a computed next link using backlink notation to create bidirectional relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Event {\n  required name: str;\n\n  prev: Event;\n  next := .<prev[is Event];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS contains function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_contains function, which tests if the first geometry contains the second geometry completely.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_45\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::contains( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Configuring ext::pgvector in SDL\nDESCRIPTION: Demonstrates how to set up and use the ext::pgvector extension for efficient storage and querying of vector data, commonly used for text embeddings in machine learning applications.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_14\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension pgvector;\n\nmodule default {\n  scalar type GPTEmbedding extending\n    ext::pgvector::vector<1536>;\n\n  type Document {\n    required content: str;\n    embedding: GPTEmbedding;\n\n    index ext::pgvector::ivfflat_cosine(lists := 100)\n      on (.embedding);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Altering Schema in EdgeQL Migration\nDESCRIPTION: Demonstrates creating a type 'Foo' with a property 'val' that has a default value, and then altering it to remove the default value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a7.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> start migration to {\n...   module default {\n...     type Foo {\n...       property val -> str {\n...         default := 'n/a'\n...       }\n...     }\n...   }\n... };\n\ndb> \\set output-mode json\ndb[tx]> describe current migration as json;\n[\n  {\n    \"complete\": false,\n    \"confirmed\": [],\n    \"parent\": \"m16wif5skjyqd6dbp5uwa67qrgw422qcwa3vctx77z7r34yx5mbigq\",\n    \"proposed\": {\n      \"confidence\": 1.0,\n      \"operation_id\": \"CREATE TYPE default::Foo\",\n      \"prompt\": \"did you create object type 'default::Foo'?\",\n      \"statements\": [{\"text\": \"CREATE TYPE default::Foo {\\nCREATE OPTIONAL SINGLE PROPERTY val -> std::str {\\nSET default := 'n/a';\\n    };\\n};\"}]\n    }\n  }\n]\n\ndb[tx]> populate migration;\nOK: POPULATE MIGRATION\ndb[tx]> commit migration;\nOK: COMMIT MIGRATION\n\ndb> start migration to {\n...   module default {\n...     type Foo {\n...       property val -> str;\n...     }\n...   }\n... };\ndb[tx]> describe current migration as json;\n[\n  {\n    \"complete\": false,\n    \"confirmed\": [],\n    \"parent\": \"initial\",\n    \"proposed\": {\n      \"confidence\": 0.9956623333333332,\n      \"operation_id\": \"ALTER TYPE default::Foo\",\n      \"prompt\": \"did you alter object type 'default::Foo'?\",\n      \"statements\": [{\"text\": \"ALTER TYPE default::Foo {\\nALTER PROPERTY val {\\n        DROP default;\\n    };\\n};\"}]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Timestamp to datetime in EdgeQL\nDESCRIPTION: Shows how to convert a Unix timestamp to a datetime value using the to_datetime function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_24\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_datetime(1590595184.584);\n{<datetime>'2020-05-27T15:59:44.584000000Z'}\n```\n\n----------------------------------------\n\nTITLE: Prompt Creation Function in TypeScript\nDESCRIPTION: Function that formats system message, context, and user query into a complete prompt for the AI model.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createFullPrompt(query: string, context: string) {\n  const systemMessage = `\n        As an enthusiastic Gel expert keen to assist,\n        respond to questions referencing the given Gel\n        sections.\n\n        If unable to help based on documentation, respond\n        with: \"Sorry, I don't know how to help with that.\"`;\n\n  return stripIndents`\n        ${oneLineTrim`${systemMessage}`}\n\n        Gel sections: \"\"\"\n        ${context}\n        \"\"\"\n\n        Question: \"\"\"\n        ${query}\n        \"\"\"`;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying int64 Type Cast Capabilities\nDESCRIPTION: Demonstrates how to query all possible casts from std::int64 to other types, showing assignment and implicit cast permissions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/casts.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect Cast {\n    allow_assignment,\n    allow_implicit,\n    to_type: { name },\n}\nfilter .from_type.name = 'std::int64'\norder by .to_type.name;\n```\n\n----------------------------------------\n\nTITLE: Initial User Schema with Optional Name in EdgeDB SDL\nDESCRIPTION: Basic User type definition with an optional name property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from MARC21\nDESCRIPTION: Function that creates a geometry value from MARC21 XML format, which is a standard for bibliographic records. Maps to the PostGIS st_geomfrommarc21 function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_106\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfrommarc21( \\\n                    marc21xml: std::str \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Aggregated Friends Query\nDESCRIPTION: Query that aggregates friends' names into arrays for each user.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/shapes.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select (User.name, array_agg(User.friends.name));\n{\n  ('Alice', ['Cameron', 'Dana']),\n  ('Billie', ['Dana']),\n  ('Cameron', []),\n  ('Dana', ['Alice', 'Billie', 'Cameron']),\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PostGIS Geometry to X3D Format\nDESCRIPTION: Converts PostGIS geometry to X3D (XML-based file format for 3D graphics) format. Allows specifying decimal precision and options for output.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::asx3d( \n  geom: optional ext::postgis::geometry, \n  maxdecimaldigits: optional std::int64 = 15, \n  options: optional std::int64 = 0, \n) -> optional std::str\n```\n\n----------------------------------------\n\nTITLE: String Trim Start Example - EdgeQL\nDESCRIPTION: Shows str_trim_start function removing specified characters from string start.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_trim_start('     data');\n{'data'}\ndb> select str_trim_start('.....data', '.:');\n{'data'}\ndb> select str_trim_start(':::::data', '.:');\n{'data'}\ndb> select str_trim_start(':...:data', '.:');\n{'data'}\ndb> select str_trim_start('.:.:.data', '.:');\n{'data'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Passwordless Authentication\nDESCRIPTION: Sets up Trust authentication method for passwordless access with priority 1.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/cli.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel configure insert Auth \\\n> --comment 'passwordless access' \\\n> --priority 1 \\\n> --method Trust\nOK: CONFIGURE INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Using Type Expressions in Intersections in EdgeQL\nDESCRIPTION: Example of using type expressions with & and | operators in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Shape[is Circle | Triangle & HasRightAngle];\n```\n\n----------------------------------------\n\nTITLE: Creating local_time Values in EdgeQL\nDESCRIPTION: Demonstrates how to create local time values (without timezone) using casting in EdgeQL. The time strings must follow ISO 8601 time format.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <cal::local_time>'15:01:22.306916';\nselect <cal::local_time>'15:01:22';\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to UUID with to_uuid() in EdgeQL\nDESCRIPTION: Shows how to convert a 128-bit bytes value to a UUID using the to_uuid() function. The bytes input must be a valid 128-bit UUID representation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/uuid.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select to_uuid(\n...   b'\\x92\\x67\\x3a\\xfc\\\n...     \\x9c\\x4f\\\n...     \\x42\\xb3\\\n...     \\x82\\x73\\\n...     \\xaf\\xe0\\x05\\x3f\\x0f\\x48');\n{92673afc-9c4f-42b3-8273-afe0053f0f48}\n```\n\n----------------------------------------\n\nTITLE: Filtering Accounts Without Including Computed Property in EdgeQL\nDESCRIPTION: Shows how to filter accounts based on a complex condition without including the computed property in the output.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Account {\n    name,\n    email,\n    # whatever other relevant data is needed\n} filter (.steps <= 2) ?? true;\n```\n\n----------------------------------------\n\nTITLE: Geometry Affine Transformations\nDESCRIPTION: Functions for applying affine transformations to geometries, including translation (moving in 2D or 3D space) and combined translation and scaling operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_243\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::translate( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n  a2: std::float64, \\\n) ->  ext::postgis::geometry\next::postgis::translate( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n  a2: std::float64, \\\n  a3: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::transscale( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n  a2: std::float64, \\\n  a3: std::float64, \\\n  a4: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Creating Managed PostgreSQL Instance on DigitalOcean\nDESCRIPTION: Uses doctl to create a managed PostgreSQL instance on DigitalOcean, specifying engine, version, size, and region.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ DSN=\"$( \\\n         doctl databases create gel-postgres \\\n             --engine pg \\\n             --version 14 \\\n             --size db-s-1vcpu-1gb \\\n             --num-nodes 1 \\\n             --region sfo3 \\\n             --output json \\\n         | jq -r '.[0].connection.uri' )\"\n```\n\n----------------------------------------\n\nTITLE: Using the strict_word_similarity Function in ext::pg_trgm\nDESCRIPTION: Examples of using the strict_word_similarity function which works like word_similarity but enforces matches at word boundaries in the second string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::strict_word_similarity('cat', 'Lazy dog');\n{0}\ndb> select ext::pg_trgm::strict_word_similarity('cat', 'Dog in a car');\n{0.5}\ndb> select ext::pg_trgm::strict_word_similarity(\n...   'cat', 'Dog catastrophy');\n{0.23076922}\ndb> select ext::pg_trgm::strict_word_similarity(\n...   'cat', 'Lazy dog and cat');\n{1}\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Generate Package as Dev Dependency\nDESCRIPTION: Commands to install the @gel/generate package as a development dependency using various JavaScript package managers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @gel/generate --save-dev      # npm users\n$ yarn add @gel/generate --dev              # yarn users\n$ pnpm add --dev @gel/generate              # pnpm users\n$ bun add --dev @gel/generate               # bun users\n$ deno add --dev npm:@gel/generate          # deno users\n```\n\n----------------------------------------\n\nTITLE: Type Annotation Descriptor Definition\nDESCRIPTION: Defines a structure for type annotations with descriptor reference and key-value pairs.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nstruct TypeAnnotationDescriptor {\n    uint8   tag = 127;\n    uint16  descriptor;\n    string  key;\n    string  value;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Trust Authentication in EdgeQL\nDESCRIPTION: Inserts a new Trust authentication method configuration for a specific user with priority 1.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/configure.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure instance insert Auth {\n    priority := 1,\n    method := (insert Trust),\n    user := 'my_user'\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Post\nDESCRIPTION: TypeScript/JavaScript example of creating a post with authentication token\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = createClient().withGlobals({\n  \"ext::auth::client_token\": auth_token,\n});\n\nconst inserted = await client.querySingle(\n  `\n  insert Post {\n    text := <str>$text,\n    author := global current_user,\n  }`,\n  {\n    text: 'if your grave doesnt say \"rest in peace\" on it you are automatically drafted into the skeleton war'\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Named Tuple Alternative in EdgeQL\nDESCRIPTION: Shows how to achieve similar results using named tuples instead of free objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nwith U := (select User filter .name like '%user%')\nselect (\n    matches := array_agg(U {name}),\n    total := count(U),\n    total_users := count(User),\n);\n```\n\n----------------------------------------\n\nTITLE: Empty Module Declaration\nDESCRIPTION: Shows the syntax for declaring an empty module container.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nmodule my_module {}\n```\n\n----------------------------------------\n\nTITLE: Flipping Coordinates in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_flipcoordinates function to flip the X and Y coordinates of a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_75\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::flipcoordinates( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Displaying Gel CLI Help Documentation\nDESCRIPTION: Command to display the help documentation for the Gel CLI, showing available commands and options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/cli.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --help\nUsage: gel [OPTIONS] [COMMAND]\n\nCommands:\n  <list of commands>\n\nOptions:\n  <list of options>\n\nConnection Options (gel --help-connect to see full list):\n  <list of connection options>\n\nCloud Connection Options:\n  <list of cloud connection options>\n```\n\n----------------------------------------\n\nTITLE: Using Backlinks in EdgeDB Query Builder\nDESCRIPTION: Examples of using backlinks in the EdgeDB query builder, including auto-generated backlinks and type intersections.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ne.Person[\"<director[is Movie]\"]\n// Person.<director[is Movie]\n\ne.Person['<director'].is(e.Movie);\n// Person.<director[is Movie]\n```\n\n----------------------------------------\n\nTITLE: Set membership testing with in operator in EdgeQL\nDESCRIPTION: The 'in' operator checks if elements are members of a set, returning a boolean result for each element tested.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 1 in {1, 3, 5};\n{true}\n\ndb> select 'Alice' in User.name;\n{true}\n\ndb> select {1, 2} in {1, 3, 5};\n{true, false}\n```\n\n----------------------------------------\n\nTITLE: Basic EdgeQL Update Example\nDESCRIPTION: Examples showing basic update operations using := assignment operator to modify user names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/update.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\n# update the user with the name 'Alice Smith'\nwith module example\nupdate User\nfilter .name = 'Alice Smith'\nset {\n    name := 'Alice J. Smith'\n};\n\n# update all users whose name is 'Bob'\nwith module example\nupdate User\nfilter .name like 'Bob%'\nset {\n    name := User.name ++ '*'\n};\n```\n\n----------------------------------------\n\nTITLE: Using contains() with multiranges in EdgeQL\nDESCRIPTION: Demonstrates how the contains() function works with multirange types in EdgeQL. The function returns true if the multirange contains the specified multirange, sub-range, or element.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select contains(\n...   multirange([\n...     range(1, 4), range(7),\n...   ]),\n...   multirange([\n...     range(1, 2), range(8, 10),\n...   ]),\n... );\n{true}\n\ndb> select contains(\n...   multirange([\n...     range(1, 4), range(8, 10),\n...   ]),\n...   range(8),\n... );\n{false}\n\ndb> select contains(\n...   multirange([\n...     range(1, 4), range(8, 10),\n...   ]),\n...   3,\n... );\n{true}\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operators in Gel TypeScript\nDESCRIPTION: Shows how to use ternary conditional operators that operate on three arguments, such as 'if-else' expressions, using the e.op function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\ne.op(e.str('😄'), 'if', e.bool(true), 'else', e.str('😢'));\n// 😄 if true else 😢\n\ne.op(\"if\", e.bool(true), \"then\", e.str('😄'), \"else\", e.str('😢'));\n// if true then 😄 else 😢\n```\n\n----------------------------------------\n\nTITLE: Dropping Function in EdgeQL\nDESCRIPTION: Removes a function definition with specified argument types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop function mysum(a: int64, b: int64);\n```\n\n----------------------------------------\n\nTITLE: Using File Parameters in Gel DSN\nDESCRIPTION: Demonstrates how to use file parameters in a Gel DSN to specify a path to a local file containing sensitive credentials or configuration values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngel://hostname.com:1234?tls_security_file=./tls_security.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Value Constraint in EdgeDB SDL\nDESCRIPTION: Demonstrates the use of 'max_value' constraint to limit the maximum allowed value for a custom scalar type 'Max100'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type Max100 extending int64 {\n    constraint max_value(100);\n}\n```\n\n----------------------------------------\n\nTITLE: Partial Constraints with Exceptions\nDESCRIPTION: Demonstrates how to create partial constraints with exceptions based on property values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_10\n\nLANGUAGE: sdl\nCODE:\n```\ntype BlogPost {\n  title: str;\n  published: bool;\n\n  constraint exclusive on (.title) except (not .published);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS geometry comparison operator in EdgeDB\nDESCRIPTION: This code snippet shows the signature of a PostGIS operator that compares two geometry objects. It specifically exposes the '@@' operator from PostGIS, which determines if one geometry contains another.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\na: ext::postgis::geometry, \\\nb: ext::postgis::geometry, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type in SDL\nDESCRIPTION: Defines the Object type as an abstract type extending BaseObject. This serves as the root object type for user-defined types in Gel.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/objects.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type std::Object extending std::BaseObject;\n```\n\n----------------------------------------\n\nTITLE: Type Checking for Sets in Gel TypeScript\nDESCRIPTION: Shows how TypeScript enforces EdgeDB's rule that sets cannot contain elements with incompatible types, resulting in a TypeError.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ne.set(e.int64(1234), e.str('sup'));\n// TypeError\n```\n\n----------------------------------------\n\nTITLE: Final Character Schema with Link-Based Class in SDL\nDESCRIPTION: Final schema showing the character type with a link to the CharacterClass type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_11\n\nLANGUAGE: sdl\nCODE:\n```\ntype CharacterClass {\n  required name: str;\n  multi skills: str;\n}\n\ntype Character {\n  required name: str;\n  class: CharacterClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Gel Instance Readiness via HTTP\nDESCRIPTION: This endpoint verifies if the Gel instance is ready to receive queries. It returns a 200 status code and 'OK' payload if the instance is ready, or a 50x status code or network error otherwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/http.rst#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttp://<hostname>:<port>/server/status/ready\n```\n\n----------------------------------------\n\nTITLE: Basic Filtering in EdgeQL\nDESCRIPTION: Demonstrates a simple filtering query to select accounts that have completed 5 steps of a process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Account filter .steps = 5;\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in SDL for Hero and Movie Types\nDESCRIPTION: This SDL code defines the schema for Person, Hero, Villain, and Movie types, which are used in the subsequent EdgeQL examples.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/insert.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  abstract type Person {\n    required name: str { constraint exclusive };\n  }\n\n  type Hero extending Person {\n    secret_identity: str;\n    multi villains := .<nemesis[is Villain];\n  }\n\n  type Villain extending Person {\n    nemesis: Hero;\n  }\n\n  type Movie {\n    required title: str { constraint exclusive };\n    required release_year: int64;\n    multi characters: Person;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating local_date from Components in EdgeQL\nDESCRIPTION: Demonstrates creating a local_date value using individual components with the cal::to_local_date function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_31\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_date(2018, 5, 7);\n{<cal::local_date>'2018-05-07'}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Operations\nDESCRIPTION: Shows usage of the 'is' operator for type checking on various data types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/types.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect 5 is int64;\nselect {3.14, 2.718} is not int64;\nselect Media is Movie;\n```\n\n----------------------------------------\n\nTITLE: Updating EdgeQL Query for User Creation\nDESCRIPTION: This EdgeQL diff shows the changes made to the 'create_user_async_edgeql' query to include the identity field when creating a new user. This update is necessary to link the user with their Gel Auth identity.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_37\n\nLANGUAGE: edgeql\nCODE:\n```\n  select (\n      insert User {\n        name := <str>$name,\n+       identity := <ext::auth::Identity><uuid>$identity_id,\n      }) {\n      name,\n      created_at,\n  };\n```\n\n----------------------------------------\n\nTITLE: Using the strict_word_similar Function in ext::pg_trgm\nDESCRIPTION: Examples of using the strict_word_similar function which works like word_similar but enforces matches at word boundaries in the second string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::strict_word_similar(\n...   'cat', 'Lazy dog');\n{false}\ndb> select ext::pg_trgm::strict_word_similar(\n...   'cat', 'Lazy dog');\n{false}\ndb> select ext::pg_trgm::strict_word_similar(\n...   'cat', 'Dog catastrophy');\n{false}\ndb> select ext::pg_trgm::strict_word_similar(\n...   'cat', 'Lazy dog and cat');\n{true}\n```\n\n----------------------------------------\n\nTITLE: Applying Schema Migrations for AI Index\nDESCRIPTION: Commands to create and apply migrations that add the AI index to the database schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\n$ gel migrate\n```\n\n----------------------------------------\n\nTITLE: Finding Shared Paths Between Geometries in EQL\nDESCRIPTION: Finds paths shared by two geometries. This function exposes the PostGIS st_sharedpaths functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_230\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::sharedpaths( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Creating Point from GeoHash in EdgeQL\nDESCRIPTION: Creates a Point geometry from a geohash string with optional precision. This function exposes the PostGIS st_pointfromgeohash function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_203\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointfromgeohash( \\\n                    a0: optional std::str, \\\n                    a1: optional std::int64 = {}, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Gel Project Configuration File\nDESCRIPTION: Shows the contents of a gel.toml file, which is created during project initialization to mark a directory as a Gel project.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[instance]\nserver-version = \"6.0\"\n```\n\n----------------------------------------\n\nTITLE: Querying Users with UUID-Based Names in EdgeQL\nDESCRIPTION: Example of using re_test function to find User objects with names ending in UUID pattern.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select User { name }\n... filter\n...     re_test('.* [a-z0-9]{8}(-[a-z0-9]{4}){3}-[a-z0-9]{12}$', .name);\n{\n  default::User {name: 'change me bc30d45a-2bcf-11ec-a6c2-6ff21f33a302'},\n  default::User {name: 'change me bc30d8a6-2bcf-11ec-a6c2-4f739d559598'},\n}\n```\n\n----------------------------------------\n\nTITLE: Checking 3D Distance Within in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_3ddwithin function to check if 3D geometries are within a specified distance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_68\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::dwithin3d( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                    a2: std::float64, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Configuring ext::ai Extension Properties\nDESCRIPTION: Demonstrates how to configure the AI extension properties using EdgeQL, specifically setting the indexer naptime duration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extai.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current branch\nset ext::ai::Config::indexer_naptime := <duration>'PT30S';\n```\n\n----------------------------------------\n\nTITLE: Launching the Gel Schema Visualization UI\nDESCRIPTION: Shell command for launching the built-in database UI to visualize the schema structure. This tool helps to inspect the data model and see the object types and links defined in the schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/modeling/nextjs.rst#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npx gel ui\n```\n\n----------------------------------------\n\nTITLE: Modified Log Type and Triggers for Batch Logging in EdgeDB SDL\nDESCRIPTION: Updates the Log type and triggers to handle multiple changes in a single log entry using multi properties and 'for all' triggers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl-diff\nCODE:\n```\n  type Log {\n    action: str;\n    timestamp: datetime {\n      default := datetime_current();\n    }\n-    target_name: str;\n-    change: str;\n+    multi target_name: str;\n+    multi change: str;\n  }\n\n  type Person {\n    required name: str;\n\n-    trigger log_insert after insert for each do (\n+    trigger log_insert after insert for all do (\n      insert Log {\n        action := 'insert',\n        target_name := __new__.name\n      }\n    );\n\n-    trigger log_update after update for each do (\n+    trigger log_update after update for all do (\n      insert Log {\n        action := 'update',\n        target_name := __new__.name,\n        change := __old__.name ++ '->' ++ __new__.name\n      }\n    );\n\n-    trigger log_delete after delete for each do (\n+    trigger log_delete after delete for all do (\n      insert Log {\n        action := 'delete',\n        target_name := __old__.name\n      }\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing the Embedding Storage Function in TypeScript\nDESCRIPTION: First part of the storeEmbeddings function that creates a Gel client, gets documentation paths, and prepares section data by calling the prepareSectionsData function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nasync function storeEmbeddings() {\n  const client = gel.createClient();\n\n  const sectionPaths = await walk(\"docs\");\n\n  console.log(`Discovered ${sectionPaths.length} sections`);\n\n  const sections = await prepareSectionsData(sectionPaths);\n\n  // The rest of the function\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Range Class in TypeScript\nDESCRIPTION: This snippet defines the Range class as a generic TypeScript class. It represents a Gel std::range value and can be used with number, Date, LocalDate, LocalDateTime, or Duration types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Range<\n          T extends number | Date | LocalDate | LocalDateTime | Duration\n      >{\n          // ...\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Migration for Data Changes in Gel CLI\nDESCRIPTION: This bash command demonstrates how to create an empty migration for data changes using the '--allow-empty' flag in the Gel CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create --allow-empty\n```\n\n----------------------------------------\n\nTITLE: Creating datetime from Components in EdgeQL\nDESCRIPTION: Demonstrates how to create a datetime value using the to_datetime function with individual components like year, month, day, hour, minute, second, and timezone.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_datetime(\n    2018, 5, 7, 15, 1, 22.306916, 'UTC');\n{<datetime>'2018-05-07T15:01:22.306916000Z'}\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineLocatePoint Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineLocatePoint function which returns the fractional position along a line where it is closest to a point. For geography types, supports specifying whether to use a spheroid for calculations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_144\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::linelocatepoint( \\\n                    a0: optional std::str, \\\n                    a1: optional std::str, \\\n                  ) -> optional std::float64\n                  ext::postgis::linelocatepoint( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n                  ext::postgis::linelocatepoint( \\\n                    a0: ext::postgis::geography, \\\n                    a1: ext::postgis::geography, \\\n                    use_spheroid: std::bool = true, \\\n```\n\n----------------------------------------\n\nTITLE: Configuring SCRAM Authentication in EdgeQL\nDESCRIPTION: Example of setting up SCRAM-SHA-256 password-based authentication.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/cfg.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> configure instance insert\n...   Auth {priority := 0, method := (insert SCRAM)};\nOK: CONFIGURE INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated Function with Block Syntax in EdgeQL\nDESCRIPTION: Creates a function using block syntax with both implementation and metadata annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate function mysum(a: int64, b: int64) -> int64 {\n    using (\n        select a + b\n    );\n    create annotation title := \"My sum function.\";\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Parameter Example\nDESCRIPTION: Demonstrates using JSON parameters for complex data structures in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/parameters.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> with data := <json>$data\n... insert Movie {\n...   title := <str>data['title'],\n...   release_year := <int64>data['release_year'],\n... };\nParameter <json>$data: {\"title\": \"The Marvels\", \"release_year\": 2023}\n{default::Movie {id: 8d286cfe-3c0a-11ec-aa68-3f3076ebd97f}}\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_3DLineInterpolatePoint Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_3DLineInterpolatePoint function which returns a point interpolated along a 3D line at a fractional distance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_142\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::lineinterpolatepoint3d( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS collection homogenize function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_collectionhomogenize function, which converts a heterogeneous collection to the most reduced homogeneous form possible.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_42\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::collectionhomogenize( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Generating Points in a Geometric Area with PostGIS\nDESCRIPTION: Function for generating random points within a geometric area. Accepts a geometry, number of points to generate, and an optional seed for reproducibility.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_88\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::generatepoints( \\\n                    area: ext::postgis::geometry, \\\n                    npoints: std::int64, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::generatepoints( \\\n                    area: ext::postgis::geometry, \\\n                    npoints: std::int64, \\\n                    seed: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Type Inference with 'typeof' Operator in EdgeQL\nDESCRIPTION: Shows how to use the 'typeof' operator for static type inference in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/type.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype Foo {\n    bar: int16;\n    baz: Bar;\n}\n\ntype Bar extending Foo;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Foo { bar := 1 };\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (Foo.bar / 2) is typeof Foo.bar;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect introspect (typeof Foo.bar).name;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect introspect (typeof (Foo.bar / 2)).name;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Bar { bar := 2 };\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Foo {\n    bar,\n    can_be_baz := Foo is typeof Foo.baz\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring pg_trgm Extension Parameters in EdgeDB\nDESCRIPTION: SDL snippet defining the configuration type for the pg_trgm extension. It includes three parameters for setting similarity thresholds used by the similarity functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Config extending cfg::ConfigObject {\n  required similarity_threshold: float32;\n  required word_similarity_threshold: float32;\n  required strict_word_similarity_threshold: float32;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Branch\nDESCRIPTION: Creates a new feature branch in the Gel instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/cli.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel branch create feature\nOK: CREATE\n```\n\n----------------------------------------\n\nTITLE: Executing EdgeQL Script via Pipe on Windows CMD\nDESCRIPTION: Windows Command Prompt specific syntax for executing an EdgeQL script file through the Gel shell\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel.rst#2025-04-16_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\ntype myscript.edgeql | gel [<connection-option>...]\n```\n\n----------------------------------------\n\nTITLE: Updating List Order for a Specific Actor in EdgeQL\nDESCRIPTION: This query updates the list_order link property for a specific actor (Jason Momoa) in the movie 'Dune' directed by Villeneuve.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/update.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter\n    .title = 'Dune'\n    and\n    .directors.last_name = 'Villeneuve'\nset {\n    # The += operator will allow updating only the\n    # specified actor link.\n    actors += (\n        select Person {\n            @list_order := 5,\n        }\n        filter .full_name = 'Jason Momoa'\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Vacuuming a User Type in EdgeQL\nDESCRIPTION: Demonstrates how to use the administer vacuum() command to reclaim storage for the User type, with the full option set to true to return reclaimed storage to the OS.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nadminister vacuum(User, full := true)\n```\n\n----------------------------------------\n\nTITLE: Running gel watch command with verbose output\nDESCRIPTION: Executes the gel watch command with the -v or --verbose option to produce more detailed output during the watch process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_watch.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngel watch -v\n```\n\n----------------------------------------\n\nTITLE: Running Query Performance Analysis with Gel Analyze\nDESCRIPTION: This code snippet demonstrates the output of the 'gel analyze' command when run on a simple query. It shows a coarse-grained query plan with timing, cost, loops, rows, and width information for each part of the query execution.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_analyze.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n──────────────────────────────────────── Query ────────────────────────────────────────\nanalyze select ➊  Hero {name, secret_identity, ➋  villains: {name, ➌  nemesis: {name}}};\n\n──────────────────────── Coarse-grained Query Plan ────────────────────────\n                   │ Time     Cost Loops Rows Width │ Relations\n➊ root            │  0.0 69709.48   1.0  0.0    32 │ Hero\n╰──➋ .villains    │  0.0     92.9   0.0  0.0    32 │ Villain, Hero.villains\n╰──➌ .nemesis     │  0.0     8.18   0.0  0.0    32 │ Hero\n```\n\n----------------------------------------\n\nTITLE: Converting datetime to local_date with Timezone in EdgeQL\nDESCRIPTION: Shows how to convert a timezone-aware datetime to a local_date in a specified timezone using the cal::to_local_date function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_32\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_date(\n  <datetime>'2018-12-31T22:00:00+08',\n  'America/Chicago');\n{<cal::local_date>'2019-01-01'}\n```\n\n----------------------------------------\n\nTITLE: Recommended approaches for specifying sequences\nDESCRIPTION: Examples showing best practices for specifying sequences with the introspect operator and an alternative approach for runtime sequence determination.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sequence.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sequence_next(introspect MySequenceType);\n# or\nselect sequence_next(introspect typeof MyObj.seq_prop);\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  SeqType := (\n    select schema::ScalarType\n    filter .name = <str>$seq_type_name\n  )\nselect\n  sequence_next(SeqType);\n```\n\n----------------------------------------\n\nTITLE: Using generated functions in single-file mode\nDESCRIPTION: Example of how to use the generated functions when the generator is run in single-file mode.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/queries.rst#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as queries from \"./dbschema/queries\";\nimport { createClient } from \"gel\";\n\nconst client = await createClient();\n\nconst movies = await queries.getMovies(client);\nconst user = await queries.getUser(client, {\n  user_id: \"00000000-0000-0000-0000-000000000000\"\n});\n```\n\n----------------------------------------\n\nTITLE: Using Infix Operators in Gel TypeScript\nDESCRIPTION: Demonstrates how to use infix operators that operate on two arguments, such as string concatenation, using the e.op function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\ne.op(e.str('Hello '), '++', e.str('World!'));\n// 'Hello ' ++ 'World!'\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Branch in EdgeQL\nDESCRIPTION: Creates a new Gel branch without schema or data, aside from standard schemas. This is a basic branch creation operation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/branches.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate empty branch newbranch;\n```\n\n----------------------------------------\n\nTITLE: Defining User Type Schema with Friends Link in EdgeDB SDL\nDESCRIPTION: Defines a User type with a name property and a multi-link to other User objects called 'friends'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_34\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n      name: str;\n      multi friends: User;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Movie Data in SQL\nDESCRIPTION: Example SQL INSERT statement to add a movie record to the Movie table in Gel.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"Movie\" (title, releaseYear)\nVALUES (\"Madagascar\", 2012)\nRETURNING id, title, releaseYear;\n```\n\n----------------------------------------\n\nTITLE: Using the similarity Function in ext::pg_trgm\nDESCRIPTION: Examples of using the similarity function to compute how similar two strings are. Returns a value between 0 and 1, where 0 indicates no similarity and 1 indicates identical strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::similarity('cat', 'dog');\n{0}\ndb> select ext::pg_trgm::similarity('cat', 'cart');\n{0.28571427}\ndb> select ext::pg_trgm::similarity('cat', 'car');\n{0.33333337}\ndb> select ext::pg_trgm::similarity('cat', 'cat');\n{1}\n```\n\n----------------------------------------\n\nTITLE: Invalid local_datetime Casting Examples in EdgeQL\nDESCRIPTION: Shows examples of invalid local datetime string formats when casting to local_datetime type in EdgeQL. Demonstrates the requirement for ISO 8601 format without timezone.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <cal::local_datetime>'2019-01-01T15:01:22+00';\nInvalidValueError: invalid input syntax for type\ncal::local_datetime: '2019-01-01T15:01:22+00'\nHint: Please use ISO8601 format. Alternatively\n\"cal::to_local_datetime\" function provides custom formatting\noptions.\n\ndb> select <cal::local_datetime>'January 01 2019';\nInvalidValueError: invalid input syntax for type\ncal::local_datetime: 'January 01 2019'\nHint: Please use ISO8601 format. Alternatively\n\"cal::to_local_datetime\" function provides custom formatting\noptions.\n```\n\n----------------------------------------\n\nTITLE: Forcing 2D Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_force2d function to force a geometry into a 2-dimensional representation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_76\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::force2d( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Declaring Savepoint Syntax in EdgeQL\nDESCRIPTION: The syntax for declaring a savepoint in EdgeQL. It requires specifying a savepoint name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_sp_declare.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndeclare savepoint <savepoint-name> ;\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID with uuid_generate_v1mc() in EdgeQL\nDESCRIPTION: Shows how to generate a version 1 UUID using the uuid_generate_v1mc() function, which creates a time-based UUID with a random multicast MAC address. This is the default function used to populate the id column.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/uuid.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select uuid_generate_v1mc();\n{1893e2b6-57ce-11e8-8005-13d4be166783}\n```\n\n----------------------------------------\n\nTITLE: Creating and Unpacking Multiranges in EdgeDB\nDESCRIPTION: Examples of creating multiranges using the multirange constructor and unpacking them using multirange_unpack. Shows handling of empty ranges and arrays.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_26\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select multirange([range(8, 10), range(1, 4), range(2, 5)]);\n{[range(1, 5), range(8, 10)]}\n\ndb> with\n  a := multirange(<array<range<int64>>>[]),\n  b := multirange([range(<int64>{}, empty := true)]),\n  c := range(<int64>{}, empty := true),\nselect (a = b, b = c);\n{(true, true)}\n\ndb> select multirange_unpack(\n  multirange([\n    range(1, 4), range(7), range(3, 5)\n  ]),\n);\n{range(1, 5), range(7, {})}\ndb> select multirange_unpack(\n  multirange(<array<range<int64>>>[]));  \n{}\n```\n\n----------------------------------------\n\nTITLE: Testing Assignment Cast Behavior\nDESCRIPTION: Shows examples of valid and invalid assignment casts when inserting data into the Example type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/casts.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Example {\n    p_int16 := 1,\n    p_float32 := 2\n};\ninsert Example {\n    p_json := 3  # assignment cast to json not allowed\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Object by ID in Gel TypeScript\nDESCRIPTION: Demonstrates how to select a specific object using the filter_single key with an ID, which tells the query builder to expect a result with zero or one elements.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, () => ({\n  id: true,\n  title: true,\n  release_year: true,\n\n  filter_single: { id: \"00000000-0000-0000-0000-000000000000\" },\n}));\n```\n\n----------------------------------------\n\nTITLE: Querying Gel Instance Aliveness via HTTP\nDESCRIPTION: This endpoint checks if the Gel instance is alive. It returns a 200 status code and 'OK' payload if the instance is alive, or a 50x status code or network error otherwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/http.rst#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttp://<hostname>:<port>/server/status/alive\n```\n\n----------------------------------------\n\nTITLE: Implicit Module Declaration\nDESCRIPTION: Shows how to declare modules implicitly using fully-qualified names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type my_module::Named {\n    required name: str;\n}\n\ntype my_module::User extending my_module::Named;\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with OpenAI API\nDESCRIPTION: Calls the OpenAI API to generate embeddings for all prepared section contents in a single batch request.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nasync function prepareSectionsData(\n  sectionPaths: string[]\n): Promise<Section[]> {\n  // Part we just talked about\n\n  const embeddingResponse = await openai.embeddings.create({\n    model: \"text-embedding-ada-002\",\n    input: contents,\n  });\n\n  // The rest\n}\n```\n\n----------------------------------------\n\nTITLE: Geometric Aggregate Functions\nDESCRIPTION: Functions for operating on sets of geometric data including clustering, collection, and union operations\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_247\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::clusterintersecting_agg(a0: set of ext::postgis::geometry) -> optional array<ext::postgis::geometry>\n\next::postgis::clusterwithin_agg(a0: set of ext::postgis::geometry, a1: std::float64) -> optional array<ext::postgis::geometry>\n\next::postgis::collect_agg(a0: set of ext::postgis::geometry) -> optional ext::postgis::geometry\n\next::postgis::coverageunion_agg(a0: set of ext::postgis::geometry) -> optional ext::postgis::geometry\n\next::postgis::extent3d_agg(a0: set of ext::postgis::geometry) -> optional ext::postgis::box2d\n\next::postgis::extent_agg(a0: set of ext::postgis::geometry) -> optional ext::postgis::box2d\n\next::postgis::makeline_agg(a0: set of ext::postgis::geometry) -> optional ext::postgis::geometry\n\next::postgis::memunion_agg(a0: set of ext::postgis::geometry) -> optional ext::postgis::box2d\n\next::postgis::polygonize_agg(a0: set of ext::postgis::geometry) -> optional ext::postgis::geometry\n\next::postgis::union_agg(a0: set of ext::postgis::geometry) -> optional ext::postgis::geometry\next::postgis::union_agg(a0: set of ext::postgis::geometry, gridsize: std::float64) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Simple Update Examples in EdgeQL\nDESCRIPTION: Demonstrates simple update operations, comparing direct update versus using a for statement, highlighting when for statements should be avoided for performance reasons.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/for.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nupdate User\nfilter .name in {'Alice', 'Bob', 'Carol', 'Dave'}\nset {\n    theme := 'halloween'\n};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nfor x in {'Alice', 'Bob', 'Carol', 'Dave'}\nunion (\n    update User\n    filter .name = x\n    set {\n        theme := 'halloween'\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Major Version in Gel Project\nDESCRIPTION: Command example showing how to initialize a Gel project using the latest release of a major version (6.x)\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_project/gel_project_init.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init --server-version 6.1\n```\n\n----------------------------------------\n\nTITLE: Data Migration Script in EdgeQL\nDESCRIPTION: Migration script to create NewClass objects and update Character references.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql-diff\nCODE:\n```\n  CREATE MIGRATION m1iztxroh3ifoeqmvxncy77whnaei6tp5j3sewyxtrfysronjkxgga\n      ONTO m1uttd6f7fpiwiwikhdh6qyijb6pcji747ccg2cyt5357i3wsj3l3q\n  {\n    insert default::NewClass {\n        name := 'Warrior',\n        skills := {'punch', 'kick', 'run', 'jump'},\n    };\n    insert default::NewClass {\n        name := 'Scholar',\n        skills := {'read', 'write', 'analyze', 'refine'},\n    };\n    insert default::NewClass {\n        name := 'Rogue',\n        skills := {'impress', 'sing', 'steal', 'run', 'jump'},\n    };\n\n    update default::Character\n    set {\n        new_class := assert_single((\n            select default::NewClass\n            filter .name ilike <str>default::Character.class\n        )),\n    };\n  };\n```\n\n----------------------------------------\n\nTITLE: Calculating 3D Perimeter in EdgeQL\nDESCRIPTION: Calculates the 3D perimeter of a geometry considering Z coordinates. This function exposes the PostGIS st_3dperimeter function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_201\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::perimeter3d( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Accessing Link Properties in For Bindings in EdgeQL\nDESCRIPTION: Example of accessing link properties through for bindings in an EdgeQL query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User {\n    cards := ((\n        for c in .deck[is HeartsCard]\n        select (c.name, c@order)\n    )),\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AsyncEdgeDBAI Dependency in Python\nDESCRIPTION: This Python diff shows the addition of the AsyncEdgeDBAI import, which is required for creating the AI client in the Python app.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom edgedb.ai import create_async_ai, AsyncEdgeDBAI\n```\n\n----------------------------------------\n\nTITLE: Defining Trigger in SDL\nDESCRIPTION: Example of defining a trigger for logging inserts on a Person type in EdgeDB SDL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_11\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str;\n\n  trigger log_insert after insert for each do (\n    insert Log {\n      action := 'insert',\n      target_name := __new__.name\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling HTTP POST Request in EdgeDB\nDESCRIPTION: This snippet demonstrates how to schedule an HTTP POST request using the net::http::schedule_request function in EdgeDB. It specifies the URL, method, headers, and body of the request.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/net.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith request := (\n    net::http::schedule_request(\n        'https://example.com',\n        method := net::http::Method.POST,\n        headers := [('Content-Type', 'application/json')],\n        body := <bytes>$${\"key\": \"value\"}$$\n    )\n)\nselect request.id;\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to UUID in EdgeQL\nDESCRIPTION: Demonstrates converting bytes back to a UUID using the to_uuid() function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_uuid(\n...   b'\\x92\\x67\\x3a\\xfc\\\n...     \\x9c\\x4f\\\n...     \\x42\\xb3\\\n...     \\x82\\x73\\\n...     \\xaf\\xe0\\x05\\x3f\\x0f\\x48');\n{92673afc-9c4f-42b3-8273-afe0053f0f48}\n```\n\n----------------------------------------\n\nTITLE: Basic Character Schema with Description in SDL\nDESCRIPTION: Initial schema for character type with name and description properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_12\n\nLANGUAGE: sdl\nCODE:\n```\ntype Character {\n  required name: str;\n  required description: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating local_time from Components in EdgeQL\nDESCRIPTION: Demonstrates creating a local_time value using individual components with the cal::to_local_time function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_35\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_time(15, 1, 22.306916);\n{<cal::local_time>'15:01:22.306916'}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gel Instance Metrics via HTTP\nDESCRIPTION: This Prometheus-compatible endpoint provides various metrics about the Gel instance's performance and status. It returns metrics data when accessed via a GET request.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/http.rst#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttp://<hostname>:<port>/metrics\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineFromText Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineFromText function which creates a LineString geometry from Well-Known Text (WKT) representation. Supports specifying a spatial reference ID (SRID).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_139\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::linefromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::linefromtext( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Defining Source Deletion Policies in EdgeDB SDL\nDESCRIPTION: Example of defining source deletion policies in EdgeDB schema definition language.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_14\n\nLANGUAGE: sdl\nCODE:\n```\ntype BlogPost {\n  property title -> str;\n}\n\ntype Person {\n  multi link posts -> BlogPost {\n    on source delete delete target;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping by Tuple of Properties in TypeScript and EdgeQL\nDESCRIPTION: Demonstrates grouping movies by a tuple of properties (release year and first letter of title) in both TypeScript and EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\ne.group(e.Movie, (movie) => {\n  const release_year = movie.release_year;\n  const first_letter = movie.title[0];\n  return {\n    title: true,\n    by: { release_year, first_letter }\n  };\n});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie { title }\nusing first_letter := .title[0]\nby .release_year, first_letter\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS clip by box function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_clipbybox2d function, which clips a geometry to a rectangular box. Takes a geometry and a box2d object as parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_34\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::clipbybox2d( \\\n  geom: ext::postgis::geometry, \\\n  box: ext::postgis::box2d, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Comparing Ranges with Less Than Operator in EdgeQL\nDESCRIPTION: Demonstrates how the less than operator compares ranges and multiranges in EdgeQL. The comparison is based on lower bounds, with unspecified bounds considered smaller, and empty ranges considered before any non-empty range.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select range(1, 10) < range(<int64>{}, empty := true);\n{false}\n\ndb> select multirange(<array<range<int64>>>[]) <\n...   multirange([range(7, 10), range(20)]);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS contains properly function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_containsproperly function, which tests if every point of the second geometry lies in the interior of the first geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_46\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::containsproperly( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Deleting Reviews by User Name - Direct Filter\nDESCRIPTION: Demonstrates how to delete all reviews from a specific user by filtering on the author's name. Uses a direct filter approach on the Review type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/delete.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndelete Review\nfilter .author.name = 'trouble2020'\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS asencodedpolyline Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_asencodedpolyline function in EdgeQL. Converts geometry to encoded polyline format. Returns a string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_8\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::asencodedpolyline( \\\n                    geom: ext::postgis::geometry, \\\n                    nprecision: std::int64 = 5, \\\n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Creating AWS CloudFormation Stack via CLI\nDESCRIPTION: This snippet shows how to create an AWS CloudFormation stack for Gel deployment using the AWS CLI. It specifies the stack name, template URL, and necessary parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/aws_aurora_ecs.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ aws cloudformation create-stack \\\n    --stack-name Gel \\\n    --template-url \\\n      https://gel-deployment.s3.us-east-2.amazonaws.com/gel-aurora.yml \\\n    --capabilities CAPABILITY_NAMED_IAM \\\n    --parameters ParameterKey=SuperUserPassword,ParameterValue=<password>\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::Parameter Structure in EdgeQL\nDESCRIPTION: This query examines the structure of the schema::Parameter type, which is important for understanding operator parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/operators.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Parameter';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routes for Magic Link Authentication Flow\nDESCRIPTION: Creates an HTTP server with route handlers for the different steps in the Magic Link authentication process, including sign-up, sending magic links, and handling callbacks.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = http.createServer(async (req, res) => {\n  const requestUrl = getRequestUrl(req);\n\n  switch (requestUrl.pathname) {\n    case \"/auth/magic-link/callback\": {\n      await handleCallback(req, res);\n      break;\n    }\n\n    case \"/auth/magic-link/signup\": {\n      await handleSignUp(req, res);\n      break;\n    }\n\n    case \"/auth/magic-link/send\": {\n      await handleSendMagicLink(req, res);\n      break;\n    }\n\n    default: {\n      res.writeHead(404);\n      res.end(\"Not found\");\n      break;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Modules in SDL\nDESCRIPTION: Shows how to organize schema definitions using nested modules, allowing for more flexible schema organization.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_17\n\nLANGUAGE: sdl\nCODE:\n```\nmodule momma_module {\n  module baby_module {\n    # <schema-declarations>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing a Function in EdgeDB REPL\nDESCRIPTION: Demonstrates the use of the \\d command to describe a function (sum) with multiple overloads in the EdgeDB REPL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/repl.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> \\d object sum\nfunction std::sum(s: set of std::bigint) ->  std::bigint {\n    volatility := 'Immutable';\n    annotation std::description := 'Return the sum of the set of numbers.';\n    using sql function 'sum'\n;};\nfunction std::sum(s: set of std::int32) ->  std::int64 {\n    volatility := 'Immutable';\n    annotation std::description := 'Return the sum of the set of numbers.';\n    using sql function 'sum'\n;};\nfunction std::sum(s: set of std::decimal) ->  std::decimal {\n    volatility := 'Immutable';\n    annotation std::description := 'Return the sum of the set of numbers.';\n    using sql function 'sum'\n;};\nfunction std::sum(s: set of std::float32) ->  std::float32 {\n    volatility := 'Immutable';\n    annotation std::description := 'Return the sum of the set of numbers.';\n    using sql function 'sum'\n;};\nfunction std::sum(s: set of std::int64) ->  std::int64 {\n    volatility := 'Immutable';\n    annotation std::description := 'Return the sum of the set of numbers.';\n    using sql function 'sum'\n;};\nfunction std::sum(s: set of std::float64) ->  std::float64 {\n    volatility := 'Immutable';\n    annotation std::description := 'Return the sum of the set of numbers.';\n    using sql function 'sum'\n;};\n```\n\n----------------------------------------\n\nTITLE: Using Gel Migration Edit Command\nDESCRIPTION: CLI command syntax for editing migration files using gel. The command opens the last migration file in $EDITOR and fixes migration IDs after editing. Typically used for migrations that haven't been applied yet.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/gel_migration_edit.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel migration edit [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using withModuleAliases Method in JavaScript\nDESCRIPTION: Shows how to create a client with module aliases, setting the 'module' alias to 'sys' and then querying the EdgeDB version.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/client.rst#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await client.withModuleAliases({\n  module: \"sys\"\n}).queryRequiredSingle<string>(`\n  select get_version_as_str();\n`);\n// \"6.4\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from Time Values in EdgeQL\nDESCRIPTION: The cal::time_get function extracts specific elements from local_time values, such as hours, minutes, or milliseconds.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select cal::time_get(\n    <cal::local_time>'15:01:22.306916', 'minutes');\n{1}\n\ndb> select cal::time_get(\n    <cal::local_time>'15:01:22.306916', 'milliseconds');\n{22306.916}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OAuth Provider\nDESCRIPTION: EdgeQL query to configure Azure OAuth provider with client ID, secret and additional scope\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH\nINSERT ext::auth::AzureOAuthProvider {\n    secret := 'cccccccccccccccccccccccccccccccc',\n    client_id := '1597b3fc-b67d-4d2b-b38f-acc256341dbc',\n    additional_scope := 'offline_access',\n};\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Test Example - EdgeQL\nDESCRIPTION: Demonstrates re_test function checking for regex match existence.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select re_test(r'a', 'abc');\n{true}\n```\n\n----------------------------------------\n\nTITLE: Altering an Index using EdgeQL DDL\nDESCRIPTION: Demonstrates how to alter an existing index using EdgeQL DDL. This example adds an annotation to the index on the 'name' property of the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  alter index on (.name) {\n    create annotation title := 'User name index';\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type Alias with Computed Property in SDL\nDESCRIPTION: Shows how to create an object type alias with an additional computed property. This example creates a 'PostWithTrimmedTitle' alias that includes a trimmed version of the post title.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/aliases.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Post {\n  required title: str;\n}\n\nalias PostWithTrimmedTitle := Post {\n  trimmed_title := str_trim(.title)\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying User Type with Renamed Property in SDL\nDESCRIPTION: This SDL code snippet shows a modification to the 'User' type, renaming the 'name' property to 'nam'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_7\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    nam: Name;\n  }\n  scalar type Name extending str;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating local_date Values in EdgeQL\nDESCRIPTION: Demonstrates how to create local date values (without timezone) using casting in EdgeQL. The date strings must follow ISO 8601 date format.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <cal::local_date>'2018-05-07';\n```\n\n----------------------------------------\n\nTITLE: Generating Salt Values with ext::pgcrypto::gen_salt Function\nDESCRIPTION: Shows how to generate random salt strings for password hashing with different algorithms and iteration counts. Supported algorithms include bf (default), des, xdes, and md5.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgcrypto.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect ext::pgcrypto::gen_salt();\nselect ext::pgcrypto::gen_salt('des');\nselect ext::pgcrypto::gen_salt('xdes');\n```\n\n----------------------------------------\n\nTITLE: Auth Client Implementation\nDESCRIPTION: TypeScript example showing how to create an EdgeDB client with authentication token.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"edgedb\";\n\ndeclare const tokenFromAuthServer: string;\nconst client = createClient()\n  .withGlobals({\n    \"ext::auth::client_token\": tokenFromAuthServer\n  });\n\nconst carts = await client.query(`select Cart { * };`);\n```\n\n----------------------------------------\n\nTITLE: Getting Coordinate Dimensions in EdgeQL\nDESCRIPTION: Returns the coordinate dimension of a geometry. This function exposes the PostGIS st_ndims function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_183\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::ndims( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int16\n```\n\n----------------------------------------\n\nTITLE: Refactored Shared Last Names Query in EdgeQL\nDESCRIPTION: Alternative version of the shared last names query using top-level WITH clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    # don't need detached at top-level\n    P := Person\nselect Person {\n    id,\n    full_name,\n    same_last_name := (\n        select P {\n            id,\n            full_name,\n        }\n        filter\n            # same last name\n            P.last_name = Person.last_name\n            and\n            # not the same person\n            P != Person\n    ),\n}\nfilter exists .same_last_name\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Values in EdgeQL\nDESCRIPTION: This EdgeQL snippet shows how to access enum values directly. It demonstrates checking if Color.Red is of type Color using the 'is' operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/enum.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Color.Red is Color;\n{true}\n```\n\n----------------------------------------\n\nTITLE: Nesting Tuples in EdgeQL\nDESCRIPTION: Example showing how to nest tuples and access elements within nested tuples. The example demonstrates creating a tuple with a nested tuple as one of its elements and then accessing an element from that nested tuple.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/tuple.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select (nested_tuple := (1, 2)).nested_tuple.0;\n{1}\n```\n\n----------------------------------------\n\nTITLE: Listing Gel Instances with Port Information\nDESCRIPTION: This command lists all Gel instances along with their associated port numbers, which is crucial for constructing the GraphQL endpoint URL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance list\n┌────────┬──────────────┬──────────┬───────────────┬─────────────┐\n│ Kind   │ Name         │ Port     │ Version       │ Status      │\n├────────┼──────────────┼──────────┼───────────────┼─────────────┤\n│ local  │ inst1        │ 10700    │ 6.x           │ running     │\n│ local  │ inst2        │ 10702    │ 6.x           │ running     │\n│ local  │ inst3        │ 10703    │ 6.x           │ running     │\n└────────┴──────────────┴──────────┴───────────────┴─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Computed Global Variables - SDL\nDESCRIPTION: Examples of defining computed global variables that are dynamically evaluated when referenced.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\nrequired global now := datetime_of_transaction();\n\nglobal current_user_id: uuid;\n\n# object-typed global\nglobal current_user := (\n  select User filter .id = global current_user_id\n);\n\n# multi global\nglobal current_user_friends := (global current_user).friends;\n```\n\n----------------------------------------\n\nTITLE: Duration Gotchas Examples in EdgeQL\nDESCRIPTION: Examples demonstrating edge cases and limitations when working with duration calculations across different size classes of time units.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select duration_get(\n  <cal::relative_duration>'1 day 36 hours', 'day');\n{1}\n\ndb> select duration_get(\n  <cal::relative_duration>'2 decades 400 months', 'decade');\n{5}\n```\n\n----------------------------------------\n\nTITLE: Module Alias Definition in EdgeQL With Clause\nDESCRIPTION: Shows how to create an alias for a module using the 'with' clause to simplify references to that module's objects and functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/with.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith http as module std::net::http\nselect http::ScheduledRequest\nfilter .method = http::Method.POST;\n```\n\n----------------------------------------\n\nTITLE: Exploring Gel database with EdgeQL queries\nDESCRIPTION: This snippet shows example EdgeQL queries to explore the empty database, including simple arithmetic, aggregation, and working with structured data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/nextjs.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 42;\n{42}\ndb> select sum({1, 2, 3});\n{6}\ndb> with cards := {\n...   (\n...     front := \"What is the highest mountain in the world?\",\n...     back := \"Mount Everest\",\n...   ),\n...   (\n...     front := \"Which ocean contains the deepest trench on Earth?\",\n...     back := \"The Pacific Ocean\",\n...   ),\n... }\n... select cards order by random() limit 1;\n{\n  (\n    front := \"What is the highest mountain in the world?\",\n    back := \"Mount Everest\",\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Conflict Handling in Insert Queries\nDESCRIPTION: Shows how to handle conflicts during insertion using unlessConflict method.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.insert(e.Movie, {\n  title: \"Spider-Man: No Way Home\",\n  release_year: 2021\n}).unlessConflict();\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Moderation Check with OpenAI API in TypeScript\nDESCRIPTION: This TypeScript function uses the OpenAI API to check if a user's query violates content policies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nasync function isQueryFlagged(query: string) {\n  const moderation = await openai.moderations.create({\n    input: query,\n  });\n\n  const [{ flagged }] = moderation.results;\n\n  return flagged;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Aliased Gel Instance\nDESCRIPTION: This snippet demonstrates how to connect to a Gel instance using a previously created alias. It uses the '-I' flag to specify the instance alias.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/aws_aurora_ecs.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel -I my_aws_instance\nGel x.x\nType \\help for help, \\quit to quit.\ngel>\n```\n\n----------------------------------------\n\nTITLE: Grouping with Custom Expression\nDESCRIPTION: Groups movies based on whether their titles start with a vowel, using a regular expression test and the using clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/group.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  M := (select Movie filter .release_year > 2015)\ngroup M {title}\nusing vowel := re_test('(?i)^[aeiou]', .title)\nby vowel;\n```\n\n----------------------------------------\n\nTITLE: Using Range Types in EdgeQL\nDESCRIPTION: Examples of using the new range types in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nselect range(1, 10);\nselect range_unpack(range(1, 10))\n```\n\n----------------------------------------\n\nTITLE: Installing PostGIS Extension using Gel CLI\nDESCRIPTION: This snippet demonstrates how to use the 'gel extension install' command to install the PostGIS extension. It shows the command syntax and the expected output, including the download progress and confirmation message.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_extension/install.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension install postgis\nFound extension package: postgis version 3.4.3+6b82d77\n00:00:03 [====================] 22.49 MiB/22.49 MiB\nExtension 'postgis' installed successfully.\n```\n\n----------------------------------------\n\nTITLE: Using all() Function to Validate Data Equality in EdgeDB\nDESCRIPTION: Concise query using the all() function to confirm that the friend_names property matches the array of friends' names for all User objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_40\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select all(array_agg(User.friends.name) = User.friend_names);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Creating Box2D from Geohash\nDESCRIPTION: Creates a PostGIS Box2D object from a geohash string. Allows specifying the precision of the geohash.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::box2dfromgeohash( \n  a0: optional std::str, \n  a1: optional std::int64 = {}, \n) -> optional ext::postgis::box2d\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in EdgeQL\nDESCRIPTION: Demonstrates the string concatenation operator (++) in EdgeQL for joining strings together.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 'some' ++ ' text';\n{'some text'}\n```\n\n----------------------------------------\n\nTITLE: Get Current Branch Example\nDESCRIPTION: Demonstrates retrieving the name of the current database branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sys.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select sys::get_current_branch();\n{'my_branch'}\n```\n\n----------------------------------------\n\nTITLE: Annotating an Index in SDL\nDESCRIPTION: Demonstrates how to add an annotation to an index. Annotations can be used to provide additional metadata or documentation for the index.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/indexes.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  name: str;\n  index on (.name) {\n    annotation description := 'Indexing all users by name.';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: JSON response format from EdgeQL HTTP endpoint\nDESCRIPTION: Structure of the JSON response from the EdgeQL HTTP endpoint, showing the data array with results and the optional error object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/http.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": \"00000000-0000-0000-0000-000000000000\",\n      \"name\": \"John\"\n    }\n  ],\n  \"error\": {\n    \"message\": \"Error message\",\n    \"type\": \"ErrorType\",\n    \"code\": 123456\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Integer in EdgeQL\nDESCRIPTION: Demonstrates converting bytes back to an int32 value using the to_int32() function with big endian byte order.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_int32(b'\\x01\\x02\\x00\\x07', Endian.Big);\n{16908295}\n```\n\n----------------------------------------\n\nTITLE: Configuring API-Based HA with Stolon and Consul in Gel Server\nDESCRIPTION: Command to start Gel server with a Stolon cluster as backend using Consul HTTP service. The DSN specifies the Consul endpoint and cluster name for high availability management.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/backend_ha.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel-server \\\n    --backend-dsn stolon+consul+http://localhost:8500/my-cluster\n```\n\n----------------------------------------\n\nTITLE: Converting duration to Seconds in EdgeQL\nDESCRIPTION: Shows how to convert a duration value to total seconds using the duration_to_seconds function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_38\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select duration_to_seconds(<duration>'1 hour');\n{3600.000000n}\n```\n\n----------------------------------------\n\nTITLE: Post-Squash Git Recommendations in EdgeDB CLI\nDESCRIPTION: Shows the CLI recommendations for committing changes and updating migration history after completing a migration squash with fixup.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nRemember to commit the `dbschema` directory including deleted files\nand `fixups` subdirectory. Recommended command:\n    git add dbschema\n\nThe normal migration process will update your migration history:\n    gel migrate\n```\n\n----------------------------------------\n\nTITLE: Counting Points in LineString in EdgeQL\nDESCRIPTION: Returns the number of points in a LineString or CircularString geometry. This function exposes the PostGIS st_numpoints function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_193\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::numpoints( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Renaming Orderable Link Property in EdgeDB\nDESCRIPTION: Renames the 'weight' property of the abstract link 'orderable' to 'sort_by'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\nalter abstract link orderable {\n  alter property weight rename to sort_by;\n};\n```\n\n----------------------------------------\n\nTITLE: Sample EdgeQL query for user retrieval\nDESCRIPTION: An example EdgeQL query to retrieve a user by ID, which will be used by the generator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/queries.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User { name, email } filter .id = <uuid>$user_id;\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS combine bounding box function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_combinebbox function, which combines two bounding boxes into a single one that encompasses both. Implemented for both 2D and 3D bounding boxes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_43\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::combinebbox( \\\n  a0: optional ext::postgis::box3d, \\\n  a1: optional ext::postgis::box3d, \\\n) -> optional ext::postgis::box3d\next::postgis::combinebbox( \\\n  a0: optional ext::postgis::box2d, \\\n  a1: optional ext::postgis::geometry, \\\n) -> optional ext::postgis::box2d\next::postgis::combinebbox( \\\n  a0: optional ext::postgis::box3d, \\\n  a1: optional ext::postgis::geometry, \\\n) -> optional ext::postgis::box3d\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in EdgeQL\nDESCRIPTION: Example of using the new \\(expr) string interpolation syntax in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select \"1 + 1 = \\(1 + 1)\"\n{'1 + 1 = 2'}\n```\n\n----------------------------------------\n\nTITLE: Creating relative_duration in EdgeQL\nDESCRIPTION: Demonstrates creating a relative_duration value using named arguments with the cal::to_relative_duration function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_39\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_relative_duration(years := 5, minutes := 1);\n{<cal::relative_duration>'P5YT1S'}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc Tangent in EdgeQL\nDESCRIPTION: Demonstrates the use of math::atan() function to calculate the arc tangent of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::atan(-1);\n{-0.7853981633974483}\ndb> select math::atan(0);\n{0}\ndb> select math::atan(1);\n{0.7853981633974483}\n```\n\n----------------------------------------\n\nTITLE: File Size Validation Using Assert\nDESCRIPTION: Shows how to use assert to validate file sizes in a union query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nfor obj in (select File)\nunion (assert(obj.size <= 128*1024, message := 'file too big'));\n\nfor obj in (select File)\nunion (assert(obj.size <= 64*1024, message := 'file too big'));\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS coordinate dimension function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_coorddim function, which returns the coordinate dimension of a geometry (2 for 2D, 3 for 3D, etc.).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_48\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::coorddim( \\\n  geometry: ext::postgis::geometry \\\n) ->  std::int16\n```\n\n----------------------------------------\n\nTITLE: Using gel instance create for Gel Cloud instance creation\nDESCRIPTION: Simplified example of using the gel instance create command to create a cloud instance with the required organization/instance naming format.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/cli.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance create <org-name>/<instance-name>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Floor Division in EdgeQL\nDESCRIPTION: Examples of floor division operator (//) which rounds division down to the nearest integer, equivalent to using regular division with math::floor(). Works with integers, floats, bigints, and decimals.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 10 // 4;\n{2}\ndb> select math::floor(10 / 4);\n{2}\ndb> select -10 // 4;\n{-3}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 3.7 // 1.1;\n{3.0}\ndb> select 3.7n // 1.1n;\n{3.0n}\ndb> select 37 // 11;\n{3}\n```\n\n----------------------------------------\n\nTITLE: Chat UI Component in TypeScript/React\nDESCRIPTION: React client component implementing chat interface with input handling, loading states, and error management.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport { useState } from \"react\";\nimport { errors } from \"./constants\";\n\nexport default function Home() {\n    const [prompt, setPrompt] = useState(\"\");\n    const [question, setQuestion] = useState(\"\");\n    const [answer, setAnswer] = useState<string>(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState<string | undefined>(undefined);\n\n    const handleSubmit = () => {};\n\n    return (\n    <main className=\"w-screen h-screen flex items-center justify-center bg-[#2e2e2e]\">\n        <form className=\"bg-[#2e2e2e] w-[540px] relative\">\n        <input\n            className={`py-5 pl-6 pr-[40px] rounded-md bg-[#1f1f1f] w-full\n            outline-[#1f1f1f] focus:outline outline-offset-2 text-[#b3b3b3]\n            mb-8 placeholder-[#4d4d4d]`}\n            placeholder=\"Ask a question...\"\n            value={prompt}\n            onChange={(e) => {\n              setPrompt(e.target.value);\n            }}\n        ></input>\n        <button\n            onClick={handleSubmit}\n            className=\"absolute top-[25px] right-4\"\n            disabled={!prompt}\n        >\n            <ReturnIcon\n            className={`${!prompt ? \"fill-[#4d4d4d]\" : \"fill-[#1b9873]\"}}`}\n            />\n        </button>\n        <div className=\"h-96 px-6\">\n            {question && (\n            <p className=\"text-[#b3b3b3] pb-4 mb-8 border-b border-[#525252] \">\n                {question}\n            </p>\n            )}\n            {(isLoading && <LoadingDots />) ||\n            (error && <p className=\"text-[#b3b3b3]\">{error}</p>) ||\n            (answer && <p className=\"text-[#b3b3b3]\">{answer}</p>)}\n        </div>\n        </form>\n    </main>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in EdgeDB SDL\nDESCRIPTION: Example of defining a global variable in EdgeDB schema definition language.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\nglobal current_user -> uuid;\n```\n\n----------------------------------------\n\nTITLE: Aggregating Profiling Data using EdgeDB CLI\nDESCRIPTION: This command-line snippet shows how to use the 'edb perfviz' command to aggregate profiling data. It generates various output files including aggregated .prof files, pstats text output, and SVG flame graphs for visualization.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/tools/profiling/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ edb perfviz\n```\n\n----------------------------------------\n\nTITLE: Data Migration Script to Update Character Classes in EdgeDB\nDESCRIPTION: EdgeQL differential showing how to update the class property values for all characters using conditional logic.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql-diff\nCODE:\n```\n  CREATE MIGRATION m1qv2pdksjxxzlnujfed4b6to2ppuodj3xqax4p3r75yfef7kd7jna\n      ONTO m1ljrgrofsqkvo5hsxc62mnztdhlerxp6ucdto262se6dinhuj4mqq\n  {\n+     update default::Character\n+     set {\n+         class :=\n+             'warrior' if .class = 'Tall and strong' else\n+             'scholar' if .class = 'Smart and aloof' else\n+             'rogue'\n+     };\n  };\n```\n\n----------------------------------------\n\nTITLE: Unpacking Range Values in EdgeQL\nDESCRIPTION: Shows how to use the range_unpack() function to return values from a range, with optional step parameter for non-discrete ranges.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range_unpack(range(1, 10));\n{1, 2, 3, 4, 5, 6, 7, 8, 9}\ndb> select range_unpack(range(\n...   <cal::local_date>'2022-07-01',\n...   <cal::local_date>'2022-07-10'));\n{\n  <cal::local_date>'2022-07-01',\n  <cal::local_date>'2022-07-02',\n  <cal::local_date>'2022-07-03',\n  <cal::local_date>'2022-07-04',\n  <cal::local_date>'2022-07-05',\n  <cal::local_date>'2022-07-06',\n  <cal::local_date>'2022-07-07',\n  <cal::local_date>'2022-07-08',\n  <cal::local_date>'2022-07-09',\n}\n\ndb> select range_unpack(range(1.5, 7.5), 0.7);\n{1.5, 2.2, 2.9, 3.6, 4.3, 5, 5.7, 6.4}\ndb> select range_unpack(\n...   range(\n...     <cal::local_datetime>'2022-07-01T00:00:00',\n...     <cal::local_datetime>'2022-12-01T00:00:00'\n...   ),\n...   <cal::relative_duration>'25 days 5 hours');\n{\n  <cal::local_datetime>'2022-07-01T00:00:00',\n  <cal::local_datetime>'2022-07-26T05:00:00',\n  <cal::local_datetime>'2022-08-20T10:00:00',\n  <cal::local_datetime>'2022-09-14T15:00:00',\n  <cal::local_datetime>'2022-10-09T20:00:00',\n  <cal::local_datetime>'2022-11-04T01:00:00',\n}\n```\n\n----------------------------------------\n\nTITLE: Using min() Aggregate Function in EdgeQL\nDESCRIPTION: Demonstrates the min() function which returns the smallest value in the given set.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_25\n\nLANGUAGE: edgeql\nCODE:\n```\nselect min({-1, 100});\n```\n\n----------------------------------------\n\nTITLE: Computing Range and Multirange Union with Addition Operator in EdgeQL\nDESCRIPTION: Demonstrates the union operation on ranges and multiranges using the + operator. For ranges, the result must be a continuous range without gaps, while multiranges can represent discontinuous results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select range(1, 10) + range(5, 15);\n{range(1, 15)}\ndb> select range(1, 10) + range(5);\n{range(1, {})}\n\ndb> select range(1, 3) + multirange([\n...   range(7, 10), range(20),\n... ]);\n{[range(1, 3), range(7, 10), range(20, {})]}\ndb> select multirange([range(2, 4), range(5, 8)]) +\n...   multirange([range(6, 10), range(20)]);\n{[range(2, 4), range(5, 10), range(20, {})]}\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation for Global Variable in EdgeQL\nDESCRIPTION: Example of setting the 'description' annotation for the global variable 'current_user' in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nalter global current_user\n    create annotation description :=\n        'Current User as specified by the global ID';\n```\n\n----------------------------------------\n\nTITLE: Enabling Vectorstore Extension in SDL\nDESCRIPTION: SDL code to enable the vectorstore extension in the data model using the extension mechanism.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/extvectorstore.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension vectorstore;\n```\n\n----------------------------------------\n\nTITLE: Defining std::anyreal Abstract Numeric Type in EdgeDB\nDESCRIPTION: Defines the 'std::anyreal' abstract type, which serves as the base type for anyint, anyfloat, and decimal types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_7\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anyreal\n```\n\n----------------------------------------\n\nTITLE: Defining Byte Literals in EdgeQL\nDESCRIPTION: Examples of defining byte literals and raw byte strings in EdgeQL. Demonstrates regular and raw byte string syntax.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nselect b'bina\\x01ry';\nselect rb'hello\\nthere';\nselect br'\\';\n```\n\n----------------------------------------\n\nTITLE: Testing RAG Endpoint with cURL (Bash)\nDESCRIPTION: This snippet shows how to test the '/fetch_rag' endpoint using cURL. It sends a GET request with a query parameter to retrieve RAG-based responses for a specific question about cheese.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/fastapi.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X 'GET' \\\n  'http://localhost:8000/fetch_rag?query=what%20cheese%20smells%20like%20feet' \\\n  -H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Setting Superuser Password for Gel Instance\nDESCRIPTION: Changes the password for the admin role in the Gel instance using gel query command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ echo -n \"> \" && read -s PASSWORD\n\n$ gel -H $IP --tls-security insecure query \\\n         \"alter role admin set password := '$PASSWORD'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Point from WKT in EdgeQL\nDESCRIPTION: Creates a Point geometry from WKT (Well-Known Text) representation with an optional SRID parameter. This function exposes the PostGIS st_pointfromtext function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_204\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointfromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::pointfromtext( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using 'unless conflict on' with Multiple Properties in EdgeQL\nDESCRIPTION: Demonstrates how to handle conflicts during an insert operation by performing an alternative query when a constraint violation occurs. This example shows inserting a Person and selecting the existing Person if one with the same name already exists.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b2.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Person { name := \"Alice\" }\nunless conflict on .name  # If a Person with this name exists,\nelse (select Person)      # select that existing Person instead.\n```\n\n----------------------------------------\n\nTITLE: Defining std::anyfloat Abstract Numeric Type in EdgeDB\nDESCRIPTION: Defines the 'std::anyfloat' abstract type, which serves as the base type for floating-point types float32 and float64.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_6\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anyfloat\n```\n\n----------------------------------------\n\nTITLE: Boolean Literal Examples in EdgeQL\nDESCRIPTION: Demonstrates case-insensitive boolean literal usage in EdgeQL with different capitalizations producing the same values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select (True, true, TRUE);\n{(true, true, true)}\ndb> select (False, false, FALSE);\n{(false, false, false)}\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Gel Feature Branch\nDESCRIPTION: Command to rebase a Gel feature branch on top of the main branch. This ensures schema changes can be cleanly merged back to main.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/branches.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git rebase main\n```\n\n----------------------------------------\n\nTITLE: String Conversion Example - EdgeQL\nDESCRIPTION: Shows to_str function converting various types to string representation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_24\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select to_str(<datetime>'2018-05-07 15:01:22.306916-05',\n...               'FMDDth \"of\" FMMonth, YYYY');\n{'7th of May, 2018'}\ndb> select to_str(<cal::local_date>'2018-05-07', 'CCth \"century\"');\n{'21st century'}\ndb> select to_str(123, '999999');\n{'    123'}\ndb> select to_str(123, '099999');\n{' 000123'}\ndb> select to_str(123.45, 'S999.999');\n{'+123.450'}\ndb> select to_str(123.45e-20, '9.99EEEE');\n{' 1.23e-18'}\ndb> select to_str(-123.45n, 'S999.99');\n{'-123.45'}\n```\n\n----------------------------------------\n\nTITLE: Using the similarity_dist Function in ext::pg_trgm\nDESCRIPTION: Examples of using the similarity_dist function to compute the distance between two strings. The distance is defined as 1 minus the similarity value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::similarity_dist('cat', 'dog');\n{1}\ndb> select ext::pg_trgm::similarity_dist('cat', 'cart');\n{0.71428573}\ndb> select ext::pg_trgm::similarity_dist('cat', 'car');\n{0.6666666}\ndb> select ext::pg_trgm::similarity_dist('cat', 'cat');\n{0}\n```\n\n----------------------------------------\n\nTITLE: Creating Function Returning Set of Tuples in EdgeQL\nDESCRIPTION: Demonstrates creating a function 'enumerate_letters' that returns a set of tuples containing integer and string pairs.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a7.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> create function enumerate_letters(word: str)\n...     -> set of tuple<int64, str>\n...     using (\n...         enumerate(\n...             array_unpack(\n...                 str_split(word, '')))\n...     );\nOK: CREATE\ndb> select enumerate_letters('hello');\n{(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o')}\n```\n\n----------------------------------------\n\nTITLE: Resetting Module and Alias in EdgeQL\nDESCRIPTION: Demonstrates setting and resetting the default module and an alias in an EdgeQL session. It shows how to set the default module to 'foo', use it, reset it, and then how to set and reset an alias for the 'std' module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/sess_reset_alias.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\n# Set the default module to \"foo\" for the current session.\nset module foo;\n\n# This query is now equivalent to \"select foo::FooType\".\nselect FooType;\n\n# Reset the default module for the current session.\nreset module;\n\n# This query will now produce an error.\nselect FooType;\n\n# Alias the \"std\" module as \"foo\".\nset alias foo as module std;\n\n# Now \"std::min()\" can be called as \"foo::min()\" in\n# the current session.\nselect foo::min({1});\n\n# Reset the alias.\nreset alias foo;\n\n# Now this query will error out, as there is no\n# module \"foo\".\nselect foo::min({1});\n```\n\n----------------------------------------\n\nTITLE: Logging into Gel Cloud via CLI\nDESCRIPTION: Command to authenticate with Gel Cloud through GitHub login in browser\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel cloud login\n```\n\n----------------------------------------\n\nTITLE: Checking Range and Multirange Adjacency in EdgeQL\nDESCRIPTION: Demonstrates the use of adjacent() function to check if ranges or multiranges share a boundary without overlapping.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_21\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select adjacent(range(1, 3), range(3, 4));\n{true}\ndb> select adjacent(range(1.0, 3.0), range(3.0, 4.0));\n{true}\ndb> select adjacent(\n...   range(1.0, 3.0, inc_upper := true), range(3.0, 4.0));\n{false}\n\ndb> select adjacent(\n...   multirange([\n...     range(2, 4), range(5, 7),\n...   ]),\n...   multirange([\n...     range(7, 10), range(20),\n...   ]),\n... );\n{true}\n\ndb> select adjacent(\n...   range(7),\n...   multirange([\n...     range(1, 2), range(3, 7),\n...   ]),\n... );\n{true}\n```\n\n----------------------------------------\n\nTITLE: Finding Point on Surface in EdgeQL\nDESCRIPTION: Returns a point guaranteed to be on the surface of a geometry. This function signature for the PostGIS st_pointonsurface function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_209\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointonsurface( \\\n```\n\n----------------------------------------\n\nTITLE: Accessing Gel Instance Help\nDESCRIPTION: Display help documentation for the gel instance command and its subcommands.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/instances.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance --help\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment\nDESCRIPTION: Commands for creating development directory and cloning the Gel repository with its submodules\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/code.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/dev\n$ cd ~/dev\n$ git clone --recursive https://github.com/geldata/gel.git\n```\n\n----------------------------------------\n\nTITLE: Geometric Shape Generation and Properties\nDESCRIPTION: Functions that generate geometric shapes and extract properties from existing geometries, including square generation, SRID retrieval, and extracting start points from linear geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_237\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::square( \\\n  size: std::float64, \\\n  cell_i: std::int64, \\\n  cell_j: std::int64, \\\n  origin: ext::postgis::geometry = 'POINT(0 0)', \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::srid( \\\n  geom: ext::postgis::geometry \\\n) ->  std::int64\next::postgis::srid( \\\n  geog: ext::postgis::geography \\\n) ->  std::int64\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::startpoint( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Subtracting Datetime and Duration Values in EdgeQL\nDESCRIPTION: Demonstrates subtraction operations between compatible datetime and duration values, including examples with local dates and handling of exceptions for incompatible types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <datetime>'2019-01-01T01:02:03+00' -\n  <duration>'24 hours';\n{<datetime>'2018-12-31T01:02:03Z'}\ndb> select <datetime>'2019-01-01T01:02:03+00' -\n  <datetime>'2019-02-01T01:02:03+00';\n{-2678400s}\ndb> select <duration>'1 hour' -\n  <duration>'2 hours';\n{-3600s}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <cal::local_date>'2022-06-25' -\n  <cal::local_date>'2019-02-01';\n{<cal::date_duration>'P1240D'}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <duration>'1 day' -\n  <datetime>'2019-01-01T01:02:03+00';\nQueryError: operator '-' cannot be applied to operands ...\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <datetime>'2019-01-01T01:02:03+00' -\n  <cal::local_datetime>'2019-02-01T01:02:03';\nQueryError: operator '-' cannot be applied to operands...\ndb> select <cal::local_datetime>'2019-02-01T01:02:03' -\n  <datetime>'2019-01-01T01:02:03+00';\nQueryError: operator '-' cannot be applied to operands...\n```\n\n----------------------------------------\n\nTITLE: Bitwise Left Shift Operation in EdgeQL\nDESCRIPTION: Examples of bit_lshift() function, which shifts an integer by a specified number of bits to the left. Shows behavior with different shift amounts and sign changes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_lshift(123, 2);\n{492}\ndb> select bit_lshift(123, 65);\n{0}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_lshift(123, 60);\n{-5764607523034234880}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_lshift(bit_lshift(123, 1), 3);\n{1968}\ndb> select bit_lshift(123, 4);\n{1968}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_lshift(123, -2);\ngel error: InvalidValueError: bit_lshift(): cannot shift by\nnegative amount\n```\n\n----------------------------------------\n\nTITLE: Ineffective Filtering with Aggregate Function in EdgeQL\nDESCRIPTION: This example illustrates how the filter clause cannot affect aggregate functions in the preceding select clause. The filter is applied after the count, which may not produce the expected result.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/select.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nselect count(User)\nfilter User.name like 'Alice%';\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Parameter via CLI\nDESCRIPTION: Shows how to set the 'listen_addresses' configuration parameter using the Gel CLI command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/configuration.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel configure set listen_addresses 127.0.0.1 ::1\n```\n\n----------------------------------------\n\nTITLE: Encoding cal::date_duration in EdgeDB Protocol\nDESCRIPTION: Binary encoding example for cal::date_duration value '1 years 2 days'. The data is encoded as a reserved field (always zero), days, and months values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n// reserved\n0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\n\n// days\n0x00 0x00 0x00 0x02\n\n// months\n0x00 0x00 0x00 0x0c\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Collection from WKB\nDESCRIPTION: Function that creates a collection geometry from Well-Known Binary (WKB) representation, with an optional SRID parameter. Maps to the PostGIS st_geomcollfromwkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_94\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomcollfromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::geomcollfromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Strings in EdgeQL\nDESCRIPTION: Shows how to parse JSON strings into JSON values using the to_json() function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/json.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect to_json('[1, \"hello\", null]');\nselect to_json('{\"hello\": \"world\"}');\n```\n\n----------------------------------------\n\nTITLE: Handling Cross-Product Behavior in EdgeQL\nDESCRIPTION: Demonstrates how cross-products are computed in 'sibling' contexts and how to use FOR to make intentions explicit.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/path_resolution.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User.first_name ++ ' ' ++ User.last_name;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nfor u in User\nselect u.first_name ++ ' ' ++ u.last_name;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User { name := .first_name ++ ' ' ++ .last_name }\n```\n\n----------------------------------------\n\nTITLE: Creating Point with M Value in EdgeQL\nDESCRIPTION: Creates a Point geometry with X, Y, and M coordinates and an optional SRID parameter. This function exposes the PostGIS st_pointm function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_207\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointm( \\\n                    xcoordinate: std::float64, \\\n                    ycoordinate: std::float64, \\\n                    mcoordinate: std::float64, \\\n                    srid: std::int64 = 0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Bitwise NOT Operation in EdgeQL\nDESCRIPTION: Examples of bit_not() function for bitwise negation of integers. Demonstrates the relationship between bitwise negation and mathematical negation in two's complement representation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_not(17);\n{-18}\ndb> select -17 = bit_not(17) + 1;\n{true}\n```\n\n----------------------------------------\n\nTITLE: Adding Computed Backlink to Schema Definition Language\nDESCRIPTION: Shows how to add a computed backlink directly into the schema for reusability.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_16\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Person {\n  required name: str {\n    constraint exclusive;\n  };\n  multi movies := .<characters[is Movie]\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_3dmakebox Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_3dmakebox function in EdgeDB. It takes two geometry inputs and returns a 3D bounding box.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_157\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::makebox3d( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  ext::postgis::box3d\n```\n\n----------------------------------------\n\nTITLE: Empty EdgeDB Migration Structure\nDESCRIPTION: Shows the basic structure of an empty migration file in EdgeDB, with a migration ID and reference to the previous migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nCREATE MIGRATION m1xseswmheqzxutr55cu66ko4oracannpddujg7gkna2zsjpqm2g3a\n    ONTO m1n5lfw7n74626cverbjwdhcafnhmbezjhwec2rbt46gh3ztoo7mqa\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS coverage union function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_coverageunion function, which computes the union of a set of polygons forming a coverage by removing shared edges. More efficient than regular union for properly fitting polygons.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_49\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::coverageunion( \\\n  a0: array<ext::postgis::geometry> \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from Datetime Values in EdgeQL\nDESCRIPTION: The datetime_get function extracts specific elements from datetime or local_datetime values, such as year, month, day, or epoch seconds.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select datetime_get(\n    <datetime>'2018-05-07T15:01:22.306916+00',\n    'epochseconds');\n{1525705282.306916}\n\ndb> select datetime_get(\n    <datetime>'2018-05-07T15:01:22.306916+00',\n    'year');\n{2018}\n\ndb> select datetime_get(\n    <datetime>'2018-05-07T15:01:22.306916+00',\n    'quarter');\n{2}\n\ndb> select datetime_get(\n    <datetime>'2018-05-07T15:01:22.306916+00',\n    'doy');\n{127}\n\ndb> select datetime_get(\n    <datetime>'2018-05-07T15:01:22.306916+00',\n    'hour');\n{15}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bytes Literals in EdgeQL\nDESCRIPTION: Examples of creating bytes literals using the b'' syntax in EdgeQL, including ASCII and hexadecimal representations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bytes.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select b'Hello, world';\n{b'Hello, world'}\ndb> select b'Hello,\\x20world\\x01';\n{b'Hello, world\\x01'}\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS angle Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_angle function in EdgeQL. Takes two or four geometry points as input, returns a float64 angle value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_4\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::angle( \\\n                    line1: ext::postgis::geometry, \\\n                    line2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n                  ext::postgis::angle( \\\n                    pt1: ext::postgis::geometry, \\\n                    pt2: ext::postgis::geometry, \\\n                    pt3: ext::postgis::geometry, \\\n                    pt4: ext::postgis::geometry = <ext::postgis::geometry>'POINT EMPTY', \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Running Generators with npm\nDESCRIPTION: Command to run a generator using npm's npx command with a specific generator name and options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate <generator> [options]\n```\n\n----------------------------------------\n\nTITLE: Creating a Gel Instance with a Specific Version\nDESCRIPTION: Example commands showing how to create a Gel instance with a specific major or exact version. The first example installs the latest release in the specified major version, while the second pins to an exact version.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_create.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance create --version X.0 demoxy\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance create --version =X.Y demoxy\n```\n\n----------------------------------------\n\nTITLE: Creating local_datetime Values in EdgeQL\nDESCRIPTION: Demonstrates how to create local datetime values (without timezone) using casting in EdgeQL. The datetime strings must follow ISO 8601 format without timezone.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <cal::local_datetime>'2018-05-07T15:01:22.306916';\nselect <cal::local_datetime>'2018-05-07T15:01:22';\n```\n\n----------------------------------------\n\nTITLE: Describing a Scalar Type in EdgeDB REPL\nDESCRIPTION: Shows how to use the \\d command to describe a scalar type (decimal) in the EdgeDB REPL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/repl.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> \\d object decimal\nscalar type std::decimal extending std::anynumeric;\n```\n\n----------------------------------------\n\nTITLE: Migration Prompt for Required Link Population in EdgeDB\nDESCRIPTION: Interactive migration prompt asking for an expression to populate existing objects when making a link required.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\ndid you create object type 'default::CharacterClass'? [y,n,l,c,b,s,q,?]\n> y\ndid you create link 'class' of object type 'default::Character'?\n[y,n,l,c,b,s,q,?]\n> y\nPlease specify an expression to populate existing objects in order to make\nlink 'class' of object type 'default::Character' required:\nfill_expr>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Exists Filter Operation\nDESCRIPTION: Demonstrates the new exists filter operation in GraphQL for finding records with missing data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a5.rst#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  Movie(\n    filter: {director: {exists: false}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rounding Up Numbers in EdgeQL\nDESCRIPTION: Shows how to use math::ceil() function to round up a given value to the nearest integer.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::ceil(1.1);\n{2}\ndb> select math::ceil(-1.1);\n{-1}\n```\n\n----------------------------------------\n\nTITLE: Defining Tuple Properties in SDL\nDESCRIPTION: Examples of tuple property definitions in SDL, including unnamed tuples, nested tuples, and tuples of arrays.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  unnamed_tuple: tuple<str, bool, int64>;\n  nested_tuple: tuple<tuple<str, tuple<bool, int64>>>;\n  tuple_of_arrays: tuple<array<str>, array<int64>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Unaccent Function Usage in EdgeQL\nDESCRIPTION: Demonstrates basic usage of the unaccent function to remove diacritics from text strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_unaccent.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_unaccent::unaccent('Hôtel de la Mer');\n{'Hotel de la Mer'}\n```\n\n----------------------------------------\n\nTITLE: Setting Listen Addresses in EdgeQL\nDESCRIPTION: Configures the instance-level listen_addresses parameter to accept connections on localhost IPv4 and IPv6 interfaces.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/configure.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure instance set listen_addresses := {'127.0.0.1', '::1'};\n```\n\n----------------------------------------\n\nTITLE: Querying Users from EdgeDB\nDESCRIPTION: This EdgeQL query selects all users from the database, returning their names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ gel query \"select User { name };\"\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS distance fully within function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_dfullywithin function, which tests if two geometries are entirely within a given distance of each other. This is different from st_dwithin as it requires all points to be within the distance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_57\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::dfullywithin( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n  a2: std::float64, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Module Selection in EdgeQL With Clause\nDESCRIPTION: Demonstrates changing the active module for a query using the 'with module' clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/with.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType;\n```\n\n----------------------------------------\n\nTITLE: Coordinate System Transformation Functions\nDESCRIPTION: Functions for transforming geometries between different spatial reference systems. These include transformations by SRID numbers, projection strings, and custom transformation pipelines.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_242\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::transform( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::int64, \\\n) ->  ext::postgis::geometry\next::postgis::transform( \\\n  geom: ext::postgis::geometry, \\\n  to_proj: std::str, \\\n) ->  ext::postgis::geometry\next::postgis::transform( \\\n  geom: ext::postgis::geometry, \\\n  from_proj: std::str, \\\n  to_proj: std::str, \\\n) ->  ext::postgis::geometry\next::postgis::transform( \\\n  geom: ext::postgis::geometry, \\\n  from_proj: std::str, \\\n  to_srid: std::int64, \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::transformpipeline( \\\n  geom: ext::postgis::geometry, \\\n  pipeline: std::str, \\\n  to_srid: std::int64 = 0, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_Intersection Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_Intersection function which returns the geometric intersection of two geometries. It supports multiple type signatures including string geometries, geometry objects, and geography objects with an optional gridsize parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_118\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::intersection( \\\n                    a0: std::str, \\\n                    a1: std::str, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::intersection( \\\n                    a0: ext::postgis::geography, \\\n                    a1: ext::postgis::geography, \\\n                  ) ->  ext::postgis::geography\n                  ext::postgis::intersection( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                    gridsize: std::float64 = -1, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Filtering Geometry by M in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_filterbym function to filter vertices of a geometry based on their M values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_74\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::filterbym( \\\n                    a0: optional ext::postgis::geometry, \\\n                    a1: optional std::float64, \\\n                    a2: optional std::float64 = {}, \\\n                    a3: optional std::bool = false, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using __default__ Keyword in EdgeQL Insert\nDESCRIPTION: Example of using the new __default__ keyword to refer to a property's default value in an insert statement.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_11\n\nLANGUAGE: sdl\nCODE:\n```\ntype Item {\n    name: str { default := 'New item' }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> insert Item {name := __default__ ++ ' #1'};\n{default::Item {id: ebcfff62-eb91-11ef-a6b9-5ffb2f0b2940}}\ndb> select Item{name};\n{default::Item {name: 'New item #1'}}\n```\n\n----------------------------------------\n\nTITLE: Bitwise XOR Operation in EdgeQL\nDESCRIPTION: Example of bit_xor() function, which performs a bitwise exclusive OR operation on two integers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_xor(17, 3);\n{18}\n```\n\n----------------------------------------\n\nTITLE: Defining Exact Duration in EdgeQL\nDESCRIPTION: Examples of defining exact durations using the duration type in EdgeQL. Supports units from microseconds to hours.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <duration>'45.6 seconds';\nselect <duration>'-15 microseconds';\nselect <duration>'5 hours 4 minutes 3 seconds';\nselect <duration>'8760 hours'; # about a year\n```\n\n----------------------------------------\n\nTITLE: Migration Application Output During Instance Initialization\nDESCRIPTION: Shows the console output when initializing an EdgeDB instance with multiple migrations, displaying each migration ID as it's applied.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nInitializing Gel instance...\nApplying migrations...\nApplied m13brvdizqpva6icpcvmsc3fee2yt5j267uba6jugy6iugcbs2djkq\n(00001.edgeql)\nApplied m1aildofb3gvhv3jaa5vjlre4pe26locxevqok4semmlgqwu3xayaa\n(00002.edgeql)\nApplied m1ixxlsdgrlinfijnrbmxdicmpfav33snidudqi7fu4yfhg4nngoza\n(00003.edgeql)\nApplied m1tsi4amrdbcfjypu72duyckrlvvyb46r3wybd7qnbmem4rjvnbcla\n(00004.edgeql)\n...and so on...\nProject initialized.\n```\n\n----------------------------------------\n\nTITLE: Using sequence_reset with introspect\nDESCRIPTION: Examples of using sequence_reset to reset a sequence to initial state or a specific value, showing both single-parameter and two-parameter forms.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sequence.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select sequence_reset(introspect MySequence);\n{1}\ndb> select sequence_next(introspect MySequence);\n{1}\ndb> select sequence_reset(introspect MySequence, 22);\n{22}\ndb> select sequence_next(introspect MySequence);\n{23}\n```\n\n----------------------------------------\n\nTITLE: Calculating Arithmetic Mean in EdgeQL\nDESCRIPTION: Demonstrates the use of math::mean() function to calculate the arithmetic mean of a set of numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::mean({1, 3, 5});\n{3}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_makebox2d Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_makebox2d function in EdgeDB. It takes two geometry inputs and returns a 2D bounding box.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_156\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::makebox2d( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  ext::postgis::box2d\n```\n\n----------------------------------------\n\nTITLE: Querying Inherited Properties in EdgeQL\nDESCRIPTION: Demonstrates how to query properties from both base and derived types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person {\n  first_name,\n  email,\n  best_friend: {\n    last_name\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Filter Conditions in EdgeDB TypeScript\nDESCRIPTION: Shows how to delete Movie objects from the database using a filter condition with the 'ilike' operator to match title patterns.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.delete(e.Movie, (movie) => ({\n  filter: e.op(movie.title, 'ilike', \"the avengers%\"),\n}));\n\nconst result = await query.run(client);\n// { id: string }[]\n```\n\n----------------------------------------\n\nTITLE: Exposing st_locatealong Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_locatealong function in EdgeDB. It takes a geometry input, a measure value, and an optional offset, returning a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_150\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::locatealong( \\\n                    geometry: ext::postgis::geometry, \\\n                    measure: std::float64, \\\n                    leftrightoffset: std::float64 = 0.0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Portable Shapes with Type Inference in EdgeQL TypeScript\nDESCRIPTION: Demonstrates creating reusable shapes with type inference using e.shape and $infer.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseShape = e.shape(e.Movie, (movie) => ({\n  title: true,\n  num_actors: e.count(movie.actors),\n}));\n\ntype MovieShape = $infer<typeof baseShape>;\ntype MovieShapeSingle = MovieShape[number];\n\nconst query = e.select(e.Movie, (movie) => ({\n  ...baseShape(movie),\n  release_year: true,\n  filter_single: {title: 'The Avengers'}\n}))\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operations in EdgeQL\nDESCRIPTION: Examples of basic arithmetic operations including addition, subtraction, and multiplication.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 2 + 2;\n{4}\n\ndb> select 3 - 2;\n{1}\n\ndb> select -5;\n{-5}\n\ndb> select 2 * 10;\n{20}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Ranges in EdgeQL\nDESCRIPTION: Different methods of constructing empty ranges with equivalent boundaries or explicit empty declaration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range(1, 1);\n{range({}, inc_lower := false, empty := true)}\ndb> select range(<int64>{}, empty := true);\n{range({}, inc_lower := false, empty := true)}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Specific Branch\nDESCRIPTION: Launches Gel REPL connected to a specific feature branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/cli.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel -b feature\nGel 6.0-rc.1+673117d (repl 6.2.0-dev)\nType \\help for help, \\quit to quit.\nspecial_db>\n```\n\n----------------------------------------\n\nTITLE: Documenting EdgeQL Operators\nDESCRIPTION: Shows how to document an operator using the eql:operator directive with operand types and result type specifications.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_12\n\nLANGUAGE: rst\nCODE:\n```\n.. eql:operator:: PLUS: A + B\n\n    :optype A: int64 or str or bytes\n    :optype B: any\n    :resulttype: any\n\n    Arithmetic addition.\n```\n\n----------------------------------------\n\nTITLE: Exposing st_makepolygon Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_makepolygon function in EdgeDB. It has two overloads, one taking a single geometry and another taking a geometry and an array of geometries, both returning a polygon geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_162\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::makepolygon( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::makepolygon( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: array<ext::postgis::geometry>, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Date/Time Arithmetic with Durations in EdgeQL\nDESCRIPTION: Demonstrates arithmetic operations between date/time types and durations in EdgeQL. Shows addition and subtraction examples.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <datetime>'2019-01-01T00:00:00Z' - <duration>'24 hours';\n{<datetime>'2018-12-31T00:00:00+00:00'}\ndb> select <cal::local_time>'22:00' + <duration>'1 hour';\n{<cal::local_time>'23:00:00'}\n```\n\n----------------------------------------\n\nTITLE: Ordering Scalar Sets in EdgeQL\nDESCRIPTION: Shows how to order a set of scalar values using variable assignment.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nselect numbers := {3, 1, 2} order by numbers;\n\n# alternatively\nwith numbers := {3, 1, 2}\nselect numbers order by numbers;\n```\n\n----------------------------------------\n\nTITLE: Selecting Scalar Expressions in Gel TypeScript\nDESCRIPTION: Demonstrates how to use e.select with scalar expressions, noting that it's often unnecessary since expressions are runnable directly without being wrapped by e.select.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.str('Hello world'));\n// select 1234;\n\ne.select(e.op(e.int64(2), '+', e.int64(2)));\n// select 2 + 2;\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Instance Password Reset Command\nDESCRIPTION: This command resets or updates the password for a user in a Gel instance. It requires the instance name and offers various options for specifying the user, inputting the password, and managing credentials.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_reset_password.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel instance reset-password [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Structure Definition for std::duration in EdgeDB Protocol\nDESCRIPTION: C structure definition for std::duration values. The structure includes microseconds, days (deprecated), and months (deprecated) fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstruct Duration {\n    int64   microseconds;\n\n    // deprecated, is always 0\n    int32   days;\n\n    // deprecated, is always 0\n    int32   months;\n};\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking PR Helper Function\nDESCRIPTION: Shell function to cherry-pick a commit using its PR number. Only works for PRs that are squashed into a single commit.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/release-process.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfunction cp-pr {\n    git cherry-pick $(gh pr view $1 --json mergeCommit --jq .mergeCommit.oid)\n}\n```\n\n----------------------------------------\n\nTITLE: Numeric Literals in EdgeQL\nDESCRIPTION: Examples of declaring various numeric literals in EdgeQL, including integers, floating-point numbers, and arbitrary precision numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect 3;\nselect 3.14;\nselect 314e-2;\nselect 42n;\nselect 42.0n;\nselect 42e+100n;\nselect <int16>1234;\nselect <int32>123456;\nselect <float32>123.456;\nselect 5 > 2;\nselect 2 + 2;\nselect 2 ^ 10;\nselect (1 + 1) * 2 / (3 + 8);\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Greater Than or Equal Examples\nDESCRIPTION: Demonstrates the greater than or equal operator (>=) for comparing values. Shows examples with numbers, strings, tuples and empty set handling.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 1 >= 2;\n{false}\ndb> select 2 >= 2;\n{true}\ndb> select 3 >= 2;\n{true}\ndb> select 'hello' >= 'world';\n{false}\ndb> select (1, 'hello') >= (1, 'world');\n{false}\n```\n\n----------------------------------------\n\nTITLE: Examples of Reset Commands in EdgeQL\nDESCRIPTION: Provides examples of various reset commands in EdgeQL, including resetting the module, specific aliases, all aliases, and a global variable.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/sess_reset_alias.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nreset module;\n\nreset alias foo;\n\nreset alias *;\n\nreset global current_user_id;\n```\n\n----------------------------------------\n\nTITLE: Dropping Future Behavior with EdgeQL in Gel Database\nDESCRIPTION: Example of how to drop (disable) a future behavior flag using EdgeQL DDL command. This snippet shows disabling the 'warn_old_scoping' future behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/future.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop future warn_old_scoping;\n```\n\n----------------------------------------\n\nTITLE: Generating Gel Query Builder\nDESCRIPTION: Runs the Gel query builder generator to create typed EdgeQL queries for TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate edgeql-js\n```\n\n----------------------------------------\n\nTITLE: Counting Curves in Geometry in EdgeQL\nDESCRIPTION: Returns the number of curves in a geometry. This function exposes the PostGIS st_numcurves function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_188\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::numcurves( \\\n                    geometry: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Go Client\nDESCRIPTION: Example of setting global variables in the EdgeDB Go client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n\n  \"github.com/edgedb/edgedb-go\"\n)\n\nfunc main() {\n  ctx := context.Background()\n  client, err := edgedb.CreateClient(ctx, edgedb.Options{})\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer client.Close()\n\n  id, err := edgedb.ParseUUID(\"2141a5b4-5634-4ccc-b835-437863534c51\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  var result edgedb.UUID\n  err = client.\n    WithGlobals(map[string]interface{}{\"current_user\": id}).\n    QuerySingle(ctx, \"SELECT global current_user;\", &result)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Points in Geometry in EdgeQL\nDESCRIPTION: Returns the number of points in a geometry. This function exposes the PostGIS st_npoints function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_186\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::npoints( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Creating date_duration in EdgeQL\nDESCRIPTION: Shows how to create a date_duration value using named arguments with the cal::to_date_duration function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_40\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_date_duration(years := 1, days := 3);\n{<cal::date_duration>'P1Y3D'}\n```\n\n----------------------------------------\n\nTITLE: Creating local_datetime with Custom Format in EdgeQL\nDESCRIPTION: Shows how to create a local_datetime value using a custom format string with the cal::to_local_datetime function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_26\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_datetime('May 7th, 2018 15:01:22',\n                         'Mon DDth, YYYY HH24:MI:SS');\n{<cal::local_datetime>'2018-05-07T15:01:22'}\n```\n\n----------------------------------------\n\nTITLE: Creating Envelope of Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_envelope function to create an envelope (bounding box) of a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_70\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::envelope( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Running Gel Cloud Migrations\nDESCRIPTION: Command to execute database migrations on a Gel Cloud instance\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migrate \\\n    -I <org-name>/<instance-name>\n```\n\n----------------------------------------\n\nTITLE: Updating Project Configuration from EdgeDB to Gel\nDESCRIPTION: Shows the changes required in the project configuration file when upgrading from EdgeDB to Gel. The file name changes from 'edgedb.toml' to 'gel.toml', and the TOML table name changes from '[edgedb]' to '[instance]'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[edgedb]\nserver-version = \"5.7\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[instance]\nserver-version = \"5.7\"\n```\n\n----------------------------------------\n\nTITLE: DSN Override with CLI Parameters - Bash\nDESCRIPTION: Shows how to override DSN password using CLI parameters when connecting to a Gel instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --dsn gel://username:oldpass@hostname.com --password qwerty\n# connects to gel://username:qwerty@hostname.com\n```\n\n----------------------------------------\n\nTITLE: Dropping Access Policy in EdgeDB\nDESCRIPTION: Syntax for removing an existing access policy from a type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_16\n\nLANGUAGE: eql\nCODE:\n```\n[ with <with-item> [, ...] ]\nalter type <TypeName> \"{\"\n  [ ... ]\n  drop access policy <name> ;\n\"}\"\n```\n\n----------------------------------------\n\nTITLE: REPL Settings Options in EdgeDB 1.0 Alpha 3\nDESCRIPTION: Configuration options for the EdgeDB REPL that control the display and interaction behavior. These settings can be changed using the \\set command and include options for string display, property visibility, input mode, type introspection, result limits, and error verbosity.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a3.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexpand-strings             Stop escaping newlines in quoted\n                         strings\nimplicit-properties        Print implicit properties of objects:\n                         id, type id\ninput-mode                 Set input mode. One of: vi, emacs\nintrospect-types           Print type names instead of `Object`\n                         in default output mode (may fail if\n                         schema is updated after enabling\n                         option)\nlimit                      Set implicit LIMIT. Defaults to 100,\n                         specify 0 to disable\noutput-mode                Set output mode. One of: json, json-\n                         elements, default, tab-separated\nverbose-errors             Print all errors with maximum\n                         verbosity\n```\n\n----------------------------------------\n\nTITLE: Listing Branches in EdgeDB REPL\nDESCRIPTION: Demonstrates the use of the \\ls command to list branches in the EdgeDB REPL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/repl.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> \\ls\nList of branches:\n  db\n  tutorial\n```\n\n----------------------------------------\n\nTITLE: Search Endpoint Update - Python\nDESCRIPTION: Updates to the search endpoint to include web sources in the response\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass SearchResult(BaseModel):\n    response: str | None = None\n    sources: list[WebSource] | None = None\n\n\n@app.post(\"/search\")\nasync def search(search_terms: SearchTerms) -> SearchResult:\n    web_sources = await search_web(search_terms.query)\n    return SearchResult(\n        response=search_terms.query, sources=web_sources\n    )\n```\n\n----------------------------------------\n\nTITLE: Property Constraints Definition\nDESCRIPTION: Illustrates how to add multiple constraints to a property including exclusivity, minimum length, and regular expression patterns.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/schema.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Movie {\n  required title: str {\n    constraint exclusive;\n    constraint min_len_value(8);\n    constraint regexp(r'^[A-Za-z0-9 ]+$');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the strict_word_similarity_dist Function in ext::pg_trgm\nDESCRIPTION: Examples of using the strict_word_similarity_dist function which works like word_similarity_dist but enforces matches at word boundaries in the second string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::strict_word_similarity_dist(\n...   'cat', 'Lazy dog');\n{1}\ndb> select ext::pg_trgm::strict_word_similarity_dist(\n...   'cat', 'Dog in a car');\n{0.5}\ndb> select ext::pg_trgm::strict_word_similarity_dist(\n...   'cat', 'Dog catastrophy');\n{0.7692308}\ndb> select ext::pg_trgm::strict_word_similarity_dist(\n...   'cat', 'Lazy dog and cat');\n{0}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Role in EdgeDB\nDESCRIPTION: This snippet illustrates how to remove an existing role named 'alice' from the database. It uses the 'drop role' command, which permanently deletes the specified role.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/roles.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop role alice;\n```\n\n----------------------------------------\n\nTITLE: Importing Chat Search Query Function in Python\nDESCRIPTION: Imports the search_chats function from the queries.search_chats_async_edgeql module for use in the application.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom .queries.search_chats_async_edgeql import (\n    search_chats as search_chats_query,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS collection extract function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_collectionextract function, which extracts specific types of geometries from a collection. The optional second parameter specifies which type to extract.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_41\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::collectionextract( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::geometry\next::postgis::collectionextract( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::int64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Demonstrating len() function in EdgeQL\nDESCRIPTION: This snippet shows how the len() function works as an element-wise operation on strings, returning a set of integers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/cardinality.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select len('hello');\n{5}\ndb> select len({'hello', 'world'});\n{5, 5}\n```\n\n----------------------------------------\n\nTITLE: Creating Hexagon Cell Geometry\nDESCRIPTION: Function that creates a hexagon geometry of specified size at a given cell position in a hexagonal grid. Maps to the PostGIS st_hexagon function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_115\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::hexagon( \\\n                    size: std::float64, \\\n                    cell_i: std::int64, \\\n                    cell_j: std::int64, \\\n                    origin: ext::postgis::geometry = 'POINT(0 0)', \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS 3D distance fully within function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_3ddfullywithin function, which tests if two geometries are entirely within a given 3D distance of each other. Takes the Z coordinate into account when calculating distance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_58\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::dfullywithin3d( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n  a2: std::float64, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Testing Topological Relationships in EQL\nDESCRIPTION: Tests if two geometries have a topological relationship matching an Intersection Matrix pattern, or computes their Intersection Matrix. This function exposes the PostGIS st_relate functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_220\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::relate( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Exposing st_mpolyfromtext Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_mpolyfromtext function in EdgeDB. It has two overloads, taking a string input and optionally an SRID, returning an optional geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_174\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::mpolyfromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::mpolyfromtext( \\\n                    a0: std::str, \\\n\n```\n\n----------------------------------------\n\nTITLE: Union with For Loop Example\nDESCRIPTION: Demonstrates how to use link properties in a union with a for loop.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Movie {\n  title := 'The Incredible Hulk',\n\n  actors := assert_distinct((\n    with characters := {\n      ('The Hulk', 'Mark Ruffalo'),\n      ('Iron Man', 'Robert Downey Jr.')\n    }\n    for character in characters union (\n        select Person {\n            @character_name := character.0\n        } filter .name = character.1\n    )\n  ))\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc Cosine in EdgeQL\nDESCRIPTION: Demonstrates the use of math::acos() function to calculate the arc cosine of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::acos(-1);\n{3.141592653589793}\ndb> select math::acos(0);\n{1.5707963267948966}\ndb> select math::acos(1);\n{0}\n```\n\n----------------------------------------\n\nTITLE: Running Complex Gel Query in Terminal\nDESCRIPTION: This shell command shows the execution of the enhanced TypeScript file with the output displaying both the simple query result and a table of the Deck objects that were inserted and selected.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/connecting/nextjs.rst#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npx tsx test.ts\n[ 'Hello from Gel!' ]\n┌─────────┬────────────────────────────────────────┬────────────┐\n│ (index) │ id                                     │ name       │\n├─────────┼────────────────────────────────────────┼────────────┤\n│ 0       │ 'f4cd3e6c-ea75-11ef-83ec-037350ea8a6e' │ 'I am one' │\n│ 1       │ 'f4cf27ae-ea75-11ef-83ec-3f7b2fceab24' │ 'I am two' │\n└─────────┴────────────────────────────────────────┴────────────┘\n```\n\n----------------------------------------\n\nTITLE: Checking Upper Bound Inclusivity of Range and Multirange in EdgeQL\nDESCRIPTION: Shows how to use the range_is_inclusive_upper() function to check if the upper bound of a range or multirange is inclusive.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range_is_inclusive_upper(range(1, 10));\n{false}\ndb> select range_is_inclusive_upper(\n...     range(1.5, 7.5, inc_upper := true));\n{true}\ndb> select range_is_inclusive_upper(range(1));\n{false}\ndb> select range_is_inclusive_upper(\n...   multirange([\n...     range(2.0, 3.0),\n...     range(5.0, 10.0, inc_upper := true),\n...   ])\n... );\n{true}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_minimumboundingcircle Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_minimumboundingcircle function in EdgeDB. It takes a geometry input and an optional number of segments, returning a geometry representing the minimum bounding circle.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_167\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::minimumboundingcircle( \\\n                    inputgeom: ext::postgis::geometry, \\\n                    segs_per_quarter: std::int64 = 48, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Calculating Natural Logarithm in EdgeQL\nDESCRIPTION: Shows how to use math::ln() function to calculate the natural logarithm of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 2.718281829 ^ math::ln(100);\n{100.00000009164575}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Gel Migrations\nDESCRIPTION: Commands showing how to create and apply schema migrations using the Gel CLI, demonstrating the basic migration workflow.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\nCreated dbschema/migrations/00001.edgeql\n$ gel migrate\nApplied dbschema/migrations/00001.edgeql\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Link Properties\nDESCRIPTION: Demonstrates how to add a constraint ensuring the @strength property is non-negative.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str { constraint exclusive };\n\n  multi friends: Person {\n    strength: float64;\n\n    constraint expression on (\n      __subject__@strength >= 0\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modulo Operation in EdgeQL\nDESCRIPTION: Examples of modulo operator (%) which returns the remainder from division. The result type corresponds to the operand type. The examples show usage with various numeric types and negative numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 10 % 4;\n{2}\ndb> select 10n % 4;\n{2n}\ndb> select -10 % 4;\n{2}\ndb> # floating arithmetic is inexact, so\n... # we get 0.3999999999999999 instead of 0.4\n... select 3.7 % 1.1;\n{0.3999999999999999}\ndb> select 3.7n % 1.1n;\n{0.4n}\ndb> select 37 % 11;\n{4}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 10 % 0;\nDivisionByZeroError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Using in operator for set intersection in EdgeQL\nDESCRIPTION: The 'in' operator can be used with filter to implement set intersection, returning elements that exist in both sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> with\n...     A := {1, 2, 3, 4},\n...     B := {2, 4, 6}\n... select A filter A in B;\n{2, 4}\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Shell Command\nDESCRIPTION: Basic command to start the Gel interactive shell with optional connection options\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel [<connection-option>...]\n```\n\n----------------------------------------\n\nTITLE: Configuring File Watching in gel.toml\nDESCRIPTION: Example of how to configure file watching in gel.toml to automatically regenerate query functions when query files change.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[[watch]]\nfiles = [\"queries/*.edgeql\"]\nscript = \"npx @edgedb/generate queries\"\n```\n\n----------------------------------------\n\nTITLE: Multi-component Duration Operations\nDESCRIPTION: Shows how multiple duration components are handled in calculations\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <cal::local_datetime>\"2021-04-30T15:00:00\" +\n       <cal::relative_duration>\"1 month 1 day\";\n{<cal::local_datetime>'2021-05-31T15:00:00'}\n\ndb> select <cal::local_datetime>\"2021-04-30T15:00:00\" +\n       <cal::relative_duration>\"1 month\" +\n       <cal::relative_duration>\"1 day\";\n{<cal::local_datetime>'2021-05-31T15:00:00'}\n\ndb> select <cal::local_datetime>\"2021-04-30T15:00:00\" +\n       <cal::relative_duration>\"1 day\" +\n       <cal::relative_duration>\"1 month\";\n{<cal::local_datetime>'2021-06-01T15:00:00'}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating strictly_below Range Comparisons in EdgeDB\nDESCRIPTION: Examples showing how to use the strictly_below function to compare ranges and multiranges. The function returns true if the first range is entirely below the second range.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select strictly_below(\n  range(1, 3), range(7)\n);\n{true}\ndb> select strictly_below(\n  range(1, 7), range(3)\n);\n{false}\n\ndb> select strictly_below(\n  multirange([\n    range(-1, 0), range(-5, -3),\n  ]),\n  multirange([\n    range(1, 4), range(7),\n  ]),\n);\n{true}\n\ndb> select strictly_below(\n  range(-1, 0),\n  multirange([\n    range(1, 4), range(7),\n  ]),\n);\n{true}\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeQL Insert Statement Syntax\nDESCRIPTION: Specifies the syntax for the EdgeQL insert statement, including optional with clause, insert expression, and unless conflict clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/insert.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\n[ with <with-spec> [ ,  ... ] ]\ninsert <expression> [ <insert-shape> ]\n[ unless conflict\n    [ on <property-expr> [ else <alternative> ] ]\n] ;\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Int64 in EdgeQL\nDESCRIPTION: Shows conversion to int64 using string parsing with format strings and byte conversion with endianness specification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_22\n\nLANGUAGE: edgeql\nCODE:\n```\nselect to_int64('10000234567');\nselect to_int64('10000234567%', '99999999999%');\nselect to_int64(b'\\x01\\x02\\x00\\x07\\x11\\x22\\x33\\x44', Endian.Big);\nselect to_int64(b'\\x44\\x33\\x22\\x11\\x07\\x00\\x02\\x01', Endian.Little);\n```\n\n----------------------------------------\n\nTITLE: Using gel project init with server-instance for Gel Cloud instance creation\nDESCRIPTION: Simplified example of using gel project init with the --server-instance flag to create both a cloud instance and a linked local project simultaneously.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/cli.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init \\\n  --server-instance <org-name>/<instance-name>\n```\n\n----------------------------------------\n\nTITLE: Named Tuple Type Descriptor Structure in C\nDESCRIPTION: Defines structures for Named Tuple type descriptors and their elements, including naming and type information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct NamedTupleTypeDescriptor {\n    // Indicates that this is a\n    // Named Tuple Type descriptor.\n    uint8         tag = 5;\n\n    // Schema type ID.\n    uuid          id;\n\n    // Schema type name.\n    string        name;\n\n    // Whether the type is defined in the schema\n    // or is ephemeral.\n    bool          schema_defined;\n\n    // Number of ancestor scalar types.\n    uint16        ancestors_count;\n\n    // Indexes of ancestor scalar type descriptors\n    // in ancestor resolution order (C3).\n    uint16        ancestors[ancestors_count];\n\n    // The number of elements in tuple.\n    uint16        element_count;\n\n    // Indexes of element descriptors.\n    TupleElement  elements[element_count];\n};\n\nstruct TupleElement {\n    // Field name.\n    string  name;\n\n    // Field type descriptor index.\n    int16   type;\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming Abstract Annotation in EdgeQL\nDESCRIPTION: DDL command to rename an existing annotation from extrainfo to extra_info.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/annotations.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nalter abstract annotation extrainfo\n  rename to extra_info;\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables - Multiple Languages\nDESCRIPTION: Examples of setting global variables across different programming languages and client libraries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from 'gel';\n\nconst baseClient = createClient();\n\nconst clientWithGlobals = baseClient.withGlobals({\n  current_user_id: '2141a5b4-5634-4ccc-b835-437863534c51',\n});\n\nconst result = await clientWithGlobals.query(\n  `select global current_user_id;`\n);\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom gel import create_client\n\nbase_client = create_client()\n\nclient = base_client.with_globals({\n    'current_user_id': '580cc652-8ab8-4a20-8db9-4c79a4b1fd81'\n})\n\nresult = client.query(\"\"\"\n    select global current_user_id;\n\"\"\")\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n\n  \"github.com/geldata/gel-go\"\n)\n\nfunc main() {\n  ctx := context.Background()\n  client, err := gel.CreateClient(ctx, gel.Options{})\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer client.Close()\n\n  id, err := gel.ParseUUID(\"2141a5b4-5634-4ccc-b835-437863534c51\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  var result gel.UUID\n  err = client.\n    WithGlobals(map[string]interface{}{\"current_user\": id}).\n    QuerySingle(ctx, \"SELECT global current_user;\", &result)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UUID for Free Objects in EdgeQL\nDESCRIPTION: Example of how to generate a new UUID for free objects using the uuid_generate_v1mc() function, since free objects no longer have an id property by default.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nselect {\n    id := uuid_generate_v1mc(),\n    property := 'Some string',\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Endpoint of Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_endpoint function to get the endpoint of a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_69\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::endpoint( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS covers function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_covers function, which tests if no point in the second geometry lies outside the first geometry. Implemented for both geometry and geography types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_51\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::covers( \\\n  a0: optional std::str, \\\n  a1: optional std::str, \\\n) -> optional std::bool\next::postgis::covers( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  std::bool\next::postgis::covers( \\\n  geog1: ext::postgis::geography, \\\n  geog2: ext::postgis::geography, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Defining Types with Multiple Inheritance in SDL (3.0+)\nDESCRIPTION: Example of defining types with multiple inheritance in EdgeDB SDL for version 3.0 and later.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype A;\ntype B extending A;\ntype C extending B, A;\n```\n\n----------------------------------------\n\nTITLE: Creating Point Geometry in EdgeQL\nDESCRIPTION: Creates a Point geometry from X and Y coordinates with an optional SRID parameter. This function exposes the PostGIS st_point function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_202\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::point( \\\n                    a0: std::float64, \\\n                    a1: std::float64, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::point( \\\n                    a0: std::float64, \\\n                    a1: std::float64, \\\n                    srid: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Defining Gel Migration Commands in reStructuredText\nDESCRIPTION: This snippet defines a table of Gel migration CLI commands using reStructuredText syntax. It lists each command with a brief description of its functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. list-table::\n    :class: funcoptable\n\n    * - :ref:`ref_cli_gel_migration_apply`\n      - Bring current |branch| to the latest or a specified revision\n    * - :ref:`ref_cli_gel_migration_create`\n      - Create a migration script\n    * - :ref:`ref_cli_gel_migration_edit`\n      - Edit migration file\n    * - :ref:`ref_cli_gel_migration_extract`\n      - Extract migration history and write it to ``/migrations``.\n    * - :ref:`ref_cli_gel_migration_log`\n      - Show all migration versions\n    * - :ref:`ref_cli_gel_migration_status`\n      - Show current migration state\n    * - :ref:`ref_cli_gel_migration_upgrade_check`\n      - Checks your schema against a different |Gel| version.\n```\n\n----------------------------------------\n\nTITLE: Checking Geometric Equality in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_equals function to check if two geometries are spatially equal.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_71\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::equals( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Persistent Data Storage Configuration for Unix Systems\nDESCRIPTION: Docker command to run Gel with persistent data storage using volume mounting on Unix-like systems\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/docker.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run \\\n   --name gel \\\n   -e GEL_SERVER_PASSWORD=secret \\\n   -e GEL_SERVER_TLS_CERT_MODE=generate_self_signed \\\n   -v /my/data/directory:/var/lib/gel/data \\\n   -d geldata/gel\n```\n\n----------------------------------------\n\nTITLE: Querying and Accessing Color Enum Values with GEL Client\nDESCRIPTION: Shows how to create a GEL client, execute a simple query to fetch a color enum value, and access its properties through string conversion, value and name attributes. The name attribute returns an uppercase version of the value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/types.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> client = gel.create_client()\n>>> r = client.query_single(\"\"\"SELECT <Color>'red'\"\"\")\n>>> r\n<gel.EnumValue 'red'>\n>>> str(r)\n'red'\n>>> r.value  # added in 1.0\n'red'\n>>> r.name  # added in 1.0, simply str.upper() of r.value\n'RED'\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsRing Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsRing function which tests if a linestring is a ring (closed and simple).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_127\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::isring( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Including Similar Chats in Search Result Output in Python\nDESCRIPTION: Updates the SearchResult construction to include the formatted_chats, allowing the client to see the similar chat history that influenced the response.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n    similar_chats=formatted_chats,\n```\n\n----------------------------------------\n\nTITLE: Upgrading Named EdgeDB Instance in Bash\nDESCRIPTION: Command to upgrade a specific named EdgeDB instance to version 3.0 using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb instance upgrade -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Executing Queries in EdgeDB REPL\nDESCRIPTION: Demonstrates how to execute queries in the EdgeDB REPL using semicolon termination or Alt-Enter shortcut.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/repl.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 5;\n{5}\n```\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 5\n{5}\n```\n\n----------------------------------------\n\nTITLE: Batch Creation of EdgeQL Query Files\nDESCRIPTION: A bash script that creates multiple EdgeQL query files for chat and message functionality. It defines queries for getting chats, getting a chat by ID, creating a chat, getting messages, and adding messages.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ echo 'select Chat {\n    messages: { role, body, sources },\n    user := .<chats[is User],\n} filter .user.name = <str>$username;' > app/queries/get_chats.edgeql && echo 'select Chat {\n    messages: { role, body, sources },\n    user := .<chats[is User],\n} filter .user.name = <str>$username and .id = <uuid>$chat_id;' > app/queries/get_chat_by_id.edgeql && echo 'with new_chat := (insert Chat)\nselect (\n    update User filter .name = <str>$username\n    set {\n        chats := assert_distinct(.chats union new_chat)\n    }\n) {\n    new_chat_id := new_chat.id\n}' > app/queries/create_chat.edgeql && echo 'with\n    user := (select User filter .name = <str>$username),\n    chat := (\n        select Chat filter .<chats[is User] = user and .id = <uuid>$chat_id\n    )\nselect Message {\n    role,\n    body,\n    sources,\n    chat := .<messages[is Chat]\n} filter .chat = chat;' > app/queries/get_messages.edgeql && echo 'with\n    user := (select User filter .name = <str>$username),\nupdate Chat\nfilter .id = <uuid>$chat_id and .<chats[is User] = user\nset {\n    messages := assert_distinct(.messages union (\n        insert Message {\n            role := <str>$message_role,\n            body := <str>$message_body,\n            sources := array_unpack(<array<str>>$sources)\n        }\n    ))\n}' > app/queries/add_message.edgeql\n```\n\n----------------------------------------\n\nTITLE: Starting and Aborting a Migration\nDESCRIPTION: Example of starting a migration to create a User type and then aborting it using the 'abort migration' command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nstart migration to {\n    module default {\n        type User;\n    };\n};\n\nabort migration;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Local EdgeDB Project\nDESCRIPTION: Commands to upgrade a local EdgeDB project or instance to version 4.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project upgrade\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb instance upgrade -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS convex hull function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_convexhull function, which computes the convex hull of a geometry, which is the smallest convex geometry that encloses all geometries in the input.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_47\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::convexhull( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Named Tuple Usage Example\nDESCRIPTION: Demonstrates the usage of Gel NamedTuple class which is compatible with Python's collections.namedtuple.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/types.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import gel\n>>> client = gel.create_client()\n>>> r = client.query_single('''SELECT (a := 1, b := 'a', c := [3])''')\n>>> r\n(a := 1, b := 'a', c := [3])\n>>> r.b\n'a'\n>>> r[0]\n1\n>>> r == (1, 'a', [3])\nTrue\n>>> r._fields\n('a', 'b', 'c')\n```\n\n----------------------------------------\n\nTITLE: Filter Clause with Boolean\nDESCRIPTION: Example of using boolean expression in a filter clause.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User\nfilter .name ilike 'alice';\n```\n\n----------------------------------------\n\nTITLE: PostGIS Bounding Box Functions in EdgeQL\nDESCRIPTION: Functions for working with PostGIS bounding boxes, including adding, dropping, and retrieving bounding boxes for geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_212\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_addbbox(\n                    a0: ext::postgis::geometry \n                  ) ->  ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_dropbbox(\n                    a0: ext::postgis::geometry \n                  ) ->  ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_getbbox(\n                    a0: ext::postgis::geometry \n                  ) ->  ext::postgis::box2d\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_hasbbox(\n                    a0: ext::postgis::geometry \n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Geometry Information and Analysis\nDESCRIPTION: Functions that provide information about geometries, including textual summaries and geometric difference operations between geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_238\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::summary( \\\n  a0: ext::postgis::geometry \\\n) ->  std::str\next::postgis::summary( \\\n  a0: ext::postgis::geography \\\n) ->  std::str\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::symdifference( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n  gridsize: std::float64 = -1.0, \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::symmetricdifference( \\\n  geom1: optional ext::postgis::geometry, \\\n  geom2: optional ext::postgis::geometry, \\\n) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Checking Distance Within in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_dwithin function to check if geometries or geographies are within a specified distance. Multiple overloads are provided for different input types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_67\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::dwithin( \\\n                    a0: optional std::str, \\\n                    a1: optional std::str, \\\n                    a2: optional std::float64, \\\n                  ) -> optional std::bool\n                  ext::postgis::dwithin( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                    a2: std::float64, \\\n                  ) ->  std::bool\n                  ext::postgis::dwithin( \\\n                    geog1: ext::postgis::geography, \\\n                    geog2: ext::postgis::geography, \\\n                    tolerance: std::float64, \\\n                    use_spheroid: std::bool = true, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Applying Gel Schema Migration\nDESCRIPTION: Creates and applies a migration to update the Gel instance with the newly defined schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\n$ gel migrate\n```\n\n----------------------------------------\n\nTITLE: Exposing st_minimumclearanceline Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_minimumclearanceline function in EdgeDB. It takes a geometry input and returns a geometry representing the minimum clearance line.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_169\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::minimumclearanceline( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Casting Between String and JSON in EdgeQL\nDESCRIPTION: Demonstrates how string values are cast to JSON strings and vice versa in EdgeQL, showing that a JSON string value becomes a quoted string in the JSON representation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <json>'Hello, world';\n{\"\\\"Hello, world\\\"\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Statistics for Multiple Entities in EdgeDB (EdgeQL)\nDESCRIPTION: This example shows how to update statistics for both a type 'SomeType' and a link 'OtherType.ptr' using the 'administer statistics_update()' function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/statistics_update.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nadminister statistics_update(SomeType, OtherType.ptr);\n```\n\n----------------------------------------\n\nTITLE: Expanding Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_expand function to expand the bounds of geometries. Multiple overloads are provided for different input types and dimensions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_72\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::expand( \\\n                    a0: ext::postgis::box2d, \\\n                    a1: std::float64, \\\n                  ) ->  ext::postgis::box2d\n                  ext::postgis::expand( \\\n                    a0: ext::postgis::box3d, \\\n                    a1: std::float64, \\\n                  ) ->  ext::postgis::box3d\n                  ext::postgis::expand( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::expand( \\\n                    box: ext::postgis::box2d, \\\n                    dx: std::float64, \\\n                    dy: std::float64, \\\n                  ) ->  ext::postgis::box2d\n                  ext::postgis::expand( \\\n                    box: ext::postgis::box3d, \\\n                    dx: std::float64, \\\n                    dy: std::float64, \\\n                    dz: std::float64 = 0, \\\n                  ) ->  ext::postgis::box3d\n                  ext::postgis::expand( \\\n                    geom: ext::postgis::geometry, \\\n                    dx: std::float64, \\\n                    dy: std::float64, \\\n                    dz: std::float64 = 0, \\\n                    dm: std::float64 = 0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Polygon Triangulation\nDESCRIPTION: Function for triangulating a polygon, breaking it down into a collection of triangles that cover the same area as the original polygon.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_244\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::triangulatepolygon( \\\n  g1: ext::postgis::geometry \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Determining Geometry Dimension in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_dimension function to determine the dimension of a geometry object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_60\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::dimension( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Access in Gel Schema\nDESCRIPTION: SDL code to enable HTTP endpoint access for EdgeQL queries in Gel Cloud. This extension must be added to the schema and applied through migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/http_gql.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension edgeql_http;\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties Example\nDESCRIPTION: Demonstrates how to access properties of a Gel Object instance using the query_single method and attribute access.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/types.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import gel\n>>> client = gel.create_client()\n>>> r = client.query_single('''\n...     SELECT schema::ObjectType {name}\n...     FILTER .name = 'std::Object'\n...     LIMIT 1''')\n>>> r\nObject{name := 'std::Object'}\n>>> r.name\n'std::Object'\n```\n\n----------------------------------------\n\nTITLE: Link Property Index Definition in EdgeDB SDL\nDESCRIPTION: Example of using shorthand path expressions for link property indexes in SDL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc3.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nabstract link friendship {\n    property strength -> float64;\n    index on (@strength);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Scalar Type with Expression Constraint in EdgeDB SDL\nDESCRIPTION: Demonstrates how to use the 'expression' constraint to create a custom scalar type 'StartsWithA' that only allows strings starting with 'A'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type StartsWithA extending str {\n    constraint expression on (__subject__[0] = 'A');\n}\n```\n\n----------------------------------------\n\nTITLE: Using sequence_next with introspect\nDESCRIPTION: Example of using the sequence_next function to increment a sequence and retrieve the next value using the introspect operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sequence.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select sequence_next(introspect MySequence);\n{11}\n```\n\n----------------------------------------\n\nTITLE: Resetting Query Statistics in EdgeDB with Different Parameters\nDESCRIPTION: This snippet demonstrates five different ways to call the sys::reset_query_stats() function in EdgeDB. It shows how to reset statistics globally, for a specific branch, for a specific query ID, with min/max only option, and with a non-existent branch name which returns an empty result.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sys.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sys::reset_query_stats();\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sys::reset_query_stats(branch_name := 'my_branch');\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sys::reset_query_stats(id := <uuid>'00000000-0000-0000-0000-000000000000');\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sys::reset_query_stats(minmax_only := true);\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sys::reset_query_stats(branch_name := 'no_such_branch');\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Scope Definition Example\nDESCRIPTION: Shows how EdgeQL uses curly braces to define scopes and structures, illustrating its programmer-friendly syntax approach.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\n{ curly braces }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Grouped Data in JSON Format\nDESCRIPTION: This code snippet represents a JSON-like data structure containing grouped statistics. It includes keys for vowel presence, decade, grouping criteria, count, and mean title length. The data is structured to show different groupings and their corresponding metrics.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/group.rst#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n        key: {vowel: false, decade: {}},\n        grouping: {'vowel'},\n        count: 6,\n        mean_title_length: 18.333333333333332,\n      },\n      {\n        key: {vowel: false, decade: 201},\n        grouping: {'vowel', 'decade'},\n        count: 5,\n        mean_title_length: 19.8,\n      },\n      {\n        key: {vowel: true, decade: 201},\n        grouping: {'vowel', 'decade'},\n        count: 1,\n        mean_title_length: 20,\n      },\n      {\n        key: {vowel: false, decade: 202},\n        grouping: {'vowel', 'decade'},\n        count: 1,\n        mean_title_length: 11,\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Range Literals for Different Types in Gel TypeScript\nDESCRIPTION: Shows how to create ranges for different numerical types, as well as date and time types such as datetime, local_datetime, and local_date.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\ne.range(e.decimal('100'), e.decimal('200'));\ne.range(Date.parse(\"1970-01-01\"), Date.parse(\"2022-01-01\"));\ne.range(new LocalDate(1970, 1, 1), new LocalDate(2022, 1, 1));\n```\n\n----------------------------------------\n\nTITLE: Using Separate Insert and Update Rewrites in SDL\nDESCRIPTION: This example demonstrates defining separate rewrites for insert and update operations on different properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/mutation_rewrites.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Post {\n  required title: str;\n  required body: str;\n  created: datetime {\n    rewrite insert using (datetime_of_statement())\n  }\n  modified: datetime {\n    rewrite update using (datetime_of_statement())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Element Replacement in EdgeQL\nDESCRIPTION: Demonstrates the array_replace function for replacing all occurrences of a value in an array with another value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select array_replace([1, 1, 2, 3, 5], 1, 99);\n{[99, 99, 2, 3, 5]}\ndb> select array_replace(['h', 'e', 'l', 'l', 'o'], 'l', 'L');\n{['h', 'e', 'L', 'L', 'o']}\n```\n\n----------------------------------------\n\nTITLE: Get Version String Example\nDESCRIPTION: Shows how to get the server version as a formatted string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sys.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select sys::get_version_as_str();\n{'1.0-alpha.1'}\n```\n\n----------------------------------------\n\nTITLE: Executing 'gel describe object' Command in EdgeDB CLI\nDESCRIPTION: This snippet shows the syntax for running the 'gel describe object' command. It allows users to describe a named schema object, with an option for verbose output.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_describe/gel_describe_object.rst#2025-04-16_snippet_0\n\nLANGUAGE: eql\nCODE:\n```\ngel describe object [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Defining Function with DML in EdgeQL\nDESCRIPTION: Example of defining a function that performs a DML operation (insert) in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_16\n\nLANGUAGE: sdl\nCODE:\n```\nfunction add_foo(x: int64) -> Foo using ((\n    insert Foo { val := x }\n));\n```\n\n----------------------------------------\n\nTITLE: Getting Upper Bound of Range and Multirange in EdgeQL\nDESCRIPTION: Illustrates how to use the range_get_upper() function to retrieve the upper bound of a range or multirange.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range_get_upper(range(1, 10));\n{10}\ndb> select range_get_upper(range(1.5, 7.5));\n{7.5}\ndb> select range_get_upper(\n...   multirange([range(5, 10), range(2, 3)]));\n{10}\n```\n\n----------------------------------------\n\nTITLE: Using any() Aggregate Function in EdgeQL\nDESCRIPTION: Demonstrates the any() function which returns true if any value in the given set is true, false otherwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql\nCODE:\n```\nselect any(<bool>{});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect any({1, 2, 3, 4} < 4);\n```\n\n----------------------------------------\n\nTITLE: Converting PostGIS Geometry to TWKB\nDESCRIPTION: Converts PostGIS geometry to Tiny Well-Known Binary (TWKB) format. Allows specifying precision, optional Z and M values, and inclusion of sizes and bounding boxes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::astwkb( \n  geom: optional ext::postgis::geometry, \n  prec: optional std::int64 = {}, \n  prec_z: optional std::int64 = {}, \n  prec_m: optional std::int64 = {}, \n  with_sizes: optional std::bool = {}, \n  with_boxes: optional std::bool = {}, \n) -> optional std::bytes\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::astwkb( \n  geom: optional array<ext::postgis::geometry>, \n  ids: optional array<std::int64>, \n  prec: optional std::int64 = {}, \n  prec_z: optional std::int64 = {}, \n  prec_m: optional std::int64 = {}, \n  with_sizes: optional std::bool = {}, \n  with_boxes: optional std::bool = {}, \n) -> optional std::bytes\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeQL Query to Create a New User\nDESCRIPTION: This EdgeQL query inserts a new user and selects the inserted data, wrapped in a select statement for additional flexibility.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_25\n\nLANGUAGE: edgeql\nCODE:\n```\nselect(\n```\n\n----------------------------------------\n\nTITLE: Renaming a Branch in EdgeQL\nDESCRIPTION: Changes the name of an existing branch. Cannot be executed while there are active connections to the target branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/branches.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nalter branch featuer rename to feature;\n```\n\n----------------------------------------\n\nTITLE: Migration Squash with Fixup File Creation Dialog\nDESCRIPTION: Displays the CLI output when creating a fixup file during migration squash to handle schema differences between current schema and database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create --squash\nCurrent database revision:\nm16awk2tzhtbupjrzoc4fikgw5okxpfnaazupb6rxudxwin2qfgy5q\nWhile squashing migrations is non-destructive,\nit may lead to manual work if done incorrectly.\n\nItems to check before using --squash:\n1. Ensure that `./dbschema` dir is comitted\n2. Ensure that other users of the database have the revision\nabove or can create database from scratch.\n    To check a specific instance, run:\n    gel -I <name> migration log --from-db --newest-first --limit 1\n3. Merge version control branches that contain schema changes\nif possible.\n\nProceed? [y/n]\n> y\n```\n\n----------------------------------------\n\nTITLE: Docker Hub Authentication\nDESCRIPTION: Commands to securely input Docker Hub credentials for container deployment\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ echo -n \"docker user> \" && read -s DOCKER_USER\n$ echo -n \"docker password> \" && read -s DOCKER_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Global Variable - SDL\nDESCRIPTION: Simple declaration of a UUID global variable for storing current user ID.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nglobal current_user_id: uuid;\n```\n\n----------------------------------------\n\nTITLE: Defining Start Transaction Syntax in EdgeQL\nDESCRIPTION: Specifies the syntax for the 'start transaction' command, including various transaction modes such as isolation level, read/write access, and deferrable status.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_start.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nstart transaction <transaction-mode> [ , ... ] ;\n\n# where <transaction-mode> is one of:\n\nisolation serializable\nread write | read only\ndeferrable | not deferrable\n```\n\n----------------------------------------\n\nTITLE: Checking if Geometry Contains Arcs\nDESCRIPTION: Function that checks if a geometry contains arcs (curved segments). Maps to the PostGIS st_hasarc function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_111\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::hasarc( \\\n                    geometry: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Calculating Geometric Difference in PostGIS using EdgeQL\nDESCRIPTION: Computes a geometry resulting from removing all points in geom2 from geom1. It represents the part of geometry geom1 that does not intersect geometry geom2.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_59\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::difference( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                    gridsize: std::float64 = -1.0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Creating MultiLineString from Text in EdgeQL\nDESCRIPTION: Creates a MultiLineString geometry from text representation with an optional SRID parameter. This function exposes the PostGIS st_multilinestringfromtext function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_178\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::multilinestringfromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::multilinestringfromtext( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Removing Small Parts from Geometry in EQL\nDESCRIPTION: Removes small parts from a geometry based on area and perimeter thresholds. This function exposes the PostGIS st_removesmallparts functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_224\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::removesmallparts( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n  a2: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using Raw Transactions in Python for EdgeDB\nDESCRIPTION: Shows the usage of the new raw_transaction() method in the Python driver for single-use transactions that will not be automatically retried. This method is introduced as a replacement for the deprecated transaction() method.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntr = con.raw_transaction()\nwith tr as with_tr:\n    with_tr.execute('''\n        insert Message {\n            body := 'Hello'\n        };\n    ''')\n```\n\n----------------------------------------\n\nTITLE: Defining Named Tuple Properties in SDL\nDESCRIPTION: Example of a named tuple property definition in SDL, showing how to assign keys to tuple elements.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype BlogPost {\n  metadata: tuple<title: str, published: bool, upvotes: int64>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gel CLI on Linux or macOS\nDESCRIPTION: Command to install the Gel CLI tool on Linux or macOS systems using curl to download and execute the installation script.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/cli.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --proto '=https' --tlsv1.2 -sSf https://www.geldata.com/sh | sh\n```\n\n----------------------------------------\n\nTITLE: Querying Multi-Link Table in SQL\nDESCRIPTION: SQL query to select from the Movie.actors link table, showing source (Movie ID), target (Person ID), and role property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT source, target, role FROM \"Movie.actors\";\n```\n\n----------------------------------------\n\nTITLE: Coordinate Access Functions\nDESCRIPTION: Functions for accessing and manipulating geometric coordinates and bounds\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_246\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::x(a0: ext::postgis::geometry) -> std::float64\n\next::postgis::xmax(a0: ext::postgis::box3d) -> std::float64\n\next::postgis::xmin(a0: ext::postgis::box3d) -> std::float64\n\next::postgis::y(a0: ext::postgis::geometry) -> std::float64\n\next::postgis::ymax(a0: ext::postgis::box3d) -> std::float64\n\next::postgis::ymin(a0: ext::postgis::box3d) -> std::float64\n\next::postgis::z(a0: ext::postgis::geometry) -> std::float64\n\next::postgis::zmax(a0: ext::postgis::box3d) -> std::float64\n\next::postgis::zmin(a0: ext::postgis::box3d) -> std::float64\n```\n\n----------------------------------------\n\nTITLE: Creating Full Backup in Gel Cloud\nDESCRIPTION: Command to create a complete backup of a Gel Cloud instance to a local directory\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/index.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gel dump \\\n    --all --format dir \\\n    -I <org-name>/<instance-name> \\\n    <local-dump-path>\n```\n\n----------------------------------------\n\nTITLE: Using the gel branch switch command\nDESCRIPTION: The basic syntax for the 'gel branch switch' command to change the currently active branch in Gel. The command requires a branch name as an argument and supports various options for creating branches.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/gel_branch_switch.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel branch switch [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Authentication in EdgeDB\nDESCRIPTION: Configures SCRAM-based password authentication with priority 0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\nconfigure instance insert Auth {\n    comment := 'password is required',\n    priority := 0,\n    method := (insert SCRAM),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating local_time from String in EdgeQL\nDESCRIPTION: Demonstrates creating a local_time value by parsing a string using the cal::to_local_time function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_33\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_time('15:01:22.306916');\n{<cal::local_time>'15:01:22.306916'}\n```\n\n----------------------------------------\n\nTITLE: Modifying Computed Special Group Link\nDESCRIPTION: Updates the computed expression for special_group to filter friends based on matching interests.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  alter link special_group using (\n    # at least one of the friend's interests\n    # must match the user's\n    select __source__.friends\n    filter .interests IN __source__.interests\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: EdgeQL JSON to Tuple Casting Example\nDESCRIPTION: Demonstrates new functionality for casting between JSON and tuples, used to convert JSON input into structured data for inserting a new User record with first name, last name and interests.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a5.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    data := <tuple<\n       first_name: str,\n       last_name: str,\n       interests: array<str>\n    >> <json>$input\ninsert User {\n    first_name := data.first_name,\n    last_name := data.last_name,\n    interests := (\n        select\n            Interest\n        filter\n            .label in array_unpack(data.interests)\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing st_memsize Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_memsize function in EdgeDB. It takes a geometry input and returns its memory size as an int64.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_166\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::memsize( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Concatenating Bytes in EdgeQL\nDESCRIPTION: Example of concatenating two bytes values using the ++ operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bytes.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select b'\\x01\\x02' ++ b'\\x03\\x04';\n{b'\\x01\\x02\\x03\\x04'}\n```\n\n----------------------------------------\n\nTITLE: UUID Literals in EdgeQL\nDESCRIPTION: Examples of declaring UUID literals and generating random UUIDs in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <uuid>'a5ea6360-75bd-4c20-b69c-8f317b0d2857';\nselect uuid_generate_v1mc();\n```\n\n----------------------------------------\n\nTITLE: Exposing st_longestline Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_longestline function in EdgeDB. It takes two geometry inputs and returns a geometry representing the longest line between them.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_153\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::longestline( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineInterpolatePoints Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineInterpolatePoints function which returns points interpolated along a line at regular fractional intervals. Supports controlling repetition behavior and, for geography types, spheroid usage.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_143\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::lineinterpolatepoints( \\\n                    a0: optional std::str, \\\n                    a1: optional std::float64, \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::lineinterpolatepoints( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                    repeat: std::bool = true, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::lineinterpolatepoints( \\\n                    a0: ext::postgis::geography, \\\n                    a1: std::float64, \\\n                    use_spheroid: std::bool = true, \\\n                    repeat: std::bool = true, \\\n                  ) ->  ext::postgis::geography\n```\n\n----------------------------------------\n\nTITLE: Gel Instance Link Command Synopsis\nDESCRIPTION: The basic command syntax for linking a Gel instance with optional parameters. Used to create a named connection to a remote Gel database instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_link.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel instance link [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Removing Points from Geometry in EQL\nDESCRIPTION: Removes a point from a geometry at a specified index. This function exposes the PostGIS st_removepoint functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_222\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::removepoint( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::int64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: String Reverse Example - EdgeQL\nDESCRIPTION: Shows str_reverse function reversing character order in string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_reverse('Hello world');\n{'dlrow olleH'}\ndb> select str_reverse('Hello 👋 world 😄');\n{'😄 dlrow 👋 olleH'}\n```\n\n----------------------------------------\n\nTITLE: Backlink Property Schema Definition\nDESCRIPTION: Shows how to define a schema with backlinks and link properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str;\n\n  multi follows: Person {\n    followed: datetime {\n      default := datetime_of_statement();\n    };\n  };\n\n  multi link followers := .<follows[is Person];\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Spheroidal Distance in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_distancespheroid function to calculate spheroidal distance between two geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_66\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::distancespheroid( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Upgrading Gel on Debian/Ubuntu\nDESCRIPTION: Commands to upgrade Gel package and restart the service on Debian-based systems\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install --only-upgrade gel-6\n$ sudo systemctl restart gel-server-6\n```\n\n----------------------------------------\n\nTITLE: Exposing st_maxdistance Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_maxdistance function in EdgeDB. It takes two geometry inputs and returns the maximum distance between them as a float64.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_164\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::maxdistance( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Configuring Gel Project using gel.toml\nDESCRIPTION: Provides an example of a gel.toml configuration file for a Gel project. It includes settings for instance version, schema directory, hooks for various project actions, and file watching configuration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/projects.rst#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[instance]\nserver-version = \"6.0\"\n\n[project]\nschema-dir = \"db/schema\"\n\n[hooks]\nproject.init.after = \"setup_dsn.sh\"\nbranch.switch.after = \"setup_dsn.sh\"\nschema.update.after = \"gel-orm sqlalchemy --mod compat --out compat\"\n\n[[watch]]\nfiles = [\"queries/*.edgeql\"]\nscript = \"npx @edgedb/generate queries\"\n```\n\n----------------------------------------\n\nTITLE: Querying Parent Type Table in SQL\nDESCRIPTION: SQL query to select from the Content table, which returns objects of both Content type and its child Movie type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, title FROM common.\"Content\";\n```\n\n----------------------------------------\n\nTITLE: Person Relationship Validation Example\nDESCRIPTION: Demonstrates the trigger constraint in action by attempting to set the same person as both friend and enemy.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Person {name := 'Quincey Morris'};\ninsert Person {name := 'Dracula'};\nupdate Person\nfilter .name = 'Quincey Morris'\nset {\n  enemies := (\n    select detached Person filter .name = 'Dracula'\n  )\n};\nupdate Person\nfilter .name = 'Quincey Morris'\nset {\n  friends := (\n    select detached Person filter .name = 'Dracula'\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Bitwise OR Operation in EdgeQL\nDESCRIPTION: Example of bit_or() function, which performs a bitwise OR operation on two integers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_or(17, 3);\n{19}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a PostGIS Extension using Gel CLI in Bash\nDESCRIPTION: This example demonstrates how to use the 'gel extension uninstall' command to remove the PostGIS extension. The command takes the extension name as an argument and outputs a success message upon completion.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_extension/uninstall.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension uninstall postgis\nExtension 'postgis' uninstalled successfully.\n```\n\n----------------------------------------\n\nTITLE: Start Migration Command for Manual Migration Process\nDESCRIPTION: The command to initiate a migration using EdgeDB's manual migration approach rather than the CLI-assisted method.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_41\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> start migration to {\n...   module default {\n...     type User {\n...       nam: str;\n...     }\n...   }\n... };\n```\n\n----------------------------------------\n\nTITLE: Defining Strawberry GraphQL Schema for Actor and Movie Types\nDESCRIPTION: Python code using Strawberry to define the GraphQL schema that mirrors the Gel database schema for Actor and Movie types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# strawberry-gql/app/schema.py\nfrom __future__ import annotations\n\nimport json # will be used later for serialization\n\nimport gel\nimport strawberry\n\nclient = gel.create_async_client()\n\n\n@strawberry.type\nclass Actor:\n    name: str | None\n    age: int | None = None\n    height: int | None = None\n\n\n@strawberry.type\nclass Movie:\n    name: str | None\n    year: int | None = None\n    actors: list[Actor] | None = None\n```\n\n----------------------------------------\n\nTITLE: Content Block Delta Event Formats for Streaming RAG Response\nDESCRIPTION: The third type of event in a streaming RAG response using Server-Sent Events (SSE). These events incrementally update the content by appending more text or tool arguments. Multiple delta events occur sequentially as the response is generated.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"content_block_delta\",\n  \"index\": 0,\n  \"delta\": {\n    \"type\": \"text_delta\",\n    \"text\": \"The\"\n  },\n  \"logprobs\": null\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"content_block_delta\",\n  \"index\": 0,\n  \"delta\": {\n    \"type\": \"tool_call_delta\",\n    \"args\": \"{\\\"location\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Date Duration in EdgeQL\nDESCRIPTION: Examples of defining date durations using the cal::date_duration type in EdgeQL. Represents spans of months and days.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <cal::date_duration>'5 days';\nselect <cal::local_date>'2022-06-25' + <cal::date_duration>'5 days';\nselect <cal::local_date>'2022-06-30' - <cal::local_date>'2022-06-25';\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsValidTrajectory Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsValidTrajectory function which tests if a geometry is a valid trajectory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_131\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::isvalidtrajectory( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Creating Data Branch in EdgeDB\nDESCRIPTION: Creates a new data branch named 'my_new_feature' from the main branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ncreate data branch my_new_feature from main;\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB 5 on Debian/Ubuntu\nDESCRIPTION: Command to install EdgeDB version 5 on Debian/Ubuntu systems.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install edgedb-5\n```\n\n----------------------------------------\n\nTITLE: Set Intersection Operation\nDESCRIPTION: Demonstrates finding common elements between two sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select {1, 2, 3, 4, 5} intersect {3, 4, 5, 6, 7};\n{3, 5, 4}\ndb> select {'a', 'b', 'c', 'd', 'e'} intersect {'c', 'd', 'e', 'f', 'g'};\n{'e', 'd', 'c'}\n```\n\n----------------------------------------\n\nTITLE: Implicit Cast with Operators\nDESCRIPTION: Demonstrates implicit casting when using operators with different numeric types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/casts.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 1 + 2.3;\n{3.3}\n```\n\n----------------------------------------\n\nTITLE: Checking if Geometry Has Z Dimension\nDESCRIPTION: Function that checks if a geometry has a Z dimension (3D). Maps to the PostGIS st_hasz function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_113\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::hasz( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Converting PostGIS Geometry to HEXEWKB Format\nDESCRIPTION: Converts a PostGIS geometry to HEXEWKB (Hexadecimal Extended Well-Known Binary) format. Supports specifying endianness (little-endian NDR or big-endian XDR).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::ashexewkb( \n  a0: ext::postgis::geometry \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::ashexewkb( \n  a0: ext::postgis::geometry, \n  a1: std::str, \n) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Database Feature Branch\nDESCRIPTION: Command to rebase a database feature branch in Gel, aligning it with changes from the main branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/branches.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel branch rebase main\n```\n\n----------------------------------------\n\nTITLE: Implementing Error and Message Handlers for SSE in React TypeScript\nDESCRIPTION: This snippet defines the error and message handlers for Server-Sent Events in a React application. The error handler sets error messages based on predefined constants, while the message handler processes streaming chunks of data from the server response.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handleError(err: any) {\n    setIsLoading(false);\n\n    const errMessage =\n    err.data === errors.flagged ? errors.flagged : errors.default;\n\n    setError(errMessage);\n}\n\n\nfunction handleMessage(e: MessageEvent<any>) {\n    try {\n        setIsLoading(false);\n        if (e.data === \"[DONE]\") return;\n\n        const chunkResponse = JSON.parse(e.data);\n        const chunk = chunkResponse.choices[0].delta?.content || \"\";\n        setAnswer((answer) => answer + chunk);\n    } catch (err) {\n        handleError(err);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Gel Cloud Instance\nDESCRIPTION: Command to upgrade a Gel Cloud instance to a specific version\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance upgrade \\\n    --to-version <target-version> \\\n    -I <org-name>/<instance-name>\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::Cast Object Structure\nDESCRIPTION: Shows how to query the structure of the schema::Cast type including its links and properties using EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/casts.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Cast';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP GET Request for Version Check in Gel CLI\nDESCRIPTION: Shows the HTTP GET request made by Gel CLI to check for the latest version. The request is sent to packages.geldata.com with a specific User-Agent header.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/network.rst#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /archive/.jsonindexes/linux-x86_64.json HTTP/1.1\nhost: packages.geldata.com\ncontent-length: 0\nuser-agent: gel\n```\n\n----------------------------------------\n\nTITLE: Checking if Geometry Has M Dimension\nDESCRIPTION: Function that checks if a geometry has a measure (M) dimension. Maps to the PostGIS st_hasm function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_112\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::hasm( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Dollar-Quoted String Examples in EdgeQL\nDESCRIPTION: Examples of dollar-quoted strings that allow embedding quotes and special characters without escaping.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/lexical.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect $$hello\nworld$$;\nselect $$hello\\nworld$$;\nselect $$\"hello\" 'world'$$;\nselect $a$hello$$world$$$a$;\n```\n\n----------------------------------------\n\nTITLE: Combined EdgeQL Set Statement Examples\nDESCRIPTION: Shows various examples of using the set statement including module settings, aliases, and global variables.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/sess_set_alias.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nset module foo;\n\nset alias foo AS module std;\n\nset global current_user_id :=\n    <uuid>'00ea8eaa-02f9-11ed-a676-6bd11cc6c557';\n```\n\n----------------------------------------\n\nTITLE: Snapping and Grid Operations in PostGIS\nDESCRIPTION: Functions for aligning geometries through snapping operations. These include snapping points of one geometry to another and aligning geometries to a regular grid with specified precision.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_235\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::snap( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n  a2: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::snaptogrid( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n) ->  ext::postgis::geometry\next::postgis::snaptogrid( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n  a2: std::float64, \\\n) ->  ext::postgis::geometry\next::postgis::snaptogrid( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n  a2: std::float64, \\\n  a3: std::float64, \\\n  a4: std::float64, \\\n) ->  ext::postgis::geometry\next::postgis::snaptogrid( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n  a2: std::float64, \\\n  a3: std::float64, \\\n  a4: std::float64, \\\n  a5: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Comparing Geography Values\nDESCRIPTION: Function for comparing two geography values, returning an integer result. Wraps the PostGIS geography_cmp function for ordering geography objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_91\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geography_cmp( \\\n                    a0: ext::postgis::geography, \\\n                    a1: ext::postgis::geography, \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: BigInt Literal Examples in EdgeQL\nDESCRIPTION: Demonstrates the syntax and usage of bigint literals in EdgeQL, including basic integers and exponential notation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 42n is bigint;\n{true}\n\ndb> select 1e+100n is bigint;\n{true}\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Configure Command with CLI\nDESCRIPTION: This snippet shows the general syntax for using the 'gel configure' command. It includes options for specifying connection details, the action to perform, and various parameters and their values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_configure.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel configure [<connection-options>] <action> \\\n    [<parameter> <value>] \\\n    [<parameter-class> --<property>=<value> ...]\n```\n\n----------------------------------------\n\nTITLE: Input Shape Descriptor Definition\nDESCRIPTION: Defines structures for input shape descriptors and their elements, used for encoding objects as sparse objects on the wire protocol.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nstruct InputShapeDescriptor {\n    uint8              tag = 8;\n    uuid               id;\n    uint16             element_count;\n    InputShapeElement  elements[element_count];\n};\n\nstruct InputShapeElement {\n    uint32              flags;\n    uint8<Cardinality>  cardinality;\n    string              name;\n    uint16              type;\n};\n```\n\n----------------------------------------\n\nTITLE: Running gel migration apply command in bash\nDESCRIPTION: Command synopsis for applying migration scripts to the database. This command finds all unapplied migrations in the dbschema/migrations/ directory and sequentially runs them on the target instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/gel_migration_apply.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel migration apply [<options>]\n```\n\n----------------------------------------\n\nTITLE: Introspecting std::AND Operator in EdgeQL\nDESCRIPTION: This query provides detailed introspection of the std::AND operator, including its kind, parameters, return type, and annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/operators.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect Operator {\n    name,\n    operator_kind,\n    annotations: { name, @value },\n    params: {\n        kind,\n        name,\n        num,\n        typemod,\n        type: { name },\n        default,\n    },\n    return_typemod,\n    return_type: { name },\n}\nfilter .name = 'std::AND';\n```\n\n----------------------------------------\n\nTITLE: Creating Note Callouts\nDESCRIPTION: Examples of creating note callouts with and without titles in reStructuredText.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. note::\n\n    This paragraph is a note.\n\n.. note:: A Note\n\n    This paragraph is a note.\n```\n\n----------------------------------------\n\nTITLE: JSON format for EdgeQL POST requests\nDESCRIPTION: Structure of the JSON payload for POST requests to the EdgeQL HTTP endpoint, showing query, variables, and globals fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/http.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"select Person {*} filter .name = <str>$name;\",\n  \"variables\": { \"name\": \"John\" },\n  \"globals\": { \"default::global_name\": \"value\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to BigInt in EdgeQL\nDESCRIPTION: Examples of to_bigint() function, which parses a string into a bigint value. Demonstrates usage with optional format strings to control parsing behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select to_bigint('-000,012,345', 'S099,999,999,999');\n{-12345n}\ndb> select to_bigint('31st', '999th');\n{31n}\n```\n\n----------------------------------------\n\nTITLE: Patching Singledispatch for Improved Profiling in Python\nDESCRIPTION: This code snippet shows how to patch the functools.singledispatch decorator early in the program to improve profiling results for single-dispatch generic functions. This helps maintain call relationship information in the generated flame graphs.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/tools/profiling/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom edb.tools.profiling import tracing_singledispatch\ntracing_singledispatch.patch_functools()\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Kubernetes Cluster\nDESCRIPTION: Commands to create a Kubernetes cluster and configure service accounts with necessary permissions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/gcp.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud container clusters create ${PROJECT}-k8s \\\n    --zone=us-west2-a \\\n    --num-nodes=1 \\\n    --project=$PROJECT\n```\n\n----------------------------------------\n\nTITLE: Redefining Computed Property in EdgeDB\nDESCRIPTION: Redefines the computed property 'number_of_connections' in User type to count the number of friends.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  alter property number_of_connections using (\n    count(.friends)\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: String Line Continuation Example in EdgeQL\nDESCRIPTION: Demonstrates the line continuation symbol usage in EdgeQL strings, where backslash followed by whitespace is omitted up to the next non-whitespace character.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 'Hello, \\\n...         world';\n{'\"Hello, world\"'}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Timestamp Rounding to Microsecond Precision in EdgeDB\nDESCRIPTION: This code block shows examples of how timestamps with nanosecond precision are rounded to microsecond precision when stored in EdgeDB. It demonstrates the 'rounding to the nearest even' strategy used for this conversion.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/datetime.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2022-02-24T05:43:03.123456789Z → 2022-02-24T05:43:03.123457Z\n2022-02-24T05:43:03.000002345Z → 2022-02-24T05:43:03.000002Z\n2022-02-24T05:43:03.000002500Z → 2022-02-24T05:43:03.000002Z\n2022-02-24T05:43:03.000002501Z → 2022-02-24T05:43:03.000003Z\n2022-02-24T05:43:03.000002499Z → 2022-02-24T05:43:03.000002Z\n2022-02-24T05:43:03.000001234Z → 2022-02-24T05:43:03.000001Z\n2022-02-24T05:43:03.000001500Z → 2022-02-24T05:43:03.000002Z\n2022-02-24T05:43:03.000001501Z → 2022-02-24T05:43:03.000002Z\n2022-02-24T05:43:03.000001499Z → 2022-02-24T05:43:03.000001Z\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Container Deployment for Gel\nDESCRIPTION: Simple command to run a Gel database container in development mode without data persistence\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/docker.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name gel -d \\\n   -e GEL_SERVER_SECURITY=insecure_dev_mode \\\n   geldata/gel\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS curve N function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_curven function, which returns the Nth curve (linestring or circular string) from a geometry collection or multi-curve.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_54\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::curven( \\\n  geometry: ext::postgis::geometry, \\\n  i: std::int64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Defining Relative Duration in EdgeQL\nDESCRIPTION: Examples of defining relative durations using the cal::relative_duration type in EdgeQL. Supports units from milliseconds to millennia.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <cal::relative_duration>'15 milliseconds';\nselect <cal::relative_duration>'2 months 3 weeks 45 minutes';\nselect <cal::relative_duration>'-7 millennia';\n```\n\n----------------------------------------\n\nTITLE: Creating MultiPolygon from Text in EdgeQL\nDESCRIPTION: Creates a MultiPolygon geometry from text representation with an optional SRID parameter. This function exposes the PostGIS st_multipolygonfromtext function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_182\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::multipolygonfromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::multipolygonfromtext( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Describe Commands Examples\nDESCRIPTION: Series of describe commands showing different output formats (DDL, SDL, text) for the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/describe.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> describe object User;\n{\n    \"create type default::User extending default::Named {\n    create required single property email -> std::str {\n        create annotation std::title := 'Contact email';\n    };\n};\"}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Decimal in EdgeQL\nDESCRIPTION: Examples of to_decimal() function, which parses a string into a decimal value. Demonstrates usage with and without format strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select to_decimal('-000,012,345', 'S099,999,999,999');\n{-12345.0n}\ndb> select to_decimal('-012.345');\n{-12.345n}\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineInterpolatePoint Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineInterpolatePoint function which returns a point interpolated along a line at a fractional distance. For geography types, supports specifying whether to use a spheroid for calculations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_141\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::lineinterpolatepoint( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::lineinterpolatepoint( \\\n                    a0: optional std::str, \\\n                    a1: optional std::float64, \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::lineinterpolatepoint( \\\n                    a0: ext::postgis::geography, \\\n                    a1: std::float64, \\\n                    use_spheroid: std::bool = true, \\\n                  ) ->  ext::postgis::geography\n```\n\n----------------------------------------\n\nTITLE: Dropping a Trigger in EdgeDB Using DDL\nDESCRIPTION: Demonstrates how to remove an existing trigger using DDL commands. This example removes the log_insert trigger from the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  drop trigger log_insert;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS crosses function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_crosses function, which tests whether two geometries spatially cross (have interior points in common but not all).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_53\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::crosses( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Vectorstore in Python\nDESCRIPTION: Method to update an existing record in the vector store. It updates only specified fields and automatically generates a new embedding if text is provided without an embedding.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef update_record(self, record: Record) -> Optional[uuid.UUID]:\n    # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Parameters in SQL for Gel\nDESCRIPTION: Demonstrates how to set and show connection parameters, including Gel-specific settings like globals and access policies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSET search_path TO my_module;\n\nSHOW search_path;\n\nRESET search_path;\n\nSET \"global my_module::hello\" TO 'world';\n\nSET \"global my_module::current_user_id\"\n TO \"592c62c6-73dd-4b7b-87ba-46e6d34ec171\";\nSET \"global my_module::is_admin\" TO 1;\n```\n\n----------------------------------------\n\nTITLE: Create Azure Resource Group\nDESCRIPTION: Commands to set resource group name and create a new resource group in the westus region\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ GROUP=my-group-name\n$ az group create --name $GROUP --location westus\n```\n\n----------------------------------------\n\nTITLE: Modified User Schema with Renamed Property in EdgeDB SDL\nDESCRIPTION: Schema with the 'name' property renamed to 'nam' to demonstrate property renaming in migrations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_43\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    nam: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Altering Type Annotation in EdgeQL\nDESCRIPTION: DDL command demonstrating how to modify an existing annotation value on a User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/annotations.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  alter annotation title := \"User type\";\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Bookmark Data from JSON to EdgeDB\nDESCRIPTION: This Python script demonstrates how to import Bookmark data from a JSON dump into EdgeDB by updating User objects with multi-link data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfor line in open('bookmarks.json'):\n    client.query('''\n        with data := to_json(<str>$line)\n        update User\n        filter .app_id = <int32>data['user_id']\n        set {\n            bookmark += (\n                select Post {\n                    @note := <str>data['note']\n                }\n                filter .app_id = <int32>data['post_id']\n            ),\n        }\n    ''',\n    line=line)\n```\n\n----------------------------------------\n\nTITLE: Required Link Definition\nDESCRIPTION: Example of declaring a required link that must point to exactly one target instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required best_friend: Person;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Analytical Queries with GROUP in EdgeQL\nDESCRIPTION: Example of using the new GROUP expression to partition and aggregate data in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ngroup Movie { title } by .release_year;\n```\n\n----------------------------------------\n\nTITLE: Defining MultiPolygon from WKT in EdgeQL\nDESCRIPTION: Creates a MultiPolygon geometry from WKT (Well-Known Text) representation with an optional SRID parameter. When SRID is not provided, it defaults to 0. This function exposes the PostGIS st_mpolyfromtext function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_175\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::mpolyfromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::mpolyfromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Querying Movies Without Reviews\nDESCRIPTION: Finds all movies that have no associated reviews using the MovieAlias type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    MovieAlias(\n        filter: {\n            reviews: {exists: false},\n        }\n    ) {\n        id\n        title\n        year\n        description\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_linemerge Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_linemerge function in EdgeDB. It takes a geometry input and optionally a boolean, returning a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_146\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::linemerge( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::linemerge( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::bool, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Updating Statistics for All User-Accessible Data in EdgeDB (EdgeQL)\nDESCRIPTION: This snippet demonstrates how to update statistics for all user-accessible data in the database using the 'administer statistics_update()' function without any parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/statistics_update.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nadminister statistics_update();\n```\n\n----------------------------------------\n\nTITLE: CLI Command - Info with Get Option\nDESCRIPTION: Enhanced info command with new get option to retrieve specific configuration paths like config-dir, cache-dir, data-dir, or service-dir.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_22\n\nLANGUAGE: cli\nCODE:\n```\nedgedb info --get config-dir\n```\n\n----------------------------------------\n\nTITLE: EdgeQL User Query with Shape Example\nDESCRIPTION: Example of querying User objects with shape specification using the [is ...] operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User {\n    favorites[is Book]: {\n        title\n    }\n}\nfilter .id = <uuid>$id;\n```\n\n----------------------------------------\n\nTITLE: Using detached for Cartesian Products in EdgeQL\nDESCRIPTION: Demonstrates how to use the detached keyword to achieve cartesian product behavior in legacy path scoping.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/path_resolution.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User.first_name ++ ' ' ++ detached User.last_name;\n```\n\n----------------------------------------\n\nTITLE: Deploying Gel Cloud Application to Fly.io\nDESCRIPTION: Command to deploy your Gel Cloud application to Fly.io. This initiates the build and deployment process after configuration is complete.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/deploy/fly.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flyctl deploy\n```\n\n----------------------------------------\n\nTITLE: Calculating Azimuth Between PostGIS Geometries/Geographies\nDESCRIPTION: Calculates the azimuth (direction angle) between two PostGIS geometries or geographies. Returns the angle in radians from north.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::azimuth( \n  geom1: ext::postgis::geometry, \n  geom2: ext::postgis::geometry, \n) ->  std::float64\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::azimuth( \n  geog1: ext::postgis::geography, \n  geog2: ext::postgis::geography, \n) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Blog Posts in Gel\nDESCRIPTION: EdgeQL queries for inserting initial blog post data into the Gel database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert BlogPost {\n  title := \"This one weird trick makes using databases fun\",\n  content := \"Use Gel\"\n};\n\ninsert BlogPost {\n  title := \"How to build a blog with Gel and Next.js\",\n  content := \"Let's start by scaffolding our app...\"\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Generation Targets\nDESCRIPTION: Commands to generate code with different targets. The default is async, but blocking code can also be generated.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/codegen.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel-py --target async        # generate async function (default)\n$ gel-py --target blocking     # generate blocking code\n```\n\n----------------------------------------\n\nTITLE: Provisioning DigitalOcean Droplet for Gel\nDESCRIPTION: Creates a DigitalOcean droplet for Gel using doctl, specifying image, region, size, and SSH keys.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ IP=\"$( \\\n         doctl compute droplet create gel \\\n             --image gel \\\n             --region sfo3 \\\n             --size s-2vcpu-4gb \\\n             --ssh-keys $SSH_KEY_IDS \\\n             --format PublicIPv4 \\\n             --no-header \\\n             --wait )\"\n```\n\n----------------------------------------\n\nTITLE: Defining Types and Indexes in EdgeDB SDL\nDESCRIPTION: This SDL code defines an abstract type 'Addressable' and a concrete type 'User' with properties, links, and an index on the 'name' property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/indexes.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type Addressable {\n    property address: str;\n}\n\ntype User extending Addressable {\n    # define some properties and a link\n    required property name: str;\n\n    multi link friends: User;\n\n    # define an index for User based on name\n    index on (.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Gel Instance Credentials\nDESCRIPTION: CLI command to retrieve instance hostnames and ports for callback URL configuration\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance credentials\n```\n\n----------------------------------------\n\nTITLE: Using Detached Operator with Shapes in EdgeQL\nDESCRIPTION: Demonstrates the adjusted precedence of the detached operator when used with shapes, allowing more intuitive interpretation of references within the shape.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b3.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect detached User {\n    exclamation := User.name ++ '!'\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Character Schema Definition in EdgeDB\nDESCRIPTION: Simple SDL schema defining a Character type with just a name property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_24\n\nLANGUAGE: sdl\nCODE:\n```\ntype Character {\n  required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing and Slicing Bytes in EdgeQL\nDESCRIPTION: Examples of accessing individual bytes and creating sub-sequences from bytes values using indexing and slicing operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bytes.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select b'binary \\x01\\x02\\x03\\x04 ftw!'[2];\n{b'n'}\ndb> select b'binary \\x01\\x02\\x03\\x04 ftw!'[8];\n{b'\\x02'}\ndb> select b'\\x01\\x02\\x03\\x04 ftw!'[2:-1];\n{b'\\x03\\x04 ftw'}\ndb> select b'some bytes'[2:-3];\n{b'me by'}\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Int32 in EdgeQL\nDESCRIPTION: Demonstrates int32 conversion using string parsing with format strings and byte conversion with endianness specification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_21\n\nLANGUAGE: edgeql\nCODE:\n```\nselect to_int32('1000023');\nselect to_int32('1000023%', '9999999%');\nselect to_int32(b'\\x01\\x02\\x00\\x07', Endian.Big);\nselect to_int32(b'\\x07\\x00\\x02\\x01', Endian.Little);\n```\n\n----------------------------------------\n\nTITLE: JSON String Operations in EdgeQL\nDESCRIPTION: Examples of JSON string indexing and slicing operations in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc3.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_json('\"hello\"')[0];\n{\"\\\"h\\\"\"}\ndb> select to_json('\"hello\"')[1:3];\n{\"\\\"el\\\"\"}\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Book with Complex Filtering\nDESCRIPTION: Demonstrates deleting a single book using author filter, sorting, and limit constraints\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/mutations.rst#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_one_book {\n    delete_Book(\n        filter: {\n            author: {\n                name: {\n                    eq: \"Lewis Carroll\"\n                }\n            }\n        },\n        order: {\n            title: {\n                dir: ASC\n            }\n        },\n        first: 1\n    ) {\n        title\n        synopsis\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    delete Book\n    filter\n        Book.author.name = 'Lewis Carroll'\n    order by\n        Book.title ASC\n    limit 1\n) {\n    title,\n    synopsis\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Instance Start Command\nDESCRIPTION: This snippet shows the basic syntax for using the 'gel instance start' command. It allows starting a Gel instance with an optional '--foreground' flag to run the instance in the foreground instead of using systemd.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_start.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngel instance start [--foreground] <name>\n```\n\n----------------------------------------\n\nTITLE: Introspecting Tuple Type Schema\nDESCRIPTION: Demonstrates querying schema metadata for the schema::Tuple type to show its structure and properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/colltypes.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Tuple';\n```\n\n----------------------------------------\n\nTITLE: Creating EdgeDB Migration in Bash\nDESCRIPTION: Command to create a new EdgeDB migration using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb migration create\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Work Memory in EdgeQL\nDESCRIPTION: Sets the query_work_mem parameter at the instance level to 4 mebibytes for memory allocation during query execution.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/configure.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure instance set query_work_mem := <cfg::memory>'4MiB';\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeDB Calendar Types\nDESCRIPTION: Defines calendar-specific types for EdgeDB including local datetime, date, time, and duration types.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/api/types.txt#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n00000000-0000-0000-0000-00000000010B std::cal::local_datetime\n00000000-0000-0000-0000-00000000010C std::cal::local_date\n00000000-0000-0000-0000-00000000010D std::cal::local_time\n00000000-0000-0000-0000-000000000111 std::cal::relative_duration\n00000000-0000-0000-0000-000000000112 std::cal::date_duration\n```\n\n----------------------------------------\n\nTITLE: Deploy Gel Container\nDESCRIPTION: Commands to deploy Gel container with PostgreSQL connection and SSL configuration\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ PG_HOST=$(\n    az postgres flexible-server list \\\n      --resource-group $GROUP \\\n      --query \"[?name=='$PG_SERVER_NAME'].fullyQualifiedDomainName | [0]\" \\\n      --output tsv\n  )\n$ DSN=\"postgresql://gel_admin:$PASSWORD@$PG_HOST/postgres?sslmode=require\"\n$ az container create \\\n    --registry-username $DOCKER_USER \\\n    --registry-password $DOCKER_PASSWORD \\\n    --registry-login-server index.docker.io \\\n    --os-type Linux \\\n    --cpu 1 \\\n    --memory 1 \\\n    --resource-group $GROUP \\\n    --name gel-container-group \\\n    --image geldata/gel \\\n    --dns-name-label geldb \\\n    --ports 5656 \\\n    --secure-environment-variables \\\n      \"GEL_SERVER_PASSWORD=$PASSWORD\" \\\n      \"GEL_SERVER_BACKEND_DSN=$DSN\" \\\n    --environment-variables \\\n      GEL_SERVER_TLS_CERT_MODE=generate_self_signed\n```\n\n----------------------------------------\n\nTITLE: Invalid datetime Casting Examples in EdgeQL\nDESCRIPTION: Shows examples of invalid datetime string formats when casting to datetime type in EdgeQL. Demonstrates the requirement for ISO 8601 format with timezone.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <datetime>'January 01 2019 UTC';\nInvalidValueError: invalid input syntax for type\nstd::datetime: 'January 01 2019 UTC'\nHint: Please use ISO8601 format. Alternatively \"to_datetime\"\nfunction provides custom formatting options.\n\ndb> select <datetime>'2019-01-01T15:01:22';\nInvalidValueError: invalid input syntax for type\nstd::datetime: '2019-01-01T15:01:22'\nHint: Please use ISO8601 format. Alternatively \"to_datetime\"\nfunction provides custom formatting options.\n```\n\n----------------------------------------\n\nTITLE: Querying Characters with Enum Class Values in EdgeDB\nDESCRIPTION: EdgeQL query showing how the character class values appear after being converted from strings to enum values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Character {name, class};\n{\n  default::Character {name: 'Alice', class: warrior},\n  default::Character {name: 'Billie', class: scholar},\n  default::Character {name: 'Cameron', class: rogue},\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Object Type Details in EdgeQL\nDESCRIPTION: Demonstrates how to inspect the full metadata of an object type using the splat operator on __type__.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person.__type__ {*} limit 1;\n```\n\n----------------------------------------\n\nTITLE: Using the gel branch wipe command\nDESCRIPTION: The basic syntax for using the gel branch wipe command. This command destroys the contents of a specified branch and resets its schema to the initial state.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/gel_branch_wipe.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel branch wipe [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Indexing Link Properties\nDESCRIPTION: Shows how to create an index on a link property using an abstract link type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nabstract link friendship {\n  strength: float64;\n  index on (__subject__@strength);\n}\n\ntype Person {\n  required name: str { constraint exclusive };\n\n  multi friends: Person {\n    extending friendship;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Vacuum Single Type in EdgeQL\nDESCRIPTION: Example showing how to vacuum a specific type to reclaim storage space.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/vacuum.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nadminister vacuum(SomeType);\n```\n\n----------------------------------------\n\nTITLE: Converting PostGIS Geometry to MARC21 Format\nDESCRIPTION: Converts a PostGIS geometry to MARC21 (MAchine-Readable Cataloging) format. Allows specifying the output format for coordinates.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::asmarc21( \n  geom: ext::postgis::geometry, \n  format: std::str = 'hdddmmss', \n) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeDB Schema in SDL\nDESCRIPTION: Example schema definition for Person, Content, Movie, and TVShow types in EdgeDB's Schema Definition Language (SDL).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type Person {\n    required name: str;\n  }\n\n  abstract type Content {\n    required title: str {\n      constraint exclusive;\n    };\n    multi actors: Person {\n      character_name: str;\n    };\n  }\n\n  type Movie extending Content {\n    release_year: int64;\n  }\n\n  type TVShow extending Content {\n    num_seasons: int64;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from WKB Binary\nDESCRIPTION: Function that creates a geometry value from Well-Known Binary (WKB) representation, with an optional SRID parameter. Maps to the PostGIS st_geomfromwkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_109\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromwkb( \\\n                    a0: std::bytes \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::geomfromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Running Generators with pnpm\nDESCRIPTION: Command to run a generator using pnpm with a specific generator name and options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm exec generate <generator> [options]\n```\n\n----------------------------------------\n\nTITLE: Querying Introspection Types in EdgeQL\nDESCRIPTION: Query that lists all types used in introspection by filtering schema::ObjectType names that start with 'schema::'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect name := schema::ObjectType.name\nfilter name like 'schema::%';\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineCrossingDirection Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineCrossingDirection function which determines how two linestrings cross each other.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_135\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::linecrossingdirection( \\\n                    line1: ext::postgis::geometry, \\\n                    line2: ext::postgis::geometry, \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS collect function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_collect function, which creates a GeometryCollection or Multi-geometry from an array of geometries or from two geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_40\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::collect( \\\n  a0: array<ext::postgis::geometry> \\\n) ->  ext::postgis::geometry\next::postgis::collect( \\\n  geom1: optional ext::postgis::geometry, \\\n  geom2: optional ext::postgis::geometry, \\\n) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedding Generation Script\nDESCRIPTION: Sets up the basic structure of the generate-embeddings.ts file, including imports, environment configuration, and function declarations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { promises as fs } from \"fs\";\nimport { join } from \"path\";\nimport dotenv from \"dotenv\";\nimport { encode } from \"gpt-tokenizer\";\nimport * as gel from \"gel\";\nimport e from \"dbschema/edgeql-js\";\nimport { initOpenAIClient } from \"./utils\";\n\ndotenv.config({ path: \".env.local\" });\n\nconst openai = initOpenAIClient();\n\ninterface Section {\n  id?: string;\n  tokens: number;\n  content: string;\n  embedding: number[];\n}\n\nasync function walk(dir: string): Promise<string[]> {\n  // …\n}\n\nasync function prepareSectionsData(\n  sectionPaths: string[]\n): Promise<Section[]> {\n  // …\n}\n\n\nasync function storeEmbeddings() {\n  // …\n}\n\n(async function main() {\n  await storeEmbeddings();\n})();\n```\n\n----------------------------------------\n\nTITLE: Ordering Schema Definitions in GraphQL\nDESCRIPTION: GraphQL schema definitions for ordering Author and Book objects, specifying which fields can be used for ordering results.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_7\n\nLANGUAGE: graphql-schema\nCODE:\n```\n# this is Author-specific\ninput OrderAuthor {\n    # fields available for ordering (properties in EdgeQL)\n    name: Ordering\n}\n\n# this is Book-specific\ninput OrderBook {\n    # fields available for ordering (properties in EdgeQL)\n    title: Ordering\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Int16 in EdgeQL\nDESCRIPTION: Shows two methods of converting to int16: string parsing with optional format string and byte conversion with endianness specification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_20\n\nLANGUAGE: edgeql\nCODE:\n```\nselect to_int16('23');\nselect to_int16('23%', '99%');\nselect to_int16(b'\\x00\\x07', Endian.Big);\nselect to_int16(b'\\x07\\x00', Endian.Little);\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Migration Squash Command Output\nDESCRIPTION: Shows the CLI output when running the migration squash command, including warning messages and recommendations before proceeding.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nCurrent database revision is:\nm16ixoukn7ulqdn7tp6lvx2754hviopanufv2lm6wf4x2borgc3g6a\nWhile squashing migrations is non-destructive,\nit may lead to manual work if done incorrectly.\n\nItems to check before using --squash:\n1. Ensure that `./dbschema` dir is comitted\n2. Ensure that other users of the database have the revision\nabove or can create database from scratch.\n    To check a specific instance, run:\n    gel -I <name> migration log --from-db --newest-first --limit 1\n1. Merge version control branches that contain schema changes\nif possible.\n\nProceed? [y/n]\n```\n\n----------------------------------------\n\nTITLE: Casting Special Types in EdgeQL\nDESCRIPTION: Demonstrates casting to special types like datetime, int16, and UUID that don't have dedicated literal syntax.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/types.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <datetime>'1999-03-31T15:17:00Z';\nselect <int16>42;\nselect <uuid>'89381587-705d-458f-b837-860822e1b219';\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to Multi-Geometry in EdgeQL\nDESCRIPTION: Converts a geometry to a multi-geometry. This function exposes the PostGIS st_multi function which ensures a geometry is of multi type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_176\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::multi( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scope Effects on Path Resolution in EdgeQL\nDESCRIPTION: Illustrates how scopes affect path resolution in legacy path scoping, including sibling and nested scopes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/path_resolution.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nselect ((select User.first_name), (select User.last_name));\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User {\n  name:= (select User.first_name) ++ ' ' ++ (select User.last_name)\n};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (Person.name, count(Person.friends));\n```\n\n----------------------------------------\n\nTITLE: Introspecting Array Type Schema in EdgeQL\nDESCRIPTION: Demonstrates how to query the schema metadata for the schema::Array type, showing its links and properties structure.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/colltypes.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Array';\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineExtend Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineExtend function which extends a linestring by adding length to either or both ends.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_136\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::lineextend( \\\n                    geom: ext::postgis::geometry, \\\n                    distance_forward: std::float64, \\\n                    distance_backward: std::float64 = 0.0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Running Gel Tests\nDESCRIPTION: Examples of running Gel tests, including running specific test files and pattern matching test names\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/code.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ edb test\n$ edb test tests/test_edgeql_calls.py\n$ edb test tests/test_edgeql_calls.py tests/test_edgeql_for.py\n$ edb test -k test_edgeql_calls_01\n$ edb test -k test_edgeql_calls\n```\n\n----------------------------------------\n\nTITLE: Inserting Object with Custom ID in EdgeQL\nDESCRIPTION: Example of inserting an object with a user-provided ID in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert User {\n  id := <uuid>\"5abf67cc-9f9f-4bbc-b009-d117d463a12e\",\n  email := \"jayz@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Strict Security Policy for Gel Instance\nDESCRIPTION: Configures the Gel instance to use strict security policy after initial setup is complete.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ printf \"GEL_SERVER_BACKEND_DSN=${DSN} \\\n\\nGEL_SERVER_SECURITY=strict\\n\" \\\n| ssh root@$IP -T \"cat > /etc/gel/env\"\n\n$ ssh root@$IP \"systemctl restart gel.service\"\n```\n\n----------------------------------------\n\nTITLE: Altering a Property with Annotation in EdgeQL\nDESCRIPTION: Sets the 'title' annotation of the 'address' property on the 'User' object type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  alter property address\n    create annotation title := \"Home address\";\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Data Message Structure in EdgeDB Protocol\nDESCRIPTION: Defines the structure of the Data message sent by the server, including data elements and their encoding based on type descriptors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_14\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.Data\n\n.. eql:struct:: edb.protocol.DataElement\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS covered by function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_coveredby function, which tests if no point in the first geometry lies outside the second geometry. Implemented for both geometry and geography types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_50\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::coveredby( \\\n  a0: optional std::str, \\\n  a1: optional std::str, \\\n) -> optional std::bool\next::postgis::coveredby( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  std::bool\next::postgis::coveredby( \\\n  geog1: ext::postgis::geography, \\\n  geog2: ext::postgis::geography, \\\n) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Querying Inserted Character Data in EdgeDB\nDESCRIPTION: EdgeQL query showing the character data after the insertion migration has been applied.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_30\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Character {name};\n{\n  default::Character {name: 'Alice'},\n  default::Character {name: 'Billie'},\n  default::Character {name: 'Cameron'},\n  default::Character {name: 'Dana'},\n}\n```\n\n----------------------------------------\n\nTITLE: Running Generators with Deno\nDESCRIPTION: Command to run a generator using Deno with a specific generator name and options, including necessary permissions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ deno run \\\n  --allow-all \\\n  npm:@gel/generate <generator> [options]\n```\n\n----------------------------------------\n\nTITLE: Running the queries generator\nDESCRIPTION: Commands to run the queries generator using different JavaScript runtimes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/queries.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate queries\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ deno run --allow-all npm:@gel/generate queries\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bunx @gel/generate queries\n```\n\n----------------------------------------\n\nTITLE: Dropping a Branch in EdgeQL\nDESCRIPTION: Removes an existing branch permanently. This cannot be executed while there are active connections to the target branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/branches.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop branch appdb;\n```\n\n----------------------------------------\n\nTITLE: Connection Options for gel-py\nDESCRIPTION: List of available connection options for the gel-py command, including instance, DSN, credentials, host, port, branch, user, password, and TLS settings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/codegen.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-I, --instance <instance>\n--dsn <dsn>\n--credentials-file <path/to/credentials.json>\n-H, --host <host>\n-P, --port <port>\n-b, --branch <branch>\n-u, --user <user>\n--password\n--password-from-stdin\n--tls-ca-file <path/to/certificate>\n--tls-security <insecure | no_host_verification | strict | default>\n```\n\n----------------------------------------\n\nTITLE: Drop Module Command\nDESCRIPTION: EdgeQL command for removing an empty module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop module payments;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type with Properties\nDESCRIPTION: SDL definition of an Example type with various property types to demonstrate assignment casting behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/casts.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype Example {\n    property p_int16: int16;\n    property p_float32: float32;\n    property p_json: json;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SRID for Geometry in EQL\nDESCRIPTION: Sets the SRID (Spatial Reference System Identifier) for a geometry or geography. This function exposes the PostGIS st_setsrid functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_229\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::setsrid( \\\n  geom: ext::postgis::geometry, \\\n  srid: std::int64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Resetting Vector Search Configuration in EdgeQL\nDESCRIPTION: Shows how to reset vector search parameters to their default values at the session level. This example resets the probes setting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> configure session reset ext::pgvector::Config::probes;\nOK: CONFIGURE SESSION\n```\n\n----------------------------------------\n\nTITLE: Creating Gel Instance\nDESCRIPTION: Explicitly creates a new Gel instance with specified name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/cli.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance create my_instance\n```\n\n----------------------------------------\n\nTITLE: Free Object Selection in TypeScript\nDESCRIPTION: Demonstrates how to select free objects by passing an object literal into e.select.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nconst movies = e.select(e.Movie, (movie) => ({\n  ...movie[\"*\"],\n}));\n\ne.select({\n  of: e.str(\"Movie\"),\n  count: e.count(movies),\n  data: movies,\n});\n```\n\n----------------------------------------\n\nTITLE: CLI Synopsis for Gel Project Upgrade Command\nDESCRIPTION: The basic command syntax for upgrading a Gel project instance. Supports optional parameters for controlling the upgrade process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_project/gel_project_upgrade.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel project upgrade [<options>]\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::Rewrite Object Type in EdgeQL\nDESCRIPTION: This query retrieves the structure of the schema::Rewrite object type, including its links and properties. It demonstrates how to examine the core components of the rewrite system.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/mutation_rewrites.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect schema::ObjectType {\n  name,\n  links: {\n    name\n  },\n  properties: {\n    name\n  }\n} filter .name = 'schema::Rewrite';\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Branch Merge Command\nDESCRIPTION: This snippet shows the basic syntax for running the 'gel branch merge' command. It merges the specified branch into the current branch using a fast-forward strategy.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/gel_branch_merge.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngel branch merge [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Using Scalar Alias in EdgeQL Query\nDESCRIPTION: Shows how to use the previously defined 'digits' alias in an EdgeQL query to count the number of elements in the set.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/aliases.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect count(digits);\n```\n\n----------------------------------------\n\nTITLE: Creating Local Gel Instance\nDESCRIPTION: Initializes a new Gel project locally, creating a gel.toml config file and a schema file. It also starts a Gel instance associated with the current directory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsClosed Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsClosed function which tests if a geometry is closed. For LineStrings, it checks if start and end points are coincident, while for PolyhedralSurfaces it tests if the surface is volumetrically closed.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_122\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::isclosed( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Running gel watch command with migrate option\nDESCRIPTION: Executes the gel watch command with the --migrate option to monitor schema changes and apply them in real-time to the current branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_watch.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel watch --migrate\n```\n\n----------------------------------------\n\nTITLE: Defining Constraint on Scalar Type in EdgeQL\nDESCRIPTION: This snippet demonstrates how to add a new constraint to an existing scalar type 'posint64' using the ALTER SCALAR TYPE command. It creates a max_value constraint of 100.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nalter scalar type posint64 {\n    create constraint max_value(100);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing tRPC React Query Integration\nDESCRIPTION: Command to install tRPC React Query integration package.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add @trpc/react-query\n$ # or yarn add @trpc/react-query\n$ # or npm install @trpc/react-query\n$ # or bun add @trpc/react-query\n```\n\n----------------------------------------\n\nTITLE: Implementing File Walking Function\nDESCRIPTION: Defines the walk function to recursively find all documentation file paths in a directory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nasync function walk(dir: string): Promise<string[]> {\n  const entries = await fs.readdir(dir, { withFileTypes: true });\n\n  return (\n    await Promise.all(\n      entries.map((entry) => {\n        const path = join(dir, entry.name);\n        if (entry.isFile()) return [path];\n        else if (entry.isDirectory()) return walk(path);\n        return [];\n      })\n    )\n  ).flat();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Orderable Link with Interest Extension\nDESCRIPTION: Creates an abstract link 'orderable' with a weight property and extends it in a multi-link 'interests'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_20\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate abstract link orderable {\n  create property weight: std::int64\n};\n\nalter type User {\n  create multi link interests extending orderable: Interest\n};\n```\n\n----------------------------------------\n\nTITLE: String Indexing in EdgeQL\nDESCRIPTION: Demonstrates string indexing operations in EdgeQL, including positive and negative indices and handling of out-of-bounds errors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 'some text'[1];\n{'o'}\ndb> select 'some text'[-1];\n{'t'}\ndb> select 'some text'[8];\n{'t'}\ndb> select 'some text'[9];\nInvalidValueError: string index 9 is out of bounds\ndb> select 'some text'[8:9];\n{'t'}\ndb> select 'some text'[9:10];\n{''}\n```\n\n----------------------------------------\n\nTITLE: In operator cardinality behavior in EdgeQL\nDESCRIPTION: This snippet shows how the 'in' operator has different cardinality behavior for its two inputs.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/cardinality.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select {1, 4} in {1, 2, 3};\n{true, false}\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS affine Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_affine function in EdgeQL. Takes a geometry and multiple float values as input, returns a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_3\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::affine( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                    a3: std::float64, \\\n                    a4: std::float64, \\\n                    a5: std::float64, \\\n                    a6: std::float64, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::affine( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                    a3: std::float64, \\\n                    a4: std::float64, \\\n                    a5: std::float64, \\\n                    a6: std::float64, \\\n                    a7: std::float64, \\\n                    a8: std::float64, \\\n                    a9: std::float64, \\\n                    a10: std::float64, \\\n                    a11: std::float64, \\\n                    a12: std::float64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_3DLength Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_3DLength function which calculates the 3D length of a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_134\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::length3d( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: CLI Command - Migration Upgrade Check\nDESCRIPTION: New CLI command for checking schema compatibility with different EdgeDB versions. Supports checking against specific versions, testing, nightly builds or channels.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_20\n\nLANGUAGE: cli\nCODE:\n```\nedgedb migration upgrade-check --to-version <version>\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Gel Path\nDESCRIPTION: Using the --get option to retrieve a specific path from the Gel installation. Valid path names include config-dir, cache-dir, data-dir, and service-dir.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_info.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--get <path-name>\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Names and Friend Count in Gel EdgeQL\nDESCRIPTION: This query demonstrates how Gel handles multiple aggregate functions in a single select statement. It returns a tuple containing an array of all unique Person names and a count of the total number of friends across all Person objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/path_resolution.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ngel> select (array_agg(distinct Person.name), count(Person.friends));\n{(['Fran', 'Bam', 'Emma', 'Geoff'], 3)}\n```\n\n----------------------------------------\n\nTITLE: Extracting Boundary from PostGIS Geometry\nDESCRIPTION: Extracts the boundary of a PostGIS geometry object. The boundary is the set of geometries of the next lower dimension.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::boundary( \n  a0: ext::postgis::geometry \n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Response Format for Text Embeddings Request\nDESCRIPTION: The JSON response structure returned by the embeddings endpoint. It includes the model used, the generated embedding vector (truncated to two values for brevity), and token usage statistics. The actual response would contain many more values in the embedding array.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"embedding\",\n      \"index\": 0,\n      \"embedding\": [-0.009434271, 0.009137661]\n    }\n  ],\n  \"model\": \"text-embedding-3-small\",\n  \"usage\": {\n    \"prompt_tokens\": 8,\n    \"total_tokens\": 8\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing Geometry in EdgeQL\nDESCRIPTION: Normalizes a geometry by applying standard operations. This function exposes the PostGIS st_normalize function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_185\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::normalize( \\\n                    geom: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Custom Name Type Schema Definition\nDESCRIPTION: Schema definition adding a custom Name scalar type and updating User type to use it.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    name: Name;\n  }\n  scalar type Name extending str;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PostGIS Geometry to Latitude/Longitude Text\nDESCRIPTION: Converts a PostGIS geometry to a formatted latitude/longitude text representation. Allows specifying a custom template for output formatting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::aslatlontext( \n  geom: ext::postgis::geometry, \n  tmpl: std::str = '', \n) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Filtering Villains by Name\nDESCRIPTION: Shows how to filter Villain objects by name using both the full path and shorthand notation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Villain {id, name}\nfilter Villain.name = \"Doc Ock\";\n```\n\n----------------------------------------\n\nTITLE: Starting Optional Link Migration in EdgeDB\nDESCRIPTION: Command to create a migration for a schema with an optional link, which can be safely applied to existing data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompts for Gel Migration Create\nDESCRIPTION: This code block demonstrates the interactive prompts provided by the 'gel migration create' command. It shows various options available to the user when confirming or rejecting suggested changes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/gel_migration_create.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndid you create object type 'default::User'? [y,n,l,c,b,s,q,?]\n?\n\ny - confirm the prompt, use the DDL statements\nn - reject the prompt\nl - list the DDL statements associated with prompt\nc - list already confirmed EdgeQL statements\nb - revert back to previous save point, perhaps previous question\ns - stop and save changes (splits migration into multiple)\nq - quit without saving changes\nh or ? - print help\n```\n\n----------------------------------------\n\nTITLE: Defining RelativeDuration Class in JavaScript\nDESCRIPTION: This snippet defines the RelativeDuration class, which represents a Gel cal::relative_duration value. It includes constructor parameters and various attributes representing different time units.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass RelativeDuration(\n        years: number = 0, \n        months: number = 0, \n        weeks: number = 0, \n        days: number = 0, \n        hours: number = 0, \n        minutes: number = 0, \n        seconds: number = 0, \n        milliseconds: number = 0, \n        microseconds: number = 0)\n```\n\n----------------------------------------\n\nTITLE: Managing Gel Instance Lifecycle\nDESCRIPTION: Commands for managing the lifecycle of a Gel instance including stop, start, restart, and destroy operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/instances.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance stop -I my_instance\n$ gel instance start -I my_instance\n$ gel instance restart -I my_instance\n$ gel instance destroy -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Filtering Accounts with Complex Condition in EdgeQL\nDESCRIPTION: Demonstrates filtering accounts based on a complex boolean condition, using a computed property and the '??' operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Account {\n    too_few_steps := (.steps <= 2) ?? true\n} filter .too_few_steps;\n```\n\n----------------------------------------\n\nTITLE: Defining Gel Branch Commands in reStructuredText\nDESCRIPTION: This snippet defines a toctree and a list table in reStructuredText format to organize and display the various 'gel branch' subcommands with their brief descriptions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n    :hidden:\n\n    gel_branch_create\n    gel_branch_drop\n    gel_branch_list\n    gel_branch_merge\n    gel_branch_rebase\n    gel_branch_rename\n    gel_branch_switch\n    gel_branch_wipe\n\n.. list-table::\n    :class: funcoptable\n\n    * - :ref:`ref_cli_gel_branch_create`\n      - Create a new branch\n    * - :ref:`ref_cli_gel_branch_drop`\n      - Drop a branch\n    * - :ref:`ref_cli_gel_branch_list`\n      - List all branches\n    * - :ref:`ref_cli_gel_branch_merge`\n      - Merge a branch into the current branch\n    * - :ref:`ref_cli_gel_branch_rebase`\n      - Create a branch based on a target branch\n    * - :ref:`ref_cli_gel_branch_rename`\n      - Rename a branch\n    * - :ref:`ref_cli_gel_branch_switch`\n      - Change the currently active branch\n    * - :ref:`ref_cli_gel_branch_wipe`\n      - Destroy the contents of a branch\n```\n\n----------------------------------------\n\nTITLE: Querying DDL-Generated Migrations in EdgeQL\nDESCRIPTION: This EdgeQL query selects all migrations that were generated by DDL statements, showing their details including the script.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_33\n\nLANGUAGE: edgeql\nCODE:\n```\nselect schema::Migration {*}\n filter\n .generated_by = schema::MigrationGeneratedBy.DDLStatement;\n```\n\n----------------------------------------\n\nTITLE: Declaring Backlink Traversal Alias in EdgeDB SDL\nDESCRIPTION: Shows how to create an alias that traverses backlinks to access related objects. This pattern is particularly useful for GraphQL access to enable efficient querying of related data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/aliases.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nalias MovieAlias := Movie {\n    # A computed link for accessing all the\n    # reviews for this movie.\n    reviews := .<movie[is Review]\n}\n```\n\n----------------------------------------\n\nTITLE: Module Reference Resolution Example\nDESCRIPTION: Demonstrates how to reference schema objects from other modules using fully-qualified names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nmodule A {\n  type User extending B::AbstractUser;\n}\n\nmodule B {\n  abstract type AbstractUser {\n    required name: str;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching EdgeDB UI to Visualize Schema\nDESCRIPTION: Command to launch the EdgeDB UI for visualizing the database schema that has been created. This provides a graphical view of the data model with object types and links.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/modeling/fastapi.rst#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ uvx gel ui\n```\n\n----------------------------------------\n\nTITLE: Setting EDGEDB_DOCKER_SHOW_GENERATED_CERT Visibility for EdgeDB Docker\nDESCRIPTION: This snippet describes the options for the EDGEDB_DOCKER_SHOW_GENERATED_CERT environment variable, which controls the visibility of generated SSL/TLS certificates in EdgeDB Docker containers. It can be set to 'always' (default behavior) or 'never' to hide the certificate.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc2.rst#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n``EDGEDB_DOCKER_SHOW_GENERATED_CERT``\n    - ``always == default``\n    - ``never``\n```\n\n----------------------------------------\n\nTITLE: Linking Remote Gel Instance\nDESCRIPTION: Shows the interactive process of linking a remote Gel instance using the gel instance link command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance link\nSpecify server host [default: localhost]:\n> 192.168.4.2\nSpecify server port [default: 5656]:\n> 10818\nSpecify database user [default: admin]:\n> admin\nSpecify branch [default: main]:\n> main\nUnknown server certificate: SHA1:c38a7a90429b033dfaf7a81e08112a9d58d97286.\nTrust? [y/N]\n> y\nPassword for 'admin':\nSpecify a new instance name for the remote server [default: abcd]:\n> staging_db\nSuccessfully linked to remote instance. To connect run:\n  gel -I staging_db\n```\n\n----------------------------------------\n\nTITLE: EdgeQL REPL Example: Volatility Restriction\nDESCRIPTION: This EdgeQL REPL snippet demonstrates a volatility restriction where taking the Cartesian product of a volatile operation is not allowed, resulting in a QueryError.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/volatility.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> SELECT {1, 2} + random()\nQueryError: can not take cross product of volatile operation\n```\n\n----------------------------------------\n\nTITLE: Defining Dump Message Structure in EdgeDB Protocol\nDESCRIPTION: Specifies the format of the Dump message sent by the client to initiate a database backup, including annotations and dump flags.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_5\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.Dump\n\n.. eql:struct:: edb.protocol.Annotation\n\n.. eql:struct:: edb.protocol.DumpFlag\n```\n\n----------------------------------------\n\nTITLE: Dropping User Friends Link\nDESCRIPTION: Removes the friends link from the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_24\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User drop link friends;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple User Type in Gel Schema Definition Language (SDL)\nDESCRIPTION: Example of defining a User type with a required name property using Gel's Schema Definition Language (SDL).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: GEL Project Info Command Synopsis\nDESCRIPTION: Command syntax for the gel project info CLI tool which displays project metadata. Supports optional flags for instance name, JSON output format, and custom project directory specification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_project/gel_project_info.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel project info [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Provider in Gel\nDESCRIPTION: EdgeQL query to configure the OpenAI provider with an API key for the current database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/python.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current database\ninsert ext::ai::OpenAIProviderConfig {\n  secret := 'sk-....',\n};\n```\n\n----------------------------------------\n\nTITLE: Dropping Abstract Annotation in EdgeQL\nDESCRIPTION: DDL command to remove an existing annotation named extra_info from the schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/annotations.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop abstract annotation extra_info;\n```\n\n----------------------------------------\n\nTITLE: Altering Admin Role Password\nDESCRIPTION: EdgeQL command to change the password of the existing admin role, useful for SQL client connections.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> alter role admin {\n...   set password := 'my-password'\n... };\nOK: ALTER ROLE\n```\n\n----------------------------------------\n\nTITLE: Quantizing Geometry Coordinates in EQL\nDESCRIPTION: Quantizes the coordinates of a geometry to a specified precision. This function exposes the PostGIS st_quantizecoordinates functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_218\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::quantizecoordinates( \\\n  g: optional ext::postgis::geometry, \\\n  prec_x: optional std::int64, \\\n  prec_y: optional std::int64 = {}, \\\n  prec_z: optional std::int64 = {}, \\\n  prec_m: optional std::int64 = {}, \\\n) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: EdgeDB REPL Type Description Example\nDESCRIPTION: Shows REPL command output for describing a type's detailed schema definition.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> \\d HasImage\nabstract type default::HasImage {\n  required single link __type__ -> schema::Type {\n    readonly := true;\n  };\n  required single property id -> std::uuid {\n    readonly := true;\n  };\n  required single property image -> std::str;\n};\n```\n\n----------------------------------------\n\nTITLE: Using enumerate() Function in EdgeQL\nDESCRIPTION: Demonstrates the enumerate() function which creates a set of tuples containing zero-based index numbers and the corresponding elements from the input set.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_24\n\nLANGUAGE: edgeql\nCODE:\n```\nselect enumerate({2, 3, 5});\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect enumerate(User.name);\n```\n\n----------------------------------------\n\nTITLE: Enable UUID Extension\nDESCRIPTION: Command to enable the required uuid-ossp extension in PostgreSQL\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ az postgres flexible-server parameter set \\\n    --resource-group $GROUP \\\n    --server-name $PG_SERVER_NAME \\\n    --name azure.extensions \\\n    --value uuid-ossp\n```\n\n----------------------------------------\n\nTITLE: Deleting Cards with EdgeDB\nDESCRIPTION: Removes a card from the database using EdgeDB. Handles error cases for non-existent cards.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/fastapi.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndeleted = await client.query_single(\"\"\"\n    delete Card filter .id = <uuid>$card_id\n\"\"\", card_id=card_id)\n\nif not deleted:\n    raise HTTPException(status_code=404, detail=\"Card not found\")\n\nreturn {\"message\": \"Card deleted\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Extensions with Gel CLI\nDESCRIPTION: This command lists all extensions currently installed in the Gel system. The output displays extension names in the first column and their corresponding version numbers in the second column. The example shows a system with the PostGIS extension version 3.4.3+6b82d77 installed.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_extension/list.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension list\n┌─────────┬───────────────┐\n│ Name    │ Version       │\n│ postgis │ 3.4.3+6b82d77 │\n└─────────┴───────────────┘\n```\n\n----------------------------------------\n\nTITLE: Executing gel migration log command in Shell\nDESCRIPTION: This command shows all migration versions for a Gel database. It can display migration history either from the Gel instance or from the schema directory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/gel_migration_log.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel migration log [<options>]\n```\n\n----------------------------------------\n\nTITLE: Exposing st_mlinefromtext Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_mlinefromtext function in EdgeDB. It has two overloads, taking a string input and optionally an SRID, returning an optional geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_170\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::mlinefromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::mlinefromtext( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Outputting 'gel instance list' Results in JSON Format\nDESCRIPTION: These options allow the user to output the results of the 'gel instance list' command in JSON format, which can be useful for programmatic processing of the data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_list.rst#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-j, --json\n```\n\n----------------------------------------\n\nTITLE: Subtracting Ranges and Multiranges in EdgeQL\nDESCRIPTION: Shows how to perform range and multirange subtraction operations. For ranges, the result must be continuous, while multirange subtraction can result in multiple disconnected ranges.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select range(1, 10) - range(5, 15);\n{range(1, 5)}\ndb> select range(1, 10) - range(<int64>{}, 5);\n{range(5, 10)}\ndb> select range(1, 10) - range(0, 15);\n{range({}, inc_lower := false, empty := true)}\n\ndb> select multirange([range(1, 10)]) -\n...   range(4, 6);\n{[range(1, 4), range(6, 10)]}\ndb> select multirange([range(1, 10)]) -\n...   multirange([range(2, 3), range(5, 6), range(9)]);\n{[range(1, 2), range(3, 5), range(6, 9)]}\ndb> select multirange([range(2, 3), range(5, 6), range(9, 10)]) -\n...   multirange([range(-10, 0), range(4, 8)]);\n{[range(2, 3), range(9, 10)]}\n```\n\n----------------------------------------\n\nTITLE: Execution and Transaction Error Codes Definition\nDESCRIPTION: Defines error codes for runtime execution issues, integrity violations, and transaction-related errors\nSOURCE: https://github.com/geldata/gel/blob/master/edb/api/errors.txt#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0x_05_00_00_00   ExecutionError\n0x_05_01_00_00   InvalidValueError\n0x_05_02_00_00   IntegrityError\n0x_05_03_00_00   TransactionError\n```\n\n----------------------------------------\n\nTITLE: Counting Rings in Geometry in EdgeQL\nDESCRIPTION: Returns the number of rings in a geometry. This function exposes the PostGIS st_nrings function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_187\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::nrings( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Using the gel branch list command in Shell\nDESCRIPTION: Example of how to use the gel branch list command to display all branches in a gel project. This command requires no additional parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/gel_branch_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel branch list\n```\n\n----------------------------------------\n\nTITLE: EdgeQL For Loop Simplified Syntax\nDESCRIPTION: Shows the simplified for loop syntax available in EdgeDB 5.0+ without requiring union keyword.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/for.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nfor number in {0, 1, 2, 3}\nselect { number, number + 0.5 }\n```\n\n----------------------------------------\n\nTITLE: Creating Gel Cloud Instance via CLI\nDESCRIPTION: Commands to create a new Gel Cloud instance using either the instance create or project init method\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance create <org-name>/<instance-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init \\\n  --server-instance <org-name>/<instance-name>\n```\n\n----------------------------------------\n\nTITLE: Batch Insertion and Logging in EdgeQL\nDESCRIPTION: Demonstrates batch insertion of Person objects and querying the resulting single Log entry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/triggers.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> for name in {'Jonathan Harker', 'Mina Murray', 'Dracula'}\n... union (\n...   insert Person {name := name}\n... );\n{\n  default::Person {id: 3836f9c8-d393-11ed-9638-3793d3a39133},\n  default::Person {id: 38370a8a-d393-11ed-9638-d3e9b92ca408},\n  default::Person {id: 38370abc-d393-11ed-9638-5390f3cbd375},\n}\ndb> select Log {action, timestamp, target_name, change};\n{\n  default::Log {\n    action: 'insert',\n    timestamp: <datetime>'2023-03-07T19:12:21.113521Z',\n    target_name: {'Jonathan Harker', 'Mina Murray', 'Dracula'},\n    change: {},\n  },\n}\ndb> for change in {\n...   (old_name := 'Jonathan Harker', new_name := 'Jonathan'),\n...   (old_name := 'Mina Murray', new_name := 'Mina')\n... }\n... union (\n...   update Person filter .name = change.old_name set {\n...     name := change.new_name\n...   }\n... );\n{\n  default::Person {id: 3836f9c8-d393-11ed-9638-3793d3a39133},\n  default::Person {id: 38370a8a-d393-11ed-9638-d3e9b92ca408},\n}\ndb> select Log {action, timestamp, target_name, change};\n{\n  default::Log {\n    action: 'insert',\n    timestamp: <datetime>'2023-04-05T09:21:17.514089Z',\n    target_name: {'Jonathan Harker', 'Mina Murray', 'Dracula'},\n    change: {},\n  },\n  default::Log {\n    action: 'update',\n    timestamp: <datetime>'2023-04-05T09:35:30.389571Z',\n    target_name: {'Jonathan', 'Mina'},\n    change: {'Jonathan Harker->Jonathan', 'Mina Murray->Mina'},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Database with Sample Friend Data\nDESCRIPTION: A bash script that creates and runs an EdgeQL file to populate the database with sample Friend data for testing the AI functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cat << 'EOF' > populate_db.edgeql\ninsert Friend {\n    name := 'Tadano Hitohito',\n    summary := 'An extremely average high school boy with a remarkable ability to read the atmosphere and understand others\\'s feelings, especially Komi\\'s.',\n    relationship_to_komi := 'First friend and love interest',\n    defining_trait := 'Perceptiveness',\n};\n\ninsert Friend {\n    name := 'Osana Najimi',\n    summary := 'An extremely outgoing person who claims to have been everyone\\'s childhood friend. Gender: Najimi.',\n    relationship_to_komi := 'Second friend and social catalyst',\n    defining_trait := 'Universal childhood friend',\n};\n\ninsert Friend {\n    name := 'Yamai Ren',\n    summary := 'An intense and sometimes obsessive classmate who is completely infatuated with Komi.',\n    relationship_to_komi := 'Self-proclaimed guardian and admirer',\n    defining_trait := 'Obsessive devotion',\n};\n\ninsert Friend {\n    name := 'Katai Makoto',\n    summary := 'A intimidating-looking but shy student who shares many communication problems with Komi.',\n    relationship_to_komi := 'Fellow communication-challenged friend',\n    defining_trait := 'Scary appearance but gentle nature',\n};\n\ninsert Friend {\n    name := 'Nakanaka Omoharu',\n    summary := 'A self-proclaimed wielder of dark powers who acts like an anime character and is actually just a regular gaming enthusiast.',\n    relationship_to_komi := 'Gaming buddy and chuunibyou friend',\n    defining_trait := 'Chuunibyou tendencies',\n};\nEOF\n$ gel query -f populate_db.edgeql\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS addpoint Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_addpoint function in EdgeQL. Takes two geometries as input, with an optional integer parameter. Returns a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_2\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::addpoint( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::addpoint( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                    a2: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from EWKB Binary\nDESCRIPTION: Function that creates a geometry value from Extended Well-Known Binary (EWKB) representation. Maps to the PostGIS st_geomfromewkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_100\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromewkb( \\\n                    a0: std::bytes \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Configuring Adaptive HA with DNS-based Failover in Gel Server\nDESCRIPTION: Command to enable adaptive high availability for DNS-based backend failover. Uses a standard postgres connection string with the adaptive HA flag enabled.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/backend_ha.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel-server \\\n    --backend-dsn postgres://xxx.rds.amazonaws.com \\\n    --enable-backend-adaptive-ha\n```\n\n----------------------------------------\n\nTITLE: Deleting All Books with Author Details\nDESCRIPTION: Demonstrates how to delete all books and return their titles, synopses, and author names\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/mutations.rst#2025-04-16_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_all_books {\n    delete_Book {\n        title\n        synopsis\n        author {\n            name\n        }\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n    delete Book\n) {\n    title,\n    synopsis,\n    author: {\n        name\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Lower Bound Inclusivity of Range and Multirange in EdgeQL\nDESCRIPTION: Demonstrates the use of range_is_inclusive_lower() function to check if the lower bound of a range or multirange is inclusive.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range_is_inclusive_lower(range(1, 10));\n{true}\ndb> select range_is_inclusive_lower(\n...     range(1.5, 7.5, inc_lower := false));\n{false}\ndb> select range_is_inclusive_lower(range(<int64>{}, 10));\n{false}\ndb> select range_is_inclusive_lower(\n...   multirange([\n...     range(2, 3),\n...     range(5, 10),\n...   ])\n... );\n{true}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_linestringfromwkb Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_linestringfromwkb function in EdgeDB. It takes bytes input and optionally an int64, returning an optional geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_147\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::linestringfromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::linestringfromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Signing Key with Python\nDESCRIPTION: Python code snippet to generate a secure token for JWT authentication.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport secrets\nprint(secrets.token_urlsafe(32))\n```\n\n----------------------------------------\n\nTITLE: Creating MultiPoint from Text in EdgeQL\nDESCRIPTION: Creates a MultiPoint geometry from text representation. This function exposes the PostGIS st_multipointfromtext function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_179\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::multipointfromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Linking Gel CLI to Cloud Account with cloud login Command\nDESCRIPTION: This command links your local Gel CLI to your Gel Cloud account, making all cloud instances accessible through the command line interface. After running this, you can manage remote Gel instances just like local ones.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/web.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncloud login\n```\n\n----------------------------------------\n\nTITLE: Exposing st_3dlongestline Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_3dlongestline function in EdgeDB. It takes two geometry inputs and returns a 3D geometry representing the longest line between them.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_154\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::longestline3d( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Vacuum All User-Accessible Data in EdgeQL\nDESCRIPTION: Example showing how to vacuum all user-accessible data in the database without any specific targets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/vacuum.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nadminister vacuum();\n```\n\n----------------------------------------\n\nTITLE: Importing EdgeDB Query Functions in FastAPI\nDESCRIPTION: Python code showing import statements for the generated EdgeDB query functions that will be used in the FastAPI routes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n...\nfrom .queries import create_event_async_edgeql as create_event_qry\nfrom .queries import delete_event_async_edgeql as delete_event_qry\nfrom .queries import get_event_by_name_async_edgeql as get_event_by_name_qry\nfrom .queries import get_events_async_edgeql as get_events_qry\nfrom .queries import update_event_async_edgeql as update_event_qry\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Migration for Data Insertion in EdgeDB\nDESCRIPTION: Command to create an empty migration file for inserting character data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create --allow-empty\nCreated ./dbschema/migrations/00002.edgeql, id:\nm1lclvwdpwitjj4xqm45wp74y4wjyadljct5o6bsctlnh5xbto74iq\n```\n\n----------------------------------------\n\nTITLE: Installing Gel AI Python Package\nDESCRIPTION: Command to install the Gel AI Python package using pip.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/python.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install 'gel[ai]'\n```\n\n----------------------------------------\n\nTITLE: Renaming Property in EdgeDB SDL Schema\nDESCRIPTION: Schema definition language (SDL) showing how to rename a property from 'description' to 'class' in the Character type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_15\n\nLANGUAGE: sdl\nCODE:\n```\ntype Character {\n  required name: str;\n  required class: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining std::anypoint Abstract Range Type in EdgeDB\nDESCRIPTION: Defines the 'std::anypoint' abstract type, which is the base type for all valid ranges, including numeric, datetime, and date types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_8\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anypoint\n```\n\n----------------------------------------\n\nTITLE: Empty Set Declaration\nDESCRIPTION: Demonstrates proper syntax for declaring typed empty sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <int64>{};\n{}\ndb> select <str>{};\n{}\ndb> select count(<str>{});\n{0}\n```\n\n----------------------------------------\n\nTITLE: Connect to Gel Instance\nDESCRIPTION: Command to connect to the newly provisioned Gel instance\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ gel -I azure\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with JSON Type\nDESCRIPTION: Shows how JSON values are reflected into a custom GraphQL type that renders as seamless JSON.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b3.rst#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Book {\n        additional_data\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"Book\": [\n            {\n                \"additional_data\": {\n                    \"dimensions\": \"6 x 8 in\",\n                    \"# of illustrations\": 5,\n                    \"illustrator\": \"Alice White\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Gel Project Information\nDESCRIPTION: Demonstrates how to view detailed information about a Gel project using the gel project info command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project info\n┌───────────────┬──────────────────────────────────────────┐\n│ Instance name │ my_app                                   │\n│ Project root  │ /path/to/my_app                          │\n└───────────────┴──────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Committing a Transaction in EdgeQL\nDESCRIPTION: Simple example showing how to commit a transaction in EdgeQL. The commit command makes all changes made during the transaction permanent and visible to other sessions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_commit.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Initializing EdgeDB Project\nDESCRIPTION: Command to initialize a new EdgeDB project using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project init\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeDB Configuration Types\nDESCRIPTION: Defines configuration-specific types for EdgeDB memory settings.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/api/types.txt#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n00000000-0000-0000-0000-000000000130 cfg::memory\n```\n\n----------------------------------------\n\nTITLE: Handling Non-existent Tuple Elements in EdgeQL\nDESCRIPTION: Example showing the error that occurs when trying to access a tuple element that doesn't exist. This demonstrates EdgeDB's error handling when referencing elements outside the tuple's bounds.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/tuple.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select (1, 2).5;\nEdgeQLError: 5 is not a member of a tuple\n\n---- query context ----\n\n    line 1\n        > select (1, 2).3;\n```\n\n----------------------------------------\n\nTITLE: Gel CLI Configuration File Structure\nDESCRIPTION: TOML configuration file structure for customizing Gel CLI and REPL behavior with configurable options\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/index.rst#2025-04-16_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[shell]\nexpand-strings = true         # Stop escaping newlines in quoted strings\nhistory-size = 10000          # Set number of entries retained in history\nimplicit-properties = false   # Print implicit properties of objects\nlimit = 100                   # Set implicit LIMIT\n                                  # Defaults to 100, specify 0 to disable\ninput-mode = \"emacs\"          # Set input mode. One of: vi, emacs\noutput-format = \"default\"     # Set output format.\n                                  # One of: default, json, json-pretty,\n                                  # json-lines\nprint-stats = \"off\"           # Print statistics on each query.\n                                  # One of: off, query, detailed\nverbose-errors = false        # Print all errors with maximum verbosity\n```\n\n----------------------------------------\n\nTITLE: Creating an Abstract Link with Property in EdgeQL\nDESCRIPTION: Defines a new abstract link 'orderable' with a 'weight' property of type int64.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate abstract link orderable {\n  create property weight: std::int64\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Gel Credentials in JSON Format\nDESCRIPTION: Illustrates the structure of a JSON file used to store Gel connection credentials, including host, port, user, password, branch, and TLS certificate data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"localhost\",\n  \"port\": 10702,\n  \"user\": \"testuser\",\n  \"password\": \"testpassword\",\n  \"branch\": \"main\",\n  \"tls_cert_data\": \"-----BEGIN CERTIFICATE-----\\nabcdef...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Link Property Constraint Definition in EdgeDB SDL\nDESCRIPTION: Example of using shorthand path expressions for link property constraints in SDL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc3.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype Foo {\n    link bar -> Object {\n        property linkprop -> str;\n        constraint expression on (@linkprop != \"lol\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Geometry in EQL\nDESCRIPTION: Scales a geometry by specified factors. This function exposes the PostGIS st_scale functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_227\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::scale( \\\n  a0: ext::postgis::geometry, \\\n  a1: ext::postgis::geometry, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Error Response for Embeddings API\nDESCRIPTION: Example JSON error response returned when the embeddings API request is invalid. This specific example shows the error returned when the required 'model' parameter is missing from the request body.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"missing or empty required \\\"model\\\" value  in request\",\n  \"type\": \"BadRequestError\"\n}\n```\n\n----------------------------------------\n\nTITLE: Geometry Splitting and Subdivision Functions\nDESCRIPTION: Functions for dividing geometries into smaller parts. These include splitting a geometry by another geometry and subdividing complex geometries into simpler parts with controlled vertex counts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_236\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::split( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::subdivide( \\\n  geom: ext::postgis::geometry, \\\n  maxvertices: std::int64 = 256, \\\n  gridsize: std::float64 = -1.0, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Forced Internal With Block in TypeScript\nDESCRIPTION: Shows how to force variables to occur in an internal 'with' block using e.with in TypeScript.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nconst robert = e.insert(e.Person, {\n  name: \"Robert Pattinson\"\n});\nconst colin = e.insert(e.Person, {\n  name: \"Colin Farrell\"\n});\nconst newMovie = e.insert(e.Movie, {\n  actors: e.with([robert, colin], // list \"dependencies\"\n    e.select(e.set(robert, colin))\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Multi-Property Table in SQL\nDESCRIPTION: SQL query to select from the Movie.labels multi-property table, showing source (Movie ID) and target (property value).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT source, target FROM \"Movie.labels\";\n```\n\n----------------------------------------\n\nTITLE: Customizing Output File Path for Generated Interfaces\nDESCRIPTION: Command to specify a custom output file path for the generated TypeScript interfaces instead of using the default path.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate interfaces --file schema.ts\n```\n\n----------------------------------------\n\nTITLE: Restoring Gel 6.0 Database from Dump\nDESCRIPTION: Command to restore a Gel 6.0 database from a dump created from a 5.x version, completing the upgrade process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel restore --all my_database.dump/ --dsn <new dsn>\n```\n\n----------------------------------------\n\nTITLE: Simplifying Geometry in EQL\nDESCRIPTION: Simplifies a geometry using the Douglas-Peucker algorithm. This function exposes the PostGIS st_simplify functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_233\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::simplify( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Executing gel extension list-available Command in Bash\nDESCRIPTION: This snippet demonstrates how to use the 'gel extension list-available' command to list available extensions. The output is displayed in a table format showing the name and version of each extension.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_extension/list-available.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension list-available\n┌─────────┬───────────────┐\n│ Name    │ Version       │\n│ postgis │ 3.4.3+6b82d77 │\n└─────────┴───────────────┘\n```\n\n----------------------------------------\n\nTITLE: Setting Password for Gel Instance\nDESCRIPTION: Uses the read command to securely set a password for the Gel instance, storing it in an environment variable.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo -n \"> \" && read -s PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Type Compatibility in Sets\nDESCRIPTION: Shows implicit type casting and handling of compatible types in sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select {1, 1.5};\n{1.0, 1.5}\ndb> select {1, 1234.5678n};\n{1.0n, 1234.5678n}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_mpointfromwkb Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_mpointfromwkb function in EdgeDB. It has two overloads, taking a bytes input and optionally an SRID, returning an optional geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_173\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::mpointfromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::mpointfromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using the gel branch drop Command\nDESCRIPTION: Command syntax for removing an existing branch in a GEL instance. The command requires specifying the branch name to drop and offers options for non-interactive execution and forcefully closing existing connections to the branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/gel_branch_drop.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel branch drop [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Enabling AI Extension in Gel Schema\nDESCRIPTION: SDL code to enable the AI extension in the Gel application schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/python.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension ai;\n```\n\n----------------------------------------\n\nTITLE: Selecting All Events in EdgeDB\nDESCRIPTION: EdgeQL query to select all events and include their name, address, schedule, and host name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Event {name, address, schedule, host : {name}};\n```\n\n----------------------------------------\n\nTITLE: Successful Login Message\nDESCRIPTION: Terminal output displayed when authentication to Gel Cloud is successful. The message confirms login with the user's email address.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_cloud/gel_cloud_login.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSuccessfully logged in to |Gel| Cloud as <your-email>\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Redirect URLs\nDESCRIPTION: Sets up allowed redirect URLs for authentication flows.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH SET\next::auth::AuthConfig::allowed_redirect_urls := {\n    'https://example.com',\n    'https://example.com/auth',\n    'https://localhost:3000',\n    'https://localhost:3000/auth'\n};\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::ObjectType in EdgeQL\nDESCRIPTION: This query retrieves detailed information about the schema::ObjectType, including its name, links, and properties. It demonstrates how to use the 'with module schema' clause and filter for a specific object type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/objects.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::ObjectType';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Legacy Path Scoping in EdgeQL\nDESCRIPTION: Shows how the legacy path scoping algorithm works, factoring out common paths in element-wise operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/path_resolution.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect {'aaa', 'bbb'} ++ {'ccc', 'ddd'};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User.first_name ++ ' ' ++ User.last_name;\n```\n\n----------------------------------------\n\nTITLE: Reducing Geometry Precision in EQL\nDESCRIPTION: Reduces the precision of a geometry to a specified grid size. This function exposes the PostGIS st_reduceprecision functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_219\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::reduceprecision( \\\n  geom: ext::postgis::geometry, \\\n  gridsize: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Building Area from PostGIS Geometry\nDESCRIPTION: Attempts to build a valid area geometry from a set of geometries that may not form a valid area (e.g., a collection of lines).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buildarea( \n  a0: ext::postgis::geometry \n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Disabling DDL During Upgrade Process in EdgeDB\nDESCRIPTION: Command to configure the EdgeDB instance to disable all DDL commands during an in-place upgrade while still allowing read and write queries. This prevents schema changes during the upgrade process.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/inplace-upgrades.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nedgedb query 'configure instance set force_database_error := $${\"\": \"AvailabilityError\", \"message\": \"DDL is disabled due to in-place upgrade.\", \"_scopes\": [\"ddl\"]}$$;'\n```\n\n----------------------------------------\n\nTITLE: Using verbose option in 'gel describe object' Command\nDESCRIPTION: This snippet demonstrates how to use the --verbose option with the 'gel describe object' command. It enables displaying additional details such as annotations and constraints.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_describe/gel_describe_object.rst#2025-04-16_snippet_1\n\nLANGUAGE: eql\nCODE:\n```\ndescribe object ... as text verbose\n```\n\n----------------------------------------\n\nTITLE: Creating Database in EdgeDB (Legacy)\nDESCRIPTION: Creates a new database using the legacy database creation command, maintained for backward compatibility.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ncreate database my_new_feature;\n```\n\n----------------------------------------\n\nTITLE: Finding Shortest Line Between Geometries in EQL\nDESCRIPTION: Finds the shortest line between two geometries. This function exposes the PostGIS st_shortestline functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_232\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::shortestline( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Extending SearchResult Model with Similar Chats in Python\nDESCRIPTION: Updates the SearchResult Pydantic model to include a similar_chats field that can contain a list of strings or None.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nsimilar_chats: list[str] | None = None\n```\n\n----------------------------------------\n\nTITLE: Creating MultiPolygon from WKB in EdgeQL\nDESCRIPTION: Creates a MultiPolygon geometry from WKB (Well-Known Binary) representation with an optional SRID parameter. This function exposes the PostGIS st_multipolyfromwkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_181\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::multipolyfromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::multipolyfromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Structure for API\nDESCRIPTION: Commands to create the necessary directories and files for organizing the API code.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir app\n$ touch app/__init__.py\n```\n\n----------------------------------------\n\nTITLE: Exposing st_makeenvelope Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_makeenvelope function in EdgeDB. It takes four float64 inputs for coordinates and an optional SRID, returning a geometry envelope.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_158\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::makeenvelope( \\\n                    a0: std::float64, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                    a3: std::float64, \\\n                    a4: std::int64 = 0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: DateTime Truncate Function in EdgeQL\nDESCRIPTION: Examples of using datetime_truncate() to reduce datetime precision to specific units like years, quarters, days, and hours.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_20\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select datetime_truncate(\n  <datetime>'2018-05-07T15:01:22.306916+00', 'years');\n{<datetime>'2018-01-01T00:00:00Z'}\n\ndb> select datetime_truncate(\n  <datetime>'2018-05-07T15:01:22.306916+00', 'quarters');\n{<datetime>'2018-04-01T00:00:00Z'}\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Types Using New Identifier Syntax in EdgeQL\nDESCRIPTION: Demonstrates the new enum definition syntax in EdgeDB 1.0 Alpha 6, which uses identifiers instead of strings to define enum values. This example creates a 'TypeModifier' scalar type that extends an enum with three possible values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a6.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate scalar type schema::TypeModifier\n    extending enum<SetOfType, OptionalType, SingletonType>;\n```\n\n----------------------------------------\n\nTITLE: Data Migration Script to Insert Characters in EdgeDB\nDESCRIPTION: EdgeQL differential showing how to insert multiple character records using a for loop within a migration script.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_27\n\nLANGUAGE: edgeql-diff\nCODE:\n```\n  CREATE MIGRATION m1lclvwdpwitjj4xqm45wp74y4wjyadljct5o6bsctlnh5xbto74iq\n      ONTO m1xvu7o4z5f5xfwuun2vee2cryvvzh5lfilwgkulmqpifo5m3dnd6a\n  {\n+     for name in {'Alice', 'Billie', 'Cameron', 'Dana'}\n+     union (\n+         insert default::Character {\n+             name := name\n+         }\n+     );\n  };\n```\n\n----------------------------------------\n\nTITLE: Dumping EdgeDB Database in Bash\nDESCRIPTION: Command to dump an EdgeDB database to a local directory using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gel dump --dsn <old dsn> --all --format dir my_database.dump/\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigger Constraint for Person Relationships\nDESCRIPTION: Defines a trigger that prevents the same Person from being both a friend and enemy through an assert statement.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nassert(\n  not exists (__new__.friends intersect __new__.enemies),\n  message := \"Invalid frenemies\",\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Type Information with __type__ in EdgeQL\nDESCRIPTION: Shows how to access an object's type name using the __type__ property in a JSON output format.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_22\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <json>Person { type := .__type__.name } limit 1;\n```\n\n----------------------------------------\n\nTITLE: Defining std::anyenum Abstract Type in EdgeDB\nDESCRIPTION: Defines the 'std::anyenum' abstract type, which serves as the base type for all enumerated types in EdgeDB.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_3\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anyenum\n```\n\n----------------------------------------\n\nTITLE: EdgeQL For Loop Syntax Improvement\nDESCRIPTION: Demonstrates the new simplified for loop syntax in EdgeQL that no longer requires wrapping expressions in curly braces. Shows examples of using simple expressions with array unpacking and object property access.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc4.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> for x in array_unpack([1, 5]) union x * 10;\n{10, 50}\ndb> for x in User.name union x[0];\n{'a', 'b', 'c', 'd'}\n```\n\n----------------------------------------\n\nTITLE: Empty set behavior in EdgeQL\nDESCRIPTION: These snippets show how operations involving empty sets result in empty sets due to short-circuiting behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/cardinality.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select {} ++ {'ccc', 'ddd'};\n{}\ndb> select {} or {true, false};\n{}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Navigate to project directory and start the development server\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd nextjs-blog\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Type Alteration Example\nDESCRIPTION: Example showing type alteration with property type conversion\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> create type Foo {\n...     create property bar -> int64\n... };\nOK: CREATE TYPE\ndb> insert Foo {bar := 3};\n{default::Foo {id: efcffce4-6471-11eb-8be5-ff6b1f4c46ee}}\ndb> alter type Foo alter property bar {\n...    set type str using (<str>.bar ++ '!')\n... };\nOK: ALTER TYPE\ndb> select Foo {bar};\n{default::Foo {bar: '3!'}}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Gel Project\nDESCRIPTION: Shows different ways to upgrade a Gel project to various versions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project upgrade --to-latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project upgrade --to-nightly\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project upgrade --to-version x.x\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Endpoint for User Retrieval with Optional Username\nDESCRIPTION: This Python code extends the FastAPI endpoint to retrieve all users or a specific user by username, handling both cases in a single function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Query, HTTPException\nfrom http import HTTPStatus\nfrom .queries.get_user_by_name_async_edgeql import (\n    get_user_by_name as get_user_by_name_query,\n    GetUserByNameResult,\n)\n\n\n@app.get(\"/users\")\nasync def get_users(\n    username: str = Query(None),\n) -> list[GetUsersResult] | GetUserByNameResult:\n    \"\"\"List all users or get a user by their username\"\"\"\n    if username:\n        user = await get_user_by_name_query(gel_client, name=username)\n        if not user:\n            raise HTTPException(\n                HTTPStatus.NOT_FOUND,\n                detail={\"error\": f\"Error: user {username} does not exist.\"},\n            )\n        return user\n    else:\n        return await get_users_query(gel_client)\n```\n\n----------------------------------------\n\nTITLE: Adding Gel 6.0 Package Repository for Debian/Ubuntu\nDESCRIPTION: Commands to add the Gel 6.0 package repository to Debian/Ubuntu systems and install Gel 6.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ echo deb [signed-by=/usr/local/share/keyrings/gel-keyring.gpg] \\\n    https://packages.geldata.com/apt \\\n    $(grep \"VERSION_CODENAME=\" /etc/os-release | cut -d= -f2) main \\\n    | sudo tee /etc/apt/sources.list.d/gel.list\n$ sudo apt-get update && sudo apt-get install gel-6\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineFromEncodedPolyline Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineFromEncodedPolyline function which creates a LineString from an encoded polyline format. Supports specifying precision for coordinate encoding.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_137\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::linefromencodedpolyline( \\\n                    txtin: std::str, \\\n                    nprecision: std::int64 = 5, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using the Gel Instance Restart Command in Terminal\nDESCRIPTION: This command is used to restart a Gel instance by specifying its name. The command is not intended for use with self-hosted instances.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_restart.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel instance restart <name>\n```\n\n----------------------------------------\n\nTITLE: Removing Global Variable in EdgeQL\nDESCRIPTION: Example of removing the 'current_user' global variable from the schema in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop global current_user;\n```\n\n----------------------------------------\n\nTITLE: DSN Format Specification - Plain Text\nDESCRIPTION: Specifies the format for Gel Data Source Names (DSNs) used for connection strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ngel://<user>:<password>@<host>:<port>/<branch>\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data into EdgeDB\nDESCRIPTION: This bash script creates a file with EdgeQL commands to insert sample user and chat data into the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir app/sample_data && cat << 'EOF' > app/sample_data/inserts.edgeql\n# Create users first\ninsert User {\n    name := 'alice',\n};\ninsert User {\n    name := 'bob',\n};\n# Insert chat histories for Alice\nupdate User\nfilter .name = 'alice'\nset {\n    chats := {\n        (insert Chat {\n            messages := {\n                (insert Message {\n                    role := 'user',\n                    body := 'What are the main differences between GPT-3 and GPT-4?',\n                    timestamp := <datetime>'2024-01-07T10:00:00Z',\n                    sources := {'arxiv:2303.08774', 'openai.com/research/gpt-4'}\n                }),\n                (insert Message {\n                    role := 'assistant',\n                    body := 'The key differences include improved reasoning capabilities, better context understanding, and enhanced safety features...',\n                    timestamp := <datetime>'2024-01-07T10:00:05Z',\n                    sources := {'openai.com/blog/gpt-4-details', 'arxiv:2303.08774'}\n                })\n            }\n        }),\n        (insert Chat {\n            messages := {\n                (insert Message {\n                    role := 'user',\n                    body := 'Can you explain what policy gradient methods are in RL?',\n                    timestamp := <datetime>'2024-01-08T14:30:00Z',\n                    sources := {'Sutton-Barto-RL-Book-Ch13', 'arxiv:1904.12901'}\n                }),\n                (insert Message {\n                    role := 'assistant',\n                    body := 'Policy gradient methods are a class of reinforcement learning algorithms that directly optimize the policy...',\n                    timestamp := <datetime>'2024-01-08T14:30:10Z',\n                    sources := {'Sutton-Barto-RL-Book-Ch13', 'spinning-up.openai.com'}\n                })\n            }\n        })\n    }\n};\n# Insert chat histories for Bob\nupdate User\nfilter .name = 'bob'\nset {\n    chats := {\n        (insert Chat {\n            messages := {\n                (insert Message {\n                    role := 'user',\n                    body := 'What are the pros and cons of different sharding strategies?',\n                    timestamp := <datetime>'2024-01-05T16:15:00Z',\n                    sources := {'martin-kleppmann-ddia-ch6', 'aws.amazon.com/sharding-patterns'}\n                }),\n                (insert Message {\n                    role := 'assistant',\n                    body := 'The main sharding strategies include range-based, hash-based, and directory-based sharding...',\n                    timestamp := <datetime>'2024-01-05T16:15:08Z',\n                    sources := {'martin-kleppmann-ddia-ch6', 'mongodb.com/docs/sharding'}\n                }),\n                (insert Message {\n                    role := 'user',\n                    body := 'Could you elaborate on hash-based sharding?',\n                    timestamp := <datetime>'2024-01-05T16:16:00Z',\n                    sources := {'mongodb.com/docs/sharding'}\n                })\n            }\n        })\n    }\n};\nEOF\n```\n\n----------------------------------------\n\nTITLE: Fixup File Creation Dialog in EdgeDB CLI\nDESCRIPTION: Shows the dialog when creating a fixup file during migration squash, with options to automate upgrading other instances to the squashed revision.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nYour schema differs from the last revision.\nA fixup file can be created\nto automate upgrading other instances to a squashed revision.\nThis starts the usual migration creation process.\n\nFeel free to skip this step if you don't have\nother instances to migrate\n\nCreate a fixup file? [y/n]\n> y\n```\n\n----------------------------------------\n\nTITLE: Counting Set Bits in EdgeQL\nDESCRIPTION: Examples of bit_count() function, which returns the number of bits set (population count) in either an integer or bytes value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_count(255);\n{8}\ndb> select bit_count(b'\\xff\\xff');\n{16}\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Branch in EdgeDB\nDESCRIPTION: Creates a new schema branch named 'my_new_feature' from the main branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ncreate schema branch my_new_feature from main;\n```\n\n----------------------------------------\n\nTITLE: Dropping User Object Type in EdgeQL\nDESCRIPTION: This snippet shows how to remove the 'User' object type from the schema using the 'drop type' command in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/objects.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop type User;\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays of User Objects with Shapes in EdgeQL\nDESCRIPTION: This example demonstrates how shapes survive array creation but are lost during array concatenation in EdgeQL. When concatenating arrays, the element type becomes a union type, following the same rules as the 'union' operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/shapes.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect array_agg(User{name}) ++ array_agg(User{name});\n{\n  [\n    default::User {id: 7769045a-27bf-11ec-94ea-3f6c0ae59eb3},\n    default::User {id: 7b42ed20-27bf-11ec-94ea-7700ec77834e},\n    default::User {id: 7fcedbc4-27bf-11ec-94ea-73dcb6f297a4},\n    default::User {id: 82f52646-27bf-11ec-94ea-3718ffb8dd15},\n    default::User {id: 7769045a-27bf-11ec-94ea-3f6c0ae59eb3},\n    default::User {id: 7b42ed20-27bf-11ec-94ea-7700ec77834e},\n    default::User {id: 7fcedbc4-27bf-11ec-94ea-73dcb6f297a4},\n    default::User {id: 82f52646-27bf-11ec-94ea-3718ffb8dd15},\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in TypeScript Client\nDESCRIPTION: Example of setting global variables in the EdgeDB TypeScript client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createClient} from 'edgedb';\n\nconst client = createClient().withGlobals({\n  current_user: '2141a5b4-5634-4ccc-b835-437863534c51',\n});\n\nawait client.query(`select global current_user;`);\n```\n\n----------------------------------------\n\nTITLE: PostGIS Utility Functions in EdgeQL\nDESCRIPTION: Utility functions for working with PostGIS geometries, including no-op operations and SRS code retrieval.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_216\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_geos_noop(\n                    a0: ext::postgis::geometry \n                  ) ->  ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_noop(\n                    a0: ext::postgis::geometry \n                  ) ->  ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_srs_codes(\n                    auth_name: std::str \n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Running Generators with yarn\nDESCRIPTION: Command to run a generator using yarn with a specific generator name and options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run -B generate <generator> [options]\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Range in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an empty Range object using the static empty() method.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/datatypes.rst#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nRange.empty();\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from WKT Text\nDESCRIPTION: Function that creates a geometry value from Well-Known Text (WKT) representation, with an optional SRID parameter. Maps to the PostGIS st_geomfromtext function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_107\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromtext( \\\n                    a0: std::str \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::geomfromtext( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Extracting Nth Point from LineString in EdgeQL\nDESCRIPTION: Returns the Nth point in the first LineString or circular LineString in a geometry. This function exposes the PostGIS st_pointn function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_208\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointn( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Buffering PostGIS Geometry/Geography\nDESCRIPTION: Creates a buffer around PostGIS geometry or geography objects. Allows specifying buffer distance, number of segments for circular joins, and style options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buffer( \n  a0: std::str, \n  a1: std::float64, \n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buffer( \n  a0: std::str, \n  a1: std::float64, \n  a2: std::str, \n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buffer( \n  a0: ext::postgis::geography, \n  a1: std::float64, \n) ->  ext::postgis::geography\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buffer( \n  a0: std::str, \n  a1: std::float64, \n  a2: std::int64, \n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buffer( \n  a0: ext::postgis::geography, \n  a1: std::float64, \n  a2: std::str, \n) ->  ext::postgis::geography\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buffer( \n  a0: ext::postgis::geography, \n  a1: std::float64, \n  a2: std::int64, \n) ->  ext::postgis::geography\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buffer( \n  geom: ext::postgis::geometry, \n  radius: std::float64, \n  quadsegs: std::int64, \n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::buffer( \n  geom: ext::postgis::geometry, \n  radius: std::float64, \n  options: std::str = '', \n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Installing Gel CLI on Windows using PowerShell\nDESCRIPTION: Command to install the Gel CLI tool on Windows systems using PowerShell. Requires WSL 2 since the Gel server runs on Linux.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/cli.rst#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> iwr https://www.geldata.com/ps1 -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Calculating Absolute Value in EdgeQL\nDESCRIPTION: Demonstrates the use of math::abs() function to calculate the absolute value of a number.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::abs(1);\n{1}\ndb> select math::abs(-1);\n{1}\n```\n\n----------------------------------------\n\nTITLE: Extending Enumerated Scalar Type in EdgeQL\nDESCRIPTION: This example shows how to extend an existing enumerated scalar type 'Color' by adding additional enum values. It uses the ALTER SCALAR TYPE command to add 'Black' and 'White' to the existing 'Red' and 'Green' values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nalter scalar type Color\n    extending enum<Black, White, Red, Green>;\n```\n\n----------------------------------------\n\nTITLE: Getting Lower Bound of Range and Multirange in EdgeQL\nDESCRIPTION: Shows how to use the range_get_lower() function to retrieve the lower bound of a range or multirange.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range_get_lower(range(1, 10));\n{1}\ndb> select range_get_lower(range(1.5, 7.5));\n{1.5}\ndb> select range_get_lower(\n...   multirange([range(5, 10), range(2, 3)]));\n{2}\n```\n\n----------------------------------------\n\nTITLE: Structure Definition for cal::date_duration in EdgeDB Protocol\nDESCRIPTION: C structure definition for cal::date_duration values. The structure includes a reserved field, days, and months fields to represent calendar date durations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nstruct DateDuration {\n    int64   reserved;\n    int32   days;\n    int32   months;\n};\n```\n\n----------------------------------------\n\nTITLE: Rolling Back EdgeDB Server In-place Upgrade\nDESCRIPTION: Command to roll back a prepared or partially prepared in-place upgrade when errors occur before branch pivoting. This removes everything created in the new schemas to revert to the previous state.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/inplace-upgrades.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nedgedb-server --backend-dsn=\"$DSN\" --inplace-upgrade-rollback\n```\n\n----------------------------------------\n\nTITLE: Using assert_exists() Function in EdgeQL\nDESCRIPTION: Example showing the usage of the new assert_exists() function which performs cardinality checks at runtime. Demonstrates successful execution with an existing user and an error when attempting to assert existence on an empty set.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc1.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select assert_exists((select User filter .name = \"Administrator\"));\n{default::User {id: ...}}\n\ndb> select assert_exists((select User filter .name = \"Nonexistent\"));\nERROR: CardinalityViolationError: assert_exists violation: expression\n       returned an empty set.\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsPolygonCCW Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsPolygonCCW function which tests if polygons have exterior rings oriented counter-clockwise and interior rings oriented clockwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_125\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::ispolygonccw( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Forcing Right-Hand Rule in PostGIS using EdgeQL\nDESCRIPTION: Forces the orientation of polygon vertices to follow the Right-Hand-Rule, where the bounded area is to the right of the boundary. Exterior rings are oriented clockwise, interior rings counter-clockwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_85\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::forcerhr( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Updating Answer Generation Function for Chat History\nDESCRIPTION: A Python code diff showing modifications to the generate_answer function to incorporate chat history. The function now uses previous messages from the chat to provide context for the LLM when generating responses.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nasync def generate_answer(\n    query: str,\n+     chat_history: list[GetMessagesResult],\n    web_sources: list[WebSource],\n) -> SearchResult:\n    system_prompt = (\n        \"You are a helpful assistant that answers user's questions\"\n        + \" by finding relevant information in HackerNews threads.\"\n        + \" When answering the question, describe conversations that people have around the subject,\"\n        + \" provided to you as a context, or say i don't know if they are completely irrelevant.\"\n    )\n\n    prompt = f\"User search query: {query}\\n\\nWeb search results:\\n\"\n\n    for i, source in enumerate(web_sources):\n        prompt += f\"Result {i} (URL: {source.url}):\\n\"\n        prompt += f\"{source.text}\\n\\n\"\n\n-     messages = [{\"role\": \"user\", \"content\": prompt}]\n+     messages = [\n+         {\"role\": message.role, \"content\": message.body} for message in chat_history\n+     ]\n+     messages.append({\"role\": \"user\", \"content\": prompt})\n\n    llm_response = get_llm_completion(\n        system_prompt=system_prompt,\n        messages=messages,\n    )\n\n    search_result = SearchResult(\n        response=llm_response,\n        sources=web_sources,\n    )\n\n    return search_result\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS cluster intersecting function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_clusterintersecting function, which groups geometries into clusters where members of each cluster intersect with one another.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_38\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::clusterintersecting( \\\n  a0: array<ext::postgis::geometry> \\\n) ->  array<ext::postgis::geometry>\n```\n\n----------------------------------------\n\nTITLE: Querying pgvector Config\nDESCRIPTION: EdgeQL query to inspect pgvector extension configuration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nselect cfg::Config.extensions[is ext::pgvector::Config]{*};\n```\n\n----------------------------------------\n\nTITLE: Exposing st_makevalid Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_makevalid function in EdgeDB. It has two overloads, one taking a geometry and another taking a geometry and parameters string, both returning a valid geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_163\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::makevalid( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::makevalid( \\\n                    geom: ext::postgis::geometry, \\\n                    params: std::str, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Configure SSL Certificate Persistence\nDESCRIPTION: Commands to persist SSL certificates across container restarts\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ key=\"$( az container exec \\\n            --resource-group $GROUP \\\n            --name gel-container-group \\\n            --exec-command \"cat /tmp/gel/edbprivkey.pem\" \\\n          | tr -d \"\\r\" )\"\n$ cert=\"$( az container exec \\\n             --resource-group $GROUP \\\n             --name gel-container-group \\\n             --exec-command \"cat /tmp/gel/edbtlscert.pem\" \\\n          | tr -d \"\\r\" )\"\n$ az container delete \\\n    --resource-group $GROUP \\\n    --name gel-container-group \\\n    --yes\n$ az container create \\\n    --registry-username $DOCKER_USER \\\n    --registry-password $DOCKER_PASSWORD \\\n    --registry-login-server index.docker.io \\\n    --os-type Linux \\\n    --cpu 1 \\\n    --memory 1 \\\n    --resource-group $GROUP \\\n    --name gel-container-group \\\n    --image geldata/gel \\\n    --dns-name-label geldb \\\n    --ports 5656 \\\n    --secure-environment-variables \\\n      \"GEL_SERVER_PASSWORD=$PASSWORD\" \\\n      \"GEL_SERVER_BACKEND_DSN=$DSN\" \\\n      \"GEL_SERVER_TLS_KEY=$key\" \\\n    --environment-variables \\\n      \"GEL_SERVER_TLS_CERT=$cert\"\n```\n\n----------------------------------------\n\nTITLE: Using gel server info Command\nDESCRIPTION: The 'gel server info' command is used to display information about installed Gel servers. It can be run with various options to control the output format and specify which server version's information to display.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_server/gel_server_info.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel server info [<options>]\n```\n\n----------------------------------------\n\nTITLE: Dropping a Mutation Rewrite in EdgeQL\nDESCRIPTION: Example demonstrating how to remove an existing insert rewrite from the created property on the User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/mutation_rewrites.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  alter property created {\n    drop rewrite insert;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Migration Hash Error Message in EdgeDB CLI\nDESCRIPTION: Shows the error message displayed when migration hash doesn't match content, with instructions on how to fix the issue by updating the migration ID.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nError executing command: could not read migrations in\nmyproject/dbschema/migrations:\n\ncould not read migration file myproject/dbschema/migrations/00002.edgeql:\n\nMigration name should be:\nm13g7j2tqu23yaffv6wkn2adp6hayp76su2qtg2lutdh3mmj5xyk6q, but\nm1xseswmheqzxutr55cu66ko4oracannpddujg7gkna2zsjpqm2g3a found instead.\n\n\nMigration names are computed from the hash of the migration contents.\n\nTo proceed you must fix the statement to read as:\nCREATE MIGRATION m13g7j2tqu23yaffv6wkn2adp6hayp76su2qtg2lutdh3mmj5xyk6q\nONTO ...\nAlternatively, revert the changes to the file.\n```\n\n----------------------------------------\n\nTITLE: Importing Modules and Configuring Edge Runtime in Next.js API Route\nDESCRIPTION: This TypeScript snippet shows the import statements and runtime configuration for the Next.js API route handler.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripIndents, oneLineTrim } from \"common-tags\";\nimport * as gel from \"gel\";\nimport e from \"dbschema/edgeql-js\";\nimport { errors } from \"../../constants\";\nimport { initOpenAIClient } from \"@/utils\";\n\nexport const runtime = \"edge\";\n\nconst openai = initOpenAIClient();\n\nconst client = gel.createHttpClient();\n\nexport async function POST(req: Request) {\n    // …\n}\n\n// other functions that are called inside POST handler\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Collection from WKT\nDESCRIPTION: Function that creates a collection geometry from Well-Known Text (WKT) representation, with an optional SRID parameter. Wraps the PostGIS st_geomcollfromtext function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_93\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomcollfromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::geomcollfromtext( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Sample EdgeQL Query Input\nDESCRIPTION: An example of a simple EdgeQL query stored in a file named 'get_number.edgeql'. This query takes an integer argument and returns it.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/codegen.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <int64>$arg;\n```\n\n----------------------------------------\n\nTITLE: Documenting EdgeQL Functions\nDESCRIPTION: Example showing how to document an EdgeQL function using the eql:function directive, including parameter and return type specifications.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n.. eql:function:: std::array_agg(set of any, $a: any) -> array<any>\n\n    :param $1: input set\n    :paramtype $1: set of any\n\n    :param $a: description of this param\n    :paramtype $a: int64 or str\n\n    :return: array made of input set elements\n    :returntype: array<any>\n\n    Return the array made from all of the input set elements.\n\n    The ordering of the input set will be preserved if specified.\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Application with TypeScript\nDESCRIPTION: Initializes a new Next.js application with TypeScript support using create-next-app CLI tool\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-next-app --typescript docs-chatbot\n```\n\n----------------------------------------\n\nTITLE: Using __std__ Module Alias in EdgeQL\nDESCRIPTION: Example of using the new __std__ alias for the standard module which cannot be masked by module declarations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a4.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nedgedb> start transaction;\nOK: START TRANSACTION\nedgedb[T]>\n```\n\n----------------------------------------\n\nTITLE: Displaying Gel CLI Connection Options\nDESCRIPTION: Command to display the connection options for the Gel CLI, showing how to specify which Gel instance to connect to.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/cli.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --help-connect\nConnection Options (full list):\n\n  -I, --instance <INSTANCE>\n          Instance name (use `gel instance list` to list local, remote and\n          Cloud instances available to you)\n\n      --dsn <DSN>\n          DSN for Gel to connect to (overrides all other options except\n          password)\n\n      --credentials-file <CREDENTIALS_FILE>\n          Path to JSON file to read credentials from\n\n  -H, --host <HOST>\n          Gel instance host\n\n  -P, --port <PORT>\n          Port to connect to Gel\n\n      --unix-path <UNIX_PATH>\n          A path to a Unix socket for Gel connection\n\n          When the supplied path is a directory, the actual path will be\n          computed using the `--port` and `--admin` parameters.\n  ...\n```\n\n----------------------------------------\n\nTITLE: Querying Character Data with Renamed Property in EdgeDB\nDESCRIPTION: EdgeQL query showing how the data is preserved after renaming the 'description' property to 'class'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Character {name, class};\n{\n  default::Character {name: 'Alice', class: 'Tall and strong'},\n  default::Character {name: 'Billie', class: 'Smart and aloof'},\n  default::Character {name: 'Cameron', class: 'Dashing and smooth'},\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Named EdgeDB Instance in Bash\nDESCRIPTION: Command to upgrade a specific named EdgeDB instance to the latest version.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project upgrade --to-latest -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Linking Remote Gel Instance\nDESCRIPTION: Uses gel instance link command to create an alias for the remote Gel instance, simplifying future connections.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance link \\\n       --dsn <dsn> \\\n       --trust-tls-cert \\\n       --non-interactive \\\n       my_instance\n```\n\n----------------------------------------\n\nTITLE: Tile and Envelope Functions\nDESCRIPTION: Function for generating geometric representations of web map tiles based on zoom level and x,y coordinates in a specified bounds with optional margin.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_239\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::tileenvelope( \\\n  zoom: std::int64, \\\n  x: std::int64, \\\n  y: std::int64, \\\n  bounds: ext::postgis::geometry = <ext::postgis::geometry>'SRID=3857;LINESTRING(-20037508.342789244 -20037508.342789244, \\\n  20037508.342789244 20037508.342789244)', \\\n  margin: std::float64 = 0.0, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Hook in Gel 6.0\nDESCRIPTION: Example of configuring a command hook in the gel.toml file to run a script after schema updates in Gel 6.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[hooks]\nschema.update.after=\"scripts/extract_schema_docs.sh\"\n```\n\n----------------------------------------\n\nTITLE: Opening Interactive Gel REPL\nDESCRIPTION: Provides commands to open an interactive REPL for the Gel instance, allowing direct interaction with the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel\n\n# or\n$ npx gel\n```\n\n----------------------------------------\n\nTITLE: Linking a Project to a Remote Gel Instance\nDESCRIPTION: Shows how to link a project to a non-local Gel instance, such as a shared staging database. It demonstrates the process of creating a link to the remote instance using the 'gel instance link' command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/projects.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance link\nSpecify the host of the server [default: localhost]:\n> 192.168.4.2\nSpecify the port of the server [default: 5656]:\n> 10818\nSpecify the database user [default: admin]:\n> admin\nSpecify the branch name [default: main]:\n> main\nUnknown server certificate: SHA1:c38a7a90429b033dfaf7a81e08112a9d58d97286. Trust? [y/N]\n> y\nPassword for 'admin':\nSpecify a new instance name for the remote server [default: 192_168_4_2_10818]:\n> staging_db\nSuccessfully linked to remote instance. To connect run:\n  gel -I staging_db\n```\n\n----------------------------------------\n\nTITLE: Boolean Type Casting Examples\nDESCRIPTION: Demonstrates casting string and JSON values to boolean type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bool.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <bool>('true');\n{true}\ndb> select <bool>to_json('false');\n{false}\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Bytes in EdgeQL\nDESCRIPTION: Shows how to convert an int32 value to bytes using the to_bytes() function with big endian byte order.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_bytes(<int32>31, Endian.Big);\n{b'\\x00\\x00\\x00\\x1f'}\n```\n\n----------------------------------------\n\nTITLE: Defining Restore Message Structure in EdgeDB Protocol\nDESCRIPTION: Specifies the format of the Restore message sent by the client to initiate a database restore.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_9\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.Restore\n```\n\n----------------------------------------\n\nTITLE: Relative Duration Units Examples\nDESCRIPTION: Shows various examples of using different time units with relative_duration\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <cal::relative_duration>'45.6 seconds';\nselect <cal::relative_duration>'15 milliseconds';\nselect <cal::relative_duration>'3 weeks 45 minutes';\nselect <cal::relative_duration>'-7 millennia';\n```\n\n----------------------------------------\n\nTITLE: Structure Definition for std::json in EdgeDB Protocol\nDESCRIPTION: C structure definition for std::json values. The structure includes a format field (currently always 1) and a variable-length array for UTF-8 encoded JSON data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nstruct JSON {\n    uint8   format;\n    uint8   jsondata[];\n};\n```\n\n----------------------------------------\n\nTITLE: Converting UUID to Bytes in EdgeQL\nDESCRIPTION: Shows how to convert a UUID to bytes using the to_bytes() function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select to_bytes(<uuid>'1d70c86e-cc92-11ee-b4c7-a7aa0a34e2ae');\n{b'\\x1dp\\xc8n\\xcc\\x92\\x11\\xee\\xb4\\xc7\\xa7\\xaa\\n4\\xe2\\xae'}\n```\n\n----------------------------------------\n\nTITLE: Configure Firewall Rules\nDESCRIPTION: Command to set up firewall rules allowing Azure internal services access to PostgreSQL\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ az postgres flexible-server firewall-rule create \\\n    --resource-group $GROUP \\\n    --name $PG_SERVER_NAME \\\n    --rule-name allow-azure-internal \\\n    --start-ip-address 0.0.0.0 \\\n    --end-ip-address 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Querying the Latest Migration in EdgeDB\nDESCRIPTION: This EdgeQL query retrieves the most recent migration from the schema module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_38\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n module schema,\n lastMigration := (\n   select Migration filter not exists .<parents[is Migration]\n )\nselect lastMigration {*};\n```\n\n----------------------------------------\n\nTITLE: Counting Patches in Polyhedral Surface in EdgeQL\nDESCRIPTION: Returns the number of faces in a Polyhedral Surface geometry. This function exposes the PostGIS st_numpatches function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_192\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::numpatches( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Adding Gel Package Repository for Debian/Ubuntu\nDESCRIPTION: Bash commands to add the Gel package repository to Debian/Ubuntu systems for installing Gel 6.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ echo deb [signed-by=/usr/local/share/keyrings/gel-keyring.gpg] \\\n    https://packages.geldata.com/apt \\\n    $(grep \"VERSION_CODENAME=\" /etc/os-release | cut -d= -f2) main \\\n    | sudo tee /etc/apt/sources.list.d/gel.list\n$ sudo apt-get update && sudo apt-get install gel-6\n```\n\n----------------------------------------\n\nTITLE: Extracting Geometry from Collection\nDESCRIPTION: Function to extract a specific geometry from a geometry collection by index. Maps to the PostGIS st_geometryn function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_98\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geometryn( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from Geohash\nDESCRIPTION: Function that creates a geometry value from a geohash string, with an optional precision parameter. Maps to the PostGIS st_geomfromgeohash function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_102\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromgeohash( \\\n                    a0: optional std::str, \\\n                    a1: optional std::int64 = {}, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Testing Geometry Overlap in EdgeQL\nDESCRIPTION: Tests if two geometries of the same dimension intersect, but each has at least one point not in the other. This function exposes the PostGIS st_overlaps function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_197\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::overlaps( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Testing Point in Circle in EdgeQL\nDESCRIPTION: Tests if a point geometry is inside a circle defined by center coordinates and radius. This function exposes the PostGIS st_pointinsidecircle function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_206\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::pointinsidecircle( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                    a3: std::float64, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Installing Gel CLI on Windows\nDESCRIPTION: PowerShell command to install the Gel CLI tool on Windows systems\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> iwr https://www.geldata.com/ps1 -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Examining the '*' Property in Gel TypeScript\nDESCRIPTION: Shows that the '*' property is just a strongly-typed plain object containing all properties of the given type set to true.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\ne.Movie['*'];\n// => { id: true, title: true, release_year: true }\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::Function Structure in EdgeDB\nDESCRIPTION: This query retrieves the structure of the schema::Function type, including its links and properties. It demonstrates how to inspect the metadata of function objects in EdgeDB.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/functions.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Function';\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Range in EdgeQL\nDESCRIPTION: Demonstrates how to create an empty range using the range() function with the empty parameter set to true.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select range(<int64>{}, empty := true);\n{range({}, inc_lower := false, empty := true)}\n```\n\n----------------------------------------\n\nTITLE: Encoding cal::relative_duration in EdgeDB Protocol\nDESCRIPTION: Binary encoding example for cal::relative_duration value '2 years 7 months 16 days 48 hours 45 minutes 7.6 seconds'. The data is encoded as microseconds, days, and months values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n// microseconds\n0x00 0x00 0x00 0x28 0xdd 0x11 0x72 0x80\n\n// days\n0x00 0x00 0x00 0x10\n\n// months\n0x00 0x00 0x00 0x1f\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorResponse Message Structure in EdgeDB Protocol\nDESCRIPTION: Defines the structure of the ErrorResponse message sent by the server, including error severity and possible attributes like hints, details, and position information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_0\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.ErrorResponse\n\n.. eql:struct:: edb.protocol.ErrorSeverity\n```\n\n----------------------------------------\n\nTITLE: Creating Offset Curve in EdgeQL\nDESCRIPTION: Creates an offset curve from a LineString geometry with specified distance and parameters. This function exposes the PostGIS st_offsetcurve function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_194\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::offsetcurve( \\\n                    line: ext::postgis::geometry, \\\n                    distance: std::float64, \\\n                    params: std::str = '', \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineFromMultiPoint Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineFromMultiPoint function which creates a LineString from a MultiPoint geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_138\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::linefrommultipoint( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: NodeGraph Creation from Geometry in EdgeQL\nDESCRIPTION: Creates a node graph from a geometry input. This function exposes the PostGIS st_node function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_184\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::node( \\\n                    g: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Client Usage in Rust\nDESCRIPTION: Rust implementation showing async client creation and query execution with error handling\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/clients.rst#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() {\n    let conn = gel_tokio::create_client()\n        .await\n        .expect(\"Client initiation\");\n    let val = conn\n        .query_required_single::<f64, _>(\"select random()\", &())\n        .await\n        .expect(\"Returning value\");\n    println!(\"Result: {}\", val);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Oriented Envelope in EdgeQL\nDESCRIPTION: Creates an oriented minimum bounding rectangle for a geometry. This function exposes the PostGIS st_orientedenvelope function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_196\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::orientedenvelope( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from EWKT Text\nDESCRIPTION: Function that creates a geometry value from Extended Well-Known Text (EWKT) representation. Maps to the PostGIS st_geomfromewkt function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_101\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromewkt( \\\n                    a0: std::str \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Calculating 2D Perimeter in EdgeQL\nDESCRIPTION: Calculates the 2D perimeter of a geometry. This function exposes the PostGIS st_perimeter2d function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_200\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::perimeter2d( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Upgrading Specific Gel Instance to 6.0\nDESCRIPTION: Command to upgrade a specific named Gel instance to version 6.0, useful when not using a project structure.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance upgrade -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Defining Types with Multiple Inheritance in SDL (Pre-3.0)\nDESCRIPTION: Example of defining types with multiple inheritance in EdgeDB SDL before version 3.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\ntype A;\ntype B extending A;\ntype C extending A, B;\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_Length2D Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_Length2D function which calculates the 2D length of a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_133\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::length2d( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Setting Token Time to Live\nDESCRIPTION: Configures the expiration time for authentication tokens.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH SET\next::auth::AuthConfig::token_time_to_live := <duration>\"336 hours\";\n```\n\n----------------------------------------\n\nTITLE: Defining Global Property in EdgeQL\nDESCRIPTION: Example of defining a new global property 'current_user_id' of type UUID in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate global current_user_id: uuid;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Filtering Actors by Name\nDESCRIPTION: This GraphQL query demonstrates how to filter actors by name, using the filterName parameter to retrieve specific actor information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery ActorQuery {\n  __typename\n  getActors(filterName: \"Robert Downey Jr.\") {\n    age\n    height\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing st_makepointm Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_makepointm function in EdgeDB. It takes three float64 inputs to create a point geometry with an M value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_161\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::makepointm( \\\n                    a0: std::float64, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using versionchanged Directive in reStructuredText\nDESCRIPTION: Example of how to document changes in functionality using the versionchanged directive. This example documents changes to access policy restrictions in Gel 8.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_18\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. versionchanged:: 8.0\n\n    Starting with the upcoming Gel 8.0, access policy restrictions will\n    **not** apply to any access policy expression. This means that when\n    reasoning about access policies it is no longer necessary to take other\n    policies into account. Instead, all data is visible for the purpose of\n    *defining* an access policy.\n```\n\n----------------------------------------\n\nTITLE: Dynamic Deck Update Implementation in TypeScript\nDESCRIPTION: Shows how to implement dynamic updates for deck properties using conditional field setting and type checking.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function updateDeck(formData: FormData) {\n  const id = formData.get(\"id\");\n  const name = formData.get(\"name\");\n  const description = formData.get(\"description\");\n\n  if (\n    typeof id !== \"string\" ||\n    (typeof name !== \"string\" &&\n    typeof description !== \"string\")\n  ) {\n    return;\n  }\n\n  const nameSet = typeof name === \"string\" ? { name } : {};\n```\n\n----------------------------------------\n\nTITLE: Response Format for RAG API Request\nDESCRIPTION: The JSON response structure returned by the RAG endpoint. It includes a unique ID, the model used, the generated text response, completion reason, token usage statistics, and optional fields for log probabilities and tool calls (if applicable).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"chatcmpl-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"model\": \"gpt-4-turbo-preview\",\n  \"text\": \"The sky on Mars typically appears butterscotch or reddish due to the fine dust particles suspended in the atmosphere.\",\n  \"finish_reason\": \"stop\",\n  \"usage\": {\n    \"prompt_tokens\": 50,\n    \"completion_tokens\": 30,\n    \"total_tokens\": 80\n  },\n  \"logprobs\": null,\n  \"tool_calls\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Link Properties Table in SQL\nDESCRIPTION: SQL query to select from the Movie.star link properties table, showing source (Movie ID), target (Person ID), and role property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT source, target, role FROM \"Movie.star\";\n```\n\n----------------------------------------\n\nTITLE: Defining CommandDataDescription Message Structure in EdgeDB Protocol\nDESCRIPTION: Defines the structure of the CommandDataDescription message sent by the server, including cardinality and annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_6\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.CommandDataDescription\n\n.. eql:struct:: edb.protocol.enums.Cardinality\n\n.. eql:struct:: edb.protocol.Annotation\n```\n\n----------------------------------------\n\nTITLE: Name Property Migration Command in EdgeDB\nDESCRIPTION: EdgeQL command to alter User type and set required name property with default value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nALTER TYPE default::User {\n    ALTER PROPERTY name {\n        SET REQUIRED USING (<std::str>'change me');\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Password Reset Commands for EdgeDB RC3\nDESCRIPTION: Commands to reset or restore instance passwords after upgrading to RC3.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc3.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance reset-password my_instance\n$ gel instance reset-password my_instance --password\n```\n\n----------------------------------------\n\nTITLE: Gitignore configuration for generated files\nDESCRIPTION: Lines to add to .gitignore file to exclude generated query files from version control.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/queries.rst#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n**/*.query.ts\ndbschema/queries.*\n```\n\n----------------------------------------\n\nTITLE: Creating Geography from WKB Binary Representation\nDESCRIPTION: Function that creates a geography value from Well-Known Binary (WKB) or Extended Well-Known Binary (EWKB) representation. Maps to PostGIS st_geogfromwkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_90\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geogfromwkb( \\\n                    a0: std::bytes \\\n                  ) ->  ext::postgis::geography\n```\n\n----------------------------------------\n\nTITLE: Initializing an Existing EdgeDB Project with CLI\nDESCRIPTION: Demonstrates how to add EdgeDB project configuration to an existing project using 'edgedb project init'. This enables simplified connections by automatically detecting project settings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b2.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init\nNo `edgedb.toml` found in `/home/username/dev/myproject` or above\nDo you want to initialize a new project? [Y/n]\n> Y\nSpecify the name of EdgeDB instance to use with this project\n[default: myproject_uuyg1cr]:\n> myproject\nDo you want to use existing instance \"myproject\" for the project?\n[y/n]\n> y\nApplying migrations...\nEverything is up to date.\nRevision m1lsdptp5qk4sway5vc6ttknwignhm34xncyxwrus2fygnj6nuo7ra\nProject initialialized.\nTo connect to myproject, just run `edgedb`\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Parameters for Gel DSN\nDESCRIPTION: Shows how to use environment parameters in a Gel DSN to specify a pointer to another environment variable that contains the actual configuration value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nMY_TLS_SECURITY=insecure\nGEL_DSN=gel://hostname.com:1234?tls_security_env=MY_TLS_SECURITY\n```\n\n----------------------------------------\n\nTITLE: Listing Secret Keys in Gel Cloud CLI\nDESCRIPTION: Command to list all existing secret keys in the Gel cloud platform. Users must be authenticated before using this command. The optional --json flag formats the output as JSON.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_cloud/gel_cloud_secretkey/edgedb_cloud_secretkey_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel cloud secretkey list [<options>]\n```\n\n----------------------------------------\n\nTITLE: Simplified User Type Schema in SDL\nDESCRIPTION: Updated schema definition removing the name property from User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants\nDESCRIPTION: Constants file containing error messages for OpenAI API related errors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const errors = {\n  flagged: `OpenAI has declined to answer your question due to their\n          [usage-policies](https://openai.com/policies/usage-policies).\n          Please try another question.`,\n  default: \"There was an error processing your request. Please try again.\",\n};\n```\n\n----------------------------------------\n\nTITLE: Set Descriptor Structure in C\nDESCRIPTION: Defines the binary structure for Set type descriptors, containing tag identifier, UUID, and element type information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct SetDescriptor {\n    // Indicates that this is a Set value descriptor.\n    uint8   tag = 0;\n\n    // Descriptor ID.\n    uuid    id;\n\n    // Set element type descriptor index.\n    uint16  type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining std::anycontiguous Abstract Range Type in EdgeDB\nDESCRIPTION: Defines the 'std::anycontiguous' abstract type, which is the base type for all valid contiguous ranges, including float, decimal, and datetime types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_10\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anycontiguous\n```\n\n----------------------------------------\n\nTITLE: Encoding std::bigint in EdgeDB Protocol\nDESCRIPTION: Binary encoding example for std::bigint value '-15000'. The data is encoded as ndigits, weight, sign, reserved field, and base-10000 digits representing the numerical value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n// ndigits\n0x00 0x02\n\n// weight\n0x00 0x01\n\n// sign\n0x40 0x00\n\n// reserved\n0x00 0x00\n\n// digits\n0x00 0x01 0x13 0x88\n```\n\n----------------------------------------\n\nTITLE: Calculating Centroid of PostGIS Geometry\nDESCRIPTION: Calculates the geometric center (centroid) of a PostGIS geometry object. Works for both geometry and geography types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::centroid( \n  a0: std::str \n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::centroid( \n  a0: ext::postgis::geometry \n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Introspecting Type Resolution\nDESCRIPTION: Demonstrates how EdgeDB resolves types when dealing with mixed scalar types that cannot be directly cast to each other.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/casts.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nselect introspect (typeof {<int64>1, <float32>2}).name;\n```\n\n----------------------------------------\n\nTITLE: Updating Character and CharacterClass Schema in EdgeDB SDL\nDESCRIPTION: This SDL snippet shows the updated schema for Character and CharacterClass types, making the class link required.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_37\n\nLANGUAGE: sdl\nCODE:\n```\ntype CharacterClass {\n  required name: str;\n  multi skills: str;\n}\n\ntype Character {\n  required name: str;\n  required class: CharacterClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Required Computed Property in EdgeDB SDL\nDESCRIPTION: Demonstrates an invalid computed property definition where the required modifier conflicts with a non-required source property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/computeds.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  first_name: str;\n\n  # this is invalid, because first_name is not a required property\n  required first_name_upper := str_upper(.first_name);\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Local Project Instance to Latest Gel Version\nDESCRIPTION: CLI command to upgrade a local project instance to the latest version of Gel and update the gel.toml configuration file.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngel project upgrade --to-latest\n```\n\n----------------------------------------\n\nTITLE: Using bounded_above Function in EdgeDB\nDESCRIPTION: Demonstrates the bounded_above function which checks if the first range is bounded above by the upper bound of the second range. Works with both ranges and multiranges.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/range.rst#2025-04-16_snippet_24\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bounded_above(\n  range(1, 7), range(3, 7)\n);\n{true}\ndb> select bounded_above(\n  range(1, 7), range(3, 6)\n);\n{false}\ndb> select bounded_above(\n  range(1, 7), range(3)\n);\n{true}\n\ndb> select bounded_above(\n  multirange([\n    range(-1, 0), range(5, 7),\n  ]),\n  multirange([\n    range(1, 2), range(3, 7),\n  ]),\n);\n{true}\n\ndb> select bounded_above(\n  range(-1, 10),\n  multirange([\n    range(1, 4), range(7),\n  ]),\n);\n{true}\n```\n\n----------------------------------------\n\nTITLE: BigInt vs Decimal Type Checking in EdgeQL\nDESCRIPTION: Demonstrates type checking between bigint and decimal types for different numeric literals.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 42n is bigint;\n{true}\n\ndb> select 12e+34n is bigint;\n{true}\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from KML\nDESCRIPTION: Function that creates a geometry value from Keyhole Markup Language (KML) representation. Maps to the PostGIS st_geomfromkml function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_105\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromkml( \\\n                    a0: std::str \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using gel cloud logout command in Bash\nDESCRIPTION: The gel cloud logout command is used to forget the stored access token. It accepts options to log out from all profiles or force logout.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_cloud/gel_cloud_logout.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel cloud logout [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using gel server install Command\nDESCRIPTION: The basic syntax for the gel server install command. This command installs a Gel server with optional parameters to specify version or run in interactive mode.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_server/gel_server_install.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel server install [<options>]\n```\n\n----------------------------------------\n\nTITLE: String Trim Both Ends Example - EdgeQL\nDESCRIPTION: Shows str_trim function removing specified characters from both ends of string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_trim('  data     ');\n{'data'}\ndb> select str_trim('::data.....', '.:');\n{'data'}\ndb> select str_trim('..data:::::', '.:');\n{'data'}\ndb> select str_trim('.:data:...:', '.:');\n{'data'}\ndb> select str_trim(':.:.data.:.', '.:');\n{'data'}\n```\n\n----------------------------------------\n\nTITLE: Creating Range Literals in EdgeQL\nDESCRIPTION: Examples of creating range literals using the range constructor function in EdgeQL. Demonstrates bounded, empty, and unbounded ranges.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nselect range(1, 10);\nselect range(2.2, 3.3);\nselect range(1, 1);\nselect range(4, <int64>{});\nselect range(<int64>{}, 4);\nselect range(<int64>{}, <int64>{});\n```\n\n----------------------------------------\n\nTITLE: Defining Tuple and Object Wire Format Structure in C\nDESCRIPTION: Defines the wire format structure for tuples, named tuples and objects, with element storage and length information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct TupleOrNamedTupleOrObjectValue {\n    // Number of elements\n    int32       nelems;\n\n    // Element data.\n    Element     elements[nelems];\n};\n\nstruct Element {\n    // Reserved.\n    int32       reserved;\n\n    // Encoded element data length in bytes.\n    int32       length;\n\n    // Element data.\n    uint8       data[length];\n};\n```\n\n----------------------------------------\n\nTITLE: Using gel list command with type and pattern\nDESCRIPTION: Basic syntax for the gel list command which takes an object type, optional flags, and a pattern to match object names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel list <type> [<options>] <pattern>\n```\n\n----------------------------------------\n\nTITLE: Exposing st_linesubstring Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_linesubstring function in EdgeDB. It has multiple overloads taking geometry or geography inputs along with float64 values, returning geometry or geography.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_148\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::linesubstring( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::linesubstring( \\\n                    a0: ext::postgis::geography, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                  ) ->  ext::postgis::geography\n                  ext::postgis::linesubstring( \\\n                    a0: optional std::str, \\\n                    a1: optional std::float64, \\\n                    a2: optional std::float64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry or Geography to Geohash\nDESCRIPTION: Function to generate a geohash string representation for a geometric or geographic object, with an optional parameter for maximum character length. Maps to the PostGIS st_geohash function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_92\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geohash( \\\n                    geom: ext::postgis::geometry, \\\n                    maxchars: std::int64 = 0, \\\n                  ) ->  std::str\n                  ext::postgis::geohash( \\\n                    geog: ext::postgis::geography, \\\n                    maxchars: std::int64 = 0, \\\n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Authorization Header Format\nDESCRIPTION: Defines the format for the Authorization header used in HTTP tunneling authentication requests.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAuthorization: {AUTH METHOD} data={PAYLOAD}\n```\n\n----------------------------------------\n\nTITLE: Altering User Friends Link with Annotation\nDESCRIPTION: Adds a title annotation to the existing friends link on User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_21\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  alter link friends create annotation title := \"Friends\";\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Migration Checksum in EdgeDB\nDESCRIPTION: EdgeQL differential showing how to update the migration hash to match the current content of the migration file.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_29\n\nLANGUAGE: edgeql-diff\nCODE:\n```\n- CREATE MIGRATION m1lclvwdpwitjj4xqm45wp74y4wjyadljct5o6bsctlnh5xbto74iq\n+ CREATE MIGRATION m1juin65wriqmb4vwg23fiyajjxlzj2jyjv5qp36uxenit5y63g2iq\n      ONTO m1xvu7o4z5f5xfwuun2vee2cryvvzh5lfilwgkulmqpifo5m3dnd6a\n  {\n      # ...\n  };\n```\n\n----------------------------------------\n\nTITLE: Getting Proj4 String from SRID\nDESCRIPTION: Function that returns the Proj4 text representation for a given spatial reference identifier (SRID). Maps to the PostGIS get_proj4_from_srid function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_110\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::get_proj4_from_srid( \\\n                    a0: std::int64 \\\n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Using Enum Types Path Syntax in EdgeQL\nDESCRIPTION: Demonstrates the new path-like syntax for accessing enum type members, equivalent to using casting syntax.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b3.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Color.Red;\n```\n\n----------------------------------------\n\nTITLE: Geometric Operations Functions\nDESCRIPTION: Core geometric functions including unary union, union, voronoi operations, geometric tests, and coordinate access.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_245\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::unaryunion(a0: ext::postgis::geometry, gridsize: std::float64 = -1.0) -> ext::postgis::geometry\n\next::postgis::union(a0: array<ext::postgis::geometry>) -> ext::postgis::geometry\next::postgis::union(geom1: ext::postgis::geometry, geom2: ext::postgis::geometry) -> ext::postgis::geometry\next::postgis::union(geom1: ext::postgis::geometry, geom2: ext::postgis::geometry, gridsize: std::float64) -> ext::postgis::geometry\n\next::postgis::voronoilines(g1: optional ext::postgis::geometry, tolerance: optional std::float64 = 0.0, extend_to: optional ext::postgis::geometry = {}) -> optional ext::postgis::geometry\n\next::postgis::voronoipolygons(g1: optional ext::postgis::geometry, tolerance: optional std::float64 = 0.0, extend_to: optional ext::postgis::geometry = {}) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Forcing 3DZ Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_force3dz function to force a geometry into a 3-dimensional representation with a Z value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_79\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::force3dz( \\\n                    geom: ext::postgis::geometry, \\\n                    zvalue: std::float64 = 0.0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Systemd\nDESCRIPTION: Example systemd unit configuration for setting environment variables\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[Service]\nEnvironment=\"GEL_SERVER_TLS_CERT_MODE=generate_self_signed\"\nEnvironment=\"GEL_SERVER_ADMIN_UI=enabled\"\n```\n\n----------------------------------------\n\nTITLE: Adding EdgeDB Package Repository\nDESCRIPTION: Command to add the EdgeDB package repository for Debian/Ubuntu systems.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ echo deb [signed-by=/usr/local/share/keyrings/edgedb-keyring.gpg] \\\n    https://packages.edgedb.com/apt \\\n    $(grep \"VERSION_CODENAME=\" /etc/os-release | cut -d= -f2) main \\\n    | sudo tee /etc/apt/sources.list.d/edgedb.list\n```\n\n----------------------------------------\n\nTITLE: Forcing 3DM Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_force3dm function to force a geometry into a 3-dimensional representation with an M value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_78\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::force3dm( \\\n                    geom: ext::postgis::geometry, \\\n                    mvalue: std::float64 = 0.0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Including External Documentation Files\nDESCRIPTION: Shows how to include external reStructuredText files for content reuse.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../stdlib/constraint_table.rst\n```\n\n----------------------------------------\n\nTITLE: Enhanced Chat App Schema with Channels\nDESCRIPTION: Extended schema adding friends list and chat channels functionality\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_3\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    type User {\n        required property name -> str;\n        required property email -> str;\n        required property password_hash -> str;\n\n        multi link friends -> User;\n    }\n\n    type Message {\n        required link author -> User;\n        required property body -> str;\n        required property timestamp -> datetime {\n            default := datetime_current()\n        }\n\n        link channel -> Channel;\n    }\n\n    type Channel {\n        required property title -> str;\n        property description -> str;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RestoreEof Message Structure in EdgeDB Protocol\nDESCRIPTION: Specifies the format of the RestoreEof message sent by the client to notify the server that the dump is fully uploaded.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_11\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.RestoreEof\n```\n\n----------------------------------------\n\nTITLE: Basic Filtering in EdgeQL TypeScript\nDESCRIPTION: Shows basic filtering operations on movie queries using the ilike operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, (movie) => ({\n  id: true,\n  title: true,\n  filter: e.op(movie.title, \"ilike\", \"The Matrix%\")\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Message Format Structure in C\nDESCRIPTION: Defines the structure of messages in the Gel wire protocol. Each message consists of a message type, payload length, and the payload itself.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct {\n    uint8    message_type;\n    int32    payload_length;\n    uint8    payload[payload_length - 4];\n};\n```\n\n----------------------------------------\n\nTITLE: Get EdgeDB Version Example\nDESCRIPTION: Demonstrates retrieving the server version information as a tuple containing major version, minor version, stage, stage number and local version identifiers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sys.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select sys::get_version();\n{(major := 1, minor := 0, stage := <sys::VersionStage>'alpha',\n  stage_no := 1, local := [])}\n```\n\n----------------------------------------\n\nTITLE: Creating See Also Table in reStructuredText\nDESCRIPTION: Example showing how to create a see also table with reference links in reStructuredText.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_7\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n    :class: seealso\n\n    * - **See also**\n    * - :ref:`Schema > Access policies <ref_datamodel_access_policies>`\n    * - :ref:`SDL > Access policies <ref_eql_sdl_access_policies>`\n```\n\n----------------------------------------\n\nTITLE: Executing Branch Rebase Command\nDESCRIPTION: CLI command syntax for rebasing a branch in Gel. The command creates a new branch based on the target branch while including any new migrations from the current branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/gel_branch_rebase.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel branch rebase [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Exposing st_mpointfromtext Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_mpointfromtext function in EdgeDB. It creates a geometry from WKT MULTIPOINT, with an optional SRID parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_172\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::mpointfromtext( \\\n                    a0: std::str \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::mpointfromtext( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Adding Gel Repository on CentOS/RHEL\nDESCRIPTION: Command to add the Gel package repository for RPM-based systems\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo curl --proto '=https' --tlsv1.2 -sSfL \\\n   https://packages.geldata.com/rpm/gel-rhel.repo \\\n   > /etc/yum.repos.d/gel.repo\n```\n\n----------------------------------------\n\nTITLE: String Left Trim Example in EdgeQL\nDESCRIPTION: Shows usage of deprecated str_ltrim() function for removing specified characters from the start of a string. Demonstrates behavior with multiple trim characters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/deprecated.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select str_ltrim('     data');\n{'data'}\ndb> select str_ltrim('.....data', '.:');\n{'data'}\ndb> select str_ltrim(':::::data', '.:');\n{'data'}\ndb> select str_ltrim(':...:data', '.:');\n{'data'}\ndb> select str_ltrim('.:.:.data', '.:');\n{'data'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in wrangler.toml\nDESCRIPTION: Adds environment variables for Gel Cloud configuration to the wrangler.toml file, which is used for Cloudflare Worker configuration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[vars]\nGEL_INSTANCE = \"your-gel-instance\"\nGEL_SECRET_KEY = \"your-gel-secret-key\"\n```\n\n----------------------------------------\n\nTITLE: Raw String Examples in EdgeQL\nDESCRIPTION: Examples showing raw string literals that don't interpret escape sequences and maintain exact input formatting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/lexical.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect r'hello \\\\ world';\nselect r'hello \\\nworld';\nselect r'hello\nworld';\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB JavaScript Driver with NPM\nDESCRIPTION: Command to install the EdgeDB JavaScript driver using NPM package manager.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install gel\n```\n\n----------------------------------------\n\nTITLE: Memory Storage Type Usage in EdgeQL\nDESCRIPTION: Examples demonstrating the usage of cfg::memory type for representing memory quantities.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/cfg.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <cfg::memory>'1B'; # 1 byte\n{<cfg::memory>'1B'}\ndb> select <cfg::memory>'5KiB'; # 5 kibibytes\n{<cfg::memory>'5KiB'}\ndb> select <cfg::memory>'128MiB'; # 128 mebibytes\n{<cfg::memory>'128MiB'}\n```\n\n----------------------------------------\n\nTITLE: Encoding cal::local_date in EdgeDB Protocol\nDESCRIPTION: Binary encoding format for cal::local_date values. The value is represented as a 32-bit integer (most significant byte first) containing the number of days between the encoded date and January 1st 2000.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n0x00 0x00 0x1b 0x99\n```\n\n----------------------------------------\n\nTITLE: Querying Query Performance Statistics in Gel 6.0\nDESCRIPTION: EdgeQL query to retrieve query performance statistics from the sys::QueryStats object in Gel 6.0, filtering for the current branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nselect sys::QueryStats {\n  query,\n  queryType,\n  tag,\n  plans,\n  total_plan_time,\n  mean_plan_time,\n  calls,\n  total_exec_time,\n  mean_exec_time,\n} filter .branch.name = sys::get_current_branch();\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Type in EdgeDB SDL\nDESCRIPTION: Demonstrates how to create an abstract type 'HasImage' with a required 'image' property of type string and an index on that property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/objects.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nabstract type HasImage {\n    # just a URL to the image\n    required image: str;\n    index on (.image);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Query Builder Generator\nDESCRIPTION: Command to install the Gel query builder generator as a dev dependency\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @gel/generate\n```\n\n----------------------------------------\n\nTITLE: String Literal Examples in EdgeQL\nDESCRIPTION: Examples demonstrating various string literal formats including escaped sequences, newlines, and special characters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/lexical.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect 'hello\\nworld';\nselect \"hello\\nworld\";\nselect 'hello \\\n        world';\nselect 'https://geldata.com/\\\n        docs/edgeql/lexical\\\n        #constants';\nselect 'hello \\\\ world';\nselect 'hello \\'world\\'';\nselect 'hello \\x77orld';\nselect 'hello \\u0077orld';\n```\n\n----------------------------------------\n\nTITLE: Dumping EdgeDB v5.x Database for Migration\nDESCRIPTION: CLI command to dump an EdgeDB v5.x database for migration to Gel v6, including schema and contents.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel dump --dsn <old dsn> --all --format dir my_database.dump/\n```\n\n----------------------------------------\n\nTITLE: Testing GET Event by Name with HTTPX\nDESCRIPTION: Bash command to test retrieving a specific event by name using the GET /events endpoint with a name parameter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -m GET http://localhost:5001/events \\\n        -p 'name' 'Resuscitation'\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloudflare Worker\nDESCRIPTION: Shows the command to deploy the Cloudflare Worker to the Cloudflare platform.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run deploy # or pnpm, yarn, bun\n```\n\n----------------------------------------\n\nTITLE: Preparing EdgeDB Server In-place Upgrade\nDESCRIPTION: Command to prepare the EdgeDB server for an in-place upgrade using the previously generated JSON file. This creates the new standard library in a namespace and prepares scripts for updating.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/inplace-upgrades.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nedgedb-server --backend-dsn=\"$DSN\" --inplace-upgrade-prepare upgrade.json\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS asgml Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_asgml function in EdgeQL. Converts geometry or geography to GML format. Returns a string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_12\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::asgml( \\\n                    a0: std::str \\\n                  ) ->  std::str\n                  ext::postgis::asgml( \\\n                    geom: optional ext::postgis::geometry, \\\n                    maxdecimaldigits: optional std::int64 = 15, \\\n                    options: optional std::int64 = 0, \\\n                  ) -> optional std::str\n                  ext::postgis::asgml( \\\n                    geog: ext::postgis::geography, \\\n\n```\n\n----------------------------------------\n\nTITLE: Generated Async Python Function\nDESCRIPTION: The Python code generated from the EdgeQL query. It creates an async function that uses the gel.AsyncIOClient to execute the query with proper type annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/codegen.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport gel\n\n\nasync def get_number(\n    client: gel.AsyncIOClient,\n    *,\n    arg: int,\n) -> int:\n    return await client.query_single(\n        \"\"\"\\\n        select <int64>$arg\\\n        \"\"\",\n        arg=arg,\n    )\n```\n\n----------------------------------------\n\nTITLE: String Padding Example - EdgeQL\nDESCRIPTION: Demonstrates str_pad_end function for padding strings to specified length with optional fill characters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_pad_end('short', 10);\n{'short     '}\ndb> select str_pad_end('much too long', 10);\n{'much too l'}\ndb> select str_pad_end('short', 10, '.:');\n{'short.:.:.'}\n```\n\n----------------------------------------\n\nTITLE: Migration Checksum Error in EdgeDB\nDESCRIPTION: Error message when trying to apply a migration with modified content, requiring a hash update to match the contents.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migrate\ngel error: could not read migrations in ./dbschema/migrations:\ncould not read migration file ./dbschema/migrations/00003.edgeql:\nmigration name should be\n`m1ryafvp24g5eqjeu65zr4bqf6m3qath3lckfdhoecfncmr7zshehq`\nbut `m1qv2pdksjxxzlnujfed4b6to2ppuodj3xqax4p3r75yfef7kd7jna` is used\ninstead.\nMigration names are computed from the hash of the migration\ncontents. To proceed you must fix the statement to read as:\n  CREATE MIGRATION m1ryafvp24g5eqjeu65zr4bqf6m3qath3lckfdhoecfncmr7zshehq\n  ONTO ...\nif this migration is not applied to any database. Alternatively,\nrevert the changes to the file.\n```\n\n----------------------------------------\n\nTITLE: Querying Only Parent Type Objects in SQL\nDESCRIPTION: SQL query using ONLY keyword to select only Content objects, excluding child Movie objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, title FROM ONLY common.\"Content\";\n```\n\n----------------------------------------\n\nTITLE: Defining Set of Arrays Wire Format Structure in C\nDESCRIPTION: Specifies the wire format structure for sets containing arrays, including envelope wrapping for array elements.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct SetOfArrayValue {\n    // Number of dimensions, currently must\n    // always be 0 or 1. 0 indicates an empty set.\n    int32 ndims;\n\n    // Reserved.\n    int32 reserved0;\n\n    // Reserved.\n    int32 reserved1;\n\n    // Dimension data. Same layout as above.\n    Dimension dimensions[ndims];\n\n    // Envelope data, the number of elements\n    // in this array is the sum of dimension sizes:\n    // sum((d.upper - d.lower + 1) for d in dimensions)\n    Envelope elements[];\n};\n\nstruct Envelope {\n    // Encoded envelope element length in bytes.\n    int32 length;\n\n    // Number of elements, currently must\n    // always be 1.\n    int32 nelems;\n\n    // Reserved.\n    int32 reserved\n\n    // Element data. Same layout as above.\n    Element element[nelems];\n};\n```\n\n----------------------------------------\n\nTITLE: Executing 'gel instance list' Command in CLI\nDESCRIPTION: This snippet shows the basic syntax for running the 'gel instance list' command. It lists all registered Gel instances and provides information about their status, port, and other relevant details.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_list.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngel instance list [<options>]\n```\n\n----------------------------------------\n\nTITLE: Calculating Hausdorff Distance Between Geometries\nDESCRIPTION: Function that calculates the Hausdorff distance between two geometries, with an optional density parameter for approximation. Maps to the PostGIS st_hausdorffdistance function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_114\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::hausdorffdistance( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n                  ext::postgis::hausdorffdistance( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                    a2: std::float64, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Testing Chat Creation with cURL\nDESCRIPTION: A bash command using cURL to test the POST /chats endpoint by creating a new chat for user 'charlie'. The response includes the user ID and the newly created chat ID.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X 'POST' \\\n  'http://127.0.0.1:8000/chats?username=charlie' \\\n  -H 'accept: application/json' \\\n  -d ''\n\n{\n  \"id\": \"20372a1a-ded5-11ef-9a08-b329b578c45c\",\n  \"new_chat_id\": \"544ef3f2-ded8-11ef-ba16-f7f254b95e36\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gel CLI with Explicit Instance - Bash\nDESCRIPTION: Demonstrates launching the Gel CLI with an explicitly specified instance using command-line flags.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --instance my_instance\nGel x.x\nType \\help for help, \\quit to quit.\nmain>\n```\n\n----------------------------------------\n\nTITLE: Profiling a Function in Python using EdgeDB Tools\nDESCRIPTION: This snippet demonstrates how to use the @profile decorator from edb.tools.profiling to profile a specific function. The profiler generates .prof files in a temporary directory for each invocation of the decorated function.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/tools/profiling/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edb.tools.profiling import profile\n\n...\n\n@profile()\ndef some_function_we_want_to_profile() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Boolean Literals in EdgeQL\nDESCRIPTION: Examples of declaring boolean literals in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/literals.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nselect true;\nselect false;\n```\n\n----------------------------------------\n\nTITLE: Migration Checksum Error for Data Insertion in EdgeDB\nDESCRIPTION: Error message when trying to apply a data migration with a mismatched checksum, requiring a hash update.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migrate\ngel error: could not read migrations in ./dbschema/migrations:\ncould not read migration file ./dbschema/migrations/00002.edgeql:\nmigration name should be\n`m1juin65wriqmb4vwg23fiyajjxlzj2jyjv5qp36uxenit5y63g2iq` but\n`m1lclvwdpwitjj4xqm45wp74y4wjyadljct5o6bsctlnh5xbto74iq` is used instead.\nMigration names are computed from the hash of the migration contents. To\nproceed you must fix the statement to read as:\n  CREATE MIGRATION m1juin65wriqmb4vwg23fiyajjxlzj2jyjv5qp36uxenit5y63g2iq\n  ONTO ...\nif this migration is not applied to any database. Alternatively,\nrevert the changes to the file.\n```\n\n----------------------------------------\n\nTITLE: Full-text Search Query with Unaccent\nDESCRIPTION: Shows how to perform a full-text search query using the unaccent function for accent-insensitive matching.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_unaccent.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select fts::search(\n...   Post,\n...   ext::pg_unaccent::unaccent('Hôtel'),\n...   language := 'eng',\n... ).object.title;\n{'Hôtel de la Mer'}\n```\n\n----------------------------------------\n\nTITLE: Generated Migration Script for User Type Modification\nDESCRIPTION: This EdgeQL migration script shows the changes to alter the 'User' type, creating a new 'nam' property and dropping the 'name' property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nCREATE MIGRATION m15hu2pbez5od7fe3shlxwcprbqhvctnfavadccjgjszboy26grgka\n    ONTO m17m6qjjhtslfkqojvjb4g2vqtzasv5mlbtrqbp6mhwlzv57p5f2uq\n{\n  ALTER TYPE default::User {\n    CREATE PROPERTY nam: default::Name;\n    DROP PROPERTY name;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos in reStructuredText Documentation\nDESCRIPTION: Example showing how to embed a YouTube video from the Gel channel in documentation using the edb:youtube-embed directive.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_19\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. edb:youtube-embed:: OZ_UURzDkow\n```\n\n----------------------------------------\n\nTITLE: Running Migrations on Linked Gel Instance in Bash\nDESCRIPTION: This command demonstrates how to run migrations on a linked Gel instance named 'fly' using the gel CLI. It uses the '-I' flag to specify the instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/fly_io.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel -I fly migrate\n```\n\n----------------------------------------\n\nTITLE: Setting Role Password in EdgeDB\nDESCRIPTION: Alters an existing role to set its password.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql-repl\nCODE:\n```\nalter role project\n    set password := 'super-password';\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding and Decoding in EdgeQL\nDESCRIPTION: Examples of using enc::base64_encode and enc::base64_decode functions for Base64 encoding and decoding of bytes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bytes.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select enc::base64_encode(b'hello');\n{'aGVsbG8='}\ndb> select enc::base64_decode('aGVsbG8=');\n{b'hello'}\ndb> select enc::base64_decode('aGVsbG8');\ngel error: InvalidValueError: invalid base64 end sequence\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Filtering Classes in Python\nDESCRIPTION: Defines classes and enumerations for metadata filtering in vectorstore operations, including FilterOperator for comparison operators, FilterCondition for combining filters, MetadataFilter for single filter conditions, and CompositeFilter for grouping multiple filters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass FilterOperator(Enum):\n    # Enumeration values not shown for brevity\n\nclass FilterCondition(Enum):\n    AND = \"AND\"\n    OR = \"OR\"\n\nclass MetadataFilter:\n    def __init__(self, key: str, value: int | float | str, operator: FilterOperator = FilterOperator.EQ):\n        # Implementation details not provided\n\nclass CompositeFilter:\n    def __init__(self, filters: list[CompositeFilter | MetadataFilter], condition: FilterCondition = FilterCondition.AND):\n        # Implementation details not provided\n\ndef get_filter_clause(filters: CompositeFilter) -> str:\n    # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Getting Geometry Type\nDESCRIPTION: Function that returns the type of a geometry or geography as a string. Maps to the PostGIS geometrytype function for identifying spatial object types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_99\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geometrytype( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::str\n                  ext::postgis::geometrytype( \\\n                    a0: ext::postgis::geography \\\n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Parameter Status Messages\nDESCRIPTION: Defines the structure of parameter status messages including ParameterStatus, ParameterStatus_SystemConfig, and DataElement for conveying connection parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_18\n\nLANGUAGE: protocol\nCODE:\n```\nedb.protocol.ParameterStatus\nedb.protocol.ParameterStatus_SystemConfig\nedb.protocol.DataElement\n```\n\n----------------------------------------\n\nTITLE: Migration JSON Structure Template\nDESCRIPTION: JSON structure template showing the format for migration operations including placeholders, prompts, confidence levels and safety indicators.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"placeholder\": \"<placeholder variable>\",\n\"prompt\": \"<statement prompt>\"\n},\n...\n],\n\"confidence\": (0..1), // confidence coefficient\n\"prompt\": \"<operation prompt>\",\n\"prompt_id\": \"<prompt id>\",\n// Whether the operation is considered to be non-destructive.\n\"data_safe\": {true|false}\n```\n\n----------------------------------------\n\nTITLE: Defining Execute Message Structure in EdgeDB Protocol\nDESCRIPTION: Defines the structure of the Execute message sent by the client to parse and/or execute a query, including output format and annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_12\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.Execute\n\n.. eql:struct:: edb.protocol.OutputFormat\n\n.. eql:struct:: edb.protocol.Annotation\n\n.. eql:struct:: edb.protocol.enums.Cardinality\n```\n\n----------------------------------------\n\nTITLE: Using the gel info Command\nDESCRIPTION: The basic syntax for the 'gel info' command that displays information about the Gel installation paths.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_info.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel info [<options>]\n```\n\n----------------------------------------\n\nTITLE: Tuple Type Descriptor Structure in C\nDESCRIPTION: Defines the binary structure for Tuple type descriptors, containing tuple element information and inheritance details.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct TupleTypeDescriptor {\n    // Indicates that this is a\n    // Tuple Type descriptor.\n    uint8     tag = 4;\n\n    // Schema type ID.\n    uuid      id;\n\n    // Schema type name.\n    string    name;\n\n    // Whether the type is defined in the schema\n    // or is ephemeral.\n    bool      schema_defined;\n\n    // Number of ancestor scalar types.\n    uint16    ancestors_count;\n\n    // Indexes of ancestor scalar type descriptors\n    // in ancestor resolution order (C3).\n    uint16    ancestors[ancestors_count];\n\n    // The number of elements in tuple.\n    uint16    element_count;\n\n    // Indexes of element type descriptors.\n    uint16    element_types[element_count];\n};\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Error Code Definitions\nDESCRIPTION: Hierarchical structure of error codes used in EdgeDB, with hex-based identifiers and descriptive names. Includes special markers like #SHOULD_RETRY and #SHOULD_RECONNECT for specific error handling behaviors.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/errors.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0x_01_00_00_00   InternalServerError\n\n0x_02_00_00_00   UnsupportedFeatureError\n\n0x_03_00_00_00   ProtocolError\n0x_03_01_00_00   BinaryProtocolError\n0x_03_01_00_01   UnsupportedProtocolVersionError\n0x_03_01_00_02   TypeSpecNotFoundError\n0x_03_01_00_03   UnexpectedMessageError\n\n0x_03_02_00_00   InputDataError\n0x_03_02_01_00   ParameterTypeMismatchError\n0x_03_02_02_00   StateMismatchError  #SHOULD_RETRY\n\n0x_03_03_00_00   ResultCardinalityMismatchError\n\n0x_03_04_00_00   CapabilityError\n0x_03_04_01_00   UnsupportedCapabilityError\n0x_03_04_02_00   DisabledCapabilityError\n0x_03_04_03_00   UnsafeIsolationLevelError\n\n0x_04_00_00_00   QueryError\n[...continued...]\n```\n\n----------------------------------------\n\nTITLE: Preparing Upgrade Information in EdgeDB\nDESCRIPTION: Command to generate the JSON data needed for the in-place upgrade by running a preparation script. This dumps information required by the upgrade process to a file named 'upgrade.json'.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/inplace-upgrades.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntests/inplace-testing/prep-upgrades.py > \"upgrade.json\"\n```\n\n----------------------------------------\n\nTITLE: Importing Gel AI Modules in reStructuredText\nDESCRIPTION: This snippet shows the toctree directive for importing various Gel AI-related modules in the documentation. It includes links to external AI, HTTP, Python, and JavaScript documentation pages.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :hidden:\n    :maxdepth: 3\n\n    extai\n    http\n    python\n    javascript\n```\n\n----------------------------------------\n\nTITLE: Removing Irrelevant Points for View in EQL\nDESCRIPTION: Removes points from a geometry that are not relevant for a given view. This function exposes the PostGIS st_removeirrelevantpointsforview functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_221\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::removeirrelevantpointsforview( \\\n  a0: ext::postgis::geometry, \\\n  a1: ext::postgis::box2d, \\\n  a2: std::bool = false, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Configuring EDGEDB_SERVER_SECURITY for EdgeDB Docker Containers\nDESCRIPTION: This snippet outlines the options for the EDGEDB_SERVER_SECURITY environment variable, which determines how SSL/TLS certificates are handled in EdgeDB Docker containers. It can be set to 'strict' to require an existing certificate file, or 'insecure_dev_mode' to generate a self-signed certificate.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc2.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- ``default`` (equals to ``require_file`` if ``EDGEDB_SERVER_SECURITY``\n  is set to ``strict``, equals to ``generate_self_signed`` if\n  ``EDGEDB_SERVER_SECURITY`` is set to ``insecure_dev_mode``)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fetching Actors\nDESCRIPTION: This GraphQL query demonstrates how to fetch all actors from the database, requesting their age, height, and name attributes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/graphql_apis_with_strawberry.rst#2025-04-16_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery ActorQuery {\n  getActors {\n    age\n    height\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Thread Type Definition in Gel\nDESCRIPTION: Defines the Thread type in Gel with required app_id field and optional title.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ntype Thread {\n        required app_id: int32 {\n            constraint exclusive;\n        }\n        title: str;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Module in EdgeQL\nDESCRIPTION: Demonstrates how to set and use a default module name to avoid fully-qualified type names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/sess_set_alias.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\n# Use the fully-qualified name.\nselect foo::FooType;\n\n# Use the WITH clause to define the default module\n# for the query.\nwith module foo select foo::FooType;\n\n# Set the default module for the current session ...\nset module foo;\n# ... and use an unqualified name.\nselect FooType;\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Branch in EdgeDB\nDESCRIPTION: Creates a new empty branch named 'my_new_feature' without copying from an existing branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ncreate empty branch my_new_feature;\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent in EdgeQL\nDESCRIPTION: Shows how to use math::tan() function to calculate the tangent of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::tan(-math::pi() / 4);\n{-0.999999999}\ndb> select math::tan(0);\n{0}\ndb> select math::tan(math::pi() / 4);\n{0.999999999}\n```\n\n----------------------------------------\n\nTITLE: Object Type Descriptor Structure in C\nDESCRIPTION: Defines the binary structure for Object type descriptors, containing basic type identification information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstruct ObjectTypeDescriptor {\n    // Indicates that this is an\n    // object type descriptor.\n    uint8   tag = 10;\n\n    // Schema type ID.\n    uuid    id;\n\n    // Schema type name (can be empty for ephemeral free object types).\n    string  name;\n\n    // Whether the type is defined in the schema\n    // or is ephemeral.\n    bool    schema_defined;\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Shape-based and Path-based Queries in EdgeQL\nDESCRIPTION: Illustrates the difference between using computed properties in shapes and direct path expressions with the '??' operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Account {\n    too_few_steps := (.steps <= 2) ?? true\n}.too_few_steps;\n\nselect (Account.steps <= 2) ?? true;\n```\n\n----------------------------------------\n\nTITLE: Testing GET Events Endpoint with HTTPX\nDESCRIPTION: Bash command to test the GET /events endpoint using HTTPX, which retrieves all events.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -m GET http://localhost:5001/events\n```\n\n----------------------------------------\n\nTITLE: Structure Definition for cal::relative_duration in EdgeDB Protocol\nDESCRIPTION: C structure definition for cal::relative_duration values. The structure includes microseconds, days, and months fields to represent temporal durations with varying units.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nstruct Duration {\n    int64   microseconds;\n    int32   days;\n    int32   months;\n};\n```\n\n----------------------------------------\n\nTITLE: Behavior of 'all' and 'any' Functions with Empty Sets in EdgeQL\nDESCRIPTION: Shows the surprising but mathematically consistent results of 'all' and 'any' functions when applied to empty sets of booleans.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select all(<bool>{});\n{true}\ndb> select any(<bool>{});\n{false}\n```\n\n----------------------------------------\n\nTITLE: Installing Gel 6.0 on CentOS/RHEL\nDESCRIPTION: Command to install Gel 6.0 on CentOS/RHEL systems using yum package manager.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo yum install gel-6\n```\n\n----------------------------------------\n\nTITLE: Defining anytype Abstract Type in EdgeDB\nDESCRIPTION: Defines the 'anytype' abstract type, which is a generic placeholder used when no specific type requirements are needed, particularly for defining polymorphic parameters in functions and operators.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_0\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: anytype\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for @gel/generate\nDESCRIPTION: Command to show the help text for the @gel/generate command, displaying available options and usage information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate --help\n```\n\n----------------------------------------\n\nTITLE: Applying Migration After Squash in EdgeDB CLI\nDESCRIPTION: Shows the output when applying a migration after a squash operation, displaying the applied migration ID and file name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migrate\n\nApplied m1v3vqmwif4ml3ucbzi555mjgm4myxs2husqemopo2sz2m7otr22ka\n(m16awk2tzhtbupjrzoc4fikgw5okxpfnaazupb6rxudxwin2qfgy5q-\nm1oih6aevfcftysukvofwuth2bsuj5aahkdnpabscry7p7ljkgbxma.edgeql)\n```\n\n----------------------------------------\n\nTITLE: Calculating Geometric Median\nDESCRIPTION: Function to calculate the geometric median of a geometry, with parameters for tolerance, maximum iterations, and failure behavior. Wraps the PostGIS st_geometricmedian function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_95\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geometricmedian( \\\n                    g: optional ext::postgis::geometry, \\\n                    tolerance: optional std::float64 = {}, \\\n                    max_iter: optional std::int64 = 10000, \\\n                    fail_if_not_converged: optional std::bool = false, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Filter Conditions in GraphQL vs EdgeQL\nDESCRIPTION: Example showing how to apply multiple filter conditions to Book objects in both GraphQL and EdgeQL, filtering by title range.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    Book(\n        filter: {\n            title: {\n                gte: \"m\",\n                lt: \"o\"\n            }\n        }\n    ) {\n        title\n    }\n}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect\n    Book {\n        title,\n    }\nfilter\n    Book.title >= 'm'\n    and\n    Book.title < 'o';\n```\n\n----------------------------------------\n\nTITLE: Geometry Type Conversion Functions\nDESCRIPTION: Functions for converting between different PostGIS geometry types including box2d, box3d, geography, and geometry. These enable interoperability between different spatial data representations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_240\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::to_box2d( \\\n  a0: ext::postgis::box3d \\\n) ->  ext::postgis::box2d\next::postgis::to_box2d( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::box2d\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::to_box3d( \\\n  a0: ext::postgis::box2d \\\n) ->  ext::postgis::box3d\next::postgis::to_box3d( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::box3d\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::to_geography( \\\n  a0: std::bytes \\\n) ->  ext::postgis::geography\next::postgis::to_geography( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::geography\n```\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::to_geometry( \\\n  a0: std::str \\\n) ->  ext::postgis::geometry\next::postgis::to_geometry( \\\n  a0: std::bytes \\\n) ->  ext::postgis::geometry\next::postgis::to_geometry( \\\n  a0: ext::postgis::box2d \\\n) ->  ext::postgis::geometry\next::postgis::to_geometry( \\\n  a0: ext::postgis::box3d \\\n) ->  ext::postgis::geometry\next::postgis::to_geometry( \\\n  a0: ext::postgis::geography \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: User Schema with Required Name in EdgeDB SDL\nDESCRIPTION: Modified User schema making the name property required.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Date Duration in EdgeQL\nDESCRIPTION: Examples of using the new cal::date_duration type in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nselect <cal::local_date>'2022-06-25' +\n  <cal::date_duration>'5 days';\nselect <cal::local_date>'2022-06-30' -\n  <cal::local_date>'2022-06-25';\n```\n\n----------------------------------------\n\nTITLE: DDL Migration Dropping Name Property\nDESCRIPTION: Auto-generated DDL commands to remove the name property from User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nALTER TYPE default::User {\n    DROP PROPERTY name;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Gel Cloud REPL\nDESCRIPTION: Command to access the REPL interface for a Gel Cloud instance\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel \\\n    -I <org-name>/<instance-name>\n```\n\n----------------------------------------\n\nTITLE: Comparing Geometry Values\nDESCRIPTION: Function for comparing two geometry values, returning an integer result. Maps to the PostGIS geometry_cmp function for ordering geometry objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_96\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geometry_cmp( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Converting String to Decimal in EdgeQL\nDESCRIPTION: Demonstrates converting a string with ordinal number format to decimal type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_19\n\nLANGUAGE: edgeql\nCODE:\n```\nselect to_decimal('31st', '999th');\n```\n\n----------------------------------------\n\nTITLE: Installing Nightly Version of Gel CLI\nDESCRIPTION: Command to install the nightly (development) version of the Gel CLI tool\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --proto '=https' --tlsv1.2 -sSf https://www.geldata.com/sh | \\\n      sh -s -- --nightly\n```\n\n----------------------------------------\n\nTITLE: Dropping a Database in EdgeQL (Deprecated)\nDESCRIPTION: Removes an existing database permanently. This command is deprecated as of Gel 5.0, and cannot be executed while there are active connections to the target database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/branches.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop database appdb;\n```\n\n----------------------------------------\n\nTITLE: Status Type Definition in Gel\nDESCRIPTION: Defines the Status type in Gel with a required title field and exclusive constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ntype Status {\n        required title: str {\n            constraint exclusive;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Connecting with New SQL Role\nDESCRIPTION: Command for connecting to EdgeDB using psql with the newly created SQL role.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ psql -h localhost -p 10701 -U sql -d main\n```\n\n----------------------------------------\n\nTITLE: Adding Linked Items in EdgeQL\nDESCRIPTION: Demonstrates how to add additional linked items using the += operator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/update.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate Movie\nfilter .title = \"Black Widow\"\nset {\n characters += (insert Villain {name := \"Taskmaster\"})\n};\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager\nDESCRIPTION: Command to install UV, a Python package manager for environment management\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsEmpty Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsEmpty function which tests if a geometry is empty.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_124\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::isempty( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Enabling Gel Server Systemd Unit\nDESCRIPTION: Command to enable and start the Gel server systemd unit\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl enable --now gel-server-6\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Wait Time in Python for EdgeDB\nDESCRIPTION: Demonstrates how to use the new wait_until_available configuration parameter when establishing a connection to EdgeDB. This parameter specifies the maximum time (in seconds) to wait for the database to become available.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncon = edgedb.connect(\n    user='edgedeb',\n    wait_until_available=10\n)\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Greater Than Comparison Examples\nDESCRIPTION: Demonstrates the greater than operator (>) for comparing different types of values. Shows examples with numbers, strings, tuples and empty set handling.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 1 > 2;\n{false}\ndb> select 3 > 2;\n{true}\ndb> select 'hello' > 'world';\n{false}\ndb> select (1, 'hello') > (1, 'world');\n{false}\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS area2d Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_area2d function in EdgeQL. Calculates the 2D area of a geometry. Returns a float64 value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_6\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::area2d( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Enumeration Type Descriptor Structure in C\nDESCRIPTION: Defines the binary structure for Enumeration type descriptors, containing member definitions and type information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstruct EnumerationTypeDescriptor {\n    // Indicates that this is an\n    // Enumeration Type descriptor.\n    uint8   tag = 7;\n\n    // Schema type ID.\n    uuid    id;\n\n    // Schema type name.\n    string  name;\n\n    // Whether the type is defined in the schema\n    // or is ephemeral.\n    bool    schema_defined;\n\n    // Number of ancestor scalar types.\n    uint16  ancestors_count;\n\n    // Indexes of ancestor scalar type descriptors\n    // in ancestor resolution order (C3).\n    uint16  ancestors[ancestors_count];\n\n    // The number of enumeration members.\n    uint16  member_count;\n\n    // Names of enumeration members.\n    string  members[member_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Content Block Start Event Formats for Streaming RAG Response\nDESCRIPTION: The second event in a streaming RAG response using Server-Sent Events (SSE). This event marks the beginning of a content block, either for text content or for a tool call. It establishes the structure that subsequent content will be added to.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"content_block_start\",\n  \"index\": 0,\n  \"content_block\": {\n    \"type\": \"text\",\n    \"text\": \"\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"content_block_start\",\n  \"index\": 0,\n  \"content_block\": {\n    \"id\": \"<tool_call_id>\",\n    \"type\": \"tool_use\",\n    \"name\": \"<function_name>\",\n    \"args\": \"{...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StateDataDescription Message Structure in EdgeDB Protocol\nDESCRIPTION: Specifies the format of the StateDataDescription message sent by the server to describe state data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_7\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.StateDataDescription\n```\n\n----------------------------------------\n\nTITLE: Gel Dump Command Syntax\nDESCRIPTION: Basic command syntax for the gel dump operation to backup a database branch to a file. Includes base command and option placeholders.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_dump.rst#2025-04-16_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\ngel dump [<options>] <path>\n```\n\n----------------------------------------\n\nTITLE: Defining Movie Entity in Hibernate ORM (Java)\nDESCRIPTION: Example of a Hibernate ORM entity class definition for a Movie object in Java.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@Entity\nclass Movie {\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    UUID id;\n\n    private String title;\n\n    @NotNull\n    private Integer releaseYear;\n\n    // ... getters and setters ...\n}\n```\n\n----------------------------------------\n\nTITLE: Project Environment Setup Commands\nDESCRIPTION: Shell commands for setting up development environments for different programming languages including Node.js, Deno, Python, Rust, Go, and .NET\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/clients.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mydir myproject\n$ cd myproject\n$ gel project init\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch in Gel CLI\nDESCRIPTION: This command creates a new branch in Gel. By default, it creates a branch with the same schema as the current branch. It can optionally create an empty branch or copy data from a base branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/gel_branch_create.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel branch create [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Converting PostGIS Geometry/Geography to WKT\nDESCRIPTION: Converts PostGIS geometry or geography to Well-Known Text (WKT) format without SRID metadata. Allows specifying decimal precision for coordinates.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::astext( \n  a0: std::str \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::astext( \n  a0: ext::postgis::geometry \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::astext( \n  a0: ext::postgis::geography \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::astext( \n  a0: ext::postgis::geometry, \n  a1: std::int64, \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::astext( \n  a0: ext::postgis::geography, \n  a1: std::int64, \n) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Cloning and initializing Gel Next.js starter template\nDESCRIPTION: This snippet demonstrates how to clone the Next.js starter template from GitHub, navigate to the project directory, install dependencies, and initialize the Gel project.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/nextjs.rst#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone \\\n    git@github.com:geldata/quickstart-nextjs.git \\\n    flashcards\n$ cd flashcards\n$ npm install\n$ npx gel project init\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Properties in SDL\nDESCRIPTION: Shows how to declare abstract properties in Gel SDL. The example defines an abstract 'title_prop' with an annotation and a readonly flag.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/inheritance.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nabstract property title_prop {\n  annotation title := 'A title.';\n  readonly := false;\n}\n```\n\n----------------------------------------\n\nTITLE: Schema with Required Link in EdgeDB SDL\nDESCRIPTION: Schema definition showing a Character type with a required link to CharacterClass, which is not compatible with existing data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_31\n\nLANGUAGE: sdl\nCODE:\n```\ntype CharacterClass {\n  required name: str;\n  multi skills: str;\n}\n\ntype Character {\n  required name: str;\n  required class: CharacterClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Project\nDESCRIPTION: Creates a new Gel project using the Gel CLI\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx gel project init\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Rust\nDESCRIPTION: Example of setting global variables in a Rust client implementation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse gel_protocol::{\n  model::Uuid,\n  value::EnumValue\n};\n\nlet client = gel_tokio::create_client()\n    .await\n    .expect(\"Client should init\")\n    .with_globals_fn(|c| {\n        c.set(\n            \"current_user\",\n            Value::Uuid(\n                Uuid::parse_str(\"2141a5b4-5634-4ccc-b835-437863534c51\")\n                    .expect(\"Uuid should have parsed\"),\n            ),\n        );\n        c.set(\n            \"current_country\",\n            Value::Enum(EnumValue::from(\"Full\"))\n        );\n    });\nclient\n    .query_required_single::<Uuid, _>(\"select global current_user;\", &())\n    .await\n    .expect(\"Returning value\");\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Authentication Protocol Messages\nDESCRIPTION: Defines the structure of authentication-related protocol messages including AuthenticationOK, AuthenticationSASL, AuthenticationSASLContinue, AuthenticationSASLFinal, AuthenticationSASLInitialResponse, and AuthenticationSASLResponse.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_16\n\nLANGUAGE: protocol\nCODE:\n```\nedb.protocol.AuthenticationOK\nedb.protocol.AuthenticationRequiredSASLMessage\nedb.protocol.AuthenticationSASLContinue\nedb.protocol.AuthenticationSASLFinal\nedb.protocol.AuthenticationSASLInitialResponse\nedb.protocol.AuthenticationSASLResponse\n```\n\n----------------------------------------\n\nTITLE: Modifying Section Schema in Gel\nDESCRIPTION: Updates the Section type in the Gel schema to include a unique path identifier and checksum for efficient updates.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_11\n\nLANGUAGE: sdl-diff\nCODE:\n```\ntype Section {\n+   required path: str {\n+     constraint exclusive;\n+   }\n+   required checksum: str;\n    # The rest of the Section type\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Superuser Role in EdgeDB\nDESCRIPTION: Creates a new superuser role named 'project'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ncreate superuser role project;\n```\n\n----------------------------------------\n\nTITLE: Altering Abstract Constraint in EdgeDB\nDESCRIPTION: This example shows how to alter an existing abstract constraint by renaming it from 'uppercase' to 'upper_case'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nalter abstract constraint uppercase rename to upper_case;\n```\n\n----------------------------------------\n\nTITLE: Encoding cfg::memory in EdgeDB Protocol\nDESCRIPTION: Binary encoding format for cfg::memory values. The value is represented as a 64-bit integer (most significant byte first) representing the number of bytes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n0x00 0x00 0x00 0x00 0x07 0xb0 0x00 0x00\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Callouts\nDESCRIPTION: Example of creating warning callouts in reStructuredText.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. warning::\n\n    This paragraph is a warning.\n```\n\n----------------------------------------\n\nTITLE: Extension Management Commands in Bash\nDESCRIPTION: CLI commands for listing installed and available extensions, installing extensions and restarting instances\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/extensions.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension list\n┌─────────┬─────────┐\n│ Name    │ Version │\n└─────────┴─────────┘\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension list-available\n┌─────────┬───────────────┐\n│ Name    │ Version       │\n│ postgis │ 3.4.3+6b82d77 │\n└─────────┴───────────────┘\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension install postgis\nFound extension package: postgis version 3.4.3+6b82d77\n00:00:03 [====================] 22.49 MiB/22.49 MiB\nExtension 'postgis' installed successfully.\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel extension list\n┌─────────┬───────────────┐\n│ Name    │ Version       │\n│ postgis │ 3.4.3+6b82d77 │\n└─────────┴───────────────┘\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance restart\n```\n\n----------------------------------------\n\nTITLE: Using the 'gel instance credentials' Command\nDESCRIPTION: The command syntax for displaying Gel instance credentials. It supports options like '--json' for JSON output with cleartext passwords and TLS certificates, and '--insecure-dsn' for outputting a DSN with cleartext password.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_credentials.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel instance credentials [options] [connection-options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Signing Key\nDESCRIPTION: Sets up the JWT signing key used for internal authentication operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH SET\next::auth::AuthConfig::auth_signing_key := 'F2KHaJfHi9Dzd8+6DI7FB9IFIoJXnhz2rzG/UzCRE7jTtYxqgTHHydc8xnN6emDB3tlR99FvPsyJfcVLVcQ5odSQpceDXplBOP+N14+EBy2mV6rA/7W7azIEKebtr9TVKrpBTMTOLAXo08ZnA6lvjn0VMs95za6Pta7VW62hjcb8jy6yxulvvU5SWnwa0x2z401K0pLK7byDD5eNqgTl40YaeOGoQ0iCkSmGxvLxyQgCIz2IU0zUbBwC9bQsTDORvflunruJznHuMxwbfYo/czQIIGuawU0H+G3GJZ3hecZLQlvwYCyLF37PFQVrcNMtUuGyDy2OyYtYHru2GW5B7Q';\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure\nDESCRIPTION: Sets up the RST documentation structure with version control, reference index, and table of contents for the Gel project reference documentation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. versioned-section::\n\n.. _ref_reference_index:\n\n=========\nReference\n=========\n\n.. toctree::\n    :maxdepth: 3\n    :hidden:\n\n    edgeql/index\n```\n\n----------------------------------------\n\nTITLE: Forcing Polygon CW in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_forcepolygoncw function to force the orientation of polygon vertices to clockwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_84\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::forcepolygoncw( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Unlinking Gel Project\nDESCRIPTION: Demonstrates how to unlink a Gel project from its associated instance, with an option to delete the instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project unlink\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project unlink -D\n```\n\n----------------------------------------\n\nTITLE: Counting Interior Rings in EdgeQL\nDESCRIPTION: Returns the number of interior rings in a polygon geometry. This function exposes the PostGIS st_numinteriorring function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_190\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::numinteriorring( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Links in EdgeDB SDL\nDESCRIPTION: Shows how to create abstract link types 'crew', 'directors', and 'actors' with inheritance relationships between them.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/objects.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nabstract link crew {\n    # Provide a way to specify some \"natural\"\n    # ordering, as relevant to the movie. This\n    # may be order of importance, appearance, etc.\n    list_order: int64;\n}\n\nabstract link directors {\n    extending crew;\n};\n\nabstract link actors {\n    extending crew;\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Filtering Example\nDESCRIPTION: Example of using deep link traversal filtering in GraphQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  UserGroup(\n    filter: {settings: {name: {eq: \"setting06\"}}}\n  ) {\n    name\n    settings {\n      name\n      value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Data in EdgeDB\nDESCRIPTION: This EdgeDB query demonstrates how to retrieve User data, including related Status, Badge, and Bookmark information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql-repl\nCODE:\n```\nselect User {\n  name,\n  email,\n  status: {title},\n  badge: {name},\n  bookmark: {\n    @note,\n    body,\n    user: {name}\n  },\n} filter .name = 'Cameron';\n```\n\n----------------------------------------\n\nTITLE: Linking CLI with Instance\nDESCRIPTION: Command to link the Gel CLI with a local instance\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance link \\\n   --host localhost \\\n   --port 5656 \\\n   --user admin \\\n   --branch main \\\n   --trust-tls-cert \\\n   bare_metal_instance\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS asbinary Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_asbinary function in EdgeQL. Converts geometry or geography to WKB format. Returns bytes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_7\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::asbinary( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bytes\n                  ext::postgis::asbinary( \\\n                    a0: ext::postgis::geography \\\n                  ) ->  std::bytes\n                  ext::postgis::asbinary( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::str, \\\n                  ) ->  std::bytes\n                  ext::postgis::asbinary( \\\n                    a0: optional ext::postgis::geography, \\\n                    a1: optional std::str, \\\n                  ) -> optional std::bytes\n```\n\n----------------------------------------\n\nTITLE: Extended Character Schema with NewClass Type in SDL\nDESCRIPTION: Updated schema adding a new class type while maintaining the old enum-based class property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_9\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type CharacterClass extending enum<warrior, scholar, rogue>;\n\ntype NewClass {\n  required name: str;\n  multi skills: str;\n}\n\ntype Character {\n  required name: str;\n  required class: CharacterClass;\n  new_class: NewClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Gel REPL\nDESCRIPTION: Command to start the Gel REPL interface for database interaction.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/fastapi.rst#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ uvx gel\n```\n\n----------------------------------------\n\nTITLE: Creating a Database in EdgeQL (Deprecated)\nDESCRIPTION: Creates a new Gel database with all standard schemas prepopulated. This command is deprecated as of Gel 5.0, as 'database' terminology has been replaced by 'branch'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/branches.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate database appdb;\n```\n\n----------------------------------------\n\nTITLE: Defining RestoreBlock Message Structure in EdgeDB Protocol\nDESCRIPTION: Defines the structure of the RestoreBlock message sent by the client to send dump file data blocks during database restore.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_10\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.RestoreBlock\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsValidReason Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsValidReason function which returns a text string explaining why a geometry is invalid. The function supports an optional flag parameter to control validation behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_130\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::isvalidreason( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::str\n                  ext::postgis::isvalidreason( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::int64, \\\n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Dropping Property from User Type in EdgeDB\nDESCRIPTION: Removes the 'address' property from the User type schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/properties.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User {\n  drop property address;\n};\n```\n\n----------------------------------------\n\nTITLE: Dropping Global Variables in EdgeQL\nDESCRIPTION: Syntax for removing a global variable from the schema in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/globals.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\n[ with <with-item> [, ...] ]\ndrop global <name> ;\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsSimple Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsSimple function which tests if a geometry has no self-intersections.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_128\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::issimple( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Creating a Gel Cloud Instance with project init and server-instance option\nDESCRIPTION: Command for creating a new Gel Cloud instance while also initializing a local project linked to the instance. Uses the --server-instance flag to specify the instance name in the format <org-name>/<instance-name>.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/cli.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init \\\n  --server-instance <org-name>/<instance-name>\n```\n\n----------------------------------------\n\nTITLE: Stopping a Gel Instance using CLI Command\nDESCRIPTION: This command stops a running Gel instance. It requires the name of the instance as an argument. This command is not intended for use with self-hosted instances and is a necessary step before destroying an instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_stop.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel instance stop <name>\n```\n\n----------------------------------------\n\nTITLE: Array Joining in EdgeQL\nDESCRIPTION: Demonstrates the array_join function for joining array elements into a single string or byte-string using a delimiter.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select array_join(['one', 'two', 'three'], ', ');\n{'one, two, three'}\n\ndb> select array_join([b'\\x01', b'\\x02', b'\\x03'], b'\\xff');\n{b'\\x01\\xff\\x02\\xff\\x03'}\n```\n\n----------------------------------------\n\nTITLE: Running the Embeddings Generation Script in Bash\nDESCRIPTION: Bash commands to run the embeddings generation script and then open the Gel UI to verify that the database has been updated with the embeddings data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run embeddings\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx gel ui\n```\n\n----------------------------------------\n\nTITLE: Querying Person Table in SQL\nDESCRIPTION: SQL query to select all Person records with their ID and name from the mapped PostgreSQL table.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM \"Person\";\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Wire Format Structure in C\nDESCRIPTION: Specifies the wire format structure for decimal values, including digit storage and scale information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstruct Decimal {\n    // Number of digits in digits[], can be 0.\n    uint16               ndigits;\n\n    // Weight of first digit.\n    int16                weight;\n\n    // Sign of the value\n    uint16<DecimalSign>  sign;\n\n    // Value display scale.\n    uint16               dscale;\n\n    // base-10000 digits.\n    uint16                digits[ndigits];\n};\n\nenum DecimalSign {\n    // Positive value.\n    POS     = 0x0000;\n\n    // Negative value.\n    NEG     = 0x4000;\n};\n```\n\n----------------------------------------\n\nTITLE: Attempting Direct DDL Statement in EdgeQL\nDESCRIPTION: This snippet demonstrates an attempt to use a direct DDL statement to create a new type, which is blocked by default configuration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_30\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate type MyType;\n```\n\n----------------------------------------\n\nTITLE: Compound Type Descriptor Structure in C\nDESCRIPTION: Partial definition of the Compound type descriptor structure, showing only the initial comment.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstruct CompoundTypeDescriptor {\n    // Indicates that this is a\n\n```\n\n----------------------------------------\n\nTITLE: Docker Authentication Setup for Gel CLI\nDESCRIPTION: Commands to authenticate with a Gel instance and store credentials in a Docker volume\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/docker.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm --link=gel \\\n   -e GEL_SERVER_PASSWORD=secret \\\n   -v gel-cli-config:/.config/edgedb geldata/gel-cli \\\n   -H gel instance link my_instance \\\n       --tls-security insecure \\\n       --non-interactive\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Page Documentation Example in reStructuredText\nDESCRIPTION: Example of applying the versionadded directive to an entire page of documentation. This shows how to structure a full documentation page with version information and reference labels.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_17\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. versionadded:: 2.0\n\n.. _ref_datamodel_globals:\n\n=======\nGlobals\n=======\n...\n```\n\n----------------------------------------\n\nTITLE: Persistent Data Storage Configuration for Windows\nDESCRIPTION: Docker commands to create and use a named volume for data persistence on Windows systems\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/docker.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume create --name=gel-data\n$ docker run \\\n   --name gel \\\n   -e GEL_SERVER_PASSWORD=secret \\\n   -e GEL_SERVER_TLS_CERT_MODE=generate_self_signed \\\n   -v gel-data:/var/lib/gel/data \\\n   -d geldata/gel\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Switcher in reStructuredText\nDESCRIPTION: Sets up an environment switcher directive for documentation that likely allows switching between different environments or contexts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/inheritance/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. edb:env-switcher::\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_LineFromWKB Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_LineFromWKB function which creates a LineString geometry from Well-Known Binary (WKB) representation. Supports specifying a spatial reference ID (SRID).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_140\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::linefromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::linefromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: This snippet shows the command to start the Next.js development server for the flashcard application.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/working/nextjs.rst#2025-04-16_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Exclusive Constraint to Event Chain in EdgeDB SDL\nDESCRIPTION: Final Event schema with exclusive constraint on prev link to ensure one-to-one relationships in the event chain.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\ntype Event {\n  required name: str;\n\n  prev: Event {\n    constraint exclusive;\n  };\n  next := .<prev[is Event];\n}\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Query Examples\nDESCRIPTION: Example showing EdgeQL query syntax with TypeScript implementation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert Movie {\n  title := 'Doctor Strange 2',\n  release_year := 2022\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = e.insert(e.Movie, {\n  title: 'Doctor Strange 2',\n  release_year: 2022\n});\n\nconst result = await query.run(client);\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with TypeScript\nDESCRIPTION: Initialize a new Next.js project with TypeScript support using create-next-app\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --typescript nextjs-blog\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Switcher in reStructuredText\nDESCRIPTION: Sets up an environment switcher directive for the documentation. This likely allows for switching between different environment configurations or versions of the documentation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/overview/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. edb:env-switcher::\n```\n\n----------------------------------------\n\nTITLE: Adding New User Mutation\nDESCRIPTION: Creates a new user with a name and image, returning the new user's ID.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/cheatsheet.rst#2025-04-16_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation add_user {\n    insert_User(\n        data: {name: \"Atreides\", image: \"atreides.jpg\"}\n    ) {\n        id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Embeddings Script to package.json\nDESCRIPTION: JSON diff showing the addition of an 'embeddings' script to package.json to make it easier to run the embedding generation script using npm.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"docs-chatbot\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n-     \"lint\": \"next lint\"\n+     \"lint\": \"next lint\",\n+     \"embeddings\": \"tsx generate-embeddings.ts\"\n  },\n  \"dependencies\": {\n    \"gel\": \"^1.3.5\",\n    \"next\": \"^13.4.19\",\n    \"openai\": \"^4.0.1\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"typescript\": \"5.1.6\"\n  },\n  \"devDependencies\": {\n    \"@gel/generate\": \"^0.3.3\",\n    \"@types/node\": \"20.4.8\",\n    \"@types/react\": \"18.2.18\",\n    \"@types/react-dom\": \"18.2.7\",\n    \"autoprefixer\": \"10.4.14\",\n    \"dotenv\": \"^16.3.1\",\n    \"eslint\": \"8.46.0\",\n    \"eslint-config-next\": \"13.4.13\",\n    \"gpt-tokenizer\": \"^2.1.1\",\n    \"postcss\": \"8.4.27\",\n    \"tailwindcss\": \"3.3.3\",\n    \"tsx\": \"^3.12.7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Data Modification Statements\nDESCRIPTION: Statements for modifying database data including INSERT for creating new objects, UPDATE for modifying existing objects, and DELETE for removing objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\ninsert\nupdate\ndelete\n```\n\n----------------------------------------\n\nTITLE: Testing Chatbot Improvements with cURL Commands\nDESCRIPTION: These cURL commands demonstrate how to test the improved chatbot by sending POST requests to the /messages endpoint with different queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X 'POST' \\\n    'http://localhost:8000/messages?username=alice&chat_id=d4eed420-e903-11ef-b8a7-8718abdafbe1' \\\n    -H 'accept: application/json' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n    \"query\": \"what are people saying about gel\"\n  }'\n\n$ curl -X 'POST' \\\n    'http://localhost:8000/messages?username=alice&chat_id=d4eed420-e903-11ef-b8a7-8718abdafbe1' \\\n    -H 'accept: application/json' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n    \"query\": \"do they like it or not\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Data Block Structure in C\nDESCRIPTION: Defines the structure of data blocks used for storing actual database content. Includes message type, length, and headers with specific known header types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dump_format.rst#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct DumpBlock {\n    // Message type ('=')\n    int8            mtype = 0x3d;\n\n    // Length of message contents in bytes,\n    // including self.\n    int32           message_length;\n\n    // A set of message headers.\n    Headers         headers;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Go\nDESCRIPTION: Example of setting global variables in a Go client implementation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n\n  \"github.com/geldata/gel-go\"\n)\n\nfunc main() {\n  ctx := context.Background()\n  client, err := gel.CreateClient(ctx, gel.Options{})\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer client.Close()\n\n  id, err := gel.ParseUUID(\"2141a5b4-5634-4ccc-b835-437863534c51\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  var result gel.UUID\n  err = client.\n    WithGlobals(map[string]interface{}{\"current_user\": id}).\n    QuerySingle(ctx, \"SELECT global current_user;\", &result)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Embedding Generation Script\nDESCRIPTION: Creates a new TypeScript file for the embedding generation script.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ touch generate-embeddings.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID with uuid_generate_v4() in EdgeQL\nDESCRIPTION: Demonstrates generating a version 4 UUID using the uuid_generate_v4() function, which creates a UUID entirely from random numbers (122 random bits and 6 version bits).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/uuid.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select uuid_generate_v4();\n{92673afc-9c4f-42b3-8273-afe0053f0f48}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Tutorials section using reStructuredText syntax. It sets the maximum depth to 2 and includes a reference to the 'ai_fastapi_searchbot' tutorial.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  ai_fastapi_searchbot\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Annotation in EdgeQL\nDESCRIPTION: DDL command to declare a new abstract annotation named extrainfo.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/annotations.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate abstract annotation extrainfo;\n```\n\n----------------------------------------\n\nTITLE: Implicit Cast in Sets\nDESCRIPTION: Shows how mixed numeric types in sets are automatically cast to a common type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/casts.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select {1, 2.3, <float32>4.5} is float64;\n{true, true, true}\n```\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select (1 union 2.3 union <float32>4.5) is float64;\n{true, true, true}\n```\n\n----------------------------------------\n\nTITLE: Annotating Accounts with Complex Condition in EdgeQL\nDESCRIPTION: Shows how to use the '??' operator to annotate accounts based on a complex condition, handling cases where 'steps' might be undefined.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Account {\n    completed := (.steps > 2) ?? false\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating reStructuredText Headings\nDESCRIPTION: Shows the proper heading hierarchy and formatting used in Gel documentation using reStructuredText markup.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n==========\nPage Title\n==========\n\nSection\n=======\n\nSub-Section\n-----------\n\nSub-Sub-Section\n^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Using Source Deletion Section Example in reStructuredText\nDESCRIPTION: Example of how to create a section with a versionadded directive in the documentation. This specific example demonstrates documentation for source deletion policies in links.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_15\n\nLANGUAGE: restructuredtext\nCODE:\n```\nSource deletion\n^^^^^^^^^^^^^^^\n\n.. versionadded:: 7.0\n\nSource deletion policies determine what action should be taken when the\n*source* of a given link is deleted. They are declared with the ``on source\ndelete`` clause.\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Message Posting with cURL\nDESCRIPTION: Bash commands using cURL to test the POST /messages endpoint by sending two consecutive queries to a chat. This demonstrates how to send messages to be processed by the API and generate responses.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X 'POST' \\\n  'http://127.0.0.1:8000/messages?username=charlie&chat_id=544ef3f2-ded8-11ef-ba16-f7f254b95e36' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"query\": \"best database in existence\"\n}'\n\n$ curl -X 'POST' \\\n  'http://127.0.0.1:8000/messages?username=charlie&chat_id=544ef3f2-ded8-11ef-ba16-f7f254b95e36' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"query\": \"gel\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Segmentizing Geometry in EQL\nDESCRIPTION: Creates a new geometry with no segment longer than a specified distance. This function exposes the PostGIS st_segmentize functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_228\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::segmentize( \\\n  a0: ext::postgis::geometry, \\\n  a1: std::float64, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Intermediate Schema with Both Link and Array Property in EdgeDB SDL\nDESCRIPTION: An intermediate schema that maintains the original 'friends' link while adding a new 'friend_names' property to preserve data during migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_37\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    name: str;\n    multi friends: User;\n    friend_names: array<str>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the gel instance logs Command\nDESCRIPTION: Command syntax for the 'gel instance logs' command. It allows users to view logs for a specific Gel instance with options to control the output.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_logs.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel instance logs [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText\nDESCRIPTION: Defines a table of contents for the documentation, including links to NextJS and FastAPI sections. The toctree is set to a maximum depth of 3 and is hidden from direct view.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/overview/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 3\n  :hidden:\n\n  nextjs\n  fastapi\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_InverseTransformPipeline Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_InverseTransformPipeline function which transforms a geometry using an inverse coordinate transformation pipeline.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_121\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::inversetransformpipeline( \\\n                    geom: ext::postgis::geometry, \\\n                    pipeline: std::str, \\\n                    to_srid: std::int64 = 0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Upgrade Command in Terminal\nDESCRIPTION: This snippet shows the basic syntax for running the 'gel cli upgrade' command in a terminal. It can be used with optional parameters to customize the upgrade process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_cli_upgrade.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngel cli upgrade [<options>]\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS geometry cleaning function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_cleangeometry function, which attempts to make an invalid geometry valid without losing vertices.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_33\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::cleangeometry( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Converting to RegClass in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates the use of the to_regclass() function and the ::regclass cast operator in PostgreSQL for converting object names to their corresponding OIDs.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nto_regclass()\n::regclass\n```\n\n----------------------------------------\n\nTITLE: Dropping Alias Using DDL Command in EdgeQL\nDESCRIPTION: Shows how to remove an existing alias using the DROP ALIAS DDL command in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/aliases.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop alias SuperUsers;\n```\n\n----------------------------------------\n\nTITLE: Using Array Methods with Dynamic Indices in Gel TypeScript\nDESCRIPTION: Shows how to use the equivalent .index and .slice methods that accept other expressions as arguments, allowing for dynamic indexing and slicing of array expressions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst start = e.int64(1);\nconst end = e.int64(3);\n\nmyArray.index(start);\n// ['a', 'b', 'c', 'd', 'e'][1]\n\nmyArray.slice(start, end);\n// ['a', 'b', 'c', 'd', 'e'][1:3]\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Protocol Structures for Dump Messages\nDESCRIPTION: Defines the structure of dump-related protocol messages including DumpHeader, DumpTypeInfo, DumpObjectDesc, and DumpBlock. Contains attributes for block type, server time, version and catalog information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_15\n\nLANGUAGE: protocol\nCODE:\n```\nedb.protocol.DumpHeader\nedb.protocol.DumpTypeInfo\nedb.protocol.DumpObjectDesc\n\nAttributes:\n101 BLOCK_TYPE -- \"I\"\n102 SERVER_TIME -- float timestamp\n103 SERVER_VERSION -- string\n105 SERVER_CATALOG_VERSION -- 64-bit integer\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAI API Key Configuration\nDESCRIPTION: Environment variable configuration for adding OpenAI API key to the project.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_7\n\nLANGUAGE: typescript-diff\nCODE:\n```\n  GEL_DSN=<your-dsn>\n  GEL_CLIENT_TLS_SECURITY=\"insecure\"\n+ OPENAI_API_KEY=\"<your-openai-api-key>\"\n```\n\n----------------------------------------\n\nTITLE: Testing User Creation with cURL\nDESCRIPTION: A bash command using cURL to test the POST /users endpoint by creating a new user named 'charlie'. The request shows the expected JSON response with the user's ID and name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X 'POST' \\\n  'http://127.0.0.1:8000/users?username=charlie' \\\n  -H 'accept: application/json' \\\n  -d ''\n\n{\n  \"id\": \"20372a1a-ded5-11ef-9a08-b329b578c45c\",\n  \"name\": \"charlie\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Record Descriptor Definition\nDESCRIPTION: Defines structures for SQL record descriptors and their elements, containing name and type information for record fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nstruct SQLRecordDescriptor {\n    uint8         tag = 13;\n    uuid          id;\n    uint16        element_count;\n    SQLRecordElement  elements[element_count];\n};\n\nstruct SQLRecordElement {\n    string              name;\n    uint16              type;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS curve to line function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_curvetoline function, which converts curves in a geometry to approximate linear segments. Parameters control the precision of the conversion.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_55\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::curvetoline( \\\n  geom: ext::postgis::geometry, \\\n  tol: std::float64 = 32, \\\n  toltype: std::int64 = 0, \\\n  flags: std::int64 = 0, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Documenting EdgeQL Select Statement\nDESCRIPTION: Example of documenting the SELECT statement using eql-statement directive with synopsis and clause descriptions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_13\n\nLANGUAGE: rst\nCODE:\n```\nSelect\n======\n\n:eql-statement:\n:eql-haswith:\n\n``select``--retrieve or compute a set of values.\n\n.. eql:synopsis::\n\n    [ with <with-item> [, ...] ]\n\n    select <expr>\n\n    [ filter <filter-expr> ]\n\n    [ order by <order-expr> [direction] [then ...] ]\n\n    [ offset <offset-expr> ]\n\n    [ limit  <limit-expr> ] ;\n```\n\n----------------------------------------\n\nTITLE: Installing @gel/ai Package\nDESCRIPTION: Various package manager commands to install the @gel/ai package using npm, yarn, pnpm, or bun.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/javascript.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @gel/ai\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @gel/ai\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add @gel/ai\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add @gel/ai\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Development Server\nDESCRIPTION: This bash command starts the Next.js development server to run and test the chatbot application locally.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Gel CLI\nDESCRIPTION: Command to remove the Gel CLI binary from Linux/MacOS systems\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rm \"$(which gel)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Client\nDESCRIPTION: Command to install the Gel client package using various package managers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add gel\n$ # or yarn add gel\n$ # or npm install gel\n$ # or bun add gel\n```\n\n----------------------------------------\n\nTITLE: Declaring Link Properties in SDL\nDESCRIPTION: Example showing how to declare a Person type with a friends link containing a strength property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/linkprops.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Person {\n  required name: str { constraint exclusive };\n\n  multi friends: Person {\n    strength: float64;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Response Streaming for RAG Endpoint\nDESCRIPTION: Shows how to modify the RAG endpoint request to enable streaming of the response, allowing for incremental display of AI-generated content.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash-diff\nCODE:\n```\n  $ curl --user user:password --json '{\n      \"query\": \"Who helps Komi make friends?\",\n      \"model\": \"gpt-4-turbo-preview\",\n      \"context\": {\"query\":\"select Friend\"},\n+     \"stream\": true,\n    }' http://localhost:<port>/branch/main/ai/rag\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Package on CentOS/RHEL\nDESCRIPTION: Command to install Gel 6 using yum\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo yum install gel-6\n```\n\n----------------------------------------\n\nTITLE: Installing Gel NPM Package\nDESCRIPTION: Installs the Gel npm package, which is necessary for integrating Gel with the Cloudflare Worker project.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install gel # or pnpm, yarn, bun\n```\n\n----------------------------------------\n\nTITLE: CLI Command - ADMINISTER reindex\nDESCRIPTION: New administrative function to reindex database objects, supporting both full object reindexing and specific pointer reindexing.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_23\n\nLANGUAGE: edgeql\nCODE:\n```\nADMINISTER reindex(Obj);\nADMINISTER reindex(Obj.ptr);\n```\n\n----------------------------------------\n\nTITLE: Extended User Type Schema with Additional Property\nDESCRIPTION: Shows an EdgeDB SDL schema for User type with both name and nickname properties, used in the migration squash example.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_19\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  name: str;\n  nickname: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Abstract Constraint in EdgeDB\nDESCRIPTION: This snippet demonstrates how to remove an abstract constraint named 'upper_case' from the database schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop abstract constraint upper_case;\n```\n\n----------------------------------------\n\nTITLE: Extending Abstract Type in EdgeDB SDL\nDESCRIPTION: Shows how to define a 'User' type that extends the 'HasImage' abstract type, adding a required 'name' property with an exclusivity constraint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/objects.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype User extending HasImage {\n    required name: str {\n        # Ensure unique name for each User.\n        constraint exclusive;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in EdgeQL Query\nDESCRIPTION: Example of using a global variable in an EdgeQL query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User filter .id = global current_user;\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variable in SQL\nDESCRIPTION: SQL command to set a global variable defined in EdgeDB schema using PostgreSQL's SET command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSET \"global default::username\" TO 'Tom'``;\n```\n\n----------------------------------------\n\nTITLE: Month End Date Handling\nDESCRIPTION: Demonstrates how EdgeDB handles month-end dates in relative duration calculations\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <cal::local_datetime>\"2021-01-31T15:00:00\" +\n       <cal::relative_duration>\"1 month\";\n{<cal::local_datetime>'2021-02-28T15:00:00'}\n```\n\n----------------------------------------\n\nTITLE: Creating local_time with Custom Format in EdgeQL\nDESCRIPTION: Shows how to create a local_time value using a custom format string with the cal::to_local_time function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/datetime.rst#2025-04-16_snippet_34\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cal::to_local_time('03:01:22pm', 'HH:MI:SSam');\n{<cal::local_time>'15:01:22'}\n```\n\n----------------------------------------\n\nTITLE: Revoking Secret Key using Gel Cloud CLI\nDESCRIPTION: This command revokes a secret key in the Gel Cloud environment. It requires the secret key ID and offers options for JSON output and non-interactive mode. Authentication is required before using this command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_cloud/gel_cloud_secretkey/edgedb_cloud_secretkey_revoke.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel cloud secretkey revoke [<options>] --secret-key-id <secret-key-id>\n```\n\n----------------------------------------\n\nTITLE: Nix Development Shell Configuration\nDESCRIPTION: Nix shell configuration file that sets up all required development dependencies and Python virtual environment\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/code.rst#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nwith import <nixpkgs> {};\npkgs.mkShell {\n    name = \"gel dev shell\";\n    venvDir = \"./venv\";\n\n    buildInputs = with pkgs; [\n        python312Packages.python\n        python312Packages.venvShellHook\n        rustup\n        autoconf\n        automake\n        bison\n        flex\n        perl\n        zlib\n        readline\n        libuuid\n        nodejs\n        yarn\n        openssl\n        pkg-config\n        icu\n        protobuf\n        protobufc\n    ];\n    LD_LIBRARY_PATH = lib.makeLibraryPath [ pkgs.stdenv.cc.cc ];\n    LIBCLANG_PATH = \"${llvmPackages.libclang.lib}/lib\";\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Global Values from Other Modules in EdgeDB TypeScript\nDESCRIPTION: Shows how to access global values defined in modules other than the default module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ne.my_module.global.some_value;\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Override Example - Plain Text\nDESCRIPTION: Demonstrates how environment variables can override connection parameters in a DSN string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/connection.rst#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nGEL_DSN=gel://olduser:oldpass@hostname.com:5656\nGEL_USER=newuser\nGEL_PASSWORD=newpass\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Boolean Operators with Empty Sets in EdgeQL\nDESCRIPTION: Shows how the 'and' and 'or' operators handle empty sets in boolean expressions, always resulting in an empty set when one operand is empty.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select false and <bool>{};\n{}\ndb> select true or <bool>{};\n{}\n```\n\n----------------------------------------\n\nTITLE: Array Type Descriptor Structure in C\nDESCRIPTION: Defines the binary structure for Array type descriptors, including dimensionality and element type information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstruct ArrayTypeDescriptor {\n    // Indicates that this is an\n    // Array Type descriptor.\n    uint8   tag = 6;\n\n    // Schema type ID.\n    uuid    id;\n\n    // Schema type name.\n    string  name;\n\n    // Whether the type is defined in the schema\n    // or is ephemeral.\n    bool    schema_defined;\n\n    // Number of ancestor scalar types.\n    uint16  ancestors_count;\n\n    // Indexes of ancestor scalar type descriptors\n    // in ancestor resolution order (C3).\n    uint16  ancestors[ancestors_count];\n\n    // Array element type.\n    uint16  type;\n\n    // The number of array dimensions, at least 1.\n    uint16  dimension_count;\n\n    // Sizes of array dimensions, -1 indicates\n    // unbound dimension.\n    int32   dimensions[dimension_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Using Set Operators in EdgeQL\nDESCRIPTION: Demonstrates the use of 'intersect' and 'except' operators for set operations in EdgeQL queries, working with both primitive types and object sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_18\n\nLANGUAGE: edgeql\nCODE:\n```\nselect {1, 2, 3, 4, 5} intersect {3, 4, 5, 6, 7};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nselect {1, 2, 3, 4, 5} except {3, 4, 5, 6, 7};\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Structure Overview\nDESCRIPTION: Shows the list of relations in the source PostgreSQL database including tables and sequences.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nsocial=> \\d\n                  List of relations\n     Schema |       Name       |   Type   | Owner\n    --------+------------------+----------+-------\n     public | badges           | table    | myapp\n     public | bookmarks        | table    | myapp\n     public | bookmarks_id_seq | sequence | myapp\n     public | posts            | table    | myapp\n     public | posts_id_seq     | sequence | myapp\n     public | statuses         | table    | myapp\n     public | statuses_id_seq  | sequence | myapp\n     public | threads          | table    | myapp\n     public | threads_id_seq   | sequence | myapp\n     public | users            | table    | myapp\n     public | users_id_seq     | sequence | myapp\n    (11 rows)\n```\n\n----------------------------------------\n\nTITLE: Shifting Longitude of Geometry in EQL\nDESCRIPTION: Shifts the longitude of a geometry. This function exposes the PostGIS st_shiftlongitude functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_231\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::shiftlongitude( \\\n  a0: ext::postgis::geometry \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Package via Package Managers\nDESCRIPTION: Commands to install the main Gel package using various JavaScript package managers including npm, yarn, pnpm, bun, and deno.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/interfaces.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install gel       # npm users\n$ yarn add gel          # yarn users\n$ pnpm add gel          # pnpm users\n$ bun add gel           # bun users\n$ deno add npm:gel      # deno users\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Gel Extension Commands\nDESCRIPTION: RestructuredText documentation defining the structure and available commands for the gel extension CLI tool. Includes a table of subcommands with their descriptions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_extension/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ref_cli_gel_extension:\n\n=============\ngel extension\n=============\n\nThe :gelcmd:`extension` command group contains commands for managing standalone extensions.\n\n.. toctree::\n   :maxdepth: 2\n   :hidden:\n\n   list\n   list-available\n   install\n   uninstall\n\nSubcommands\n===========\n\n.. list-table::\n   :class: synopsis\n\n   * - :ref:`ref_cli_gel_extension_list`\n     - List installed extensions.\n   * - :ref:`ref_cli_gel_extension_list_available`\n     - List available extensions.\n   * - :ref:`ref_cli_gel_extension_install`\n     - Install an extension.\n   * - :ref:`ref_cli_gel_extension_uninstall`\n     - Uninstall an extension.\n```\n\n----------------------------------------\n\nTITLE: Setting up a reStructuredText Table of Contents for AI Documentation in EdgeDB\nDESCRIPTION: A reStructuredText directive that creates a table of contents for the AI integration documentation. It specifies a maxdepth of 1 and includes a link to the FastAPI documentation page.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 1\n\n  fastapi\n```\n\n----------------------------------------\n\nTITLE: Generating EdgeDB Query Builder Code\nDESCRIPTION: Commands for running the EdgeDB query builder generator using various package managers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate edgeql-js\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run -B generate edgeql-js\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm exec generate edgeql-js\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ deno run --allow-all npm:@gel/generate edgeql-js\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bunx @gel/generate edgeql-js\n```\n\n----------------------------------------\n\nTITLE: Forcing 4D Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_force4d function to force a geometry into a 4-dimensional representation with Z and M values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_80\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::force4d( \\\n                    geom: ext::postgis::geometry, \\\n                    zvalue: std::float64 = 0.0, \\\n                    mvalue: std::float64 = 0.0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Passing Similar Chats to Answer Generator in Python\nDESCRIPTION: Updates the generate_answer function call to include the similar_chats parameter for context-aware response generation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nsimilar_chats,\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS Delaunay triangles function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_delaunaytriangles function, which returns a Delaunay triangulation of the vertices of the input geometry. Parameters control tolerance and behavior flags.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_56\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::delaunaytriangles( \\\n  g1: ext::postgis::geometry, \\\n  tolerance: std::float64 = 0.0, \\\n  flags: std::int64 = 0, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Upgrading Local Gel Project to 6.0\nDESCRIPTION: Command to upgrade a local Gel project to version 6.0. This should be run inside the project directory after ensuring the CLI is up to date.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project upgrade --to-testing\n```\n\n----------------------------------------\n\nTITLE: Installing Required NPM Packages\nDESCRIPTION: Installs necessary NPM packages for the embedding generation script, including OpenAI, Gel, and development tools.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install openai gel\n$ npm install \\\n    @gel/generate \\\n    gpt-tokenizer \\\n    dotenv \\\n    tsx \\\n    --save-dev\n```\n\n----------------------------------------\n\nTITLE: Type Intersection with Schema Definition in EdgeQL\nDESCRIPTION: Defines a schema with User, Owned, Issue, and Comment types to demonstrate type relationships and ownership for the type intersection example.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_15\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n    required name: str;\n}\n\nabstract type Owned {\n    required owner: User;\n}\n\ntype Issue extending Owned {\n    required title: str;\n}\n\ntype Comment extending Owned {\n    required body: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the GEL describe schema Command\nDESCRIPTION: Command syntax for the 'gel describe schema' command that outputs an SDL description of the connected database's schema. This command serves as a terminal equivalent to the EdgeQL 'describe schema as sdl' statement.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_describe/gel_describe_schema.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel describe schema [<options>]\n```\n\n----------------------------------------\n\nTITLE: Defining RestoreReady Message Structure in EdgeDB Protocol\nDESCRIPTION: Specifies the format of the RestoreReady message sent by the server in response to a Restore message, including annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_3\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.RestoreReady\n\n.. eql:struct:: edb.protocol.Annotation\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Table of Contents\nDESCRIPTION: A reStructuredText toctree directive that defines the structure and navigation for integration tutorials documentation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    nextjs_app_router\n    nextjs_pages_router\n    rest_apis_with_fastapi\n    rest_apis_with_flask\n    jupyter_notebook\n    graphql_apis_with_strawberry\n    chatgpt_bot\n    cloudflare_workers\n    trpc\n    Bun <https://bun.sh/guides/ecosystem/edgedb>\n```\n\n----------------------------------------\n\nTITLE: Viewing Global Variable in SQL\nDESCRIPTION: SQL command to display the current value of a global variable using PostgreSQL's SHOW command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSHOW \"global default::username\";\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS 3D closest point function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_3dclosestpoint function, which returns the 3D point on the first geometry that is closest to the second geometry. This is the first point of the 3D shortest line.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_36\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::closestpoint3d( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Testing Ordering Equality in EdgeQL\nDESCRIPTION: Tests if two geometries represent the same geometry and have points in the same directional order. This function exposes the PostGIS st_orderingequals function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_195\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::orderingequals( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS\nDESCRIPTION: Commands to install required build dependencies on macOS using Homebrew package manager\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/code.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install rustup autoconf libtool python@3.12 readline zlib nodejs icu4c\n```\n\n----------------------------------------\n\nTITLE: Enabling AI Extension in Gel Schema\nDESCRIPTION: This SDL diff shows how to enable the AI extension in the Gel schema by adding a using extension statement.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_38\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension ai;\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branch and Merging Feature\nDESCRIPTION: Commands to switch back to the main Git branch and merge the feature branch into it.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/branches.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git switch main\n<changes>\nSwitched to branch 'main'\n$ git merge feature\n```\n\n----------------------------------------\n\nTITLE: Initializing GCP Project and Services\nDESCRIPTION: Commands to initialize GCP, create a project, and enable required APIs for Gel deployment.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/gcp.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud init\n$ PROJECT=gel\n$ gcloud projects create $PROJECT\n$ gcloud services enable \\\n    container.googleapis.com \\\n    sqladmin.googleapis.com \\\n    iam.googleapis.com \\\n    --project=$PROJECT\n```\n\n----------------------------------------\n\nTITLE: Installing @gel/generate with pnpm\nDESCRIPTION: Command to install the @gel/generate package using pnpm package manager.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add --save-dev @gel/generate\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL Extension in Gel Schema\nDESCRIPTION: This snippet shows how to enable the GraphQL extension in the Gel schema. After adding this line, you need to create and apply a new migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension graphql;\n```\n\n----------------------------------------\n\nTITLE: Web Search Implementation\nDESCRIPTION: Implementation of web search functionality using Hacker News API with comment thread extraction\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom pydantic import BaseModel\nfrom datetime import datetime\nimport html\n\n\nclass WebSource(BaseModel):\n    \"\"\"Type that stores search results.\"\"\"\n\n    url: str | None = None\n    title: str | None = None\n    text: str | None = None\n\n\ndef extract_comment_thread(\n    comment: dict,\n    max_depth: int = 3,\n    current_depth: int = 0,\n    max_children=3,\n) -> list[str]:\n    \"\"\"\n    Recursively extract comments from a thread up to max_depth.\n    Returns a list of formatted comment strings.\n    \"\"\"\n    if not comment or current_depth > max_depth:\n        return []\n\n    results = []\n\n    if comment[\"text\"]:\n        timestamp = datetime.fromisoformat(comment[\"created_at\"].replace(\"Z\", \"+00:00\"))\n        author = comment[\"author\"]\n        text = html.unescape(comment[\"text\"])\n        formatted_comment = f\"[{timestamp.strftime('%Y-%m-%d %H:%M')}] {author}: {text}\"\n        results.append((\"  \" * current_depth) + formatted_comment)\n\n    if comment.get(\"children\"):\n        for child in comment[\"children\"][:max_children]:\n            child_comments = extract_comment_thread(child, max_depth, current_depth + 1)\n            results.extend(child_comments)\n\n    return results\n\n\ndef fetch_web_sources(query: str, limit: int = 5) -> list[WebSource]:\n    \"\"\"\n    For a given query perform a full-text search for stories on Hacker News.\n    From each of the matched stories extract the comment thread and format it into a single string.\n    For each story return its title, url and comment thread.\n    \"\"\"\n    search_url = \"http://hn.algolia.com/api/v1/search_by_date?numericFilters=num_comments>0\"\n\n    response = requests.get(\n        search_url,\n        params={\n            \"query\": query,\n            \"tags\": \"story\",\n            \"hitsPerPage\": limit,\n            \"page\": 0,\n        },\n    )\n\n    response.raise_for_status()\n    search_result = response.json()\n\n    web_sources = []\n    for hit in search_result.get(\"hits\", []):\n        item_url = f\"https://hn.algolia.com/api/v1/items/{hit['story_id']}\"\n        response = requests.get(item_url)\n        response.raise_for_status()\n        item_result = response.json()\n\n        site_url = f\"https://news.ycombinator.com/item?id={hit['story_id']}\"\n        title = hit[\"title\"]\n        comments = extract_comment_thread(item_result)\n        text = \"\\n\".join(comments) if len(comments) > 0 else None\n        web_sources.append(\n            WebSource(url=site_url, title=title, text=text)\n        )\n\n    return web_sources\n```\n\n----------------------------------------\n\nTITLE: Executing Gel Instance Unlink Command in CLI\nDESCRIPTION: This command is used to unlink a remote Gel instance. It removes the specified instance name from the list of valid instances.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_unlink.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngel instance unlink <name>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in TypeScript\nDESCRIPTION: Example of setting global variables in a TypeScript client implementation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/access_policies.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport createClient from 'gel';\n\nconst client = createClient();\n\nconst authedClient = client.withGlobals({\n  current_user: '2141a5b4-5634-4ccc-b835-437863534c51',\n});\n\nconst result = await authedClient.query(\n  `select global current_user;`);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Linking Gel Instance in Bash\nDESCRIPTION: This snippet shows the command to authenticate and link to a remote Gel instance. It uses the 'gel' command with various options including the DSN (Data Source Name) and specifies the instance name as 'fly'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/fly_io.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--dsn $DSN \\\n        --non-interactive \\\n        fly\n```\n\n----------------------------------------\n\nTITLE: Configuring pgvector Session\nDESCRIPTION: EdgeQL commands to configure pgvector session parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure session\nset ext::pgvector::Config::probes := 5;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure session reset ext::pgvector::Config::probes;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Dependencies\nDESCRIPTION: Commands to add FastAPI and Gel dependencies, sync the virtual environment, and activate it\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"fastapi[standard]\" \\\n&& uv add gel \\\n&& uv sync \\\n&& source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Updating First User's Friends\nDESCRIPTION: Updates first user to add second user as friend.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/paths.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> update User filter .email = \"user1@me.com\"\n... set {\n... friends += (select detached User filter .email = \"user2@me.com\")\n... };\n```\n\n----------------------------------------\n\nTITLE: String Right Padding Example in EdgeQL\nDESCRIPTION: Demonstrates usage of deprecated str_rpad() function for right-padding strings with spaces or custom characters. Shows truncation behavior when input exceeds target length.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/deprecated.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select str_rpad('short', 10);\n{'short     '}\ndb> select str_rpad('much too long', 10);\n{'much too l'}\ndb> select str_rpad('short', 10, '.:');\n{'short.:.:.'}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic User Type in SDL\nDESCRIPTION: This SDL code snippet defines a simple 'User' type with no properties in the default module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Base 10 Logarithm in EdgeQL\nDESCRIPTION: Demonstrates the use of math::lg() function to calculate the base 10 logarithm of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 10 ^ math::lg(42);\n{42.00000000000001}\n```\n\n----------------------------------------\n\nTITLE: Bitwise AND Operation in EdgeQL\nDESCRIPTION: Example of bit_and() function, which performs a bitwise AND operation on two integers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_and(17, 3);\n{1}\n```\n\n----------------------------------------\n\nTITLE: Badge Type Definition in Gel\nDESCRIPTION: Defines the Badge type in Gel with required name and description fields, including an exclusive constraint on name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ntype Badge {\n        required name: str {\n            constraint exclusive;\n        }\n        required description: str;\n    }\n```\n\n----------------------------------------\n\nTITLE: Compound Type Descriptor and Operation Enum\nDESCRIPTION: Defines structures for compound type descriptors with schema identification and component tracking. Includes an enum for union and intersection type operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nuint8                 tag = 11;\n\nuuid                  id;\n\nstring                name;\n\nbool                  schema_defined;\n\nuint8<TypeOperation>  op;\n\nuint16                component_count;\n\nuint16                components[component_count];\n};\n\nenum TypeOperation {\n    UNION         = 1;\n    INTERSECTION  = 2;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Annotations for Types and Links in EdgeDB SDL\nDESCRIPTION: This snippet shows how to declare annotations for a type and its link in EdgeDB's Schema Definition Language (SDL). It demonstrates adding descriptions to the 'Label' type and its 'review' link.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/annotations.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\ntype Label {\n    annotation description :=\n        'Special label to stick on reviews';\n    required comments: str;\n    review: Review {\n        annotation description :=\n            'This review needs some attention';\n    };\n}\n\ntype Review {\n    content: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Action for Gel v6 Compatibility\nDESCRIPTION: YAML diff showing the changes required in GitHub Actions workflow to use the Gel v6 action and CLI commands.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- - uses: edgedb/setup-edgedb@v1\n+ - uses: geldata/setup-gel@v1\n- - run: edgedb query 'select sys::get_version_as_str()'\n+ - run: gel query 'select sys::get_version_as_str()'\n```\n\n----------------------------------------\n\nTITLE: GraphQL Sorting on Nested Paths\nDESCRIPTION: Shows how to sort movies by director's last name and movie title using nested path sorting in GraphQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a5.rst#2025-04-16_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  Movie(\n    order: {\n      director: {last_name: {dir: ASC}},\n      title: {dir: ASC}\n    }\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Description Block Example with versionadded in reStructuredText\nDESCRIPTION: Example showing how to create a description block for a type definition with documentation directives. This example documents the cal::date_duration type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_16\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. eql:type:: cal::date_duration\n\n    A type for representing a span of time in days.\n```\n\n----------------------------------------\n\nTITLE: Configuring Trust Authentication in EdgeQL\nDESCRIPTION: Example of configuring a trust-based authentication profile with priority setting.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/cfg.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> configure instance insert\n...   Auth {priority := 0, method := (insert Trust)};\nOK: CONFIGURE INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Installing @gel/generate with bun\nDESCRIPTION: Command to install the @gel/generate package using bun package manager.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add --dev @gel/generate\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Complex Type Parameters in EdgeQL\nDESCRIPTION: Example of defining a function that takes a union type as a parameter in EdgeQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_14\n\nLANGUAGE: sdl\nCODE:\n```\nfunction foo(x: A | B) -> int64 using (x.n);\n```\n\n----------------------------------------\n\nTITLE: Defining Base EdgeDB Scalar Types with UUIDs\nDESCRIPTION: Defines the core scalar types for EdgeDB by mapping UUID identifiers to type names. Includes base types like anytype, anytuple, and anyobject, along with standard scalar types like uuid, str, bytes, and numeric types.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/api/types.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n00000000-0000-0000-0000-000000000001 anytype\n00000000-0000-0000-0000-000000000002 anytuple\n00000000-0000-0000-0000-000000000003 anyobject\n\n00000000-0000-0000-0000-0000000000F0 std\n00000000-0000-0000-0000-0000000000FF empty-tuple\n\n00000000-0000-0000-0000-000000000100 std::uuid\n00000000-0000-0000-0000-000000000101 std::str\n00000000-0000-0000-0000-000000000102 std::bytes\n00000000-0000-0000-0000-000000000103 std::int16\n00000000-0000-0000-0000-000000000104 std::int32\n00000000-0000-0000-0000-000000000105 std::int64\n00000000-0000-0000-0000-000000000106 std::float32\n00000000-0000-0000-0000-000000000107 std::float64\n00000000-0000-0000-0000-000000000108 std::decimal\n00000000-0000-0000-0000-000000000109 std::bool\n00000000-0000-0000-0000-00000000010A std::datetime\n00000000-0000-0000-0000-00000000010E std::duration\n00000000-0000-0000-0000-00000000010F std::json\n00000000-0000-0000-0000-000000000110 std::bigint\n```\n\n----------------------------------------\n\nTITLE: SDL Schema Definition Example\nDESCRIPTION: Example showing how to define a schema in SDL with diff markup.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_10\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type Person {\n    required property name -> str { constraint exclusive };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Data for Gel Migration\nDESCRIPTION: Bash commands to export data from PostgreSQL and import it into Gel during migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ pg_dump {your PostgreSQL connection params} \\\n    --data-only --inserts --no-owner --no-privileges \\\n    > dump.sql\n\n$ psql {your Gel connection params} --file dump.sql\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with create-next-app\nDESCRIPTION: Command line setup for creating a new Next.js project with TypeScript, ESLint, Tailwind CSS, and App Router configuration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_app_router.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from TWKB Binary\nDESCRIPTION: Function that creates a geometry value from Tiny Well-Known Binary (TWKB) format, which is an optimized binary representation. Maps to the PostGIS st_geomfromtwkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_108\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromtwkb( \\\n                    a0: std::bytes \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Enabling Future Behavior in EdgeDB 2.6\nDESCRIPTION: This snippet shows how to enable future behavior for nonrecursive access policies in EdgeDB 2.6 using the 'using future' syntax in the schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_16\n\nLANGUAGE: EdgeQL\nCODE:\n```\nusing future nonrecursive_access_policies;\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry from GML\nDESCRIPTION: Function that creates a geometry value from Geographic Markup Language (GML) representation, with an optional SRID parameter. Maps to the PostGIS st_geomfromgml function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_104\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geomfromgml( \\\n                    a0: std::str \\\n                  ) ->  ext::postgis::geometry\n                  ext::postgis::geomfromgml( \\\n                    a0: std::str, \\\n                    a1: std::int64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: REPL Parameter Example\nDESCRIPTION: Interactive example showing parameter usage in EdgeQL REPL environment.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/parameters.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select 'I ❤️ ' ++ <str>$var ++ '!';\nParameter <str>$var: Gel\n{'I ❤️ Gel!'}\n```\n\n----------------------------------------\n\nTITLE: Object Shape Descriptor Definition\nDESCRIPTION: Defines structures for object shape descriptors including shape elements with flags, cardinality, and type information. Used for encoding objects as tuples on the wire.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nstruct ObjectShapeDescriptor {\n    uint8         tag = 1;\n    uuid          id;\n    bool          ephemeral_free_shape;\n    uint16        type;\n    uint16        element_count;\n    ShapeElement  elements[element_count];\n};\n\nstruct ShapeElement {\n    uint32              flags;\n    uint8<Cardinality>  cardinality;\n    string              name;\n    uint16              type;\n    uint16              source_type;\n};\n```\n\n----------------------------------------\n\nTITLE: Using gel server list-versions Command to Display Server Versions\nDESCRIPTION: The basic syntax for the gel server list-versions command that displays all available and installed versions of the Gel server. This command doesn't require any arguments but supports optional flags for customizing output.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_server/gel_server_list_versions.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel server list-versions [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using array_join with Bytes in EdgeQL\nDESCRIPTION: Demonstrates the use of array_join function with bytes arrays, joining byte sequences with a separator.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select array_join([b'\\x01', b'\\x02', b'\\x03'], b'\\xff');\n{b'\\x01\\xff\\x02\\xff\\x03'}\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS closest point of approach function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_closestpointofapproach function, which calculates the time at which two moving objects are closest to each other.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_37\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::closestpointofapproach( \\\n  a0: ext::postgis::geometry, \\\n  a1: ext::postgis::geometry, \\\n) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Type with Expression Constraint in EdgeDB SDL\nDESCRIPTION: Shows how to use the 'expression' constraint to restrict the maximum magnitude of a vector based on its x and y properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype Vector {\n    required x: float64;\n    required y: float64;\n    constraint expression on (\n        __subject__.x^2 + __subject__.y^2 < 25\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Enumerated Type with DDL\nDESCRIPTION: Example of creating a new enumerated type for colors using DDL commands.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate scalar type Color\n    extending enum<Black, White, Red>;\n```\n\n----------------------------------------\n\nTITLE: Testing Similarity Search Endpoint\nDESCRIPTION: cURL command to test the similar cards endpoint with a sample query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/ai/fastapi.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n  'http://localhost:8000/fetch_similar?query=the%20stinkiest%20cheese' \\\n  -H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Basic Gel Client Usage in Node.js\nDESCRIPTION: TypeScript/Node.js implementation showing how to create a Gel client and execute a simple query\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/clients.rst#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createClient} from 'gel';\n\nconst client = createClient();\n\nclient.querySingle(`select random()`).then((result) => {\n  console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Changes current directory to the newly created project folder\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd docs-chatbot\n```\n\n----------------------------------------\n\nTITLE: Create Module DDL Commands\nDESCRIPTION: EdgeQL commands for creating new modules and nested modules.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/modules.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate module payments;\n\ncreate module payments::currencies;\n```\n\n----------------------------------------\n\nTITLE: Authenticating HTTP Request with Gel Cloud\nDESCRIPTION: cURL example demonstrating how to send an authenticated EdgeQL query to Gel Cloud using a bearer token and secret key.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/http_gql.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G https://<cloud-instance-host>:<cloud-instance-port>/branch/main/edgeql \\\n   -H \"Authorization: Bearer <secret-key> \\\n   --data-urlencode \"query=select Person {*};\"\n```\n\n----------------------------------------\n\nTITLE: Get Current Database Example\nDESCRIPTION: Shows how to retrieve the name of the current database. Note that this function is deprecated in favor of get_current_branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sys.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select sys::get_current_database();\n{'my_database'}\n```\n\n----------------------------------------\n\nTITLE: Finding Actors with Shared Last Names in EdgeQL\nDESCRIPTION: Queries actors who share last names with other actors, including the matching actors list.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/select.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person {\n    id,\n    full_name,\n    same_last_name := (\n        with\n            P := detached Person\n        select P {\n            id,\n            full_name,\n        }\n        filter\n            # same last name\n            P.last_name = Person.last_name\n            and\n            # not the same person\n            P != Person\n    ),\n}\nfilter exists .same_last_name\n```\n\n----------------------------------------\n\nTITLE: Get Transaction Isolation Example\nDESCRIPTION: Demonstrates checking the isolation level of the current transaction.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/sys.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select sys::get_transaction_isolation();\n{sys::TransactionIsolation.Serializable}\n```\n\n----------------------------------------\n\nTITLE: Magnitude Function with Float Input\nDESCRIPTION: Defines a function that calculates magnitude for a single float value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/functions.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nfunction magnitude(x: float64) -> float64\n  using (\n    math::sqrt(sum(x * x))\n  );\n```\n\n----------------------------------------\n\nTITLE: Grouping Sets with CUBE\nDESCRIPTION: Demonstrates using CUBE grouping set operator to analyze data across multiple grouping combinations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/group.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  M := (select Movie filter .release_year > 2015),\n  groups := (\n    group M {title}\n    using\n      vowel := re_test('(?i)^[aeiou]', .title),\n      decade := .release_year // 10\n    by CUBE(vowel, decade)\n  )\nselect groups {\n  key := .key {vowel, decade},\n  grouping,\n  count := count(.elements),\n  mean_title_length :=\n    (math::mean(len(.elements.title)))\n} order by array_agg(.grouping);\n```\n\n----------------------------------------\n\nTITLE: String Right Trim Example in EdgeQL\nDESCRIPTION: Shows usage of deprecated str_rtrim() function for removing specified characters from the end of a string. Demonstrates behavior with multiple trim characters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/deprecated.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select str_rtrim('data     ');\n{'data'}\ndb> select str_rtrim('data.....', '.:');\n{'data'}\ndb> select str_rtrim('data:::::', '.:');\n{'data'}\ndb> select str_rtrim('data:...:', '.:');\n{'data'}\ndb> select str_rtrim('data.:.:.', '.:');\n{'data'}\n```\n\n----------------------------------------\n\nTITLE: Introducing an Incorrect Property Type in SDL\nDESCRIPTION: This snippet shows an example of adding an incorrect property type (i32 instead of int32) to demonstrate error handling in watch mode.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_28\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    name: str;\n    number: int32;\n    wrong_property: i32; # Should say int32, not i32\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Trim End Example - EdgeQL\nDESCRIPTION: Demonstrates str_trim_end function removing specified characters from string end.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_trim_end('data     ');\n{'data'}\ndb> select str_trim_end('data.....', '.:');\n{'data'}\ndb> select str_trim_end('data:::::', '.:');\n{'data'}\ndb> select str_trim_end('data:...:', '.:');\n{'data'}\ndb> select str_trim_end('data.:.:.', '.:');\n{'data'}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Provider\nDESCRIPTION: EdgeQL query to configure SMTP provider for email-based authentication features\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/index.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH INSERT cfg::SMTPProviderConfig {\n    sender := 'hello@example.com',\n    host := 'localhost',\n    port := <int32>1025,\n    security := 'STARTTLSOrPlainText',\n    validate_certs := false,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Password Authentication Provider\nDESCRIPTION: Partial EdgeQL command to set up an email and password authentication provider.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_32\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH\nINSERT ext::auth::EmailPasswordProviderConfig {\n```\n\n----------------------------------------\n\nTITLE: Scalar Type Descriptor Structure in C\nDESCRIPTION: Defines the binary structure for Scalar type descriptors, including type identification, naming, and ancestry information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct ScalarTypeDescriptor {\n    // Indicates that this is a\n    // Scalar Type descriptor.\n    uint8   tag = 3;\n\n    // Schema type ID.\n    uuid    id;\n\n    // Schema type name.\n    string  name;\n\n    // Whether the type is defined in the schema\n    // or is ephemeral.\n    bool    schema_defined;\n\n    // Number of ancestor scalar types.\n    uint16  ancestors_count;\n\n    // Indexes of ancestor scalar type descriptors\n    // in ancestor resolution order (C3).\n    uint16  ancestors[ancestors_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Vacuum Multiple Items with Full Option in EdgeQL\nDESCRIPTION: Example demonstrating how to vacuum multiple items (a type and a link) with the full option enabled to return space to the operating system.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/vacuum.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nadminister vacuum(SomeType, OtherType.ptr, full := true);\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Structure\nDESCRIPTION: Defines the hierarchical structure and navigation for the cheatsheets documentation using reStructuredText format.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n    :hidden:\n\n\n    select\n    insert\n    update\n    delete\n    boolean\n    objects\n    functions\n    aliases\n    annotations\n    cli\n    repl\n    admin\n```\n\n----------------------------------------\n\nTITLE: Restoring EdgeDB Database\nDESCRIPTION: Command to restore an EdgeDB database from a dump directory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gel restore --all my_database.dump/ --dsn <new dsn>\n```\n\n----------------------------------------\n\nTITLE: Using Gel Server Uninstall Command\nDESCRIPTION: CLI command syntax for uninstalling Gel server with optional parameters. The command supports removing specific versions, all versions, nightly builds, or unused server versions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_server/gel_server_uninstall.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel server uninstall [<options>]\n```\n\n----------------------------------------\n\nTITLE: Setting PKG_CONFIG_PATH for macOS ICU4C\nDESCRIPTION: Environment variable configuration for Postgres build to locate ICU4C libraries on macOS\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/code.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export PKG_CONFIG_PATH=\"$(brew --prefix icu4c)/lib/pkgconfig\"\n```\n\n----------------------------------------\n\nTITLE: Array Filling in EdgeQL\nDESCRIPTION: Shows how to use the array_fill function to create an array of a specified size filled with a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/array.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select array_fill(0, 5);\n{[0, 0, 0, 0, 0]}\ndb> select array_fill('n/a', 3);\n{['n/a', 'n/a', 'n/a']}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration - ENV\nDESCRIPTION: Environment variable configuration for OpenAI API key\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_13\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=\"sk-...\"\n```\n\n----------------------------------------\n\nTITLE: Project Upgrade Commands for EdgeDB RC3\nDESCRIPTION: Sequence of bash commands to upgrade an EdgeDB project to RC3, including data backup, project unlinking, upgrade, reinitialization and data restoration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc3.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel dump --all --format=dir ./upgrade_backup\n$ gel project unlink -D\n$ gel project upgrade --to-latest\n$ gel project init --no-migrations\n$ gel restore --admin --all ./upgrade_backup\n```\n\n----------------------------------------\n\nTITLE: Describing an Object Type in EdgeDB REPL\nDESCRIPTION: Illustrates the use of the \\d command to describe an object type (std::Object) in the EdgeDB REPL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/repl.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> \\d object Object\nabstract type std::Object extending std::BaseObject {\n    required single link __type__ -> schema::Type {\n        readonly := true;\n    };\n    required single property id -> std::uuid {\n        readonly := true;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu 24.04\nDESCRIPTION: Commands to install required build dependencies on Ubuntu 24.04 including compilers, dev tools and libraries\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/code.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ apt install make gcc rust-all autotools-dev python3.12-dev \\\n     python3.12-venv bison flex libreadline-dev perl zlib1g-dev \\\n     uuid-dev nodejs npm\n$ npm i -g corepack\n$ corepack enable && corepack prepare yarn@stable --activate\n```\n\n----------------------------------------\n\nTITLE: Updating Answer Generator Function Signature in Python\nDESCRIPTION: Modifies the generate_answer function signature to accept similar_chats as a parameter. This enables the function to incorporate chat history into responses.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nasync def generate_answer(\n    query: str,\n    chat_history: list[GetMessagesResult],\n    web_sources: list[WebSource],\n    similar_chats: list[list[GetMessagesResult]],\n) -> SearchResult:\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS asewkt Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_asewkt function in EdgeQL. Converts geometry or geography to EWKT format with SRID metadata. Returns a string.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_10\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::asewkt( \\\n                    a0: std::str \\\n                  ) ->  std::str\n                  ext::postgis::asewkt( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::str\n                  ext::postgis::asewkt( \\\n                    a0: ext::postgis::geography \\\n                  ) ->  std::str\n                  ext::postgis::asewkt( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::int64, \\\n                  ) ->  std::str\n                  ext::postgis::asewkt( \\\n                    a0: ext::postgis::geography, \\\n                    a1: std::int64, \\\n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Restoring EdgeDB Database in Bash\nDESCRIPTION: Command to restore an EdgeDB database from a local dump file.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel restore --all my_database.dump/ --dsn <new dsn>\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_3DIntersects Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_3DIntersects function which tests if two geometries spatially intersect in 3D space. This function works only for points, linestrings, polygons, and polyhedral surfaces.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_120\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::intersects3d( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Upgrading the Gel CLI to the Latest Version\nDESCRIPTION: Command to upgrade the Gel CLI tool to the latest available version.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/cli.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel cli upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Provider for Gel AI\nDESCRIPTION: Demonstrates how to configure the OpenAI provider by setting the API key. This is necessary for Gel to make calls to external AI services.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/ai/edgeql.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current database\ninsert ext::ai::OpenAIProviderConfig {\n  secret := 'sk-....',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Set and Array Wire Format Structure in C\nDESCRIPTION: Defines the binary wire format structure for sets and arrays, including dimension data and element storage. Includes nested structs for dimensions and elements.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct SetOrArrayValue {\n    // Number of dimensions, currently must\n    // always be 0 or 1. 0 indicates an empty set or array.\n    int32       ndims;\n\n    // Reserved.\n    int32       reserved0;\n\n    // Reserved.\n    int32       reserved1;\n\n    // Dimension data.\n    Dimension   dimensions[ndims];\n\n    // Element data, the number of elements\n    // in this array is the sum of dimension sizes:\n    // sum((d.upper - d.lower + 1) for d in dimensions)\n    Element     elements[];\n};\n\nstruct Dimension {\n    // Upper dimension bound, inclusive,\n    // number of elements in the dimension\n    // relative to the lower bound.\n    int32       upper;\n\n    // Lower dimension bound, always 1.\n    int32       lower;\n};\n\nstruct Element {\n    // Encoded element data length in bytes.\n    int32       length;\n\n    // Element data.\n    uint8       data[length];\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Local EdgeDB Instance in Bash\nDESCRIPTION: Command to upgrade a local EdgeDB project to the latest version.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project upgrade --to-latest\n```\n\n----------------------------------------\n\nTITLE: Querying Person Objects with Type Intersection\nDESCRIPTION: Demonstrates using double splat operator with type intersection to expand both properties and links on Person objects, specifically showing Hero and Villain data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/select.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Person {\n  name,\n  [is Hero].**\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming Abstract Link\nDESCRIPTION: Renames the abstract link 'orderable' to 'sorted'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_22\n\nLANGUAGE: edgeql\nCODE:\n```\nalter abstract link orderable rename to sorted;\n```\n\n----------------------------------------\n\nTITLE: Connecting to EdgeDB via Postgres Protocol\nDESCRIPTION: Demonstrates how to connect to an EdgeDB database using the Postgres protocol, enabling compatibility with existing BI and analytics tools.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ psql -h localhost -p 10701 -U edgedb -d edgedb\n```\n\n----------------------------------------\n\nTITLE: Executing Branch Rename Command in Gel CLI\nDESCRIPTION: This command renames a branch in the Gel instance. It requires the old branch name and the new branch name as arguments. An optional '--force' flag can be used to close existing connections before renaming.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_branch/gel_branch_rename.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel branch rename [<options>] <old-name> <new-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Installing Dependencies\nDESCRIPTION: Commands to create a project directory, set up a virtual environment, and install required dependencies for a FastAPI project with Gel.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir fastapi-crud\n$ cd fastapi-crud\n$ python -m venv myvenv\n$ source myvenv/bin/activate\n$ pip install gel fastapi 'httpx[cli]' uvicorn\n```\n\n----------------------------------------\n\nTITLE: Updating handleSignUp Function for Custom User Creation\nDESCRIPTION: Modifies the handleSignUp function to include an isSignUp query parameter, signaling that this callback is for a sign-up process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/auth/magic_link.rst#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleSignUp = async (req, res) => {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n  req.on(\"end\", async () => {\n    const pkce = generatePKCE();\n    const { email, provider } = JSON.parse(body);\n    if (!email || !provider) {\n      res.status = 400;\n      res.end(\n        `Request body malformed. Expected JSON body with 'email' and 'provider' keys, but got: ${body}`,\n      );\n      return;\n    }\n\n    const registerUrl = new URL(\"magic-link/register\", GEL_AUTH_BASE_URL);\n    const callbackUrl = new URL(\"auth/magic-link/callback\", \"http://localhost:${SERVER_PORT}\");\n    callbackUrl.searchParams.set(\"isSignUp\", \"true\");\n    const registerResponse = await fetch(registerUrl.href, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        challenge: pkce.challenge,\n        email,\n        provider,\n        callback_url: callbackUrl.href,\n        // The following endpoint will be called if there is an error\n        // processing the magic link, such as expiration or malformed token,\n        // etc.\n        redirect_on_failure: `http://localhost:${SERVER_PORT}/auth_error.html`,\n      }),\n    });\n\n    if (!registerResponse.ok) {\n      const text = await registerResponse.text();\n      res.status = 400;\n      res.end(`Error from the auth server: ${text}`);\n      return;\n    }\n\n    res.writeHead(204, {\n      \"Set-Cookie\": `gel-pkce-verifier=${pkce.verifier}; HttpOnly; Path=/; Secure; SameSite=Strict`,\n    });\n    res.end();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimum Value Constraint on User Score (EdgeQL)\nDESCRIPTION: This snippet demonstrates how to create a 'score' property on the 'User' type with a minimum value constraint of 0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User create property score: int64 {\n  create constraint min_value(0)\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Gel Instance Credentials\nDESCRIPTION: Retrieves the DSN for the Gel instance\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx gel instance credentials --insecure-dsn\n```\n\n----------------------------------------\n\nTITLE: Upgrading Cloud Instance to Latest Gel Version\nDESCRIPTION: CLI command to upgrade a Gel Cloud instance to the latest version of Gel.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance upgrade <my-org/my-instance-name> --to-latest\n```\n\n----------------------------------------\n\nTITLE: Verifying Gel CLI Installation\nDESCRIPTION: Command to verify the Gel CLI installation by checking the version of the installed tool.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/cli.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --version\nGel CLI x.x+abcdefg\n```\n\n----------------------------------------\n\nTITLE: Local Expression Aliases in EdgeQL With Block\nDESCRIPTION: Illustrates the use of local expression aliases in the 'with' block to factor out common sub-expressions and refactor queries, with examples of correct and incorrect usage.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/with.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\n# Consider a query to get all users that own Issues and the\n# comments those users made.\nwith module example\nselect Issue.owner {\n    name,\n    comments := Issue.owner.<owner[is Comment]\n};\n\n# The above query can be refactored like this:\nwith\n    module example,\n    U := Issue.owner\nselect U {\n    name,\n    comments := U.<owner[is Comment]\n};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\n# This query gets a set of tuples of\n# issues and their owners.\nwith\n    module example\nselect (Issue, Issue.owner);\n\n# This query gets a set of tuples that\n# result from a cartesian product of all issues\n# with all owners. This is because ``Issue`` and ``U``\n# are considered independent sets.\nwith\n    module example,\n    U := Issue.owner\nselect (Issue, U);\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression with New if/then/else Syntax in EdgeQL\nDESCRIPTION: Shows the new style of if/then/else syntax in EdgeQL for conditional expressions. The query checks if there are any Objects and returns a string based on the result.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select if count(Object) > 0 then 'got data' else 'no data';\n{'got data'}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Specific Gel CLI Commands\nDESCRIPTION: Command to display help documentation for a specific command group in the Gel CLI, showing available subcommands for managing Gel instances.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/cli.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance --help\nManage local Gel instances\n\nUsage: gel instance <COMMAND>\n\nCommands:\n  create          Initialize a new Gel instance\n  list            Show all instances\n  status          Show status of an instance\n  start           Start an instance\n  stop            Stop an instance\n  ...\n```\n\n----------------------------------------\n\nTITLE: User Type Definition with Array Property\nDESCRIPTION: SDL definition of a User type that includes an array property for storing favorite strings.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/colltypes.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n    required property name: str;\n    property favorites: array<str>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key in Gel CLI\nDESCRIPTION: This EdgeQL command demonstrates how to configure the OpenAI API key in the Gel database using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_39\n\nLANGUAGE: edgeql\nCODE:\n```\nsearchbot:main> configure current database\ninsert ext::ai::OpenAIProviderConfig {\n  secret := 'sk-....',\n};\n\nOK: CONFIGURE DATABASE\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::Parameter Structure in EdgeDB\nDESCRIPTION: This query retrieves the structure of the schema::Parameter type, which is used to represent function parameters. It shows the links and properties associated with function parameters in EdgeDB.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/functions.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Parameter';\n```\n\n----------------------------------------\n\nTITLE: Removing Authentication Method in EdgeDB\nDESCRIPTION: Removes a specific authentication configuration by filtering on the comment field.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql-repl\nCODE:\n```\nconfigure instance reset Auth\nfilter .comment = 'password is required';\n```\n\n----------------------------------------\n\nTITLE: Defining User Type in SDL (Pre-3.0)\nDESCRIPTION: Example of defining a User type in EdgeDB SDL before version 3.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_5\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required property email -> str;\n  multi link friends -> User;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing EdgeQL Query to Insert Sample Data\nDESCRIPTION: This command executes the EdgeQL query file to insert sample data into the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ gel query -f app/sample_data/inserts.edgeql\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Settings\nDESCRIPTION: Updates tsconfig.json to use ES6 target and set baseUrl for module imports\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./\"]\n    },\n    \"baseUrl\": \".\"\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Login Command\nDESCRIPTION: Command to authenticate with Azure CLI\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ az login\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Rewrites in SDL\nDESCRIPTION: Demonstrates how to use mutation rewrites to automatically set a 'modified' timestamp when inserting or updating a Post object. This feature allows automatic modifications to objects during write operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_12\n\nLANGUAGE: sdl\nCODE:\n```\ntype Post {\n  required title: str;\n  required body: str;\n  modified: datetime {\n    rewrite insert, update using (datetime_of_statement())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping EdgeDB Database\nDESCRIPTION: Command to dump an EdgeDB database to a local directory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel dump --dsn <old dsn> --all --format dir my_database.dump/\n```\n\n----------------------------------------\n\nTITLE: Upgrading Gel on CentOS/RHEL\nDESCRIPTION: Commands to upgrade Gel package and restart the service on RPM-based systems\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo yum update gel-6\n$ sudo systemctl restart gel-server-6\n```\n\n----------------------------------------\n\nTITLE: Empty Schema Definition\nDESCRIPTION: Initial empty schema file in SDL format, serving as the starting point for database model definitions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/fastapi.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from Vectorstore in Python\nDESCRIPTION: Method to delete records from the vector store by their IDs. It returns a list of deleted record IDs.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/vectorstore_python.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete(self, ids: list[uuid.UUID]) -> list[uuid.UUID]:\n    # Implementation details not provided\n```\n\n----------------------------------------\n\nTITLE: Handling Volatile Operations in EdgeQL\nDESCRIPTION: Shows how implicit cross products with volatile operations are forbidden, but can be achieved using a for loop.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a7.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ({1, 2}, random());\nerror: can not take cross product of volatile operation\n  ┌─ query:1:17\n  │\n1 │ select ({1, 2}, random());\n  │                 ^^^^^^^^^ error\ndb> for x in {1, 2} union (x, random());\n{(1, 0.25724045818607166), (2, 0.7268530965023459)}\n```\n\n----------------------------------------\n\nTITLE: Altering Enum Type in EdgeQL\nDESCRIPTION: Shows how to create an enum type 'Color' and then alter it to add a new label 'Magic'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a7.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> create scalar type Color\n...     extending enum<Red, Green, Blue>;\nOK: CREATE\ndb> alter scalar type Color\n...     extending enum<Red, Green, Blue, Magic>;\nOK: ALTER\n```\n\n----------------------------------------\n\nTITLE: Modified User Type Schema with Commented Property\nDESCRIPTION: Shows how to temporarily comment out a property in an EdgeDB SDL schema for later restoration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_18\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n # name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Gel Repository on Debian/Ubuntu\nDESCRIPTION: Command to add the Gel package repository to APT sources\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo deb [signed-by=/usr/local/share/keyrings/gel-keyring.gpg] \\\n    https://packages.geldata.com/apt \\\n    $(grep \"VERSION_CODENAME=\" /etc/os-release | cut -d= -f2) main \\\n    | sudo tee /etc/apt/sources.list.d/gel.list\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Package Key on Debian/Ubuntu\nDESCRIPTION: Commands to import the Gel packaging key and create the necessary keyring directory\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo mkdir -p /usr/local/share/keyrings && \\\n    sudo curl --proto '=https' --tlsv1.2 -sSf \\\n    -o /usr/local/share/keyrings/gel-keyring.gpg \\\n    https://packages.geldata.com/keys/gel-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Finalizing EdgeDB Server In-place Upgrade\nDESCRIPTION: Command to finalize a prepared in-place upgrade by flipping the database to the new version. This operation updates standard library trampolines, patches user-defined functions, and deletes the old standard library.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/inplace-upgrades.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nedgedb-server --backend-dsn=\"$DSN\" --inplace-upgrade-finalize\n```\n\n----------------------------------------\n\nTITLE: Calculating Population Variance in EdgeQL\nDESCRIPTION: Demonstrates the use of math::var_pop() function to calculate the population variance of a set of numbers.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_10\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::var_pop({1, 3, 5});\n{2.66666666666667}\n```\n\n----------------------------------------\n\nTITLE: Counting Interior Rings (Alternate) in EdgeQL\nDESCRIPTION: Alternative function that returns the number of interior rings in a polygon geometry. This function exposes the PostGIS st_numinteriorrings function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_191\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::numinteriorrings( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Initializing EdgeDB Project in Bash\nDESCRIPTION: Command to initialize a new EdgeDB project using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project init\n```\n\n----------------------------------------\n\nTITLE: PostGIS Version Information Functions in EdgeQL\nDESCRIPTION: Functions for retrieving version information about PostGIS and its dependencies including GEOS, PROJ, and related libraries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_214\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_full_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_geos_compiled_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_geos_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_lib_build_date(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_lib_revision(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_lib_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_libjson_version(\n                     \n                  ) ->  std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_liblwgeom_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_libprotobuf_version(\n                     \n                  ) ->  std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_libxml_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_proj_compiled_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_proj_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_scripts_build_date(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_scripts_installed(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_scripts_released(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_svn_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_version(\n                     \n                  ) -> optional std::str\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_wagyu_version(\n                     \n                  ) -> optional std::str\n```\n\n----------------------------------------\n\nTITLE: PostGIS Transformation Functions in EdgeQL\nDESCRIPTION: Functions for transforming PostGIS geometries using coordinate system operations including pipeline transformations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_215\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_transform_geometry(\n                    geom: ext::postgis::geometry, \n                    a1: std::str, \n                    a2: std::str, \n                    a3: std::int64, \n                  ) ->  ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_transform_pipeline_geometry(\n                    geom: ext::postgis::geometry, \n                    pipeline: std::str, \n                    forward: std::bool, \n                    to_srid: std::int64, \n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Upgrading Named EdgeDB Instance\nDESCRIPTION: Command to upgrade a specific EdgeDB instance by name to version 5.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb instance upgrade -I my_instance\n```\n\n----------------------------------------\n\nTITLE: Web Source Fetching Implementation - Python\nDESCRIPTION: Code for fetching and printing web sources with URL, title and text information\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nweb_sources = fetch_web_sources(\"edgedb\", limit=5)\n\nfor source in web_sources:\n    print(source.url)\n    print(source.title)\n    print(source.text)\n```\n\n----------------------------------------\n\nTITLE: Query and Schema Error Codes Definition\nDESCRIPTION: Defines error codes related to query processing, syntax errors, and schema definition issues\nSOURCE: https://github.com/geldata/gel/blob/master/edb/api/errors.txt#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0x_04_00_00_00   QueryError\n0x_04_01_00_00   InvalidSyntaxError\n0x_04_01_01_00   EdgeQLSyntaxError\n0x_04_01_02_00   SchemaSyntaxError\n0x_04_01_03_00   GraphQLSyntaxError\n```\n\n----------------------------------------\n\nTITLE: Initializing SearchBot Project\nDESCRIPTION: Commands to create and initialize the searchbot project directory using UV\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv init searchbot \\\n&& cd searchbot\n```\n\n----------------------------------------\n\nTITLE: Badge Table Structure in PostgreSQL\nDESCRIPTION: Shows the structure of the badges table including columns, constraints and foreign key references.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/datamigrations/postgres.rst#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsocial=> \\d badges\n                    Table \"public.badges\"\n       Column    | Type | Collation | Nullable | Default\n    -------------+------+-----------+----------+---------\n     name        | text |           | not null |\n     description | text |           | not null |\n    Indexes:\n        \"badges_pkey\" PRIMARY KEY, btree (name)\n    Referenced by:\n        TABLE \"users\" CONSTRAINT \"users_badge_name_fkey\" FOREIGN KEY (badge_name) REFERENCES badges(name)\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js Compatibility to wrangler.toml\nDESCRIPTION: Adds a configuration option to wrangler.toml to include polyfills for Node.js built-in modules, which are required by the Gel package but not available in the Cloudflare Worker environment.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\nnode_compat = true\n```\n\n----------------------------------------\n\nTITLE: Testing and Connecting to Gel Instance\nDESCRIPTION: Commands to test the deployment and establish connections using DSN.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/gcp.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --dsn $GEL_DSN --tls-security insecure\nGel x.x (repl x.x)\nType \\help for help, \\quit to quit.\ngel> select \"hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Restoring Dumped Database to Gel v6 Instance\nDESCRIPTION: CLI command to restore a dumped database to a new, empty Gel v6 instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gel restore --all my_database.dump/ --dsn <new dsn>\n```\n\n----------------------------------------\n\nTITLE: Dropping Abstract Orderable Link\nDESCRIPTION: Removes the abstract orderable link from the schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/links.rst#2025-04-16_snippet_25\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop abstract link orderable;\n```\n\n----------------------------------------\n\nTITLE: Web Search Implementation - Python\nDESCRIPTION: Implementation of web search functionality in the main application\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom .web import fetch_web_sources, WebSource\n\nasync def search_web(query: str) -> list[WebSource]:\n    raw_sources = fetch_web_sources(query, limit=5)\n    return [s for s in raw_sources if s.text is not None]\n```\n\n----------------------------------------\n\nTITLE: Defining Character Class Enum in EdgeDB SDL\nDESCRIPTION: Schema definition showing how to create an enum type for character classes and update the Character type to use it.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_21\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type CharacterClass extending enum<warrior, scholar, rogue>;\n\ntype Character {\n  required name: str;\n  required class: CharacterClass;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GEL Migration Extract Command\nDESCRIPTION: The 'gel migration extract' command extracts migration history from the connected database and writes it to /dbschema/migrations. It supports various options for connection, TLS configuration, interaction mode, and schema directory specification.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/gel_migration_extract.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel migration extract [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Exposing st_mlinefromwkb Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_mlinefromwkb function in EdgeDB. It has two overloads, taking a bytes input and optionally an SRID, returning an optional geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_171\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::mlinefromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::mlinefromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Setting Admin Password\nDESCRIPTION: Commands to set the admin password for Gel server\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ echo -n \"> \" && read -s PASSWORD\n$ RUNSTATE_DIR=$(systemctl show gel-server-6 -P ExecStart | \\\n   grep -o -m 1 -- \"--runstate-dir=[^ ]\\+\" | \\\n   awk -F \"=\" '{print $2}')\n$ sudo gel --port 5656 --tls-security insecure --admin \\\n   --unix-path $RUNSTATE_DIR \\\n   query \"ALTER ROLE admin SET password := '$PASSWORD'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sparse Object Wire Format Structure in C\nDESCRIPTION: Specifies the wire format structure for sparse objects, including element indexing and data storage.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct SparseObjectValue {\n    // Number of elements\n    int32       nelems;\n\n    // Element data.\n    Element     elements[nelems];\n};\n\nstruct Element {\n    // Index of the element in the input shape.\n    int32       index;\n\n    // Encoded element data length in bytes.\n    int32       length;\n\n    // Element data.\n    uint8       data[length];\n};\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL Server Setup\nDESCRIPTION: Commands to set server name and securely input password for PostgreSQL configuration\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ PG_SERVER_NAME=postgres-for-gel\n$ echo -n \"> \" && read -s PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit Type Casting\nDESCRIPTION: Shows examples of implicit type casting behavior with mixed numeric literals.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/casts.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nselect {1, 2n};\nselect {1, 2.0};\n```\n\n----------------------------------------\n\nTITLE: Enabling Gel Auth Extension in Schema\nDESCRIPTION: EdgeDB schema directive to enable the authentication extension for the application.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_26\n\nLANGUAGE: edgeql\nCODE:\n```\nusing extension auth;\n```\n\n----------------------------------------\n\nTITLE: Running Gel CLI Command in Project Directory\nDESCRIPTION: Shows how Gel CLI commands can be run without flags when inside a project directory.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel migration create\n```\n\n----------------------------------------\n\nTITLE: Defining Gel Restore Command Synopsis in reStructuredText\nDESCRIPTION: This snippet defines the command synopsis for the 'gel restore' command using reStructuredText markup. It shows the basic structure of the command with optional parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_restore.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. cli:synopsis::\n\n    gel restore [<options>] <path>\n```\n\n----------------------------------------\n\nTITLE: Installing @gel/generate with deno\nDESCRIPTION: Command to install the @gel/generate package using deno package manager.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ deno add --dev npm:@gel/generate\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Free Shapes in EdgeQL\nDESCRIPTION: Shows how to use free shapes to structure data without specifying an underlying object, making it easier to handle potentially empty sets compared to using tuples.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b3.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith U := (select User filter .name like '%user%')\nselect {\n    matches := U {name},\n    total := count(U),\n    total_users := count(User),\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing DSN for Gel Instance\nDESCRIPTION: Creates a DSN (Data Source Name) for the Gel instance using the admin credentials and IP address, storing it in a file for security.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ echo gel://admin:$PASSWORD@$IP > dsn.txt\n```\n\n----------------------------------------\n\nTITLE: Starting a Migration to Define a User Type\nDESCRIPTION: Example of using the 'start migration' DDL command to begin a migration that defines a User type with a username property.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nstart migration to {\n    module default {\n        type User {\n            property username: str;\n        };\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Content Block Stop Event in JSON\nDESCRIPTION: This snippet shows the JSON structure for a content_block_stop event, which marks the end of a content block in the SSE stream.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"content_block_stop\",\n  \"index\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Tree Structure in reStructuredText\nDESCRIPTION: Defines a documentation table of contents tree using reStructuredText directives. Sets maximum depth to 1 and hides the toctree while listing the main documentation sections.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 1\n  :hidden:\n\n  overview/index\n  setup/index\n  modeling/index\n  connecting/index\n  working/index\n  inheritance/index\n  ai/index\n```\n\n----------------------------------------\n\nTITLE: Grouping Scalar Values\nDESCRIPTION: Demonstrates grouping scalar values (movie titles) instead of objects, using an ad-hoc alias.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/group.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  M := (select Movie filter .release_year > 2015)\ngroup T := M.title\nusing vowel := re_test('(?i)^[aeiou]', T)\nby vowel;\n```\n\n----------------------------------------\n\nTITLE: Configuring Listen Address\nDESCRIPTION: Command to configure the server's listen address\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --port 5656 --tls-security insecure --password query \\\n   \"CONFIGURE INSTANCE SET listen_addresses := {'0.0.0.0'};\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gel Package on Debian/Ubuntu\nDESCRIPTION: Commands to update package list and install Gel 6\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install gel-6\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub PRs for Backports\nDESCRIPTION: Commands to list pending backports and update PR labels for version tracking using GitHub CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/release-process.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh pr list --state all -l to-backport-5.x\ngh pr edit --remove-label to-backport-N.x --add-label backported-N.x <PR NUMBER>\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc Tangent of Two Variables in EdgeQL\nDESCRIPTION: Shows how to use math::atan2() function to calculate the arc tangent of y/x, using the signs of the arguments to determine the correct quadrant.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::atan2(1, 1);\n{0.7853981633974483}\ndb> select math::atan2(1, -1);\n{2.356194490192345}\ndb> select math::atan2(-1, -1);\n{-2.356194490192345}\ndb> select math::atan2(-1, 1);\n{-0.7853981633974483}\n```\n\n----------------------------------------\n\nTITLE: Formatting Reference Links\nDESCRIPTION: Shows how to create internal documentation links with custom text using the ref role.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:ref:`our documentation on selecting objects <ref_eql_select_objects>`\n```\n\n----------------------------------------\n\nTITLE: Package Installation - Bash\nDESCRIPTION: Commands for installing required Python packages using uv package manager\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ uv add requests\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 app/web.py\n```\n\n----------------------------------------\n\nTITLE: Defining std::anyscalar Abstract Type in EdgeDB\nDESCRIPTION: Defines the 'std::anyscalar' abstract type, which serves as the base scalar type from which all other scalar types are derived.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_2\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anyscalar\n```\n\n----------------------------------------\n\nTITLE: Using the word_similarity_dist Function in ext::pg_trgm\nDESCRIPTION: Examples of using the word_similarity_dist function which returns the distance between the first string and any part of the second string, defined as 1 minus word_similarity.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_trgm.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select ext::pg_trgm::word_similarity_dist('cat', 'Lazy dog');\n{1}\ndb> select ext::pg_trgm::word_similarity_dist('cat', 'Dog in a car');\n{0.5}\ndb> select ext::pg_trgm::word_similarity_dist('cat', 'Dog catastrophe');\n{0.25}\ndb> select ext::pg_trgm::word_similarity_dist('cat', 'Lazy dog and cat');\n{0}\n```\n\n----------------------------------------\n\nTITLE: Defining ReadyForCommand Message Structure in EdgeDB Protocol\nDESCRIPTION: Defines the structure of the ReadyForCommand message sent by the server, including transaction state and annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_2\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.ReadyForCommand\n\n.. eql:struct:: edb.protocol.TransactionState\n\n.. eql:struct:: edb.protocol.Annotation\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for FastAPI Signup Endpoint\nDESCRIPTION: This JSON snippet demonstrates the required payload format for the signup endpoint. It includes email, name, and password fields which are needed to register a new user in the system.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"email\": \"jonathan@example.com\",\n    \"name\": \"Jonathan Harker\",\n    \"password\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @gel/generate with npm\nDESCRIPTION: Command to install the @gel/generate package using npm package manager.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev @gel/generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Similar Chat Search in API Endpoint in Python\nDESCRIPTION: Adds functionality to fetch similar chats based on an embedding generated from the search query. Uses EdgeDB's AI capabilities to find relevant chat history.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n# 4. Fetch similar chats\ndb_ai: AsyncEdgeDBAI = await create_async_ai(gel_client, model=\"gpt-4o-mini\")\nembedding = await db_ai.generate_embeddings(\n    search_query, model=\"text-embedding-3-small\"\n)\nsimilar_chats = await search_chats_query(\n    gel_client,\n    username=username,\n    current_chat_id=chat_id,\n    embedding=embedding,\n    limit=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Version Check using Environment Variable in Bash\nDESCRIPTION: Demonstrates how to disable the version check in Gel CLI by setting the RUN_VERSION_CHECK environment variable to 'never'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/network.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export RUST_LOG=edgedb::version_check=debug\n$ gel --no-cli-update-check\n[..snip..] Skipping version check due to --no-cli-update-check\ngel>\n$ GEL_RUN_VERSION_CHECK=never gel\n[..snip..] Skipping version check due to GEL_RUN_VERSION_CHECK=never\ngel>\n```\n\n----------------------------------------\n\nTITLE: Exposing st_linetocurve Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_linetocurve function in EdgeDB. It takes a geometry input and returns a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_149\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::linetocurve( \\\n                    geometry: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_Length Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_Length function which calculates the length of a geometry. For geography objects, it supports an additional parameter to specify whether to use a spheroid for calculations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_132\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::length( \\\n                    a0: std::str \\\n                  ) ->  std::float64\n                  ext::postgis::length( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::float64\n                  ext::postgis::length( \\\n                    geog: ext::postgis::geography, \\\n                    use_spheroid: std::bool = true, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Migration Command\nDESCRIPTION: CLI command example for creating the first migration in EdgeDB\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel -I chatapp create-migration --schema-dir app_schema\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Toctree for Changelog Navigation\nDESCRIPTION: RST configuration block that sets up a table of contents tree for organizing changelog documentation across major version numbers and deprecation notices.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    1_x\n    2_x\n    3_x\n    4_x\n    5_x\n    6_x\n    deprecation\n```\n\n----------------------------------------\n\nTITLE: Upgrading Local EdgeDB Project in Bash\nDESCRIPTION: Command to upgrade a local EdgeDB project to version 3.0 using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project upgrade\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Query in Terminal\nDESCRIPTION: This shell command demonstrates how to execute the TypeScript file using npx tsx, showing the output of the simple query.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/connecting/nextjs.rst#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npx tsx test.ts\n[ 'Hello from Gel!' ]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Local EdgeDB Project\nDESCRIPTION: Command to upgrade a local EdgeDB project to version 5.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project upgrade\n```\n\n----------------------------------------\n\nTITLE: Starting EdgeDB Watch Mode in Bash\nDESCRIPTION: Command to start the EdgeDB watch mode for real-time schema updates using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ gel watch\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS closest point functions in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_closestpoint function, which returns the 2D point on the first geometry that is closest to the second geometry. Implemented for geometry and geography types with different parameter options.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_35\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::closestpoint( \\\n  a0: optional std::str, \\\n  a1: optional std::str, \\\n) -> optional ext::postgis::geometry\next::postgis::closestpoint( \\\n  geom1: ext::postgis::geometry, \\\n  geom2: ext::postgis::geometry, \\\n) ->  ext::postgis::geometry\next::postgis::closestpoint( \\\n  a0: ext::postgis::geography, \\\n  a1: ext::postgis::geography, \\\n  use_spheroid: std::bool = true, \\\n) ->  ext::postgis::geography\n```\n\n----------------------------------------\n\nTITLE: Link Local Instance\nDESCRIPTION: Commands to link the Azure Gel instance to local environment\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/azure_flexibleserver.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ printf $PASSWORD | gel instance link \\\n    --password-from-stdin \\\n    --non-interactive \\\n    --trust-tls-cert \\\n    --host $( \\\n      az container list \\\n        --resource-group $GROUP \\\n        --query \"[?name=='gel-container-group'].ipAddress.fqdn | [0]\" \\\n        --output tsv ) \\\n    azure\n```\n\n----------------------------------------\n\nTITLE: Defining Range Wire Format Structure in C\nDESCRIPTION: Defines the wire format structure for ranges, including boundary data and flags for range definition.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstruct Range {\n    // A bit mask of range definition.\n    uint8<RangeFlag> flags;\n\n    // Lower boundary data.\n    Boundary         lower;\n\n    // Upper boundary data.\n    Boundary         upper;\n};\n\nstruct Boundary {\n    // Encoded boundary data length in bytes.\n    int32       length;\n\n    // Boundary data.\n    uint8       data[length];\n};\n\nenum RangeFlag {\n    // Empty range.\n    EMPTY   = 0x0001;\n\n    // Included lower boundary.\n    LB_INC  = 0x0002;\n\n    // Included upper boundary.\n    UB_INC  = 0x0004;\n\n    // Inifinity (excluded) lower boundary.\n    LB_INF  = 0x0008;\n\n    // Infinity (excluded) upper boundary.\n    UB_INF  = 0x0010;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Secrets in Fly.io for Gel Cloud Applications\nDESCRIPTION: Commands to set the GEL_INSTANCE and GEL_SECRET_KEY as runtime secrets in your Fly.io app. These environment variables are required for Gel Cloud applications to function correctly at runtime.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/deploy/fly.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flyctl secrets set GEL_INSTANCE <GEL_INSTANCE>\n$ flyctl secrets set GEL_SECRET_KEY <GEL_SECRET_KEY>\n```\n\n----------------------------------------\n\nTITLE: Running the Gel Cloud Login Command\nDESCRIPTION: This command launches a browser to initiate the Gel Cloud authentication flow. Upon successful authentication, it stores the secret key locally for future use.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_cloud/gel_cloud_login.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel cloud login\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Python Client\nDESCRIPTION: Example of setting global variables in the EdgeDB Python client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom edgedb import create_client\n\nclient = create_client().with_globals({\n    'current_user': '580cc652-8ab8-4a20-8db9-4c79a4b1fd81'\n})\n\nresult = client.query(\"\"\"\n    select global current_user;\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Project with CLI\nDESCRIPTION: Command to initialize a new Gel project using the CLI tool.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm dlx gel project init # or `npx gel project init`\n```\n\n----------------------------------------\n\nTITLE: String Left Padding Example in EdgeQL\nDESCRIPTION: Demonstrates usage of deprecated str_lpad() function for left-padding strings with spaces or custom characters. Shows truncation behavior when input exceeds target length.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/deprecated.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select str_lpad('short', 10);\n{'     short'}\ndb> select str_lpad('much too long', 10);\n{'much too l'}\ndb> select str_lpad('short', 10, '.:');\n{'.:.:.short'}\n```\n\n----------------------------------------\n\nTITLE: Selecting All Properties with Spread Operator in Gel TypeScript\nDESCRIPTION: Demonstrates how to use the '*' property and spread operator as a shorthand for selecting all properties of a given object type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/querybuilder.rst#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, movie => ({\n  ...e.Movie['*']\n}));\n\nconst result = await query.run(client);\n// { id: string; title: string; release_year: number | null }[]\n```\n\n----------------------------------------\n\nTITLE: Changing Admin Password for Gel Instance\nDESCRIPTION: Uses gel query to change the password for the admin role of the Gel instance, utilizing the previously set IP and PASSWORD variables.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ printf gelpassword | gel query \\\n         --host $IP \\\n         --password-from-stdin \\\n         --tls-security insecure \\\n         \"alter role admin set password := '${PASSWORD}'\"\n```\n\n----------------------------------------\n\nTITLE: Password Hashing with ext::pgcrypto::crypt Function\nDESCRIPTION: Examples of using the crypt function to hash passwords with a salt and verify passwords against stored hashes. This implements the crypt(3)-style hashing functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgcrypto.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module ext::pgcrypto\nselect crypt('new password', gen_salt('des'));\n```\n\n----------------------------------------\n\nTITLE: Error Response for RAG API\nDESCRIPTION: Example JSON error response returned when the RAG API request is invalid. This specific example shows the error returned when the required 'query' parameter is missing from the 'context' object in the request body.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"missing required 'query' in request 'context' object\",\n  \"type\": \"BadRequestError\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel 6.0 Project\nDESCRIPTION: Command to initialize a new Gel project with version 6.0-rc.2. This ensures access to the latest features while noting that pre-release versions are not considered stable.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init --server-version 6.0-rc.2\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::Trigger ObjectType in EdgeQL\nDESCRIPTION: This query retrieves the structure of the schema::Trigger object type, including its name, links, and properties. It demonstrates how to inspect the metadata of the Trigger type in EdgeDB's schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/triggers.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n} filter .name = 'schema::Trigger';\n```\n\n----------------------------------------\n\nTITLE: Configuring Gel Backend DSN and Security Mode\nDESCRIPTION: Sets up the backend PostgreSQL DSN and configures Gel to run in insecure mode initially for setup purposes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ printf \"GEL_SERVER_BACKEND_DSN=${DSN} \\\n\\nGEL_SERVER_SECURITY=insecure_dev_mode\\n\" \\\n| ssh root@$IP -T \"cat > /etc/gel/env\"\n\n$ ssh root@$IP \"systemctl restart gel.service\"\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File\nDESCRIPTION: Creates a .env.local file for environment variables\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ touch .env.local\n```\n\n----------------------------------------\n\nTITLE: Release Tag and Push Commands\nDESCRIPTION: Git commands to tag a new release version and push it to the repository.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/release-process.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# git tag --sign v4.5\n# git push origin releases/4.x --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine in EdgeQL\nDESCRIPTION: Demonstrates the use of math::cos() function to calculate the cosine of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::cos(0);\n{1}\ndb> select math::cos(math::pi() / 2);\n{0.000000000}\ndb> select math::cos(math::pi());\n{-1}\ndb> select math::cos(math::pi() * 3 / 2);\n{-0.000000000}\n```\n\n----------------------------------------\n\nTITLE: Executing gel database wipe command in EdgeDB Gel CLI\nDESCRIPTION: This command destroys the contents of a database, resetting the schema to its initial state. It is equivalent to the EdgeQL statement 'reset schema to initial'. The command accepts connection options and a non-interactive flag.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_database/gel_database_wipe.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel database wipe [<options>]\n```\n\n----------------------------------------\n\nTITLE: Specifying WWW-Authenticate Response Header Format\nDESCRIPTION: Defines the format for the www-authenticate response header used in HTTP tunneling authentication responses.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nwww-authenticate: {AUTH METHOD} {AUTH PAYLOAD}\n```\n\n----------------------------------------\n\nTITLE: Removing Trust Authentication in EdgeQL\nDESCRIPTION: Resets (removes) all Trust authentication methods from the instance configuration using a filter expression.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/configure.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure instance reset Auth filter Auth.method is Trust;\n```\n\n----------------------------------------\n\nTITLE: Documenting New Administrative Commands in EdgeDB 5\nDESCRIPTION: This snippet introduces new administrative commands added in EdgeDB 5 release, including branch management, statistics updates, and vacuum operations. It uses reStructuredText directives to format the content.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. versionadded:: 5.0\n\n    New administrative commands were added in |EdgeDB| 5 release:\n\n    * :ref:`branch <ref_admin_branches>`\n\n      Create, remove, or alter a branch.\n\n    * :ref:`administer statistics_update() <ref_admin_statistics_update>`\n\n      Update internal statistics about data.\n\n    * :ref:`administer vacuum() <ref_admin_vacuum>`\n\n      Reclaim storage space.\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeQL Query to Get All Users\nDESCRIPTION: This EdgeQL query selects all users and their names from the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/tutorials/ai_fastapi_searchbot.rst#2025-04-16_snippet_21\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User { name };\n```\n\n----------------------------------------\n\nTITLE: Dumping EdgeDB Database in Bash\nDESCRIPTION: Command to dump an EdgeDB database to a local file.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/2_x.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gel dump --dsn <old dsn> --all my_database.dump/\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Definition\nDESCRIPTION: Sphinx/RST directive defining the table of contents structure for the guides section, with maxdepth of 1 and links to major documentation sections.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    datamigrations/index\n    tutorials/index\n    migrations/index\n    contributing/index\n```\n\n----------------------------------------\n\nTITLE: Dumping Gel 5.x Database for Upgrade\nDESCRIPTION: Command to dump the schema and contents of a Gel 5.x database to a local directory for upgrading to 6.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gel dump --dsn <old dsn> --all --format dir my_database.dump/\n```\n\n----------------------------------------\n\nTITLE: Deploying Gel Cloud Application with Build Secrets to Fly.io\nDESCRIPTION: Command to deploy a Gel Cloud application that requires build secrets to Fly.io. This specifies the necessary environment variables as build secrets during the deployment process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/deploy/fly.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flyctl deploy --build-secret GEL_INSTANCE=\"<GEL_INSTANCE>\" \\\n    --build-secret GEL_SECRET_KEY=\"<GEL_SECRET_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Implicit 'any' in Filter Clause in EdgeQL\nDESCRIPTION: Demonstrates that the filter clause behaves as an implicit 'any' function, showing equivalent queries using explicit and implicit 'any'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/boolean.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\nselect User\nfilter .friends.name = 'Alice';\n\nselect User\nfilter any(.friends.name = 'Alice');\n```\n\n----------------------------------------\n\nTITLE: Restoring EdgeDB Database in Bash\nDESCRIPTION: Command to restore an EdgeDB database from a local dump using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ gel restore --all my_database.dump/ --dsn <new dsn>\n```\n\n----------------------------------------\n\nTITLE: Generating KML from PostGIS Geometry/Geography\nDESCRIPTION: Converts PostGIS geometry or geography to KML format. Allows specifying decimal precision and namespace prefix.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::askml( \n  a0: std::str \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::askml( \n  geom: ext::postgis::geometry, \n  maxdecimaldigits: std::int64 = 15, \n  nprefix: std::str = '', \n) ->  std::str\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::askml( \n  geog: ext::postgis::geography, \n  maxdecimaldigits: std::int64 = 15, \n  nprefix: std::str = '', \n) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Using Extended Output Option for 'gel instance list'\nDESCRIPTION: This option provides more detailed debug information about each Gel instance when used with the 'gel instance list' command.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_list.rst#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--extended\n```\n\n----------------------------------------\n\nTITLE: Table of Contents in Sphinx\nDESCRIPTION: Example showing how to create a table of contents using the toctree directive in Sphinx.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n    :hidden:\n\n    code\n    documentation\n```\n\n----------------------------------------\n\nTITLE: Initializing EdgeDB Project in Bash\nDESCRIPTION: Command to initialize a new EdgeDB project using the CLI.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project init\n```\n\n----------------------------------------\n\nTITLE: Enabling pg_unaccent Extension in SDL\nDESCRIPTION: Shows how to activate the pg_unaccent extension using the SDL configuration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pg_unaccent.rst#2025-04-16_snippet_1\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension pg_unaccent;\n```\n\n----------------------------------------\n\nTITLE: JSON Output of GraphQL Introspection Query\nDESCRIPTION: This JSON response shows the structure of the 'Query' type, including fields like 'Author' and 'Book' with their respective arguments and types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/introspection.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"__type\": {\n        \"name\": \"Query\",\n        \"fields\": [\n            {\n                \"name\": \"Author\",\n                \"args\": [\n                    {\n                        \"name\": \"id\",\n                        \"type\": {\n                            \"kind\": \"SCALAR\",\n                            \"name\": \"ID\"\n                        }\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": {\n                            \"kind\": \"SCALAR\",\n                            \"name\": \"String\"\n                        }\n                    }\n                ]\n            },\n            {\n                \"name\": \"Book\",\n                \"args\": [\n                    {\n                        \"name\": \"id\",\n                        \"type\": {\n                            \"kind\": \"SCALAR\",\n                            \"name\": \"ID\"\n                        }\n                    },\n                    {\n                        \"name\": \"isbn\",\n                        \"type\": {\n                            \"kind\": \"SCALAR\",\n                            \"name\": \"String\"\n                        }\n                    },\n                    {\n                        \"name\": \"synopsis\",\n                        \"type\": {\n                            \"kind\": \"SCALAR\",\n                            \"name\": \"String\"\n                        }\n                    },\n                    {\n                        \"name\": \"title\",\n                        \"type\": {\n                            \"kind\": \"SCALAR\",\n                            \"name\": \"String\"\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @gel/generate with yarn\nDESCRIPTION: Command to install the @gel/generate package using yarn package manager.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/generation.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @gel/generate\n```\n\n----------------------------------------\n\nTITLE: Specifying Message Delta Event in JSON\nDESCRIPTION: This JSON structure represents a message_delta event, providing final message-level updates including the stop reason and usage statistics.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"message_delta\",\n  \"delta\": {\n    \"stop_reason\": \"stop\"\n  },\n  \"usage\": { \"prompt_tokens\": 10 }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommandComplete Message Structure in EdgeDB Protocol\nDESCRIPTION: Defines the structure of the CommandComplete message sent by the server to indicate successful completion of a command, including annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_4\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.CommandComplete\n\n.. eql:struct:: edb.protocol.Annotation\n```\n\n----------------------------------------\n\nTITLE: Defining Administrative Commands in reStructuredText\nDESCRIPTION: This snippet defines a list of administrative commands for managing Gel using reStructuredText syntax. It includes references to configure and role management commands.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* :ref:`configure <ref_eql_statements_configure>`\n\n  Configure server behavior.\n\n* :ref:`role <ref_admin_roles>`\n\n  Create, remove, or alter a role.\n```\n\n----------------------------------------\n\nTITLE: Dropping a Constraint from a Property (EdgeQL)\nDESCRIPTION: This example shows how to remove the 'min_value' constraint from the 'score' property of the 'User' type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\nalter type User alter property score\n  drop constraint min_value(0);\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Documentation\nDESCRIPTION: Project overview documentation describing db_proto crate's purpose for parsing PostgreSQL-like protocols.\nSOURCE: https://github.com/geldata/gel/blob/master/rust/db_proto/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# db_proto\n\nThis is a crate that makes parsing and serializing of PostgreSQL-like protocols\n(ie: Postgres itself, as well as Gel/EdgeDB) easier.\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Polymorphic Functions in EdgeQL\nDESCRIPTION: Shows how to create and use polymorphic functions with different parameter types. Includes two function definitions with string and integer parameters, along with usage examples.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/functions.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> create function make_name(name: str) -> str\n... using ('my_name_' ++ name);\nCREATE FUNCTION\ndb> create function make_name(name: int64) -> str\n... using ('my_name_' ++ <str>name);\nCREATE FUNCTION\nq> select make_name('Alice');\n{'my_name_Alice'}\nq> select make_name(42);\n{'my_name_42'}\n```\n\n----------------------------------------\n\nTITLE: Bitwise Right Shift Operation in EdgeQL\nDESCRIPTION: Examples of bit_rshift() function, which performs an arithmetic right shift on an integer. Shows behavior with sign preservation and different shift amounts.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/numbers.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_rshift(123, 2);\n{30}\ndb> select bit_rshift(123, 65);\n{0}\ndb> select bit_rshift(-123, 2);\n{-31}\ndb> select bit_rshift(-123, 65);\n{-1}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_rshift(bit_rshift(123, 1), 3);\n{7}\ndb> select bit_rshift(123, 4);\n{7}\ndb> select bit_rshift(bit_rshift(-123, 1), 3);\n{-8}\ndb> select bit_rshift(-123, 4);\n{-8}\n```\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select bit_rshift(123, -2);\ngel error: InvalidValueError: bit_rshift(): cannot shift by\nnegative amount\n```\n\n----------------------------------------\n\nTITLE: Executing Database Drop Command in Gel CLI\nDESCRIPTION: This command is used to drop a database in Gel. It takes the database name as an argument and can be run with additional options. Note that this command is deprecated in favor of the 'gel branch drop' command for EdgeDB 5.0 and later versions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_database/gel_database_drop.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel database drop [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Encoding cal::local_time in EdgeDB Protocol\nDESCRIPTION: Binary encoding format for cal::local_time values. The value is represented as a 64-bit integer (most significant byte first) representing the number of microseconds since midnight.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n0x00 0x00 0x00 0x0a 0x32 0xae 0xf6 0x00\n```\n\n----------------------------------------\n\nTITLE: String Repeat Example - EdgeQL\nDESCRIPTION: Shows str_repeat function duplicating input string specified number of times.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_16\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select str_repeat('.', 3);\n{'...'}\ndb> select str_repeat('foo', -1);\n{''}\n```\n\n----------------------------------------\n\nTITLE: Running Cloudflare Worker Locally\nDESCRIPTION: Provides the command to run the Cloudflare Worker locally for testing purposes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev # or pnpm, yarn, bun\n```\n\n----------------------------------------\n\nTITLE: Creating Labels and References in reStructuredText\nDESCRIPTION: Demonstrates how to create labels for cross-referencing and internal linking in the documentation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _ref_eql_select_objects:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Environment Directive\nDESCRIPTION: RST directives for setting up documentation environment with a table of contents pointing to NextJS and FastAPI setup guides.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. edb:env-switcher::\n\n===========================\nSetting up your environment\n===========================\n\n.. toctree::\n  :maxdepth: 3\n  :hidden:\n\n  nextjs\n  fastapi\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Table of Contents\nDESCRIPTION: RST markup defining the documentation structure using Sphinx's toctree directive. Sets maxdepth to 3 levels and hides the toctree from direct display while organizing content into major sections.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n    :hidden:\n\n    upgrading\n    guides/index\n    protocol/index\n    cheatsheets/index\n    changelog/index\n```\n\n----------------------------------------\n\nTITLE: Connecting to Gel Instance REPL\nDESCRIPTION: Opens a REPL connection to the Gel instance using the constructed DSN, with TLS security set to insecure for initial setup.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --dsn <dsn> --tls-security insecure\n```\n\n----------------------------------------\n\nTITLE: Running Gel Codemod for TypeScript Client Library Update\nDESCRIPTION: Command to run the Gel codemod tool, which automatically updates the codebase to use the new Gel packages instead of the old EdgeDB packages in TypeScript projects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/codemod@latest\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying EdgeDB Migration\nDESCRIPTION: This snippet shows the process of creating a new migration for the schema changes and applying it using EdgeDB CLI commands. It includes interactive prompts for confirming the changes made to the schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/inheritance/fastapi.rst#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ gel migration create\ndid you create object type 'default::Timestamped'? [y,n,l,c,b,s,q,?]\n> y\ndid you alter object type 'default::Card'? [y,n,l,c,b,s,q,?]\n> y\ndid you alter object type 'default::Deck'? [y,n,l,c,b,s,q,?]\n> y\nCreated /home/strinh/projects/flashcards/dbschema/migrations/00004-m1d2m5n.edgeql, id: m1d2m5n5ajkalyijrxdliioyginonqbtfzihvwdfdmfwodunszstya\n\n$ gel migrate\nApplying m1d2m5n5ajkalyijrxdliioyginonqbtfzihvwdfdmfwodunszstya (00004-m1d2m5n.edgeql)\n... parsed\n... applied\n```\n\n----------------------------------------\n\nTITLE: CLI Synopsis - gel project unlink command\nDESCRIPTION: The basic syntax for the gel project unlink command that removes project association with a Gel instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_project/gel_project_unlink.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel project unlink [<options>]\n```\n\n----------------------------------------\n\nTITLE: New CLI Commands in EdgeDB 1.0 Alpha 3\nDESCRIPTION: Added commands to the EdgeDB REPL including dump/restore functionality, history management, and settings configuration. These commands allow users to manage database dumps, view and edit command history, and control REPL behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a3.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\\dump FILENAME           dump current database into a file\n\\restore FILENAME        restore the database from file into\n                         the current one\n\\s, \\history             show history\n\\e, \\edit [N]            spawn $EDITOR to edit history entry N\n                         then use the output as the input\n\\set [OPTION [VALUE]]    show/change setting\n\\set                     Show setting descriptions (without\n                         arguments)\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Structure\nDESCRIPTION: ReStructuredText markup defining a table of contents tree with maximum depth of 2 levels, linking to guide and tips documentation pages.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    guide\n    tips\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Gel Droplet\nDESCRIPTION: Commands to upgrade an existing Gel droplet to the latest point release using apt-get.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ apt-get update && apt-get install --only-upgrade gel-server-6\n$ systemctl restart gel\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Synopsis for Gel Instance Upgrade Command\nDESCRIPTION: This snippet defines the command-line interface synopsis for the 'gel instance upgrade' command, showing the basic structure and optional parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_upgrade.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngel instance upgrade [<options>] [<name>]\n```\n\n----------------------------------------\n\nTITLE: Opening Gel REPL in Project Directory\nDESCRIPTION: Shows how to open a Gel REPL within a project directory, which automatically connects to the linked instance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/projects.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gel\nGel x.x+cc4f3b5 (repl x.x+da2788e)\nType \\help for help, \\quit to quit.\nmy_instance:main> select \"Hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Header Block Structure in C\nDESCRIPTION: Defines the complete structure of the header block including version info, schema data, type information, and object descriptors. Contains nested structures for TypeInfo and ObjectDesc.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dump_format.rst#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct DumpHeader {\n    // Message type ('H')\n    int8            mtype = 0x48;\n\n    // SHA1 hash sum of block data\n    byte            sha1sum[20];\n\n    // Length of message contents in bytes,\n    // including self.\n    int32           message_length;\n\n    // A set of message headers.\n    Headers         headers;\n\n    // Protocol version of the dump\n    int16           major_ver;\n    int16           minor_ver;\n\n    // Schema data\n    string          schema_ddl;\n\n    // Type identifiers\n    int32           num_types;\n    TypeInfo        types[num_types];\n\n    // Object descriptors\n    int32           num_descriptors;\n    ObjectDesc      descriptors[num_descriptors]\n};\n\nstruct TypeInfo {\n    string          type_name;\n    string          type_class;\n    byte            type_id[16];\n}\n\nstruct ObjectDesc {\n    byte            object_id[16];\n    bytes           description;\n\n    int16           num_dependencies;\n    byte            dependency_id[num_dependencies][16];\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Complete SSE Response Stream in Text\nDESCRIPTION: This code block provides a comprehensive example of a full SSE response stream, including all event types from message start to message stop, with content block operations and deltas.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/ai/http.rst#2025-04-16_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nevent: message_start\ndata: {\"type\": \"message_start\", \"message\": {\"id\": \"chatcmpl-9MzuQiF0SxUjFLRjIdT3mTVaMWwiv\", \"role\": \"assistant\", \"model\": \"gpt-4-0125-preview\", \"usage\": {\"prompt_tokens\": 10}}}\n\nevent: content_block_start\ndata: {\"type\": \"content_block_start\",\"index\":0,\"content_block\":{\"type\":\"text\",\"text\":\"\"}}\n\nevent: content_block_delta\ndata: {\"type\": \"content_block_delta\",\"index\":0,\"delta\":{\"type\": \"text_delta\", \"text\": \"The\"}, \"logprobs\": null}\n\nevent: content_block_delta\ndata: {\"type\": \"content_block_delta\",\"index\":0,\"delta\":{\"type\": \"text_delta\", \"text\": \" skies\"}, \"logprobs\": null}\n\nevent: content_block_delta\ndata: {\"type\": \"content_block_delta\",\"index\":0,\"delta\":{\"type\": \"text_delta\", \"text\": \" on\"}, \"logprobs\": null}\n\nevent: content_block_delta\ndata: {\"type\": \"content_block_delta\",\"index\":0,\"delta\":{\"type\": \"text_delta\", \"text\": \" Mars\"}, \"logprobs\": null}\n\nevent: content_block_delta\ndata: {\"type\": \"content_block_delta\",\"index\":0,\"delta\":{\"type\": \"text_delta\", \"text\": \" are\"}, \"logprobs\": null}\n\nevent: content_block_delta\ndata: {\"type\": \"content_block_delta\",\"index\":0,\"delta\":{\"type\": \"text_delta\", \"text\": \" red\"}, \"logprobs\": null}\n\nevent: content_block_delta\ndata: {\"type\": \"content_block_delta\",\"index\":0,\"delta\":{\"type\": \"text_delta\", \"text\": \".\"}, \"logprobs\": null}\n\nevent: content_block_stop\ndata: {\"type\": \"content_block_stop\",\"index\":0}\n\nevent: message_delta\ndata: {\"type\": \"message_delta\", \"delta\": {\"stop_reason\": \"stop\"}, \"usage\": {\"completion_tokens\": 7, \"total_tokens\": 17}}\n\nevent: message_stop\ndata: {\"type\": \"message_stop\"}\n```\n\n----------------------------------------\n\nTITLE: Defining std::anydiscrete Abstract Range Type in EdgeDB\nDESCRIPTION: Defines the 'std::anydiscrete' abstract type, which is the base type for all valid discrete ranges, including integer and date types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/abstract.rst#2025-04-16_snippet_9\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:type:: std::anydiscrete\n```\n\n----------------------------------------\n\nTITLE: Aggregating Customized Profiling Data with EdgeDB CLI\nDESCRIPTION: This command shows how to use 'edb perfviz' with custom options to aggregate profiling data. It filters by prefix, specifies an output file, and sets the input directory for the .prof files.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/tools/profiling/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ edb perfviz --prefix=another_function_ --out=/Users/ambv/Desktop/another_function.pstats /tmp/\n```\n\n----------------------------------------\n\nTITLE: General Dump Block Structure in C\nDESCRIPTION: Defines the basic structure of dump blocks used in both header and data sections. Contains message type, SHA1 checksum, length, and data fields.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dump_format.rst#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct DumpHeader {\n    int8            mtype;\n\n    // SHA1 hash sum of block data\n    byte            sha1sum[20];\n\n    // Length of message contents in bytes,\n    // including self.\n    int32           message_length;\n\n    // Block data. Should be treated in opaque way by a client.\n    byte            data[message_length];\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting a custom enumerated scalar type in EdgeQL\nDESCRIPTION: This query introspects the custom Color enumerated scalar type, retrieving its name, default value, enum values, abstract status, bases, ancestors, annotations, and constraints. It shows how to examine the properties of a user-defined enum type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/scalars.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ScalarType {\n    name,\n    default,\n    enum_values,\n    abstract,\n    bases: { name },\n    ancestors: { name },\n    annotations: { name, @value },\n    constraints: { name },\n}\nfilter .name = 'default::Color';\n```\n\n----------------------------------------\n\nTITLE: Introspecting User Type Array Properties\nDESCRIPTION: Shows how to inspect the properties of a User type, including detailed information about its array property structure.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/colltypes.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    properties: {\n        name,\n        target: {\n            name,\n            [is Array].element_type: { name },\n        },\n    },\n}\nfilter .name = 'default::User';\n```\n\n----------------------------------------\n\nTITLE: Creating PostGIS Geometry from WKT and SRID\nDESCRIPTION: Creates PostGIS geometry objects from Well-Known Text (WKT) representations and spatial reference system identifiers (SRID). Includes functions for multipolygons and polygons.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::bdmpolyfromtext( \n  a0: std::str, \n  a1: std::int64, \n) ->  ext::postgis::geometry\n```\n\nLANGUAGE: SQL\nCODE:\n```\next::postgis::bdpolyfromtext( \n  a0: std::str, \n  a1: std::int64, \n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Equivalent DDL for Creating a User Type\nDESCRIPTION: The Data Definition Language (DDL) equivalent of the SDL User type definition, showing how it would be created using low-level DDL commands.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/migrations.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate type User {\n  create required property name: str;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gel Cloud Instance using gel instance create\nDESCRIPTION: Command for creating a new Gel Cloud instance using the instance create command. The instance name must follow the format <org-name>/<instance-name> and adhere to the naming restrictions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/cli.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gel instance create <org-name>/<instance-name>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Default Branch\nDESCRIPTION: Launches Gel REPL connected to the default project branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/cli.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gel\n                        ▄██▄\n      ▄▄▄▄▄      ▄▄▄    ████\n    ▄███████▄ ▄███████▄ ████\n    ▀███████▀ ▀███▀▀▀▀▀ ████\n      ▀▀▀▀▀      ▀▀▀     ▀▀\n     ▀▄▄▄▄▄▀\n       ▀▀▀\nGel 6.0-rc.1+673117d (repl 6.2.0-dev)\nType \\help for help, \\quit to quit.\n```\n\n----------------------------------------\n\nTITLE: Dropping Scalar Type in EdgeQL\nDESCRIPTION: This snippet demonstrates how to remove a scalar type 'posint64' using the DROP SCALAR TYPE command. This operation permanently deletes the scalar type from the schema.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/primitives.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\ndrop scalar type posint64;\n```\n\n----------------------------------------\n\nTITLE: Using gel migration upgrade-check Command with Basic Syntax\nDESCRIPTION: Basic usage syntax for the gel migration upgrade-check command which checks schema compatibility with different Gel versions. The command can be run with various options to specify the target version.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/gel_migration_upgrade_check.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel migration upgrade-check [<options>]\n```\n\n----------------------------------------\n\nTITLE: Project Description in Markdown\nDESCRIPTION: README file explaining the purpose of the captive Postgres server project. It describes that each instance is freshly initialized with specified credentials for testing purposes.\nSOURCE: https://github.com/geldata/gel/blob/master/rust/captive_postgres/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# captive_postgres\n\nA simple, captive Postgres server that can be used to test client connections. Each instance\nis a freshly initialized Postgres server with the specified credentials.\n```\n\n----------------------------------------\n\nTITLE: Creating API Route Directory Structure in Next.js\nDESCRIPTION: This bash snippet shows the commands to create the necessary directory structure for the API route in a Next.js application.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/chatgpt_bot.rst#2025-04-16_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir app/api && cd app/api\n$ mkdir generate-answer && touch generate-answer/route.ts\n```\n\n----------------------------------------\n\nTITLE: Using the gel instance revert Command\nDESCRIPTION: Command syntax for reverting a Gel instance to its previous version after a major upgrade. It requires specifying the instance name and supports options for bypassing confirmation and ignoring process ID checks.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_revert.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel instance revert [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: Server Error Codes Definition - Internal and Protocol Errors\nDESCRIPTION: Defines basic server error codes including internal errors and protocol-related errors with their hierarchical structure\nSOURCE: https://github.com/geldata/gel/blob/master/edb/api/errors.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0x_01_00_00_00   InternalServerError\n\n0x_02_00_00_00   UnsupportedFeatureError\n\n0x_03_00_00_00   ProtocolError\n0x_03_01_00_00   BinaryProtocolError\n0x_03_01_00_01   UnsupportedProtocolVersionError\n0x_03_01_00_02   TypeSpecNotFoundError\n0x_03_01_00_03   UnexpectedMessageError\n```\n\n----------------------------------------\n\nTITLE: Installing tRPC Dependencies\nDESCRIPTION: Commands to install tRPC server and client dependencies.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add @trpc/server @trpc/client\n$ # or yarn add @trpc/server @trpc/client\n$ # or npm install @trpc/server @trpc/client\n$ # or bun add @trpc/server @trpc/client\n```\n\n----------------------------------------\n\nTITLE: Setting IP Address for DigitalOcean Droplet\nDESCRIPTION: Assigns the IP address of the DigitalOcean droplet to an environment variable for further use in the deployment process.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/digitalocean.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ IP=<your-droplet-ip>\n```\n\n----------------------------------------\n\nTITLE: Required Property Setting with Default Value\nDESCRIPTION: Example demonstrating how to set a property as required with a default value\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> create type Foo {\n...     create property bar -> str\n... };\nOK: CREATE TYPE\ndb> insert Foo;\n{default::Foo {id: efcffce4-6471-11eb-8be5-ff6b1f4c46ee}}\ndb> select Foo {bar};\n{default::Foo {bar: {}}}\ndb> alter type Foo alter property bar {\n...    set required using ('init')\n... };\nOK: ALTER TYPE\ndb> select Foo {bar};\n{default::Foo {bar: 'init'}}\n```\n\n----------------------------------------\n\nTITLE: Defining Document Structure with reStructuredText Toctree\nDESCRIPTION: This snippet uses the reStructuredText toctree directive to define the structure of the documentation, including hidden sub-pages for configure, roles, statistics update, and vacuum operations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n    :hidden:\n\n    configure\n    roles\n    statistics_update\n    vacuum\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Coalescing Inequality Examples\nDESCRIPTION: Shows usage of the coalescing inequality operator (?!=) for comparing values including empty sets. Demonstrates behavior when comparing regular values and empty sets.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/generic.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select {2} ?!= {2};\n{false}\ndb> select {1} ?!= <int64>{};\n{true}\ndb> select <bool>{} ?!= <bool>{};\n{false}\n```\n\n----------------------------------------\n\nTITLE: Disabling SELinux on CentOS/RHEL\nDESCRIPTION: Commands to disable SELinux and reboot the system\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config\n$ reboot\n```\n\n----------------------------------------\n\nTITLE: Exposing st_3dmaxdistance Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_3dmaxdistance function in EdgeDB. It calculates the 3D cartesian maximum distance between two geometries in projected units.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_165\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::maxdistance3d( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::float64\n```\n\n----------------------------------------\n\nTITLE: Nested Filtering in EdgeQL and TypeScript\nDESCRIPTION: Shows how to apply filters to nested shapes in both EdgeQL and TypeScript using the Gel client.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/edgeql.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\nselect Movie {\n  title,\n  actors: {\n    name\n  } filter .name ilike 'chris%'\n}\nfilter .title ilike '%avengers%';\n```\n\nLANGUAGE: typescript\nCODE:\n```\ne.select(e.Movie, movie => ({\n  title: true,\n```\n\n----------------------------------------\n\nTITLE: Using the gel instance destroy Command\nDESCRIPTION: Command for removing a Gel instance and all its data. This terminal command accepts a Gel instance name parameter and optional flags for forcing destruction and verbose output.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_destroy.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngel instance destroy [<options>] <name>\n```\n\n----------------------------------------\n\nTITLE: CLI Command - Migration Create with Squash\nDESCRIPTION: Enhanced migration creation command with new squash option to combine multiple migrations into a single migration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/3_x.rst#2025-04-16_snippet_21\n\nLANGUAGE: cli\nCODE:\n```\nedgedb migration create --squash\n```\n\n----------------------------------------\n\nTITLE: Git Log Commands for Backport Analysis\nDESCRIPTION: Commands to list all commits since the last release for backporting analysis.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/release-process.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit show releases/4.x\ngit log master\ngit log hash_of_that_commit..master > ../to-backport.txt\n```\n\n----------------------------------------\n\nTITLE: Creating MultiPoint from WKB in EdgeQL\nDESCRIPTION: Creates a MultiPoint geometry from WKB (Well-Known Binary) representation with an optional SRID parameter. This function exposes the PostGIS st_multipointfromwkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_180\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::multipointfromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::multipointfromwkb( \\\n                    a0: std::bytes, \\\n                    a1: std::int64, \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: EdgeQL bigint Type Examples\nDESCRIPTION: REPL examples demonstrating the std::bigint type usage and type checking.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 1n is std::bigint;\n{true}\n\ndb> select 1.0n is std::decimal;\n{true}\n```\n\n----------------------------------------\n\nTITLE: Forcing Polygon CCW in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_forcepolygonccw function to force the orientation of polygon vertices to counter-clockwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_83\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::forcepolygonccw( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Authentication\nDESCRIPTION: Configures SCRAM password authentication with priority 0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/cli.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ gel configure insert Auth \\\n> --comment 'password is required' \\\n> --priority 0 \\\n> --method SCRAM\nOK: CONFIGURE INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Applying Initial Migration Command\nDESCRIPTION: CLI command for applying the created migration\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel -I chatapp migrate --schema-dir app_schema\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch to Allow DDL in EdgeQL\nDESCRIPTION: This command configures the current branch to allow direct DDL statements by setting the allow_bare_ddl option to 'AlwaysAllow'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_31\n\nLANGUAGE: edgeql\nCODE:\n```\nconfigure current branch set allow_bare_ddl := 'AlwaysAllow';\n```\n\n----------------------------------------\n\nTITLE: Hashing Geometry Values\nDESCRIPTION: Function to generate a hash value for a geometry object. Maps to the PostGIS geometry_hash function for efficient indexing and storage.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_97\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::geometry_hash( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Polygon Creation Functions in EdgeQL\nDESCRIPTION: Functions for creating polygons from various formats including WKT (Well-Known Text) and WKB (Well-Known Binary), as well as from existing geometries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_211\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::polyfromtext(\n                    a0: std::str \n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::polyfromtext(\n                    a0: std::str, \n                    a1: std::int64, \n                  ) -> optional ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::polyfromwkb(\n                    a0: std::bytes \n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::polyfromwkb(\n                    a0: std::bytes, \n                    a1: std::int64, \n                  ) -> optional ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::polygon(\n                    a0: ext::postgis::geometry, \n                    a1: std::int64, \n                  ) ->  ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::polygonfromtext(\n                    a0: std::str \n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::polygonfromtext(\n                    a0: std::str, \n                    a1: std::int64, \n                  ) -> optional ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::polygonfromwkb(\n                    a0: std::bytes \n                  ) -> optional ext::postgis::geometry\n                  ext::postgis::polygonfromwkb(\n                    a0: std::bytes, \n                    a1: std::int64, \n                  ) -> optional ext::postgis::geometry\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::polygonize(\n                    a0: array<ext::postgis::geometry> \n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Changelog Generation Script\nDESCRIPTION: Python script to generate changelog entries by comparing git commits between two versions using GitHub API.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/release-process.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\nimport re\nimport sys\n\nBASE_URL = 'https://api.github.com/repos/edgedb/edgedb/compare'\n\ndef main():\n    if len(sys.argv) < 2:\n        print('pass a sha1 hash as a first argument')\n        sys.exit(1)\n\n    from_hash = sys.argv[1]\n    if len(sys.argv) > 2:\n        to_hash = sys.argv[2]\n\n    r = requests.get(f'{BASE_URL}/{from_hash}...{to_hash}')\n    data = json.loads(r.text)\n\n    for commit in data['commits']:\n        message = commit['commit']['message']\n        first_line = message.partition('\\n\\n')[0]\n        if commit.get('author'):\n            username = '@{}'.format(commit['author']['login'])\n        else:\n            username = commit['commit']['author']['name']\n        sha = commit[\"sha\"][:8]\n\n        m = re.search(r'\\#(?P<num>\\d+)\\b', message)\n        if m:\n            issue_num = m.group('num')\n        else:\n            issue_num = None\n\n        first_line = re.sub(r'\\(\\#(?P<num>\\d+)\\)', '', first_line)\n        print(f'* {first_line}')\n        # print(f'  (by {username} in {sha}', end='')\n        if issue_num:\n            print(f'  (:eql:gh:`#{issue_num}`)')\n        print()\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Gel documentation using reStructuredText syntax. It specifies the maximum depth and hidden status of the table, and lists various sections of the documentation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n    :hidden:\n\n    connection\n    projects\n    cli/index\n    clients\n    js/index\n    python/index\n    Go <https://pkg.go.dev/github.com/geldata/gel-go>\n    Rust <https://docs.rs/gel-tokio/latest/gel_tokio/>\n    sql_adapter\n    http\n    graphql/index\n    datetime\n```\n\n----------------------------------------\n\nTITLE: Calculating Cotangent in EdgeQL\nDESCRIPTION: Shows how to use math::cot() function to calculate the cotangent of a given value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_17\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::cot(math::pi() / 4);\n{1.000000000}\ndb> select math::cot(math::pi() / 2);\n{0.000000000}\ndb> select math::cot(math::pi() * 3 / 4);\n{-0.999999999}\n```\n\n----------------------------------------\n\nTITLE: Initial Chat App Schema Definition in SDL\nDESCRIPTION: Basic EdgeDB schema definition for a chat application with User and Message types\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_b1.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    type User {\n        required property name -> str;\n        required property email -> str;\n        required property password_hash -> str;\n    }\n\n    type Message {\n        required link author -> User;\n        required property body -> str;\n        required property timestamp -> datetime {\n            default := datetime_current()\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing st_locatebetween Function in EdgeDB\nDESCRIPTION: This function exposes the PostGIS st_locatebetween function in EdgeDB. It takes a geometry input, from and to measure values, and an optional offset, returning a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_151\n\nLANGUAGE: EdgeQL\nCODE:\n```\n.. eql:function:: ext::postgis::locatebetween( \\\n                    geometry: ext::postgis::geometry, \\\n                    frommeasure: std::float64, \\\n                    tomeasure: std::float64, \\\n                    leftrightoffset: std::float64 = 0.0, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Initializing EdgeDB v5.0 Project\nDESCRIPTION: Command to initialize a new EdgeDB project with version 5.0.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ edgedb project init\n```\n\n----------------------------------------\n\nTITLE: Describing Movie Type Schema in Verbose Text Format\nDESCRIPTION: Displays the verbose text representation of the Movie type schema including required properties and links.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\ntype default::Movie extending default::HasImage {\n  index on (__subject__.image);\n\n  required single link __type__ -> schema::Type {\n    readonly := true;\n  };\n\n  required single property id -> std::uuid {\n    readonly := true;\n    constraint std::exclusive;\n  };\n\n  required single property image -> std::str;\n\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS concave hull function in EdgeDB\nDESCRIPTION: Exposes the PostGIS st_concavehull function, which computes a possibly concave hull of a geometry. Parameters control the concavity and whether to allow holes in the result.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_44\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::concavehull( \\\n  param_geom: ext::postgis::geometry, \\\n  param_pctconvex: std::float64, \\\n  param_allow_holes: std::bool = false, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS asewkb Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_asewkb function in EdgeQL. Converts geometry to EWKB format with SRID metadata. Returns bytes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_9\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::asewkb( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bytes\n                  ext::postgis::asewkb( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::str, \\\n                  ) ->  std::bytes\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for GenoMind Guides using reStructuredText\nDESCRIPTION: This snippet uses reStructuredText to create a table of contents for the GenoMind project guides. It sets the maximum depth to 1 and includes a link to the AI guide index.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/guides/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n======\nGuides\n======\n\n.. toctree::\n  :maxdepth: 1\n\n  ai/index\n```\n\n----------------------------------------\n\nTITLE: Forcing Curved Geometry in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_forcecurve function to force a geometry into a curved representation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_82\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::forcecurve( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Parsing Date String with Whitespace in EdgeQL\nDESCRIPTION: Demonstrates the difference in parsing date strings with and without the FX prefix modifier. Without FX, whitespace is ignored, while with FX, extra whitespace causes an error.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/string.rst#2025-04-16_snippet_28\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select cal::to_local_date(\n    '2000    JUN', 'YYYY MON');\n{<cal::local_date>'2000-06-01'}\ndb> select cal::to_local_date(\n    '2000    JUN', 'FXYYYY MON');\nInternalServerError: invalid value \"   \" for \"MON\"\n```\n\n----------------------------------------\n\nTITLE: Creating Movie Table in SQL\nDESCRIPTION: SQL DDL command to create a Movie table that matches the structure expected by both the ORM and Gel.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"Movie\" (\n    id UUID PRIMARY KEY DEFAULT (...),\n    __type__ UUID NOT NULL DEFAULT (...),\n    title TEXT,\n    releaseYear INTEGER NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cloud SQL Postgres Instance\nDESCRIPTION: Commands to create and configure a Postgres instance on Cloud SQL with secure password handling.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/gcp.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo -n \"> \" && read -s PASSWORD\n$ gcloud sql instances create ${PROJECT}-postgres \\\n    --database-version=POSTGRES_17 \\\n    --edition=enterprise \\\n    --cpu=1 \\\n    --memory=3840MiB \\\n    --region=us-west2 \\\n    --project=$PROJECT\n$ gcloud sql users set-password postgres \\\n    --instance=${PROJECT}-postgres \\\n    --password=$PASSWORD \\\n    --project=$PROJECT\n```\n\n----------------------------------------\n\nTITLE: Modifying Dockerfile to Use Build Secrets in Fly.io\nDESCRIPTION: Dockerfile modifications to mount GEL_INSTANCE and GEL_SECRET_KEY as build secrets. This enables access to these environment variables during the build process for applications that require them at build time.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/cloud/deploy/fly.rst#2025-04-16_snippet_1\n\nLANGUAGE: dockerfile-diff\nCODE:\n```\n# Build application\n-  RUN pnpm run build\n+  RUN --mount=type=secret,id=GEL_INSTANCE \\\n+      --mount=type=secret,id=GEL_SECRET_KEY \\\n+      GEL_INSTANCE=\"$(cat /run/secrets/GEL_INSTANCE)\" \\\n+      GEL_SECRET_KEY=\"$(cat /run/secrets/GEL_SECRET_KEY)\" \\\n+      pnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using the gel ui Command\nDESCRIPTION: The basic syntax for the 'gel ui' command to open the Gel UI in your default browser. The UI provides a graphical interface for managing and querying your Gel database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_ui.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel ui [<options>]\n```\n\n----------------------------------------\n\nTITLE: Installing Gel CLI on Windows using PowerShell\nDESCRIPTION: Shows the PowerShell command to install the Gel CLI on Windows systems. This provides Windows users with an equivalent installation method to the curl-based approach used on Unix-like systems.\nSOURCE: https://github.com/geldata/gel/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS> iwr https://geldata.com/ps1 -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Using gel cloud secretkey create Command\nDESCRIPTION: Command syntax for creating a new secret key in Gel Cloud. This command requires prior authentication using 'gel cloud login' and supports various options for customizing the key properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_cloud/gel_cloud_secretkey/edgedb_cloud_secretkey_create.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel cloud secretkey create [<options>]\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with Different Volatilities in EdgeDB SDL\nDESCRIPTION: This snippet demonstrates the definition of four functions with different volatilities in EdgeDB Schema Definition Language (SDL). It includes an immutable function, a stable function using a global, a volatile function using a random value, and a modifying function that inserts data.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/volatility.rst#2025-04-16_snippet_0\n\nLANGUAGE: sdl\nCODE:\n```\n# Immutable\nfunction plus_primitive(x: float64) -> float64\n    using (x + 1);\n\n# Stable\nglobal one := 1;\nfunction plus_global(x: float64) -> float64\n    using (x + one);\n\n# Volatile\nfunction plus_random(x: float64) -> float64\n    using (x + random());\n\n# Modifying\ntype One {\n    val := 1;\n};\nfunction plus_insert(x: float64) -> float64\n    using (x + (insert One).val);\n```\n\n----------------------------------------\n\nTITLE: Checking Geometric Disjointness in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_disjoint function to check if two geometries are disjoint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_61\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::disjoint( \\\n                    geom1: ext::postgis::geometry, \\\n                    geom2: ext::postgis::geometry, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Coalesce operator with empty set in EdgeQL\nDESCRIPTION: This example demonstrates the coalesce (??) operator, which avoids short-circuiting with empty sets due to optional inputs.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/cardinality.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select <str>{} ?? 'default';\n{'default'}\n```\n\n----------------------------------------\n\nTITLE: Using Savepoints in EdgeQL Transaction\nDESCRIPTION: An example demonstrating how to use savepoints within a transaction in EdgeQL. It shows inserting objects, creating a savepoint, inserting more objects, and then rolling back to the savepoint.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/tx_sp_declare.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\n# Will select no objects:\nselect test::TestObject { name };\n\nstart transaction;\n\n    insert test::TestObject { name := 'q1' };\n    insert test::TestObject { name := 'q2' };\n\n    # Will select two TestObjects with names 'q1' and 'q2'\n    select test::TestObject { name };\n\n    declare savepoint f1;\n        insert test::TestObject { name:='w1' };\n\n        # Will select three TestObjects with names\n        # 'q1' 'q2', and 'w1'\n        select test::TestObject { name };\n    rollback to savepoint f1;\n\n    # Will select two TestObjects with names 'q1' and 'q2'\n    select test::TestObject { name };\n\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Real Number Literals in EdgeQL\nDESCRIPTION: This snippet illustrates various real number literals in EdgeQL, including float64, explicit casts to float32, and decimal literals with unlimited precision.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/lexical.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select 0.1;\n{0.1}\n\ndb> select 12.3;\n{12.3}\n\ndb> select 1e3;\n{1000.0}\n\ndb> select 1.2e-3;\n{0.0012}\n\ndb> select <float32>12.3;\n{12.3}\n\ndb> select 12.3n;\n{12.3n}\n\ndb> select 12345678901234567890.12345678901234567890n;\n{12345678901234567890.12345678901234567890n}\n\ndb> select 12345678901234567890.12345678901234567890e-3n;\n{12345678901234567.89012345678901234567890n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting schema::Operator Structure in EdgeQL\nDESCRIPTION: This query examines the structure of the schema::Operator type, showing its links and properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/operators.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect ObjectType {\n    name,\n    links: {\n        name,\n    },\n    properties: {\n        name,\n    }\n}\nfilter .name = 'schema::Operator';\n```\n\n----------------------------------------\n\nTITLE: Viewing Annotations with REPL Command in EdgeDB\nDESCRIPTION: This snippet shows how to view annotations using the EdgeDB REPL command '\\d -v'. It displays the full type definition of 'Label', including its annotations, links, and properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/annotations.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> \\d -v Label\ntype default::Label {\n    annotation std::description := 'Special label to stick on reviews';\n    required single link __type__: schema::ObjectType {\n        readonly := true;\n    };\n    optional single link review: default::Review {\n        annotation std::description := 'This review needs some attention';\n    };\n    required single property comments: std::str;\n    required single property id: std::uuid {\n        readonly := true;\n        constraint std::exclusive;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsValid Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsValid function which tests if a geometry is valid according to the OGC rules. The function supports an optional flag parameter to control validation behavior.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_129\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::isvalid( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n                  ext::postgis::isvalid( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::int64, \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Ordering and Limiting Query Results in EdgeQL\nDESCRIPTION: This query demonstrates the use of filter, order by, and limit clauses in a select statement. It retrieves the top 3 open issues with the closest due date, showcasing how to combine multiple clauses for complex queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/select.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nselect Issue {\n    number,\n    body,\n    due_date\n}\nfilter\n    exists Issue.due_date\n    and\n    Issue.status.name = 'Open'\norder by\n    Issue.due_date\nlimit 3;\n```\n\n----------------------------------------\n\nTITLE: Counting Sub-Geometries in EdgeQL\nDESCRIPTION: Returns the number of geometries in a multi-geometry. This function exposes the PostGIS st_numgeometries function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_189\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::numgeometries( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::int64\n```\n\n----------------------------------------\n\nTITLE: Introspecting Function Return Tuple Type\nDESCRIPTION: Shows how to introspect the tuple return type of the sys::get_version function, including its element types and structure.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/introspection/colltypes.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module schema\nselect `Function` {\n    return_type[is Tuple]: {\n        element_types: {\n            name,\n            type: { name }\n        } order by .num\n    }\n}\nfilter .name = 'sys::get_version';\n```\n\n----------------------------------------\n\nTITLE: Exposing ST_IsPolygonCW Function in EdgeDB\nDESCRIPTION: Wraps the PostGIS ST_IsPolygonCW function which tests if polygons have exterior rings oriented clockwise and interior rings oriented counter-clockwise.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_126\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::ispolygoncw( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  std::bool\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in EdgeQL Select Statement\nDESCRIPTION: This example shows how to use the limit clause in a select statement to ensure that only one result is returned. It's useful when you expect a single result or want to handle multiple matches gracefully.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/select.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nselect User {\n    name,\n    owned := (select\n        User.<owner[is Issue] {\n            number,\n            body\n        }\n    )\n}\nfilter User.name like 'Alice%'\nlimit 1;\n```\n\n----------------------------------------\n\nTITLE: Creating MultiLineString from WKB in EdgeQL\nDESCRIPTION: Creates a MultiLineString geometry from WKB (Well-Known Binary) representation. This function exposes the PostGIS st_multilinefromwkb function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_177\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::multilinefromwkb( \\\n                    a0: std::bytes \\\n                  ) -> optional ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Using PostGIS Extension in SDL\nDESCRIPTION: Declaring PostGIS standalone extension in schema\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/extensions.rst#2025-04-16_snippet_2\n\nLANGUAGE: sdl\nCODE:\n```\nusing extension postgis;\n```\n\n----------------------------------------\n\nTITLE: Customizing Profile Decorators in Python\nDESCRIPTION: This example demonstrates how to customize the @profile decorator by specifying output directory and prefix for the generated .prof files. This allows for more granular control over profiling output for different functions.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/tools/profiling/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@profile(dir='/tmp/', prefix='specific_function_')\ndef specific_function() -> None:\n    ...\n\n@profile(dir='/tmp/', prefix='another_function_')\ndef another_function() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS addmeasure Function in EdgeQL\nDESCRIPTION: Exposes the PostGIS st_addmeasure function in EdgeQL. Takes a geometry and two float values as input, returns a geometry.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_1\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::addmeasure( \\\n                    a0: ext::postgis::geometry, \\\n                    a1: std::float64, \\\n                    a2: std::float64, \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Examining Vector Config in EdgeQL\nDESCRIPTION: Shows how to check the current configuration values for vector search parameters like probes and ef_search using the extensions link of the cfg::Config object.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgvector.rst#2025-04-16_snippet_9\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select cfg::Config.extensions[is ext::pgvector::Config]{*};\n{\n  ext::pgvector::Config {\n    id: 12b5c70f-0bb8-508a-845f-ca3d41103b6f,\n    probes: 1,\n    ef_search: 40,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DML Visibility Limitation in PostgreSQL\nDESCRIPTION: Example showing PostgreSQL's limitation where DML effects are not visible within the same query. The query attempts to select data from both the original table and the insertion results simultaneously.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/pgsql/compiler/ARCHITECTURE.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nWITH insert_result AS (INSERT INTO my_table(a) VALUES (1) RETURNING a)\nSELECT a FROM my_table, insert_result\n```\n\n----------------------------------------\n\nTITLE: Shaped User Query with Nested Friends\nDESCRIPTION: Query using shapes to structure the output with nested friend information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/shapes.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select User {\n    name,\n    friends: {\n        name\n    }\n};\n{\n  default::User {\n    name: 'Alice',\n    friends: {\n      default::User {name: 'Cameron'},\n      default::User {name: 'Dana'},\n    },\n  },\n  default::User {name: 'Billie', friends: {default::User {name: 'Dana'}}},\n  default::User {name: 'Cameron', friends: {}},\n  default::User {\n    name: 'Dana',\n    friends: {\n      default::User {name: 'Alice'},\n      default::User {name: 'Billie'},\n      default::User {name: 'Cameron'},\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: EdgeQL Query Path Reference Example\nDESCRIPTION: Demonstrates a query with multiple path references to illustrate how common prefixes are identified in the evaluation algorithm. Shows paths accessing User, Issue, and Status objects with various property references.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/eval.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nselect (\n  User.firstname,\n  User.friends.firstname,\n  User.friends.lastname,\n  Issue.priority.name,\n  Issue.number,\n  Status.name\n);\n```\n\n----------------------------------------\n\nTITLE: Enforcing Uniqueness with Exclusive Constraint in EdgeDB SDL\nDESCRIPTION: Shows how to use the 'exclusive' constraint to ensure uniqueness of property values and link sets across objects of the same type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_10\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n    # Make sure user names are unique.\n    required name: str {\n        constraint exclusive;\n    }\n    # Already indexed, don't need to do this:\n    # index on (.name)\n\n    # Make sure none of the \"owned\" items belong\n    # to any other user.\n    multi owns: Item {\n        constraint exclusive;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Repeated Points from Geometry in EQL\nDESCRIPTION: Removes repeated points from a geometry within a specified tolerance. This function exposes the PostGIS st_removerepeatedpoints functionality.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_223\n\nLANGUAGE: eql\nCODE:\n```\next::postgis::removerepeatedpoints( \\\n  geom: ext::postgis::geometry, \\\n  tolerance: std::float64 = 0.0, \\\n) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Installing Gel 6 on CentOS/RHEL\nDESCRIPTION: Yum command to install Gel 6 on CentOS/RHEL systems.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/upgrading.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo yum install gel-6\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Module in EdgeQL Query\nDESCRIPTION: Demonstrates how to use the 'with' block to specify a default module for a query, showing equivalent queries with and without explicit module references.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/with.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nselect User {\n    name,\n    owned := (select\n        User.<owner[is Issue] {\n            number,\n            body\n        }\n    )\n}\nfilter User.name like 'Alice%';\n\nselect example::User {\n    name,\n    owned := (select\n        example::User.<owner[is example::Issue] {\n            number,\n            body\n        }\n    )\n}\nfilter example::User.name like 'Alice%';\n```\n\n----------------------------------------\n\nTITLE: Executing GEL Instance Status Command in Bash\nDESCRIPTION: This command shows instance information for GEL. It can be used with various options to customize the output, such as filtering by instance name, formatting as JSON, showing extended debug info, or displaying service information.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_instance/gel_instance_status.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngel instance status [<options>] [<name>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with Toctree\nDESCRIPTION: Sphinx toctree directive that defines the documentation structure with maximum depth of 5 levels and hidden includes. Links to major documentation sections including intro, reference, resources and cloud documentation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 5\n    :includehidden:\n\n    intro/index\n    reference/index\n    resources/index\n    cloud/index\n```\n\n----------------------------------------\n\nTITLE: Querying User Data with Nested Select in EdgeQL\nDESCRIPTION: This snippet demonstrates a select statement that retrieves user data along with their owned issues. It uses a nested select to fetch related data and applies a filter on the user's name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/select.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nselect User {\n    name,\n    owned := (select\n        User.<owner[is Issue] {\n            number,\n            body\n        }\n    )\n}\nfilter User.name like 'Alice%';\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Comparison in EdgeQL\nDESCRIPTION: Shows two approaches to bulk updating user themes - first using a traditional update with conditional logic, then using a for statement for better readability and maintainability.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/for.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nupdate User\nfilter .name in {'Alice', 'Bob', 'Carol', 'Dave'}\nset {\n    theme := 'red'  if .name = 'Alice' else\n             'star' if .name = 'Bob' else\n             'dark' if .name = 'Carol' else\n             'strawberry'\n};\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\nfor x in {\n    (name := 'Alice', theme := 'red'),\n    (name := 'Bob', theme := 'star'),\n    (name := 'Carol', theme := 'dark'),\n    (name := 'Dave', theme := 'strawberry')\n}\nunion (\n    update User\n    filter .name = x.name\n    set {\n        theme := x.theme\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adjusting SVG Flame Graph Generation Parameters\nDESCRIPTION: This command demonstrates how to customize the SVG flame graph generation by adjusting the threshold and width parameters. This is useful for optimizing the size and detail of the generated graph for better browser performance.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/tools/profiling/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ edb perfviz --threshold=0.001 --width=1280\n```\n\n----------------------------------------\n\nTITLE: Generating Salt with Iteration Count Parameters\nDESCRIPTION: Demonstrates the use of iteration count parameter for algorithms that support it (bf and xdes). Higher iteration counts increase security but also processing time.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/pgcrypto.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nselect ext::pgcrypto::gen_salt('bf', 10);\nselect ext::pgcrypto::gen_salt('xdes', 5);\n```\n\n----------------------------------------\n\nTITLE: Range Type Descriptor Structure in C\nDESCRIPTION: Defines the binary structure for Range type descriptors, specifying range type information and inheritance.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/typedesc.rst#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstruct RangeTypeDescriptor {\n    // Indicates that this is a\n    // Range Type descriptor.\n    uint8   tag = 9;\n\n    // Schema type ID.\n    uuid    id;\n\n    // Schema type name.\n    string  name;\n\n    // Whether the type is defined in the schema\n    // or is ephemeral.\n    bool    schema_defined;\n\n    // Number of ancestor scalar types.\n    uint16  ancestors_count;\n\n    // Indexes of ancestor scalar type descriptors\n    // in ancestor resolution order (C3).\n    uint16  ancestors[ancestors_count];\n\n    // Range type descriptor index.\n    uint16  type;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Type with Maximum Magnitude Constraint (EdgeQL)\nDESCRIPTION: This example shows how to create a Vector type with x and y properties, and a constraint ensuring the vector's magnitude is less than 5.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/datamodel/constraints.rst#2025-04-16_snippet_15\n\nLANGUAGE: edgeql\nCODE:\n```\ncreate type Vector {\n  create required property x: float64;\n  create required property y: float64;\n  create constraint expression ON (\n    __subject__.x^2 + __subject__.y^2 < 25\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of incorrect query without detached in EdgeQL\nDESCRIPTION: This example shows a query that doesn't work because it's missing the detached operator, causing the User set to be bound to the filtered set.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_12\n\nLANGUAGE: edgeql\nCODE:\n```\n# does not work!\nupdate User\nfilter .name = 'Dave'\nset {\n    friends := (select User filter .name = 'Alice'),\n    coworkers := (select User filter .name = 'Bob')\n};\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeDB PostgreSQL Types\nDESCRIPTION: Defines PostgreSQL-specific types for EdgeDB including json, timestamp, and interval types.\nSOURCE: https://github.com/geldata/gel/blob/master/edb/api/types.txt#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n00000000-0000-0000-0000-000001000001 std::pg::json\n00000000-0000-0000-0000-000001000002 std::pg::timestamptz\n00000000-0000-0000-0000-000001000003 std::pg::timestamp\n00000000-0000-0000-0000-000001000004 std::pg::date\n00000000-0000-0000-0000-000001000005 std::pg::interval\n```\n\n----------------------------------------\n\nTITLE: Defining Parse Message Structure in EdgeDB Protocol\nDESCRIPTION: Specifies the format of the Parse message sent by the client to parse EdgeQL commands, including capabilities, compilation flags, and output format.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_13\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.Parse\n\n.. eql:struct:: edb.protocol.Capability\n\n.. eql:struct:: edb.protocol.Annotation\n\n.. eql:struct:: edb.protocol.CompilationFlag\n\n.. eql:struct:: edb.protocol.OutputFormat\n\n.. eql:struct:: edb.protocol.enums.Cardinality\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Schema Definition Example\nDESCRIPTION: Sample EdgeDB schema with Person and Movie types demonstrating inheritance, links, link properties, and multi-properties.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/sql_adapter.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n    type Person {\n        name: str;\n    };\n\n    type Movie extending common::Content {\n        release_year: int32;\n        director: Person;\n        star: Person {\n            role: str;\n        };\n        multi actors: Person {\n            role: str;\n        };\n        multi labels: str;\n    };\n}\nmodule common {\n    type Content {\n        title: str;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Parameter Grouping\nDESCRIPTION: Groups movies by multiple parameters (vowel start and decade) demonstrating complex grouping patterns.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/group.rst#2025-04-16_snippet_4\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  M := (select Movie filter .release_year > 2015),\n  groups := (\n    group M {title}\n    using\n      vowel := re_test('(?i)^[aeiou]', .title),\n      decade := .release_year // 10\n    by vowel, decade\n  )\nselect groups {\n  key := .key {vowel, decade},\n  count := count(.elements),\n  mean_title_length :=\n    math::mean(len(.elements.title))\n};\n```\n\n----------------------------------------\n\nTITLE: Structure Definition for std::bigint in EdgeDB Protocol\nDESCRIPTION: C structure definition for std::bigint values. The structure includes fields for number of digits, weight, sign, a reserved field, and the base-10000 digits array representing the value.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nstruct BigInt {\n    // Number of digits in digits[], can be 0.\n    uint16               ndigits;\n\n    // Weight of first digit.\n    int16                weight;\n\n    // Sign of the value\n    uint16<DecimalSign>  sign;\n\n    // Reserved value, must be zero\n    uint16               reserved;\n\n    // base-10000 digits.\n    uint16                digits[ndigits];\n};\n\nenum BigIntSign {\n    // Positive value.\n    POS     = 0x0000;\n\n    // Negative value.\n    NEG     = 0x4000;\n};\n```\n\n----------------------------------------\n\nTITLE: Insert or Update Person Using Unless Conflict in EdgeQL\nDESCRIPTION: Shows how to use the unless conflict clause to either insert a new Person object or update an existing one based on the name.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/insert.rst#2025-04-16_snippet_6\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module people\nselect (\n    insert Person {\n        name := \"Łukasz Langa\", is_admin := true\n    }\n    unless conflict on .name\n    else (\n        update Person\n        set { is_admin := true }\n    )\n) {\n    name,\n    is_admin\n};\n```\n\n----------------------------------------\n\nTITLE: Using if-then-else for conditional object creation in EdgeQL\nDESCRIPTION: The if-then-else expression can be used to conditionally create different types of objects based on a boolean flag.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/set.rst#2025-04-16_snippet_8\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n  name := <str>$0,\n  admin := <bool>$1\nselect if admin then (\n    insert AdminUser { name := name }\n) else (\n    insert User { name := name }\n)\n```\n\n----------------------------------------\n\nTITLE: Describing Movie Type Schema in EdgeDB DDL\nDESCRIPTION: Shows the DDL definition of a Movie type that extends HasImage, including an average rating property calculation.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql\nCODE:\n```\nCREATE TYPE default::Movie EXTENDING default::HasImage {\n  CREATE SINGLE PROPERTY avg_rating := (WITH\n    MODULE default\n  SELECT\n    math::mean(.<movie[is Review].rating)\n  );\n\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Module Aliases in EdgeQL With Block\nDESCRIPTION: Shows how to define module aliases in the 'with' block, useful for comparing objects from different modules or creating shortcuts for long module names.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/with.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    module example,\n    f as module foo\nselect User {\n    name\n}\nfilter .name = f::Foo.name;\n```\n\nLANGUAGE: edgeql\nCODE:\n```\nwith\n    module example,\n    fbz as module foo.bar.baz\nselect User {\n    name\n}\nfilter .name = fbz::Baz.name;\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Codes Definition\nDESCRIPTION: Defines suggested error codes for client implementations including connection errors and interface issues\nSOURCE: https://github.com/geldata/gel/blob/master/edb/api/errors.txt#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n0x_FF_00_00_00   ClientError\n0x_FF_01_00_00   ClientConnectionError\n0x_FF_01_01_00   ClientConnectionFailedError\n0x_FF_02_00_00   InterfaceError\n0x_FF_03_00_00   NoDataError\n0x_FF_04_00_00   InternalClientError\n```\n\n----------------------------------------\n\nTITLE: Configuring State Management in EdgeDB Client\nDESCRIPTION: Class definition for State that manages execution context including default module, module aliases, session config and global values.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/python/api/advanced.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass State(default_module=None, module_aliases={}, config={}, globals_={}): \n```\n\n----------------------------------------\n\nTITLE: Executing Gel Migration Create Command\nDESCRIPTION: This snippet shows the basic syntax for running the 'gel migration create' command. It initiates an interactive tool for creating migration scripts based on schema differences.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_migration/gel_migration_create.rst#2025-04-16_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\ngel migration create [<options>]\n```\n\n----------------------------------------\n\nTITLE: Re-enabling DDL After EdgeDB Upgrade\nDESCRIPTION: Command to reset the force_database_error configuration after successfully completing the in-place upgrade, which re-enables DDL commands that were disabled during the upgrade process.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/inplace-upgrades.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nedgedb query 'configure instance reset force_database_error'\n```\n\n----------------------------------------\n\nTITLE: PostGIS Constraint and Typmod Functions in EdgeQL\nDESCRIPTION: Functions for working with PostGIS geometry constraints and type modifiers, including dimension, SRID, and type information retrieval.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_213\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_constraint_dims(\n                    geomschema: std::str, \n                    geomtable: std::str, \n                    geomcolumn: std::str, \n                  ) ->  std::int64\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_constraint_srid(\n                    geomschema: std::str, \n                    geomtable: std::str, \n                    geomcolumn: std::str, \n                  ) ->  std::int64\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_typmod_dims(\n                    a0: std::int64 \n                  ) ->  std::int64\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_typmod_srid(\n                    a0: std::int64 \n                  ) ->  std::int64\n```\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::postgis_typmod_type(\n                    a0: std::int64 \n                  ) ->  std::str\n```\n\n----------------------------------------\n\nTITLE: Defining empty default schema for Gel\nDESCRIPTION: This SDL (Schema Definition Language) file (dbschema/default.gel) contains an empty default module, serving as a placeholder for the future data model.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/setup/nextjs.rst#2025-04-16_snippet_4\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum String Length with Min_len_value Constraint in EdgeDB SDL\nDESCRIPTION: Illustrates the use of 'min_len_value' constraint to specify the minimum allowed length for a string-based scalar type 'EmailAddress'.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/constraints.rst#2025-04-16_snippet_8\n\nLANGUAGE: sdl\nCODE:\n```\nscalar type EmailAddress extending str {\n    constraint min_len_value(3);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Query with Names and Friends\nDESCRIPTION: Simple query returning user names and their friends' names as tuples.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/shapes.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select (User.name, User.friends.name ?? '');\n{\n  ('Alice', 'Cameron'),\n  ('Alice', 'Dana'),\n  ('Billie', 'Dana'),\n  ('Cameron', ''),\n  ('Dana', 'Alice'),\n  ('Dana', 'Billie'),\n  ('Dana', 'Cameron'),\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Update with Backlinks\nDESCRIPTION: Updates the schema to include backlink definitions for User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/paths.rst#2025-04-16_snippet_6\n\nLANGUAGE: sdl\nCODE:\n```\ntype User {\n  required email: str;\n  multi friends: User;\n  all_links := .<author;\n  blog_links := .<author[is BlogPost];\n  comment_links := .<author[is Comment];\n}\n\ntype BlogPost {\n  required title: str;\n  required author: User;\n}\ntype Comment {\n  required text: str;\n  required author: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Gel Interfaces Generator in TypeScript\nDESCRIPTION: Shows how to use the interfaces generator to create TypeScript interfaces for database object types and use them in queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/js/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\nimport { Movie } from \"./dbschema/interfaces\";\n\nconst client = createClient();\n\nconst result = await client.query<Movie[]>(`\n  select Movie {\n    **,\n    actors: { ** },\n  };\n`);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: UUID to Object Casting in EdgeQL\nDESCRIPTION: Shows how to cast a UUID to an object type and demonstrates error handling for non-existent objects.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/casts.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <Hero><uuid>'01d9cc22-b776-11ed-8bef-73f84c7e91e7';\n{default::Hero {id: 01d9cc22-b776-11ed-8bef-73f84c7e91e7}}\n```\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <Hero><uuid>'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';\ngel error: CardinalityViolationError: 'default::Hero' with id 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa' does not exist\n```\n\n----------------------------------------\n\nTITLE: Encoding std::duration in EdgeDB Protocol\nDESCRIPTION: Binary encoding example for std::duration value '48 hours 45 minutes 7.6 seconds'. The data is encoded as microseconds followed by days and months values (which are always zero in this type).\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/dataformats.rst#2025-04-16_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n// microseconds\n0x00 0x00 0x00 0x28 0xdd 0x11 0x72 0x80\n\n// days\n0x00 0x00 0x00 0x00\n\n// months\n0x00 0x00 0x00 0x00\n```\n\n----------------------------------------\n\nTITLE: Instance Upgrade Commands for EdgeDB RC3\nDESCRIPTION: Sequence of commands to upgrade a standalone EdgeDB instance to RC3, including backup, instance recreation, and data restoration.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_rc3.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gel dump -I my_instance --all --format=dir ./my_instance_backup\n$ gel instance destroy my_instance\n$ gel instance create my_instance\n$ gel restore -I my_instance --admin --all ./my_instance_backup\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Pagination Arguments\nDESCRIPTION: This snippet shows the structure of pagination arguments in a GraphQL query, including filter, order, and pagination parameters.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/graphql/graphql.rst#2025-04-16_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n    Author(\n        filter: FilterAuthor,\n        order: OrderAuthor,\n\n        after: String,\n        before: String,\n        first: Int,\n        last: Int,\n    ): [Author!]\n\n    # ... other Query fields\n}\n```\n\n----------------------------------------\n\nTITLE: Copying with FREEZE in PostgreSQL for Improved Restore Performance\nDESCRIPTION: This SQL snippet uses the COPY command with the FREEZE option to improve the performance of data restoration in PostgreSQL.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/6_x.rst#2025-04-16_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCOPY ... FREEZE\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: Sets up a hidden table of contents with links to NextJS and FastAPI implementation guides with a maximum depth of 3 levels.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/intro/quickstart/inheritance/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :maxdepth: 3\n  :hidden:\n\n  nextjs\n  fastapi\n```\n\n----------------------------------------\n\nTITLE: Generating Gel Query Builder\nDESCRIPTION: Command to generate the TypeScript query builder for Gel database\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/nextjs_pages_router.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @gel/generate edgeql-js\n```\n\n----------------------------------------\n\nTITLE: Inserting an Issue with Nested User Selection in EdgeQL\nDESCRIPTION: Shows how to insert an Issue object while selecting an existing User as its owner.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/insert.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\ninsert Issue {\n    number := '100',\n    body := 'Fix errors in insert',\n    owner := (\n        select User filter User.name = 'Bob Johnson'\n    )\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Statistics for Specific Type in EdgeDB (EdgeQL)\nDESCRIPTION: This snippet demonstrates how to update statistics for a specific type named 'SomeType' using the 'administer statistics_update()' function.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/admin/statistics_update.rst#2025-04-16_snippet_0\n\nLANGUAGE: edgeql\nCODE:\n```\nadminister statistics_update(SomeType);\n```\n\n----------------------------------------\n\nTITLE: Defining LogMessage Structure in EdgeDB Protocol\nDESCRIPTION: Specifies the format of the LogMessage sent by the server, including message severity and reference to possible log message codes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_1\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.LogMessage\n\n.. eql:struct:: edb.protocol.MessageSeverity\n```\n\n----------------------------------------\n\nTITLE: Implicit Cast with Function Arguments\nDESCRIPTION: Shows implicit type casting when passing arguments to functions that expect different numeric types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/casts.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> with x := <float32>12.34\n... select math::ceil(x);\n{13}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in EdgeQL\nDESCRIPTION: Demonstrates how to set and use global variables in EdgeQL queries.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/sess_set_alias.rst#2025-04-16_snippet_2\n\nLANGUAGE: edgeql\nCODE:\n```\n# Set the global variable \"current_user_id\".\nset global current_user_id :=\n    <uuid>'00ea8eaa-02f9-11ed-a676-6bd11cc6c557';\n\n# We can now use that value in a query.\nselect User { name }\nfilter .id = global current_user_id;\n```\n\n----------------------------------------\n\nTITLE: Full-text Search Query Example\nDESCRIPTION: EdgeQL query demonstrating how to perform full-text search and order results by relevance score.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/4_x.rst#2025-04-16_snippet_3\n\nLANGUAGE: edgeql\nCODE:\n```\nwith res := (\n  select fts::search(Item, 'candy corn', language := 'eng')\n)\nselect res.object {name, score := res.score}\norder by res.score desc;\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Signing Key in EdgeDB\nDESCRIPTION: EdgeQL command to set the authentication signing key for the current branch.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/rest_apis_with_fastapi.rst#2025-04-16_snippet_30\n\nLANGUAGE: edgeql\nCODE:\n```\nCONFIGURE CURRENT BRANCH SET\next::auth::AuthConfig::auth_signing_key := '<your-generated-key>';\n```\n\n----------------------------------------\n\nTITLE: Equivalent SELECT-based Delete Query\nDESCRIPTION: Shows the same deletion operation using the explicit select syntax, which is equivalent to the simpler delete statement above.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/delete.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\ndelete (select User\n        filter User.name = 'Alice Smith');\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Gel Version\nDESCRIPTION: Command example demonstrating how to initialize a Gel project with a specific version number using the equals sign prefix\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel_project/gel_project_init.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gel project init --server-version =6.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Passwordless Access in EdgeDB\nDESCRIPTION: Configures trust-based authentication for passwordless access with priority 1.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/admin.rst#2025-04-16_snippet_5\n\nLANGUAGE: edgeql-repl\nCODE:\n```\nconfigure instance insert Auth {\n    # Human-oriented comment helps figuring out\n    # what authentication methods have been setup\n    # and makes it easier to identify them.\n    comment := 'passwordless access',\n    priority := 1,\n    method := (insert Trust),\n};\n```\n\n----------------------------------------\n\nTITLE: Executing EdgeQL Script via Pipe on Unix/Linux\nDESCRIPTION: Command to execute an EdgeQL script file by piping it into the Gel shell in non-interactive mode\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/using/cli/gel.rst#2025-04-16_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\ncat myscript.edgeql | gel [<connection-option>...]\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare Worker Project with NPM\nDESCRIPTION: Creates a new Cloudflare Worker project using the create-cloudflare package. It guides the user through the setup process and provides options for immediate deployment.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/cloudflare_workers.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm create cloudflare@latest # or pnpm, yarn, bun\n\n# or\n$ npx create-cloudflare@latest\n```\n\n----------------------------------------\n\nTITLE: Forcing Geometry Collection in PostGIS using EdgeQL\nDESCRIPTION: Exposes the PostGIS st_forcecollection function to force a geometry into a GeometryCollection.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/postgis.rst#2025-04-16_snippet_81\n\nLANGUAGE: EdgeQL\nCODE:\n```\next::postgis::forcecollection( \\\n                    a0: ext::postgis::geometry \\\n                  ) ->  ext::postgis::geometry\n```\n\n----------------------------------------\n\nTITLE: Array and Set Conversion in EdgeQL\nDESCRIPTION: Demonstrates conversion between arrays and sets using array_unpack and array_agg functions.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/edgeql/sets.rst#2025-04-16_snippet_13\n\nLANGUAGE: edgeql\nCODE:\n```\nselect array_unpack([1,2,3]);\nselect array_agg({1,2,3});\nselect str_trim({'  hello', 'world  '});\nselect str_trim(['  hello', 'world  ']);\n```\n\n----------------------------------------\n\nTITLE: Changelog Generation Command\nDESCRIPTION: Command to run the changelog generation script and append output to changelog file.\nSOURCE: https://github.com/geldata/gel/blob/master/dev-notes/release-process.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython ../compose-changelog.py v4.5 v4.6 >> docs/changelog/4_x.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring Listen Port\nDESCRIPTION: Command to change the server's listen port\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/running/deployment/bare_metal.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ gel --port 5656 --tls-security insecure --password query \\\n   \"CONFIGURE INSTANCE SET listen_port := 1234;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Message Structure in EdgeDB Protocol\nDESCRIPTION: Defines the structure of the Sync message sent by the client to provide an explicit synchronization point.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/protocol/messages.rst#2025-04-16_snippet_8\n\nLANGUAGE: eql\nCODE:\n```\n.. eql:struct:: edb.protocol.Sync\n```\n\n----------------------------------------\n\nTITLE: Querying Character Data with description Property in EdgeDB\nDESCRIPTION: An EdgeQL query demonstrating how to select character names and descriptions from the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/tips.rst#2025-04-16_snippet_14\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select Character {name, description};\n{\n  default::Character {name: 'Alice', description: 'Tall and strong'},\n  default::Character {name: 'Billie', description: 'Smart and aloof'},\n  default::Character {name: 'Cameron', description: 'Dashing and smooth'},\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Pi Value in EdgeQL\nDESCRIPTION: Shows how to use math::pi() function to get the value of pi.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/math.rst#2025-04-16_snippet_11\n\nLANGUAGE: edgeql\nCODE:\n```\ndb> select math::pi();\n{3.141592653589793}\n```\n\n----------------------------------------\n\nTITLE: Inserting a New User in EdgeQL\nDESCRIPTION: Demonstrates a simple insert statement to create a new User object in the example module.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/reference/edgeql/insert.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql\nCODE:\n```\nwith module example\ninsert User {\n    name := 'Bob Johnson'\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Property to User Schema in SDL\nDESCRIPTION: This snippet demonstrates how to add a new 'number' property of type int32 to the existing User type.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_27\n\nLANGUAGE: sdl\nCODE:\n```\nmodule default {\n  type User {\n    name: str;\n    number: int32;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB 5 on CentOS/RHEL\nDESCRIPTION: Command to install EdgeDB version 5 on CentOS/RHEL systems.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/5_x.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo yum install edgedb-5\n```\n\n----------------------------------------\n\nTITLE: EdgeDB Watch Command Output\nDESCRIPTION: Shows the output when starting the 'gel watch --migrate' command, which monitors schema file changes and automatically applies them to the database.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/migrations/guide.rst#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nConnecting to Gel instance 'anything' at localhost:10700...\nHint: --migrate will apply any changes from your schema files to the database.\nWhen ready to commit your changes, use:\n1) `gel migration create` to write those changes to a migration file,\n2) `gel migrate --dev-mode` to replace all synced changes with the migration.\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Document Structure\nDESCRIPTION: Basic RST document structure showing section headers and toctree directive for organizing contribution guidelines\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _ref_guide_contributing:\n\n============\nContributing\n============\n\n:edb-alt-title: Contributing to Gel\n\n|Gel| is an open-source project, and we welcome contributions from our\ncommunity. You can contribute by writing code or by helping us improve our\ndocumentation.\n\n.. toctree::\n    :maxdepth: 1\n\n    code\n    documentation\n```\n\n----------------------------------------\n\nTITLE: Rendering List Table in reStructuredText\nDESCRIPTION: Example showing how to create a list table in reStructuredText to display data types.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/contributing/documentation.rst#2025-04-16_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. list-table::\n\n    * - Arrays\n      - ``array<str>``\n    * - Tuples (unnamed)\n      - ``tuple<str, int64, bool>``\n    * - Tuples (named)\n      - ``tuple<name: str, age: int64, is_awesome: bool>``\n    * - Ranges\n      - ``range<float64>``\n```\n\n----------------------------------------\n\nTITLE: Retrieving Annotations with Introspection Query in EdgeDB\nDESCRIPTION: This snippet demonstrates how to retrieve annotations using an introspection query in EdgeDB. It shows how to select the name, annotations, and links of the 'Label' type, including their associated annotations.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/cheatsheets/annotations.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select introspect(Label) {\n...     name,\n...     annotations: {name, @value},\n...     links: {name, annotations: {name, @value}}\n... };\n{\n    schema::ObjectType {\n        name: 'default::Label',\n        annotations: {\n            schema::Annotation {\n                name: 'std::description',\n                @value: 'Special label to stick on reviews'\n            },\n        },\n        links: {\n            schema::Link {\n                name: '__type__',\n                annotations: {}\n            },\n            schema::Link {\n                name: 'review',\n                annotations: {\n                    schema::Annotation {\n                        name: 'std::description',\n                        @value: 'This review needs some attention',\n                    },\n                },\n            },\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: EdgeDB REPL Type Listing Example\nDESCRIPTION: Demonstrates REPL commands for listing object types with their inheritance relationships.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/changelog/1_0_a2.rst#2025-04-16_snippet_7\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> \\lt\n------------------- Object Types -------------------\n Name              | Extending\n-------------------+--------------------------------\n default::HasImage | std::Object\n default::Movie    | default::HasImage, std::Object\n default::Person   | default::HasImage, std::Object\n default::Review   | std::Object\n default::User     | default::HasImage, std::Object\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to JSON in EdgeQL\nDESCRIPTION: Demonstration of how bytes are represented as base64-encoded strings when cast to JSON, and how to cast JSON back to bytes.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/reference/stdlib/bytes.rst#2025-04-16_snippet_1\n\nLANGUAGE: edgeql-repl\nCODE:\n```\ndb> select <json>b'Hello Gel!';\n{\"\\\"SGVsbG8gRWRnZURCIQ==\"\"}\ndb> select <bytes>to_json(\"\\\"SGVsbG8gRWRnZURCIQ==\"\");\n{b'Hello Gel!'}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gel Client and Auth for Express\nDESCRIPTION: TypeScript code snippet showing the initialization of Gel client and Gel Auth for Express applications.\nSOURCE: https://github.com/geldata/gel/blob/master/docs/resources/guides/tutorials/trpc.rst#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"gel\";\n```"
  }
]