[
  {
    "owner": "taskforcesh",
    "repo": "bullmq",
    "content": "TITLE: Creating a Worker with a Sandboxed Processor in TypeScript\nDESCRIPTION: Instantiates a worker that uses a processor defined in a separate file. This creates a sandboxed environment where the processor runs in its own process, isolated from the main application.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst processorFile = path.join(__dirname, 'my_procesor.js');\nworker = new Worker(queueName, processorFile);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Worker and Processing Jobs in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Worker instance and define an asynchronous process function to handle jobs. It also shows how to update job progress and return a value.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker, Job } from 'bullmq';\n\nconst worker = new Worker(queueName, async (job: Job) => {\n  // Optionally report some progress\n  await job.updateProgress(42);\n\n  // Optionally sending an object as progress\n  await job.updateProgress({ foo: 'bar' });\n\n  // Do something with job\n  return 'some value';\n});\n```\n\n----------------------------------------\n\nTITLE: Handling BullMQ Queue Events\nDESCRIPTION: TypeScript example showing how to listen for job completion and failure events using QueueEvents.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/README.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueEvents } from 'bullmq';\n\nconst queueEvents = new QueueEvents('Paint');\n\nqueueEvents.on('completed', ({ jobId }) => {\n  console.log('done painting');\n});\n\nqueueEvents.on(\n  'failed',\n  ({ jobId, failedReason }: { jobId: string; failedReason: string }) => {\n    console.error('error painting', failedReason);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Job to BullMQ Queue\nDESCRIPTION: Demonstrates how to add a basic job to a queue with a name and payload. The job 'paint' is added with a payload containing a color property.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait queue.add('paint', { color: 'red' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown for BullMQ Workers\nDESCRIPTION: Demonstrates how to implement graceful shutdown handling for BullMQ workers using SIGINT and SIGTERM signals.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/going-to-production.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst gracefulShutdown = async (signal) => {\n  console.log(`Received ${signal}, closing server...`);\n  await worker.close();\n  // Other asynchronous closings\n  process.exit(0);\n}\n\nprocess.on('SIGINT', () => gracefulShutdown('SIGINT'));\n\nprocess.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\n```\n\n----------------------------------------\n\nTITLE: Creating a Queue and Adding Jobs in TypeScript\nDESCRIPTION: This snippet demonstrates how to import BullMQ, create a new queue, and add jobs to it asynchronously. It creates a queue named 'foo' and adds two jobs with different data payloads.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/README (1).md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('foo');\n\nasync function addJobs() {\n  await myQueue.add('myJobName', { foo: 'bar' });\n  await myQueue.add('myJobName', { qux: 'baz' });\n}\n\nawait addJobs();\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Events in TypeScript\nDESCRIPTION: This snippet illustrates how to listen for various events emitted by a Worker, including 'completed', 'progress', and 'failed' events. It demonstrates how to access job information and return values in the event handlers.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nworker.on('completed', (job: Job, returnvalue: any) => {\n  // Do something with the return value.\n});\n\nworker.on('progress', (job: Job, progress: number | object) => {\n  // Do something with the return value.\n});\n\nworker.on('failed', (job: Job | undefined, error: Error, prev: string) => {\n  // Do something with the return value.\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flow in TypeScript\nDESCRIPTION: Example of creating a flow with a parent job and three child jobs using FlowProducer in TypeScript. The parent job depends on the completion of all three child jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FlowProducer } from 'bullmq';\n\n// A FlowProducer constructor takes an optional \"connection\"\n// object otherwise it connects to a local redis instance.\nconst flowProducer = new FlowProducer();\n\nconst flow = await flowProducer.add({\n  name: 'renovate-interior',\n  queueName: 'renovate',\n  children: [\n    { name: 'paint', data: { place: 'ceiling' }, queueName: 'steps' },\n    { name: 'paint', data: { place: 'walls' }, queueName: 'steps' },\n    { name: 'fix', data: { place: 'floor' }, queueName: 'steps' },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Global Queue Events in TypeScript\nDESCRIPTION: This example demonstrates how to use QueueEvents to listen for global events across all workers, including job completions, failures, and progress updates. It shows how to access relevant information for each event type.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/README.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueEvents } from 'bullmq';\n\nconst queueEvents = new QueueEvents('Paint');\n\nqueueEvents.on('completed', ({ jobId: string, returnvalue: any }) => {\n  // Called every time a job is completed by any worker.\n});\n\nqueueEvents.on('failed', ({ jobId: string, failedReason: string }) => {\n  // Called whenever a job is moved to failed by any worker.\n});\n\nqueueEvents.on('progress', ({jobId: string, data: number | object}) => {\n  // jobId received a progress event\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Event Trimming in BullMQ with Python\nDESCRIPTION: Example of how to manually trim the event stream in a BullMQ queue using Python. The trimEvents method works similarly to the TypeScript version, limiting the stored events in Redis streams.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/events/README.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Queue\n\nqueue = Queue('paint')\n\nawait queue.trimEvents(10) # leaves 10 events\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Events in BullMQ with TypeScript\nDESCRIPTION: This example shows how to create a Worker and listen for 'drained', 'completed', and 'failed' events. These events are local to the worker that processed the jobs and provide job status information.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/events/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\n\nconst myWorker = new Worker('Paint');\n\nmyWorker.on('drained', () => {\n  // Queue is drained, no more jobs left\n});\n\nmyWorker.on('completed', (job: Job) => {\n  // job has completed\n});\n\nmyWorker.on('failed', (job: Job) => {\n  // job has failed\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up a Worker to Process Jobs in TypeScript\nDESCRIPTION: This code sets up a worker to process jobs from the 'foo' queue. It uses IORedis for the connection and logs the job data. The worker will process jobs in the order they were added to the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/README (1).md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\nimport IORedis from 'ioredis';\n\nconst connection = new IORedis({ maxRetriesPerRequest: null });\n\nconst worker = new Worker(\n  'foo',\n  async job => {\n    // Will print { foo: 'bar'} for the first job\n    // and { qux: 'baz' } for the second.\n    console.log(job.data);\n  },\n  { connection },\n);\n```\n\n----------------------------------------\n\nTITLE: Using QueueEvents to Listen to Global Events in BullMQ\nDESCRIPTION: This snippet demonstrates how to use the QueueEvents class to listen to events from all workers in a centralized place. It shows handling both 'completed' and 'progress' events using Redis streams for reliable delivery.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/events/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueEvents } from 'bullmq';\n\nconst queueEvents = new QueueEvents('Paint');\n\nqueueEvents.on('completed', ({ jobId: string }) => {\n  // Called every time a job is completed in any worker.\n});\n\nqueueEvents.on(\n  'progress',\n  ({ jobId, data }: { jobId: string; data: number | object }) => {\n    // jobId received a progress event\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Worker with Job Processing in TypeScript\nDESCRIPTION: Creates a new BullMQ worker that processes jobs from a specified queue. The worker processes jobs asynchronously and returns a value that can be accessed later.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker, Job } from 'bullmq';\n\nconst worker = new Worker(queueName, async (job: Job) => {\n  // Do something with job\n  return 'some value';\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Events with QueueEventsProducer and QueueEvents in BullMQ\nDESCRIPTION: This snippet demonstrates how to create and use custom events in BullMQ. It shows how to initialize both a producer and consumer, define custom event interfaces, subscribe to events, and publish custom events. Only the eventName attribute is required in the event payload.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/events/create-custom-events.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst queueName = 'customQueue';\nconst queueEventsProducer = new QueueEventsProducer(queueName, {\n  connection,\n});\nconst queueEvents = new QueueEvents(queueName, {\n  connection,\n});\n\ninterface CustomListener extends QueueEventsListener {\n  example: (args: { custom: string }, id: string) => void;\n}\nqueueEvents.on<CustomListener>('example', async ({ custom }) => {\n  // custom logic\n});\n\ninterface CustomEventPayload {\n  eventName: string;\n  custom: string;\n}\n\nawait queueEventsProducer.publishEvent<CustomEventPayload>({\n  eventName: 'example',\n  custom: 'value',\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Queue Events in BullMQ with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Queue instance and listen for 'waiting' events, which are triggered when a job is waiting to be processed. The event provides a Job object reference.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/events/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('Paint');\n\nmyQueue.on('waiting', (job: Job) => {\n  // Job is waiting to be processed.\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Jobs to BullMQ Queue\nDESCRIPTION: TypeScript example showing how to create a new queue and add a job to paint cars with specified color data.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('Paint');\n\nqueue.add('cars', { color: 'blue' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Repeat Strategy with RRULE in BullMQ\nDESCRIPTION: Shows implementation of a custom repeat strategy using RRULE format. Includes configuration for both Queue and Worker with custom repeat strategy settings.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/repeatable.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue, QueueScheduler, Worker } from 'bullmq';\nimport { rrulestr } from 'rrule';\n\nconst settings = {\n  repeatStrategy: (millis, opts) => {\n    const currentDate =\n      opts.startDate && new Date(opts.startDate) > new Date(millis)\n        ? new Date(opts.startDate)\n        : new Date(millis);\n    const rrule = rrulestr(opts.pattern);\n    if (rrule.origOptions.count && !rrule.origOptions.dtstart) {\n      throw new Error('DTSTART must be defined to use COUNT with rrule');\n    }\n\n    const next_occurrence = rrule.after(currentDate, false);\n    return next_occurrence?.getTime();\n  },\n};\n\nconst myQueueScheduler = new QueueScheduler('Paint');\nconst myQueue = new Queue('Paint', { settings });\n\n// Repeat job every 10 seconds\nawait myQueue.add(\n  'bird',\n  { color: 'green' },\n  {\n    repeat: {\n      pattern: 'RRULE:FREQ=SECONDLY;INTERVAL=;WKST=MO',\n    },\n    jobId: 'colibri',\n  },\n);\n\nawait myQueue.add(\n  'bird',\n  { color: 'gray' },\n  {\n    repeat: {\n      pattern: 'RRULE:FREQ=SECONDLY;INTERVAL=;WKST=MO',\n    },\n    jobId: 'pigeon',\n  },\n);\n\nconst worker = new Worker(\n  'Paint',\n  async () => {\n    doSomething();\n  },\n  { settings },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Job Trees Atomically with BullMQ FlowProducer\nDESCRIPTION: This code demonstrates how to add multiple job trees atomically in a single operation using the FlowProducer's addBulk method. Each tree consists of a root job with child jobs, and the operation ensures that either all trees are added successfully or none at all, reducing Redis roundtrips.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/adding-bulks.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FlowProducer } from 'bullmq';\n\nconst flow = new FlowProducer({ connection });\n\nconst trees = await flow.addBulk([\n  {\n    name: 'root-job-1',\n    queueName: 'rootQueueName-1',\n    data: {},\n    children: [\n      {\n        name,\n        data: { idx: 0, foo: 'bar' },\n        queueName: 'childrenQueueName-1',\n      },\n    ],\n  },\n  {\n    name: 'root-job-2',\n    queueName: 'rootQueueName-2',\n    data: {},\n    children: [\n      {\n        name,\n        data: { idx: 1, foo: 'baz' },\n        queueName: 'childrenQueueName-2',\n      },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Jobs in Bulk Using BullMQ in TypeScript\nDESCRIPTION: This code demonstrates how to add multiple jobs to a BullMQ queue atomically using the addBulk method. It creates a queue named 'paint' and adds three jobs with different data payloads in a single operation, ensuring all jobs are added or none.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/adding-bulks.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('paint');\n\nconst name = 'jobName';\nconst jobs = await queue.addBulk([\n  { name, data: { paint: 'car' } },\n  { name, data: { paint: 'house' } },\n  { name, data: { paint: 'boat' } },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Worker in TypeScript\nDESCRIPTION: A worker implementation for child jobs that processes steps and returns different cost values based on the job name. This demonstrates how child jobs can return values to be used by the parent.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\n\nconst stepsWorker = new Worker('steps', async job => {\n  await performStep(job.data);\n\n  if (job.name === 'paint') {\n    return 2500;\n  } else if (job.name === 'fix') {\n    return 1750;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Step-Based Job Processing in TypeScript with BullMQ\nDESCRIPTION: This snippet demonstrates how to implement a step-based job processing system using BullMQ in TypeScript. It uses an enum to define steps and a switch statement to handle different processing stages, updating the job data between steps.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/process-step-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum Step {\n  Initial,\n  Second,\n  Finish,\n}\n\nconst worker = new Worker(\n  'queueName',\n  async job => {\n    let step = job.data.step;\n    while (step !== Step.Finish) {\n      switch (step) {\n        case Step.Initial: {\n          await doInitialStepStuff();\n          await job.updateData({\n            step: Step.Second,\n          });\n          step = Step.Second;\n          break;\n        }\n        case Step.Second: {\n          await doSecondStepStuff();\n          await job.updateData({\n            step: Step.Finish,\n          });\n          step = Step.Finish;\n          return Step.Finish;\n        }\n        default: {\n          throw new Error('invalid step');\n        }\n      }\n    }\n  },\n  { connection },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Queue in TypeScript with BullMQ\nDESCRIPTION: Creates a new Queue instance for managing jobs. The queue name 'Cars' is used as an identifier in Redis.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst queue = new Queue('Cars');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Repeatable Keys in BullMQ\nDESCRIPTION: Demonstrates how to implement custom repeatable keys for job differentiation and updating repeatable job options. Includes examples of creating and updating jobs with custom keys.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/repeatable.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('Paint', { connection });\n\n// Repeat job every 10 seconds\nawait myQueue.add(\n  'bird',\n  { color: 'gray' },\n  {\n    repeat: {\n      every: 10_000,\n      key: 'colibri',\n    },\n  },\n);\n\n// Repeat job every 10 seconds\nawait myQueue.add(\n  'bird',\n  { color: 'brown' },\n  {\n    repeat: {\n      every: 10_000,\n      key: 'eagle',\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Rate Limiting in BullMQ Worker\nDESCRIPTION: Sets up a basic rate limiter for a worker that processes 10 jobs per second. Demonstrates the basic configuration of rate limiting options in a BullMQ worker.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/rate-limiting.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker, QueueScheduler } from 'bullmq';\n\nconst worker = new Worker('painter', async job => paintCar(job), {\n  limiter: {\n    max: 10,\n    duration: 1000,\n  },\n});\n\nconst scheduler = new QueueScheduler('painter');\n```\n\n----------------------------------------\n\nTITLE: Handling Completed Jobs with Event Listeners in TypeScript\nDESCRIPTION: Demonstrates how to listen for job completion events on a worker. When a job completes, the listener provides access to both the job object and its return value.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nworker.on('completed', (job: Job, returnvalue: any) => {\n  // Do something with the return value.\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cron Strategy in BullMQ for Scheduled Jobs\nDESCRIPTION: This snippet demonstrates how to use the 'cron' strategy in BullMQ to schedule jobs with precise timing. It creates a job that runs at 9:00 AM every weekday (Monday to Friday) using a cron expression, and sets up a worker to process these scheduled jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/repeat-strategies.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Queue, Worker } = require('bullmq');\n\nconst connection = {\n  host: 'localhost',\n  port: 6379,\n};\n\nconst myQueue = new Queue('my-cron-jobs', { connection });\n\n// Upserting a job with a cron expression\nawait myQueue.upsertJobScheduler(\n  'weekday-morning-job',\n  {\n    pattern: '0 0 9 * * 1-5', // Runs at 9:00 AM every Monday to Friday\n  },\n  {\n    name: 'cron-job',\n    data: { jobData: 'morning data' },\n    opts: {}, // Optional additional job options\n  },\n);\n\n// Worker to process the jobs\nconst worker = new Worker(\n  'my-cron-jobs',\n  async job => {\n    console.log(\n      `Processing job ${job.id} at ${new Date()} with data: ${\n        job.data.jobData\n      }`,\n    );\n  },\n  { connection },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical Job Chain in TypeScript\nDESCRIPTION: Example of creating a deeper job hierarchy where jobs depend on each other in a chain, allowing for sequential execution of jobs in a specific order.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FlowProducer } from 'bullmq';\nconst flowProducer = new FlowProducer();\n\nconst queueName = 'assembly-line';\nconst chain = await flowProducer.add({\n  name: 'car',\n  data: { step: 'engine' },\n  queueName,\n  children: [\n    {\n      name: 'car',\n      data: { step: 'wheels' },\n      queueName,\n      children: [{ name: 'car', data: { step: 'chassis' }, queueName }],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Worker in Python\nDESCRIPTION: Python version of the child worker that processes steps and returns cost values. Shows how to implement job processing in Python with conditional return values.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Worker\n\nasync def process(job: Job, token: str):\n  await performStep(job.data)\n  if job.name == 'paint':\n    return 2500\n  elif job.name == 'fix':\n    return 1750\n\nstepsWorker = Worker(\"steps\", process, {\"connection\": connection})\n```\n\n----------------------------------------\n\nTITLE: Performing Graceful Shutdown in BullMQ with TypeScript\nDESCRIPTION: This code snippet demonstrates how to perform a graceful shutdown of a BullMQ worker using the 'close' method. The method marks the worker as closing, prevents it from picking up new jobs, and waits for current jobs to complete or fail.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/graceful-shutdown.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait worker.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Retry Strategy in TypeScript\nDESCRIPTION: Defines an exponential backoff retry strategy for Redis connections with minimum 1-second and maximum 20-second intervals.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/going-to-production.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nretryStrategy: function (times: number) {\n    return Math.max(Math.min(Math.exp(times), 20000), 1000);\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Job with Custom ID in BullMQ - TypeScript\nDESCRIPTION: Demonstrates how to add a job to a BullMQ queue with a custom job ID to prevent job duplication. The jobId option allows specifying a unique identifier for the job, which will prevent duplicate jobs with the same ID from being added to the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/job-ids.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.add(\n  'wall',\n  { color: 'pink' },\n  {\n    jobId: customJobId,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Complete Flow Tree in BullMQ\nDESCRIPTION: Demonstrates how to create a job hierarchy with multiple levels of children and then retrieve the complete tree structure using FlowProducer.getFlow(). The example shows a root job with multiple children and grandchildren across different queues.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/get-flow-tree.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst flow = new FlowProducer({ connection });\n\nconst originalTree = await flow.add({\n  name: 'root-job',\n  queueName: 'topQueueName',\n  data: {},\n  children: [\n    {\n      name,\n      data: { idx: 0, foo: 'bar' },\n      queueName: 'childrenQueueName',\n      children: [\n        {\n          name,\n          data: { idx: 4, foo: 'baz' },\n          queueName: 'grandchildrenQueueName',\n        },\n      ],\n    },\n    {\n      name,\n      data: { idx: 2, foo: 'foo' },\n      queueName: 'childrenQueueName',\n    },\n    {\n      name,\n      data: { idx: 3, foo: 'bis' },\n      queueName: 'childrenQueueName',\n    },\n  ],\n});\n\nconst { job: topJob } = originalTree;\n\nconst tree = await flow.getFlow({\n  id: topJob.id,\n  queueName: 'topQueueName',\n});\n\nconst { children, job } = tree;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Backoff Strategy in Job Configuration in TypeScript\nDESCRIPTION: This example demonstrates how to add a job that uses a previously defined custom backoff strategy. The job is configured to make up to 3 retry attempts.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/retrying-failing-jobs.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('foo');\n\nawait queue.add(\n  'test-retry',\n  { foo: 'bar' },\n  {\n    attempts: 3,\n    backoff: {\n      type: 'custom',\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Manually Processing Jobs in BullMQ with TypeScript\nDESCRIPTION: Demonstrates how to fetch and process a job manually from a BullMQ queue using a token for job locking. The job is either moved to completed or failed state based on processing results.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/manually-fetching-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker('my-queue');\n\n// Specify a unique token\nconst token = 'my-token';\n\nconst job = (await worker.getNextJob(token)) as Job;\n\n// Access job.data and do something with the job\n// processJob(job.data)\nif (succeeded) {\n  await job.moveToCompleted('some return value', token, false);\n} else {\n  await job.moveToFailed(new Error('my error message'), token, false);\n}\n\nawait worker.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent-Child Job Flow Control in BullMQ with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use BullMQ's FlowProducer to create a job tree with parent-child relationships. It showcases the usage of continueParentOnFailure option, removeUnprocessedChildren method, and getFailedChildrenValues method to manage parent job processing based on child job outcomes.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/continue-parent.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { FlowProducer } = require('bullmq');\nconst flow = new FlowProducer({ connection });\n\n// Define the flow\nconst originalTree = await flow.add({\n  name: 'root-job',\n  queueName: 'topQueueName',\n  data: {},\n  children: [\n    {\n      name: 'child-job-1',\n      data: { idx: 0, foo: 'bar' },\n      queueName: 'childrenQueueName',\n      opts: { continueParentOnFailure: true }, // Parent processes if this child fails\n    },\n    {\n      name: 'child-job-2',\n      data: { idx: 1, foo: 'baz' },\n      queueName: 'childrenQueueName',\n    },\n    {\n      name: 'child-job-3',\n      data: { idx: 2, foo: 'qux' },\n      queueName: 'childrenQueueName',\n    },\n  ],\n});\n\n// Processor for the parent job\nconst processor = async (job) => {\n  // Check if any children failed\n  const failedChildren = await job.getFailedChildrenValues();\n  const hasFailedChildren = Object.keys(failedChildren).length > 0;\n\n  if (hasFailedChildren) {\n    // Path 1: A child failed, triggering continueParentOnFailure\n    console.log(`Parent job ${job.name} triggered by child failure(s):`, failedChildren);\n    \n    // Remove unprocessed children\n    await job.removeUnprocessedChildren();\n    console.log('Unprocessed child jobs have been removed.');\n    \n    // Additional cleanup or error handling can go here\n  } else {\n    // Path 2: All children completed successfully\n    console.log(`Parent job ${job.name} processing after all children completed successfully.`);\n    \n    // Proceed with normal parent logic (e.g., aggregating results)\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Repeat Strategy with RRULE in BullMQ\nDESCRIPTION: This snippet shows how to implement a custom repeat strategy in BullMQ using the RRULE library. It defines a custom strategy function that calculates the next occurrence based on RRULE patterns, and demonstrates setting up multiple repeatable jobs with different intervals using this custom strategy.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/repeat-strategies.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue, Worker } from 'bullmq';\nimport { rrulestr } from 'rrule';\n\nconst settings = {\n  repeatStrategy: (millis: number, opts: RepeatOptions, _jobName: string) => {\n    const currentDate =\n      opts.startDate && new Date(opts.startDate) > new Date(millis)\n        ? new Date(opts.startDate)\n        : new Date(millis);\n\n    const rrule = rrulestr(opts.pattern);\n\n    if (rrule.origOptions.count && !rrule.origOptions.dtstart) {\n      throw new Error('DTSTART must be defined to use COUNT with rrule');\n    }\n\n    const next_occurrence = rrule.after(currentDate, false);\n    return next_occurrence?.getTime();\n  },\n};\n\nconst myQueue = new Queue('Paint', { settings });\n\n// Repeat job every 10 seconds\nawait myQueue.upsertJobScheduler(\n  'collibris',\n  {\n    pattern: 'RRULE:FREQ=SECONDLY;INTERVAL=10;WKST=MO',\n  },\n  {\n    data: { color: 'green' },\n  },\n);\n\n// Repeat job every 20 seconds\nawait myQueue.upsertJobScheduler(\n  'pingeons',\n  {\n    pattern: 'RRULE:FREQ=SECONDLY;INTERVAL=20;WKST=MO',\n  },\n  {\n    data: { color: 'gray' },\n  },\n);\n\nconst worker = new Worker(\n  'Paint',\n  async () => {\n    doSomething();\n  },\n  { settings },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff for Job Retries in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a job to a queue with an exponential backoff retry strategy. It configures the job to retry up to 3 times with exponential delays starting at 1 second.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/retrying-failing-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('foo');\n\nawait queue.add(\n  'test-retry',\n  { foo: 'bar' },\n  {\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 1000,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating New Redis Connections in BullMQ Queue and Worker\nDESCRIPTION: Demonstrates how to create new Redis connections for Queue and Worker instances with custom host and port configurations.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/connections.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue, Worker } from 'bullmq';\n\n// Create a new connection in every instance\nconst myQueue = new Queue('myqueue', {\n  connection: {\n    host: 'myredis.taskforce.run',\n    port: 32856,\n  },\n});\n\nconst myWorker = new Worker('myqueue', async job => {}, {\n  connection: {\n    host: 'myredis.taskforce.run',\n    port: 32856,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sandboxed Processor in TypeScript\nDESCRIPTION: This code shows how to implement a sandboxed processor in a separate file. The processor receives a SandboxedJob object and processes it asynchronously in an isolated environment.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/sandboxed-processors.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SandboxedJob } from 'bullmq';\n\nmodule.exports = async (job: SandboxedJob) => {\n    // Do something with job\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Bulk Jobs Across Multiple Queues with BullMQ FlowProducer\nDESCRIPTION: Demonstrates how to use FlowProducer to atomically add multiple jobs across different queues. The method ensures that either all jobs are added successfully or none are added, making it useful for maintaining data consistency. The example shows adding two jobs to different queues with minimal job data.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/adding-bulks.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FlowProducer } from 'bullmq';\n\nconst flow = new FlowProducer({ connection });\n\nconst trees = await flow.addBulk([\n  {\n    name: 'job-1',\n    queueName: 'queueName-1',\n    data: {}\n  },\n  {\n    name: 'job-2',\n    queueName: 'queueName-2',\n    data: {}\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Job Timeout in BullMQ Worker\nDESCRIPTION: Demonstrates how to implement a timeout mechanism for job processing using AbortController and setTimeout. The timeout duration is specified in the job's data property, and the code handles graceful abortion of tasks with proper error handling.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/timeout-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker('foo', async job => {\n  let controller = new AbortController();\n  const timer = setTimeout(() => controller.abort(), job.data.timeout);\n    \n  try {\n    await doSomethingAbortable(controller.signal);\n  } catch(err) {\n     if (err.name == \"AbortError\") {\n      throw new UnrecoverableError(\"Timeout\");\n    } else {\n      throw err;\n    }\n  } finally {\n    clearTimeout(timer);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkerPro with OpenTelemetry in TypeScript\nDESCRIPTION: This snippet shows how to set up a BullMQ Pro worker with telemetry support. It demonstrates creating a worker with a job processing function and configuration options including connection, telemetry, concurrency, and batch processing settings.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/telemetry.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPro } from '@taskforcesh/bullmq-pro';\nimport { BullMQOtel } from 'bullmq-otel';\n\nconst worker = new WorkerPro(\n  'myProQueue',\n  async job => {\n    console.log('processing job', job.id);\n  },\n  {\n    name: 'myWorker',\n    connection,\n    telemetry: new BullMQOtel('guide'),\n    concurrency: 10,\n    batch: { size: 10 },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Every Strategy in BullMQ for Repeatable Jobs\nDESCRIPTION: This snippet demonstrates how to use the 'every' strategy in BullMQ to create jobs that repeat at specific intervals. It uses the upsertJobScheduler method to create a job that repeats every 10 seconds, and sets up a worker to process these repeatable jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/repeat-strategies.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Queue, Worker } = require('bullmq');\n\nconst connection = {\n  host: 'localhost',\n  port: 6379,\n};\n\nconst myQueue = new Queue('my-repeatable-jobs', { connection });\n\n// Upserting a repeatable job in the queue\nawait myQueue.upsertJobScheduler(\n  'repeat-every-10s',\n  {\n    every: 10000, // Job will repeat every 10000 milliseconds (10 seconds)\n  },\n  {\n    name: 'every-job',\n    data: { jobData: 'data' },\n    opts: {}, // Optional additional job options\n  },\n);\n\n// Worker to process the jobs\nconst worker = new Worker(\n  'my-repeatable-jobs',\n  async job => {\n    console.log(`Processing job ${job.id} with data: ${job.data.jobData}`);\n  },\n  { connection },\n);\n```\n\n----------------------------------------\n\nTITLE: Listening to Worker Events in TypeScript\nDESCRIPTION: This snippet shows how to attach event listeners to a worker to handle job completion and failure events. It logs messages when jobs are completed or failed, including the job ID and error message for failed jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/README (1).md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nworker.on('completed', job => {\n  console.log(`${job.id} has completed!`);\n});\n\nworker.on('failed', (job, err) => {\n  console.log(`${job.id} has failed with ${err.message}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Delayed Jobs to a Queue in TypeScript with BullMQ\nDESCRIPTION: This snippet demonstrates how to add a delayed job to a queue using BullMQ. It creates a new queue and adds a job that will be delayed by at least 5 seconds.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/delayed.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('Paint');\n\n// Add a job that will be delayed by at least 5 seconds.\nawait myQueue.add('house', { color: 'white' }, { delay: 5000 });\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Custom Backoff Strategies in TypeScript\nDESCRIPTION: This example illustrates how to define multiple custom backoff strategies in a worker. The strategy selection is based on the type parameter, and it demonstrates handling different retry logic for each type.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/retrying-failing-jobs.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\n\nconst worker = new Worker('foo', async job => doSomeProcessing(), {\n  settings: {\n    backoffStrategy: (\n      attemptsMade: number,\n      type: string,\n      err: Error,\n      job: Job,\n    ) => {\n      switch (type) {\n        case 'custom1': {\n          return attemptsMade * 1000;\n        }\n        case 'custom2': {\n          return attemptsMade * 2000;\n        }\n        default: {\n          throw new Error('invalid type');\n        }\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch Request Timeout in BullMQ Worker\nDESCRIPTION: Shows how to implement a timeout mechanism for fetch requests within a BullMQ worker. Uses AbortController to cancel the fetch request if it exceeds the specified timeout duration, with proper error handling for both the fetch call and response processing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/timeout-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker(\"foo\", async (job) => { \n  let controller = new AbortController();\n  const timer = setTimeout(() => controller.abort(), job.data.timeout);\n  try {\n    let response = await fetch(\"/slowserver.com\", {\n      signal: controller.signal,\n    }); \n    const result = await response.text();\n  } catch (err) {\n    if (err.name == \"AbortError\") {\n      throw new UnrecoverableError(\"Timeout\");\n    } else {\n      throw err;\n    }\n  } finally {\n    clearTimeout(timer)\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Job from BullMQ Queue in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a queue, add a job to it, and then remove that job using BullMQ in TypeScript. It imports the Queue class from BullMQ, creates a new queue named 'paint', adds a job with the name 'wall' and data {color: 1}, and then removes the job.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/removing-job.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('paint');\n\nconst job = await queue.add('wall', { color: 1 });\n\nawait job.remove();\n```\n\n----------------------------------------\n\nTITLE: Accessing Child Job Results in Parent Worker\nDESCRIPTION: Implementation of a parent worker that retrieves and processes the results from child jobs using the getChildrenValues method, demonstrating how parent jobs can aggregate data from their children.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\n\nconst renovateWorker = new Worker('renovate', async job => {\n  const childrenValues = await job.getChildrenValues();\n\n  const totalCosts = Object.values(childrenValues).reduce(\n    (prev, cur) => prev + cur,\n    0,\n  );\n\n  await sendInvoice(totalCosts);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics on BullMQ Worker in TypeScript\nDESCRIPTION: This snippet demonstrates how to enable metrics on a BullMQ worker. It sets up a worker for a 'Paint' queue with metrics enabled, storing data points for two weeks.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/metrics/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker, MetricsTime } from 'bullmq';\n\nconst myWorker = new Worker('Paint', {\n  connection,\n  metrics: {\n    maxDataPoints: MetricsTime.ONE_WEEK * 2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Processing Tasks with Bull Queue in JavaScript\nDESCRIPTION: Demonstrates how to create different queues for processing various media types (video, audio, image, PDF) using Bull with Redis. Shows how to define process handlers with callbacks and how to add jobs to the queues.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require(\"bull\");\n\nconst videoQueue = new Queue(\"video transcoding\", \"redis://127.0.0.1:6379\");\nconst audioQueue = new Queue(\"audio transcoding\", {\n  redis: { port: 6379, host: \"127.0.0.1\", password: \"foobared\" },\n}); // Specify Redis connection using object\nconst imageQueue = new Queue(\"image transcoding\");\nconst pdfQueue = new Queue(\"pdf transcoding\");\n\nvideoQueue.process(function (job, done) {\n  // job.data contains the custom data passed when the job was created\n  // job.id contains id of this job.\n\n  // transcode video asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\"error transcoding\"));\n\n  // or pass it a result\n  done(null, { framerate: 29.5 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\"some unexpected error\");\n});\n\naudioQueue.process(function (job, done) {\n  // transcode audio asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\"error transcoding\"));\n\n  // or pass it a result\n  done(null, { samplerate: 48000 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\"some unexpected error\");\n});\n\nimageQueue.process(function (job, done) {\n  // transcode image asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\"error transcoding\"));\n\n  // or pass it a result\n  done(null, { width: 1280, height: 720 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\"some unexpected error\");\n});\n\npdfQueue.process(function (job) {\n  // Processors can also return promises instead of using the done callback\n  return pdfAsyncProcessor();\n});\n\nvideoQueue.add({ video: \"http://example.com/video1.mov\" });\naudioQueue.add({ audio: \"http://example.com/audio1.mp3\" });\nimageQueue.add({ image: \"http://example.com/image1.tiff\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Throttling with BullMQ in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement job throttling in BullMQ using TypeScript. It sets up a queue, worker, and adds multiple jobs with the same job ID to prevent duplicate processing. The example includes error handling and job completion logging.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/throttle-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Job, Queue, QueueScheduler, Worker } from 'bullmq';\n\nconst myQueueScheduler = new QueueScheduler('Paint');\nconst myQueue = new Queue('Paint');\n\nconst worker = new Worker('Paint', async (job: Job) => {\n  console.log('Do something with job');\n  return 'some value';\n});\n\nworker.on('completed', (job: Job, returnvalue: any) => {\n  console.log('worker done painting', new Date());\n});\n\nworker.on('failed', (job: Job, error: Error) => {\n  console.error('worker fail painting', job, error, new Date());\n});\n\n// Add only one job that will be delayed at least 1 second.\nmyQueue.add('house', { color: 'white' }, { delay: 1000, jobId: 'house' });\nmyQueue.add('house', { color: 'white' }, { delay: 1000, jobId: 'house' });\nmyQueue.add('house', { color: 'white' }, { delay: 1000, jobId: 'house' });\nmyQueue.add('house', { color: 'white' }, { delay: 1000, jobId: 'house' });\nmyQueue.add('house', { color: 'white' }, { delay: 1000, jobId: 'house' });\nmyQueue.add('house', { color: 'white' }, { delay: 1000, jobId: 'house' });\nmyQueue.add('house', { color: 'white' }, { delay: 1000, jobId: 'house' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Removal on Failure in BullMQ using TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a job flow in BullMQ with the removeDependencyOnFailure option. It creates a root job with multiple child jobs, where one child job is set to remove its dependency on failure. This allows the parent job to complete without waiting for failed children.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/remove-dependency.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst flow = new FlowProducer({ connection });\n\nconst originalTree = await flow.add({\n  name: 'root-job',\n  queueName: 'topQueueName',\n  data: {},\n  children: [\n    {\n      name,\n      data: { idx: 0, foo: 'bar' },\n      queueName: 'childrenQueueName',\n      opts: { removeDependencyOnFailure: true },\n      children: [\n        {\n          name,\n          data: { idx: 1, foo: 'bah' },\n          queueName: 'grandChildrenQueueName',\n        },\n        {\n          name,\n          data: { idx: 2, foo: 'baz' },\n          queueName: 'grandChildrenQueueName',\n        },\n      ],\n    },\n    {\n      name,\n      data: { idx: 3, foo: 'foo' },\n      queueName: 'childrenQueueName',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Worker Concurrency Dynamically in TypeScript\nDESCRIPTION: This snippet shows how to dynamically update the concurrency value of a running BullMQ worker. This allows for adjusting the parallel processing capacity based on runtime conditions or requirements.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/concurrency.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nworker.concurrency = 5;\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job for a Specific Time in TypeScript with BullMQ\nDESCRIPTION: This snippet shows how to schedule a job for a specific future date and time using BullMQ. It calculates the delay by subtracting the current time from the target time.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/delayed.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetTime = new Date('03-07-2035 10:30');\nconst delay = Number(targetTime) - Number(new Date());\n\nawait myQueue.add('house', { color: 'white' }, { delay });\n```\n\n----------------------------------------\n\nTITLE: Delaying Jobs During Processing in TypeScript with BullMQ\nDESCRIPTION: This snippet demonstrates how to delay a job during processing using BullMQ in TypeScript. It uses the moveToDelayed method and throws a DelayedError to signal that the job has been delayed.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/process-step-jobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DelayedError, Worker } from 'bullmq';\n\nenum Step {\n  Initial,\n  Second,\n  Finish,\n}\n\nconst worker = new Worker(\n  'queueName',\n  async (job: Job, token?: string) => {\n    let step = job.data.step;\n    while (step !== Step.Finish) {\n      switch (step) {\n        case Step.Initial: {\n          await doInitialStepStuff();\n          await job.moveToDelayed(Date.now() + 200, token);\n          await job.updateData({\n            step: Step.Second,\n          });\n          throw new DelayedError();\n        }\n        case Step.Second: {\n          await doSecondStepStuff();\n          await job.updateData({\n            step: Step.Finish,\n          });\n          step = Step.Finish;\n        }\n        default: {\n          throw new Error('invalid step');\n        }\n      }\n    }\n  },\n  { connection },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Group-Based Rate Limiting in BullMQ\nDESCRIPTION: Configures rate limiting based on a group key (customerId) to limit processing separately for each customer. Sets up both queue and worker with group-based rate limiting.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/rate-limiting.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue, Worker, QueueScheduler } from 'bullmq';\n\nconst queue = new Queue('painter', {\n  limiter: {\n    groupKey: 'customerId',\n  },\n});\n\nconst worker = new Worker('painter', async job => paintCar(job), {\n  limiter: {\n    max: 10,\n    duration: 1000,\n    groupKey: 'customerId',\n  },\n});\n\nconst scheduler = new QueueScheduler('painter');\n\n// jobs will be rate limited by the value of customerId key:\nawait queue.add('rate limited paint', { customerId: 'my-customer-id' });\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Flow with BullMQ FlowProducer in NestJS\nDESCRIPTION: This code demonstrates how to create a job flow with parent-child relationships using the BullMQ FlowProducer in NestJS. The flow consists of a root job and child jobs that will be processed in the specified queues.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/producers.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.fooFlowProducer.add({\n  name: 'root-job',\n  queueName: 'topQueueName',\n  data: {},\n  children: [\n    {\n      name,\n      data: { idx: 0, foo: 'bar' },\n      queueName: 'childrenQueueName',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Bull Queue Events\nDESCRIPTION: Demonstrates how to listen for queue events, such as job completion. Bull emits various events that can be used to monitor queue state and job processing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmyqueue.on('completed', function (job, result) {\n  // Job completed with output result!\n})\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Generics with Workers\nDESCRIPTION: This example demonstrates how to use TypeScript generics to specify data types for job data and return values when creating a Worker instance, enhancing type safety and developer experience.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/README.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker<MyData, MyReturn>(queueName, async (job: Job) => {});\n```\n\n----------------------------------------\n\nTITLE: Obliterating BullMQ Queue\nDESCRIPTION: Demonstrates how to completely remove a queue and all its contents using the obliterate() method. Parent jobs in other queues will remain in waiting-children status if they have pending children, or be moved to wait state.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/removing-jobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('paint');\n\nawait queue.obliterate();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Backoff Strategy in Worker Configuration in TypeScript\nDESCRIPTION: This snippet shows how to define a custom backoff strategy in a worker. The strategy calculates retry delays based on the number of attempts made, returning the delay in milliseconds.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/retrying-failing-jobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\n\nconst worker = new Worker('foo', async job => doSomeProcessing(), {\n  settings: {\n    backoffStrategy: (attemptsMade: number) => {\n      return attemptsMade * 1000;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Group Concurrency Limits in BullMQ Pro\nDESCRIPTION: This example demonstrates how to instantiate a WorkerPro with a concurrency limit for job groups. The configuration limits processing to a maximum of 3 parallel jobs per group while allowing up to 100 concurrent jobs across all workers. The concurrency factor is global and applies regardless of worker count or individual worker concurrency settings.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/concurrency.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPro } from '@taskforcesh/bullmq-pro';\n\nconst worker = new WorkerPro('myQueue', processFn, {\n  group: {\n    concurrency: 3, // Limit to max 3 parallel jobs per group\n  },\n  concurrency: 100,\n  connection,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Worker with AWS MemoryDB Cluster Connection\nDESCRIPTION: Example showing how to set up a BullMQ worker using an IORedis Cluster connection to AWS MemoryDB. Includes connection initialization, worker setup, and proper cleanup with connection closing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/redis-tm-hosting/aws-memorydb.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Cluster } from 'ioredis';\nimport { Worker } from 'bullmq';\n\nconst connection = new Cluster(\n  [\n    {\n      host: 'clustercfg.xxx.amazonaws.com',\n      port: 6379,\n    },\n  ],\n  {\n    tls: {},\n  },\n);\n\nconst worker = new Worker(\n  'myqueue',\n  async (job: Job) => {\n    // Do some usefull stuff\n  },\n  { connection },\n);\n\n// ...\n\n// Do not forget to close the connection as well as the worker when shutting down\nawait worker.close();\nawait connection.quit();\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Job Processing in BullMQ with TypeScript\nDESCRIPTION: This code demonstrates how to create a BullMQ worker that handles different job types using a switch-case statement based on the job name. The worker executes different logic depending on the job's 'name' property, allowing for differentiated processing within a single worker.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/named-processor.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker(\n  'queueName',\n  async job => {\n    switch (job.name) {\n      case 'taskType1': {\n        await doSomeLogic1();\n        break;\n      }\n      case 'taskType2': {\n        await doSomeLogic2();\n        break;\n      }\n    }\n  },\n  { connection },\n);\n```\n\n----------------------------------------\n\nTITLE: Processing Grouped Jobs with a Worker in TypeScript using BullMQ Pro\nDESCRIPTION: This snippet shows how to create a WorkerPro instance to process grouped jobs. It includes a placeholder for group-specific processing logic.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPro } from '@taskforcesh/bullmq-pro';\n\nconst worker = new WorkerPro('test', async job => {\n  // Do something usefull.\n\n  // You can also do something different depending on the group\n  await doSomethingSpecialForMyGroup(job.opts.group);\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Flows with Dynamic Child Jobs in TypeScript using BullMQ\nDESCRIPTION: This snippet illustrates how to chain flows by adding dynamic child jobs during processing using BullMQ in TypeScript. It uses a FlowProducer to add child jobs and grandchild jobs, and manages the waiting process for these jobs to complete.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/process-step-jobs.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FlowProducer, WaitingChildrenError, Worker } from 'bullmq';\n\nenum Step {\n  Initial,\n  Second,\n  Third,\n  Finish,\n}\n\nconst flow = new FlowProducer({ connection });\nconst worker = new Worker(\n  'parentQueueName',\n  async (job, token) => {\n    let step = job.data.step;\n    while (step !== Step.Finish) {\n      switch (step) {\n        case Step.Initial: {\n          await doInitialStepStuff();\n          await flow.add({\n            name: 'child-job',\n            queueName: 'childrenQueueName',\n            data: {},\n            children: [\n              {\n                name,\n                data: { idx: 0, foo: 'bar' },\n                queueName: 'grandchildrenQueueName',\n              },\n              {\n                name,\n                data: { idx: 1, foo: 'baz' },\n                queueName: 'grandchildrenQueueName',\n              },\n            ],\n            opts: {\n              parent: {\n                id: job.id,\n                queue: job.queueQualifiedName,\n              },\n            },\n          });\n\n          await job.updateData({\n            step: Step.Second,\n          });\n          step = Step.Second;\n          break;\n        }\n        case Step.Second: {\n          await doSecondStepStuff();\n          await job.updateData({\n            step: Step.Third,\n          });\n          step = Step.Third;\n          break;\n        }\n        case Step.Third: {\n          const shouldWait = await job.moveToWaitingChildren(token);\n          if (!shouldWait) {\n            await job.updateData({\n              step: Step.Finish,\n            });\n            step = Step.Finish;\n            return Step.Finish;\n          } else {\n            throw new WaitingChildrenError();\n          }\n        }\n        default: {\n          throw new Error('invalid step');\n        }\n      }\n    }\n  },\n  { connection },\n);\n```\n\n----------------------------------------\n\nTITLE: Changing Job Priority in BullMQ\nDESCRIPTION: Shows how to modify the priority of an existing job using the changePriority method. Demonstrates changing priority from 16 to 1 and setting LIFO option.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/prioritized.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await Job.create(queue, 'test2', { foo: 'bar' }, { priority: 16 });\n\nawait job.changePriority({\n  priority: 1,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await Job.create(queue, 'test2', { foo: 'bar' }, { priority: 16 });\n\nawait job.changePriority({\n  lifo: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Specific Job States in BullMQ Queue\nDESCRIPTION: Shows how to use the clean() method to remove jobs in a specific state while keeping jobs within a grace period. Accepts parameters for grace period duration, maximum number of jobs to clean, and the job state to target.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/removing-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('paint');\n\nconst deletedJobIds = await queue.clean(\n  60000, // 1 minute\n  1000, // max number of jobs to clean\n  'paused',\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Flow Jobs with BullMQ Flow Producer\nDESCRIPTION: Shows how to add a flow job with parent-child relationship using the flow producer's add() method. Demonstrates setting up job names, queue names, and job data for both parent and child jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/producers.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.fooFlowProducer.add({\n  name: 'root-job',\n  queueName: 'topQueueName',\n  data: {},\n  children: [\n    {\n      name,\n      data: { idx: 0, foo: 'bar' },\n      queueName: 'childrenQueueName',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker with Local Concurrency Factor in TypeScript\nDESCRIPTION: This code demonstrates how to initialize a BullMQ Worker with a concurrency factor of 50, allowing the worker to process multiple jobs in parallel while preserving queue guarantees such as at-least-once processing and processing order.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/concurrency.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker, Job } from 'bullmq';\n\nconst worker = new Worker(\n  queueName,\n  async (job: Job) => {\n    // Do something with job\n    return 'some value';\n  },\n  { concurrency: 50 },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing BullMQ with Redis Cluster Using Queue Prefix in TypeScript\nDESCRIPTION: Creates a Queue instance with a prefix inside brackets (hash tag) to ensure all related keys are stored in the same Redis Cluster hash slot. This approach allows atomic operations across different keys in a Redis Cluster environment.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/redis-cluster.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst queue = new Queue('cluster', {\n  prefix: '{myprefix}',\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting BullMQ Metrics with Vanilla Node.js\nDESCRIPTION: This snippet demonstrates how to create a simple HTTP server that exposes BullMQ metrics for Prometheus using vanilla Node.js. It creates a /metrics endpoint that returns the queue metrics when accessed.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/metrics/prometheus.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'http';\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('my-queue');\n\nconst server = http.createServer(\n  async (req: http.IncomingMessage, res: http.ServerResponse) => {\n    try {\n      if (req.url === '/metrics' && req.method === 'GET') {\n        const metrics = await queue.exportPrometheusMetrics();\n\n        res.writeHead(200, {\n          'Content-Type': 'text/plain',\n          'Content-Length': Buffer.byteLength(metrics),\n        });\n        res.end(metrics);\n      } else {\n        res.writeHead(404);\n        res.end('Not Found');\n      }\n    } catch (err: unknown) {\n      res.writeHead(500);\n      res.end(`Error: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    }\n  },\n);\n\nconst PORT = process.env.PORT || 3000;\n\nserver.listen(PORT, () => {\n  console.log(`Prometheus metrics server running on port ${PORT}`);\n  console.log(`Metrics available at http://localhost:${PORT}/metrics`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Processing in BullMQ Worker (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up a BullMQ worker to process jobs in batches. It configures the worker with a batch size of 10 and processes each job in the batch using a custom function.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/batches.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new WorkerPro(\n  'My Queue',\n  async (job: JobPro) => {\n    const batch = job.getBatch();\n\n    for (let i = 0; i < batch.length; i++) {\n      const batchedJob = batch[i];\n      await doSomethingWithBatchedJob(batchedJob);\n    }\n  },\n  { connection, batch: { size: 10 } },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resumable Job Processor with Observables\nDESCRIPTION: This example shows how to create a worker that can resume processing from the last saved state. It uses a switch statement without breaks to continue execution from the last emitted value, allowing jobs to be resumed after a crash or interruption.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/observables/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPro } from \"@taskforcesh/bullmq-pro\"\nimport { Observable } from \"rxjs\"\n\nconst processor = async (job) => {\n  return new Observable<number>(subscriber => {\n    switch(job.returnvalue){\n      default:\n        subscriber.next(1);\n      case 1:\n        subscriber.next(2);\n      case 2:\n        subscriber.next(3);\n      case 3:\n        subscriber.complete();\n    }\n  });\n};\n\nconst worker = new WorkerPro(queueName, processor, { connection });\n```\n\n----------------------------------------\n\nTITLE: Querying BullMQ Metrics in TypeScript\nDESCRIPTION: This snippet shows how to query metrics for a BullMQ queue. It creates a queue instance and retrieves metrics for completed jobs over a two-week period, returning a Metrics object with data and metadata.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/metrics/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\nconst myQueue = new Queue('Paint', {\n  connection,\n});\n\nconst metrics = await queue.getMetrics('completed', 0, MetricsTime.ONE_WEEK * 2);\n\n/* Returns a Metrics object:\n{\n    data: number[];\n    count: number;\n    meta: {\n      count: number;\n      prevTS: number;\n      prevCount: number;\n    };\n  }\n*/\n```\n\n----------------------------------------\n\nTITLE: Updating Job Data in BullMQ\nDESCRIPTION: Demonstrates how to update the data of an existing job using the updateData method. The example shows changing the color value from red to blue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/job-data.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await Job.create(queue, 'wall', { color: 'red' });\n\nawait job.updateData({\n  color: 'blue',\n});\n\njob.data; // { color: 'blue' }\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Queue\n\nqueue = Queue('paint')\n\njob = await queue.add('wall', {'color': 'red'})\n\nawait job.updateData({'color': 'blue'})\njob.data # { color: 'blue' }\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical Job Chain in Python\nDESCRIPTION: Python implementation of the same hierarchical job chain, demonstrating how to create nested dependencies between jobs for sequential processing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import FlowProducer\n\nflowProducer = FlowProducer()\n\nqueueName = 'assembly-line'\nchain = await flowProducer.add({\n  \"name\": \"car\",\n  \"data\": { \"step\": \"engine\" },\n  \"queueName\": queueName,\n  \"children\": [\n    {\n      \"name\": \"car\",\n      \"data\": { \"step\": \"wheels\" },\n      \"queueName\": queueName,\n      \"children\": [{ \"name\": \"car\", \"data\": { \"step\": \"chassis\" }, \"queueName\": queueName }],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Fail Redis Connection in TypeScript with BullMQ\nDESCRIPTION: Demonstrates how to configure a BullMQ queue to fail immediately when Redis is down instead of waiting for reconnection. Shows implementation in an Express route handler with proper error handling. Uses enableOfflineQueue: false option to prevent command queuing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/failing-fast-when-redis-is-down.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myQueue = new Queue(\"transcoding\", {\n  connection: {\n    enableOfflineQueue: false,\n  },\n});\n\napp.post(\"/jobs\", async (req, res) => {\n  try {\n    const job = await myQueue.add(\"myjob\", { req.body });\n    res.status(201).json(job.id);\n  }catch(err){\n    res.status(503).send(err);\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing LIFO Queue in BullMQ with TypeScript\nDESCRIPTION: Demonstrates how to create a queue and add a job with LIFO processing enabled. The job will be processed before any other jobs already in the queue due to the lifo: true option.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/lifo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('Paint');\n\n// Add a job that will be processed before all others\nawait myQueue.add('wall', { color: 'pink' }, { lifo: true });\n```\n\n----------------------------------------\n\nTITLE: Adding Jobs with Group Priorities in BullMQ Pro\nDESCRIPTION: This snippet demonstrates how to add a job to a queue with a specific group ID and priority. The priority is set within the group object, allowing for prioritization of jobs within the same group.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/prioritized.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.add(\n  'paint',\n  { foo: 'bar' },\n  {\n    group: {\n      id: 'groupId',\n      priority: 10,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Jobs in Bulk Using BullMQ in Python\nDESCRIPTION: This code shows how to add multiple jobs to a BullMQ queue atomically using the addBulk method in Python. It creates a queue named 'paint' and adds three jobs with different data payloads in a single operation, ensuring all jobs are added or none.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/adding-bulks.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Queue\n\nqueue = Queue(\"paint\")\n\njobs = await queue.addBulk([\n  { \"name\": \"jobName\", \"data\": { \"paint\": \"car\" } },\n  { \"name\": \"jobName\", \"data\": { \"paint\": \"house\" } },\n  { \"name\": \"jobName\", \"data\": { \"paint\": \"boat\" } }\n])\n```\n\n----------------------------------------\n\nTITLE: Returning Results from BullMQ Worker in TypeScript\nDESCRIPTION: Creates a worker that processes jobs from the 'AsyncProc' queue and returns the result of the processing function. The returned value is automatically stored in the job's returnvalue property.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/returning-job-data.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue, Worker } from 'bullmq';\n\nconst myWorker = new Worker('AsyncProc', async job => {\n  const result = await doSomeAsyncProcessing();\n  return result;\n});\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Producer Instrumentation Configuration\nDESCRIPTION: Configures OpenTelemetry SDK for the producer service with OTLP exporters for traces and metrics.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/running-a-simple-example.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-proto';\nimport { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';\n\nconst sdk = new NodeSDK({\n  serviceName: 'producer',\n  traceExporter: new OTLPTraceExporter({\n    url: 'http://127.0.0.1:4318/v1/traces'\n  }),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new OTLPMetricExporter({\n      url: 'http://127.0.0.1:4318/v1/metrics'\n    }),\n  }),\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Rate Limiting in BullMQ Worker\nDESCRIPTION: Shows how to manually rate limit a queue based on external conditions like API responses. Uses the worker.rateLimit() method to dynamically apply rate limiting.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/rate-limiting.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\n\nconst worker = new Worker(\n  'myQueue',\n  async () => {\n    const [isRateLimited, duration] = await doExternalCall();\n    if (isRateLimited) {\n      await worker.rateLimit(duration);\n      // Do not forget to throw this special exception,\n      // since we must differentiate this case from a failure\n      // in order to move the job to wait again.\n      throw Worker.RateLimitError();\n    }\n  },\n  {\n    connection,\n    limiter: {\n      max: 1,\n      duration: 500,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Cleanup Options in BullMQ\nDESCRIPTION: Shows how to add a job with cleanup configuration options, including removeOnComplete and removeOnFail settings to manage job retention after completion or failure.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/fifo.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.add(\n  'wall',\n  { color: 'pink' },\n  { removeOnComplete: true, removeOnFail: 1000 },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Producer with Ignore Dependency\nDESCRIPTION: Creates a flow producer with nested job structure where child jobs are configured to ignore dependency on failure. The flow includes a root job with multiple children and grandchildren, demonstrating the ignoreDependencyOnFailure option.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/ignore-dependency.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst flow = new FlowProducer({ connection });\n\nconst originalTree = await flow.add({\n  name: 'root-job',\n  queueName: 'topQueueName',\n  data: {},\n  children: [\n    {\n      name,\n      data: { idx: 0, foo: 'bar' },\n      queueName: 'childrenQueueName',\n      opts: { ignoreDependencyOnFailure: true },\n      children: [\n        {\n          name,\n          data: { idx: 1, foo: 'bah' },\n          queueName: 'grandChildrenQueueName',\n        },\n        {\n          name,\n          data: { idx: 2, foo: 'baz' },\n          queueName: 'grandChildrenQueueName',\n        },\n      ],\n    },\n    {\n      name,\n      data: { idx: 3, foo: 'foo' },\n      queueName: 'childrenQueueName',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Child Job Values\nDESCRIPTION: Example of how to retrieve the values produced by child jobs using the getChildrenValues method of the Job class. This allows parent jobs to access the results of their children.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst values = await job.getChildrenValues();\n```\n\n----------------------------------------\n\nTITLE: Adding a Deduplicated Job in Throttle Mode (TypeScript)\nDESCRIPTION: Shows how to add a job with deduplication in Throttle Mode. The job will be deduplicated for a specified time period (TTL).\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/deduplication.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('Paint');\n\n// Add a job that will be deduplicated for 5 seconds.\nawait myQueue.add(\n  'house',\n  { color: 'white' },\n  { deduplication: { id: 'customValue', ttl: 5000 } },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Rate Limiting in BullMQ Pro Worker\nDESCRIPTION: Shows how to initialize a WorkerPro instance with group rate limiting configuration. Limits the number of jobs that can be processed per group within a specified time duration.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/rate-limiting.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPro } from '@taskforcesh/bullmq-pro';\n\nconst worker = new WorkerPro('myQueue', processFn, {\n    group: {\n      limit: {\n        max: 100,  // Limit to 100 jobs per second per group\n        duration: 1000,\n      }\n    },\n    connection\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Job to BullMQ Queue in NestJS\nDESCRIPTION: This snippet shows how to add a job to a BullMQ queue in a NestJS application. The job has a name 'sample' and includes payload data in JSON format.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/producers.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add('sample', {\n  foo: 'bar',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Reuse in BullMQ with TypeScript\nDESCRIPTION: This code demonstrates how to reuse Redis connections across multiple BullMQ queues. It creates shared client and subscriber connections while creating new bclient connections for each queue. This approach is useful when working with platforms that limit Redis connection counts such as Heroku.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/reusing-redis-connections.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { REDIS_URL } = process.env;\n\nconst Redis = require(\"ioredis\");\nconst client = new Redis(REDIS_URL);\nconst subscriber = new Redis(REDIS_URL);\n\nconst opts = {\n  // redisOpts here will contain at least a property of\n  // connectionName which will identify the queue based on its name\n  createClient: function (type, redisOpts) {\n    switch (type) {\n      case \"client\":\n        return client;\n      case \"subscriber\":\n        return subscriber;\n      case \"bclient\":\n        return new Redis(REDIS_URL, redisOpts);\n      default:\n        throw new Error(\"Unexpected connection type: \", type);\n    }\n  },\n};\n\nconst queueFoo = new Queue(\"foobar\", opts);\nconst queueQux = new Queue(\"quxbaz\", opts);\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Backoff Strategy to a Job in BullMQ\nDESCRIPTION: This snippet demonstrates how to apply a previously defined custom backoff strategy to a job when adding it to the queue. The job is configured to retry up to 3 times using the 'jitter' backoff strategy.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/custom-backoff-strategy.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmyQueue.add({foo: 'bar'}, {\n  attempts: 3,\n  backoff: {\n    type: 'jitter'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Repeatable Jobs with BullMQ\nDESCRIPTION: Demonstrates how to create repeatable jobs using both cron pattern and fixed interval approaches. Shows initialization of queue scheduler and queue with examples of daily and interval-based repeatable jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/repeatable.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue, QueueScheduler } from 'bullmq';\n\nconst myQueueScheduler = new QueueScheduler('Paint');\nconst myQueue = new Queue('Paint');\n\n// Repeat job once every day at 3:15 (am)\nawait myQueue.add(\n  'submarine',\n  { color: 'yellow' },\n  {\n    repeat: {\n      pattern: '0 15 3 * * *',\n    },\n  },\n);\n\n// Repeat job every 10 seconds but no more than 100 times\nawait myQueue.add(\n  'bird',\n  { color: 'bird' },\n  {\n    repeat: {\n      every: 10000,\n      limit: 100,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Returned Job Data in BullMQ with TypeScript\nDESCRIPTION: Sets up queue events to listen for job completion and access the returned value. This example shows how to retrieve the job by ID when it completes and access its returnvalue property.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/returning-job-data.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Job, QueueEvents, Queue } from 'bullmq';\n\nconst queue = new Queue('AsyncProc');\nconst queueEvents = new QueueEvents('AsyncProc');\n\nqueueEvents.on('completed', async ({ jobId: string }) => {\n  const job = await Job.fromId(queue, jobId);\n\n  console.log(job.returnvalue);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Prioritized Jobs in BullMQ Queue\nDESCRIPTION: Demonstrates how to add jobs to a BullMQ queue with different priority levels. Jobs are processed based on priority where lower numbers indicate higher priority. Shows adding multiple jobs with different priorities to a 'Paint' queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/prioritized.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('Paint');\n\nawait myQueue.add('wall', { color: 'pink' }, { priority: 10 });\nawait myQueue.add('wall', { color: 'brown' }, { priority: 5 });\nawait myQueue.add('wall', { color: 'blue' }, { priority: 7 });\n\n// The wall will be painted first brown, then blue and\n// finally pink.\n```\n\n----------------------------------------\n\nTITLE: Implementing Server A Message Queue with Bull in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up a message queue for Server A using Bull. It creates separate queues for sending and receiving messages, processes incoming messages, and sends a message to Server B.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/message-queue.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Queue = require('bull');\n\nconst sendQueue = new Queue('Server B');\nconst receiveQueue = new Queue('Server A');\n\nreceiveQueue.process(function (job, done) {\n  console.log('Received message', job.data.msg);\n  done();\n});\n\nsendQueue.add({ msg: 'Hello' });\n```\n\n----------------------------------------\n\nTITLE: Managing Child Jobs in TypeScript with BullMQ\nDESCRIPTION: This snippet shows how to add and wait for child jobs during processing using BullMQ in TypeScript. It uses the moveToWaitingChildren method and throws a WaitingChildrenError to signal that the job is waiting for children to complete.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/process-step-jobs.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WaitingChildrenError, Worker } from 'bullmq';\n\nenum Step {\n  Initial,\n  Second,\n  Third,\n  Finish,\n}\n\nconst worker = new Worker(\n  'parentQueueName',\n  async (job: Job, token?: string) => {\n    let step = job.data.step;\n    while (step !== Step.Finish) {\n      switch (step) {\n        case Step.Initial: {\n          await doInitialStepStuff();\n          await childrenQueue.add(\n            'child-1',\n            { foo: 'bar' },\n            {\n              parent: {\n                id: job.id,\n                queue: job.queueQualifiedName,\n              },\n            },\n          );\n          await job.updateData({\n            step: Step.Second,\n          });\n          step = Step.Second;\n          break;\n        }\n        case Step.Second: {\n          await doSecondStepStuff();\n          await childrenQueue.add(\n            'child-2',\n            { foo: 'bar' },\n            {\n              parent: {\n                id: job.id,\n                queue: job.queueQualifiedName,\n              },\n            },\n          );\n          await job.updateData({\n            step: Step.Third,\n          });\n          step = Step.Third;\n          break;\n        }\n        case Step.Third: {\n          const shouldWait = await job.moveToWaitingChildren(token);\n          if (!shouldWait) {\n            await job.updateData({\n              step: Step.Finish,\n            });\n            step = Step.Finish;\n            return Step.Finish;\n          } else {\n            throw new WaitingChildrenError();\n          }\n        }\n        default: {\n          throw new Error('invalid step');\n        }\n      }\n    }\n  },\n  { connection },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Worker with Delayed Execution in TypeScript\nDESCRIPTION: This example shows how to instantiate a Worker with the 'autorun' option set to false, allowing manual control over when the processor starts execution. It includes the same job processing logic as the previous example.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker, Job } from 'bullmq';\n\nconst worker = new Worker(\n  queueName,\n  async (job: Job) => {\n    // Optionally report some progress\n    await job.updateProgress(42);\n\n    // Optionally sending an object as progress\n    await job.updateProgress({ foo: 'bar' });\n\n    // Do something with job\n    return 'some value';\n  },\n  { autorun: false },\n);\n\nworker.run();\n```\n\n----------------------------------------\n\nTITLE: Limiting Job Repetitions in BullMQ\nDESCRIPTION: Demonstrates how to limit the number of times a job will be repeated using the limit option. The job will execute 10 times with 10-second intervals.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/repeat-options.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.upsertJobScheduler(\n  'limited-job',\n  {\n    every: 10000, // every 10 seconds\n    limit: 10, // limit to 10 executions\n  },\n  {\n    name: 'limited-execution-job',\n    data: { message: 'Limited runs' },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Job Options in BullMQ Queue\nDESCRIPTION: Demonstrates how to configure default job options at queue creation time, applying the same settings to all jobs added to the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/fifo.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst queue = new Queue('Paint', { defaultJobOptions: {\n  removeOnComplete: true, removeOnFail: 1000\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Jobs with a Worker in BullMQ using Python\nDESCRIPTION: Complete example of setting up a worker to process jobs from a queue. Includes signal handling for graceful shutdown and connection configuration options. The worker processes jobs asynchronously using a provided processor function.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/introduction.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Worker\nimport asyncio\nimport signal\n\nasync def process(job, job_token):\n    # job.data will include the data added to the queue\n    return doSomethingAsync(job)\n\nasync def main():\n\n    # Create an event that will be triggered for shutdown\n    shutdown_event = asyncio.Event()\n\n    def signal_handler(signal, frame):\n        print(\"Signal received, shutting down.\")\n        shutdown_event.set()\n\n    # Assign signal handlers to SIGTERM and SIGINT\n    signal.signal(signal.SIGTERM, signal_handler)\n    signal.signal(signal.SIGINT, signal_handler)\n\n    # Feel free to remove the connection parameter, if your redis runs on localhost\n    worker = Worker(\"myQueue\", process, {\"connection\": \"rediss://<user>:<password>@<host>:<port>\"})\n\n    # Wait until the shutdown event is set\n    await shutdown_event.wait()\n\n    # close the worker\n    print(\"Cleaning up worker...\")\n    await worker.close()\n    print(\"Worker shut down successfully.\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Listening for Job Progress Events in TypeScript\nDESCRIPTION: Shows how to capture progress events emitted during job processing. The progress can be a simple number or a complex object depending on the application's needs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nworker.on('progress', (job: Job, progress: number | object) => {\n  // Do something with the return value.\n});\n```\n\n----------------------------------------\n\nTITLE: Draining Jobs from BullMQ Queue in TypeScript\nDESCRIPTION: Demonstrates how to use the drain() method to remove all waiting or delayed jobs from a queue, excluding active, waiting-children, completed or failed jobs. Parent jobs will be kept in waiting-children status if they have pending children.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/removing-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('paint');\n\nawait queue.drain();\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Events Listener with BullMQ in NestJS\nDESCRIPTION: This code demonstrates how to create a Queue Events Listener class using the QueueEventsListener and OnQueueEvent decorators. The listener handles 'completed' events from a queue named 'queueName'.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/queue-events-listeners.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  QueueEventsListener,\n  QueueEventsHost,\n  OnQueueEvent,\n} from '@taskforcesh/nestjs-bullmq-pro';\n\n@QueueEventsListener('queueName')\nexport class TestQueueEvents extends QueueEventsHost {\n  @OnQueueEvent('completed')\n  onCompleted({\n    jobId,\n  }: {\n    jobId: string;\n    returnvalue: string;\n    prev?: string;\n  }) {\n    // do some stuff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BullMQ Producer with OpenTelemetry\nDESCRIPTION: Creates a queue producer that adds jobs in bulk using BullMQ with OpenTelemetry integration. Configures connection to Redis and telemetry settings.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/running-a-simple-example.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from \"bullmq\";\nimport { BullMQOtel } from \"bullmq-otel\";\n\nconst queue = new Queue(\"myQueue\", {\n  connection: {\n    host: \"127.0.0.1\",\n    port: 6379,\n  },\n  telemetry: new BullMQOtel(\"simple-guide\"),\n});\n\nconst jobsBulk = Array.from({ length: 5 }, (_, i) => i);\n\n(async () => {\n  for (let i = 0; i < 10; i++) {\n    await queue.addBulk(\n      jobsBulk.map((j) => ({\n        name: `myJob ${j}`,\n        data: { i: j },\n        opts: { attempts: 2, backoff: 1000 },\n      }))\n    );\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Job Priority Consideration When Retrying Jobs\nDESCRIPTION: Fix to consider job priority when moving a job back to the waiting state after a retry. This ensures that retried jobs maintain their priority level in the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- **retry-job:** Consider priority when moving job to wait (python) ([#1969](https://github.com/taskforcesh/bullmq/issues/1969)) ([`e753855`](https://github.com/taskforcesh/bullmq/commit/e753855eef248da73a5e9f6b18f4b79319dc2f86))\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker for Complete Job Removal in BullMQ\nDESCRIPTION: Shows how to configure a BullMQ worker to automatically remove all jobs upon completion or failure by setting removeOnFail count to 0.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/auto-removal-of-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myWorker = new Worker(\n  'myQueueName',\n  async job => {\n    // do some work\n  },\n  {\n    connection,\n    removeOnFail: { count: 0 }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Force Pausing Worker in BullMQ\nDESCRIPTION: Demonstrates how to immediately pause a worker without waiting for current jobs to complete by passing true to the pause method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/pausing-queues.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait myWorker.pause(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Batch Options in BullMQ Worker (TypeScript)\nDESCRIPTION: This snippet shows how to configure a BullMQ worker with advanced batch options, including size, minSize, and timeout. It sets a maximum batch size of 10, a minimum of 5 jobs, and a 30-second timeout for batch accumulation.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/batches.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new WorkerPro(\n  'My Queue',\n  async (job: JobPro) => {\n    const batch = job.getBatch();\n    for (let i = 0; i < batch.length; i++) {\n      const batchedJob = batch[i];\n      await doSomethingWithBatchedJob(batchedJob);\n    }\n  },\n  {\n    connection,\n    batch: {\n      size: 10,      // Maximum jobs per batch\n      minSize: 5,    // Wait for at least 5 jobs\n      timeout: 30_000 // Wait up to 30 seconds\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Step-Based Job Processing in Python with BullMQ\nDESCRIPTION: This snippet shows how to implement a step-based job processing system using BullMQ in Python. It uses an Enum to define steps and conditional statements to handle different processing stages, updating the job data between steps.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/process-step-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Step(int, Enum):\n  Initial = 1\n  Second = 2\n  Finish = 3\n\nasync def process(job: Job, token: str):\n  step = job.data.get(\"step\")\n  while step != Step.Finish:\n    if step == Step.Initial:\n      await doInitialStepStuff()\n      await job.updateData({\n          \"step\": Step.Second\n      })\n      step = Step.Second\n    elif step == Step.Second:\n      await doSecondStepStuff()\n      await job.updateData({\n          \"step\": Step.Finish\n      })\n      step = Step.Finish\n    else:\n      raise Exception(\"invalid step\")\n\nworker = Worker(\"queueName\", process, {\"connection\": connection})\n```\n\n----------------------------------------\n\nTITLE: Adding a Deduplicated Job in Simple Mode (TypeScript)\nDESCRIPTION: Demonstrates how to add a job with deduplication in Simple Mode. The job will be deduplicated until it is completed or failed.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/deduplication.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Add a job that will be deduplicated as this record is not finished (completed or failed).\nawait myQueue.add(\n  'house',\n  { color: 'white' },\n  { deduplication: { id: 'customValue' } },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Parent Functionality with FlowProducer in BullMQ\nDESCRIPTION: This example demonstrates how to create a job tree with the failParentOnFailure option using BullMQ's FlowProducer. The code sets up a root job with two children, where one child has failParentOnFailure enabled and contains two grandchildren with different failure behavior configurations.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/fail-parent.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FlowProducer } from 'bullmq';\n\nconst flow = new FlowProducer({ connection });\n\nconst originalTree = await flow.add({\n  name: 'root-job',\n  queueName: 'topQueueName',\n  data: {},\n  children: [\n    {\n      name,\n      data: { idx: 0, foo: 'bar' },\n      queueName: 'childrenQueueName',\n      // This child will fail its parent if it fails\n      opts: { failParentOnFailure: true },\n      children: [\n        {\n          name,\n          data: { idx: 1, foo: 'bah' },\n          queueName: 'grandChildrenQueueName',\n          // This grandchild will fail its parent if it fails\n          opts: { failParentOnFailure: true },\n        },\n        {\n          name,\n          data: { idx: 2, foo: 'baz' },\n          queueName: 'grandChildrenQueueName',\n          // No failParentOnFailure; its failure won't affect the parent\n        },\n      ],\n    },\n    {\n      name,\n      data: { idx: 3, foo: 'foo' },\n      queueName: 'childrenQueueName',\n      // No failParentOnFailure; its failure won't affect the parent\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting BullMQ Queue in NestJS Service\nDESCRIPTION: This code demonstrates how to inject a BullMQ queue into a NestJS service using the @InjectQueue decorator. This pattern allows the service to act as a job producer for the specified queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/producers.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class AudioService {\n  constructor(@InjectQueue('audio') private audioQueue: Queue) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Deduplicated Events (TypeScript)\nDESCRIPTION: Demonstrates how to listen for and handle deduplicated events using the QueueEvents class from BullMQ.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/deduplication.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueEvents } from 'bullmq';\n\nconst queueEvents = new QueueEvents('myQueue');\n\nqueueEvents.on('deduplicated', ({ jobId, deduplicationId, deduplicatedJobId }, id) => {\n  console.log(`Job ${deduplicatedJobId} was deduplicated due to existing job ${jobId} \n  with deduplication ID ${deduplicationId}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting BullMQ Metrics with Global Variables\nDESCRIPTION: This advanced example demonstrates how to include global variables as labels when exporting BullMQ metrics. It adds 'env' and 'server' labels to each metric, which is useful for distinguishing between different environments or servers in Prometheus or Grafana.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/metrics/prometheus.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport http from 'http';\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('my-queue');\n\nconst server = http.createServer(\n  async (req: http.IncomingMessage, res: http.ServerResponse) => {\n    try {\n      if (req.url === '/metrics' && req.method === 'GET') {\n        const globalVariables = { env: 'Production', server: '1' };\n        const metrics = await queue.exportPrometheusMetrics(globalVariables);\n\n        res.writeHead(200, {\n          'Content-Type': 'text/plain',\n          'Content-Length': Buffer.byteLength(metrics),\n        });\n        res.end(metrics);\n      } else {\n        res.writeHead(404);\n        res.end('Not Found');\n      }\n    } catch (err: unknown) {\n      res.writeHead(500);\n      res.end(`Error: ${err instanceof Error ? err.message : 'Unknown error'}`);\n    }\n  },\n);\n\nconst PORT = process.env.PORT || 3000;\n\nserver.listen(PORT, () => {\n  console.log(`Prometheus metrics server running on port ${PORT}`);\n  console.log(`Metrics available at http://localhost:${PORT}/metrics`);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Global Concurrency Value in BullMQ with TypeScript\nDESCRIPTION: Retrieves the current global concurrency setting from a BullMQ queue. This code fetches the current limit of how many jobs can be processed in parallel across all worker instances.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/global-concurrency.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst globalConcurrency = await queue.getGlobalConcurrency();\n```\n\n----------------------------------------\n\nTITLE: Validating Environment Variables in BullMQ for TypeScript\nDESCRIPTION: This snippet demonstrates how to properly validate environment variables before using them in BullMQ. It checks if the QUEUE_NAME variable is defined and throws an error if it's missing or empty, preventing Lua script errors.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/troubleshooting.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst queueName = process.env.QUEUE_NAME;\nif (!queueName) {\n  throw new Error(\"QUEUE_NAME is not defined or is empty.\");\n}\n\nconst queue = new Queue(queueName, { ... });\n```\n\n----------------------------------------\n\nTITLE: Removing a Job from BullMQ Queue in Python\nDESCRIPTION: This code snippet shows how to create a queue, add a job to it, and then remove that job using BullMQ in Python. It imports the Queue class from bullmq, creates a new queue named 'paint', adds a job with the name 'wall' and data {'color': 1}, and then removes the job.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/removing-job.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Queue\n\nqueue = Queue('paint')\n\njob = await queue.add('wall', {'color': 1})\n\nawait job.remove()\n```\n\n----------------------------------------\n\nTITLE: Creating Job Scheduler with Template in BullMQ\nDESCRIPTION: Shows how to create a job scheduler with a template that includes job name, data, and options. This example creates jobs daily at 3:15 AM with specific backoff settings and retry attempts.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create jobs every day at 3:15 (am)\nconst firstJob = await queue.upsertJobScheduler(\n  'my-scheduler-id',\n  { pattern: '0 15 3 * * *' },\n  {\n    name: 'my-job-name',\n    data: { foo: 'bar' },\n    opts: {\n      backoff: 3,\n      attempts: 5,\n      removeOnFail: 1000,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Reusing IORedis Connection for Multiple Queue Instances\nDESCRIPTION: Shows how to reuse a single IORedis connection across multiple Queue instances for efficient connection management.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/connections.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\nimport IORedis from 'ioredis';\n\nconst connection = new IORedis();\n\n// Reuse the ioredis instance in 2 different producers\nconst myFirstQueue = new Queue('myFirstQueue', { connection });\nconst mySecondQueue = new Queue('mySecondQueue', { connection });\n```\n\n----------------------------------------\n\nTITLE: Adding Grouped Jobs to a Queue in TypeScript using BullMQ Pro\nDESCRIPTION: This snippet demonstrates how to add jobs to a queue with group assignments using the QueuePro class from BullMQ Pro. It shows the creation of two jobs assigned to different groups.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueuePro } from '@taskforcesh/bullmq-pro';\n\nconst queue = new QueuePro();\n\nconst job1 = await queue.add(\n  'test',\n  { foo: 'bar1' },\n  {\n    group: {\n      id: 1,\n    },\n  },\n);\n\nconst job2 = await queue.add(\n  'test',\n  { foo: 'bar2' },\n  {\n    group: {\n      id: 2,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Queue Rate Limit TTL in BullMQ\nDESCRIPTION: Demonstrates how to check if a queue is rate limited using the getRateLimitTtl method. Returns the time-to-live value for the rate limit.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/rate-limiting.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('myQueue', { connection });\nconst maxJobs = 100;\n\nconst ttl = await queue.getRateLimitTtl(maxJobs);\n\nif (ttl > 0) {\n  console.log('Queue is rate limited');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Worker with a Sandboxed Processor in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a BullMQ Worker that uses a sandboxed processor file. The processor file path is passed to the Worker constructor to run jobs in an isolated process.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/sandboxed-processors.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq'\n\nconst processorFile = path.join(__dirname, 'my_procesor.js');\nworker = new Worker(queueName, processorFile);\n```\n\n----------------------------------------\n\nTITLE: Injecting BullMQ FlowProducer in NestJS Service\nDESCRIPTION: This example shows how to inject a BullMQ FlowProducer into a NestJS service using the @InjectFlowProducer decorator. Flow producers allow creating job workflows with parent-child relationships.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/producers.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { InjectFlowProducer } from '@nestjs/bullmq';\nimport { FlowProducer } from 'bullmq';\n\n@Injectable()\nexport class FlowService {\n  constructor(\n    @InjectFlowProducer('flow') private fooFlowProducer: FlowProducer,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Backoff Strategy with Options in BullMQ\nDESCRIPTION: This example implements a more complex 'binaryExponential' backoff strategy that accepts custom options. The strategy calculates delay based on the number of attempts, a base delay value, and a truncation limit, all configurable through options.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/custom-backoff-strategy.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst Queue = require(\"bull\");\n\nconst myQueue = new Queue(\"Server B\", {\n  settings: {\n    backoffStrategies: {\n      // truncated binary exponential backoff\n      binaryExponential: function (attemptsMade, err, options) {\n        // Options can be undefined, you need to handle it by yourself\n        if (!options) {\n          options = {};\n        }\n        const delay = options.delay || 1000;\n        const truncate = options.truncate || 1000;\n        console.error({ attemptsMade, err, options });\n        return Math.round(\n          Math.random() *\n            (Math.pow(2, Math.min(attemptsMade, truncate)) - 1) *\n            delay\n        );\n      },\n    },\n  },\n});\n\nmyQueue.add(\n  { foo: \"bar\" },\n  {\n    attempts: 10,\n    backoff: {\n      type: \"binaryExponential\",\n      options: {\n        delay: 500,\n        truncate: 5,\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ in NestJS AppModule\nDESCRIPTION: Setting up the BullModule in the root AppModule with Redis connection details. This establishes the connection to Redis which BullMQ uses as its backend.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bullmq';\n\n@Module({\n  imports: [\n    BullModule.forRoot({\n      connection: {\n        host: 'localhost',\n        port: 6379,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Setting Local Group Rate Limit with QueuePro in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a QueuePro instance and set a specific rate limit for a group. It limits the group 'my group' to a maximum of 100 jobs per second. This method allows overriding the default rate limit for specific groups.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/local-group-rate-limit.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueuePro } from '@taskforcesh/bullmq-pro';\n\nconst queue = new QueuePro('myQueue', { connection });\nconst groupId = 'my group';\nconst maxJobsPerDuration = 100;\n\nconst duration = 1000; // duration in ms.\nawait queue.setGroupRateLimit(groupId, maxJobsPerDuration, duration);\n```\n\n----------------------------------------\n\nTITLE: Changing Delay of an Existing Job in TypeScript with BullMQ\nDESCRIPTION: This snippet demonstrates how to change the delay of an existing job using the changeDelay method in BullMQ. It creates a job with an initial delay of 2000 milliseconds and then changes it to 4000 milliseconds.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/delayed.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await Job.create(queue, 'test', { foo: 'bar' }, { delay: 2000 });\n\nawait job.changeDelay(4000);\n```\n\n----------------------------------------\n\nTITLE: Getting Job Dependencies\nDESCRIPTION: Code example showing how to retrieve the direct dependencies (children) of a given job using the getDependencies method of the Job class.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst dependencies = await job.getDependencies();\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Creation and Job Addition in BullMQ\nDESCRIPTION: Example showing how to create a queue and add a basic job with payload data. Demonstrates the fundamental usage of BullMQ in Python.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/README.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Queue\n\nqueue = Queue('my-queue')\n\njob = await queue.add('my-job', {'foo': 'bar'})\n\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Job Scheduler in BullMQ\nDESCRIPTION: Demonstrates how to create a basic job scheduler that generates a new job every 1000 milliseconds using the upsertJobScheduler method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Creates a new Job Scheduler that generates a job every 1000 milliseconds (1 second)\nconst firstJob = await queue.upsertJobScheduler('my-scheduler-id', {\n  every: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing QueueScheduler in TypeScript\nDESCRIPTION: Demonstrates how to create and close a QueueScheduler instance for managing delayed and stalled jobs. The scheduler is instantiated with a queue name and should be properly closed during shutdown.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queuescheduler.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueScheduler } from 'bullmq';\n\nconst queueScheduler = new QueueScheduler('test');\n\n// Later, when shuting down gracefully\nawait queueScheduler.close();\n```\n\n----------------------------------------\n\nTITLE: Creating a BullMQ Processor in NestJS\nDESCRIPTION: Implementation of a job processor using the @Processor decorator. This class extends WorkerHost and processes jobs from the specified queue, with an event handler for job completion.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/README.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, WorkerHost, OnWorkerEvent } from '@nestjs/bullmq';\nimport { Job } from 'bullmq';\n\n@Processor('queueName')\nclass TestProcessor extends WorkerHost {\n  async process(job: Job<any, any, string>): Promise<any> {\n    // do some stuff\n  }\n\n  @OnWorkerEvent('completed')\n  onCompleted() {\n    // do some stuff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Queue in NestJS BullMQ\nDESCRIPTION: Example of how to register a queue using BullModule.registerQueue(). This is necessary to work with specific named queues in your application.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.registerQueue({\n  name: 'queueName',\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Job Scheduler in BullMQ with TypeScript\nDESCRIPTION: Demonstrates how to remove a specific job scheduler from a queue using the removeJobScheduler method. The method returns true if a scheduler with the given ID was successfully removed, or false if no scheduler was found.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/manage-job-schedulers.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Remove a job scheduler with ID 'scheduler-123'\nconst result = await queue.removeJobScheduler('scheduler-123');\nconsole.log(\n  result ? 'Scheduler removed successfully' : 'Missing Job Scheduler',\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Observable Worker in BullMQ Pro\nDESCRIPTION: This example demonstrates a basic implementation of an Observable-based worker in BullMQ Pro. The worker emits multiple values sequentially, with the final value emitted after a delay, and includes proper cleanup via the unsubscribe function.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/observables/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPro } from \"@taskforcesh/bullmq-pro\"\nimport { Observable } from \"rxjs\"\n\nconst processor = async () => {\n  return new Observable<number>(subscriber => {\n    subscriber.next(1);\n    subscriber.next(2);\n    subscriber.next(3);\n    const intervalId = setTimeout(() => {\n      subscriber.next(4);\n      subscriber.complete();\n    }, 500);\n\n    // Provide a way of canceling and disposing the interval resource\n    return function unsubscribe() {\n      clearInterval(intervalId);\n    };\n  });\n};\n\nconst worker = new WorkerPro(queueName, processor, { connection });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prioritized Jobs in BullMQ\nDESCRIPTION: Examples of how to retrieve prioritized jobs using getJobs and getPrioritized methods in BullMQ.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/prioritized.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst jobs = await queue.getJobs(['prioritized']);\n\nconst jobs2 = await queue.getPrioritized();\n```\n\n----------------------------------------\n\nTITLE: Configuring Workers with Shared IORedis Connection\nDESCRIPTION: Illustrates how to configure multiple Workers to share a single IORedis connection with maxRetriesPerRequest set to null for persistent connections.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/connections.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\nimport IORedis from 'ioredis';\n\nconst connection = new IORedis({ maxRetriesPerRequest: null });\n\n// Reuse the ioredis instance in 2 different consumers\nconst myFirstWorker = new Worker('myFirstWorker', async job => {}, {\n  connection,\n});\nconst mySecondWorker = new Worker('mySecondWorker', async job => {}, {\n  connection,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Job Retry Options in Queue Configuration in TypeScript\nDESCRIPTION: This example shows how to configure default retry options at the queue level. All jobs added to this queue will inherit these retry settings unless explicitly overridden.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/retrying-failing-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('foo', {\n  defaultJobOptions: {\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 1000,\n    },\n  },\n});\n\nawait queue.add('test-retry', { foo: 'bar' });\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Jobs with Error Information in TypeScript\nDESCRIPTION: Illustrates how to listen for job failure events on a worker. When a job fails, the listener provides access to both the job object and the error that caused the failure.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nworker.on('failed', (job: Job, error: Error) => {\n  // Do something with the return value.\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Flow Producer in NestJS BullMQ\nDESCRIPTION: Example of how to register a flow producer using BullModule.registerFlowProducer(). Flow producers allow creating workflows of jobs with dependencies.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/README.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.registerFlowProducer({\n  name: 'flowProducerName',\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Limited Flow Tree in BullMQ\nDESCRIPTION: Shows how to retrieve a limited job tree by specifying depth and maximum children per node. This is useful when dealing with large job hierarchies where you want to restrict the amount of data retrieved.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/get-flow-tree.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst limitedTree = await flow.getFlow({\n  id: topJob.id,\n  queueName: 'topQueueName',\n  depth: 1, // get only the first level of children\n  maxChildren: 2, // get only 2 children per node\n});\n\nconst { children, job } = limitedTree;\n```\n\n----------------------------------------\n\nTITLE: Implementing Maximum Group Size Constraint in BullMQ Pro with TypeScript\nDESCRIPTION: This snippet demonstrates how to set a maximum group size when adding jobs to a queue in BullMQ Pro. It shows the proper way to define the maxSize option in the group configuration and how to catch the GroupMaxSizeExceededError exception when the group has reached its maximum capacity.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/max-group-size.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueuePro, GroupMaxSizeExceededError } from '@taskforcesh/bullmq-pro';\n\nconst queue = new QueuePro('myQueue', { connection });\nconst groupId = 'my group';\ntry {\n  await queue.add('paint', { foo: 'bar' }, {\n      group: {\n        id: groupId,\n        maxSize: 7,\n      },\n    });\n} catch (err) {\n  if (err instanceof GroupMaxSizeExceededError){\n    console.log(`Job discarded for group ${groupId}`)\n  } else {\n    throw err;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Active Jobs Count for Specific Group\nDESCRIPTION: Shows how to retrieve the count of active jobs for a specific group using the getGroupActiveCount method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/getters.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst activeCount = await queue.getGroupActiveCount(groupId);\n```\n\n----------------------------------------\n\nTITLE: Pausing Worker Locally in BullMQ\nDESCRIPTION: Shows how to pause a specific worker instance locally. The worker will finish processing current jobs but won't pick up new ones until unpaused.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/pausing-queues.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait myWorker.pause();\n```\n\n----------------------------------------\n\nTITLE: Pausing Queue Globally in BullMQ\nDESCRIPTION: Demonstrates how to pause a queue globally using the pause() method on a queue instance. When paused globally, no workers will pick up new jobs from the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/pausing-queues.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.pause();\n```\n\n----------------------------------------\n\nTITLE: Stopping Job Retries with UnrecoverableError in BullMQ\nDESCRIPTION: This snippet demonstrates how to use UnrecoverableError to prevent job retries in BullMQ. It shows the creation of a worker that throws an UnrecoverableError and the addition of a job with retry settings that will be overridden.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/stop-retrying-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker, UnrecoverableError } from 'bullmq';\n\nconst worker = new Worker(\n  'foo',\n  async job => {\n    doSomeProcessing();\n    throw new UnrecoverableError('Unrecoverable');\n  },\n  { connection },\n);\n\nawait queue.add(\n  'test-retry',\n  { foo: 'bar' },\n  {\n    attempts: 3,\n    backoff: 1000,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Processing Loop in BullMQ\nDESCRIPTION: Creates an infinite loop that continuously processes jobs from a queue one by one. Each job is moved to completed or failed status based on processing results, with automatic fetching of the next job.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/manually-fetching-jobs.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker('my-queue');\n\nconst token = 'my-token';\nlet job;\n\nwhile (1) {\n  let jobData = null,\n    jobId,\n    success;\n\n  if (job) {\n    // Use job.data to process this particular job.\n    // and set success variable if succeeded\n\n    if (success) {\n      [jobData, jobId] = await job.moveToCompleted('some return value', token);\n    } else {\n      await job.moveToFailed(new Error('some error message'), token);\n    }\n\n    if (jobData) {\n      job = Job.fromJSON(worker, jobData, jobId);\n    } else {\n      job = null;\n    }\n  } else {\n    if (!job) {\n      job = await worker.getNextJob(token);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flow Producer in NestJS with BullMQ Pro\nDESCRIPTION: Demonstrates how to inject and set up a flow producer service in NestJS using BullMQ Pro. Shows the usage of @InjectFlowProducer decorator.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/producers.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { FlowProducerPro } from 'taskforcesh/bullmq-pro';\nimport { InjectFlowProducer } from '@taskforcesh/nestjs-bullmq-pro';\n\n@Injectable()\nexport class FlowService {\n  constructor(\n    @InjectFlowProducer('flow') private fooFlowProducer: FlowProducerPro,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Individual Job Events in BullMQ Batch Processing (TypeScript)\nDESCRIPTION: This snippet illustrates how to listen to events for individual jobs processed in a batch using BullMQ. It uses a QueueEventsPro instance to listen for completed events on individual jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/batches.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueEventsPro } from '@taskforcesh/bullmq-pro';\n\nconst queueEvents = new QueueEventsPro(queueName, { connection });\nqueueEvents.on('completed', (jobId, err) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Pattern for Sandboxed Processors in TypeScript\nDESCRIPTION: This code demonstrates a two-stage timeout pattern for BullMQ sandboxed processors. It includes a soft kill timeout for cleanup operations (5 seconds) and a hard kill timeout (30 seconds) that terminates the process. The pattern handles edge cases with a completion flag and ensures timeouts are cleared before the function returns.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/timeout-for-sandboxed-processors.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This processor will timeout in 30 seconds.\nconst MAX_TTL = 30_000;\n\n// The processor will have a cleanup timeout of 5 seconds.\nconst CLEANUP_TTL = 5_000;\n\n// We use a custom exit code to mark the TTL, but any would do in practice\n// as long as it is < 256 (Due to Unix limitation to 8 bits per exit code)\nconst TTL_EXIT_CODE = 10;\n\nmodule.exports = async function (job) {\n  let hasCompleted = false;\n  const harKillTimeout = setTimeout(() => {\n    if (!hasCompleted) {\n      process.exit(TTL_EXIT_CODE);\n    }\n  }, MAX_TTL);\n\n  const softKillTimeout = setTimeout(async () => {\n    if (!hasCompleted) {\n      await doCleanup(job);\n    }\n  }, CLEANUP_TTL);\n\n  try {\n    // If doAsyncWork is CPU intensive and blocks NodeJS loop forever,\n    // the timeout will never be triggered either.\n    await doAsyncWork(job);\n    hasCompleted = true;\n  } finally {\n    // Important to clear the timeouts before returning as this process will be reused.\n    clearTimeout(harKillTimeout);\n    clearTimeout(softKillTimeout);\n  }\n};\n\nconst doAsyncWork = async job => {\n  // Simulate a long running operation.\n  await new Promise(resolve => setTimeout(resolve, 10000));\n};\n\nconst doCleanup = async job => {\n  // Simulate a cleanup operation.\n  await job.updateProgress(50);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Promises with Bull Queue in JavaScript\nDESCRIPTION: Shows how to use promises instead of callbacks when processing jobs in Bull. This demonstrates return values, error handling, and promise chaining for asynchronous job processing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvideoQueue.process(function (job) {\n  // don't forget to remove the done callback!\n  // Simply return a promise\n  return fetchVideo(job.data.url).then(transcodeVideo);\n\n  // Handles promise rejection\n  return Promise.reject(new Error(\"error transcoding\"));\n\n  // Passes the value the promise is resolved with to the \"completed\" event\n  return Promise.resolve({ framerate: 29.5 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\"some unexpected error\");\n  // same as\n  return Promise.reject(new Error(\"some unexpected error\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Rate Limit Key in BullMQ\nDESCRIPTION: Shows how to remove a rate limit key to reset the rate limiting counter and allow workers to process jobs again.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/rate-limiting.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('myQueue', { connection });\n\nawait queue.removeRateLimitKey();\n```\n\n----------------------------------------\n\nTITLE: Getting Job Counts in BullMQ\nDESCRIPTION: Demonstrates how to retrieve the count of jobs in various statuses using the getJobCounts method. This allows monitoring of jobs in wait, completed, failed, and other statuses.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/getters.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('Paint');\n\nconst counts = await myQueue.getJobCounts('wait', 'completed', 'failed');\n\n// Returns an object like this { wait: number, completed: number, failed: number }\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Queue\n\nmyQueue = Queue('Paint')\n\ncounts = await myQueue.getJobCounts('wait', 'completed', 'failed')\n\n# Returns an object like this { wait: number, completed: number, failed: number }\n```\n\n----------------------------------------\n\nTITLE: Managing Child Jobs in Python with BullMQ\nDESCRIPTION: This snippet demonstrates how to add and wait for child jobs during processing using BullMQ in Python. It uses the moveToWaitingChildren method and raises a WaitingChildrenError to signal that the job is waiting for children to complete.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/process-step-jobs.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Worker, WaitingChildrenError\nfrom enum import Enum\n\nclass Step(int, Enum):\n  Initial = 1\n  Second = 2\n  Third = 3\n  Finish = 4\n\nasync def process(job: Job, token: str):\n  step = job.data.get(\"step\")\n  while step != Step.Finish:\n    if step == Step.Initial:\n      await doInitialStepStuff()\n      await children_queue.add('child-1', {\"foo\": \"bar\" },{\n        \"parent\": {\n            \"id\": job.id,\n            \"queue\": job.queueQualifiedName\n        }\n      })\n      await job.updateData({\n          \"step\": Step.Second\n      })\n      step = Step.Second\n    elif step == Step.Second:\n      await doSecondStepStuff()\n      await children_queue.add('child-2', {\"foo\": \"bar\" },{\n        \"parent\": {\n          \"id\": job.id,\n          \"queue\": job.queueQualifiedName\n        }\n      })\n      await job.updateData({\n          \"step\": Step.Third\n      })\n      step = Step.Third\n    elif step == Step.Third:\n      should_wait = await job.moveToWaitingChildren(token, {})\n      if not should_wait:\n        await job.updateData({\n            \"step\": Step.Finish\n        })\n        step = Step.Finish\n        return Step.Finish\n      else:\n        raise WaitingChildrenError\n    else:\n      raise Exception(\"invalid step\")\n\nworker = Worker(\"parentQueueName\", process, {\"connection\": connection})\n```\n\n----------------------------------------\n\nTITLE: Extending Job Lock Duration in BullMQ\nDESCRIPTION: Demonstrates how to manually extend the lock duration of a job to prevent it from being moved back to the waiting list when processing takes longer than the default lock time.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/manually-fetching-jobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = (await worker.getNextJob(token)) as Job;\n\n// Extend the lock 30 more seconds\nawait job.extendLock(token, 30000);\n```\n\n----------------------------------------\n\nTITLE: Counting Group Jobs in BullMQ Pro Queue\nDESCRIPTION: Demonstrates how to get the total count of jobs across multiple groups using the getGroupsJobsCount method. Takes a parameter specifying the number of groups to process in each iteration.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/getters.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueuePro } from '@taskforcesh/bullmq-pro';\n\nconst queue = new QueuePro('myQueue', { connection });\nconst groupId = 'my group';\nconst count = await queue.getGroupsJobsCount(1000); // 1000 groups in each iteration\n```\n\n----------------------------------------\n\nTITLE: Setting Job Retention Counts in BullMQ\nDESCRIPTION: Demonstrates how to configure a BullMQ worker to keep a specific number of completed and failed jobs, with different retention counts for each type.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/auto-removal-of-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myWorker = new Worker(\n  'myQueueName',\n  async job => {\n    // do some work\n  },\n  {\n    connection,\n    removeOnComplete: { count: 1000 },\n    removeOnFail: { count: 5000 }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Stalled Job Checker in BullMQ\nDESCRIPTION: Shows how to start the stalled job checker to automatically move stalled jobs back to wait or failed status. The checker runs periodically based on the stalledInterval option.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/manually-fetching-jobs.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait worker.startStalledCheckTimer()\n```\n\n----------------------------------------\n\nTITLE: Configuring Age-based Job Retention in BullMQ\nDESCRIPTION: Shows how to set up age-based job retention in BullMQ, combining both age and count limits for completed jobs while keeping failed jobs for a longer duration.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/auto-removal-of-jobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myWorker = new Worker(\n  'myQueueName',\n  async job => {\n    // do some work\n  },\n  {\n    connection,\n    removeOnComplete: {\n      age: 3600, // keep up to 1 hour\n      count: 1000, // keep up to 1000 jobs\n    },\n    removeOnFail: {\n      age: 24 * 3600, // keep up to 24 hours\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom Backoff Strategy in BullMQ\nDESCRIPTION: This example shows how to define a custom 'jitter' backoff strategy in BullMQ. The strategy function receives the number of attempts made and the error that caused the failure, and returns a delay time with some randomness for retrying the job.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/custom-backoff-strategy.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Queue = require('bull');\n\nconst myQueue = new Queue('Server B', {\n  settings: {\n    backoffStrategies: {\n      jitter: function (attemptsMade, err) {\n        return 5000 + Math.random() * 500;\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Rate Limiting with RateLimitError in BullMQ\nDESCRIPTION: This snippet shows how to implement manual rate limiting using RateLimitError in BullMQ. It includes a worker that checks for rate limiting, applies it if necessary, and handles job attempts. It also demonstrates the use of a limiter in the worker options.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/stop-retrying-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker, RateLimitError, UnrecoverableError } from 'bullmq';\n\nconst worker = new Worker(\n  'myQueue',\n  async job => {\n    const [isRateLimited, duration] = await doExternalCall();\n    if (isRateLimited) {\n      await queue.rateLimit(duration);\n      if (job.attemptsStarted >= job.opts.attempts) {\n        throw new UnrecoverableError('Unrecoverable');\n      }\n      // Do not forget to throw this special exception,\n      // since we must differentiate this case from a failure\n      // in order to move the job to wait again.\n      throw new RateLimitError();\n    }\n  },\n  {\n    connection,\n    limiter: {\n      max: 1,\n      duration: 500,\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting for BullMQ Queue\nDESCRIPTION: Demonstrates how to implement rate limiting by moving a job back to the wait status. This is useful when a queue is being rate limited and jobs need to be processed at a controlled pace.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/manually-fetching-jobs.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker('my-queue', null, { connection, prefix });\nconst token = 'my-token';\nawait Job.create(queue, 'test', { foo: 'bar' });\nconst job = (await worker.getNextJob(token)) as Job;\n\nawait queue.rateLimit(60000);\nawait job.moveToWait(token);\n```\n\n----------------------------------------\n\nTITLE: Handling Individual Job Failures in BullMQ Batch Processing (TypeScript)\nDESCRIPTION: This snippet demonstrates how to handle failures for individual jobs within a batch in BullMQ. It uses a try-catch block to process each job and marks failed jobs using the setAsFailed method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/batches.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new WorkerPro(\n  'My Queue',\n  async (job: JobPro) => {\n    const batch = job.getBatch();\n\n    for (let i = 0; i < batch.length; i++) {\n      const batchedJob = batch[i];\n      try {\n        await doSomethingWithBatchedJob(batchedJob);\n      } catch (err) {\n        batchedJob.setAsFailed(err);\n      }\n    }\n  },\n  { connection, batch: { size: 10 } },\n);\n```\n\n----------------------------------------\n\nTITLE: Keeping Jobs Based on Age in BullMQ (TypeScript)\nDESCRIPTION: This snippet illustrates how to configure job retention based on age and count. It keeps completed jobs up to 1 hour old (max 1000) and failed jobs up to 24 hours old.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/auto-removal-of-jobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.add(\n  'test',\n  { foo: 'bar' },\n  {\n    removeOnComplete: {\n      age: 3600, // keep up to 1 hour\n      count: 1000, // keep up to 1000 jobs\n    },\n    removeOnFail: {\n      age: 24 * 3600, // keep up to 24 hours\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Queue Events Listener in NestJS with BullMQ\nDESCRIPTION: This snippet demonstrates how to create a queue events listener class using the QueueEventsListener decorator. It shows how to listen for the 'completed' event on a queue named 'queueName' using the OnQueueEvent decorator.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/queue-events-listeners.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  QueueEventsListener,\n  QueueEventsHost,\n  OnQueueEvent,\n} from '@nestjs/bullmq';\n\n@QueueEventsListener('queueName')\nexport class TestQueueEvents extends QueueEventsHost {\n  @OnQueueEvent('completed')\n  onCompleted({\n    jobId,\n  }: {\n    jobId: string;\n    returnvalue: string;\n    prev?: string;\n  }) {\n    // do some stuff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Event Trimming in BullMQ with TypeScript\nDESCRIPTION: Example of how to manually trim the event stream in a BullMQ queue using TypeScript. The trimEvents method allows limiting the number of events stored in Redis streams to prevent excessive memory usage.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/events/README.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst queue = new Queue('paint');\n\nawait queue.trimEvents(10); // leaves 10 events\n```\n\n----------------------------------------\n\nTITLE: Using JobId with Repeatable Jobs in BullMQ\nDESCRIPTION: Demonstrates how to use jobId option with repeatable jobs to differentiate between similar jobs. Shows configuration for multiple repeatable jobs with unique identifiers.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/repeatable.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue, QueueScheduler } from 'bullmq';\n\nconst myQueueScheduler = new QueueScheduler('Paint');\nconst myQueue = new Queue('Paint');\n\n// Repeat job every 10 seconds but no more than 100 times\nawait myQueue.add(\n  'bird',\n  { color: 'bird' },\n  {\n    repeat: {\n      every: 10000,\n      limit: 100,\n    },\n    jobId: 'colibri',\n  },\n);\n\nawait myQueue.add(\n  'bird',\n  { color: 'bird' },\n  {\n    repeat: {\n      every: 10000,\n      limit: 100,\n    },\n    jobId: 'pigeon',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Rate Limiting in BullMQ Pro\nDESCRIPTION: Demonstrates how to manually rate limit a group based on external conditions like API responses. Uses the rateLimitGroup method and handles the rate limit error appropriately.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/rate-limiting.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPro } from '@taskforcesh/bullmq-pro';\n\nconst worker = new WorkerPro(\n  'myQueue',\n  async job => {\n    const groupId = job.opts.group.id;\n    const [isRateLimited, duration] = await doExternalCall(groupId);\n    if (isRateLimited) {\n      await worker.rateLimitGroup(job, duration);\n      // Do not forget to throw this special exception,\n      // since the job is no longer active after being rate limited.\n      throw Worker.RateLimitError();\n    }\n  },\n  {\n    connection,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Jobs from a Flow\nDESCRIPTION: Example showing how to remove a job that is part of a flow using either the Job instance or the Queue class. Includes considerations for removing parent and child jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait job.remove();\n// or\nawait queue.remove(job.id);\n```\n\n----------------------------------------\n\nTITLE: Adding a Flow with Queue Options\nDESCRIPTION: Example showing how to provide queue-specific options when adding a flow. This allows setting default job options for all jobs in a specific queue within the flow.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FlowProducer } from 'bullmq';\nconst flowProducer = new FlowProducer();\n\nconst queueName = 'assembly-line';\nconst chain = await flowProducer.add(\n  {\n    name: 'car',\n    data: { step: 'engine' },\n    queueName,\n    children: [\n      {\n        name: 'car',\n        data: { step: 'wheels' },\n        queueName,\n      },\n    ],\n  },\n  {\n    queuesOptions: {\n      [queueName]: {\n        defaultJobOptions: {\n          removeOnComplete: true,\n        },\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Removing All Finalized Jobs in BullMQ (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a job to be automatically removed upon completion or failure. It uses the removeOnComplete and removeOnFail options set to true.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/auto-removal-of-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.add(\n  'test',\n  { foo: 'bar' },\n  { removeOnComplete: true, removeOnFail: true },\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Queue Events Listener as a Provider in NestJS Module\nDESCRIPTION: This snippet shows how to register a queue and its events listener in a NestJS module. It configures a queue named 'queueName' with Redis connection details and registers the TestQueueEvents provider.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/queue-events-listeners.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'queueName',\n      connection: {\n        host: '0.0.0.0',\n        port: 6380,\n      },\n    }),\n  ],\n  providers: [TestQueueEvents],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Setting Group Concurrency in BullMQ Pro\nDESCRIPTION: This code snippet demonstrates how to set a specific concurrency value for a given group using the setGroupConcurrency method. This stores the concurrency value in Redis, allowing different groups to run with different concurrency factors.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/local-group-concurrency.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueuePro } from '@taskforcesh/bullmq-pro';\n\nconst queue = new QueuePro('myQueue', { connection });\nconst groupId = 'my group';\nawait queue.setGroupConcurrency(groupId, 4);\n```\n\n----------------------------------------\n\nTITLE: Removing Child Dependency in BullMQ using TypeScript\nDESCRIPTION: This code snippet demonstrates how to remove a child job dependency from a parent job using the removeChildDependency method in BullMQ. It first creates a job tree with a parent and a child job, then removes the dependency of the child job.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/remove-child-dependency.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst flow = new FlowProducer({ connection });\n\nconst originalTree = await flow.add({\n  name: 'root-job',\n  queueName: 'topQueueName',\n  data: {},\n  children: [\n    {\n      name,\n      data: { idx: 0, foo: 'bar' },\n      queueName: 'childrenQueueName',\n      opts: {},\n    },\n  ],\n});\n\nawait originalTree.children[0].job.removeChildDependency();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failed Children Values\nDESCRIPTION: Demonstrates how to retrieve the values of failed children jobs using the getFailedChildrenValues method on the job instance.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/ignore-dependency.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst failedChildrenValues = await originalTree.job.getFailedChildrenValues();\n```\n\n----------------------------------------\n\nTITLE: Fetching Next Job from Queue in TypeScript\nDESCRIPTION: Retrieves the next available job from the waiting queue and moves it to active state.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/manually-fetching-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst job: Job = await queue.getNextJob();\n```\n\n----------------------------------------\n\nTITLE: Configuring Sandboxed Processors with Bull Queue\nDESCRIPTION: Shows different ways to configure sandboxed processors with Bull Queue, including single process processing, concurrent processing with multiple workers, and named processors.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Single process:\nqueue.process('/path/to/my/processor.js');\n\n// You can use concurrency as well:\nqueue.process(5, '/path/to/my/processor.js');\n\n// and named processors:\nqueue.process('my processor', 5, '/path/to/my/processor.js');\n```\n\n----------------------------------------\n\nTITLE: Handling Batch Job Completion Events in BullMQ (TypeScript)\nDESCRIPTION: This snippet shows how to handle completion events for batch jobs in BullMQ. It demonstrates retrieving the batch of jobs from the completed event using the getBatch method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/batches.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nworker.on('completed', job => {\n  const batch = job.getBatch();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeated Jobs with Bull Queue\nDESCRIPTION: Demonstrates how to set up recurring jobs in Bull using cron expressions. This example shows a daily payment processing job scheduled to run at 3:15 AM.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npaymentsQueue.process(function (job) {\n  // Check payments\n});\n\n// Repeat payment job once every day at 3:15 (am)\npaymentsQueue.add(paymentsData, { repeat: { cron: \"15 3 * * *\" } });\n```\n\n----------------------------------------\n\nTITLE: Pausing a Group in BullMQ Pro using TypeScript\nDESCRIPTION: Pauses a job group by its ID using the pauseGroup method on a Queue instance. When a group is paused, no workers will pick up jobs belonging to that group, though currently processing jobs will complete.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/pausing-groups.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.pauseGroup('groupId');\n```\n\n----------------------------------------\n\nTITLE: Updating Repeatable Job Options in BullMQ\nDESCRIPTION: Shows how to update existing repeatable job options using custom keys. Demonstrates modifying the repeat interval of an existing job.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/repeatable.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Repeat job every 25 seconds instead of 10 seconds\nawait myQueue.add(\n  'bird',\n  { color: 'turquoise' },\n  {\n    repeat: {\n      every: 25_000,\n      key: 'eagle',\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting BullMQ Metrics with Express.js\nDESCRIPTION: This example shows how to set up a Prometheus metrics endpoint using Express.js. It creates a /metrics route that returns the BullMQ queue metrics when accessed.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/metrics/prometheus.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport { Queue } from './src/queue';\n\nconst app = express();\nconst queue = new Queue('my-queue');\n\napp.get('/metrics', async (req, res) => {\n  try {\n    const metrics = await queue.exportPrometheusMetrics();\n    res.set('Content-Type', 'text/plain');\n    res.send(metrics);\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\nconst PORT = process.env.PORT || 3000;\n\napp.listen(PORT, () => {\n  console.log(`Prometheus metrics server running on port ${PORT}`);\n  console.log(`Metrics available at http://localhost:${PORT}/metrics`);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Job Scheduler in BullMQ with TypeScript\nDESCRIPTION: Illustrates how to retrieve a single job scheduler by its ID using the getJobScheduler method. This is useful for inspecting the configuration of a specific scheduler.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/manage-job-schedulers.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst scheduler = await queue.getJobScheduler('test');\nconsole.log('Current job scheduler:', scheduler);\n```\n\n----------------------------------------\n\nTITLE: Creating Sandboxed Processor in Bull Queue\nDESCRIPTION: Demonstrates how to create a processor module in a separate file for sandboxed execution. This approach offers advantages like isolation, crash protection, and better CPU utilization.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// processor.js\nmodule.exports = function (job) {\n  // Do some heavy work\n\n  return Promise.resolve(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Queue, Flow Producer and Processor in NestJS Module\nDESCRIPTION: Complete example showing how to register a queue, flow producer with custom Redis connections, and processor in a NestJS module.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/README.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'queueName',\n      connection: {\n        host: '0.0.0.0',\n        port: 6380,\n      },\n    }),\n    BullModule.registerFlowProducer({\n      name: 'flowProducerName',\n      connection: {\n        host: '0.0.0.0',\n        port: 6380,\n      },\n    }),\n  ],\n  providers: [TestProcessor],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Duration for BullMQ Worker\nDESCRIPTION: Shows how to set a custom lock duration (60 seconds) for a BullMQ worker. Lock duration determines how long a job remains locked before being returned to the queue if not completed.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/manually-fetching-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new Worker('my-queue', null, { lockDuration: 60000 });\n```\n\n----------------------------------------\n\nTITLE: Setting Global Concurrency in BullMQ with TypeScript\nDESCRIPTION: Sets the global concurrency factor to limit parallel job processing across all worker instances. This example shows how to set the limit to 4 concurrent jobs using the queue's setGlobalConcurrency method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/global-concurrency.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nawait queue.setGlobalConcurrency(4);\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Date in BullMQ Job Scheduler\nDESCRIPTION: Demonstrates how to set up a job scheduler with a future start date. The job will begin executing at the specified date and repeat every minute thereafter.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/repeat-options.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Queue } = require('bullmq');\nconst connection = { host: 'localhost', port: 6379 };\nconst myQueue = new Queue('my-dated-jobs', { connection });\n\nawait myQueue.upsertJobScheduler(\n  'start-later-job',\n  {\n    every: 60000, // every minute\n    startDate: new Date('2024-10-15T00:00:00Z'), // start on October 15, 2024\n  },\n  {\n    name: 'timed-start-job',\n    data: { message: 'Starting later' },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing QueuePro with OpenTelemetry in TypeScript\nDESCRIPTION: Example of how to initialize a BullMQ Pro queue with telemetry support using the BullMQOtel integration. The code demonstrates importing required modules, setting up the queue with telemetry, and adding a job with various options including group configuration.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/telemetry.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueuePro } from '@taskforcesh/bullmq-pro';\nimport { BullMQOtel } from 'bullmq-otel';\n\n// Initialize a Pro queue using BullMQ-Otel\nconst queue = new QueuePro('myProQueue', {\n  connection,\n  telemetry: new BullMQOtel('guide'),\n});\n\nawait queue.add(\n  'myJob',\n  { data: 'myData' },\n  {\n    attempts: 2,\n    backoff: 1000,\n    group: {\n      id: 'myGroupId',\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Group Properties in Sandboxed Job Processor (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access group-related properties in a sandboxed job processor using BullMQ Pro. It shows the structure of a job object, including the 'gid' property and group information within the 'opts' object.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/sandboxes-for-groups.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SandboxedJobPro } from '@taskforcesh/bullmq-pro';\n\nmodule.exports = function (job: SandboxedJobPro) {\n  expect(job).to.have.property('gid');\n  expect(job.opts).to.have.property('group');\n  expect(job.opts.group).to.have.property('id');\n  expect(job.opts.group.id).to.be.a('string');\n  expect(job.opts.group.id).to.equal(job.gid);\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Worker Threads for Sandboxed Processors in BullMQ\nDESCRIPTION: This snippet demonstrates how to enable Worker Threads support for sandboxed processors, which can be less resource-demanding than the default spawn process approach. This feature is available from BullMQ version 3.13.0.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/sandboxed-processors.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq'\n\nconst processorFile = path.join(__dirname, 'my_procesor.js');\nworker = new Worker(queueName, processorFile, { useWorkerThreads: true });\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Processor with BullMQ-Pro in NestJS\nDESCRIPTION: Example of creating a processor class for handling BullMQ-Pro jobs, including event handling with the @OnWorkerEvent decorator.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/README.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Processor,\n  WorkerHost,\n  OnWorkerEvent,\n} from '@taskforcesh/nestjs-bullmq-pro';\nimport { JobPro } from 'taskforcesh/bullmq-pro';\n\n@Processor('queueName')\nclass TestProcessor extends WorkerHost {\n  async process(job: JobPro<any, any, string>): Promise<any> {\n    // do some stuff\n  }\n\n  @OnWorkerEvent('completed')\n  onCompleted() {\n    // do some stuff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Priority Job Counts in BullMQ\nDESCRIPTION: Shows how to retrieve counts of jobs for specific priority levels using the getCountsPerPriority method. Returns an object with counts for each specified priority level.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/prioritized.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst counts = await queue.getCountsPerPriority([1, 0]);\n/*\n{\n  '1': 11,\n  '0': 10\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Basic FIFO Queue in BullMQ\nDESCRIPTION: Demonstrates how to create a basic FIFO queue and add a simple job using BullMQ. The job will be processed in the order it was added to the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/fifo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('Paint');\n\n// Add a job that will be processed after all others\nawait myQueue.add('wall', { color: 'pink' });\n```\n\n----------------------------------------\n\nTITLE: Using URL for Sandboxed Processor in BullMQ\nDESCRIPTION: This code shows how to create a Worker with a sandboxed processor using URL instances. This approach is particularly recommended for Windows OS environments.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/sandboxed-processors.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pathToFileURL } from 'url';\n\nconst processorUrl = pathToFileURL(__dirname + '/my_procesor.js');\n\nworker = new Worker(queueName, processorUrl);\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Worker with OpenTelemetry\nDESCRIPTION: Code example showing how to initialize a BullMQ Worker with OpenTelemetry integration. Similar to the Queue configuration, the BullMQOtel instance is passed to the telemetry option when creating a new Worker.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/getting-started.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from \"bullmq\";\nimport { BullMQOtel } from \"bullmq-otel\";\n\nconst worker = new Worker(\n  \"myQueue\",\n  async (job) => {\n    return 'some value'\n  },\n  {\n    name: \"myWorker\",\n    connection: {\n      host: \"127.0.0.1\",\n      port: 6379,\n    },\n    telemetry: new BullMQOtel(\"simple-guide\"),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Size Limit Option for Job Creation in TypeScript\nDESCRIPTION: Implements a new sizeLimit option when creating a job, allowing control over the maximum size of job data.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\njob: add sizeLimit option when creating a job\n```\n\n----------------------------------------\n\nTITLE: Removing Deduplication Key (TypeScript)\nDESCRIPTION: Demonstrates how to stop deduplication before TTL finishes or before a job finishes using the removeDeduplicationKey method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/deduplication.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.removeDeduplicationKey('customValue');\n```\n\n----------------------------------------\n\nTITLE: Implementing Cluster Support with Bull Queue\nDESCRIPTION: Shows how to use Node.js cluster module with Bull for parallel processing across multiple CPU cores. This example creates 8 worker processes to handle 500 jobs concurrently.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst Queue = require(\"bull\");\nconst cluster = require(\"cluster\");\n\nconst numWorkers = 8;\nconst queue = new Queue(\"test concurrent queue\");\n\nif (cluster.isMaster) {\n  for (let i = 0; i < numWorkers; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(\"online\", function (worker) {\n    // Let's create a few jobs for the queue workers\n    for (let i = 0; i < 500; i++) {\n      queue.add({ foo: \"bar\" });\n    }\n  });\n\n  cluster.on(\"exit\", function (worker, code, signal) {\n    console.log(\"worker \" + worker.process.pid + \" died\");\n  });\n} else {\n  queue.process(function (job, jobDone) {\n    console.log(\"Job done by worker\", cluster.worker.id, job.id);\n    jobDone();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Queue Event Listeners in TypeScript\nDESCRIPTION: Creates a QueueEvents instance to listen for job events across all workers processing a specific queue. This allows for centralized monitoring of job completions, failures, and progress updates.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueEvents } from 'bullmq';\n\nconst queueEvents = new QueueEvents('Paint');\n\nqueueEvents.on('completed', ({ jobId: string, returnvalue: any }) => {\n  // Called every time a job is completed in any worker.\n});\n\nqueueEvents.on('failed', ({ jobId: string, failedReason: string }) => {\n  // jobId received a progress event\n});\n\nqueueEvents.on('progress', ({jobId: string, data: number | object}) => {\n  // jobId received a progress event\n});\n```\n\n----------------------------------------\n\nTITLE: Keeping a Specific Number of Jobs in BullMQ (TypeScript)\nDESCRIPTION: This example shows how to limit the number of completed and failed jobs kept in the queue. It specifies keeping 1000 completed jobs and 5000 failed jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/auto-removal-of-jobs.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.add(\n  'test',\n  { foo: 'bar' },\n  { removeOnComplete: 1000, removeOnFail: 5000 },\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Queue Events Listener in NestJS Module\nDESCRIPTION: This code shows how to register a Queue Events Listener as a provider in a NestJS module. It also demonstrates how to configure and register the queue with connection settings using BullModule.registerQueue().\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/queue-events-listeners.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'queueName',\n      connection: {\n        host: '0.0.0.0',\n        port: 6380,\n      },\n    }),\n  ],\n  providers: [TestQueueEvents],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Error Event Handling for BullMQ Worker\nDESCRIPTION: Demonstrates how to attach an error event handler to a BullMQ worker for logging connection issues.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/going-to-production.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nworker.on(\"error\", (err) => {\n  // Log your error.\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Cluster Support in TypeScript\nDESCRIPTION: Implements support for Redis Cluster in the BullMQ library.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncluster: add redis cluster support\n```\n\n----------------------------------------\n\nTITLE: Resuming a Group in BullMQ Pro using TypeScript\nDESCRIPTION: Resumes a previously paused job group by its ID using the resumeGroup method on a Queue instance. This allows workers to start processing jobs from that group again.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/pausing-groups.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.resumeGroup('groupId');\n```\n\n----------------------------------------\n\nTITLE: Implementing Server B Message Queue with Bull in TypeScript\nDESCRIPTION: This code snippet shows the setup for Server B's message queue using Bull. It creates queues for sending and receiving messages, processes incoming messages, and sends a message to Server A.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/message-queue.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Queue = require('bull');\n\nconst sendQueue = new Queue('Server A');\nconst receiveQueue = new Queue('Server B');\n\nreceiveQueue.process(function (job, done) {\n  console.log('Received message', job.data.msg);\n  done();\n});\n\nsendQueue.add({ msg: 'World' });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sandboxed Processor in a Separate File in TypeScript\nDESCRIPTION: Defines a job processor in a separate file to be run in isolation from the main process. This approach helps prevent stalled jobs by running CPU-intensive tasks in a dedicated process.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Job } from 'bullmq';\n\nmodule.exports = async (job: Job) {\n    // Do something with job\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Repeatable Jobs in BullMQ\nDESCRIPTION: Shows how to remove repeatable jobs using both removeRepeatable and removeRepeatableByKey methods. Includes example of retrieving repeatable jobs using getRepeatableJobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/repeatable.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst repeat = { pattern: '*/1 * * * * *' };\n\nconst myQueue = new Queue('Paint');\n\nconst job1 = await myQueue.add('red', { foo: 'bar' }, { repeat });\nconst job2 = await myQueue.add('blue', { foo: 'baz' }, { repeat });\n\nconst isRemoved1 = await myQueue.removeRepeatableByKey(job1.repeatJobKey);\nconst isRemoved2 = await queue.removeRepeatable('blue', repeat);\n```\n\n----------------------------------------\n\nTITLE: Adding Delayed Job to BullMQ Queue\nDESCRIPTION: Shows how to add a delayed job to a queue using options. The job will wait at least 5000 milliseconds (5 seconds) before processing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/queues/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait queue.add('paint', { color: 'blue' }, { delay: 5000 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Job-Specific TTL Values in WorkerPro\nDESCRIPTION: Demonstrates how to set different TTL values for specific job names using an object mapping. Sets 100ms TTL for 'test1' jobs and 200ms TTL for 'test2' jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/observables/cancelation.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new WorkerPro(queueName, processor, {\n  ttl: { test1: 100, test2: 200 },\n  connection,\n});\n```\n\n----------------------------------------\n\nTITLE: Cron Expression Format for BullMQ Scheduling\nDESCRIPTION: This snippet shows the format for cron expressions supported by BullMQ through the cron-parser library. It illustrates the six fields of a cron expression and their meanings, including the optional second field for precise scheduling.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/repeat-strategies.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n*    *    *    *    *    *\n┬    ┬    ┬    ┬    ┬    ┬\n│    │    │    │    │    │\n│    │    │    │    │    └ day of week (0 - 7, 1L - 7L, where 0 or 7 is Sunday)\n│    │    │    │    └───── month (1 - 12)\n│    │    │    └────────── day of month (1 - 31, L for the last day of the month)\n│    │    └─────────────── hour (0 - 23)\n│    └──────────────────── minute (0 - 59)\n└───────────────────────── second (0 - 59, optional)\n```\n\n----------------------------------------\n\nTITLE: Initializing WorkerPro with Global TTL in TypeScript\nDESCRIPTION: Creates a WorkerPro instance with a global TTL value of 100ms that applies to all jobs. The TTL parameter defines the maximum processing time before a job is automatically cancelled.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/observables/cancelation.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPro } from '@taskforcesh/bullmq-pro';\n\nconst worker = new WorkerPro(queueName, processor, {\n  ttl: 100,\n  connection,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing BullMQ Worker in TypeScript\nDESCRIPTION: Creates a new BullMQ worker instance for processing jobs in a queue named 'Paint'. This demonstrates the basic worker setup that connects to a paint processing function.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/stalled.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\n\nconst worker = new Worker('Paint', painter);\n```\n\n----------------------------------------\n\nTITLE: Registering Queues and Processors in NestJS Module\nDESCRIPTION: Complete module configuration showing how to register both queues and flow producers with custom Redis connection settings, and including the processor as a provider.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/README.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'queueName',\n      connection: {\n        host: '0.0.0.0',\n        port: 6380,\n      },\n    }),\n    BullModule.registerFlowProducer({\n      name: 'flowProducerName',\n      connection: {\n        host: '0.0.0.0',\n        port: 6380,\n      },\n    }),\n  ],\n  providers: [TestProcessor],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jobs with Pagination in BullMQ\nDESCRIPTION: Shows how to fetch jobs with pagination using the getJobs method. This example retrieves the oldest 100 completed jobs from the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/getters.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst completed = await myQueue.getJobs(['completed'], 0, 100, true);\n\n// returns the oldest 100 jobs\n```\n\nLANGUAGE: python\nCODE:\n```\ncompleted = await myQueue.getJobs(['completed'], 0, 100, True)\n\n# returns the oldest 100 jobs\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Exceptions in Node.js\nDESCRIPTION: Shows how to implement global error handlers for uncaught exceptions and unhandled promise rejections in a Node.js application.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/going-to-production.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.on(\"uncaughtException\", function (err) {\n  // Handle the error safely\n  logger.error(err, \"Uncaught exception\");\n});\n\nprocess.on(\"unhandledRejection\", (reason, promise) => {\n  // Handle the error safely\n  logger.error({ promise, reason }, \"Unhandled Rejection at: Promise\");\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Job Retry Logic with Priority in Python\nDESCRIPTION: This code snippet demonstrates a bug fix for considering priority when moving a job to the wait state during retry operations in BullMQ.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v3.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Bug fix for job retry\n# Consider priority when moving job to wait\n# Issue #1969\n```\n\n----------------------------------------\n\nTITLE: Setting End Date for BullMQ Job Scheduler\nDESCRIPTION: Shows how to configure a job scheduler with an end date. The job will stop repeating after reaching the specified end date.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/repeat-options.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.upsertJobScheduler(\n  'end-soon-job',\n  {\n    every: 60000, // every minute\n    endDate: new Date('2024-11-01T00:00:00Z'), // end on November 1, 2024\n  },\n  {\n    name: 'timed-end-job',\n    data: { message: 'Ending soon' },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing BullMQ Consumer with OpenTelemetry\nDESCRIPTION: Sets up a worker to process queue jobs with concurrent processing and retry logic. Includes error simulation for demonstrating retry spans.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/running-a-simple-example.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from \"bullmq\";\nimport { BullMQOtel } from \"bullmq-otel\";\n\n(async () => {\n  const worker = new Worker(\n    \"myQueue\",\n    async (job) => {\n      console.log(\"processing job\", job.id, job.attemptsMade);\n      await new Promise(async (res) => {\n        setTimeout(() => res({}), 200);\n      });\n\n      if (job.attemptsMade < 1) {\n        throw new Error(\"This was an error\");\n      }\n\n      return \"my result value\";\n    },\n    {\n      name: \"myWorker\",\n      connection: {\n        host: \"127.0.0.1\",\n        port: 6379,\n      },\n      telemetry: new BullMQOtel(\"simple-guide\"),\n      concurrency: 10,\n    }\n  );\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining BullMQ Job Processor Function\nDESCRIPTION: Implements a job processor function for the Paint queue. This shows the basic structure of a job processing function that would handle paint-related tasks.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/stalled.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default = (job) => {\n    // Paint something\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BullMQ with Redis Cluster Using Queue Name Hash Tag in TypeScript\nDESCRIPTION: Creates a Queue instance with the queue name itself wrapped in brackets (hash tag) to ensure all related keys are stored in the same Redis Cluster hash slot. This is an alternative approach for enabling atomic operations in a Redis Cluster environment.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/patterns/redis-cluster.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst queue = new Queue('{cluster}');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paginated Group Jobs\nDESCRIPTION: Demonstrates how to fetch jobs from a specific group with pagination support using the getGroupJobs method. Takes groupId and pagination parameters (start and end indices).\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/getters.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst jobs = await queue.getGroupJobs(groupId, 0, 100);\n```\n\n----------------------------------------\n\nTITLE: Error Event Handling for BullMQ Queue\nDESCRIPTION: Shows how to implement error event handling for a BullMQ queue instance.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/going-to-production.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nqueue.on(\"error\", (err) => {\n  // Log your error.\n})\n```\n\n----------------------------------------\n\nTITLE: Using Module Instead of Bit Operations in Python\nDESCRIPTION: Fix to use the modulo operator instead of bitwise AND to maintain order in priority calculations.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npriority % some_value  # Instead of priority & some_value\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flow in Python\nDESCRIPTION: Python implementation of the same flow structure with a parent job and three child jobs using FlowProducer. Shows the equivalent Python syntax for BullMQ flows.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import FlowProducer\n\n# A FlowProducer constructor takes an optional \"connection\"\n# object otherwise it connects to a local redis instance.\nflowProducer = FlowProducer()\n\nflow = await flowProducer.add({\n  \"name\": \"renovate-interior\",\n  \"queueName\": \"renovate\",\n  \"children\": [\n    { \"name\": \"paint\", \"data\": { \"place\": \"ceiling\" }, \"queueName\": \"steps\" },\n    { \"name\": \"paint\", \"data\": { \"place\": \"walls\" }, \"queueName\": \"steps\" },\n    { \"name\": \"fix\", \"data\": { \"place\": \"floor\" }, \"queueName\": \"steps\" },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up QueueEvents Listener in TypeScript\nDESCRIPTION: This code demonstrates how to use the QueueEvents class to listen to various queue events such as waiting, active, completed, and failed jobs. It provides a centralized way to monitor all workers' events for a specific queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/README (1).md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueEvents } from 'bullmq';\n\nconst queueEvents = new QueueEvents(\"my-queue-name\");\n\nqueueEvents.on('waiting', ({ jobId }) => {\n  console.log(`A job with ID ${jobId} is waiting`);\n});\n\nqueueEvents.on('active', ({ jobId, prev }) => {\n  console.log(`Job ${jobId} is now active; previous status was ${prev}`);\n});\n\nqueueEvents.on('completed', ({ jobId, returnvalue }) => {\n  console.log(`${jobId} has completed and returned ${returnvalue}`);\n});\n\nqueueEvents.on('failed', ({ jobId, failedReason }) => {\n  console.log(`${jobId} has failed with reason ${failedReason}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Prometheus Metrics Output with Global Variables\nDESCRIPTION: This snippet shows an example of the Prometheus metrics output from BullMQ when global variables are included. It demonstrates how the 'env' and 'server' labels are added to each metric.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/metrics/prometheus.md#2025-04-14_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# HELP bullmq_job_count Number of jobs in the queue by state\n# TYPE bullmq_job_count gauge\nbullmq_job_count{queue=\"my-queue\", state=\"waiting\", env=\"Production\", server=\"1\"} 5\nbullmq_job_count{queue=\"my-queue\", state=\"active\", env=\"Production\", server=\"1\"} 3\nbullmq_job_count{queue=\"my-queue\", state=\"completed\", env=\"Production\", server=\"1\"} 12\nbullmq_job_count{queue=\"my-queue\", state=\"failed\", env=\"Production\", server=\"1\"} 2\n```\n\n----------------------------------------\n\nTITLE: Checking Job State for Parent Jobs\nDESCRIPTION: Demonstrates how to check if a job is in the \"waiting-children\" state, which indicates a parent job that is waiting for its children to complete.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = await job.getState();\n// state will be \"waiting-children\"\n```\n\n----------------------------------------\n\nTITLE: Moving Job to Completed State in TypeScript\nDESCRIPTION: Marks a job as completed with a success message. Returns the next job's data and ID if available.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/manually-fetching-jobs.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst (nextJobData, nextJobId) = await job.moveToCompleted('succeeded', true);\n```\n\n----------------------------------------\n\nTITLE: Creating Jobs with Custom Data in BullMQ\nDESCRIPTION: Shows how to create a new job in a queue with custom data. The example demonstrates creating a paint job with a color specification stored in the job's data attribute.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/job-data.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq';\n\nconst myQueue = new Queue('paint');\n\nconst job = await myQueue.add('wall', { color: 'red' });\n\njob.data; // { color: 'red' }\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Queue\n\nqueue = Queue('paint')\n\njob = await queue.add('wall', {'color': 'red'})\n\njob.data # { color: 'red' }\n```\n\n----------------------------------------\n\nTITLE: Fixing Worker Processing Condition in JavaScript\nDESCRIPTION: This commit corrects a condition to ensure the worker continues processing jobs indefinitely, addressing issue #1800.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nef0c5d6cae1dcbae607fa02da32d5236069f2339\n```\n\n----------------------------------------\n\nTITLE: Allowing Parent Passing in job.create in TypeScript\nDESCRIPTION: Implements the ability to pass a parent job when creating a new job using job.create method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\njobcreate: allow passing parent in job.create\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BullMQ Pro in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import and use the Pro versions of Queue and Worker classes from BullMQ Pro. It demonstrates creating a queue and a worker with basic job processing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/install.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueuePro, WorkerPro } from '@taskforcesh/bullmq-pro';\n\nconst queue = new QueuePro('myQueue');\n\nconst worker = new WorkerPro('myQueue', async job => {\n  // Process job\n});\n```\n\n----------------------------------------\n\nTITLE: Adding NPM Configuration in Dockerfile\nDESCRIPTION: This Dockerfile snippet shows how to add the .npmrc file to a Docker image, ensuring that the BullMQ Pro package can be installed within the container.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/install.md#2025-04-14_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nWORKDIR /app\n\nADD .npmrc /app/.npmrc\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Environment Variables in BullMQ\nDESCRIPTION: This snippet shows how to provide fallback values for environment variables when using BullMQ. It uses the nullish coalescing operator to assign a default queue name if the environment variable is undefined.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/troubleshooting.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst queueName = process.env.QUEUE_NAME ?? 'defaultQueue';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Job Schedulers in BullMQ with TypeScript\nDESCRIPTION: Shows how to fetch a list of job schedulers within a specified range using the getJobSchedulers method. The example retrieves the first 10 schedulers sorted by their next execution time in ascending order.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/manage-job-schedulers.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve the first 10 job schedulers in ascending order of their next execution time\nconst schedulers = await queue.getJobSchedulers(0, 9, true);\nconsole.log('Current job schedulers:', schedulers);\n```\n\n----------------------------------------\n\nTITLE: Processing Jobs with BullMQ Worker\nDESCRIPTION: TypeScript example demonstrating how to create a worker to process paint jobs from the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Worker } from 'bullmq';\n\nconst worker = new Worker('Paint', async job => {\n  if (job.name === 'cars') {\n    await paintCar(job.data.color);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Job Process Information in Python\nDESCRIPTION: Performance improvement to set processedBy information using hmset in Python.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nredis.hmset(job_key, {\"processedBy\": worker_info})\n```\n\n----------------------------------------\n\nTITLE: BullMQ Version History Summary\nDESCRIPTION: Markdown formatted changelog entries showing version updates from 5.48.1 down to 5.41.3, including bug fixes, features, and improvements\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.48.1](https://github.com/taskforcesh/bullmq/compare/v5.48.0...v5.48.1) (2025-04-10)\n\n### Bug Fixes\n\n* made line split more compatible ([#3208](https://github.com/taskforcesh/bullmq/issues/3208)) ([3c2349a](https://github.com/taskforcesh/bullmq/commit/3c2349a2936d0c59cfa8d136585a0c0156de3212)), closes [#3204](https://github.com/taskforcesh/bullmq/issues/3204)\n\n# [5.48.0](https://github.com/taskforcesh/bullmq/compare/v5.47.3...v5.48.0) (2025-04-08)\n\n### Features\n\n* add removeUnprocessedChildren ([#3190](https://github.com/taskforcesh/bullmq/issues/3190)) ([4b96266](https://github.com/taskforcesh/bullmq/commit/4b96266d4a7e2fe4b1b3eba12e9e7cc5a64fc044))\n```\n\n----------------------------------------\n\nTITLE: Adding Jobs to a Queue in BullMQ with Python\nDESCRIPTION: Example showing how to create a queue and add a job with data. The code demonstrates initializing a Queue and adding a job with a payload, then properly closing the connection when done.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/introduction.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bullmq import Queue\n\nqueue = Queue(\"myQueue\")\n\n# Add a job with data { \"foo\": \"bar\" } to the queue\nawait queue.add(\"myJob\", { \"foo\": \"bar\" })\n\n...\n\n# Close when done adding jobs\nawait queue.close()\n```\n\n----------------------------------------\n\nTITLE: Adding Waiting-Children State for Jobs in TypeScript\nDESCRIPTION: Implements a new 'waiting-children' state for jobs to handle parent-child relationships.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\njob: consider waiting-children state\n```\n\n----------------------------------------\n\nTITLE: Checking Group Rate Limit Status in BullMQ Pro\nDESCRIPTION: Shows how to check if a group is currently rate limited using the getGroupRateLimitTtl method. Returns the time-to-live (TTL) of the rate limit for a specific group.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/rate-limiting.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueuePro } from '@taskforcesh/bullmq-pro';\n\nconst queue = new QueuePro('myQueue', { connection });\nconst groupId = '0';\nconst maxJobs = 100;\n\nconst ttl = await queue.getGroupRateLimitTtl(groupId, maxJobs);\n\nif (ttl > 0) {\n  console.log('Group is rate limited');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jobs to BullMQ Queue\nDESCRIPTION: Example of adding a job to a BullMQ queue using the queue's add() method. Shows how to pass job data as an object.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/producers.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.audioQueue.add({\n  foo: 'bar',\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Concurrency in BullMQ Pro\nDESCRIPTION: This code snippet shows how to retrieve the concurrency value for a specific group using the getGroupConcurrency method. This allows checking the current concurrency setting for any group stored in Redis.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/local-group-concurrency.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst concurrency = await queue.getGroupConcurrency(groupId);\n```\n\n----------------------------------------\n\nTITLE: Adding Non-blocking Option for getNextJob in TypeScript\nDESCRIPTION: Implements a new option for non-blocking behavior when getting the next job from the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nadd option for non-blocking getNextJob\n```\n\n----------------------------------------\n\nTITLE: Python Bug Fix - Delayed Job Scheduling\nDESCRIPTION: Fix to avoid using jobId for scheduling delayed jobs in Python implementation\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n228db2c780a1ca8323900fc568156495a13355a3\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Producer in NestJS with BullMQ Pro\nDESCRIPTION: Shows how to inject and set up a queue producer service in NestJS using BullMQ Pro. Demonstrates the usage of @InjectQueue decorator to inject an audio processing queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/producers.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { QueuePro } from 'taskforcesh/bullmq-pro';\nimport { InjectQueue } from '@taskforcesh/nestjs-bullmq-pro';\n\n@Injectable()\nexport class AudioService {\n  constructor(@InjectQueue('audio') private audioQueue: QueuePro) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Python Worker Job Finalization\nDESCRIPTION: Implementation to ensure jobs are properly finalized when worker is closed\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Initializing Queue with Rate Limiter in TypeScript\nDESCRIPTION: Creates a new BullMQ queue instance with rate limiting configuration. Sets maximum 5 jobs within 5000ms duration with bounce back enabled.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/manually-fetching-jobs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Queue from 'bull';\n\nconst queue = new Queue({\n  limiter: {\n    max: 5,\n    duration: 5000,\n    bounceBack: true // important\n  },\n  ...queueOptions\n});\nqueue.add({ random_attr: 'random_value' });\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Job Interface in TypeScript\nDESCRIPTION: The TypeScript interface for creating flow jobs, showing the required structure with name, queueName, optional data, prefix, options, and children properties.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/flows/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlowJob {\n  name: string;\n  queueName: string;\n  data?: any;\n  prefix?: string;\n  opts?: Omit<JobsOptions, 'parent' | 'repeat'>;\n  children?: FlowJob[];\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Job to Failed State in TypeScript\nDESCRIPTION: Transitions a job to the failed state with an error message. Returns the next job's data and ID if available.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/manually-fetching-jobs.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst (nextJobData, nextJobId) = await job.moveToFailed(\n  {\n    message: 'Call to external service failed!',\n  },\n  true,\n);\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ with pip\nDESCRIPTION: Instruction for installing the BullMQ Python package using pip package manager.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/introduction.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install bullmq\n```\n\n----------------------------------------\n\nTITLE: Python Priority Queue Fix\nDESCRIPTION: Fix to consider paused state when calling getCountsPerPriority in Python implementation\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n6e992504b2a7a2fa76f1d04ad53d1512e98add7f\n```\n\n----------------------------------------\n\nTITLE: Registering a Queue in NestJS BullMQ\nDESCRIPTION: Code snippet showing how to register a named queue in a NestJS module using BullMQ-Pro.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.registerQueue({\n  name: 'queueName',\n});\n```\n\n----------------------------------------\n\nTITLE: Python Delayed Jobs Processing\nDESCRIPTION: Implementation for scheduling and handling delayed jobs in Python without using jobId\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Queue with OpenTelemetry\nDESCRIPTION: Code example showing how to initialize a BullMQ Queue with OpenTelemetry integration. The BullMQOtel instance is passed to the telemetry option when creating a new Queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/getting-started.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Queue } from 'bullmq'\nimport { BullMQOtel } from \"bullmq-otel\";\n\nconst queue = new Queue(\"myQueue\", {\n  connection: {\n    host: \"127.0.0.1\",\n    port: 6379,\n  },\n  telemetry: new BullMQOtel(\"simple-guide\"),\n});\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Consumer Instrumentation Configuration\nDESCRIPTION: Configures OpenTelemetry SDK for the consumer service with OTLP exporters for traces and metrics.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/running-a-simple-example.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-proto';\nimport { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';\n\nconst sdk = new NodeSDK({\n  serviceName: 'consumer',\n  traceExporter: new OTLPTraceExporter({\n    url: 'http://127.0.0.1:4318/v1/traces'\n  }),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new OTLPMetricExporter({\n      url: 'http://127.0.0.1:4318/v1/metrics'\n    }),\n  }),\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Processing Next Job Result in TypeScript\nDESCRIPTION: Handles the next job data if available by creating a new Job instance from the returned JSON data.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/manually-fetching-jobs.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (nextJobdata) {\n  return Job.fromJSON(queue, nextJobData, nextJobId);\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Script Typing for Array2Obj Function in JavaScript\nDESCRIPTION: This commit fixes the script typing on the array2obj function, resolving issue #1786.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n134f6ab5f3219ddd7a421e61ace6bac72bb51e6d\n```\n\n----------------------------------------\n\nTITLE: Python Priority Order Fix\nDESCRIPTION: Fix to use module instead of bit.band to maintain order in Python implementation\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n9ece15b17420fe0bee948a5307e870915e3bce87\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ in NestJS Root Module\nDESCRIPTION: Setup for the BullMQ module in the NestJS root AppModule, configuring a Redis connection for BullMQ-Pro.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { BullModule } from '@taskforcesh/nestjs-bullmq-pro';\n\n@Module({\n  imports: [\n    BullModule.forRoot({\n      connection: {\n        host: 'localhost',\n        port: 6379,\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Python Parent-Child Job Processing\nDESCRIPTION: Fix for re-adding child jobs in completed state using same jobIds in Python implementation\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Pausing and Resuming Bull Queues\nDESCRIPTION: Shows how to pause and resume queue processing globally or for a specific worker. This feature allows for maintenance operations or managing processing load.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.pause().then(function () {\n  // queue is paused now\n});\n\nqueue.resume().then(function () {\n  // queue is resumed now\n});\n```\n\n----------------------------------------\n\nTITLE: Job Removal with Children Option in BullMQ\nDESCRIPTION: A feature that adds the option to remove child jobs when removing a parent job. This enhancement helps with managing job hierarchies and preventing orphaned child jobs in the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- **job:** Add option for removing children in remove method (python) ([#2064](https://github.com/taskforcesh/bullmq/issues/2064)) ([`841dc87`](https://github.com/taskforcesh/bullmq/commit/841dc87a689897df81438ad1f43e45a4da77c388))\n```\n\n----------------------------------------\n\nTITLE: Getting Counts per Priority for a Group in BullMQ Pro\nDESCRIPTION: This snippet shows how to use the getCountsPerPriorityForGroup method to retrieve counts of jobs with specific priorities within a group. The example retrieves counts for priorities 1 and 0, returning an object with the counts.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/groups/prioritized.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst counts = await queue.getCountsPerPriorityForGroup('groupId', [1, 0]);\n/*\n{\n  '1': 11,\n  '0': 10\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Delayed Job Scheduling in Python\nDESCRIPTION: Bug fix for delayed job scheduling implementation that avoids using jobId for scheduling delayed jobs\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelog.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\navoid using jobId in order to schedule delayed jobs\n```\n\n----------------------------------------\n\nTITLE: Version Information and Issue References\nDESCRIPTION: Markdown formatted changelog entries containing version numbers, commit hashes, and GitHub issue references for BullMQ releases\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* **queue:** add retryJobs method for failed jobs ([#1024](https://github.com/taskforcesh/bullmq/issues/1024)) ([310a730](https://github.com/taskforcesh/bullmq/commit/310a730ed322501cc19cdd5cf5244bc8eee6fee2))\n\n### Performance Improvements\n\n* **lua:** call del command with multiple keys ([#1035](https://github.com/taskforcesh/bullmq/issues/1035)) ([9cfaab8](https://github.com/taskforcesh/bullmq/commit/9cfaab8965d0c9f92460d31d6c3083839c36447f))\n```\n\n----------------------------------------\n\nTITLE: Sample Prometheus Metrics Output\nDESCRIPTION: This snippet shows an example of the Prometheus metrics output from BullMQ. It includes metrics for job counts in different states (waiting, active, completed, failed) for a queue named 'my-queue'.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/metrics/prometheus.md#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nHELP bullmq_job_count Number of jobs in the queue by state\nTYPE bullmq_job_count gauge\nbullmq_job_count{queue=\"my-queue\", state=\"waiting\"} 5\nbullmq_job_count{queue=\"my-queue\", state=\"active\"} 3\nbullmq_job_count{queue=\"my-queue\", state=\"completed\"} 12\nbullmq_job_count{queue=\"my-queue\", state=\"failed\"} 2\n```\n\n----------------------------------------\n\nTITLE: Flow Validation in Python\nDESCRIPTION: Bug fix for flow validation that checks parentData before ignoreDependencyOnFailure during stalled check\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelog.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvalidate_parentData before ignoreDependencyOnFailure when stalled check happens\n```\n\n----------------------------------------\n\nTITLE: Fixing addBulk Method for Repeatable Jobs in TypeScript\nDESCRIPTION: Corrects the addBulk method to not consider the repeat option when adding multiple jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddBulk: should not consider repeat option\n```\n\n----------------------------------------\n\nTITLE: Redis Connection Retry Strategy in BullMQ\nDESCRIPTION: Implementation of a retry strategy for Redis connections in BullMQ. This feature enhances the resilience of the application when facing temporary Redis connection issues.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- **connection:** Add retry strategy in connection ([#1975](https://github.com/taskforcesh/bullmq/issues/1975)) ([`7c5ee20`](https://github.com/taskforcesh/bullmq/commit/7c5ee20471b989d297c8c5e87a6ea497a2077ae6))\n```\n\n----------------------------------------\n\nTITLE: Adding trimEvents Method in JavaScript\nDESCRIPTION: This feature adds a new trimEvents method to the BullMQ library, as described in issue #1695.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nca48163263b12a85533563485176c684e548df0b\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of getDelayedCount Method for Queue\nDESCRIPTION: Feature addition of getDelayedCount method in the Python implementation, allowing counting of delayed jobs in a queue, referenced in issue #2934.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- **queue:** Add getDelayedCount method [python] ([#2934](https://github.com/taskforcesh/bullmq/issues/2934)) ([`71ce75c`](https://github.com/taskforcesh/bullmq/commit/71ce75c04b096b5593da0986c41a771add1a81ce))\n```\n\n----------------------------------------\n\nTITLE: Parent Job Processing in Python\nDESCRIPTION: Bug fix for parent-child job relationships to handle re-adding completed child jobs using same jobIds\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelog.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconsider re-adding child that is in completed state using same jobIds\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS BullMQ Pro Package\nDESCRIPTION: Command to install the @taskforcesh/nestjs-bullmq-pro package using Yarn. BullMQ-Pro requires a token as explained in the installation documentation.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @taskforcesh/nestjs-bullmq-pro\n```\n\n----------------------------------------\n\nTITLE: Adding Complete Span in Job moveToCompleted Method\nDESCRIPTION: Enhancement to add complete span in the moveToCompleted method for improved tracing capabilities, referenced in issue #3132.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **job:** Add complete span in moveToCompleted method ([#3132](https://github.com/taskforcesh/bullmq/issues/3132)) ([`c37123c`](https://github.com/taskforcesh/bullmq/commit/c37123cc84632328d8c4e251641688eb36ac1a8a))\n```\n\n----------------------------------------\n\nTITLE: Fixing Flow Producer Processing in TypeScript\nDESCRIPTION: Fixes an issue with processing parent jobs that have children as an empty array. Addresses GitHub issue #547.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprocess parent with children as empty array\n```\n\n----------------------------------------\n\nTITLE: Testing Prometheus Metrics Endpoint\nDESCRIPTION: This command demonstrates how to test the Prometheus metrics endpoint using curl. It sends a GET request to the /metrics endpoint on localhost:3000.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/metrics/prometheus.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/metrics\n```\n\n----------------------------------------\n\nTITLE: Replace Multi with Lua Scripts in moveToFailed Method\nDESCRIPTION: Performance improvement that replaces Redis multi commands with Lua scripts in the moveToFailed method, referenced in issue #2958.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Replace multi by lua scripts in moveToFailed ([#2958](https://github.com/taskforcesh/bullmq/issues/2958)) ([`c19c914`](https://github.com/taskforcesh/bullmq/commit/c19c914969169c660a3e108126044c5152faf0cd))\n```\n\n----------------------------------------\n\nTITLE: Passing Parent Options to addBulk in TypeScript\nDESCRIPTION: Enables passing parent options when using the addBulk method to add multiple jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\njob: pass parent opts to addBulk\n```\n\n----------------------------------------\n\nTITLE: Fixing Rate Limit Priority in Python\nDESCRIPTION: This code snippet addresses a bug fix for maintaining priority FIFO order in rate limiting for BullMQ.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v3.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Bug fix for rate limiting priority\n# Keep priority fifo order\n# Issue #1991, fixes #1929\n```\n\n----------------------------------------\n\nTITLE: Support for Ignored and Failed Counts in Job Dependencies\nDESCRIPTION: Feature added to support ignored and failed counts in getDependenciesCount method of Job class, referenced in issue #3137.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **job:** Support ignored and failed counts in getDependenciesCount (#3137) ref #3136 ([`83953db`](https://github.com/taskforcesh/bullmq/commit/83953db54cad80e4ec0a7659f41cb5bc086ccacf))\n```\n\n----------------------------------------\n\nTITLE: Redis Timeout Type Adjustment for Compatibility\nDESCRIPTION: Fix to use timeout as an integer for Redis versions lower than 6.0.0. This ensures compatibility with older Redis versions where timeout parameters need to be integers.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- **worker:** Use timeout as integer for redis lower than v6.0.0 (python) ([#1981](https://github.com/taskforcesh/bullmq/issues/1981)) ([`0df6afa`](https://github.com/taskforcesh/bullmq/commit/0df6afad5e71a693b721ba52ffa6be733ee45ccb))\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ NestJS Module\nDESCRIPTION: Command to install the BullMQ module for NestJS using npm. This is the first step to integrate BullMQ with a NestJS application.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/nestjs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @nestjs/bullmq\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of getChildrenValues Method for Job\nDESCRIPTION: Feature addition to implement getChildrenValues method in the Python version, allowing retrieval of child job values, referenced in issue #2853.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- **job:** Add getChildrenValues method [python] ([#2853](https://github.com/taskforcesh/bullmq/issues/2853)) ([`0f25213`](https://github.com/taskforcesh/bullmq/commit/0f25213b28900a1c35922bd33611701629d83184))\n```\n\n----------------------------------------\n\nTITLE: Marker Implementation Change for Queue Management\nDESCRIPTION: A breaking change in the worker implementation where markers now use a dedicated key in Redis rather than using a special Job ID. This improves the management of queue markers.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* **worker:** markers use now a dedicated key in redis instead of using a special Job ID.\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Flows in TypeScript\nDESCRIPTION: Implements support for flows, enabling parent-child dependencies between jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nadd support for flows (parent-child dependencies)\n```\n\n----------------------------------------\n\nTITLE: Python Worker Fix for Casting delay_until to Integer\nDESCRIPTION: Bug fix in the Python implementation to cast delay_until to integer, referenced in issue #3116.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* **worker:** Cast delay_until to integer [python] ([#3116](https://github.com/taskforcesh/bullmq/issues/3116)) ([`db617e4`](https://github.com/taskforcesh/bullmq/commit/db617e48ef1dd52446bfd73e15f24957df2ca315))\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Delayed Job Promotion with Marker\nDESCRIPTION: Performance improvement for delayed job promotion in Python by adding a marker once when promoting delayed jobs, referenced in issue #3096.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- **delayed:** Add marker once when promoting delayed jobs (#3096) (python) ([`38912fb`](https://github.com/taskforcesh/bullmq/commit/38912fba969d614eb44d05517ba2ec8bc418a16e))\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Retry in Python\nDESCRIPTION: Fix to use async Retry for connection handling in Python.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nasync with Retry(max_retries=3):\n    # Connection logic here\n```\n\n----------------------------------------\n\nTITLE: Improving Job Removal in obliterate Method in TypeScript\nDESCRIPTION: Enhances the obliterate method to correctly remove multiple jobs.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nobliterate: correctly remove many jobs\n```\n\n----------------------------------------\n\nTITLE: Priority-Based Job Queue Implementation in BullMQ\nDESCRIPTION: Performance improvement that separates job priority into its own sorted set (zset), eliminating the need for data duplication. This change improves memory usage and queue performance.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- priority is separeted in its own zset, no duplication needed ([`42a890a`](https://github.com/taskforcesh/bullmq/commit/42a890a2bfe45b29348030f886766400f5d41aa3))\n```\n\n----------------------------------------\n\nTITLE: Fixing Stdout Redirection in Sandbox in TypeScript\nDESCRIPTION: Corrects the redirection of standard output in the sandbox environment. Addresses GitHub issue #525.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsandbox: properly redirect stdout\n```\n\n----------------------------------------\n\nTITLE: Setting NODE_DEBUG Environment Variable for BullMQ Debugging\nDESCRIPTION: These commands demonstrate how to set the NODE_DEBUG environment variable to enable debug logging for BullMQ. The first method sets it globally, while the second sets it for a specific script execution.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/debugging.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_DEBUG=bull\n```\n\nLANGUAGE: bash\nCODE:\n```\nNODE_DEBUG=bull node ./your-script.js\n```\n\n----------------------------------------\n\nTITLE: Stalled Job Performance Optimization in Python\nDESCRIPTION: Performance improvement to remove jobId from stalled list after removing lock when job is moved from active state.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Issue #2512 - Remove jobId from stalled after removing lock when moved from active\n```\n\n----------------------------------------\n\nTITLE: Differentiating Standard and Delayed Markers in Python\nDESCRIPTION: A performance improvement in Python implementation that differentiates between standard and delayed markers, potentially optimizing queue processing.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n/**\n* **marker:** differentiate standard and delayed markers (python) ([#2389](https://github.com/taskforcesh/bullmq/issues/2389)) ([18ebee8](https://github.com/taskforcesh/bullmq/commit/18ebee8c242f66f1b5b733d68e48c574b1f1fdef))\n*/\n```\n\n----------------------------------------\n\nTITLE: Python Bug Fix - Delayed Jobs Promotion\nDESCRIPTION: Performance improvement to keep moving delayed jobs to waiting state when queue is paused. Uses Python implementation.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nb89e2e0913c0886561fc1c2470771232f17f5b3b\n```\n\n----------------------------------------\n\nTITLE: Handling Broken Processor Files in Sandbox in TypeScript\nDESCRIPTION: Implements error handling for broken processor files in the sandbox environment.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsandbox: handle broken processor files\n```\n\n----------------------------------------\n\nTITLE: Fixing moveToCompleted for Jobs with Children in TypeScript\nDESCRIPTION: Corrects the moveToCompleted method to not complete a job before its children are finished.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nmovetocompleted: should not complete before children\n```\n\n----------------------------------------\n\nTITLE: Worker ID as Part of Token in BullMQ\nDESCRIPTION: Enhancement to add worker ID as part of the token in BullMQ. This improvement helps with tracking and identifying which worker is processing specific jobs, particularly in distributed environments.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- **worker:** Add id as part of token ([#2061](https://github.com/taskforcesh/bullmq/issues/2061)) ([`e255356`](https://github.com/taskforcesh/bullmq/commit/e2553562271e1e4143a8fef616349bb30de4899d))\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Authentication for BullMQ Pro\nDESCRIPTION: This snippet shows the contents of the .npmrc file needed to authenticate and install BullMQ Pro. It sets up the registry and authentication token for the @taskforcesh scope.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/install.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@taskforcesh:registry=https://npm.taskforce.sh/\n//npm.taskforce.sh/:_authToken=${NPM_TASKFORCESH_TOKEN}\nalways-auth=true\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delayed Jobs in Python\nDESCRIPTION: Fix to avoid using jobId when scheduling delayed jobs in Python.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Code not provided, but involves scheduling delayed jobs without using jobId\n```\n\n----------------------------------------\n\nTITLE: Worker Block Timeout Configuration in Python\nDESCRIPTION: Implementation to return minimum block timeout based on Redis version to ensure proper worker behavior.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Issue #2532 - Return minimumBlockTimeout depending on redis version\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ Python Package\nDESCRIPTION: Command to install the BullMQ Python package using pip package manager.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install bullmq\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger with Docker Compose\nDESCRIPTION: Command to start the Jaeger container using Docker Compose. After running this command, Jaeger will be available for tracing BullMQ operations.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/running-jaeger.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Metrics Accuracy Improvement\nDESCRIPTION: Fix to improve the accuracy of metrics in the Python implementation by differentiating points in different minutes, referenced in issue #2766.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- **metrics:** Differentiate points in different minutes to be more accurate (#2766) (python) ([`7cb670e`](https://github.com/taskforcesh/bullmq/commit/7cb670e1bf9560a24de3da52427b4f6b6152a59a))\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Obliteration Method in TypeScript\nDESCRIPTION: Adds a method to completely remove a queue and all associated data. Addresses GitHub issue #430.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nadd method to \"obliterate\" a queue\n```\n\n----------------------------------------\n\nTITLE: Registering a Flow Producer in NestJS BullMQ\nDESCRIPTION: Code snippet showing how to register a named flow producer in a NestJS module using BullMQ-Pro.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/README.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nBullModule.registerFlowProducer({\n  name: 'flowProducerName',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Active Type to QueueEvents in TypeScript\nDESCRIPTION: Adds the 'active' type to QueueEvents. Fixes GitHub issue #519.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nqueueevents: add active type\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Timeout in Python for Redis < v6.0.0\nDESCRIPTION: This code snippet shows a bug fix for using timeout as an integer for Redis versions lower than 6.0.0 in the BullMQ worker.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v3.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Bug fix for worker timeout\n# Use timeout as integer for redis lower than v6.0.0\n# Issue #1981\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ using yarn\nDESCRIPTION: Command to install BullMQ package using yarn package manager.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/README (1).md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add bullmq\n```\n\n----------------------------------------\n\nTITLE: Adding Marker When Moving Parent to Wait in Python\nDESCRIPTION: A performance improvement in Python implementation that adds a marker when moving a parent job to wait state, enhancing flow processing efficiency.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n/**\n* **flow:** add marker when moving parent to wait (python) ([#2408](https://github.com/taskforcesh/bullmq/issues/2408)) ([6fb6896](https://github.com/taskforcesh/bullmq/commit/6fb6896701ae7595e1cb5e2cdbef44625c48d673))\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing Bull with Yarn\nDESCRIPTION: Command to install the Bull library using Yarn package manager. This will add Bull as a dependency to your project.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/install.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add bull\n```\n\n----------------------------------------\n\nTITLE: Priority Handling in Python\nDESCRIPTION: Bug fix for priority state handling to consider paused state when calling getCountsPerPriority\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelog.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsider paused state when calling getCountsPerPriority\n```\n\n----------------------------------------\n\nTITLE: Scope Package Organization\nDESCRIPTION: Git commit showing package organization scoping change\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/changelog.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* scope the package for @taskforcesh org \\([177b591](https://github.com/taskforcesh/nestjs-bullmq-pro/commit/177b591d6c24202b7a256177faf4bb19e5f0bcea)\\)\n```\n\n----------------------------------------\n\nTITLE: Fixing Redis Cluster CROSSSLOT in addJob in TypeScript\nDESCRIPTION: Resolves a CROSSSLOT issue with Redis Cluster when adding a job.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\naddjob: fix redis cluster CROSSSLOT\n```\n\n----------------------------------------\n\nTITLE: Delayed Jobs Processing in Python\nDESCRIPTION: Performance improvement for handling delayed jobs queue processing to keep moving delayed jobs to waiting state when queue is paused\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelog.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nkeep moving delayed jobs to waiting when queue is paused\n```\n\n----------------------------------------\n\nTITLE: Python Priority Counts Implementation\nDESCRIPTION: Method implementation for getting counts per priority level, considering paused state in Python\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Getting Counts Per Priority in Python\nDESCRIPTION: New feature to get counts per priority, considering the paused state of the queue.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nqueue.getCountsPerPriority()\n```\n\n----------------------------------------\n\nTITLE: Python Connection Retry Logic\nDESCRIPTION: Implementation of async retry mechanism for Redis connections in Python\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Redis Connection with Username Option in BullMQ\nDESCRIPTION: Code snippet showing the addition of a username option to the Redis connection options in BullMQ. This allows users to authenticate with Redis instances that require username credentials in addition to passwords.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- **redis-connection:** Add username option into redisOpts ([#2108](https://github.com/taskforcesh/bullmq/issues/2108)) ([`d27f33e`](https://github.com/taskforcesh/bullmq/commit/d27f33e997d30e6c0c7d4484bea338347c3fe67e))\n```\n\n----------------------------------------\n\nTITLE: Remove Private Flag\nDESCRIPTION: Git commit removing private flag to enable publishing\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/changelog.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* remove private: true to allow publish \\([394e27f](https://github.com/taskforcesh/nestjs-bullmq-pro/commit/394e27f83faa7323ad2ae4b2eca7fdc89624561e)\\)\n```\n\n----------------------------------------\n\nTITLE: Updating Progress Script Removal in Python\nDESCRIPTION: A bug fix in Python implementation that removes an old updateProgress script to prevent conflicts with newer implementations.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n/**\n* **update-progress:** remove old updateProgress script to prevent conflict ([#2298](https://github.com/taskforcesh/bullmq/issues/2298)) (python) ([e65b819](https://github.com/taskforcesh/bullmq/commit/e65b819101f8e0e8fdef8c51cfdf9a52f5e73f13))\n*/\n```\n\n----------------------------------------\n\nTITLE: Python Parent Job Fix\nDESCRIPTION: Fix to handle re-adding completed child jobs using same jobIds in Python implementation\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n00cd0174539fbe1cc4628b9b6e1a7eb87a5ef705\n```\n\n----------------------------------------\n\nTITLE: Installing bullmq-otel Package\nDESCRIPTION: Command to install the bullmq-otel package which provides OpenTelemetry integration for BullMQ.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/getting-started.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add --save bullmq-otel\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Package for BullMQ\nDESCRIPTION: This commit marks the initial release of the Python package for BullMQ, expanding the library's language support.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\na97b22f518a9f6c5d9c30a77bfd03cafdcbc57ff\n```\n\n----------------------------------------\n\nTITLE: Failed Parent Job Handling in Python\nDESCRIPTION: Fix to consider failParentOnFailure option when moving child jobs into failed state.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Issue #2526 - Consider failParentOnFailure when moving child into failed\n```\n\n----------------------------------------\n\nTITLE: Handling Empty maxMetricsSize Parameter in JavaScript\nDESCRIPTION: This fix passes maxMetricsSize as an empty string when it is not provided, addressing issue #1754.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n6bda2b24be38a78e5fcfc71ed2913f0150a41dfc\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ using npm\nDESCRIPTION: Command to install BullMQ package using npm package manager.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/README (1).md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install bullmq\n```\n\n----------------------------------------\n\nTITLE: Setting Delay Value on Job Instance When Retried in Python\nDESCRIPTION: A bug fix in Python implementation that ensures the delay value is properly set on the current job instance when it is retried.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n/**\n* **job:** set delay value on current job instance when it is retried ([#2266](https://github.com/taskforcesh/bullmq/issues/2266)) (python) ([76e075f](https://github.com/taskforcesh/bullmq/commit/76e075f54d5745b6cec3cb11305bf3110d963eae))\n*/\n```\n\n----------------------------------------\n\nTITLE: Python JSON Dumps Fix\nDESCRIPTION: Fix to ensure json.dumps returns JSON compliant output in Python implementation of BullMQ\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fixing Stalled Jobs with Dependency Handling in Python\nDESCRIPTION: Bug fix that considers ignoreDependencyOnFailure option when handling stalled jobs to properly manage failed dependencies.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Issue #2540 - Consider ignoreDependencyOnFailure option\n```\n\n----------------------------------------\n\nTITLE: Adding Typing for addNextRepeatableJob in TypeScript\nDESCRIPTION: Adds TypeScript type definitions for the addNextRepeatableJob method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelogs/changelog-v1.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nadd typing for addNextRepeatableJob\n```\n\n----------------------------------------\n\nTITLE: Python Implementation Fix for ignoreDependencyOnFailure in Flow\nDESCRIPTION: Bug fix in the Python implementation to validate parentData before applying ignoreDependencyOnFailure option during stalled checks, referenced in issue #2702.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- **flow:** Validate parentData before ignoreDependencyOnFailure when stalled check happens (#2702) (python) ([`9416501`](https://github.com/taskforcesh/bullmq/commit/9416501551b1ad464e59bdba1045a5a9955e2ea4))\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Service Launch Commands\nDESCRIPTION: Commands to launch the producer and consumer services with OpenTelemetry instrumentation using tsx.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/running-a-simple-example.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntsx --import producer.inst.otlp.ts producer.ts\ntsx --import consumer.inst.otlp.ts consumer.ts\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Definitions for Bull with npm\nDESCRIPTION: Command to install TypeScript type definitions for Bull using npm. This is useful for projects using TypeScript to provide better type checking and IDE support.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/install.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @types/bull --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Definitions for Bull with Yarn\nDESCRIPTION: Command to install TypeScript type definitions for Bull using Yarn. This is useful for projects using TypeScript to provide better type checking and IDE support.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/install.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @types/bull\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Jaeger with BullMQ\nDESCRIPTION: A Docker Compose configuration file that sets up Jaeger for tracing BullMQ operations. It exposes port 4318 for exporting traces and port 16686 for the Jaeger UI.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/telemetry/running-jaeger.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    container_name: BullMQ_with_opentelemetry_jaeger\n    ports:\n      - '4318:4318'\n      - '16686:16686'\n\n```\n\n----------------------------------------\n\nTITLE: Ensuring JSON Compliance in Python\nDESCRIPTION: Fix to ensure json.dumps returns JSON-compliant output in Python.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\njson.dumps(data)\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ Pro Package\nDESCRIPTION: This command demonstrates how to install the BullMQ Pro package using Yarn. NPM or PNPM can also be used similarly.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/install.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @taskforcesh/bullmq-pro\n```\n\n----------------------------------------\n\nTITLE: Adding retryJobs Method to Queue in JavaScript\nDESCRIPTION: This feature introduces a new retryJobs method to the Queue class, addressing issue #1688.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n2745327c7a7080f72e8c265bae77429e597cb6d3\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ with Yarn\nDESCRIPTION: Command to install BullMQ package using Yarn package manager.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add bullmq\n```\n\n----------------------------------------\n\nTITLE: Installing Bull with npm\nDESCRIPTION: Command to install the Bull library using npm package manager. This will add Bull as a dependency to your project.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/install.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bull --save\n```\n\n----------------------------------------\n\nTITLE: Python Job Processing Performance\nDESCRIPTION: Performance improvement to set processedBy using hmset in Python implementation\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n238680b84593690a73d542dbe1120611c3508b47\n```\n\n----------------------------------------\n\nTITLE: Fix Package Reference\nDESCRIPTION: Git commit showing a fix to the package reference\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/nestjs/changelog.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **package:** point to dist files ([#2](https://github.com/taskforcesh/nestjs-bullmq-pro/issues/2)) \\([c55826c](https://github.com/taskforcesh/nestjs-bullmq-pro/commit/c55826ca8aa7b57a684788f28a0b2d23c009615b)\\)\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Specifies required Python packages and their exact versions for project dependency management. Includes packages for Redis (4.6.0), virtual environment management (virtualenv 20.26.6), semantic versioning (semver 2.13.0), and other utility packages.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasync-timeout==4.0.2\ncertifi==2024.7.4\ndistlib==0.3.7\nfilelock==3.12.2\nmsgpack==1.0.5\npipenv==2023.7.4\nplatformdirs==3.9.1\npre-commit==3.3.3\npython-semantic-release==7.28.1\nredis==4.6.0\nsemver==2.13.0\nsix==1.16.0\nvirtualenv==20.26.6\nvirtualenv-clone==0.5.7\n```\n\n----------------------------------------\n\nTITLE: Getting Deduplication Job ID (TypeScript)\nDESCRIPTION: Shows how to retrieve the ID of the job that started the deduplicated state using the getDeduplicationJobId method.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/jobs/deduplication.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst jobId = await myQueue.getDeduplicationJobId('customValue');\n```\n\n----------------------------------------\n\nTITLE: Python Requires Configuration in pyproject.toml\nDESCRIPTION: A fix to add the requires-python configuration in pyproject.toml. This ensures that the package will only be installed on compatible Python versions, preventing installation issues.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/python/CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- **pyproject:** Add requires-python config (#2056) fixes #1979 ([`a557970`](https://github.com/taskforcesh/bullmq/commit/a557970c755d370ed23850e2f32af35774002bc9))\n```\n\n----------------------------------------\n\nTITLE: Connection Configuration Breaking Change in BullMQ v5\nDESCRIPTION: A breaking change that requires connections to be explicitly passed to BullMQ components instead of being created implicitly. This improves connection management and control.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* **connection:** require connection to be passed ([#2335](https://github.com/taskforcesh/bullmq/issues/2335)) ([1867dd1](https://github.com/taskforcesh/bullmq/commit/1867dd107d7edbd417bf6918354ae4656480a544))\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing BullMQ\nDESCRIPTION: Commands for installing dependencies and running the test suite for BullMQ pull request verification.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/contributing.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Creating an Error-Based Backoff Strategy in BullMQ\nDESCRIPTION: This example shows how to implement a backoff strategy that applies different delays based on the type of error that occurred. It defines a custom error type and returns longer delays for that specific error and shorter delays for other errors.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/patterns/custom-backoff-strategy.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Queue = require('bull');\n\nfunction MySpecificError() {};\n\nconst myQueue = new Queue('Server C', {\n  settings: {\n    backoffStrategies: {\n      foo: function (attemptsMade, err) {\n        if (err instanceof MySpecificError) {\n          return 10000;\n        }\n        return 1000;\n      }\n    }\n  }\n});\n\nmyQueue.process(function (job, done) {\n  if (job.data.msg === 'Specific Error') {\n    throw new MySpecificError();\n  } else {\n    throw new Error();\n  }\n});\n\nmyQueue.add({ msg: 'Hello' }, {\n  attempts: 3,\n  backoff: {\n    type: 'foo'\n  }\n});\n\nmyQueue.add({ msg: 'Specific Error' }, {\n  attempts: 3,\n  backoff: {\n    type: 'foo'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Version Release Headers and Changes in Markdown\nDESCRIPTION: Markdown formatted changelog entries showing version numbers, commit hashes, and categorized changes across multiple BullMQ releases\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/changelog.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.21.2](https://github.com/taskforcesh/bullmq/compare/v5.21.1...v5.21.2) (2024-10-22)\n\n### Bug Fixes\n\n* proper way to get version ([b4e25c1](https://github.com/taskforcesh/bullmq/commit/b4e25c13cafc001748ee6eb590133feb8ee24d7b))\n\n## [5.21.1](https://github.com/taskforcesh/bullmq/compare/v5.21.0...v5.21.1) (2024-10-18)\n\n### Bug Fixes\n\n* **scripts:** add missing wait in isJobInList ([9ef865c](https://github.com/taskforcesh/bullmq/commit/9ef865c7de6086cb3c906721fd046aeed1e0d27f))\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Timestamp in QueueEvents Listener\nDESCRIPTION: This snippet shows how to access the timestamp of an event when using QueueEvents. It listens for the 'progress' event and logs the job ID, progress data, and the event timestamp.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/README (1).md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueEvents } from 'bullmq';\n\nconst queueEvents = new QueueEvents(\"my-queue-name\");\n\nqueueEvents.on('progress', ({ jobId, data }, timestamp) => {\n  console.log(`${jobId} reported progress ${data} at ${timestamp}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Immediate Job Execution in BullMQ\nDESCRIPTION: Shows how to configure a job to execute immediately upon creation before following its regular schedule. Note: This feature is deprecated from version 5.19.0.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/job-schedulers/repeat-options.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait myQueue.upsertJobScheduler(\n  'immediate-job',\n  {\n    every: 86400000, // once a day\n    immediately: true, // execute the first one immediately\n  },\n  {\n    name: 'instant-job',\n    data: { message: 'Immediate start' },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Revert Console Warning for Integer Custom Job IDs\nDESCRIPTION: A breaking change that reverts a previous implementation where warnings were shown in the console when custom job IDs represented integers.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* **job:** revert console warn custom job ids when they represent integers ([#2312](https://github.com/taskforcesh/bullmq/issues/2312)) ([84015ff](https://github.com/taskforcesh/bullmq/commit/84015ffa04216c45d8f3181a7f859b8c0792c80d))\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Queues for Different Users\nDESCRIPTION: Shows how to create separate queues for different users. While queues are relatively lightweight, this pattern notes that having too many can become unmanageable.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bull/quick-guide.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst userJohn = new Queue('john');\nconst userLisa = new Queue('lisa');\n.\n.\n.\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Errors in TypeScript\nDESCRIPTION: This snippet shows how to attach an error listener to a Worker to prevent unhandled exceptions. It's crucial for maintaining the worker's ability to process jobs when errors occur.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/guide/workers/README.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nworker.on('error', err => {\n  // log the error\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Remove Type Check in Stalled Key\nDESCRIPTION: A breaking change that removes type checking in the stalled key functionality, potentially allowing for more flexibility but requiring careful handling by users.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/bullmq-pro/changelog.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* **stalled:** remove type check in stalled key\n*/\n```\n\n----------------------------------------\n\nTITLE: Waiting for Jobs to Finalize on Worker Close in Python\nDESCRIPTION: Fix to ensure all jobs are finalized when closing a worker in Python.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync def close(self):\n    # Wait for jobs to finalize\n    await self.wait_for_jobs()\n```\n\n----------------------------------------\n\nTITLE: Moving Delayed Jobs to Waiting Queue in Python\nDESCRIPTION: Performance improvement to continue moving delayed jobs to waiting queue even when the queue is paused.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Code not provided, but involves moving delayed jobs to waiting queue\n```\n\n----------------------------------------\n\nTITLE: Adding Job Logs in Python\nDESCRIPTION: New feature to add logs to a job in Python.\nSOURCE: https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/python/changelog.md#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\njob.log(\"Log message\")\n```"
  }
]