[
  {
    "owner": "livekit",
    "repo": "components-js",
    "content": "TITLE: LiveKit Hook TypeScript Definitions\nDESCRIPTION: TypeScript type definitions and interfaces for LiveKit React hooks including room management, participant tracking, media device control, and layout management. Contains function signatures and type definitions but no implementation details.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useConnectionQualityIndicator(options?: ConnectionQualityIndicatorOptions): {\n    className: \"lk-connection-quality\";\n    quality: ConnectionQuality;\n};\n\nexport function useConnectionState(room?: Room): ConnectionState_2;\n\nexport function useCreateLayoutContext(): LayoutContextType;\n\nexport function useDataChannel<T extends string>(topic: T, onMessage?: (msg: ReceivedDataMessage<T>) => void): UseDataChannelReturnType<T>;\n\nexport function useDataChannel(onMessage?: (msg: ReceivedDataMessage) => void): UseDataChannelReturnType;\n\nexport interface UseParticipantTileProps<T extends HTMLElement> extends React_2.HTMLAttributes<T> {\n    disableSpeakingIndicator?: boolean;\n    htmlProps: React_2.HTMLAttributes<T>;\n    onParticipantClick?: (event: ParticipantClickEvent_3) => void;\n    trackRef?: TrackReferenceOrPlaceholder_4;\n}\n```\n\n----------------------------------------\n\nTITLE: Participant Management Hook Definitions in TypeScript\nDESCRIPTION: Type definitions for hooks that manage remote participants in a LiveKit room, including useRemoteParticipant and useRemoteParticipants with their respective option interfaces.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useRemoteParticipant(identifier: ParticipantIdentifier_2, options?: UseRemoteParticipantOptions): RemoteParticipant | undefined;\n\nexport function useRemoteParticipant(identity: string, options?: UseRemoteParticipantOptions): RemoteParticipant | undefined;\n\nexport interface UseRemoteParticipantOptions {\n    updateOnlyOn?: ParticipantEvent[];\n}\n\nexport function useRemoteParticipants(options?: UseRemoteParticipantsOptions): RemoteParticipant[];\n\nexport interface UseRemoteParticipantsOptions {\n    room?: Room;\n    updateOnlyOn?: RoomEvent[];\n}\n```\n\n----------------------------------------\n\nTITLE: Room Management Hook Definitions in TypeScript\nDESCRIPTION: Type definitions for hooks managing room-related functionality including useRoomContext, useRoomInfo, and room information interfaces.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UserInfo {\n    identity?: string;\n    metadata?: string;\n    name?: string;\n}\n\nexport function useRoomContext(): Room;\n\nexport function useRoomInfo(options?: UseRoomInfoOptions): {\n    name: string;\n    metadata: string | undefined;\n};\n\nexport interface UseRoomInfoOptions {\n    room?: Room;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Video Conference Implementation with LiveKit Components in React\nDESCRIPTION: A minimal example showing how to set up a video conference in a React application using LiveKit components. It uses the LiveKitRoom component to connect to a LiveKit server and the VideoConference component to render the interface.\nSOURCE: https://github.com/livekit/components-js/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LiveKitRoom, VideoConference } from '@livekit/components-react';\n\nconst TOKEN = 'generated-jwt';\nconst WS_URL = 'wss://my-livekit-server';\n\nexport default function Example() {\n  return (\n    <LiveKitRoom token={TOKEN} serverUrl={WS_URL} connect={true}>\n      <VideoConference />\n    </LiveKitRoom>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: User Preferences Management\nDESCRIPTION: Functions for loading and saving user media preferences.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function loadUserChoices(defaults?: Partial<LocalUserChoices>, preventLoad?: boolean): LocalUserChoices;\n\nexport type LocalUserChoices = {\n    videoEnabled: boolean;\n    audioEnabled: boolean;\n    videoDeviceId: string;\n    audioDeviceId: string;\n    username: string;\n};\n\nexport function saveUserChoices(userChoices: LocalUserChoices, preventSave?: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing PreJoin Component in React\nDESCRIPTION: This function component renders a pre-join interface for a LiveKit room, handling user inputs and validation before joining. It accepts PreJoinProps.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function PreJoin({ defaults, onValidate, onSubmit, onError, debug, joinLabel, micLabel, camLabel, userLabel, persistUserChoices, videoProcessor, ...htmlProps }: PreJoinProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Using LiveKitRoom Component in React\nDESCRIPTION: Example of implementing the LiveKitRoom component in a React application. The component requires a LiveKit token and server URL, and the connect flag is set to true to establish the connection.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LiveKitRoom } from '@livekit/components-react';\n\n<LiveKitRoom token=\"<livekit-token>\" serverUrl=\"<url-to-livekit-server>\" connect={true} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing ParticipantContextIfNeeded Component in React\nDESCRIPTION: This function component wraps children with a ParticipantContext provider if a participant prop is provided. It's useful for conditionally providing participant context.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function ParticipantContextIfNeeded(props: React_2.PropsWithChildren<{\n    participant?: Participant;\n}>): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining ControlBar Component in TypeScript\nDESCRIPTION: Implementation of the ControlBar component which provides UI controls for audio, video, chat, screen sharing and other conference room functions.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function ControlBar({ variation, controls, saveUserChoices, onDeviceError, ...props }: ControlBarProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining LiveKitRoom Component in TypeScript\nDESCRIPTION: Definition of the LiveKitRoom component that serves as the main container for LiveKit functionality. It accepts props for configuring room connection, media tracks, and event handlers.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const LiveKitRoom: (props: React_2.PropsWithChildren<LiveKitRoomProps> & React_2.RefAttributes<HTMLDivElement>) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Defining FocusLayout Component in TypeScript\nDESCRIPTION: Implementation of the FocusLayout component which displays a specific track in focus with other tracks minimized.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function FocusLayout({ trackRef, ...htmlProps }: FocusLayoutProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutContextProvider Component in TypeScript\nDESCRIPTION: Implementation of the LayoutContextProvider which manages state for layout-related features like pinning and widgets in the video conference UI.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function LayoutContextProvider({ value, onPinChange, onWidgetChange, children, }: React_2.PropsWithChildren<LayoutContextProviderProps>): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Stream Setup in TypeScript\nDESCRIPTION: Defines a function to set up a text stream for a room and topic, returning an Observable of TextStreamData arrays.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupTextStream(room: Room, topic: string): Observable<TextStreamData[]>;\n```\n\n----------------------------------------\n\nTITLE: Implementing useAudioWaveform Hook in React\nDESCRIPTION: This hook generates an audio waveform for a given audio track. It's marked as alpha and returns an array of bar heights.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useAudioWaveform(trackOrTrackReference?: LocalAudioTrack | RemoteAudioTrack | TrackReferenceOrPlaceholder_4, options?: AudioWaveformOptions): {\n    bars: number[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LiveKitRoomProps Interface in TypeScript\nDESCRIPTION: Interface defining the properties that can be passed to the LiveKitRoom component, including connection options, media settings, and event callbacks.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface LiveKitRoomProps extends Omit<React_2.HTMLAttributes<HTMLDivElement>, 'onError'> {\n    audio?: AudioCaptureOptions | boolean;\n    connect?: boolean;\n    connectOptions?: RoomConnectOptions;\n    // @internal (undocumented)\n    featureFlags?: FeatureFlags;\n    // (undocumented)\n    onConnected?: () => void;\n    // (undocumented)\n    onDisconnected?: (reason?: DisconnectReason) => void;\n    // (undocumented)\n    onEncryptionError?: (error: Error) => void;\n    // (undocumented)\n    onError?: (error: Error) => void;\n    // (undocumented)\n    onMediaDeviceFailure?: (failure?: MediaDeviceFailure) => void;\n    options?: RoomOptions;\n    room?: Room;\n    screen?: ScreenShareCaptureOptions | boolean;\n    serverUrl: string | undefined;\n    // (undocumented)\n    simulateParticipants?: number | undefined;\n    token: string | undefined;\n    video?: VideoCaptureOptions | boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RoomAudioRenderer Component in React\nDESCRIPTION: This function component renders audio for a LiveKit room, handling volume and mute state. It accepts RoomAudioRendererProps.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function RoomAudioRenderer({ volume, muted }: RoomAudioRendererProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining GridLayout Component in TypeScript\nDESCRIPTION: Implementation of the GridLayout component which arranges track displays in a grid format for video conferencing.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function GridLayout({ tracks, ...props }: GridLayoutProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantTile Component in React\nDESCRIPTION: This code defines a React component for rendering a tile for a participant. It accepts ParticipantTileProps and a ref.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ParticipantTile: (props: ParticipantTileProps & React_2.RefAttributes<HTMLDivElement>) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Defining TrackToggle Component in React\nDESCRIPTION: This code defines a React component for toggling track state. It's a generic component that accepts TrackToggleProps and a ref.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TrackToggle: <T extends ToggleSource>(props: TrackToggleProps<T> & React_2.RefAttributes<HTMLButtonElement>) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Quality Indicator Setup in TypeScript\nDESCRIPTION: Defines a function to set up a connection quality indicator for a participant, returning an object with className and connectionQualityObserver properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupConnectionQualityIndicator(participant: Participant): {\n    className: \"lk-connection-quality\";\n    connectionQualityObserver: Observable<ConnectionQuality>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantAudioTile Component in React\nDESCRIPTION: This code defines a React component for rendering an audio tile for a participant. It accepts ParticipantTileProps and a ref.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ParticipantAudioTile: (props: ParticipantTileProps & React_2.RefAttributes<HTMLDivElement>) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Implementing useChat Hook in React\nDESCRIPTION: This hook manages chat functionality for a LiveKit room, providing methods to send messages and access chat history.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useChat(options?: ChatOptions): {\n    send: (message: string, options?: SendTextOptions) => Promise<ReceivedChatMessage_2>;\n    chatMessages: ReceivedChatMessage_2[];\n    isSending: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RoomName Component in React\nDESCRIPTION: This code defines a React component for displaying the name of a LiveKit room. It accepts RoomNameProps and a ref.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const RoomName: React_2.FC<RoomNameProps & React_2.RefAttributes<HTMLSpanElement>>;\n```\n\n----------------------------------------\n\nTITLE: Media Control Hook Definitions in TypeScript\nDESCRIPTION: Type definitions for hooks that control audio and video functionality, including useStartAudio and useStartVideo with their respective props interfaces.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useStartAudio({ room, props }: UseStartAudioProps): {\n    mergedProps: React_2.ButtonHTMLAttributes<HTMLButtonElement> & {\n        className: string;\n        onClick: () => void;\n        style: {\n            display: string;\n        };\n    };\n    canPlayAudio: boolean;\n};\n\nexport interface UseStartAudioProps {\n    props: React_2.ButtonHTMLAttributes<HTMLButtonElement>;\n    room?: Room;\n}\n\nexport function useStartVideo({ room, props }: UseStartVideoProps): {\n    mergedProps: React_2.ButtonHTMLAttributes<HTMLButtonElement> & {\n        className: string;\n        onClick: () => void;\n        style: {\n            display: string;\n        };\n    };\n    canPlayVideo: boolean;\n};\n\nexport interface UseStartVideoProps {\n    props: React_2.ButtonHTMLAttributes<HTMLButtonElement>;\n    room?: Room;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StartMediaButton Component in React\nDESCRIPTION: This code defines a React component for starting media playback. It accepts AllowMediaPlaybackProps and a ref.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const StartMediaButton: (props: AllowMediaPlaybackProps & React_2.RefAttributes<HTMLButtonElement>) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Track Management Hook Definitions in TypeScript\nDESCRIPTION: Type definitions for hooks managing media tracks, including useTracks, useTrackToggle, and related interfaces for track handling.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useTracks<T extends SourcesArray = Track.Source[]>(sources?: T, options?: UseTracksOptions): UseTracksHookReturnType<T>;\n\nexport type UseTracksHookReturnType<T> = T extends Track.Source[] ? TrackReference_3[] : T extends TrackSourceWithOptions[] ? TrackReferenceOrPlaceholder_4[] : never;\n\nexport type UseTracksOptions = {\n    updateOnlyOn?: RoomEvent[];\n    onlySubscribed?: boolean;\n    room?: Room;\n};\n\nexport function useTrackToggle<T extends ToggleSource_2>({ source, onChange, initialState, captureOptions, publishOptions, onDeviceError, ...rest }: UseTrackToggleProps<T>): {\n    toggle: ((forceState?: boolean) => Promise<void>) | ((forceState?: boolean, captureOptions?: CaptureOptionsBySource_2<T> | undefined) => Promise<boolean | undefined>);\n    enabled: boolean;\n    pending: boolean;\n    track: LocalTrackPublication | undefined;\n    buttonProps: React_2.ButtonHTMLAttributes<HTMLButtonElement>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TrackToggleProps Interface\nDESCRIPTION: This interface extends button HTML attributes and adds properties for customizing track toggle behavior, including capture options, publish options, and callbacks.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TrackToggleProps<T extends ToggleSource> extends Omit<React_2.ButtonHTMLAttributes<HTMLButtonElement>, 'onChange'> {\n    captureOptions?: CaptureOptionsBySource<T>;\n    initialState?: boolean;\n    onChange?: (enabled: boolean, isUserInitiated: boolean) => void;\n    onDeviceError?: (error: Error) => void;\n    publishOptions?: TrackPublishOptions;\n    showIcon?: boolean;\n    source: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChatProps Interface in TypeScript\nDESCRIPTION: Interface defining the properties for the Chat component, including customization options and message formatting capabilities.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ChatProps extends React_2.HTMLAttributes<HTMLDivElement>, ChatOptions {\n    // (undocumented)\n    messageFormatter?: MessageFormatter;\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Message Interfaces\nDESCRIPTION: Interface definitions for chat message types including legacy support.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LegacyChatMessage extends ChatMessage {\n    ignoreLegacy?: boolean;\n}\n\nexport const LegacyDataTopic: {\n    readonly CHAT: \"lk-chat-topic\";\n};\n\nexport interface LegacyReceivedChatMessage extends ReceivedChatMessage {\n    ignoreLegacy?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantLoopProps Interface\nDESCRIPTION: This interface defines the props for the ParticipantLoop component, including children and an array of Participant objects.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ParticipantLoopProps {\n    children: React_2.ReactNode;\n    participants: Participant[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useAudioPlayback Hook in React\nDESCRIPTION: This hook manages audio playback for a LiveKit room, providing methods to check if audio can be played and to start audio. It's marked as alpha.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useAudioPlayback(room?: Room): {\n    canPlayAudio: boolean;\n    startAudio: () => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Start Video Setup in TypeScript\nDESCRIPTION: Defines a function to set up video start functionality, returning an object with className, roomVideoPlaybackAllowedObservable, and handleStartVideoPlayback properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupStartVideo(): {\n    className: string;\n    roomVideoPlaybackAllowedObservable: typeof roomVideoPlaybackAllowedObservable;\n    handleStartVideoPlayback: (room: Room) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MediaDeviceMenu Component in TypeScript\nDESCRIPTION: Implementation of the MediaDeviceMenu component which provides a UI for selecting and configuring audio and video input/output devices.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function MediaDeviceMenu({ kind, initialSelection, onActiveDeviceChange, tracks, requestPermissions, ...props }: MediaDeviceMenuProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Implementing Start Audio Setup in TypeScript\nDESCRIPTION: Defines a function to set up audio start functionality, returning an object with className, roomAudioPlaybackAllowedObservable, and handleStartAudioPlayback properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupStartAudio(): {\n    className: string;\n    roomAudioPlaybackAllowedObservable: typeof roomAudioPlaybackAllowedObservable;\n    handleStartAudioPlayback: (room: Room) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ControlBarProps Interface in TypeScript\nDESCRIPTION: Interface defining the properties for the ControlBar component, including which controls to display and error handling callbacks.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ControlBarProps extends React_2.HTMLAttributes<HTMLDivElement> {\n    // (undocumented)\n    controls?: ControlBarControls;\n    // (undocumented)\n    onDeviceError?: (error: {\n        source: Track.Source;\n        error: Error;\n    }) => void;\n    // @alpha\n    saveUserChoices?: boolean;\n    // (undocumented)\n    variation?: 'minimal' | 'verbose' | 'textOnly';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UseChatToggleProps Interface\nDESCRIPTION: This interface defines the props for the useChatToggle hook, including button HTML attributes.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UseChatToggleProps {\n    props: React_2.ButtonHTMLAttributes<HTMLButtonElement>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Toggle Setup in TypeScript\nDESCRIPTION: Defines a function to set up a media toggle for a given source and room, with optional capture and publish options.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupMediaToggle<T extends ToggleSource>(source: T, room: Room, options?: CaptureOptionsBySource<T>, publishOptions?: TrackPublishOptions, onError?: (error: Error) => void): MediaToggleType<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantTileProps Interface\nDESCRIPTION: This interface extends HTMLAttributes for a div element and adds properties for participant tile customization, including speaking indicator and click handling.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ParticipantTileProps extends React_2.HTMLAttributes<HTMLDivElement> {\n    disableSpeakingIndicator?: boolean;\n    onParticipantClick?: (event: ParticipantClickEvent_2) => void;\n    trackRef?: TrackReferenceOrPlaceholder_3;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Selector Setup in TypeScript\nDESCRIPTION: Defines a function to set up a device selector for audio or video tracks, returning an object with className, activeDeviceObservable, and setActiveMediaDevice properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupDeviceSelector(kind: MediaDeviceKind, room: Room, localTrack?: LocalAudioTrack | LocalVideoTrack): {\n    className: string;\n    activeDeviceObservable: Observable<string>;\n    setActiveMediaDevice: (id: string, options?: SetMediaDeviceOptions) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ControlBarControls Type in TypeScript\nDESCRIPTION: Type definition for configuring which control buttons should be displayed in the ControlBar component.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ControlBarControls = {\n    microphone?: boolean;\n    camera?: boolean;\n    chat?: boolean;\n    screenShare?: boolean;\n    leave?: boolean;\n    settings?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Participant Name Setup in TypeScript\nDESCRIPTION: Defines a function to set up a participant name display, returning an object with className and infoObserver properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupParticipantName(participant: Participant): {\n    className: string;\n    infoObserver: Observable<    {\n    name: string | undefined;\n    identity: string;\n    metadata: string | undefined;\n    } | {\n    name: string | undefined;\n    identity: string;\n    metadata: string | undefined;\n    }> | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RoomContext in React\nDESCRIPTION: This code creates a React context for a LiveKit Room object. It's marked as public but undocumented.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const RoomContext: React_2.Context<Room | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Track Muted Indicator Setup in TypeScript\nDESCRIPTION: Defines a function to set up a track muted indicator, returning an object with className and mediaMutedObserver properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupTrackMutedIndicator(trackRef: TrackReferenceOrPlaceholder): {\n    className: string;\n    mediaMutedObserver: Observable<boolean>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantContext in React\nDESCRIPTION: This code creates a React context for a LiveKit Participant object. It's marked as public but undocumented.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ParticipantContext: React_2.Context<Participant | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Defining TrackMutedIndicatorProps Interface\nDESCRIPTION: This interface extends HTMLAttributes for a div element and adds properties for customizing the muted indicator, including when to show it and the track reference.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TrackMutedIndicatorProps extends React_2.HTMLAttributes<HTMLDivElement> {\n    show?: 'always' | 'muted' | 'unmuted';\n    trackRef: TrackReferenceOrPlaceholder_3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChatMessage Interface in TypeScript\nDESCRIPTION: Defines the structure of a chat message, including sender information, message content, and optional attached files.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly timestamp: number;\nreadonly attachedFiles?: Array<File>;\n```\n\n----------------------------------------\n\nTITLE: Defining PreJoinProps Interface\nDESCRIPTION: This interface defines props for the PreJoin component, including callbacks for validation, submission, and error handling, as well as UI customization options.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface PreJoinProps extends Omit<React_2.HTMLAttributes<HTMLDivElement>, 'onSubmit' | 'onError'> {\n    camLabel?: string;\n    debug?: boolean;\n    defaults?: Partial<LocalUserChoices_2>;\n    joinLabel?: string;\n    micLabel?: string;\n    onError?: (error: Error) => void;\n    onSubmit?: (values: LocalUserChoices_2) => void;\n    onValidate?: (values: LocalUserChoices_2) => boolean;\n    persistUserChoices?: boolean;\n    userLabel?: string;\n    videoProcessor?: TrackProcessor<Track.Kind.Video>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ParticipantLoop Component in React\nDESCRIPTION: This function component renders a loop over provided participants, likely for displaying multiple participant components. It accepts ParticipantLoopProps.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function ParticipantLoop({ participants, ...props }: ParticipantLoopProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining RoomAudioRendererProps Interface\nDESCRIPTION: This interface defines props for the RoomAudioRenderer component, including volume and mute state.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface RoomAudioRendererProps {\n    muted?: boolean;\n    volume?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TrackLoop Component in React\nDESCRIPTION: This function component renders a loop over provided tracks, likely for displaying multiple track components. It accepts TrackLoopProps.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function TrackLoop({ tracks, ...props }: TrackLoopProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining RoomNameProps Interface\nDESCRIPTION: This interface extends HTMLAttributes for a span element and adds a property for positioning children relative to the room name.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface RoomNameProps extends React_2.HTMLAttributes<HTMLSpanElement> {\n    childrenPosition?: 'before' | 'after';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantName Component in React\nDESCRIPTION: This code defines a React component for displaying a participant's name. It accepts ParticipantNameProps and a ref.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ParticipantName: (props: ParticipantNameProps & React_2.RefAttributes<HTMLSpanElement>) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Defining MultiBandTrackVolumeOptions Interface\nDESCRIPTION: This interface defines options for multi-band track volume analysis, including analyzer options, number of bands, and frequency ranges.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface MultiBandTrackVolumeOptions {\n    analyserOptions?: AnalyserOptions;\n    bands?: number;\n    hiPass?: number;\n    loPass?: number;\n    updateInterval?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Track Setup in TypeScript\nDESCRIPTION: Defines a function to set up a media track for a given track identifier, returning an object with className and trackObserver properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupMediaTrack(trackIdentifier: TrackIdentifier): {\n    className: string;\n    trackObserver: Observable<TrackPublication | undefined>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Message Handler Setup in TypeScript\nDESCRIPTION: Defines a function to set up a data message handler for a room, returning an object with messageObservable, isSendingObservable, and send properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupDataMessageHandler<T extends string>(room: Room, topic?: T | [T, ...T[]], onMessage?: (msg: ReceivedDataMessage<T>) => void): {\n    messageObservable: Observable<{\n        payload: Uint8Array<ArrayBufferLike>;\n        topic: T;\n        from: RemoteParticipant | undefined;\n    }>;\n    isSendingObservable: Observable<boolean>;\n    send: (payload: Uint8Array, options?: DataPublishOptions) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionStateToast Component in TypeScript\nDESCRIPTION: Implementation of the ConnectionStateToast component which displays notifications about the connection state of the room.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function ConnectionStateToast(props: ConnectionStateToastProps): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining MicIcon Component in React\nDESCRIPTION: This code defines a React component for rendering a microphone icon. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const MicIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Implementing Disconnect Button Setup in TypeScript\nDESCRIPTION: Defines a function to set up a disconnect button for a room, returning an object with className and disconnect properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupDisconnectButton(room: Room): {\n    className: string;\n    disconnect: (stopTracks?: boolean) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useChatToggle Hook in React\nDESCRIPTION: This hook manages the state and properties for a chat toggle button, including handling unread message indicators.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useChatToggle({ props }: UseChatToggleProps): {\n    mergedProps: React_2.ButtonHTMLAttributes<HTMLButtonElement> & {\n        className: string;\n        onClick: () => void;\n        'aria-pressed': string;\n        'data-lk-unread-msgs': string;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Toggle Setup in TypeScript\nDESCRIPTION: Defines a function to set up a chat toggle, returning an object with a className property.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupChatToggle(): {\n    className: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Component in React\nDESCRIPTION: This function component renders a toast notification. It accepts standard HTML div attributes.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function Toast(props: React_2.HTMLAttributes<HTMLDivElement>): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Implementing Clear Pin Button Setup in TypeScript\nDESCRIPTION: Defines a function to set up a clear pin button, returning an object with a className property.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupClearPinButton(): {\n    className: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining StartAudio Component in React\nDESCRIPTION: This code defines a React component for starting audio playback. It accepts AllowAudioPlaybackProps and a ref.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const StartAudio: (props: AllowAudioPlaybackProps & React_2.RefAttributes<HTMLButtonElement>) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Defining QualityPoorIcon Component in React\nDESCRIPTION: This code defines a React component for rendering an icon indicating poor quality. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const QualityPoorIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Toggle Setup in TypeScript\nDESCRIPTION: Defines a function to set up a focus toggle, returning an object with a className property.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupFocusToggle(): {\n    className: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TrackMutedIndicator Component in React\nDESCRIPTION: This code defines a React component for indicating whether a track is muted. It accepts TrackMutedIndicatorProps and a ref.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TrackMutedIndicator: (props: TrackMutedIndicatorProps & React_2.RefAttributes<HTMLDivElement>) => React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Defining TrackRefContext in React\nDESCRIPTION: This code creates a React context for a LiveKit TrackReferenceOrPlaceholder object. It's marked as public.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const TrackRefContext: React_2.Context<TrackReferenceOrPlaceholder_4 | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Participant Tile Setup in TypeScript\nDESCRIPTION: Defines a function to set up a participant tile, returning an object with a className property.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupParticipantTile(): {\n    className: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining formatChatMessageLinks Function in TypeScript\nDESCRIPTION: Utility function that converts URLs in text messages into clickable links for the chat component.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function formatChatMessageLinks(message: string): React_2.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantNameProps Interface\nDESCRIPTION: This interface extends HTMLAttributes for a span element and UseParticipantInfoOptions for the ParticipantName component.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ParticipantNameProps extends React_2.HTMLAttributes<HTMLSpanElement>, UseParticipantInfoOptions {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LiveKit Components for React\nDESCRIPTION: Command to install the LiveKit Components React package via npm. This is the first step to integrate LiveKit components into a React application.\nSOURCE: https://github.com/livekit/components-js/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @livekit/components-react\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveKit Room Setup in TypeScript\nDESCRIPTION: Defines a function to set up a LiveKit room, returning an object with a className property.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupLiveKitRoom(): {\n    className: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing LiveKit Components for React\nDESCRIPTION: Command to install the LiveKit Components React package via npm.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @livekit/components-react\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Toggle Setup in TypeScript\nDESCRIPTION: Defines a function to set up a manual toggle, returning an object with className, toggle, enabledObserver, and pendingObserver properties.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function setupManualToggle(): {\n    className: string;\n    toggle: (forceState?: boolean) => Promise<void>;\n    enabledObserver: Observable<boolean>;\n    pendingObserver: Observable<boolean>;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting LiveKit Storybook using PNPM\nDESCRIPTION: Command to launch the LiveKit Components Storybook development server, which will open in the default browser at http://localhost:6006.\nSOURCE: https://github.com/livekit/components-js/blob/main/docs/storybook/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:storybook\n```\n\n----------------------------------------\n\nTITLE: Defining TrackLoopProps Interface\nDESCRIPTION: This interface defines the props for the TrackLoop component, including children and an array of track references.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TrackLoopProps {\n    children: React_2.ReactNode;\n    tracks: TrackReference_3[] | TrackReferenceOrPlaceholder_4[];\n}\n```\n\n----------------------------------------\n\nTITLE: Prefix Transformation Examples in PostCSS for LiveKit Components\nDESCRIPTION: Shows examples of how CSS selectors are transformed by PostCSS plugins to include prefixes (e.g., 'lk-'). This helps avoid naming collisions while maintaining clean code in the development process.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/styles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| no prefix               | with `lk` prefix           |\n| ----------------------- | -------------------------- |\n| `.button`               | `.lk-button`               |\n| `--border-color`        | `--lk-border-color`        |\n| `var(--fg)`             | `var(--lk-fg)`             |\n| `[data-active='false']` | `[data-lk-active='false']` |\n| `&[data-muted='true']`  | `&[data-lk-muted='true']`  |\n```\n\n----------------------------------------\n\nTITLE: Implementing useClearPinButton Hook in React\nDESCRIPTION: This hook manages the properties for a button to clear pinned participants or tracks in a LiveKit room.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function useClearPinButton(props: ClearPinButtonProps): {\n    buttonProps: ClearPinButtonProps & {\n\n\n```\n\n----------------------------------------\n\nTITLE: Track Reference Type Check Functions\nDESCRIPTION: Functions for type checking and validation of track references and placeholders.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isTrackReference(trackReference: unknown): trackReference is TrackReference;\n\nexport function isTrackReferencePinned(trackReference: TrackReferenceOrPlaceholder, pinState: PinState | undefined): boolean;\n\nexport function isTrackReferencePlaceholder(trackReference?: TrackReferenceOrPlaceholder): trackReference is TrackReferencePlaceholder;\n```\n\n----------------------------------------\n\nTITLE: Defining TrackTranscriptionOptions Interface\nDESCRIPTION: This interface defines options for track transcription, including buffer size and a callback for new transcription segments. It's marked as alpha.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TrackTranscriptionOptions {\n    bufferSize?: number;\n    onTranscription?: (newSegments: TranscriptionSegment[]) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParticipantPlaceholder Component in React\nDESCRIPTION: This code defines a React component for rendering a placeholder for a participant. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ParticipantPlaceholder: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: LiveKit Components Type Definitions\nDESCRIPTION: TypeScript type definitions and imports for LiveKit Components React package, including dependencies from livekit-client and React core libraries.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AudioAnalyserOptions } from 'livekit-client';\nimport { AudioCaptureOptions } from 'livekit-client';\nimport { CaptureOptionsBySource } from '../../../packages/core/dist/index.d.ts';\nimport { CaptureOptionsBySource as CaptureOptionsBySource_2 } from '../../packages/core/dist/index.d.ts';\nimport { ChatMessage } from '../packages/core/dist/index.d.ts';\nimport { ChatOptions } from '../../packages/core/dist/index.d.ts';\nimport { ConnectionQuality } from 'livekit-client';\nimport { ConnectionState as ConnectionState_2 } from 'livekit-client';\nimport { CreateLocalTracksOptions } from 'livekit-client';\nimport { DataPublishOptions } from 'livekit-client';\nimport { DisconnectReason } from 'livekit-client';\nimport { GridLayoutDefinition } from '../packages/core/dist/index.d.ts';\nimport { GridLayoutDefinition as GridLayoutDefinition_2 } from '../../packages/core/dist/index.d.ts';\nimport { GridLayoutInfo } from '../../packages/core/dist/index.d.ts';\nimport { HTMLAttributes } from 'react';\nimport { isTrackReference } from '../packages/core/dist/index.d.ts';\nimport { KrispNoiseFilterProcessor } from '@livekit/krisp-noise-filter';\nimport { LocalAudioTrack } from 'livekit-client';\nimport { LocalParticipant } from 'livekit-client';\nimport { LocalTrack } from 'livekit-client';\nimport { LocalTrackPublication } from 'livekit-client';\nimport { LocalUserChoices } from '../packages/core/dist/index.d.ts';\nimport { LocalUserChoices as LocalUserChoices_2 } from '../../packages/core/dist/index.d.ts';\nimport { LocalVideoTrack } from 'livekit-client';\nimport { MediaDeviceFailure } from 'livekit-client';\n```\n\n----------------------------------------\n\nTITLE: Defining QualityGoodIcon Component in React\nDESCRIPTION: This code defines a React component for rendering an icon indicating good quality. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const QualityGoodIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for LiveKit Components Core\nDESCRIPTION: This code snippet shows the import statements for various dependencies used in the @livekit/components-core package. It includes imports from 'livekit-client', 'rxjs', '@livekit/protocol', and other related modules.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AudioCaptureOptions } from 'livekit-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { ChatMessage } from 'livekit-client';\nimport { ConnectionQuality } from 'livekit-client';\nimport { ConnectionState } from 'livekit-client';\nimport { DataPacket_Kind } from 'livekit-client';\nimport { DataPublishOptions } from 'livekit-client';\nimport { LocalAudioTrack } from 'livekit-client';\nimport { LocalParticipant } from 'livekit-client';\nimport { LocalVideoTrack } from 'livekit-client';\nimport loglevel from 'loglevel';\nimport { Observable } from 'rxjs';\nimport { Participant } from 'livekit-client';\nimport { ParticipantEvent } from 'livekit-client';\nimport type { ParticipantEventCallbacks } from 'livekit-client/dist/src/room/participant/Participant';\nimport type { ParticipantKind } from 'livekit-client';\nimport type { ParticipantPermission } from '@livekit/protocol';\nimport type { PublicationEventCallbacks } from 'livekit-client/dist/src/room/track/TrackPublication';\nimport { RemoteParticipant } from 'livekit-client';\nimport { Room } from 'livekit-client';\nimport { RoomEvent } from 'livekit-client';\nimport type { RoomEventCallbacks } from 'livekit-client/dist/src/room/Room';\nimport type { ScreenShareCaptureOptions } from 'livekit-client';\nimport { SendTextOptions } from 'livekit-client';\nimport { setLogLevel as setLogLevel_2 } from 'livekit-client';\nimport type { TextStreamInfo } from 'livekit-client/dist/src/room/types';\nimport { Track } from 'livekit-client';\nimport { TrackEvent as TrackEvent_2 } from 'livekit-client';\nimport { TrackPublication } from 'livekit-client';\nimport type { TrackPublishOptions } from 'livekit-client';\nimport { TranscriptionSegment } from 'livekit-client';\nimport type { VideoCaptureOptions } from 'livekit-client';\n```\n\n----------------------------------------\n\nTITLE: Defining SpinnerIcon Component in React\nDESCRIPTION: This code defines a React component for rendering a spinner icon. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const SpinnerIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining MicDisabledIcon Component in React\nDESCRIPTION: This code defines a React component for rendering a microphone disabled icon. It's marked as internal and undocumented.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const MicDisabledIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Environment Detection Function\nDESCRIPTION: Internal function to detect if code is running in web environment.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/etc/components-core.api.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isWeb(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Unsupported Prefix Transformations in LiveKit Component Styles\nDESCRIPTION: Demonstrates prefix transformations that are currently not supported in the LiveKit styling system, specifically for attribute selectors that use attr().\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/styles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| no prefix                     | with `lk` prefix                 |\n| ----------------------------- | -------------------------------- |\n| `attr(data-participant-name)` | `attr(data-lk-participant-name)` |\n```\n\n----------------------------------------\n\nTITLE: Implementing TrackRefContextIfNeeded Component in React\nDESCRIPTION: This function component wraps children with a TrackRefContext provider if a trackRef prop is provided. It's marked as internal and useful for conditionally providing track reference context.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function TrackRefContextIfNeeded(props: React_2.PropsWithChildren<{\n    trackRef?: TrackReferenceOrPlaceholder_3;\n}>): React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Package Version Header\nDESCRIPTION: Markdown section headers defining the package name and version numbers with corresponding changes.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @livekit/components-react\n\n## 2.9.2\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Reference\nDESCRIPTION: Markdown showing dependency update references with commit hashes.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nUpdated dependencies [[`a1b5f5c09e4e6b6c31f030a6d10e6a3f7df2a784`](https://github.com/livekit/components-js/commit/a1b5f5c09e4e6b6c31f030a6d10e6a3f7df2a784)]:\n  - @livekit/components-core@0.12.4\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Table for LiveKit Components JS Packages\nDESCRIPTION: This markdown snippet creates a table listing the available packages in the LiveKit Components JS project. It includes package names with links to their respective documentation pages.\nSOURCE: https://github.com/livekit/components-js/blob/main/docs/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package                                        | Description |\n| ---------------------------------------------- | ----------- |\n| [@livekit/components-core](./core//index.md)   |             |\n| [@livekit/components-react](./react//index.md) |             |\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Updates in Markdown\nDESCRIPTION: Changelog entries showing version updates and dependency changes for the LiveKit components packages, with commit references and version numbers.\nSOURCE: https://github.com/livekit/components-js/blob/main/tooling/docs-gen/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`74d38659`](https://github.com/livekit/components-js/commit/74d386592b1e593550b5942e2720d38a86a53c55), [`999eb2ca`](https://github.com/livekit/components-js/commit/999eb2ca85f6d9cab16988f2815974d5f394e4ee)]:\n  - @livekit/components-react@1.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenShareIcon Component in React\nDESCRIPTION: This code defines a React component for rendering a screen share icon. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ScreenShareIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining ScreenShareStopIcon Component in React\nDESCRIPTION: This code defines a React component for rendering an icon to stop screen sharing. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const ScreenShareStopIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining QualityExcellentIcon Component in React\nDESCRIPTION: This code defines a React component for rendering an icon indicating excellent quality. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const QualityExcellentIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining QualityUnknownIcon Component in React\nDESCRIPTION: This code defines a React component for rendering an icon indicating unknown quality. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const QualityUnknownIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Defining UnfocusToggleIcon Component in React\nDESCRIPTION: This code defines a React component for rendering an icon to toggle unfocus state. It's marked as internal and undocumented, with a warning about missing underscore prefix.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/etc/components-react.api.md#2025-04-23_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const UnfocusToggleIcon: (props: SVGProps<SVGSVGElement>) => React_2.JSX.Element;\n```\n\n----------------------------------------\n\nTITLE: Running LiveKit NextJS Examples with pnpm\nDESCRIPTION: Command to start the Next.js development server from the root of the monorepo. After running this command, users can navigate to http://localhost:3000/ to access the examples.\nSOURCE: https://github.com/livekit/components-js/blob/main/examples/nextjs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:next\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Version history and change documentation for @livekit/api-documenter package showing patch version updates and dependency changes.\nSOURCE: https://github.com/livekit/components-js/blob/main/tooling/api-documenter/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @livekit/api-documenter\n\n## 7.22.22\n\n### Patch Changes\n\n- Include useKrispNoiseFilter in generated docs - [#1055](https://github.com/livekit/components-js/pull/1055) ([@bcherry](https://github.com/bcherry))\n\n## 7.22.21\n\n### Patch Changes\n\n- Fix rushstack deps - [#971](https://github.com/livekit/components-js/pull/971) ([@lukasIO](https://github.com/lukasIO))\n\n- Updated dependencies [[`d53329716f083bd13b421e7b9a12bbd5e4bb363b`](https://github.com/livekit/components-js/commit/d53329716f083bd13b421e7b9a12bbd5e4bb363b)]:\n  - eslint-config-lk-custom@0.1.3\n\n## 7.22.20\n\n### Patch Changes\n\n- Fix docs package parameter extraction and forwardRefs components typing - [#912](https://github.com/livekit/components-js/pull/912) ([@lukasIO](https://github.com/lukasIO))\n\n## 7.22.19\n\n### Patch Changes\n\n- Automatically generate doc meta-data.json file - [#601](https://github.com/livekit/components-js/pull/601) ([@Ocupe](https://github.com/Ocupe))\n\n## 7.22.18\n\n### Patch Changes\n\n- Fix dependency annoyance with `@rushstack/heft` by adding it as a dev dependency. - [#587](https://github.com/livekit/components-js/pull/587) ([@Ocupe](https://github.com/Ocupe))\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, improvements, bug fixes and breaking changes in the LiveKit Components JS library.\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/core/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Remove unnecessary props from audio and video elements - [#569](https://github.com/livekit/components-js/pull/569) ([@mpnri](https://github.com/mpnri))\n\n- Add unread chat message badge - [#563](https://github.com/livekit/components-js/pull/563) ([@lukasIO](https://github.com/lukasIO))\n\n- Add MediaDevicesError event for use local participant - [#566](https://github.com/livekit/components-js/pull/566) ([@mpnri](https://github.com/mpnri))\n\n- Rename GridLayout to GridLayoutDefinition in core to resolve name overlap. - [#567](https://github.com/livekit/components-js/pull/567) ([@Ocupe](https://github.com/Ocupe))\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Meta Component\nDESCRIPTION: Imports the Meta component from Storybook's addon-docs package for documentation configuration.\nSOURCE: https://github.com/livekit/components-js/blob/main/docs/storybook/stories/prefabs/Prefabs.stories.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Version History and Dependencies Markdown\nDESCRIPTION: Markdown formatted changelog showing version updates and dependency changes for the @livekit/component-example-next package\nSOURCE: https://github.com/livekit/components-js/blob/main/examples/nextjs/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @livekit/component-example-next\n\n## 0.2.55\n\n### Patch Changes\n\n- Updated dependencies [[`1c48a648d8d4cfa9828fdac67dfc9f1de96e0e1b`](https://github.com/livekit/components-js/commit/1c48a648d8d4cfa9828fdac67dfc9f1de96e0e1b), [`a1b5f5c09e4e6b6c31f030a6d10e6a3f7df2a784`](https://github.com/livekit/components-js/commit/a1b5f5c09e4e6b6c31f030a6d10e6a3f7df2a784)]:\n  - @livekit/components-react@2.9.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component\nDESCRIPTION: Sets up the Storybook documentation page title for the Prefabs introduction section.\nSOURCE: https://github.com/livekit/components-js/blob/main/docs/storybook/stories/prefabs/Prefabs.stories.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Prefabs/Introduction\" />\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown Entries\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, pull requests, and dependency updates for the LiveKit Components JavaScript library\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- use device specific selector for default control bar - [#153](https://github.com/livekit/components-js/pull/153) ([@lukasIO](https://github.com/lukasIO))\n\n- Fix TrackLoop - [#144](https://github.com/livekit/components-js/pull/144) ([@Ocupe](https://github.com/Ocupe))\n\n- Add TileLoop for displaying participants without tracks, rename contexts - [#170](https://github.com/livekit/components-js/pull/170) ([@lukasIO](https://github.com/lukasIO))\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Request Links\nDESCRIPTION: Markdown links formatting for GitHub pull request references\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[#444](https://github.com/livekit/components-js/pull/444)\n[#465](https://github.com/livekit/components-js/pull/465)\n[#464](https://github.com/livekit/components-js/pull/464)\n```\n\n----------------------------------------\n\nTITLE: Patch Changes Log Entry - API Documentation Update\nDESCRIPTION: Documents a patch change related to API documenter code generation update with reference to pull request #597.\nSOURCE: https://github.com/livekit/components-js/blob/main/docs/docs/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- api documenter code gen update - [#597](https://github.com/livekit/components-js/pull/597) ([@Ocupe](https://github.com/Ocupe))\n```\n\n----------------------------------------\n\nTITLE: Version Number Formatting\nDESCRIPTION: Markdown headers showing version numbers in semantic versioning format\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.8.2\n## 0.8.1\n## 0.8.0\n## 0.7.3\n## 0.7.2\n## 0.7.1\n## 0.7.0\n## 0.6.2\n## 0.6.1\n## 0.6.0\n## 0.5.0\n## 0.4.1\n## 0.4.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Name in Markdown\nDESCRIPTION: This snippet shows how to display the package name '@livekit/api-documenter' in a Markdown heading format.\nSOURCE: https://github.com/livekit/components-js/blob/main/tooling/api-documenter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @livekit/api-documenter\n```\n\n----------------------------------------\n\nTITLE: Version 0.0.2 Release Notes\nDESCRIPTION: Documents version 0.0.2 release with patch changes related to documentation generation v3, referencing pull request #523.\nSOURCE: https://github.com/livekit/components-js/blob/main/docs/docs/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.2\n\n### Patch Changes\n\n- Docs gen v3 - [#523](https://github.com/livekit/components-js/pull/523) ([@Ocupe](https://github.com/Ocupe))\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Reference\nDESCRIPTION: Formatting for dependency version updates with commit references\nSOURCE: https://github.com/livekit/components-js/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[[`0bbacce`](https://github.com/livekit/components-js/commit/0bbaccea5e964f3d38925a49223b914a3e2076fe)]:\n  - @livekit/components-core@0.6.5\n```"
  }
]